[
    {
        "content": "<p>As every week, I'm proud to release the latest version of the Lean community fork, Lean 3.12.0.  Thanks to <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>!  Here is the changelog:</p>\n<p>Features:</p>\n<p>- tactic combinators with informative results (<a href=\"https://github.com/leanprover-community/lean/issues/212\">lean#212</a>)<br>\n  - <code>has_singleton</code> is a new typeclass (<a href=\"https://github.com/leanprover-community/lean/issues/217\">lean#217</a>)<br>\n  - Add instances for <code>has_repr name</code>, <code>has_repr case_tag</code>, and <code>has_to_format case_tag</code> (<a href=\"https://github.com/leanprover-community/lean/issues/230\">lean#230</a>)</p>\n<p>Changes:</p>\n<p>- <code>library/init/function</code>: use dot notation, add some docstrings (<a href=\"https://github.com/leanprover-community/lean/issues/216\">lean#216</a>)<br>\n  - <code>tactic.all_goals</code> is now called <code>tactic.all_goals'</code>, etc. (<a href=\"https://github.com/leanprover-community/lean/issues/212\">lean#212</a>)<br>\n  - <code>norm_num</code> is removed (<a href=\"https://github.com/leanprover-community/lean/issues/224\">lean#224</a>)<br>\n  - Parse <code>{a,b,c}</code> as right associative (<a href=\"https://github.com/leanprover-community/lean/issues/153\">lean#153</a>)<br>\n  - Refactor case tags (<a href=\"https://github.com/leanprover-community/lean/issues/228\">lean#228</a>)<br>\n  - Enable <code>pp.generalized_field_notation</code> by default (<a href=\"https://github.com/leanprover-community/lean/issues/227\">lean#227</a>)</p>",
        "id": 197556426,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589464102
    },
    {
        "content": "<p>Are there plans for bumping mathlib?</p>",
        "id": 197558896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589465273
    },
    {
        "content": "<p>I'm currently on the segfault with <a href=\"https://github.com/leanprover-community/lean/issues/234\">lean#234</a></p>",
        "id": 197560681,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589465468
    },
    {
        "content": "<p>I'm not saying you should do it. Many people contributed to this release. Many others could also help with moving mathlib onto it.</p>",
        "id": 197561631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589465848
    },
    {
        "content": "<p>Before I mess up again... what is a good branch name?</p>",
        "id": 197564292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589467082
    },
    {
        "content": "<p>I could of course go for <code>jmc-bump-to-3-12-0</code>, but I want something a bit more professional (-;</p>",
        "id": 197564378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589467108
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2681\">#2681</a> is the start of a draft PR</p>",
        "id": 197564754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589467275
    },
    {
        "content": "<p>I've added commits that fix all breakage due to my Lean PRs.</p>",
        "id": 197565657,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589467643
    },
    {
        "content": "<p>I'll fix <code>logic/function</code></p>",
        "id": 197565926,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589467770
    },
    {
        "content": "<p>Unless someone else is already on it</p>",
        "id": 197565951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589467781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Please go ahead. I tried a global replace, but borked it.</p>",
        "id": 197566184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589467897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Doesn't it need more changes in the rest of mathlib?</p>",
        "id": 197569454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589469051
    },
    {
        "content": "<p>Yes, it does.</p>",
        "id": 197569489,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589469066
    },
    {
        "content": "<p>Can we do a smart global search replace?</p>",
        "id": 197569553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589469090
    },
    {
        "content": "<p>I did things in the wrong order, and ended up replacing substrings that shouldn't have been replaced.</p>",
        "id": 197569604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589469109
    },
    {
        "content": "<p>No, I want to use dot notation.</p>",
        "id": 197569605,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589469110
    },
    {
        "content": "<p>Aha, so it's going to be a lot of work.</p>",
        "id": 197569674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589469123
    },
    {
        "content": "<p>I thought we could do that in a follow-up PR.</p>",
        "id": 197569701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589469132
    },
    {
        "content": "<p>I'm looking for editable grep mode for Emacs.</p>",
        "id": 197569709,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589469135
    },
    {
        "content": "<p>Sorry, can't help you there. Maybe Reid can?</p>",
        "id": 197569769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589469158
    },
    {
        "content": "<p>OK, let's postpone this to another PR. I'll try to make <code>sed</code> do the job.</p>",
        "id": 197569819,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589469183
    },
    {
        "content": "<p>Thanks for pushing <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 197571822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589469926
    },
    {
        "content": "<p>Next up is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">584</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197571836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589469935
    },
    {
        "content": "<p>I guess this is now because of the <code>has_singleton</code> stuff.</p>",
        "id": 197571871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589469949
    },
    {
        "content": "<p>oh boy</p>",
        "id": 197572002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589469985
    },
    {
        "content": "<p>What is the best way forward?</p>",
        "id": 197572373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589470127
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">singleton_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 197572399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589470139
    },
    {
        "content": "<p>Are we going to rename such things in this PR?</p>",
        "id": 197572419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589470146
    },
    {
        "content": "<p>I guess it should become <code>singleton_eq_insert_empty_right</code>?</p>",
        "id": 197572474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589470168
    },
    {
        "content": "<p>I would like to keep this PR as small as possible, I think. And then clean up/massage in later PRs</p>",
        "id": 197572570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589470203
    },
    {
        "content": "<p>I've fixed <code>data/set/basic</code></p>",
        "id": 197573355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589470560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I still get errors related to injective/surjective</p>",
        "id": 197573561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589470625
    },
    {
        "content": "<p>In <code>data.equiv.basic</code></p>",
        "id": 197573591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589470637
    },
    {
        "content": "<p>I'm pushing one or two renames at a time.</p>",
        "id": 197573643,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589470661
    },
    {
        "content": "<p><code>singleton_def</code> is now <code>(insert_singleton_eq a).symm</code></p>",
        "id": 197574355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589470941
    },
    {
        "content": "<p>Where <code>insert_singleton_eq</code> comes from <code>is_lawful_singleton</code> instance.</p>",
        "id": 197574398,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589470961
    },
    {
        "content": "<p>And <code>mem_singleton_iff</code> is now <code>iff.rfl</code></p>",
        "id": 197574473,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589470989
    },
    {
        "content": "<p>Ok... is that better than what I did? Or does it not matter?</p>",
        "id": 197575341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589471358
    },
    {
        "content": "<p>Dinner now... I'll be back later.</p>",
        "id": 197575370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589471366
    },
    {
        "content": "<p>I answered before looking at your diff</p>",
        "id": 197575428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589471395
    },
    {
        "content": "<p>No need to use <code>ext</code></p>",
        "id": 197575584,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589471461
    },
    {
        "content": "<p>In <code>finset</code> I'm going to reuse <code>finset.singleton</code> for <code>has_singleton</code>.</p>",
        "id": 197576172,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589471695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> What's the status here?</p>",
        "id": 197589570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477220
    },
    {
        "content": "<p>Something I can help with?</p>",
        "id": 197589584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477226
    },
    {
        "content": "<p>I'm working on <code>finset</code>. You can choose some other file.</p>",
        "id": 197589629,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589477249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">106</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">bytecode</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">eval_horner&#39;</span>\n<span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num&#39;</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">143</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">bytecode</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main&#39;</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num&#39;</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">205</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">bytecode</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">eval_neg</span><span class=\"bp\">._</span><span class=\"n\">main&#39;</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num&#39;</span>\n</code></pre></div>\n\n\n<p>Is this good or bad news?</p>",
        "id": 197590047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477419
    },
    {
        "content": "<p>that's fine, <code>tactic.ring</code> was calling <code>tactic.norm_num</code> to evaluate some additions and multiplications, they just need to be redirected to the <code>norm_num</code> calls</p>",
        "id": 197590369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589477555
    },
    {
        "content": "<p>Is this something that a human sed like me can do?</p>",
        "id": 197590454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477599
    },
    {
        "content": "<p>I guess the mere fact that <code>tactic.norm_num</code> still exists means that I didn't do a good job in my PR to core.</p>",
        "id": 197590671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477690
    },
    {
        "content": "<p>But it's hidden in some file about <code>simp</code>.</p>",
        "id": 197590727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Please do not clean square rooms in a circular way: <a href=\"https://github.com/leanprover-community/lean/blob/aa5e30d24fefd13fb5b272522b9c08f9c5491d18/library/init/meta/simp_tactic.lean#L456\">https://github.com/leanprover-community/lean/blob/aa5e30d24fefd13fb5b272522b9c08f9c5491d18/library/init/meta/simp_tactic.lean#L456</a></p>",
        "id": 197590748,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589477722
    },
    {
        "content": "<p>But don't worry. It's not dangerous. It will just throw an error when you call it.  But it should be removed.</p>",
        "id": 197590874,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589477787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Yup, I also just found it.</p>",
        "id": 197590925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477833
    },
    {
        "content": "<p>Anyway, how should I fix this? What does</p>\n<blockquote>\n<p>redirected to the <code>norm_num</code> calls</p>\n</blockquote>\n<p>mean?</p>",
        "id": 197593797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479133
    },
    {
        "content": "<p>I think you can replace calls to <code>tactic.norm_num</code> with calls to <code>norm_num.derive'</code>? Or maybe <code>derive</code>.</p>",
        "id": 197594204,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589479311
    },
    {
        "content": "<p><code>derive'</code> seems right.</p>",
        "id": 197594328,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589479352
    },
    {
        "content": "<p>Thx, let me try</p>",
        "id": 197594523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479436
    },
    {
        "content": "<p>Hmmmz, doesn't seem to help. Same error message.</p>",
        "id": 197594808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479551
    },
    {
        "content": "<p>I'll prep a PR shortly for this. You (I) can call the internal <code>norm_num</code> functions and avoid some of the dispatching</p>",
        "id": 197594822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589479558
    },
    {
        "content": "<p>it also allows us to cache instances across multiple <code>norm_num</code> invocations in the same <code>ring</code> call, which we couldn't do before, so a possible performance improvement</p>",
        "id": 197594959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589479609
    },
    {
        "content": "<p>For <code>eval_neg</code> it did help to tag on <code>.derive'</code></p>",
        "id": 197595020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479640
    },
    {
        "content": "<p>Oh yeah, ignore me, I'm working on a version of mathlib like two commits before the norm_num update.</p>",
        "id": 197595258,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589479742
    },
    {
        "content": "<p>Is the problem that <code>eval_add</code> is passing on a pair, and <code>norm_num.derive'</code> expects a single number?</p>",
        "id": 197595267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Ooh, it did fix 1 error (-;</p>",
        "id": 197595296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479763
    },
    {
        "content": "<p>What's the problem with the drop in replacement of <code>derive'</code>?</p>",
        "id": 197595439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589479822
    },
    {
        "content": "<p>that should also work</p>",
        "id": 197595481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589479842
    },
    {
        "content": "<p>I really don't understand the error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">bytecode</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main&#39;</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num&#39;</span>\n</code></pre></div>",
        "id": 197595564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479884
    },
    {
        "content": "<p>I don't see any reference to <code>tactic.norm_num</code> anymore</p>",
        "id": 197595590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479900
    },
    {
        "content": "<p>/me stupid</p>",
        "id": 197595679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479929
    },
    {
        "content": "<p>I missed an error higher up in the file</p>",
        "id": 197595702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479940
    },
    {
        "content": "<p>It's all fixed now. Thanks Rob and Mario!</p>",
        "id": 197595717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589479948
    },
    {
        "content": "<p>Hmm, but <code>ring</code> is now failing in <code>tactic.omega.eq_elim</code> on:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">get</span> <span class=\"n\">n</span> <span class=\"n\">as</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">),</span>\n<span class=\"n\">a_n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">get</span> <span class=\"n\">n</span> <span class=\"n\">as</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">a_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">sgm</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">sym_sym</span> <span class=\"n\">m</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">coeffs</span><span class=\"bp\">.</span><span class=\"n\">val_except</span> <span class=\"n\">n</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">sym_sym</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">as</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">sym_sym</span> <span class=\"n\">m</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">coeffs</span><span class=\"bp\">.</span><span class=\"n\">val_except</span> <span class=\"n\">n</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">sym_sym</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">sgm</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 197596810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589480450
    },
    {
        "content": "<p>It's really weird, it's something that <code>ring</code> should easily solve.</p>",
        "id": 197597690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589480828
    },
    {
        "content": "<p>Ugly fix: <a href=\"https://github.com/leanprover-community/mathlib/pull/2681/commits/87e05736402caefbb7febac7983992a29616c04d\">https://github.com/leanprover-community/mathlib/pull/2681/commits/87e05736402caefbb7febac7983992a29616c04d</a></p>",
        "id": 197598488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589481138
    },
    {
        "content": "<p>It seems that (all?) other errors are about singleton stuff. How's that going <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> ?</p>",
        "id": 197599016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589481367
    },
    {
        "content": "<p>Almost there.</p>",
        "id": 197599141,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589481431
    },
    {
        "content": "<p>Fixed <code>multiset</code> and <code>finset</code> files.</p>",
        "id": 197599307,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589481505
    },
    {
        "content": "<p>A new inconvenience: <code>(({a} : finset α) : set α)</code> is no longer defeq <code>{a}</code></p>",
        "id": 197599388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589481541
    },
    {
        "content": "<p>Oof I wonder if this is gonna kill my combinatorics project... We shall see! (At least I was warned by basically everyone that this would happen)</p>",
        "id": 197599502,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589481597
    },
    {
        "content": "<p>I can't make <code>a ∈ ({b} : finset α)</code> defeq <code>a = b</code> because it comes from lists.</p>",
        "id": 197599716,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589481672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> you mean </p>\n<blockquote>\n<p><code>(({a} : finset α) : set α)</code> is no longer defeq <code>{a}</code><br>\n? Are you using sets that much? I thought it would all be finset...</p>\n</blockquote>",
        "id": 197599788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589481702
    },
    {
        "content": "<p>I mean all the set and finset changes</p>",
        "id": 197599866,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589481728
    },
    {
        "content": "<p>Yury fixed all of mathlib in ~ 2hours</p>",
        "id": 197599907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589481746
    },
    {
        "content": "<p>No, I've just fixed <code>finset.lean</code></p>",
        "id": 197599933,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589481759
    },
    {
        "content": "<p>Oooooh..... <span aria-label=\"no mouth\" class=\"emoji emoji-1f636\" role=\"img\" title=\"no mouth\">:no_mouth:</span></p>",
        "id": 197599962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589481774
    },
    {
        "content": "<p>This included removing <code>finset.singleton</code></p>",
        "id": 197600032,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589481807
    },
    {
        "content": "<p>that's gonna hurt me</p>",
        "id": 197600179,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589481851
    },
    {
        "content": "<p>You just use <code>({a} : finset α)</code> instead</p>",
        "id": 197600228,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589481876
    },
    {
        "content": "<p><code>ring</code> fails in <code>quadratic_discriminant</code></p>",
        "id": 197600270,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589481896
    },
    {
        "content": "<p>oh fair enough shouldn't be too bad then</p>",
        "id": 197600272,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589481898
    },
    {
        "content": "<p>You should PR your partial progress.</p>",
        "id": 197600344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589481932
    },
    {
        "content": "<p>Exactly, if you'd PR'd it to mathlib then Yury would be fixing your code right now too <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 197600372,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589481950
    },
    {
        "content": "<p>Isn't <code>fold op [a] </code> defeq to <code>a</code> now on lists. I thought there was a change at some point. So if <code>mem</code> was defined using fold then the defeq might work.</p>",
        "id": 197600480,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589481984
    },
    {
        "content": "<p>Yeah I know this is my fault</p>",
        "id": 197600526,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589482005
    },
    {
        "content": "<p>my real hope is that this makes singleton finsets easier to use so that some of my less pleasant proofs can actually be improved</p>",
        "id": 197600641,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589482057
    },
    {
        "content": "<p>But this will break <code>a ∈ b::s</code> defeq <code>a = b ∨ a ∈ s</code>.</p>",
        "id": 197600669,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589482073
    },
    {
        "content": "<p>I think <code>ring</code> is simply broken.</p>",
        "id": 197600950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589482170
    },
    {
        "content": "<p>I fixed the errors in <code>tactic/ring</code> but I think I \"broke\" it at the same time.</p>",
        "id": 197601004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589482192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I can't fix this, I fear.</p>",
        "id": 197601133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589482236
    },
    {
        "content": "<p>I fixed a few more files. Waiting for a fixed <code>tactic/ring</code>.</p>",
        "id": 197624109,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589493815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could you please take a look at <code>ring</code>?</p>",
        "id": 197645126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589513752
    },
    {
        "content": "<p>I'm working on it as we speak</p>",
        "id": 197645172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589513768
    },
    {
        "content": "<p>Awesome</p>",
        "id": 197645270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589513980
    },
    {
        "content": "<p>So I guess we should merge <a href=\"https://github.com/leanprover-community/mathlib/issues/2685\">#2685</a> (new <code>norm_num</code> in <code>ring</code>) before the bump to 3.12.0</p>",
        "id": 197645411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514204
    },
    {
        "content": "<p>It's really great to see all those <code>finset.singleton x</code> be replaced by <code>{x}</code>.</p>",
        "id": 197646535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589515823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think it makes sense to merge your PR into this bump PR already?</p>",
        "id": 197647443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589517089
    },
    {
        "content": "<p>Still keep them as separate PRs, of course</p>",
        "id": 197647449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589517113
    },
    {
        "content": "<p>Really, my question is: Is your PR now stable, or do you still expect a lot of changes?</p>",
        "id": 197647491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589517140
    },
    {
        "content": "<p>If it compiles I'm happy with it</p>",
        "id": 197647499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I've merged Mario's ring fixes. Just so you know.</p>",
        "id": 197647756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589517558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Please have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/2681#discussion_r425563117\">this docstring</a></p>",
        "id": 197648593,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589518901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Oops, didn't realise you were still working on this branch</p>",
        "id": 197648679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589519039
    },
    {
        "content": "<p>I just pushed some stuff</p>",
        "id": 197648732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589519077
    },
    {
        "content": "<p>I'm afraid we can't really parallelise this...</p>",
        "id": 197648744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589519102
    },
    {
        "content": "<p>Or maybe I will just build, and ignore the first 20 errors.</p>",
        "id": 197648764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589519126
    },
    {
        "content": "<p>Or maybe I'll go eat something and work on a paper for a few hours.</p>",
        "id": 197648821,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589519165
    },
    {
        "content": "<p>I pushed a bit. Now it's time to break my fast.</p>",
        "id": 197650322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589521579
    },
    {
        "content": "<p>Pushed determinant.</p>",
        "id": 197652077,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589523962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Are you working on this again?</p>",
        "id": 197654285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589526438
    },
    {
        "content": "<p>I'll fix <code>fractional_ideal</code>, then make another break.</p>",
        "id": 197654440,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589526522
    },
    {
        "content": "<p>Ok, good</p>",
        "id": 197654465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589526539
    },
    {
        "content": "<p>I pushed a fix to <code>topology/instances/ennreal</code></p>",
        "id": 197655572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589527439
    },
    {
        "content": "<p>Pushed <code>ring_theory/polynomial</code>, fixed <code>ring_theory/adjoin</code> locally</p>",
        "id": 197656926,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589528583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Could you look at <a href=\"https://github.com/leanprover-community/mathlib/pull/2681/commits/5d1e279722120258238737ca5f95edacb4a6104b\">https://github.com/leanprover-community/mathlib/pull/2681/commits/5d1e279722120258238737ca5f95edacb4a6104b</a></p>",
        "id": 197657067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589528683
    },
    {
        "content": "<p>I don't like it</p>",
        "id": 197657073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589528686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I've merged <code>ring_faster</code> again. And pushed.</p>",
        "id": 197658877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589529912
    },
    {
        "content": "<p>Pushed</p>",
        "id": 197659060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589530015
    },
    {
        "content": "<p>Opening borel_space</p>",
        "id": 197667341,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589535054
    },
    {
        "content": "<p>That's about the last thing with errors, I think</p>",
        "id": 197668158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589535532
    },
    {
        "content": "<p>And something in <code>geometry/manifold/real_instances</code>. After that, maybe we're done <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 197668253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589535593
    },
    {
        "content": "<p>A side effect of the <code>singleton</code> change: we can't do <code>rintro rfl</code> on <code>(H : a ∈ {b})</code>. We can do <code>rintro (rfl|H)</code> but it unfolds <code>b</code>.</p>",
        "id": 197668377,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589535663
    },
    {
        "content": "<p>Yup, I noticed this... but I think it's minor compared to all the wins that we got.</p>",
        "id": 197668842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589535957
    },
    {
        "content": "<p>Hooray, Yury pushed. Are we done?</p>",
        "id": 197670087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536724
    },
    {
        "content": "<p>No</p>",
        "id": 197670573,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589536996
    },
    {
        "content": "<p>Oho... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 197670754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537093
    },
    {
        "content": "<p>I see... measure_theory/integration. Are you on it <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> ? I can also do it</p>",
        "id": 197670790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537115
    },
    {
        "content": "<p>Done.</p>",
        "id": 197671029,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589537273
    },
    {
        "content": "<p><code>leanpkg build</code> succeeded.</p>",
        "id": 197671417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589537530
    },
    {
        "content": "<p>I've undrafted the PR</p>",
        "id": 197673879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589539404
    },
    {
        "content": "<p>But it depends on the norm_num PR</p>",
        "id": 197673887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589539412
    },
    {
        "content": "<p>Waiting for lint</p>",
        "id": 197673892,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589539423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Lean.203.2E12.2E0/near/197668377\">said</a>:</p>\n<blockquote>\n<p>A side effect of the <code>singleton</code> change: we can't do <code>rintro rfl</code> on <code>(H : a ∈ {b})</code>. We can do <code>rintro (rfl|H)</code> but it unfolds <code>b</code>.</p>\n</blockquote>\n<p>Does <code>rintro &lt;&gt;</code> work? I usually try this when <code>rfl</code> doesn't work</p>",
        "id": 197699883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589553159
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/issues/2681\">#2681</a> is ready</p>",
        "id": 197719060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589560925
    },
    {
        "content": "<p>There is a merge conflict in ring.</p>",
        "id": 197722110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589562296
    },
    {
        "content": "<p>Fixed</p>",
        "id": 197722417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589562435
    }
]