[
    {
        "content": "<p>does <code>mathlib</code> already know that pointwise limits of linear maps are linear (in a TVS)? If so, where is that? I expected to find it in <code>topology/algebra/module</code> but I didn't see it there.</p>",
        "id": 264366999,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639084346
    },
    {
        "content": "<p>For what it's worth, this is the version I am thinking of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.module</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M‚ÇÅ</span> <span class=\"n\">M‚ÇÇ</span> <span class=\"n\">R</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M‚ÇÅ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M‚ÇÅ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_add</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_smul</span> <span class=\"n\">R</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">linear_map_of_pointwise_tendsto</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">l.ne_bot</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add'</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">tendsto.add</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">‚Ä¢</span>  <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">‚Ä¢</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_smul'</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">tendsto.const_smul</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264371312,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639086377
    },
    {
        "content": "<p>I don't think that we have it as a separate definition. There is a proof of this fact inside <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.complete_space/src\">src#continuous_linear_map.complete_space</a>. Once you add a standalone definition, please replace <code>let Glin : ... := ...</code> with this new definition.</p>",
        "id": 264371694,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639086562
    },
    {
        "content": "<p>Sure, do you think <code>topology/algebra/module</code> is the correct place to add this?</p>",
        "id": 264372253,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639086812
    },
    {
        "content": "<p>Yes. And I think that we should have a version for <code>add_monoid_hom</code>s too.</p>",
        "id": 264373252,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639087292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> By the way, I like to use the slightly shorter</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>to express pointwise convergence, rather than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>You can get back and forth between the two forms using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_pi_nhds\">docs#tendsto_pi_nhds</a>.</p>",
        "id": 264382660,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639092753
    }
]