[
    {
        "content": "<p>So... I've been trying to implement <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s suggestion that I define the coercion allowing <code>F X</code> for a functor <code>F</code> on an object <code>X</code>, and define a @[simp] lemma unfolding the coercion.</p>",
        "id": 130958740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533532491
    },
    {
        "content": "<p>I immediately run into trouble, however, where <code>simp</code> fails to apply the simp lemma, because a <code>motive is not correct</code>:</p>",
        "id": 130958750,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533532521
    },
    {
        "content": "<p>Here's my slightly minimised example:</p>",
        "id": 130958756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533532549
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>namespace category_theory\n\nuniverses u v\n\nmeta def obviously := `[skip]\n\nclass category (Obj : Type u) : Type (max u (v+1)) :=\n(Hom     : Obj ‚Üí Obj ‚Üí Type v)\n(id      : Œ† X : Obj, Hom X X)\n(comp    : Œ† {X Y Z : Obj}, Hom X Y ‚Üí Hom Y Z ‚Üí Hom X Z)\n(id_comp : ‚àÄ {X Y : Obj} (f : Hom X Y), comp (id X) f = f . obviously)\n(comp_id : ‚àÄ {X Y : Obj} (f : Hom X Y), comp f (id Y) = f . obviously)\n(assoc   : ‚àÄ {W X Y Z : Obj} (f : Hom W X) (g : Hom X Y) (h : Hom Y Z), comp (comp f g) h = comp f (comp g h) . obviously)\n\nnotation `ùüô` := category.id -- type as \\b1\ninfixr ` ‚â´ `:80 := category.comp -- type as \\gg\ninfixr ` ‚ü∂ `:10 := category.Hom -- type as \\h\n\nattribute [simp] category.id_comp category.comp_id category.assoc\n\nuniverses u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ\n\nstructure Functor (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{u‚ÇÇ v‚ÇÇ} D] : Type (max u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ) :=\n(obj           : C ‚Üí D)\n(map           : Œ† {X Y : C}, (X ‚ü∂ Y) ‚Üí ((obj X) ‚ü∂ (obj Y)))\n(map_id        : ‚àÄ (X : C), map (ùüô X) = ùüô (obj X) . obviously)\n(functoriality : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (f ‚â´ g) = (map f) ‚â´ (map g) . obviously)\n\nattribute [simp] Functor.map_id Functor.functoriality\n\ninfixr ` ‚Üù `:70 := Functor       -- type as \\lea -- unfortunately ‚áí (`\\functor`) is taken by core.\n\nnamespace Functor\n\nsection\nvariables {C : Type u‚ÇÅ} [ùíû : category.{u‚ÇÅ v‚ÇÅ} C] {D : Type u‚ÇÇ} [ùíü : category.{u‚ÇÇ v‚ÇÇ} D]\ninclude ùíû ùíü\n\ninstance : has_coe_to_fun (C ‚Üù D) :=\n{ F   := Œª F, C ‚Üí D,\n  coe := Œª F, F.obj }\n\n@[simp] lemma unfold_obj_coercion (F : C ‚Üù D) (X : C) : F X = F.obj X := by refl\nend\n\nsection\nvariables {C : Type u‚ÇÅ} [ùíû : category.{u‚ÇÅ v‚ÇÅ} C] {D : Type u‚ÇÇ} [ùíü : category.{u‚ÇÇ v‚ÇÇ} D] {E : Type u‚ÇÉ} [‚Ñ∞ : category.{u‚ÇÉ v‚ÇÉ} E]\ninclude ùíû ùíü ‚Ñ∞\n\nset_option trace.check true\n\ndefinition comp (F : C ‚Üù D) (G : D ‚Üù E) : C ‚Üù E :=\n{ obj    := Œª X, G (F X),\n  map    := Œª _ _ f, G.map (F.map f),\n  map_id := begin\n             intros,\n             simp, /- why didn&#39;t that unfold the coercion? -/\n             rw unfold_obj_coercion F X /- oh. -/\n            end,\n  functoriality := begin intros, simp end }\nend\n\nend Functor\n\nend category_theory\n</pre></div>",
        "id": 130958758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533532553
    },
    {
        "content": "<p>(Being told my motive is not correct always makes me feel very guilty.)</p>",
        "id": 130958801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533532578
    },
    {
        "content": "<p>Hopefully I'm just doing something dumb here...</p>",
        "id": 130958803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533532610
    },
    {
        "content": "<hr>",
        "id": 130958904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533532840
    },
    {
        "content": "<p>You have to use <code>dsimp</code></p>",
        "id": 130958979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533532987
    },
    {
        "content": "<p>is there a reason you use <code>by refl</code> instead of <code>rfl</code> to prove rfl-lemmas?</p>",
        "id": 130958983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533533033
    },
    {
        "content": "<p>this messes up dsimp</p>",
        "id": 130958989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533533043
    },
    {
        "content": "<p>ah..</p>",
        "id": 130959028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533533071
    },
    {
        "content": "<p>I never knew that.</p>",
        "id": 130959029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533533076
    },
    {
        "content": "<p>Okay. That should fix my problems, but wow, gross! :-)</p>",
        "id": 130959043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533533112
    },
    {
        "content": "<p>You should always prove definitional theorems by <code>rfl</code></p>",
        "id": 130959047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533533125
    },
    {
        "content": "<p>because lean reads that specially: <code>A = B := rfl</code> means <code>A === B</code></p>",
        "id": 130959096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533533183
    },
    {
        "content": "<p>what does <code>by refl</code> do?</p>",
        "id": 130959098,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533533191
    },
    {
        "content": "<p>It proves the theorem normally, so you just end up learning <code>A = B</code></p>",
        "id": 130959100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533533208
    },
    {
        "content": "<p>surely that's the same thing</p>",
        "id": 130959101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533533208
    },
    {
        "content": "<p>but isn't the proof term the same either way?</p>",
        "id": 130959109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533533227
    },
    {
        "content": "<p>I guess I can check.</p>",
        "id": 130959111,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533533232
    },
    {
        "content": "<p>it is, but the literal token <code>rfl</code> is used by the lean parser to add the <code>@[_refl_lemma]</code> attribute</p>",
        "id": 130959112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533533262
    },
    {
        "content": "<p>It really is a pity that <code>refl</code> and <code>rfl</code> have such important but subtle distinctions, while only differing by one letter.</p>",
        "id": 130959361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533533667
    },
    {
        "content": "<p>And then <code>rfl</code> (without <code>e</code>) adds <code>@[_refl_lemma]</code> (with <code>e</code>)!</p>",
        "id": 130959364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533533695
    },
    {
        "content": "<p>to be fair, one is a tactic and one is a term, so they differ by more than one letter</p>",
        "id": 130960266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533535500
    },
    {
        "content": "<p>although you shouldn't confuse <code>rfl</code> with <code>eq.refl</code> either</p>",
        "id": 130960280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533535528
    },
    {
        "content": "<p>similarly there is <code>iff.rfl</code> and <code>iff.refl</code>, etc. The naming convention has <code>rfl</code> have an implicit argument and <code>refl</code> has an explicit arg</p>",
        "id": 130960327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533535568
    },
    {
        "content": "<p>Thanks for explaining this <code>rfl</code> vs <code>refl</code> thing. Switching to <code>rfl</code> really helps, both here and elsewhere. :-)</p>",
        "id": 130961287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533537067
    }
]