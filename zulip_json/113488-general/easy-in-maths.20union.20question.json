[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">uu</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">}),</span> <span class=\"n\">f</span> <span class=\"n\">uu</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>\"Two ways of writing a union are the same\".</p>",
        "id": 125196178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970477
    },
    {
        "content": "<p>This is a joy to prove in tactic mode using <code>set.subset.antisymm</code></p>",
        "id": 125196225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970503
    },
    {
        "content": "<p>is \"joy\" sarcasm?</p>",
        "id": 125196229,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523970519
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">Hy</span> <span class=\"k\">with</span> <span class=\"n\">V</span> <span class=\"n\">HV</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">HV</span> <span class=\"n\">HyV</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">uu</span> <span class=\"n\">HuV</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">uu</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">HuV</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">HyV</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">uu</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">uu</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">HuV</span><span class=\"bp\">⟩</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">Hy</span> <span class=\"k\">with</span> <span class=\"n\">V</span> <span class=\"n\">HV</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">HV</span> <span class=\"n\">HyV</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">HuV</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">HyV</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">HuV</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">}),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">HuV</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 125196232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970523
    },
    {
        "content": "<p>no, not at all</p>",
        "id": 125196238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970531
    },
    {
        "content": "<p>I feel like goals like this are ones that I know I can crush</p>",
        "id": 125196248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970548
    },
    {
        "content": "<p>so it's a bit like grinding in the early Zeldas</p>",
        "id": 125196250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970556
    },
    {
        "content": "<p>you know you can do it and it's quite fun to do</p>",
        "id": 125196251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970564
    },
    {
        "content": "<p>But for something of this form which is trivially true in maths</p>",
        "id": 125196252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970581
    },
    {
        "content": "<p>my understanding is that one should seek a short \"obfuscated\" proof</p>",
        "id": 125196291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970604
    },
    {
        "content": "<p>i.e. pull a couple of things out the library and you're done</p>",
        "id": 125196301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970615
    },
    {
        "content": "<p>so I looked through <code>data.set.lattice</code></p>",
        "id": 125196302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970625
    },
    {
        "content": "<p>and I found</p>",
        "id": 125196303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970627
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">sUnion_image</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">Union_eq_sUnion_image</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">sUnion_eq_Union</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sUnion_eq_Union&#39;</span>\n</pre></div>",
        "id": 125196308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970650
    },
    {
        "content": "<p>all of which said \"a union equals a union\"</p>",
        "id": 125196317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970680
    },
    {
        "content": "<p>but I just can't put them all together</p>",
        "id": 125196318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970687
    },
    {
        "content": "<p>So I am wondering if this is a hole in the library or if I'm missing a trick</p>",
        "id": 125196322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970708
    },
    {
        "content": "<p>I don't know this file very well</p>",
        "id": 125196324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970715
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">uu</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">}),</span> <span class=\"n\">f</span> <span class=\"n\">uu</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 125196365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523970729
    },
    {
        "content": "<p>I need to be quick because my daughter just woke up (she is sick and off school)</p>",
        "id": 125196369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970742
    },
    {
        "content": "<p>but while I'm here let me mention the independent question that I was talking about <code>existsi _</code> yesterday or so and Mario advised me not to use it, saying it was better to go back and fill it in later.</p>",
        "id": 125196376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970780
    },
    {
        "content": "<p>However in my proof above, I used it because the thing that exists is another existsi</p>",
        "id": 125196384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970801
    },
    {
        "content": "<p>Aah excellent -- that looks much more like the 2-line obfuscated proof which this result deserves.</p>",
        "id": 125196391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970837
    },
    {
        "content": "<p>Should it be in the library?</p>",
        "id": 125196437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970849
    },
    {
        "content": "<p>Thanks Kenny.</p>",
        "id": 125196438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970862
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">uu</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">}),</span> <span class=\"n\">f</span> <span class=\"n\">uu</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">set_eq_def</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 125196441,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523970892
    },
    {
        "content": "<p>the simplifier also works: <code>by simp [set.set_eq_def]</code></p>",
        "id": 125196452,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523970926
    },
    {
        "content": "<p>now we just switched camps :P</p>",
        "id": 125196454,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523970942
    },
    {
        "content": "<p>Aah! I tried to use simp a lot too, but my simp-fu is weak.</p>",
        "id": 125196507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970986
    },
    {
        "content": "<p>Thanks Johannes. How long did it take you to find that?</p>",
        "id": 125196511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971006
    },
    {
        "content": "<p>You see, the long tactic mode proof took me a very short time to write, because at each stage I just did the only thing which could be done.</p>",
        "id": 125196522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971032
    },
    {
        "content": "<p>I suspect that Kenny had a similar experience with the term proof.</p>",
        "id": 125196528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971050
    },
    {
        "content": "<p>But when I tried to find a short proof using library functions, all that happened was that I spent a long time looking through the library and noting down possibly useful functions</p>",
        "id": 125196543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971079
    },
    {
        "content": "<p>and then a long time failing to glue them together.</p>",
        "id": 125196584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971090
    },
    {
        "content": "<p>I want to get to the stage where if it's easy in maths, I can just nail it in Lean</p>",
        "id": 125196587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971099
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {X Y : Type u} (U : set X) (f : X → set Y) :\n(⋃ (uu : {x // x ∈ U}), f uu.val) = ⋃₀(f &#39;&#39; U) :=\nset.ext $ by simp\n</pre></div>",
        "id": 125196593,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523971129
    },
    {
        "content": "<p>right</p>",
        "id": 125196596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971134
    },
    {
        "content": "<p>But this stinks because surely my strategy is basically the same</p>",
        "id": 125196604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971167
    },
    {
        "content": "<p>except I split the iff into two distinct implications</p>",
        "id": 125196607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971188
    },
    {
        "content": "<p>and then somehow simp failed to deal with either of them</p>",
        "id": 125196609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971197
    },
    {
        "content": "<p><code>simp</code> simplifies iff's and equalities, lol</p>",
        "id": 125196658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523971214
    },
    {
        "content": "<p>As I said, my simp-fu is weak</p>",
        "id": 125196659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971223
    },
    {
        "content": "<p>so that's the trick -- don't break the symmetry.</p>",
        "id": 125196664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971239
    },
    {
        "content": "<p>Thanks -- that was very instructive!</p>",
        "id": 125196665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523971245
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">uu</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">}),</span> <span class=\"n\">f</span> <span class=\"n\">uu</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 125196674,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523971273
    },
    {
        "content": "<p>splitting into two implications ^</p>",
        "id": 125196676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523971281
    },
    {
        "content": "<p>so to prove <code>X -&gt; Y</code> using simp, you intro h and then <code>simpa using h</code>?</p>",
        "id": 125204693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523984431
    },
    {
        "content": "<p>right</p>",
        "id": 125204786,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523984586
    },
    {
        "content": "<p>This trick is sufficiently important that it should be mentioned in the simp docs.</p>",
        "id": 125205075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523985012
    }
]