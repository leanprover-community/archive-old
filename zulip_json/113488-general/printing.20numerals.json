[
    {
        "content": "<p>If I make a new type (copy of <code>nat</code>, for my son) and I ask it to <code>#reduce plus honderd honderd</code> it doesn't print <code>200</code> but <code>... .plus1.plus1.plus1</code>.<br>\nI've created <code>has_zero</code>, <code>has_one</code>, and <code>has_add</code> instances.<br>\nWhat else do I need to do, to teach Lean to print numerals?</p>",
        "id": 220464908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608375372
    },
    {
        "content": "<p>bit0/bit1, maybe?</p>",
        "id": 220465029,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1608375615
    },
    {
        "content": "<p>It already accepts numerals as input, because of those classes. But I guess I now need to teach it a <code>has_repr</code> or something. Is that right?</p>",
        "id": 220465259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608376071
    },
    {
        "content": "<p>Maybe look at nat.has_repr? But numerals might be special. Just cast to nat with the repr maybe</p>",
        "id": 220465461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608376378
    },
    {
        "content": "<p><code>has_repr</code> is for VM values, <code>#reduce</code> uses the pretty printer. It looks like there is special support for pretty printing <code>nat.succ^k nat.zero</code>, but for your own type you are out of luck in Lean 3.</p>",
        "id": 220466219,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1608377841
    },
    {
        "content": "<p>Ooh oh, that's sad <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> <br>\nWe'll manage. He's pretty fascinated by unary notation at the moment. \"Computers are soooo stupid. It's printing 99 by saying <code>nul.plus1.plus1.plus1....</code> rotflol rotflol hihihi\"</p>",
        "id": 220466619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608378616
    },
    {
        "content": "<p>You can do something a bit silly with notation to make it slightly shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mynat_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">mynat.zero</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mynat.plus1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">mynat_add</span> <span class=\"n\">a</span> <span class=\"n\">b.plus1</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mynat_add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mynat.zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mynat.zero.plus1</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`ₘ</span><span class=\"mi\">0</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">mynat.zero</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">+`</span> <span class=\"bp\">`</span> <span class=\"bp\">ₘ</span><span class=\"mi\">1</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mynat.plus1</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">+`</span> <span class=\"bp\">`</span> <span class=\"bp\">ₘ</span><span class=\"mi\">10</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">mynat.plus1</span> <span class=\"bp\">$</span> <span class=\"n\">mynat.plus1</span> <span class=\"bp\">$</span> <span class=\"n\">mynat.plus1</span> <span class=\"bp\">$</span> <span class=\"n\">mynat.plus1</span> <span class=\"bp\">$</span> <span class=\"n\">mynat.plus1</span> <span class=\"bp\">$</span>\n                               <span class=\"n\">mynat.plus1</span> <span class=\"bp\">$</span> <span class=\"n\">mynat.plus1</span> <span class=\"bp\">$</span> <span class=\"n\">mynat.plus1</span> <span class=\"bp\">$</span> <span class=\"n\">mynat.plus1</span> <span class=\"bp\">$</span> <span class=\"n\">mynat.plus1</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"mi\">15</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span>  <span class=\"c1\">-- ₘ0 + ₘ1 + ₘ1 + ₘ1 + ₘ1 + ₘ1 + ₘ10</span>\n</code></pre></div>",
        "id": 220467033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608379458
    },
    {
        "content": "<p>You could even write a metaprogram to spit out local notation for all the numbers between 0 and 1000</p>",
        "id": 220467168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608379695
    },
    {
        "content": "<p>But it  might not be the pedagogical exercise you were hoping for!</p>",
        "id": 220467171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608379710
    },
    {
        "content": "<p>maybe instead of defining the naturals based on the \"successor\" operation, you should define it based on the 2x and 2x+1 operations, and then it'll print more nicely</p>",
        "id": 220545294,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608511536
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mypos</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">twice</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mypos</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">twiceplusone</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mypos</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 220545360,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608511636
    }
]