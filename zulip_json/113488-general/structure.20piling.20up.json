[
    {
        "content": "<p>From the beginning, we've known that the current type-class + structure inheritance setup would get out of control when moving to sophisticated mathematics. This is mentioned in Tom's famous blog post for instance. Today I see both a series of Lean4 commits mentioning structures and <a href=\"https://github.com/leanprover-community/mathlib/pull/3529/files#diff-d27e5e7de2f15fa157a39a865bfec3eaR140-R146\">this PR</a> featuring five lines of arguments to a <code>structure</code> command. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> could you tell us if Lean 4 will make it easier to have abbreviations or other mechanisms that will keep this proliferation under control?</p>",
        "id": 204930966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595604933
    },
    {
        "content": "<p>It's not clear to me whether you're asking for mere syntactic shortcuts for managing the current approach, or for alternative approaches to hierarchy encoding that avoid the explosion to begin with. Though I guess your answer will be \"either of them as long as it works\" :) .</p>",
        "id": 204932444,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595605779
    },
    {
        "content": "<p>Either of them, as long as it works.</p>",
        "id": 204932584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595605847
    },
    {
        "content": "<p>I was thinking about shortcuts here. Alternative approaches could be nice but that's a very different scale.</p>",
        "id": 204932643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595605878
    },
    {
        "content": "<p>Just to bring the code reference out from behind the link, this is the very long <code>structure</code> invocation</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">Lie_add_group_morphism</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I&#39;</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E&#39;</span> <span class=\"n\">E&#39;</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">E</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lie_add_group</span> <span class=\"n\">I</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">E&#39;</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I&#39;</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lie_add_group</span> <span class=\"n\">I&#39;</span> <span class=\"n\">G&#39;</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">add_monoid_hom</span> <span class=\"n\">G</span> <span class=\"n\">G&#39;</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">smooth_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I</span> <span class=\"n\">I&#39;</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204933016,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595606089
    },
    {
        "content": "<p>It should come as no surprise that we are only implementing the \"new\" structure command in Lean 4, so if mathlib wants to keep the current encoding, someone else would have to implement that alternative command. But before someone starts working on that, I would really like to have a discussion on whether that approach is still the way to go. For example, I'm not sure if there has been any consensus on whether <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span>'s work on forgetful inheritance could be a better way forward for mathlib - especially when code has to be adapted to Lean 4 anyway.</p>",
        "id": 204933099,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595606138
    },
    {
        "content": "<p>What work by Cyril are you referring to?</p>",
        "id": 204933435,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595606338
    },
    {
        "content": "<p>He talked about it at Lean Together, but the most recent revision should be <a href=\"https://math-comp.github.io/competing-inheritance-paths-in-dependent-type-theory/\">https://math-comp.github.io/competing-inheritance-paths-in-dependent-type-theory/</a></p>",
        "id": 204934051,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595606643
    },
    {
        "content": "<p>Ok, then I don't understand why you say mathlib doesn't do that.</p>",
        "id": 204934083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595606676
    },
    {
        "content": "<p>Are you thinking of the (related but different) hierarchy builder tool? <a href=\"https://hal.inria.fr/hal-02478907/file/hb.pdf\">https://hal.inria.fr/hal-02478907/file/hb.pdf</a></p>",
        "id": 204934088,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595606679
    },
    {
        "content": "<p>That would make more sense.</p>",
        "id": 204934637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595606970
    },
    {
        "content": "<p>I have no idea which one is more relevant and applicable at this point, haha. I haven't read the papers yet and hoped someone else would do that and tell us what they think...</p>",
        "id": 204934764,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595607032
    },
    {
        "content": "<p>I'd love to see something like their hierarchy builder used in Lean, and indeed this kind of layer should make the difference between old and new structure irrelevant. But I guess the adaptation wouldn't be straightforward, if only because of unification hint vs type class.</p>",
        "id": 204935293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595607310
    },
    {
        "content": "<p>The conclusion is very optimistic about adapting their work to different targets.</p>",
        "id": 204936514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595607962
    },
    {
        "content": "<p>Coming back to syntactic shortcuts, there is a nice GHC extension that lets you define typeclass constraint synonyms such as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">type</span> <span class=\"kt\">Stringy</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"kt\">Read</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">Show</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">foo</span> <span class=\"ow\">::</span> <span class=\"kt\">Stringy</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"o\">...</span>\n<span class=\"nf\">foo</span> <span class=\"o\">...</span>  <span class=\"c1\">-- can use both `Read a` and `Show a`</span>\n</code></pre></div>\n\n\n<p>It's kind of like a macro (it doesn't declare an actual new typeclass), but not quite. I'm not sure how it should be implemented in Lean 4, or even what the syntax should be.</p>",
        "id": 204939040,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595609265
    },
    {
        "content": "<p>I sounds like what I had in mind (and of course I have no opinion on implementation).</p>",
        "id": 204939173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595609331
    },
    {
        "content": "<p>The following was very noticeable in Sebastien's talk: he had a field k, a topological space X, and three or so other mathematical objects, and then for many of the subsets of his collection of objects he had another typeclass (like M being an R-module etc) and somehow the statement of the result took a long time coming. But on the other hand I'm assuming a lot of this is being done with variables if you actually look at the source code</p>",
        "id": 204939376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595609440
    },
    {
        "content": "<blockquote>\n<p>typeclass constraint synonyms</p>\n</blockquote>\n<p>We can already do this in Lean 4 because TC synthesis has loop checking, right?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">Stringy</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">Read</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Show</span> <span class=\"n\">A</span><span class=\"bp\">.</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Read</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Show</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Stringy</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span>\n</code></pre></div>",
        "id": 204939718,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595609632
    },
    {
        "content": "<p>But this kind of synonyms don't really help for the issues we have in mathlib.  For example, if you want two vector spaces over the same field, then <code>[VectorSpace V1] [VectorSpace V2]</code> does not help you.  You need to be able to say that they have the same field structure:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">V1</span> <span class=\"n\">V2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">VectorSpace</span> <span class=\"n\">K</span> <span class=\"n\">V1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">VectorSpace</span> <span class=\"n\">K</span> <span class=\"n\">V2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 204940367,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595609975
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204940511,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595610032
    },
    {
        "content": "<p>But will it help for <code>[topological_ring R]</code>?<br>\nCurrently that is: <code>{R : Type*} [ring R] [topological_space R] [topological_ring R]</code></p>",
        "id": 204940628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595610108
    },
    {
        "content": "<p>Maybe we should say this explicitly: <code>topological_ring R</code> is actually <code>@topological_ring R _inst_1 _inst_2</code>.<br>\nSimilarly vector spaces also have the field as an instance argument.</p>",
        "id": 204940832,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595610220
    },
    {
        "content": "<p>Right, but actually in your vector space example, it's similar. <code>vector_space K V</code> should only introduce the <code>K</code> if it isn't known yet. (Note that the <code>K</code> is an explicit argument right now, in mathlib.)</p>",
        "id": 204943179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595611547
    },
    {
        "content": "<p>How should the basic algebraic hierarchy work with the new structure cmd?</p>",
        "id": 204951021,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595615504
    },
    {
        "content": "<p>E.g., currently <a href=\"https://leanprover-community.github.io/mathlib_docs/find/comm_group/src\">src#comm_group</a> extends <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group/src\">src#group</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/comm_monoid/src\">src#comm_monoid</a></p>",
        "id": 204951113,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595615533
    },
    {
        "content": "<p>How about?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">Œ±</span>\n<span class=\"n\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">Œ±</span>\n<span class=\"n\">class</span> <span class=\"n\">commutative</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">commutative</span> <span class=\"n\">Œ±</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">commutative</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">Œ±</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">group</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">commutative</span> <span class=\"n\">Œ±</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">commutative</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">Œ±</span>\n</code></pre></div>",
        "id": 204953313,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595616859
    },
    {
        "content": "<p>And how does topological ring look?</p>",
        "id": 204967004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595624843
    },
    {
        "content": "<p>A possibility would be to have the following:</p>\n<ul>\n<li>We have syntatic classes <code>[has_zero Œ±]</code>, <code>[has_one Œ±]</code>, <code>[has_add Œ±]</code> and so on</li>\n<li>No class extends these, they take them as instance parameters. In other words, other algebraic classes only have Prop in them</li>\n<li>This would mean that to declare a ring <code>R</code>, we would need <code>[has_zero R] [has_one R] [has_add R] [has_mul R] [ring R]</code>, which is unbearable. Introduce a new kind of instance declaration <code>[[ring R]]</code> (or with beautiful unicode) that adds missing instances to the context (but only missing instances, i.e., if there is already a <code>[has_zero R]</code> it wouldn't add it). </li>\n</ul>\n<p>This would solve the old type/new type structure, as the problem with new type structures is only with shared data field, that would be (shared) instance parameters now. And it would be a progress over what we have even now: to define a topological group <code>G</code>, one needs currently to write <code>[group G] [topological_space G] [topological_group G]</code>, and it could be replaced with <code>[[topological_group G]]</code>. The gain for Lie groups, as <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  was mentioning, would be even bigger.</p>\n<p>Of course, I have no idea how hard it would be to implement this, but it doesn't seem crazy: Lean can already can tell us which instances are missing.</p>",
        "id": 204991489,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595659558
    },
    {
        "content": "<p>I guess one can try to write the new kind of instance declaration already, without refactoring things into syntax and props</p>",
        "id": 204991647,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595659844
    },
    {
        "content": "<p>My 2c: let's not radically change the entire algebraic hierarchy during the port</p>",
        "id": 204991700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595659958
    },
    {
        "content": "<p>see also <a href=\"#narrow/stream/113488-general/topic/XenaProject.20blog.20posts/near/204514809\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/XenaProject.20blog.20posts/near/204514809</a></p>",
        "id": 204991754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595660065
    },
    {
        "content": "<p>I think we should just try to recreate <code>old_structure_cmd</code>, either manually (writing all the fields out) or via a tactic or attribute</p>",
        "id": 204991766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595660128
    },
    {
        "content": "<p>I don't think it deserved to get deprecated in the first place, much less removed</p>",
        "id": 204991827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595660256
    },
    {
        "content": "<p>We could radically change the entire algebraic hierarchy _before_ the port. :-)</p>",
        "id": 204995594,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595667582
    },
    {
        "content": "<p>But let's finish the current bundled/unbundled project first.</p>",
        "id": 204995598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595667601
    },
    {
        "content": "<p>Wouldn't this also solve many problems with diamonds for which Lean has a hard time figuring out that they're defeq, as Prop diamonds are obviously defeq without unfolding anything?</p>",
        "id": 205005562,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595686468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/structure.20piling.20up/near/204991766\">said</a>:</p>\n<blockquote>\n<p>I think we should just try to recreate <code>old_structure_cmd</code>, either manually (writing all the fields out) or via a tactic or attribute</p>\n</blockquote>\n<p>Oh I agree completely; it might be sufficient to build a slighty more rudimentary version when switching away from it is planned anyway, but porting must be as automated as possible to succeed.</p>",
        "id": 205011805,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595696174
    },
    {
        "content": "<p>I remain unconvinced that something much different than the current structure is going to solve mathlib's problems better than what we already have. Any alternatives need to be tested on at least medium scale (involving class definitions, generic theorems, instance constructions and applications of general theorems to specific instances) and quantitatively compared to the status quo. There are just too many ideas to try and a high switching cost, so I don't want to move in another direction until we have concrete evidence it's going to be better when we get there</p>",
        "id": 205012082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595696556
    },
    {
        "content": "<p>Mario, did you read Cyril's paper (the hierarchy builder one, not the forgetful inheritance one)? I only had a very quick look at the pdf on my phone in addition to attending his Pittsburgh talk, but it seems very sensible. It really sounds right to me that we need an abstraction layer here, hiding the actual implementation as much as possible, and putting alternate constructors on the same footing as the constructors coming from the actual implementation. Going beyond that paper, I think all this tricky business of deciding what should be a parameter and what should be extended should be completely hidden from users. We should have some meta-program reading a mathematical description of structures and doing all the tricky stuff, including defining bundled versions, morphisms and subobjects.</p>",
        "id": 205012358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595696973
    },
    {
        "content": "<p>Such a think is necessarily part of the future of proof assistants, together with the proof automation tools, if proofs assistants want to ever become a common and useful tool for mathematics.</p>",
        "id": 205012412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595697028
    },
    {
        "content": "<p>I think that ideas are cheap and effective implementation in the context of a real library is much more expensive</p>",
        "id": 205012494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595697124
    },
    {
        "content": "<p>Do you really intended to write publicly that mathcomp is not a real library?</p>",
        "id": 205012506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595697166
    },
    {
        "content": "<p>A good idea is only the first stage. Compare it to a drug trial</p>",
        "id": 205012508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595697169
    },
    {
        "content": "<p>Because it seems that Cyril's stuff has already been tested at this scale (or maybe I read too quickly).</p>",
        "id": 205012524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595697204
    },
    {
        "content": "<p>And I never wrote this was easy. I wrote this is necessary. Maybe it will never happen, and then proof assistants will never be usable.</p>",
        "id": 205012555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595697242
    },
    {
        "content": "<p>Also keep in mind that these decisions are very sensitive to details of the underlying architecture. The fact that typeclass inference in lean 4 is going to be cheaper will already significantly change the calculus, and we may find some other approach, using more typeclasses, performing better</p>",
        "id": 205012582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595697244
    },
    {
        "content": "<p>Cyril and his coauthors claim that there stuff is not even sensitive to whether you use unification hints or type classes (although their implementation is obviously full unification hints).</p>",
        "id": 205012629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595697331
    },
    {
        "content": "<p>That means that you might choose a different implementation that translates the abstract description of the hierarchy to Lean 4 code</p>",
        "id": 205012632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595697332
    },
    {
        "content": "<p>I don't think the hierarchy builder is used in mathcomp releases yet (which I don't say to make any claim about its effectiveness!).</p>",
        "id": 205012647,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595697358
    },
    {
        "content": "<p>I certainly don't expect such a tool to reach the mathcomp release stage in less than a couple of years. That's not really the mathcomp speed I think.</p>",
        "id": 205012728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595697468
    },
    {
        "content": "<p>It doesn't mean they didn't recreate the full mathcomp hierarchy using it.</p>",
        "id": 205012774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595697491
    },
    {
        "content": "<p>Even if it gets deployed in mathcomp, that doesn't say much about whether it will do well in lean 3 mathlib, or lean 4 mathlib. These are different environments and need separate testing</p>",
        "id": 205012781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595697526
    },
    {
        "content": "<p>To emphasize, I'm not making any judgment of the effectiveness of the idea. I'm saying that we will not know whether it works in lean until we try it in lean</p>",
        "id": 205012796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595697599
    },
    {
        "content": "<p>I agree that alternate constructors should not be second class citizens. I see this as a flaw in lean 3 that can hopefully be addressed in lean 4, but it doesn't require any hierarchy changes</p>",
        "id": 205012904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595697750
    },
    {
        "content": "<p>Just having <code>[[topological_group G]]</code> mean \"introduce all the instances that are missing to make sense of <code>[topological_group G]</code>\" (here <code>[group G]</code> and <code>[topological_space G]</code>) would make things way less verbose, and it doesn't require any change to the current hierarchy.</p>",
        "id": 205013095,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595698110
    },
    {
        "content": "<p>There was an old lean PR about this</p>",
        "id": 205013173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595698291
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1522\">leanprover/lean#1522</a></p>",
        "id": 205013219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595698339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/structure.20piling.20up/near/205012494\">said</a>:</p>\n<blockquote>\n<p>I think that ideas are cheap and effective implementation in the context of a real library is much more expensive</p>\n</blockquote>\n<p>Mario, just in case Cyril or his coauthors ever read this thread, could you clarify whether this is a comment on my general assertion that something like their work is needed or your assessment of their published paper on this topic?</p>",
        "id": 205013403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595698677
    },
    {
        "content": "<p>Neither, it's even more general than that. Any idea at all that has aspirations to replace mathlib's algebraic hierarchy requires evidence that it is going to work beforehand because it's a huge project</p>",
        "id": 205013536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595698826
    },
    {
        "content": "<p>and evidence that it works in Coq doesn't suffice here because Coq is not lean, it differs in many technical details that matter for the determination</p>",
        "id": 205013562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595698888
    },
    {
        "content": "<p>Looking at Cyril et al's hierarchy builder paper, it looks like a boilerplate elimination tactic for declaring a mathcomp style hierarchy. We could certainly have a boilerplate elimination tactic for declaring a mathlib style hierarchy, but this seems to have a large overlap with what lean's native <code>structure</code> command already does, and I don't think that the mathlib hierarchy actually has all that much boilerplate to eliminate</p>",
        "id": 205014078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595699704
    },
    {
        "content": "<p>If we start writing flat structures by hand because leo doesn't want to support them anymore, well that will be some boilerplate that we will want to eliminate (although actually we already know that it's not as simple as this because subclasses can often prove fields of superclasses)</p>",
        "id": 205014181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595699834
    },
    {
        "content": "<p>It would be nice to have some meta program generating <code>sub*</code> structures, or at least boilerplate theory (<code>complete_lattice</code>, <code>map</code>, <code>comap</code>).</p>",
        "id": 205014256,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595699946
    },
    {
        "content": "<p>I think there is a general theory of such structures (universal algebra? varieties?) that can be put into a tactic to do this kind of thing</p>",
        "id": 205014350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595700065
    },
    {
        "content": "<p>It might be good to define the general theory even if it's a little hard to instantiate (for example, you provide a signature for the language and a family of equations) so that we can apply it manually and then eventually with tactics</p>",
        "id": 205014457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595700192
    },
    {
        "content": "<p>Note that <span class=\"user-mention\" data-user-id=\"210057\">@Fabian Gl√∂ckle</span> wrote a large part of such a meta program already</p>",
        "id": 205014476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595700223
    },
    {
        "content": "<p>It can generate bundled homs and concrete category instances as well.</p>",
        "id": 205014487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595700242
    },
    {
        "content": "<p>Note that we want to reuse our bundled homs for groups.</p>",
        "id": 205014523,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595700269
    },
    {
        "content": "<p>it's little things like that that make me dubious about boilerplate eliminating tactics in general</p>",
        "id": 205014537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595700306
    },
    {
        "content": "<p>because when you look carefully, it's not actually boilerplate, it's just slightly lower entropy text</p>",
        "id": 205014541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595700333
    },
    {
        "content": "<p>and capturing the patterns while allowing all the variations can be much more complicated than the original boilerplate</p>",
        "id": 205014599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595700371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/structure.20piling.20up/near/204995598\">said</a>:</p>\n<blockquote>\n<p>But let's finish the current bundled/unbundled project first.</p>\n</blockquote>\n<p>Where can I learn more about \"the current bundled/unbundled project\"?</p>",
        "id": 205077666,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595817417
    },
    {
        "content": "<p>see e.g. <a href=\"https://github.com/leanprover-community/mathlib/issues/3321\">#3321</a></p>",
        "id": 205077735,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595817599
    },
    {
        "content": "<p>The basic goal is to delete the files under <code>src/deprecated/</code>. That's too much to do all in one go, so that idea is to find places where we can reduce dependencies on these files.</p>",
        "id": 205078232,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595818621
    },
    {
        "content": "<p>Additionally, someone still needs to write <code>subring</code>, folllowing the model of <code>subsemiring</code>, and move the current file about <code>is_subring</code> into <code>deprecated/</code>.</p>",
        "id": 205078242,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595818676
    },
    {
        "content": "<p>And <code>subfield</code>!</p>",
        "id": 205081221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595824594
    },
    {
        "content": "<p>I might have a student working on <code>subring</code> -- I'll report back today</p>",
        "id": 205087800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595834700
    },
    {
        "content": "<p>I haven't been paying attention to this bundling fashion. Is there any place to read about the goals of all this? In particular, how does the bundled subgroup perform in the third isomorphism grand challenge?</p>",
        "id": 205094031,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595840464
    },
    {
        "content": "<p>If the challenge is just to formalise the 3rd isom theorem, we have it now (using bundled subgroups and bundled normal subgroups) in the group theory game (which is not a game at all right now, it's just an independent formalisation of the basics of group theory in Lean). It's <a href=\"https://github.com/ImperialCollegeLondon/group-theory-game/blob/7d6392ba1a66d9f9c26f025edde8768479d2e432/src/hom/theorems.lean#L674-L682\">here</a></p>",
        "id": 206049558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596647221
    }
]