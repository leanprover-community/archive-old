[
    {
        "content": "<p>This example comes from the lemma in exercise 4 of <code>linear_algebra.lean</code> in the #lftcm repository:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">std_basis_is_basis</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">linear_independent_iff&#39;</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">v</span> <span class=\"n\">hs1</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- i deliberately have hs and hs1, as I&#39;m comparing two approaches</span>\n    <span class=\"k\">have</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">hs1</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">insert_erase</span> <span class=\"n\">hi</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"n\">hs1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span>  <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">not_mem_erase</span> <span class=\"n\">i</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"n\">hs1</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hs1</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">hs1</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">std_basis</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"n\">hs1</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- unfold applications - sum_apply doesn&#39;t work on hs1!</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"n\">hs1</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- hs1: v i • ite (i = i) 1 0 + (∑ (x : n) in s.erase i, v x • λ (j : n), ite (x = j) 1 0) i = 0 i</span>\n    <span class=\"c1\">-- hs: v i • ite (i = i) 1 0 + ∑ (g : n) in s.erase i, v g • ite (g = i) 1 0 = 0</span>\n\n    <span class=\"c1\">-- XXX: this succeeds, but does nothing!</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"n\">hs1</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- hs1: v i • ite (i = i) 1 0 + (∑ (x : n) in s.erase i, v x • λ (j : n), ite (x = j) 1 0) i = 0 i</span>\n    <span class=\"c1\">-- hs: v i • ite (i = i) 1 0 + ∑ (g : n) in s.erase i, v g • ite (g = i) 1 0 = 0</span>\n\n    <span class=\"c1\">-- XXX: this fails, but the state is unchanged since last time!</span>\n    <span class=\"c1\">-- simp only [] at hs hs1,</span>\n\n    <span class=\"c1\">-- XXX: this changes state and does apply `finset.sum_apply`, even though we already passed this lemma to simp!</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"n\">hs1</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- hs1: v i • ite (i = i) 1 0 + ∑ (g : n) in s.erase i, (v g • λ (j : n), ite (g = j) 1 0) i = 0 i</span>\n    <span class=\"c1\">-- hs: v i • ite (i = i) 1 0 + ∑ (g : n) in s.erase i, v g • ite (g = i) 1 0 = 0</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Things start to go weird where the <code>simp only</code>s are used, and somehow <code>simp only [a, b, c]</code> makes less progress than <code>simp only [a, b, c], simp only [a]</code>.</p>",
        "id": 204100682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1594913671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111481\">@jmc</span>  suggested I post on Zulip</p>",
        "id": 204101005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1594913792
    },
    {
        "content": "<p>Confirmed by <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>, who was able to trace it to something to do with type class canonicalization</p>",
        "id": 204105344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1594915590
    },
    {
        "content": "<p>(Maybe, I'm not confident about the diagnosis.)</p>",
        "id": 204105427,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594915631
    }
]