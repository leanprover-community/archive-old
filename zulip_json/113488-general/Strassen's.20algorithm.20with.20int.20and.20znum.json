[
    {
        "content": "<p>I've implemented Strassen's algorithm in Lean (<a href=\"https://github.com/skbaek/strassen\" target=\"_blank\" title=\"https://github.com/skbaek/strassen\">https://github.com/skbaek/strassen</a>). The hope was that it will help with multiplication of large matrices, but its behavior is a bit strange.</p>\n<p>1. When multiplying <code>znum</code> matrices I get a nice U-curve for (execution time / crossover point), where the optimum crossover point (in numbers of rows/columns) seems to be in the 32-128 range. But with <code>int</code> matrices the algorithm shows only negligible improvements over naive multiplication. Since Strassen's algorithm cuts down on multiplications at the expense of more additions/subtractions of matrices,  I think this means that the cost of addition/subtraction (relative to that of multiplication) in <code>int</code> is higher than that in <code>znum</code>. Am I correct about this?</p>\n<p>2. What's really puzzling is that multiplication of <code>int</code> matrices is faster than that of <code>znum</code> matrices, by about a factor of 5. At first I thought this is because matrix entries are not large enough, but the difference persists even when matrices are multiplied by constant factors of 1000-100000. The only time when <code>znum</code> outperforms <code>int</code> is when it involves a lot of additions of the form <code>z+z</code> that just require a bit shift. I thought <code>znum</code> was the better datatype for arithmetic with large numbers — I wonder if I'm doing something wrong here?</p>",
        "id": 158006089,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549859851
    },
    {
        "content": "<p>Are you doing the computation in kernel reductions or in the VM?</p>",
        "id": 158007350,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549862135
    },
    {
        "content": "<p><code>vector.halve</code> can be constructed in one pass</p>",
        "id": 158007398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862166
    },
    {
        "content": "<p>As a kernel data structure, I would use balanced binary trees instead of vectors of length 2^k</p>",
        "id": 158007415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  In the kernel</p>",
        "id": 158007416,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549862231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That's a good point, I should have used trees</p>",
        "id": 158007488,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549862397
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">big_vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">big_vector</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">big_vector</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 158007529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862404
    },
    {
        "content": "<p>I'm a bit worried about the kernel having to compute with the proofs</p>",
        "id": 158007548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862481
    },
    {
        "content": "<p>since vectors have a proof component</p>",
        "id": 158007549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862491
    },
    {
        "content": "<p>Although it can't be trees all the way down, since we have to resort to regular matrix multiplication at some crossover point &gt; 1 for efficiency</p>",
        "id": 158007600,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549862527
    },
    {
        "content": "<p>You can also implement regular matrix multiplication on these kind of matrices</p>",
        "id": 158007611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862567
    },
    {
        "content": "<p>although perhaps the size being a power of 2 is a bit restrictive</p>",
        "id": 158007625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862594
    },
    {
        "content": "<p>but I guess <code>strassen</code> has that built in so it should be fine</p>",
        "id": 158007629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862620
    },
    {
        "content": "<p>You have more tupling and untupling than you need</p>",
        "id": 158007681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862667
    },
    {
        "content": "<p>like there is no reason <code>quadruple</code> and <code>double_cols</code> should be uncurried</p>",
        "id": 158007698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862715
    },
    {
        "content": "<p>The only reason they are uncurried is that it makes statements of correctness lemmas simpler,  should I want to verify them</p>",
        "id": 158007749,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549862768
    },
    {
        "content": "<p>Do the (un)tuplings significantly slow things down? In that case, I guess they should be curried</p>",
        "id": 158007767,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549862842
    },
    {
        "content": "<p>Not sure by how much, but I expect so. I don't think I've identified any big problems yet, just linear slowdowns</p>",
        "id": 158007817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549862887
    },
    {
        "content": "<p>all your tests use <code>#eval</code>?</p>",
        "id": 158007917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549863086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, I used <code>#eval</code></p>",
        "id": 158007972,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549863176
    },
    {
        "content": "<p>well, it's no surprise <code>int</code> is fast then</p>",
        "id": 158007982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549863192
    },
    {
        "content": "<p>Oops... you're right, I forgot <code>#eval</code> is VM by default</p>",
        "id": 158008154,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549863498
    },
    {
        "content": "<p>Here's an implementation using quad-trees. How does it compare to your numbers?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">quad</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">smatrix</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">quad</span> <span class=\"o\">(</span><span class=\"n\">smatrix</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">smatrix</span>\n\n<span class=\"n\">def</span> <span class=\"n\">const</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">const</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">const</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">const</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">const</span> <span class=\"n\">k</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">},</span> <span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">smatrix</span> <span class=\"n\">β</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">A₁₁</span><span class=\"o\">,</span> <span class=\"n\">A₁₂</span><span class=\"o\">,</span> <span class=\"n\">A₂₁</span><span class=\"o\">,</span> <span class=\"n\">A₂₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">map</span> <span class=\"n\">A₁₁</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"n\">A₁₂</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"n\">A₂₁</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"n\">A₂₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">},</span> <span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">smatrix</span> <span class=\"n\">β</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">smatrix</span> <span class=\"n\">γ</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">A₁₁</span><span class=\"o\">,</span> <span class=\"n\">A₁₂</span><span class=\"o\">,</span> <span class=\"n\">A₂₁</span><span class=\"o\">,</span> <span class=\"n\">A₂₂</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">B₁₁</span><span class=\"o\">,</span> <span class=\"n\">B₁₂</span><span class=\"o\">,</span> <span class=\"n\">B₂₁</span><span class=\"o\">,</span> <span class=\"n\">B₂₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">map₂</span> <span class=\"n\">A₁₁</span> <span class=\"n\">B₁₁</span><span class=\"o\">,</span> <span class=\"n\">map₂</span> <span class=\"n\">A₁₂</span> <span class=\"n\">B₁₂</span><span class=\"o\">,</span> <span class=\"n\">map₂</span> <span class=\"n\">A₂₁</span> <span class=\"n\">B₂₁</span><span class=\"o\">,</span> <span class=\"n\">map₂</span> <span class=\"n\">A₂₂</span> <span class=\"n\">B₂₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">map</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_sub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_sub</span> <span class=\"o\">(</span><span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">map₂</span> <span class=\"n\">has_sub</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">},</span> <span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">A₁₁</span><span class=\"o\">,</span> <span class=\"n\">A₁₂</span><span class=\"o\">,</span> <span class=\"n\">A₂₁</span><span class=\"o\">,</span> <span class=\"n\">A₂₂</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">B₁₁</span><span class=\"o\">,</span> <span class=\"n\">B₁₂</span><span class=\"o\">,</span> <span class=\"n\">B₂₁</span><span class=\"o\">,</span> <span class=\"n\">B₂₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">mul</span> <span class=\"n\">A₁₁</span> <span class=\"n\">B₁₁</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">A₁₂</span> <span class=\"n\">B₂₁</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">A₁₁</span> <span class=\"n\">B₁₂</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">A₁₂</span> <span class=\"n\">B₂₂</span><span class=\"o\">,</span>\n   <span class=\"n\">mul</span> <span class=\"n\">A₂₁</span> <span class=\"n\">B₁₁</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">A₂₂</span> <span class=\"n\">B₂₁</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">A₂₁</span> <span class=\"n\">B₁₂</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">A₂₂</span> <span class=\"n\">B₂₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">strassen</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">},</span> <span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"bp\">@⟨</span><span class=\"n\">A₁₁</span><span class=\"o\">,</span> <span class=\"n\">A₁₂</span><span class=\"o\">,</span> <span class=\"n\">A₂₁</span><span class=\"o\">,</span> <span class=\"n\">A₂₂</span><span class=\"bp\">⟩</span> <span class=\"n\">B</span><span class=\"bp\">@⟨</span><span class=\"n\">B₁₁</span><span class=\"o\">,</span> <span class=\"n\">B₁₂</span><span class=\"o\">,</span> <span class=\"n\">B₂₁</span><span class=\"o\">,</span> <span class=\"n\">B₂₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span>\n  <span class=\"k\">then</span> <span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">smatrix</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n  <span class=\"k\">else</span>\n  <span class=\"k\">let</span> <span class=\"n\">S₁</span> <span class=\"o\">:=</span> <span class=\"n\">A₂₁</span> <span class=\"bp\">+</span> <span class=\"n\">A₂₂</span><span class=\"o\">,</span> <span class=\"n\">S₂</span> <span class=\"o\">:=</span> <span class=\"n\">S₁</span> <span class=\"bp\">-</span> <span class=\"n\">A₁₁</span><span class=\"o\">,</span> <span class=\"n\">S₃</span> <span class=\"o\">:=</span> <span class=\"n\">A₁₁</span> <span class=\"bp\">-</span> <span class=\"n\">A₂₁</span><span class=\"o\">,</span> <span class=\"n\">S₄</span> <span class=\"o\">:=</span> <span class=\"n\">A₁₂</span> <span class=\"bp\">-</span> <span class=\"n\">S₂</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">T₁</span> <span class=\"o\">:=</span> <span class=\"n\">B₁₂</span> <span class=\"bp\">-</span> <span class=\"n\">B₁₁</span><span class=\"o\">,</span> <span class=\"n\">T₂</span> <span class=\"o\">:=</span> <span class=\"n\">B₂₂</span> <span class=\"bp\">-</span> <span class=\"n\">T₁</span><span class=\"o\">,</span> <span class=\"n\">T₃</span> <span class=\"o\">:=</span> <span class=\"n\">B₂₂</span> <span class=\"bp\">-</span> <span class=\"n\">B₁₂</span><span class=\"o\">,</span> <span class=\"n\">T₄</span> <span class=\"o\">:=</span> <span class=\"n\">T₂</span> <span class=\"bp\">-</span> <span class=\"n\">B₂₁</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">P₁</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"n\">A₁₁</span> <span class=\"n\">B₁₁</span><span class=\"o\">,</span>\n      <span class=\"n\">P₂</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"n\">A₁₂</span> <span class=\"n\">B₂₁</span><span class=\"o\">,</span>\n      <span class=\"n\">P₃</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"n\">S₄</span> <span class=\"n\">B₂₂</span><span class=\"o\">,</span>\n      <span class=\"n\">P₄</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"n\">A₂₂</span> <span class=\"n\">T₄</span><span class=\"o\">,</span>\n      <span class=\"n\">P₅</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"n\">S₁</span> <span class=\"n\">T₁</span><span class=\"o\">,</span>\n      <span class=\"n\">P₆</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"n\">S₂</span> <span class=\"n\">T₂</span><span class=\"o\">,</span>\n      <span class=\"n\">P₇</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"n\">S₃</span> <span class=\"n\">T₃</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">U₁</span> <span class=\"o\">:=</span> <span class=\"n\">P₁</span> <span class=\"bp\">+</span> <span class=\"n\">P₂</span><span class=\"o\">,</span>\n      <span class=\"n\">U₂</span> <span class=\"o\">:=</span> <span class=\"n\">P₁</span> <span class=\"bp\">+</span> <span class=\"n\">P₆</span><span class=\"o\">,</span>\n      <span class=\"n\">U₃</span> <span class=\"o\">:=</span> <span class=\"n\">U₂</span> <span class=\"bp\">+</span> <span class=\"n\">P₇</span><span class=\"o\">,</span>\n      <span class=\"n\">U₄</span> <span class=\"o\">:=</span> <span class=\"n\">U₂</span> <span class=\"bp\">+</span> <span class=\"n\">P₅</span><span class=\"o\">,</span>\n      <span class=\"n\">U₅</span> <span class=\"o\">:=</span> <span class=\"n\">U₄</span> <span class=\"bp\">+</span> <span class=\"n\">P₃</span><span class=\"o\">,</span>\n      <span class=\"n\">U₆</span> <span class=\"o\">:=</span> <span class=\"n\">U₃</span> <span class=\"bp\">-</span> <span class=\"n\">P₄</span><span class=\"o\">,</span>\n      <span class=\"n\">U₇</span> <span class=\"o\">:=</span> <span class=\"n\">U₃</span> <span class=\"bp\">+</span> <span class=\"n\">P₅</span> <span class=\"k\">in</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">U₁</span><span class=\"o\">,</span> <span class=\"n\">U₅</span><span class=\"o\">,</span> <span class=\"n\">U₆</span><span class=\"o\">,</span> <span class=\"n\">U₇</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">smatrix</span>\n\n<span class=\"n\">def</span> <span class=\"n\">arith_prog_mat_core</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">smatrix</span> <span class=\"n\">int</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">k</span> <span class=\"k\">in</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">arith_prog_mat_core</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"n\">arith_prog_mat_core</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">t</span><span class=\"o\">),</span>\n   <span class=\"n\">arith_prog_mat_core</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">t</span><span class=\"o\">),</span>\n   <span class=\"n\">arith_prog_mat_core</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">arith_prog_mat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smatrix</span> <span class=\"n\">int</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">arith_prog_mat_core</span> <span class=\"n\">m</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test_mat</span> <span class=\"o\">:=</span> <span class=\"n\">smatrix</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">100000</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arith_prog_mat</span> <span class=\"n\">size</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">smatrix</span>\n<span class=\"n\">def</span> <span class=\"n\">test</span>  <span class=\"o\">:=</span> <span class=\"n\">test_mat</span> <span class=\"bp\">*</span> <span class=\"n\">test_mat</span>\n<span class=\"n\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"mi\">2</span> <span class=\"n\">test_mat</span> <span class=\"n\">test_mat</span>\n<span class=\"n\">def</span> <span class=\"n\">test3</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"mi\">3</span> <span class=\"n\">test_mat</span> <span class=\"n\">test_mat</span>\n<span class=\"n\">def</span> <span class=\"n\">test4</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"mi\">4</span> <span class=\"n\">test_mat</span> <span class=\"n\">test_mat</span>\n<span class=\"n\">def</span> <span class=\"n\">test5</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"mi\">5</span> <span class=\"n\">test_mat</span> <span class=\"n\">test_mat</span>\n<span class=\"n\">def</span> <span class=\"n\">test6</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"mi\">6</span> <span class=\"n\">test_mat</span> <span class=\"n\">test_mat</span>\n<span class=\"n\">def</span> <span class=\"n\">test7</span> <span class=\"o\">:=</span> <span class=\"n\">strassen</span> <span class=\"mi\">7</span> <span class=\"n\">test_mat</span> <span class=\"n\">test_mat</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test2</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test3</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test4</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test5</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test6</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test7</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test</span>\n</pre></div>",
        "id": 158009371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549865845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span></p>",
        "id": 158009437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549865937
    },
    {
        "content": "<p>On my computer I'm seeing improvements by a factor of 2-3. It's surprising how small things add up</p>",
        "id": 158010178,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549867207
    },
    {
        "content": "<p>Is there a way to measure the execution time for <code>#reduce</code>?</p>",
        "id": 158010588,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549867835
    },
    {
        "content": "<p>sadly no. It's on my todo list (see: <a href=\"#narrow/stream/113488-general/topic/lean.20community.20fork/near/157996991\" title=\"#narrow/stream/113488-general/topic/lean.20community.20fork/near/157996991\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/lean.20community.20fork/near/157996991</a>)</p>",
        "id": 158010676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549867987
    },
    {
        "content": "<p>does <code>timeit</code> work?</p>",
        "id": 158010688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549868033
    },
    {
        "content": "<p>It reports a time, but I think it's giving the VM evaluation time (way too fast to be the kernel)</p>",
        "id": 158011260,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549868797
    }
]