[
    {
        "content": "<p>Hi everyone. </p>\n<p>I'm trying to wrap my head around theorems. Are they used for things like optimizations? For example, I understand that when you want to compress a file like a video you do so because you want to keep as much visually useful information whilst also keeping down on size for transferring. So my question is if compression tools are just Theorem algorithms. Some are more efficient than others or achieve different goals. Or is the theorem like a small subset of the algorithm? </p>\n<p>Thanks!</p>",
        "id": 260328605,
        "sender_full_name": "Andre",
        "timestamp": 1636057153
    },
    {
        "content": "<p>I have the impression your question is not clear. In mathlib we use the word \"theorem\" to mean a <a href=\"https://en.wikipedia.org/wiki/Theorem\">mathematical theorem</a>. Are you asking how we can write similar stuff using a programming language?</p>",
        "id": 260329296,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636057486
    },
    {
        "content": "<p>So I understand that the programming language is used to check itself. Self-validate the proofs. However, it can still be used to create things. That blows my mind and I want to understand it. Maybe I need to try and play with it more to understand.</p>",
        "id": 260331198,
        "sender_full_name": "Andre",
        "timestamp": 1636058360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452475\">@Andre</span> The theorems don't create anything. They only \"validate\" as you say.</p>",
        "id": 260331381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636058438
    },
    {
        "content": "<p>Theorems don't have much to do with compression. They're mathematical truths, and you can use them to guarantee that certain conditions you might depend on are met.  For example, if you imagine all the natural numbers (0, 1, 2, 3, and so on) stretched out in front of you, and you start crossing off every other number starting from 0, the following is a theorem: you will eventually cross off every even number, and you will only cross off even numbers.  This is a theorem explaining what this simple crossing-numbers-off algorithm does.</p>\n<p>In Lean, a theorem is like a program that processes and creates truths, and you can write proofs of theorems using the exact same functional programming language you use to write more traditional algorithms/programs (though usually we use tactics to construct proofs). Have you done the <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">Natural Number Game</a> yet? It's all about proving theorems about natural numbers in Lean.</p>",
        "id": 260331399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636058445
    },
    {
        "content": "<p>You need <code>definition</code>s to create something.</p>",
        "id": 260331411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636058449
    },
    {
        "content": "<p>Thank you I have played but not completed yet. Thank you for the guidance.</p>",
        "id": 260331669,
        "sender_full_name": "Andre",
        "timestamp": 1636058597
    }
]