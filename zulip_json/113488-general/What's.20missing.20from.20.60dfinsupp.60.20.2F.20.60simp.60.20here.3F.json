[
    {
        "content": "<p>I had a really nasty time writing the proof for <code>mul_assoc</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/4812\">#4812</a>, and kept having to use lots of <code>convert</code> and <code>_</code> when I'd rather just throw the lemma at <code>simp</code>. My guess is either:</p>\n<ul>\n<li>Something is wrong with the implicitness of the lemma arguments</li>\n<li><code>simp</code> is bad at dependent rewrites</li>\n<li><code>dfinsupp</code> is missing some important lemmas that I should be using</li>\n<li>I'm bad at using sensible tactics</li>\n</ul>\n<p>Right now, the proof takes multiple minutes, which is rather frustrating. Any suggestions for golfing would be appreciated!</p>",
        "id": 214903461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603922721
    },
    {
        "content": "<p>one of the reasons we went <code>classical</code> is that <code>decidable</code> often times out</p>",
        "id": 214903645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603922860
    },
    {
        "content": "<p>I'll try tomorrow with classical and see if that helps. I assume with classical I can't then compute with my definitions?</p>",
        "id": 214905683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603924254
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lmul</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map.mk₂</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">gi</span> <span class=\"n\">gj</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">gi</span> <span class=\"bp\">*</span> <span class=\"n\">gj</span><span class=\"o\">,</span> <span class=\"n\">G.3</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">gi₁</span> <span class=\"n\">gi₂</span> <span class=\"n\">gj</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"bp\">$</span> <span class=\"n\">add_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">gi</span> <span class=\"n\">gj</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"bp\">$</span> <span class=\"n\">algebra.smul_mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">gi</span> <span class=\"n\">gj₁</span> <span class=\"n\">gj₂</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"bp\">$</span> <span class=\"n\">mul_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">gi</span> <span class=\"n\">gj</span><span class=\"o\">,</span> <span class=\"n\">subtype.eq</span> <span class=\"bp\">$</span> <span class=\"n\">algebra.mul_smul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">semiring</span>\n\n<span class=\"kd\">@[simps mul]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.to_module</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">G</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.to_module</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">G.lmul</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">compr₂</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n      <span class=\"n\">G</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simps one]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">direct_sum.lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"mi\">0</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">G.2</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! These proofs are very slow, so these lemmas are defined separately -/</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">has_mul_mul</span><span class=\"o\">,</span> <span class=\"n\">has_one_one</span><span class=\"o\">,</span> <span class=\"n\">direct_sum.to_module_lof</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">linear_map.flip_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">linear_map.id_apply</span> <span class=\"n\">R</span> <span class=\"n\">G</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">direct_sum.to_module.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214906957,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603925220
    },
    {
        "content": "<p>you might also want to make the definitions better like this</p>",
        "id": 214906967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603925233
    },
    {
        "content": "<p>i.e. don't use <code>dfinsupp.sum</code></p>",
        "id": 214906974,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603925240
    },
    {
        "content": "<p>because <code>direct_sum</code> (should) have its own API</p>",
        "id": 214906990,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603925261
    },
    {
        "content": "<p>i.e. you shouldn't need to unfold the definition of <code>direct_sum</code> to see the <code>dfinsupp</code> underneath</p>",
        "id": 214907007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603925279
    },
    {
        "content": "<p>you'll find that <code>direct_sum</code> still has a lot of API to be written</p>",
        "id": 214907071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603925303
    },
    {
        "content": "<p>using linear maps gives you also access to certain lemmas</p>",
        "id": 214907255,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603925456
    },
    {
        "content": "<p>I think <code>zero_mul</code> follows immediately from <code>linear_map.map_zero</code></p>",
        "id": 214907266,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603925469
    },
    {
        "content": "<p>I hadn't considered writing it in terms of a bilinear map</p>",
        "id": 214908112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603926068
    },
    {
        "content": "<p>My only concern is it becomes harder to generalize from submodules to submonoids.</p>",
        "id": 214908167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603926118
    },
    {
        "content": "<p>Regarding dfinsupp vs direct_sum, I struggle to really see the intended difference between the APIs - the only one I can think of is that <code>direct_sum</code> probably ought not to have a coe_to_fun</p>",
        "id": 214908422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603926282
    },
    {
        "content": "<p>direct_sum gives you an add_comm_monoid with instructions of how to build a hom to any other add_comm_monoid</p>",
        "id": 214908495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603926326
    },
    {
        "content": "<p>essentially, going to dfinsupp is \"working in the wrong category\"</p>",
        "id": 214908512,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603926340
    },
    {
        "content": "<p>i.e. you're working with add_comm_monoid, so you shouldn't all of a sudden go back to working with sets (i.e. types)</p>",
        "id": 214908593,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603926378
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum\">docs#direct_sum</a>, since Google isn't working and search is too slow on mobile</p>",
        "id": 214908905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603926605
    },
    {
        "content": "<p>Other than providing a bundled hom, is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_group\">docs#direct_sum.to_group</a> different to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.sum\">docs#dfinsupp.sum</a>?</p>",
        "id": 214909357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603926974
    },
    {
        "content": "<p>I'm surprised they don't seem to share an implementation</p>",
        "id": 214909365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603926992
    },
    {
        "content": "<p>well, as I explained, you shouldn't unfold <code>direct_sum</code> to become <code>dfinsupp</code></p>",
        "id": 214909391,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603927023
    },
    {
        "content": "<p>Right, that was just an implementation question</p>",
        "id": 214909425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603927049
    },
    {
        "content": "<p>Ah, I realize the key takeaway from your linear_map suggestion is that all my proofs of preserving zero and addition vanish, which represent a large amount of the boilerplate</p>",
        "id": 214909738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603927286
    },
    {
        "content": "<p>right</p>",
        "id": 214909756,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603927302
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.lift_add_hom\">docs#finsupp.lift_add_hom</a> is the non-dependent version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_group\">docs#direct_sum.to_group</a>, right?</p>",
        "id": 214910044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603927564
    },
    {
        "content": "<p>yes</p>",
        "id": 214910118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603927625
    },
    {
        "content": "<p>So arguably there should be a <code>dfinsupp.lift_add_hom</code> too, for which <code>directsum.to_group</code> is just an alias / wrapper?</p>",
        "id": 214910393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603927817
    },
    {
        "content": "<p>Note that <code>dfinsupp</code> was written before I added <code>lift_add_hom</code> to <code>finsupp</code>.</p>",
        "id": 214910491,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603927913
    },
    {
        "content": "<p>Making API of <code>dfinsupp</code> and <code>finsupp</code> more similar to each other looks like a good idea to me.</p>",
        "id": 214910574,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603927952
    },
    {
        "content": "<p>That's good to know. I'm not blaming Kenny at all for the API, just trying to work out how to unify them</p>",
        "id": 214910606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603927972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, based on that being a good idea, does <a href=\"https://github.com/leanprover-community/mathlib/issues/4801\">#4801</a> seem fine to you?</p>",
        "id": 214940526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603962175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What's.20missing.20from.20.60dfinsupp.60.20.2F.20.60simp.60.20here.3F/near/214909357\">said</a>:</p>\n<blockquote>\n<p>Other than providing a bundled hom, is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_group\">docs#direct_sum.to_group</a> different to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.sum\">docs#dfinsupp.sum</a>?</p>\n</blockquote>\n<p>Answer: Yes, <code>to_group</code> uses <code>map_zero</code> to avoid needing <code>decidable</code> instances, which is clever</p>",
        "id": 214941828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603962952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What's.20missing.20from.20.60dfinsupp.60.20.2F.20.60simp.60.20here.3F/near/214910393\">said</a>:</p>\n<blockquote>\n<p>So arguably there should be a <code>dfinsupp.lift_add_hom</code> too, for which <code>directsum.to_group</code> is just an alias / wrapper?</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/4821\">#4821</a></p>",
        "id": 215001366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603992744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/What's.20missing.20from.20.60dfinsupp.60.20.2F.20.60simp.60.20here.3F/near/214906967\">said</a>:</p>\n<blockquote>\n<p>you might also want to make the definitions better like this</p>\n</blockquote>\n<p>I found myself having a really hard time with the bilinear map APIs - I seem to have to aggressively unfold the <code>linear_map</code> compositions in order to get anywhere close to a form I would expect to have a lemma about</p>",
        "id": 215137240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604084466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, I had another go at your approach in <a href=\"https://github.com/leanprover-community/mathlib/tree/eric-wieser/dadd_monoid_algebra-lmul\">branch#eric-wieser/dadd_monoid_algebra-lmul</a>, but I think overall it was worse just because the API of <code>lsum</code> is smaller than the API of <code>dfinsupp.sum</code></p>",
        "id": 224220512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611770114
    },
    {
        "content": "<p><a href=\"#narrow/stream/144837-PR-reviews/topic/Multiplication.20on.20direct_sum.3A.20.235956.20and.20.236053/near/225279962\">Follow up thread</a>, with everything working</p>",
        "id": 225284145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612522407
    }
]