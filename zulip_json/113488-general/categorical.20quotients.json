[
    {
        "content": "<p>Is everyone ready for a new puzzle about how to formalise things mathematicians use without thinking about? :-)</p>",
        "id": 125870843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044326
    },
    {
        "content": "<p>I would like to define a notion of a \"categorical quotient\".</p>",
        "id": 125870844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044331
    },
    {
        "content": "<p>Recall that a quotient of a type <code>X</code> by a relation <code>R</code> is a type <code>Y</code>, which is pretty much useless, _except_ that we can construct functions <code>Y -&gt; Z</code> by giving two pieces of data:</p>",
        "id": 125870846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044341
    },
    {
        "content": "<p>1. a function <code>f : X -&gt; Z</code>, and<br>\n2. a proof that <code>R x x' -&gt; (f x = f x')</code>.</p>",
        "id": 125870847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044346
    },
    {
        "content": "<p>I want instead a categorical quotient of a type <code>X</code> by a relation <code>R</code>, let's call it <code>Q</code> which is useless except that we can construct functions <code>Q -&gt; C</code>, where <code>C</code> are the objects of some category, by giving three pieces of data:</p>",
        "id": 125870848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044353
    },
    {
        "content": "<p>1. a function <code>f : X -&gt; C</code>,<br>\n2. for each <code>R x x'</code>, an isomorphism <code>φ x x' : f x ≅ f x'</code>, and<br>\n3. for each <code>x x' x''</code> so that <code>R x x'</code> and <code>R x' x''</code> (and so automatically <code>R x x''</code>), we have <code>φ x x'</code> composed with <code>φ x' x''</code> is equal to `φ x x''.</p>",
        "id": 125870849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044360
    },
    {
        "content": "<p>This says: you are only allowed to make functions out of <code>Q</code> that are independent of choices of representative _up to coherent isomorphisms_.</p>",
        "id": 125870889,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044367
    },
    {
        "content": "<p>So --- how do I do this in Lean?</p>",
        "id": 125870890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044373
    },
    {
        "content": "<p>(The point of course is hygiene: we can sometimes help make our programs more correct by only using quotient types, when that's all that's needed. Unfortunately quotient types are a bit too restrictive for what actually happens in the real world.)</p>",
        "id": 125870891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044385
    },
    {
        "content": "<p>(And no, it not useful in this situation to merely define functions to the isomorphism classes of objects of <code>C</code>, which is something you could do with a plain quotient and data 1-3.)</p>",
        "id": 125870892,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044400
    },
    {
        "content": "<p>(A categorical quotient is at least as good as a quotient: you can take <code>C</code> to be a discrete category, where the only (iso)morphisms are identities, and this recovers the usually construction of function out of a quotient.)</p>",
        "id": 125871041,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525044812
    },
    {
        "content": "<p>Is this a non-trivial problem in dependent type theory?</p>",
        "id": 125882176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071517
    },
    {
        "content": "<p>Is there a chance that it is not possible to define such a quotient?</p>",
        "id": 125882177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071530
    },
    {
        "content": "<p>Note that Scott's question is really flagging the difference between and equivalence relation, and <code>equiv</code>. The statement that two terms in a setoid are equivalent is a proposition. However an instance of <code>equiv x y</code> really is data, and to a mathematician sometimes that data really is important.</p>",
        "id": 125882240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071623
    },
    {
        "content": "<p>There is a piece missing from the specification: what property do you get from those lift functions <code>Q -&gt; C</code>?</p>",
        "id": 125882310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525071838
    },
    {
        "content": "<p>They fit in a commutative diagram</p>",
        "id": 125882354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525071899
    },
    {
        "content": "<p>of course, but what is it exactly?</p>",
        "id": 125882404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525071969
    },
    {
        "content": "<p>So, there is a quotient map <code>q : X -&gt; Q</code>, and the map <code>g : Q -&gt; C</code> that you have obtained is such that <code>f</code> is <em>equal</em> to <code>g \\circ q</code></p>",
        "id": 125882405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525071976
    },
    {
        "content": "<p>I guess that <em>equal</em> does not mean defeq but only provable equality in a set of morphisms in the category</p>",
        "id": 125882407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525072011
    },
    {
        "content": "<p>What prevents the definition <code>Q := X</code> and <code>lift f := f</code>?</p>",
        "id": 125882518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525072264
    },
    {
        "content": "<p>I guess in the plain quotient case you have <code>quot.sound : R x y -&gt; q x = q y</code>, so here you want <code>sound : R x y -&gt; q x ~= q y</code>; then presumably <code>transport  (lift f φ) (sound (h : R x y)) = φ x y</code></p>",
        "id": 125882624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525072484
    },
    {
        "content": "<p>Wait, so now we are merging two themes? (-;</p>",
        "id": 125882764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525072811
    },
    {
        "content": "<p>But, to answer your question about <code>Q := X</code>. I should have added that the quotient map <code>q</code> should also satisfy points 2 and 3 from Scott's post.</p>",
        "id": 125882778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525072915
    },
    {
        "content": "<p>So <code>Q</code> is the universal gadget among all the data that satisfies 1, 2, and 3</p>",
        "id": 125882819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525072950
    },
    {
        "content": "<p>Also, it does not need to exist in all situations. Its existence is a theorem that has to be proven.</p>",
        "id": 125882826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525072990
    },
    {
        "content": "<p>How can its existence be conditional? It doesn't have a category as input, so either Lean can prove these things exist in general or not</p>",
        "id": 125883456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525074370
    },
    {
        "content": "<blockquote>\n<p>I want instead a categorical quotient of a type <code>X</code> by a relation <code>R</code>, let's call it <code>Q</code> which is useless except that we can construct functions <code>Q -&gt; C</code>, <strong>where <code>C</code> are the objects of some category</strong>, by giving three pieces of data:</p>\n</blockquote>\n<p>(emphasis mine)</p>",
        "id": 125883461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525074431
    },
    {
        "content": "<p>So, there is some category lurking in the background</p>",
        "id": 125883462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525074446
    },
    {
        "content": "<p>But Johan, it's not a fixed category.</p>",
        "id": 125883463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525074451
    },
    {
        "content": "<p>(I think? Maybe I'm confused about my own question. I wanted that description to hold for any category <code>C</code>.)</p>",
        "id": 125883464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525074472
    },
    {
        "content": "<p>Ok... then I'm confused</p>",
        "id": 125883465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525074477
    },
    {
        "content": "<p><code>C</code> plays the role of beta in <code>quot.lift</code></p>",
        "id": 125883505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525074492
    },
    {
        "content": "<p>Yes.</p>",
        "id": 125883509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525074501
    },
    {
        "content": "<p>So, maybe Q always exists, but it is not always an object of <em>some category</em></p>",
        "id": 125883515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525074542
    },
    {
        "content": "<p>Because it only lives in some cocompletion of <em>said category</em></p>",
        "id": 125883520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525074559
    },
    {
        "content": "<p>I don't think there is a requirement that <code>Q</code>be an element of <code>C</code></p>",
        "id": 125883530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525074597
    },
    {
        "content": "<p>It's just some type, with a function to the objects of <code>C</code></p>",
        "id": 125883575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525074610
    },
    {
        "content": "<p>it's the index category for a diagram in <code>C</code></p>",
        "id": 125883576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525074626
    },
    {
        "content": "<p>Ok, got it</p>",
        "id": 125883583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525074685
    },
    {
        "content": "<p>Hm, there's a problem interpreting <code>Q</code> as a category: what are the equivs?</p>",
        "id": 125883625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525074759
    },
    {
        "content": "<p>If <code>Q</code> is the universal thing satisfying 1-3, then we can slot <code>q</code> in for <code>f</code>, <code>Q</code> for <code>C</code>, and <code>sound</code> for <code>φ</code> to get the properties expected of <code>Q</code> itself, but then this means that <code>sound x x' : q x ~= q x'</code> and this doesn't make any sense since <code>q x : Q</code> is not a type</p>",
        "id": 125883674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525074878
    },
    {
        "content": "<p>Ok, I'm confused again...</p>",
        "id": 125883724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525075026
    },
    {
        "content": "<p>First I thought that Scott was trying to formalise some colimit inside some category</p>",
        "id": 125883727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525075054
    },
    {
        "content": "<p>But now it seems he wants to do something more general?</p>",
        "id": 125883730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525075069
    },
    {
        "content": "<p>Scott, is this an example of what you try to achieve: taking the quotient of all groups by the relation of isomorphism?</p>",
        "id": 125883776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525075143
    },
    {
        "content": "<p>But that is not coherent, I guess</p>",
        "id": 125883782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525075150
    },
    {
        "content": "<p>I suspect what Scott wants to do is not possible unless you make a lot of non-canonical choices, but I await a full specification first</p>",
        "id": 125883785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525075192
    },
    {
        "content": "<p>This is very much related to all this canonical stuff I'm thinking about, so I would be interested in bumping this thread. I've only seen the notion of categorical quotient in algebraic geometry, where it looks like this: <a href=\"https://en.wikipedia.org/wiki/Categorical_quotient\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Categorical_quotient\">https://en.wikipedia.org/wiki/Categorical_quotient</a></p>",
        "id": 126004937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525283511
    },
    {
        "content": "<p>But here it's not just a relation on the object X you want to quotient, there is a group action. <span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> did you need something more general than this? Note that X isn't a type in the version I know, it's an object in the category.</p>",
        "id": 126005124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525283670
    }
]