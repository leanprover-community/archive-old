[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_pow</span> <span class=\"bp\">=</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">has_pow</span>\n</pre></div>\n\n\n<p>Meh</p>",
        "id": 165799308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558004935
    },
    {
        "content": "<p>there are lemmas about that, you unfolded too much</p>",
        "id": 165799704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558005253
    },
    {
        "content": "<p>It's too bad it isn't defeq.</p>",
        "id": 165808209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558012439
    },
    {
        "content": "<p>IIRC the products are different ways around! Is that right? One is <code>a*a^n</code> and one is <code>a^n*a</code>?</p>",
        "id": 165812150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558015188
    },
    {
        "content": "<p>that's true, but I think they wouldn't be defeq even if they were the same way around</p>",
        "id": 165812497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558015417
    },
    {
        "content": "<p>I'm not sure if there is some principled reason to prefer one over the other... I guess <code>a * a^n</code> matches list order</p>",
        "id": 165812606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558015488
    },
    {
        "content": "<p>For <code>nat</code> <code>a^{n+1} ≡ a^n * a</code> seems more natural. Since multiplication is defined by recursion on the second argument <code>(succ a)^(succ n)</code> is definitionally a successor.  This is very minor, of course.</p>",
        "id": 165836782,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558031934
    }
]