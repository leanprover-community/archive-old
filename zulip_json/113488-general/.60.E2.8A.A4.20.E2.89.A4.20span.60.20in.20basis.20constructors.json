[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/15697\">#15697</a> I tried refactoring the \"independent + full span\" constructors of all basis-like definitions to use <code>⊤ ≤ span</code> instead of <code>span = ⊤</code>. The idea is that it is easier to prove an inclusion than two, even when one of them is trivial, and when it's easier to prove equality it doesn't cost much to add a <code>.ge</code>. <br>\nFurthermore, <code>≤</code> has better definitional properties than <code>=</code> regarding the coercion to the underlying set, so this allows to apply lemmas about set inclusions seemlessly, whereas using a set equality required an extensionnality lemma.</p>\n<p>Since this touches quite a lot of file, I'd prefer not to let it rot too much, but it's also a pretty significant API change so I'd like to get opinions on that</p>",
        "id": 290989785,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1658899158
    },
    {
        "content": "<p>This is similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/disjoint\">docs#disjoint</a>, but there we have a dedicated predicate to allow seamless translation between <code>x ⊓ y = ⊥</code> and <code>disjoint x y</code>. Do you have such a predicate here?</p>",
        "id": 291006102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658912273
    },
    {
        "content": "<p>The definitional properties are definitely a good argument so it sounds good to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 291011030,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658915164
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_top_iff\">docs#eq_top_iff</a> is the conversion between the two spellings I think, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 291013969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658917022
    },
    {
        "content": "<p>or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/top_le_iff\">docs#top_le_iff</a>. But I was talking about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/disjoint.eq_bot\">docs#disjoint.eq_bot</a>.</p>",
        "id": 291014033,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658917059
    },
    {
        "content": "<p>I think I might have misread your message. Are you suggesting a new definition <code>def name_this (s) : Prop := ⊤ ≤ span s</code>?</p>",
        "id": 291014200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658917134
    },
    {
        "content": "<p>Yes, although I have no idea whether it's justified in this context.</p>",
        "id": 291014402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658917247
    },
    {
        "content": "<p>I don't think this gets used a lot beyond the variants of <code>basis.mk</code>, but I might be wrong. Do we have something like this for subgroups (I guess it would be called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.generates\">docs#subgroup.generates</a>?)</p>",
        "id": 291019168,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658920371
    },
    {
        "content": "<p>Based on lemma statements like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.closure_mul_image_eq_top\">docs#subgroup.closure_mul_image_eq_top</a>, looks like subgroups don't have a definition like this.</p>",
        "id": 291019237,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658920430
    },
    {
        "content": "<p>I'm strongly in favor here. We should more generally use <code>x ≤ ⊥</code> or <code>x ≤ 0</code> in hypotheses elsewhere.</p>",
        "id": 291142832,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658985912
    }
]