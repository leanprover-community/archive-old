[
    {
        "content": "<p>16 hours ago Leo made the lean4 repo public: <a href=\"https://github.com/leanprover/lean4/\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/\">https://github.com/leanprover/lean4/</a></p>",
        "id": 164159039,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1556188376
    },
    {
        "content": "<p>Wow! Did you receive any kind of announcement? Do we have instructions about things we could test? I wouldn't try anything without being asked to do it.</p>",
        "id": 164159986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556189497
    },
    {
        "content": "<p>It just showed up on my github activity feed today.  I think the README is pretty clear: \"We strongly suggest you use Lean 3.\"</p>",
        "id": 164160960,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1556190495
    },
    {
        "content": "<p>I understand the README, what I don't understand is why making it public if there is nothing anyone should do (besides Leo and Sebastian of course)?</p>",
        "id": 164161275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556190862
    },
    {
        "content": "<p>The reason is of course to get you used to the new naming convention. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 164161946,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1556191607
    },
    {
        "content": "<p>what naming convention? Putting a 4 after Lean?</p>",
        "id": 164161966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556191638
    },
    {
        "content": "<p>I'm talking about the <a href=\"https://github.com/leanprover/lean4/blob/c8a045d69fac152fd5e3a577f718615cecb9c53d/library/init/data/nat/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/blob/c8a045d69fac152fd5e3a577f718615cecb9c53d/library/init/data/nat/basic.lean\">namingConvention</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">mulLtMulOfPosLeft</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">ltOfLtOfLe</span> <span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">addLtAddLeft</span> <span class=\"n\">hk</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mulSucc</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mulLeMulLeft</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">succLeOfLt</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 164163912,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1556193716
    },
    {
        "content": "<p>whichIsClearlySuperior</p>",
        "id": 164164882,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1556194761
    },
    {
        "content": "<p>whichIsClearlyJava</p>",
        "id": 164164985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556194844
    },
    {
        "content": "<p>give_me_some_room_to_breathe</p>",
        "id": 164164996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556194860
    },
    {
        "content": "<p>theNamingConventionIsAmazing</p>",
        "id": 164165240,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1556195105
    },
    {
        "content": "<p>willSomeoneWriteSomeCodeWhichChangesOldLeanNamingConventionsIntoThisOne? orIsThatSortOfThingImpossibleInPractice?</p>",
        "id": 164165455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556195320
    },
    {
        "content": "<p>itIsDefinitelyVeryScriptableMaybeWithAHumanAddressableNumberOfExceptions</p>",
        "id": 164165507,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1556195389
    },
    {
        "content": "<p>forWeirdDeclarationsWhichOurHastilyWrittenSwapperProgramDoesn'tRecognise</p>",
        "id": 164165580,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1556195421
    },
    {
        "content": "<p>weDidJustThatHackishlyForTheLean4Repo.willBeMuchEasierAndMoreRobustUsingTheFinalLean4.</p>",
        "id": 164165599,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1556195451
    },
    {
        "content": "<p>how_will_we_call_our_categories?</p>",
        "id": 164165606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556195457
    },
    {
        "content": "<p>comm_ring ‚Üí CommRing</p>",
        "id": 164165624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556195470
    },
    {
        "content": "<p>maybe we can start snake_casing them</p>",
        "id": 164165631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556195482
    },
    {
        "content": "<p>that would make me a very big proponent of bundling everything (-;</p>",
        "id": 164165638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556195497
    },
    {
        "content": "<p>‚Ñ≠ùî¨ùî™ùî™‚Ñúùî¶ùî´ùî§</p>",
        "id": 164165647,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1556195513
    },
    {
        "content": "<p>personally_forLemmas_I_wouldSuggest_something_like_theMathematicalComponentsConvention <a href=\"https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md#names-in-the-library-usually-obey-one-of-following-the-convention\" target=\"_blank\" title=\"https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md#names-in-the-library-usually-obey-one-of-following-the-convention\">https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md#names-in-the-library-usually-obey-one-of-following-the-convention</a></p>",
        "id": 164165717,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1556195577
    },
    {
        "content": "<p>Oh no! Not the 1-letter abbreviations... that makes things even more incomprehensible</p>",
        "id": 164165804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556195646
    },
    {
        "content": "<p>Yeah no those abbreviations are the worst thing I've ever seen in my life</p>",
        "id": 164165824,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1556195679
    },
    {
        "content": "<p>Can't we have several user modes, that transparently switch between the naming conventions?</p>",
        "id": 164165834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556195694
    },
    {
        "content": "<p>hahaha now that is fancy</p>",
        "id": 164165855,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1556195716
    },
    {
        "content": "<p>Some option <code>naming_convention</code> in <code>leanpkg.toml</code></p>",
        "id": 164165858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556195721
    },
    {
        "content": "<p>Or <code>namingConvention</code> if you really want</p>",
        "id": 164165866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556195732
    },
    {
        "content": "<p>And then all your dependencies automatically show in your naming convention when you browse the code in VScode</p>",
        "id": 164165877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556195754
    },
    {
        "content": "<p>Oh, I was only referring to their <span aria-label=\"snake\" class=\"emoji emoji-1f40d\" role=\"img\" title=\"snake\">:snake:</span>/<span aria-label=\"camel\" class=\"emoji emoji-1f42b\" role=\"img\" title=\"camel\">:camel:</span> convention. Those abbreviations do look horrible.</p>",
        "id": 164165977,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1556195832
    },
    {
        "content": "<p>Leo has almost 6 million LOC changed in the repository history!</p>",
        "id": 164165989,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1556195849
    },
    {
        "content": "<p>Sebastian, (obligatory disclaimer: I have literally no expectations please no-one get angry I'm just keen is all) is there any juicy code generation business going on in leanprover/lean4?</p>",
        "id": 164166062,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1556195932
    },
    {
        "content": "<p>The compiler is there and it's functional and pretty fast, if that's what you're asking</p>",
        "id": 164167020,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1556196736
    },
    {
        "content": "<p>It looks like the bytecode VM is still there. Is it still hooked up to something or is it vestigial?</p>",
        "id": 164167633,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556197313
    },
    {
        "content": "<p>This CamelCase is so awful, I understand you made the repository secret for so long</p>",
        "id": 164169038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556198475
    },
    {
        "content": "<p>PascalCase camelCase</p>",
        "id": 164169251,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1556198631
    },
    {
        "content": "<p>Oooh! So we should blame Blaise!</p>",
        "id": 164169317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556198653
    },
    {
        "content": "<p>What does <code>&amp;@</code>, <code>mk_borrowed</code> do?</p>",
        "id": 164172211,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556200699
    },
    {
        "content": "<p>To answer my own question: If I am not mistaken it is an optimisation that doesn't copy the argument. Eg in <code>list.length</code>, the output number doesn't need a memory reference to the input list, wheras <code>list.cons</code> does.</p>",
        "id": 164174331,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556202024
    },
    {
        "content": "<p>What's the reason for switching the naming convention, by the way?</p>",
        "id": 164184745,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556208806
    },
    {
        "content": "<p>I'm sure it's preparing ground for a parser demo: soon they will showcase three lines of Lean asking the parser to rewrite all files using the normal name convention.</p>",
        "id": 164185255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556209199
    },
    {
        "content": "<p>haha! That would be a pretty round about way to do it</p>",
        "id": 164185414,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556209286
    },
    {
        "content": "<p>I feel sorry I'm not commenting anything else, I totally lack expertise to write useful comments. But I'm still very happy to see Leo and Sebastian seem to be happy enough about their progress to make it public!</p>",
        "id": 164185592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556209396
    },
    {
        "content": "<p>I'm still a bit confused about <code>@&amp;</code>. Does lean have a linear type system now?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">hugeFuel</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10000</span>\n</pre></div>\n\n\n<p>I wonder what constants with definitions means</p>",
        "id": 164230914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556251153
    },
    {
        "content": "<p>A few more notes to self about new stuff:</p>\n<ul>\n<li><code>meta</code> has been renamed <code>unsafe</code> (good idea)</li>\n<li><code>@[macroInline]</code>?</li>\n<li>we have a lot of <code>extern cpp</code> now, I'm curious how that works.</li>\n<li><code>==</code> now means boolean equals instead of <code>Heq</code> (which has taken both notations <code>‚âÖ</code> and <code>~=</code>)</li>\n<li><code>drec</code> seems to have grown an <code>n</code> (i.e. <code>Eq.ndrec</code>), I'm not sure what it stands for</li>\n<li><code>@[inlineIfReduce, nospecialize] def Decidable.toBool (p : Prop) [h : Decidable p] : Bool</code>: oh boy, new attributes</li>\n<li><code>Array</code> is the new name for <code>buffer</code>, <code>array</code> seems to be gone. They are implemented as array lists instead of persistent arrays now (+1 from me)</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>partial def shrink : Array Œ± ‚Üí Nat ‚Üí Array Œ±\n| a n := if n ‚â• a.size then a else shrink a.pop n\n</pre></div>\n\n\n<ul>\n<li>Oh wow, built in partial definitions! I will have to see how this interacts with the type system</li>\n<li>Everything is <code>Bool</code> now instead of <code>Prop</code>. Not sure how this will interact with pure mathematics stuff</li>\n<li><code>Expr</code> is non-meta! Woohoo!</li>\n<li>I think <code>tactic</code> is also non-meta, and has been renamed <code>ElaboratorM</code></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/library/init/lean/compiler/ir.lean#L10-L11\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/blob/master/library/init/lean/compiler/ir.lean#L10-L11\">https://github.com/leanprover/lean4/blob/master/library/init/lean/compiler/ir.lean#L10-L11</a> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Is the article \"Counting Immutable Beans\" available anywhere?</li>\n</ul>",
        "id": 164233317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556255170
    },
    {
        "content": "<p>No, not yet</p>",
        "id": 164240916,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1556265713
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Everything is <code>Bool</code> now instead of <code>Prop</code>. Not sure how this will interact with pure mathematics stuff</li>\n</ul>\n</blockquote>\n<p>Can you elaborate? Did we become Isabelle?</p>",
        "id": 164240986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556265786
    },
    {
        "content": "<p>Yes, I'm very frightened by this comment. Can anyone explain this?</p>",
        "id": 164255063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556280202
    },
    {
        "content": "<p>There still literally is a definition <code>notation `Prop` := Sort 0</code> in <code>init/core.lean</code></p>",
        "id": 164255885,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1556280958
    },
    {
        "content": "<p>AFAICT, the main difference is that functions such as <code>list.filter</code> no longer takes a decidable predicate as argument, but a function <code>Œ± ‚Üí Bool</code>.  Also lots of stuff uses <code>HasBeq</code> (lawless function <code>Œ± ‚Üí Œ± ‚Üí Bool</code>) instead of <code>DecidableEq</code>, but I believe that is just because <code>derive DecidableEq</code> doesn't work yet.</p>",
        "id": 164264222,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1556287438
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/QeoEsvkGX0Ss-mNhJtX9MCAz/winnie_meme.png\" target=\"_blank\" title=\"winnie_meme.png\"></a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QeoEsvkGX0Ss-mNhJtX9MCAz/winnie_meme.png\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/3121/QeoEsvkGX0Ss-mNhJtX9MCAz/winnie_meme.png\"></a></div>",
        "id": 164271349,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1556292096
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">partial</span> <span class=\"n\">def</span> <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Nat</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Array</span> <span class=\"n\">Œ±</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">shrink</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">pop</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<ul>\n<li>Oh wow, built in partial definitions! I will have to see how this interacts with the type system</li>\n</ul>\n</blockquote>\n<p>What are partial definitions?</p>",
        "id": 164302364,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1556316990
    },
    {
        "content": "<p>that's a good question. At a glance, I would say it's the analogue of <code>meta</code> that allows non-well founded recursions</p>",
        "id": 164302749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556317420
    },
    {
        "content": "<p>There are some things you can say about partial definitions that is a little stronger than <code>meta</code>. In particular, although there are obviously partial proofs of false, there is a non-meta notion of \"domain\" of a partial function, and you can extract a real value from a partial function within its domain. But that's just wishful thinking; probably this is just a viral marker like <code>meta</code> and you don't have direct access to the domain predicate</p>",
        "id": 164302953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556317617
    },
    {
        "content": "<p>Partial functions require that Lean can show the result type is inhabited; I don't think <code>meta</code> requires that.</p>",
        "id": 164303966,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1556318804
    },
    {
        "content": "<p>Not necessarily. A partial function from A to B is really a function from A to (optional B) for some sense of \"optional\", and so it is always inhabited (by bottom)</p>",
        "id": 164305606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556320756
    },
    {
        "content": "<p>If lean gets native support for <code>partial</code> functions and definitions, then I imagine it will act something like Haskell's \"bottom\" value inhabiting all (partial) types</p>",
        "id": 164305710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556320825
    },
    {
        "content": "<p>This isn't really a new feature - lean 3 <code>meta</code> allows you to write nonterminating computations already - but the separation of <code>meta</code> into <code>partial</code> (meaning unqualified recursion is okay) and <code>unsafe</code> (meaning you are doing something not necessarily sound with the VM representation) seems like a good idea</p>",
        "id": 164305779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556320923
    },
    {
        "content": "<p>You may be right.  I'm just speaking from what I've seen trying out Lean 4.</p>",
        "id": 164306051,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1556321320
    },
    {
        "content": "<p>oh, are you saying that the lean 4 typechecker is asking for a proof of inhabited?</p>",
        "id": 164306064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556321373
    },
    {
        "content": "<p>that's pretty weird if so, because it can't ever use that value</p>",
        "id": 164306068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556321393
    },
    {
        "content": "<p>I guess it's a low tech way to avoid inconsistency, but it is not maximally expressive</p>",
        "id": 164306132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556321453
    },
    {
        "content": "<p>I haven't actually tried to run lean 4 yet, I'm just reading the code</p>",
        "id": 164306153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556321505
    },
    {
        "content": "<p>I've only done a bit of programming, but found it useful so far.  I found it tedious to use combinator-based parsers in Lean 3, but the result types of a parser are pretty much always inhabited.  I haven't tried out proving things though.</p>",
        "id": 164306439,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1556321875
    },
    {
        "content": "<p>My first impression is that lean 4 has skewed a lot more towards programming, possibly at the expense of mathematics. We will have to see</p>",
        "id": 164306510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556321967
    },
    {
        "content": "<p>Of course the lack of a tactic framework means we won't be porting mathlib any time soon... although possibly lean 4 allows us to write our own tactic framework now?</p>",
        "id": 164306579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556322035
    },
    {
        "content": "<p>Isn't the lean 4 parser also combinator based? It looks like they built on Haskell's Parsec library</p>",
        "id": 164306657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556322176
    },
    {
        "content": "<blockquote>\n<p>My first impression is that lean 4 has skewed a lot more towards programming, possibly at the expense of mathematics. We will have to see</p>\n</blockquote>\n<p>I have now been assured by the devs that Lean 4 will support mathematics just as well as Lean 3, if not better. I have also been reminded that Lean 4 currently has no tactic framework, so don't anyone get any ideas about porting anything yet :-)</p>",
        "id": 164441756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556535038
    },
    {
        "content": "<blockquote>\n<p>I've only done a bit of programming, but found it useful so far.  I found it tedious to use combinator-based parsers in Lean 3, but the result types of a parser are pretty much always inhabited.  I haven't tried out proving things though.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> could you explain how you're doing this? Do you compile Lean, and then make .lean files using term mode and then run them through lean --make?</p>",
        "id": 164441863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556535152
    },
    {
        "content": "<p>About these rumors, what I think is: because Leo and Sebastian want to rebuild a lot of things in Lean using the Lean programming language, they first focused on the programming aspect. I doesn't mean we won't be able to do math. They need the programming aspects in order to allow rebuilding the tactic framework. Once we get the tactic framework we can start on math</p>",
        "id": 164441959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556535260
    },
    {
        "content": "<p>What Patrick said</p>",
        "id": 164442576,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1556535916
    },
    {
        "content": "<p>I just used the command line for trying things out.  It's a little clunky at the moment, but I imagine it will be similar to the Lean 3 experience once it makes sense to get leanpkg and the editor interfaces properly working.</p>",
        "id": 164479571,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1556564820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/library/init/lean/compiler/ir.lean#L10-L11\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/blob/master/library/init/lean/compiler/ir.lean#L10-L11\">https://github.com/leanprover/lean4/blob/master/library/init/lean/compiler/ir.lean#L10-L11</a> <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> Is the article \"Counting Immutable Beans\" available anywhere?</li>\n</ul>\n</blockquote>\n<p>Preprint now available at <a href=\"https://arxiv.org/abs/1908.05647\" target=\"_blank\" title=\"https://arxiv.org/abs/1908.05647\">https://arxiv.org/abs/1908.05647</a></p>",
        "id": 173362636,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1565951251
    },
    {
        "content": "<p>My inner editor can't resist noting some typos on page 1.</p>\n<ul>\n<li>last line has a bad overflow</li>\n<li>\"where reported here\" seems garbled</li>\n<li>\"users can extend Lean using Lean itself\" needs a capital letter</li>\n</ul>",
        "id": 173421286,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566007724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks, two sentences got merged there. The overflows are on arxiv, no idea what it's doing</p>",
        "id": 173457348,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566074009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  I have read enough of the paper so far to ascertain that (a) the Lean 4 IR is amazing and that (b) the two of you have done a tremendous amount of hard work. Many thanks to you and Leo for your efforts.</p>",
        "id": 173982322,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1566577691
    },
    {
        "content": "<p>Thanks, Jeremy! Here's hoping it will reduce the number of times someone complains about their tactic being too slow, haha. Definitely looking forward to what you all will come up with.</p>",
        "id": 174033803,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566642919
    },
    {
        "content": "<p>That will depend on how much API documentation you'll write...</p>",
        "id": 174033864,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566643001
    },
    {
        "content": "<p>I thought it would write itself, like in the Lean 3 fork</p>",
        "id": 174034829,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566644967
    }
]