[
    {
        "content": "<p>I have the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">generator</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">generator</span>\n<span class=\"bp\">|</span> <span class=\"n\">bcd</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">generator</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cancel</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">generator</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">generator</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cancel</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bcd</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">cancel</span> <span class=\"o\">(</span><span class=\"n\">bcd</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bcd</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">cancel</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">bcd</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bcd</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bcd</span> <span class=\"n\">m</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bcd</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">l</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Then I want to prove that <code>length (cancel l) ≤ length l</code> (and a few other properties). How do I deal with <code>match</code>? If I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">length_cancel_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">free_monoid</span> <span class=\"n\">generator</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">cancel</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">length</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">le_rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">le_rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_succ_of_le</span> <span class=\"bp\">$</span> <span class=\"n\">nat.le_succ_of_le</span> <span class=\"bp\">$</span> <span class=\"n\">length_cancel_le</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bcd</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ_le_succ</span> <span class=\"bp\">$</span> <span class=\"n\">length_cancel_le</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bcd</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">cancel</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bcd</span> <span class=\"n\">m</span> <span class=\"o\">::</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>then Lean doesn't know that <code>bcd m :: l' = cancel l</code>.</p>",
        "id": 301588031,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664523944
    },
    {
        "content": "<p>Should I move this <code>match</code> to an explicit auxiliary definition?</p>",
        "id": 301588549,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664524180
    },
    {
        "content": "<p>Will it work if you have helper definitional lemmas about what \"cancel (bcd n :: [])\" is equal to,</p>",
        "id": 301620249,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1664536389
    },
    {
        "content": "<p>I assume you want to use the term-mode <code>match</code> notation? In tactics you can do <code>induction h : cancel l,</code> to record a hypothesis <code>h</code> that <code>cancel l = []</code> and <code>cancel l = _ :: _</code>.</p>",
        "id": 301625091,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664538053
    },
    {
        "content": "<p>Here is a workaround using the <code>match</code> notation that should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">cancel</span> <span class=\"n\">l</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">cancel</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"k\">in</span>\n  <span class=\"k\">match</span> <span class=\"n\">cancel</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l'</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bcd</span> <span class=\"n\">m</span> <span class=\"o\">::</span> <span class=\"n\">l'</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301626011,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664538375
    },
    {
        "content": "<p>I decided to move this case to an explicit auxiliary definition.</p>",
        "id": 301628017,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664539050
    },
    {
        "content": "<p><a href=\"https://proofassistants.stackexchange.com/a/529/347\">https://proofassistants.stackexchange.com/a/529/347</a> is perhaps relevant</p>",
        "id": 301746436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664578145
    }
]