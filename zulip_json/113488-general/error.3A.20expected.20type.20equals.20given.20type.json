[
    {
        "content": "<p>A mystery:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">on_iso</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">F</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Last week <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> and I encountered a similar error when working on over categories. Back then we could fix it by specifying a universe variable. But that still felt like a hack around a bug. This time universe annotations don't seem to help.</p>\n<p>Anyway, I'm more interested in fact that Lean thinks two types are the same, but isn't happy to move on.<br>\nHere is the <code>pp.all</code> version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"err\">ùí≥</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"err\">ùí≥</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"err\">ùí≥</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n    <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"err\">ùí≥</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"err\">ùí≥</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"err\">ùí≥</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n    <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span>\n</pre></div>",
        "id": 155160367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547549240
    },
    {
        "content": "<p>If you have too much time and want to take a closer look, you could try turning on the various defeq traces. Not sure if the output will be of any help.</p>",
        "id": 155162452,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1547551949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I have a bit of time. Do you have a guess about what's going on? Are you interested in those traces? How do I turn them on?</p>",
        "id": 155163901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547553793
    },
    {
        "content": "<p>It should be <code>trace.type_context.is_def_eq</code> and <code>trace.type_context.is_def_eq_detail</code>. I can take a look, though I won't promise anything :) .</p>",
        "id": 155164151,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1547554063
    },
    {
        "content": "<p>Output of <code>trace.type_context.is_def_eq</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">‚•§</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">‚•§</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">‚•§</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">‚•§</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">...</span> <span class=\"n\">failed</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 155164241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547554168
    },
    {
        "content": "<p>Output of <code>trace.type_context.is_def_eq_detail</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">‚•§</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">‚•§</span> <span class=\"err\">?</span><span class=\"n\">m_5</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">functor</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">functor</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"err\">·µí·µñ</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"err\">·µí·µñ</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">‚•§</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_5</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">functor</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">functor</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"err\">·µí·µñ</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"err\">·µí·µñ</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"err\">·µí·µñ</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">large_category</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">right</span><span class=\"o\">:</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">large_category</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">F</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">F</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">‚•§</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">functor</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">functor</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">‚•§</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">category</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"o\">:=</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"o\">:=</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:=</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:=</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 155164317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547554211
    },
    {
        "content": "<p>what does <code>convert yoneda F</code> give?</p>",
        "id": 155164531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547554447
    },
    {
        "content": "<p>The error is in a <code>have</code> statement...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">on_iso</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 155164556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547554497
    },
    {
        "content": "<p>can you fill in the underscores?</p>",
        "id": 155164575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547554526
    },
    {
        "content": "<p>I'll try. Give me a second.</p>",
        "id": 155164579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547554536
    },
    {
        "content": "<p>also your <code>op</code> has a really confusing precedence</p>",
        "id": 155164640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547554577
    },
    {
        "content": "<p>there is no way lean can parse <code>presheaf X·µí·µñ</code> means <code>(presheaf X)·µí·µñ</code> but the printer seems to think so</p>",
        "id": 155164651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547554614
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">on_iso</span> <span class=\"o\">((</span><span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"err\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n</pre></div>\n\n\n<p>Wow... this works...</p>",
        "id": 155164673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547554638
    },
    {
        "content": "<blockquote>\n<p>there is no way lean can parse <code>presheaf X·µí·µñ</code> means <code>(presheaf X)·µí·µñ</code> but the printer seems to think so</p>\n</blockquote>\n<p>I thought this was actually possible by using a precedence above 1000?</p>",
        "id": 155165054,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547555092
    },
    {
        "content": "<p>I was wondering whether we should do that</p>",
        "id": 155165061,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547555104
    },
    {
        "content": "<p>I think you want high precedence (above <code>max = 1024</code>) to get <code>presheaf X·µí·µñ</code> = <code>presheaf (X·µí·µñ)</code></p>",
        "id": 155165111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547555162
    },
    {
        "content": "<p>Oh, I misread</p>",
        "id": 155165174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547555225
    },
    {
        "content": "<p>What you just wrote is what I want</p>",
        "id": 155165181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547555233
    },
    {
        "content": "<p>most postfix notations are at precedence <code>:max+1</code> for this reason</p>",
        "id": 155165245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547555288
    },
    {
        "content": "<p>Has this fixed the error Johan?</p>",
        "id": 155165251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547555302
    },
    {
        "content": "<p>I'm not really sure how it works now actually. But I know there are a lot of parentheses in <code>category_theory</code> that look like they ought to be unnecessary</p>",
        "id": 155165253,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547555306
    },
    {
        "content": "<p>I doubt it addresses the error though, I'm still perplexed</p>",
        "id": 155165266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547555333
    },
    {
        "content": "<p>it seems like it's an elaboration order issue</p>",
        "id": 155165294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547555379
    },
    {
        "content": "<p>what's up with this name? <code>category_theory.presheaf.category_theory.category</code></p>",
        "id": 155165388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547555478
    },
    {
        "content": "<p>just in case you forgot it's about categories</p>",
        "id": 155165394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547555491
    },
    {
        "content": "<p>Just wait until we have the category of categories</p>",
        "id": 155165589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547555757
    },
    {
        "content": "<p>or the category of theories</p>",
        "id": 155165640,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547555785
    },
    {
        "content": "<blockquote>\n<p>or the category of theories</p>\n</blockquote>\n<p>Is that a thing?</p>",
        "id": 155165686,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547555873
    },
    {
        "content": "<p>I still don't understand the error.<br>\nBut I no longer need a solution, because I proved it differently.</p>",
        "id": 155165751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547555948
    },
    {
        "content": "<p>It's just weird that this shows up. And like I said: Reid and I had a similar thing last week when we worked with over categories.</p>",
        "id": 155165758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547555975
    },
    {
        "content": "<blockquote>\n<p>is that a thing?</p>\n</blockquote>\n<p>Sure, you can use interpretations as morphisms between theories even with different languages</p>",
        "id": 155165860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547556104
    },
    {
        "content": "<blockquote>\n<p>I think you want high precedence (above <code>max = 1024</code>) to get <code>presheaf X·µí·µñ</code> = <code>presheaf (X·µí·µñ)</code></p>\n</blockquote>\n<p>Implemented at <a href=\"https://github.com/leanprover/mathlib/pull/600\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/600\">https://github.com/leanprover/mathlib/pull/600</a> (<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> FYI)</p>",
        "id": 155247432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547639337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Thanks!</p>",
        "id": 155248248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547640284
    }
]