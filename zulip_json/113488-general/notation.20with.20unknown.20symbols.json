[
    {
        "content": "<p>Is it possible to have notation using unknown symbols? Say I want a new notation for lambda abstraction (this is not my use case, I try to minimize). I try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">mkfun</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mkfun</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But it fails with <code>unknown identifier 'x'</code></p>",
        "id": 125496391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524323780
    },
    {
        "content": "<p>You might want to check out how the notation for ∃ is defined: <a href=\"https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/logic.lean#L532-L533\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/logic.lean#L532-L533\">https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/logic.lean#L532-L533</a></p>",
        "id": 125496442,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524323897
    },
    {
        "content": "<p>Thanks, it looks promising</p>",
        "id": 125496451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524323980
    },
    {
        "content": "<p>It works with the <code>binder</code> / <code>binders</code> keywords and <code>scoped</code></p>",
        "id": 125496452,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524323990
    },
    {
        "content": "<p>any chance this <code>r:(</code> thing is documented somewhere?</p>",
        "id": 125496498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524324025
    },
    {
        "content": "<p>oh, <code>binders</code> is also a special word here?</p>",
        "id": 125496503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524324051
    },
    {
        "content": "<p>Kevin and I had a long conversation about it on gitter. Let's see if I can find it again</p>",
        "id": 125496504,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524324054
    },
    {
        "content": "<p>yes</p>",
        "id": 125496505,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524324059
    },
    {
        "content": "<p><span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span> <a href=\"https://gitter.im/leanprover_public/Lobby?at=5a5691dd83152df26d570d0f\" target=\"_blank\" title=\"https://gitter.im/leanprover_public/Lobby?at=5a5691dd83152df26d570d0f\">January 10, 2018 5:21 PM</a></p>",
        "id": 125496617,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524324268
    },
    {
        "content": "<p>In short <code>r:(...)</code> gives a name to an expression that can be built in one of two ways:</p>\n<ul>\n<li><code>scoped</code></li>\n<li><code>foldl</code> / <code>foldr</code></li>\n</ul>\n<p>In <code>r:(scoped p, ...)</code>, <code>p</code> is a bound variable that you can use in <code>...</code>. It will be replaced with a lambda abstraction</p>",
        "id": 125496679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524324464
    },
    {
        "content": "<p>It sorts of make sense, but not to the point where I could fix my <code>mkfun</code> example</p>",
        "id": 125496781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524324652
    },
    {
        "content": "<p>oh wait</p>",
        "id": 125496787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524324682
    },
    {
        "content": "<p>I can actually</p>",
        "id": 125496788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524324687
    },
    {
        "content": "<p><code>notation `mkfun` binders `,` r:(scoped f, f) := r</code> does work</p>",
        "id": 125496790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524324708
    },
    {
        "content": "<p>So, if I may ask, why are you making fun of lambda abstractions?</p>",
        "id": 125496877,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524324862
    },
    {
        "content": "<p>I laughed. Do you also want an answer?</p>",
        "id": 125496885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524324919
    },
    {
        "content": "<p>Both are appreciated <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 125496887,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524324953
    },
    {
        "content": "<p>I'm trying to setup some notations for sums and products</p>",
        "id": 125496922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524324963
    },
    {
        "content": "<p>I would like to be able to write something like <code>def f := λ n, Sum_{0 ≤ i ≤ n} i^2</code></p>",
        "id": 125496937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524325045
    },
    {
        "content": "<p>I have no problem defining such a function</p>",
        "id": 125496938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524325067
    },
    {
        "content": "<p>Using <code>list.sum</code> and <code>list.range</code></p>",
        "id": 125496939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524325080
    },
    {
        "content": "<p>I have trouble setting up the notation</p>",
        "id": 125496979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524325087
    },
    {
        "content": "<p>Cool :) btw, would it be useful to you to have a notation for <code>classical.epsilon</code>: <code>ε x, 1 ≤ x ≤ 3</code>?</p>",
        "id": 125496981,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524325115
    },
    {
        "content": "<p>not sure how easy it would be to implement it</p>",
        "id": 125496982,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325131
    },
    {
        "content": "<p>I mean, what are you going to produce when there is no such element</p>",
        "id": 125496983,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325138
    },
    {
        "content": "<p>in classical Hilbert epsilon it is supposed to produce \"whatever\"</p>",
        "id": 125496991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325156
    },
    {
        "content": "<p><code>classical.epsilon</code> already exists. It's only defined on nonempty types. When no such <code>x</code> exists, an arbitrary value is picked</p>",
        "id": 125497039,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524325210
    },
    {
        "content": "<p>but then it is empty</p>",
        "id": 125497042,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325221
    },
    {
        "content": "<p>what is going to be the type of the output</p>",
        "id": 125497043,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Do you have a special provision for infinite sets in <code>Sum_{ ... }</code>?</p>",
        "id": 125497054,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524325308
    },
    {
        "content": "<p>I was thinking about finite sums here</p>",
        "id": 125497087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524325323
    },
    {
        "content": "<p>Really I want to convert </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>to what I wrote earlier</p>",
        "id": 125497102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524325399
    },
    {
        "content": "<p>having a nice notation</p>",
        "id": 125497105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524325426
    },
    {
        "content": "<p>where the name of the bound variable i is not hard-wired in the notation</p>",
        "id": 125497143,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524325443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> here is the type of <code>epsilon</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">epsilon</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125497161,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524325527
    },
    {
        "content": "<p>oh, I misinterpreted everything</p>",
        "id": 125497205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <br>\nHow about this as the underlying function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>Basically, the notation should be hardwired to fix an upper bound on the range</p>",
        "id": 125497212,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524325662
    },
    {
        "content": "<p>but you still get to filter individual terms</p>",
        "id": 125497251,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524325706
    },
    {
        "content": "<p>I don't really care about the underlying function. I want my notation with only the formula in term of i, not prefaced with a lambda</p>",
        "id": 125497312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524325868
    },
    {
        "content": "<p>One step at a time, young padawan, I'm getting there</p>",
        "id": 125497355,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524325959
    },
    {
        "content": "<p>I'm making progress</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Sum_</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`≤`</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">Sum_</span><span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">i</span>\n</pre></div>",
        "id": 125497521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326383
    },
    {
        "content": "<p>Not bad!</p>",
        "id": 125497568,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524326462
    },
    {
        "content": "<p>I was trying:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">ΣΣ</span> <span class=\"bp\">`</span> <span class=\"n\">binder</span> <span class=\"bp\">`</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span> <span class=\"n\">f</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">ub</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"bp\">≤</span> <span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">t</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sum&#39;</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">t</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">ΣΣ</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>But I think you're not allowed to use <code>scoped</code> so many times.</p>",
        "id": 125497597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524326522
    },
    {
        "content": "<p>I can even replace <code>(i : ℕ)</code> by <code>(i)</code> but not by <code>i</code></p>",
        "id": 125497617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326571
    },
    {
        "content": "<p>Not <code>i</code>? What error does it give you?</p>",
        "id": 125497623,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524326603
    },
    {
        "content": "<p>invalid expression</p>",
        "id": 125497666,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326684
    },
    {
        "content": "<p>That's intriguing. You may want to try giving precedences to the tokens: <code> ` ≤ `:0</code></p>",
        "id": 125497675,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524326745
    },
    {
        "content": "<p>I'll catch up with you later. There an adorable 2 year old here who needs attention :)</p>",
        "id": 125497718,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524326783
    },
    {
        "content": "<p>Too bad, I was hoping your nephew was also a Lean expert</p>",
        "id": 125497720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326807
    },
    {
        "content": "<p>Have fun!</p>",
        "id": 125497723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326814
    },
    {
        "content": "<p>He's more of an Idris kind of guy</p>",
        "id": 125497729,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524326836
    },
    {
        "content": "<p><span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 125497732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326846
    },
    {
        "content": "<p>His name is Idris but I assume that speaks to his parents preference of Idris over Agda and Lean</p>",
        "id": 125497733,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524326859
    },
    {
        "content": "<p>And not to the sexiness of Idris Elba <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue winking eye\">:stuck_out_tongue_winking_eye:</span></p>",
        "id": 125497739,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524326882
    },
    {
        "content": "<p>Does anyone has a decidable predicate on nat at hand?</p>",
        "id": 125503970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524341253
    },
    {
        "content": "<p><code>pos</code></p>",
        "id": 125504018,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524341355
    },
    {
        "content": "<p>Any predicate?</p>",
        "id": 125504019,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524341365
    },
    {
        "content": "<p><code>(λ n : ℕ, true)</code> :-)</p>",
        "id": 125504060,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524341408
    },
    {
        "content": "<p>Maybe somethin like even or odd exist somewhere and is decidable</p>",
        "id": 125504061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524341413
    },
    {
        "content": "<p>I need a decidable instance in the library</p>",
        "id": 125504062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524341431
    },
    {
        "content": "<p>Fun fact: Idris has an <code>Elab</code> monad. Have you ever tried googling for \"idris elab\"?</p>",
        "id": 125504064,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524341445
    },
    {
        "content": "<p>there's <code>prime</code>, in <code>data.nat.prime</code></p>",
        "id": 125504071,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524341504
    },
    {
        "content": "<p>even is decidable, if you define it as <code>n % 2 = 0</code></p>",
        "id": 125504072,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524341505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I couldn't manage to use that instance to prove 3 is prime.</p>",
        "id": 125504117,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524341609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I did some more experiment and I managed to define a syntax for <code>ΣΣ i, i ≥ 3 ∧ i &lt; 21 ∧ even i ▻ i^2</code> which guarantees that <code>i</code> is bounded. How do you like the notation? (I made the formula a bit ugly to demonstrate that the form is pretty flexible)</p>",
        "id": 125504118,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524341610
    },
    {
        "content": "<p><code>#eval if nat.prime 3 then 1 else 0</code> does work here</p>",
        "id": 125504165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524341715
    },
    {
        "content": "<p>thanks</p>",
        "id": 125504166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524341717
    },
    {
        "content": "<p><code>example : 1 = if nat.prime 3 then (1 : ℕ) else (0 : ℕ) := rfl</code> doesn't work though unfortunately. It does work for 2 though</p>",
        "id": 125504217,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524341843
    },
    {
        "content": "<p>My current achievements are at <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/bigop.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/bigop.lean\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/bigop.lean</a></p>",
        "id": 125504502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524342527
    },
    {
        "content": "<p>I still has precedence issues</p>",
        "id": 125504503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524342540
    },
    {
        "content": "<p>But I'm already happy</p>",
        "id": 125504508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524342548
    },
    {
        "content": "<p>I have quite a lot of ways of computing 5!</p>",
        "id": 125504510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524342563
    },
    {
        "content": "<p>And I seems I was able to state a lemma about big product for an associative operator and apply it to addition in nat</p>",
        "id": 125504556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524342610
    },
    {
        "content": "<p>For those who didn't follow previous discussions, I'm going after <a href=\"http://hal.inria.fr/docs/00/33/11/93/PDF/main.pdf\" target=\"_blank\" title=\"http://hal.inria.fr/docs/00/33/11/93/PDF/main.pdf\">http://hal.inria.fr/docs/00/33/11/93/PDF/main.pdf</a></p>",
        "id": 125504568,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524342669
    },
    {
        "content": "<p>Nice!</p>",
        "id": 125504569,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524342675
    },
    {
        "content": "<p>If you're interested, I've put my code here:</p>\n<p><a href=\"https://gist.github.com/cipher1024/604d5ec28ceb29e80219ce6e69bb1ea4\" target=\"_blank\" title=\"https://gist.github.com/cipher1024/604d5ec28ceb29e80219ce6e69bb1ea4\">https://gist.github.com/cipher1024/604d5ec28ceb29e80219ce6e69bb1ea4</a></p>",
        "id": 125504576,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524342716
    },
    {
        "content": "<p>Hopefully this will be resolved in lean 4 (<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> vm replacements please) but right now you have to make a choice between VM efficient and kernel efficient. <code>decidable_prime_1</code> is kernel efficient and <code>decidable_prime</code> is VM efficient</p>",
        "id": 125504617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524342730
    },
    {
        "content": "<p>the default one you get is <code>decidable_prime</code></p>",
        "id": 125504622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524342750
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/bigop.lean#L67\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/bigop.lean#L67\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/bigop.lean#L67</a> has no trouble suming primes numbers in <code>range 5</code></p>",
        "id": 125504634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524342788
    },
    {
        "content": "<p>That's scientific computing!</p>",
        "id": 125504637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524342800
    },
    {
        "content": "<p>Lean 4 will use a simplifier on code to be compiled, which should also enable VM replacements</p>",
        "id": 125504691,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524342902
    },
    {
        "content": "<p>What is the precedence voodoo I need to get rid of parentheses in  <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/bigop.lean#L71\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/bigop.lean#L71\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/bigop.lean#L71</a> ? I mean, everything on LHS of the equality is surrounded in parenthesis, otherwise it doesn't work. How to avoid that?</p>",
        "id": 125504928,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524343351
    },
    {
        "content": "<p>use a high precedence for left brackets and a low prec for right brackets</p>",
        "id": 125504936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524343408
    },
    {
        "content": "<p>Which brackets?</p>",
        "id": 125504985,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524343454
    },
    {
        "content": "<p>There are alternatives characters for Pi and Sigma <code>\\sum</code> and <code>\\prod</code>.</p>",
        "id": 125505203,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524343946
    },
    {
        "content": "<p>I know, but they look weird in my VScode</p>",
        "id": 125505208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524343996
    },
    {
        "content": "<p>too tall</p>",
        "id": 125505209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524343998
    },
    {
        "content": "<p>But of course I like the semantic abbreviation</p>",
        "id": 125505213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344020
    },
    {
        "content": "<blockquote>\n<p>too tall</p>\n</blockquote>\n<p>That's why they're called big operators.</p>",
        "id": 125505265,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524344126
    },
    {
        "content": "<p><code>\\sum</code> and <code>\\Sigma</code> aren't the same</p>",
        "id": 125505270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524344148
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 125505321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344226
    },
    {
        "content": "<p>Of course one is taller</p>",
        "id": 125505322,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344236
    },
    {
        "content": "<p>But do you mean something else?</p>",
        "id": 125505323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344242
    },
    {
        "content": "<p>And of course we can give a different definition to different symbols</p>",
        "id": 125505325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344258
    },
    {
        "content": "<p>Oh, crap! My append lemma is not correct. Associativity is not enough, I really need a monoid.</p>",
        "id": 125506073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524345786
    },
    {
        "content": "<p>Oh! I just used <code>rsimp</code> that <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> explained earlier today!</p>",
        "id": 125506130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524345957
    },
    {
        "content": "<p>No</p>",
        "id": 125506170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524346012
    },
    {
        "content": "<p>Actually Lean is hanging</p>",
        "id": 125506172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524346018
    }
]