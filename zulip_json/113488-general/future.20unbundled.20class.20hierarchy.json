[
    {
        "content": "<p>Sebastian Ullrich said (in the multiset thread)</p>\n<blockquote>\n<p>Just idle speculation, I suppose in a future unbundled class hierarchy we would rather have an instance <code>is_zero âˆ… (multiset a)</code> instead of <code>has_zero (multiset a)</code>?</p>\n</blockquote>\n<p>Does this say \"in Lean 4, the whole type class system is going to change a lot\"? </p>\n<p>I realised over the last two weeks that mathematicians think \"G is a group\" is a proposition, but that <code>Hyp : group G</code> is not. Maybe if a mathematician is pushed they might concede that actually it's \"the pair <code>(G,*)</code> is a group\" which is the proposition, but Lean still wants more (identity and inverse). I guess what I'm saying is that questions from students have made me myself question why things are set up this way.</p>",
        "id": 129698387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531653916
    },
    {
        "content": "<p>The last bit has to do with constructivity in type theory</p>",
        "id": 129698439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531653988
    },
    {
        "content": "<p>Even if a function is uniquely defined in the relational sense, it's not quite the same as a function in type theory</p>",
        "id": 129698457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654038
    },
    {
        "content": "<p>I thought it might do. So if someone decided to make the fundamental typeclass <code>is_group</code> we'd end up carrying around all three things (mul, inv, identity)</p>",
        "id": 129698464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654061
    },
    {
        "content": "<p>So while in ZFC it suffices to have (G,*) since 1 is unique, in lean you really want a concrete witness to this</p>",
        "id": 129698510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654088
    },
    {
        "content": "<p>What about making <code>G</code> plus <code>mul</code> + <code>inv</code> + <code>1</code> into a structure, and making <code>is_group</code> a propositional typeclass?</p>",
        "id": 129698514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654134
    },
    {
        "content": "<p>In classical lean, you can nevertheless define 1 from * if you wanted, but its definitional reductions won't be great</p>",
        "id": 129698516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654138
    },
    {
        "content": "<p>I'm just trying to question the way we do it, not because of groups, but because of diamonds in general. Presumably if every typeclass was a Prop the diamond problems would go away</p>",
        "id": 129698524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654179
    },
    {
        "content": "<p>That option has been discussed (<code>group_struct</code> plus <code>is_group</code>)</p>",
        "id": 129698526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654185
    },
    {
        "content": "<p>My response is, if <code>group_struct</code> isn't useful on its own it's not worth the definition</p>",
        "id": 129698572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654212
    },
    {
        "content": "<p>I was wondering whether Sebastian's comments meant that some changes would be implemented</p>",
        "id": 129698575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654222
    },
    {
        "content": "<p>if every interesting <code>group_struct</code> is also a group then it may as well be bundled in the definition</p>",
        "id": 129698582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654244
    },
    {
        "content": "<p>Remember there were problems with product of metric / top spaces (which I think were solved) and problems with modules over rings (which I think were not)</p>",
        "id": 129698584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654253
    },
    {
        "content": "<p>Can this sort of approach be used to solve them?</p>",
        "id": 129698590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654263
    },
    {
        "content": "<p>Sebastian's comments relate to Leo's plans with the new algebraic hierarchy</p>",
        "id": 129698596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654279
    },
    {
        "content": "<p>If every interesting <code>group_struct</code> were a group, but this caused problems later down the line, then this would be an argument for not bundling.</p>",
        "id": 129698597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654290
    },
    {
        "content": "<p>i.e. the <code>@[algebra]</code> classes</p>",
        "id": 129698598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654293
    },
    {
        "content": "<p>that's a rather vague worry</p>",
        "id": 129698601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654318
    },
    {
        "content": "<p>Where do I read about Leo's plans and the <code>@[algebra]</code> classes?</p>",
        "id": 129698602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654319
    },
    {
        "content": "<p>there's a wiki page for it</p>",
        "id": 129698641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654335
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/wiki/Refactoring-structures\" target=\"_blank\" title=\"https://github.com/leanprover/lean/wiki/Refactoring-structures\">https://github.com/leanprover/lean/wiki/Refactoring-structures</a></p>",
        "id": 129698644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654357
    },
    {
        "content": "<p>I remain skeptical. I will wait for Leo's implementation before considering anything along these lines</p>",
        "id": 129698654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654413
    },
    {
        "content": "<p>So here we are just waiting to see what happens in Lean 4 and then we go with whatever changes get made?</p>",
        "id": 129698667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654442
    },
    {
        "content": "<p>pretty much</p>",
        "id": 129698695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654450
    },
    {
        "content": "<p>it's not like there is any other option</p>",
        "id": 129698698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654457
    },
    {
        "content": "<p>I thought that another vague plan was to get a whole bunch of maths out of core Lean</p>",
        "id": 129698699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654459
    },
    {
        "content": "<p>I believe that will happen as well</p>",
        "id": 129698703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654474
    },
    {
        "content": "<p>and then it's up to mathlib to decide whether it's <code>group</code> or <code>is_group</code></p>",
        "id": 129698706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654481
    },
    {
        "content": "<p>It's possible that changes to <code>simp</code> will necessitate a certain design</p>",
        "id": 129698713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654504
    },
    {
        "content": "<p>And it's not just \"leo broke today's system\", it could just as easily be \"Leo's new system is way better and we would be stupid not to use it\"</p>",
        "id": 129698767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654565
    },
    {
        "content": "<p>I predict that most of the large scale structural changes in mathlib after lean 4 will be done because we want to take advantage of some new feature, not to fix a breaking change</p>",
        "id": 129698819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654683
    },
    {
        "content": "<p>I'd seen that wiki page several times before, and my interpretation of it was \"it's mostly CS stuff that I don't understand, but it documents an old change to the structure command which was already made\"</p>",
        "id": 129698841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654734
    },
    {
        "content": "<p>I now think this interpretation might be incorrect -- it might say \"even though there is <code>use_old_structure_command</code> or whatever it's called, there are still some things here which are not in Lean and might in the future be in Lean\"</p>",
        "id": 129698852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654780
    }
]