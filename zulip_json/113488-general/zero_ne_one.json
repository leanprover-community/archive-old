[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">opposite</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_ne_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonzero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nonzero</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_one</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonzero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">zero_ne_one</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">op_inj</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">opposite</span>\n</code></pre></div>",
        "id": 198998320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590656819
    },
    {
        "content": "<p>why does it throw an error when I replace <code>@zero_ne_one α</code> with <code>@zero_ne_one _</code>?</p>",
        "id": 198998353,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590656836
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">op_inj</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">op</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 198998366,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590656848
    },
    {
        "content": "<p>does that mean I should make that parameter explicit?</p>",
        "id": 198998593,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657004
    },
    {
        "content": "<p>I think this is a <a href=\"https://github.com/leanprover-community/lean/issues/282\">lean#282</a> issue</p>",
        "id": 198999229,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657495
    },
    {
        "content": "<p>I think this is expected behavior</p>",
        "id": 198999242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657505
    },
    {
        "content": "<p>I think you should not make the type explicit</p>",
        "id": 198999256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657521
    },
    {
        "content": "<p>because it didn't exist when <code>nonzero</code> was bundled</p>",
        "id": 198999257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657521
    },
    {
        "content": "<p>I can also write <code>λ h, zero_ne_one (op_inj h : (0:α) = 1)</code></p>",
        "id": 198999313,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657583
    },
    {
        "content": "<p>The type of the goal is <code>op 0 != op 1</code>, right? Since these have type <code>opposite A</code>, when you apply <code>zero_ne_one</code> lean will guess to fill the type with <code>opposite A</code> instead of <code>A</code></p>",
        "id": 198999319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657588
    },
    {
        "content": "<p>no, the goal is <code>false</code> because of the <code>fun h</code></p>",
        "id": 198999374,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657604
    },
    {
        "content": "<p>what type does <code>op_inj h</code> have?</p>",
        "id": 198999434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657654
    },
    {
        "content": "<p>it should say (0:\\a) = 1</p>",
        "id": 198999452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657669
    },
    {
        "content": "<p>it seems from the error message that lean still managed to work it out top down</p>",
        "id": 198999471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657686
    },
    {
        "content": "<p>but the 0 and 1 in <code>h</code> didn't unfold to <code>op 0 = op 1</code></p>",
        "id": 198999476,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657690
    },
    {
        "content": "<p><code>h</code> has type <code>(0 : opposite \\a) = 1</code></p>",
        "id": 198999484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657700
    },
    {
        "content": "<p>which can be unfolded to <code>op 0 = op 1</code></p>",
        "id": 198999498,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657712
    },
    {
        "content": "<p>theoretically</p>",
        "id": 198999502,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657716
    },
    {
        "content": "<p>but somehow Lean got confused in <code>zero_ne_one</code></p>",
        "id": 198999546,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657724
    },
    {
        "content": "<p>does it work if you put the type ascription on <code>h</code> instead of <code>op_inj h</code>?</p>",
        "id": 198999547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657725
    },
    {
        "content": "<p>aha</p>",
        "id": 198999568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657745
    },
    {
        "content": "<p>you might even be able to change the type of <code>h</code> at the source, in the lambda</p>",
        "id": 198999598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657771
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonzero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">(</span><span class=\"n\">op_inj</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 198999608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657776
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">op_inj</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">op</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 198999613,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657781
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonzero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">(</span><span class=\"n\">op_inj</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 198999633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657807
    },
    {
        "content": "<p>so what's going wrong with the elaboration?</p>",
        "id": 198999638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657813
    },
    {
        "content": "<p>well type ascription doesn't actually change the type</p>",
        "id": 198999654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657832
    },
    {
        "content": "<p>if you used <code>show op (0 : α) = op 1, from h</code> it would also work</p>",
        "id": 198999707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657847
    },
    {
        "content": "<p>yeah but why can't Lean do this for me?</p>",
        "id": 198999725,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657866
    },
    {
        "content": "<p>Do it again with pp.all</p>",
        "id": 198999734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590657877
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op_inj</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 198999808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590657927
    },
    {
        "content": "<p>does <code>by exact h</code> work?</p>",
        "id": 198999966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590658034
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">State</span>\n<span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">))</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>opposites.lean:114:42: error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">nonzero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">))</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"n\">l_1</span>\n</code></pre></div>\n\n\n<p>opposites.lean:114:53: error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">))</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">nonzero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">))</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 199000075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590658089
    },
    {
        "content": "<p>I think Lean cannot unify <code>(@opposite.op.{u+1} ?m_1 (@has_zero.zero.{u} ?m_1 ?m_2))</code> to <code>(@has_zero.zero.{u} (opposite.{u+1} α) (@opposite.has_zero.{u} α _inst_1))</code></p>",
        "id": 199000146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590658168
    },
    {
        "content": "<p>or is it the other way round</p>",
        "id": 199000151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590658171
    },
    {
        "content": "<p>well unify is symmetric</p>",
        "id": 199000175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590658185
    },
    {
        "content": "<p>oh is it</p>",
        "id": 199000182,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590658191
    },
    {
        "content": "<p>sure, there could in general be metavariables on both sides</p>",
        "id": 199000265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590658225
    },
    {
        "content": "<p>so what's going on here?</p>",
        "id": 199000289,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590658246
    },
    {
        "content": "<p>I assume that <code>opposite.has_zero</code> is defined as <code>&lt;op 0&gt;</code>?</p>",
        "id": 199000314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590658267
    },
    {
        "content": "<p>right</p>",
        "id": 199000318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590658272
    },
    {
        "content": "<p>as demonstrated in my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 199000327,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590658278
    },
    {
        "content": "<p>and for some reason when it's bundled it says <code>op 0 = op 1</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">opposite</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">zero_ne_one_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_ne_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">[</span><span class=\"n\">zero_ne_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_ne_one_class</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_one</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">zero_ne_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">zero_ne_one_class</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- h : op 0 = op 1</span>\n  <span class=\"bp\">..</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_one</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">opposite</span>\n</code></pre></div>",
        "id": 199000636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590658495
    },
    {
        "content": "<p>this is a <a href=\"https://github.com/leanprover-community/lean/issues/282\">lean#282</a> issue afterall methinks</p>",
        "id": 199000659,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590658505
    },
    {
        "content": "<p>I can get the error without using structure literals though</p>",
        "id": 199000897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590658686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">op_inj</span> <span class=\"bp\">_</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 199000944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590658736
    },
    {
        "content": "<p>Aha:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">numerals</span> <span class=\"n\">false</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">op_inj</span> <span class=\"bp\">_</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">α</span><span class=\"err\">ᵒᵖ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">op</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">right</span><span class=\"o\">:</span> <span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">α</span><span class=\"err\">ᵒᵖ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">right</span><span class=\"o\">:</span> <span class=\"n\">id</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">α</span><span class=\"err\">ᵒᵖ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"err\">ᵒᵖ</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 199001505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590659097
    },
    {
        "content": "<p>It decided that it was more worthwhile to unfold <code>op</code> than <code>has_zero.zero</code></p>",
        "id": 199001546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590659128
    },
    {
        "content": "<p>resulting in the incorrect assignment <code>?m_1 := αᵒᵖ</code></p>",
        "id": 199001572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590659151
    },
    {
        "content": "<p>oh well</p>",
        "id": 199002004,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590659468
    },
    {
        "content": "<p>what to do</p>",
        "id": 199002009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590659474
    },
    {
        "content": "<p>I think this kind of problem can in theory be addressed by adjusting definitional heights, but that's a black magic I don't want to start peddling</p>",
        "id": 199002354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590659713
    },
    {
        "content": "<p>it seems like the kind of problem that should happen all the time though, so I must be missing some heuristic</p>",
        "id": 199002404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590659759
    },
    {
        "content": "<p>The short term fix is obvious though: use <code>@</code> or a type ascription</p>",
        "id": 199002468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590659783
    }
]