[
    {
        "content": "<p>Are the <code>has_coe</code>s in this message safe? Are they sensible? Would they make sense in mathlib?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Equality.20of.20function.20on.20intersection/near/206833525\">said</a>:</p>\n<blockquote>\n<p>This seems to work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">coe_left_inter</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">↥</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">coe_right_inter</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">↥</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 206845831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597340308
    },
    {
        "content": "<p>nooo u can't just make every function a coercion</p>",
        "id": 206845897,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597340362
    },
    {
        "content": "<p>As far as coercions go they seem pretty safe/sensible to me, since the type gets smaller and you're not generally likely to have terms of <code>A ∩ B</code> in the first place. Also, the instances are defeq to each other when <code>A</code> and <code>B</code> are.</p>",
        "id": 206846047,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597340438
    },
    {
        "content": "<blockquote>\n<p>since the type gets smaller</p>\n</blockquote>\n<p>Does that then mean that <code>has_coe ↥A ↥(A ∪ B)</code> would _not_ be sensible / safe?</p>",
        "id": 206846537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597340686
    },
    {
        "content": "<p>it's definitely scarier</p>",
        "id": 206846596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597340720
    },
    {
        "content": "<p>I thought the former would be scarier</p>",
        "id": 206846834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597340815
    },
    {
        "content": "<p>please no. The typeclass problem for coercion already includes a ton of random garbage</p>",
        "id": 206850108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597342471
    },
    {
        "content": "<p>Maybe I have the wrong mental model for how coercion instance search works? I thought it was basically directed by the actual type of the thing being coerced, and then recursive on the result of the <code>has_coe</code>. So instances like these are basically working by structural recursion, and won't match anything that's not of the form <code>A ∩ B</code>.</p>",
        "id": 206853253,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597344104
    },
    {
        "content": "<p>I think weird coercions are a great way to get people totally lost about what they're writing, and this is a coercion from a coercion to a coercion. Regardless of whether type class inference will get confused, people will get confused.</p>",
        "id": 206854320,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597344606
    },
    {
        "content": "<p>I'm not trying to argue for the coercion, I just don't see why it would be particularly problematic (I also don't find this confusing because coercing a <code>set</code> to a <code>subtype</code> is super common, but YMMV).</p>",
        "id": 206854624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597344761
    },
    {
        "content": "<p>Would these be sensible as <code>has_lift</code> instead of <code>has_coe</code>?</p>",
        "id": 206856828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597345788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Coercions.20on.20subtypes/near/206846537\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>since the type gets smaller</p>\n</blockquote>\n<p>Does that then mean that <code>has_coe ↥A ↥(A ∪ B)</code> would _not_ be sensible / safe?</p>\n</blockquote>\n<p>Does it even work?</p>",
        "id": 206922819,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597407306
    },
    {
        "content": "<p><code>{X Y : Type*} {A B : set X} (f : A → Y) (g: B → Y) (h : ∀ x : A ∩ B, f x = g x)</code> is playing an even more dangerous game.</p>",
        "id": 206928062,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597411154
    },
    {
        "content": "<p>For an <code>x ∈ A ∩ B</code>, its type should be <code>X</code>. Writing <code>x : A ∩ B</code> is nowhere near what you meant to express.</p>\n<p>Same for <code>f</code> and <code>g</code>, they are not mapping the members of <code>A</code> and <code>B</code> to <code>Y</code>, so they are also not expressing functions that have a domain.</p>",
        "id": 206928902,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597411803
    },
    {
        "content": "<blockquote>\n<p>Writing x : A ∩ B is nowhere near what you meant to express.</p>\n</blockquote>\n<p>It's not far off - it's identical to <code>{x : {x' : X // x' ∈ A ∩ B})</code> which is not that different from saying<code>(x : X) (h : x ∈ A ∩ B)</code></p>",
        "id": 206935724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597415876
    },
    {
        "content": "<blockquote>\n<p>they are not mapping the members of <code>A</code> and <code>B</code> to <code>Y</code></p>\n</blockquote>\n<p>I'm confused by your statement - that's exactly what they're doing - they're partial functions over <code>X</code> that only accept members of <code>A</code> and <code>B</code>.</p>",
        "id": 206935893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597415983
    },
    {
        "content": "<p>Oh, I didn't recognize them as identical until I saw </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Coercion from a set to the corresponding subtype. -/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 206942853,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597419646
    }
]