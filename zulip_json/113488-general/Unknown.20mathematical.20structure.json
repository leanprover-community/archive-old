[
    {
        "content": "<p>Hello everyone. Thank you all for working so hard on this amazing project!</p>\n<p>I have defined an inductive type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounded_lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">⊥</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>depending on a relation <code>r</code> satisfying the following axioms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">hr₀</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">⊥</span> <span class=\"bp\">⊥</span>\n<span class=\"kd\">variable</span> <span class=\"n\">hr₁</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n<span class=\"kd\">variable</span> <span class=\"n\">hr₂</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here are some examples of properties that derive from the axioms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">hr₄</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">b</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hr₅</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hr₆</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hr₈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 227401648,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1614072083
    },
    {
        "content": "<p>My question is, is there a better way to express this by using the machinery of mathlib? I can prove all these various things by hand but I don't have a name for this structure and I wonder if I'm reinventing the wheel...</p>",
        "id": 227401683,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1614072114
    },
    {
        "content": "<p>What drives you to investigate this particular combination of axioms?</p>",
        "id": 227401874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614072224
    },
    {
        "content": "<p>It' s supposed to model the relationships among a particular set of partial differential equations :)</p>",
        "id": 227401988,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1614072284
    },
    {
        "content": "<p>One random observation I can make is that <code>r</code> doesn't need to have the same domain and codomain</p>",
        "id": 227402068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614072354
    },
    {
        "content": "<p>although <code>q</code> needs it</p>",
        "id": 227402136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614072373
    },
    {
        "content": "<p>I think you would be best served just making up some name for this and working with it for a while</p>",
        "id": 227402252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614072456
    },
    {
        "content": "<p>I'm not sure what you mean by a different domain and codomain of <code>r</code>. Something like <code>r : α → β → Prop</code>?</p>",
        "id": 227402456,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1614072561
    },
    {
        "content": "<p>yeah</p>",
        "id": 227402465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614072567
    },
    {
        "content": "<p>Sorry I'm not a real mathematician :)</p>",
        "id": 227402483,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1614072579
    },
    {
        "content": "<p>also A doesn't need a bottom</p>",
        "id": 227402493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614072584
    },
    {
        "content": "<p>I don't see how your generalization works Mario, can you paste the code?</p>",
        "id": 227402596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614072632
    },
    {
        "content": "<p><code>q b -&gt; q c</code> requires b and c to be the same type, right?</p>",
        "id": 227402629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614072660
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounded_lattice</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">tuckerian</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bottom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">downward_closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tuckerian_closure</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">tuckerian_closure</span> <span class=\"bp\">⊥</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">tuckerian_closure</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">tuckerian_closure</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 227403053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614072916
    },
    {
        "content": "<p>Wow! I always wanted something named after me :) Thank you very much</p>",
        "id": 227403185,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1614072978
    },
    {
        "content": "<p>The first two axioms say that for each fixed <code>a</code>, <code>r a</code> is a sub-<code>sup_bot_semilattice</code></p>",
        "id": 227403188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614072979
    },
    {
        "content": "<p>so this is an antitone function from <code>A -&gt; sup_bot_subsemilattice B</code></p>",
        "id": 227403432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614073103
    }
]