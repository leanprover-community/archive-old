[
    {
        "content": "<p>In math, we often prove \"for all x, there exists y such that ...\", then prove that y is unique, then define a function mapping x to y.  For example, a common group axiom is \"For each a in G, there exists an element b in G such that a ⋅ b = e and b ⋅ a = e, where e is the identity element.\" (Taken from Wikipedia.)  We then prove that the inverse is unique, which lets us declare a function taking an element to its inverse.</p>\n<p>How is this done in Lean?  I found a CMU master's thesis on formalizing group theory in Lean, but it starts with the inverse function, not a proposition on the existence of the inverse.  <a href=\"https://www.andrew.cmu.edu/user/avigad/Students/zipperer_ms_thesis.pdf\">https://www.andrew.cmu.edu/user/avigad/Students/zipperer_ms_thesis.pdf</a></p>\n<p>The book \"Logic and Proof\" chapter 16 \"Functions in Lean\" mentions this, including iota notation, but doesn't say how to render this in Lean.  16.4 \"Defining the inverse classically\" gets close, but talks about the case where you HAVEN'T proven uniqueness, and therefore you need to invoke the axiom of choice.  As I understand it, in the case of exists UNIQUE, you don't need to invoke AoC, and a constructive proof of  \"for all x exists y,\" which provides a witness for y, essentially gives you a way to compute y from x.</p>\n<p>So, is iota notation common in Lean?  For example, is it used for inverse in group, or the square root function on real numbers?</p>",
        "id": 234727123,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1618510788
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a> gives a choice, once and for all, for every existential statement in the system, while <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some_spec\">docs#classical.some_spec</a> gives the proof that this choice satisfies the proposition in the existential.</p>",
        "id": 234727883,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618511077
    },
    {
        "content": "<p>as far as I know, even if you have a proof of unique existence, this classical.some is still the only way to \"produce\" a function</p>",
        "id": 234728032,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618511141
    },
    {
        "content": "<p>In mathlib, we have <code>∃!</code> notation. And one can define a <code>noncomputable </code>function that extracts an element from an <code>exists</code> proposition. If you postulate that <code>∃!</code>, then the proof that the term the function produces is unique is true by definition, because you postulated it to be so. For finite types, one can even do this computably.</p>",
        "id": 234728180,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618511192
    },
    {
        "content": "<p>NB Andrew's thesis is pretty outdated...</p>\n<p>As far as using <code>some</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_even</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_even</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"n\">exists_even</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">even_my_even</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">my_even</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.some_spec</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>If you have have unique existence, you can prove moreover that anything meeting the specification is equal to the value returned by <code>some</code>.</p>",
        "id": 234728444,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1618511291
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.choose\">docs#finset.choose</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> are the computable way of eliminating a unique existence, over a finite set or type.</p>",
        "id": 234728488,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618511306
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#choose\">tactic#choose</a></p>",
        "id": 234731180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618512369
    },
    {
        "content": "<blockquote>\n<p>As I understand it ... a constructive proof of \"for all x exists y,\" which provides a witness for y, essentially gives you a way to compute y from x.</p>\n</blockquote>\n<p>If your proof is genuinely constructive then you needn't touch <code>Prop</code> at all.. That is, instead of using it to prove <code>(∀ x, ∃ y, r x y : Prop)</code>, use it to define <code>(Π x, {y // r x y} : Type)</code>.</p>",
        "id": 234748102,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1618518862
    },
    {
        "content": "<p>My understanding is that in set theory, if you know there's a unique <code>y</code> such that <code>R x y</code> then you can define a function sending <code>x</code> to <code>y</code>, but in Lean's type theory you still need choice in general.</p>",
        "id": 234758293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618522571
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> does not use choice</p>",
        "id": 234760987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618523985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Going.20from.20.22exists.20unique.22.20to.20a.20function/near/234760987\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> does not use choice</p>\n</blockquote>\n<p>Right, it all comes down to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.choose_x\">docs#list.choose_x</a></p>",
        "id": 234761485,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618524241
    },
    {
        "content": "<p>The lisp guys were right, it's S expressions all the way down...</p>",
        "id": 234761646,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618524321
    }
]