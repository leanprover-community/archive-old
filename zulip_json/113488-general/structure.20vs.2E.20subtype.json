[
    {
        "content": "<p>I was wondering why one would choose a <code>structure</code> over a <code>subtype</code> (or vice versa) for <code>finset</code> or any similar construction. It seems like the two are equivalent, but I might be missing something. I don't see an advantage for using a <code>structure</code>. Using a <code>subtype</code> gives you a few existing simple lemmas that you wouldn't have to write, but that's the only advantage I see, and it's relatively minor.</p>",
        "id": 129073745,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695024
    },
    {
        "content": "<p>write the appropriate simp lemmas yourself :)</p>",
        "id": 129073788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695048
    },
    {
        "content": "<p>Which simp lemmas?</p>",
        "id": 129073806,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695086
    },
    {
        "content": "<p>oh, I thought you meant simp lemma by simple lemma</p>",
        "id": 129073819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695110
    },
    {
        "content": "<p>No, I meant <code>init/data/subtype/basic.lean</code>, which is all the support I've found for <code>subtype</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">logic</span>\n<span class=\"kn\">open</span> <span class=\"n\">decidable</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subtype</span>\n\n<span class=\"n\">def</span> <span class=\"n\">exists_of_subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tag_irrelevant</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">lemma</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}},</span> <span class=\"n\">val</span> <span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a2</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">a2</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨.</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">eta</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">subtype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">subtype</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 129073879,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695185
    },
    {
        "content": "<p>erase \"simp\" from my advice</p>",
        "id": 129073887,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695204
    },
    {
        "content": "<p>Sure, you could write these yourself, which is why I said the advantage is relatively minor.</p>",
        "id": 129073906,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695232
    },
    {
        "content": "<p>So, given that, I'm wondering why choose one or the other.</p>",
        "id": 129073921,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695258
    },
    {
        "content": "<p>then don't choose :P</p>",
        "id": 129073968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695313
    },
    {
        "content": "<p>Oh, there are at least a couple other options, of course, depending on what you want: <code>exists</code> and (<code>p</code>)<code>sigma</code>.</p>",
        "id": 129074046,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695413
    },
    {
        "content": "<p>But, still, you have to make choice, assuming you want to do something and not nothing. <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue winking eye\">:stuck_out_tongue_winking_eye:</span></p>",
        "id": 129074052,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695438
    },
    {
        "content": "<p>write both</p>",
        "id": 129074056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695452
    },
    {
        "content": "<p>don't use choice</p>",
        "id": 129074058,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695457
    },
    {
        "content": "<p>Why, Kenny?</p>",
        "id": 129074066,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695480
    },
    {
        "content": "<p>choice is non-constructive</p>",
        "id": 129074072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695513
    },
    {
        "content": "<p>It's a decidable choice.</p>",
        "id": 129074115,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695527
    },
    {
        "content": "<p>Note that I'm talking about constructing something. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 129074137,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695587
    },
    {
        "content": "<blockquote>\n<p>I was wondering why one would choose a <code>structure</code> over a <code>subtype</code> (or vice versa) for <code>finset</code> or <strong>any similar construction</strong>.</p>\n</blockquote>",
        "id": 129074146,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530695620
    },
    {
        "content": "<p>never use choice</p>",
        "id": 129074207,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695706
    },
    {
        "content": "<p>even when it's decidable</p>",
        "id": 129074209,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695710
    },
    {
        "content": "<p>it's evil</p>",
        "id": 129074213,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695723
    },
    {
        "content": "<p>Kenny, why did you choose to enroll at Imperial?</p>",
        "id": 129074217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530695744
    },
    {
        "content": "<p>I didn't choose</p>",
        "id": 129074227,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695758
    },
    {
        "content": "<p>it just happened</p>",
        "id": 129074272,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695767
    },
    {
        "content": "<p>Just like you trolling this thread <em>just happens</em></p>",
        "id": 129074283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530695785
    },
    {
        "content": "<p>lol</p>",
        "id": 129074288,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530695797
    },
    {
        "content": "<p>In CS they choose things all the time -- even to the point of breaking symmetry. For example they chose <code>lt</code> to be the important one and define <code>gt</code> through it. Here it doesn't matter which one to choose, but they had to choose one.</p>",
        "id": 129074308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530695866
    },
    {
        "content": "<p>For making more complex structures, it is dawning on me more and more that you do have to make a design decision -- what the \"fundamental\" way of doing it is -- and then you build other things on top. But I guess you only prove the lemmas for one implementation and then deduce for the others.</p>",
        "id": 129074375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530695950
    },
    {
        "content": "<p>Kenny, I suggest that it <em>just happens</em> that you read the following article in the Journal of the American Philosophical Association: <a href=\"https://www.cambridge.org/core/journals/journal-of-the-american-philosophical-association/article/aristotle-on-trolling/540BB557C82186C33BFFB61E35A0B5B6\" target=\"_blank\" title=\"https://www.cambridge.org/core/journals/journal-of-the-american-philosophical-association/article/aristotle-on-trolling/540BB557C82186C33BFFB61E35A0B5B6\">https://www.cambridge.org/core/journals/journal-of-the-american-philosophical-association/article/aristotle-on-trolling/540BB557C82186C33BFFB61E35A0B5B6</a></p>",
        "id": 129074387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530696001
    },
    {
        "content": "<p>Kevin, yes, and then write a solid API.</p>",
        "id": 129074435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530696025
    },
    {
        "content": "<p>So the question is that in any specific case, e.g. fintype, topological spaces, valuations, whatever -- which construction do you make \"fundamental\"? And this seems to me to be a very delicate question.</p>",
        "id": 129074441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530696043
    },
    {
        "content": "<p>I am currently trying to grasp the math-API to mixed Hodge modules. There really is a lot of API there. A huge black box behind it, but a solid API.</p>",
        "id": 129074449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530696067
    },
    {
        "content": "<p>Kevin, if the API is good, the question becomes a bit less delicate, I hope.</p>",
        "id": 129074495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530696125
    },
    {
        "content": "<p>But lots of parts in mathlib are lacking good API's. (And I myself am very bad at writing good API's.)</p>",
        "id": 129074505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530696150
    },
    {
        "content": "<blockquote>\n<p>So the question is that in any specific case, e.g. fintype, topological spaces, valuations, whatever -- which construction do you make \"fundamental\"? And this seems to me to be a very delicate question.</p>\n</blockquote>\n<p>For my question, I can only see a slight <em>practical</em> advantage to choosing <code>subtype</code> over <code>structure</code>. I was wondering if there was anything deeper.</p>",
        "id": 129074509,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530696172
    },
    {
        "content": "<p>By the way, this <span class=\"emoji emoji-2b06\" title=\"arrow up\">:arrow_up:</span> is me trying to stay on the topic of the thread. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 129074523,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530696224
    },
    {
        "content": "<p>Though I'm happy to see other threads branch off on related topics.</p>",
        "id": 129074585,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530696252
    },
    {
        "content": "<p>The results of my <code>finset</code> <code>structure</code> → <code>subtype</code> experiment: <a href=\"https://github.com/leanprover/mathlib/pull/183\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/183\">https://github.com/leanprover/mathlib/pull/183</a></p>",
        "id": 129344097,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531137259
    }
]