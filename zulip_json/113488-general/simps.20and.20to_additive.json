[
    {
        "content": "<p>Do <code>simps</code> and <code>to_additive</code> play well together?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Composition of monoid morphisms (`monoid_hom.comp`) as a monoid morphism. -/</span>\n<span class=\"kd\">@[simps, to_additive \"Composition of additive monoid morphisms</span>\n<span class=\"kd\">(`add_monoid_hom.comp`) as an additive monoid morphism.\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">comp_hom</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>this generate <code>monoid_hom.comp_hom_apply_apply</code> but the additive version seems to be missing.</p>",
        "id": 219574238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607673775
    },
    {
        "content": "<p>What order do the attributes execute in? Is it left to right, or the reverse order like python?</p>",
        "id": 219574625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607674147
    },
    {
        "content": "<p><code>to_additive</code> should be last (<a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#to_additive\">https://leanprover-community.github.io/mathlib_docs/attributes.html#to_additive</a>)<br>\nbut there's also a fixed list of attributes that it copies somewhere, I think</p>",
        "id": 219599927,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607689965
    },
    {
        "content": "<p>This can easily be implemented by adding <code>simps</code> to this list: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/group/to_additive.lean#L296\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/group/to_additive.lean#L296</a></p>",
        "id": 219680693,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1607735110
    },
    {
        "content": "<p>Can <a href=\"https://github.com/leanprover-community/mathlib/blob/3526476cbd7474d5076aff163b4f2558afaaa8f6/src/algebra/ordered_monoid.lean#L912\">this issue</a> also be solved relatively simply?</p>",
        "id": 219681453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607736134
    },
    {
        "content": "<p>I think it already does that if you give an <code>@[ancestor]</code> attribute: <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#to_additive\">https://leanprover-community.github.io/mathlib_docs/attributes.html#to_additive</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/group/defs.lean#L64-L70\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/group/defs.lean#L64-L70</a></p>",
        "id": 219681751,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1607736595
    },
    {
        "content": "<p>We have a related open issue <a href=\"https://github.com/leanprover-community/mathlib/issues/1639\">#1639</a>.</p>",
        "id": 219688420,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607746192
    },
    {
        "content": "<p>hmm, is it still true that <code>to_additive</code> shouldn't be used for structures? because that suggests I need a different way of fixing the issue, namely by manually defining <code>add_monoid_hom.comp_hom</code>.</p>",
        "id": 219688600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607746491
    },
    {
        "content": "<p>You are using <code>to_additive</code> for an object in a structure, which I think was always fine.</p>",
        "id": 219689885,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1607748438
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/5331\">#5331</a>.</p>",
        "id": 219693657,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1607754926
    },
    {
        "content": "<p><code>to_additive</code> can't generate <code>structure</code> or <code>class</code> definitions.</p>",
        "id": 219722694,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607800354
    },
    {
        "content": "<p>E.g., it can't generate <code>class add_group</code> from <code>class group</code>.</p>",
        "id": 219722700,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607800369
    }
]