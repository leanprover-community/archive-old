[
    {
        "content": "<p>This weekend, I've been messing a little with categories in Lean. I ended up making this:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.abelian</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">restriction_of_scalars</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">M.carrier</span><span class=\"o\">,</span>\n  <span class=\"n\">is_add_comm_group</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">is_module</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                 <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n                 <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_add</span><span class=\"o\">],</span>\n                 <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_smul</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">],</span>\n                 <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_one</span><span class=\"o\">],</span>\n                 <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n                 <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">restriction_of_scalars'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"bp\">⥤</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">restriction_of_scalars</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n                      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.map_add</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n                      <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">φ</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- #print restriction_of_scalars_is_module_to_distrib_mul_action_to_mul_action_to_has_scalar_smul</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> lemma restriction_of_scalars.smul_apply {f : R →+* S} {M : Module S}</span>\n<span class=\"cm\">    (r : R) (x : restriction_of_scalars f M) : r • x = f r • x := rfl -/</span>\n</code></pre></div>\n</div></div>\n<p>Firstly — where is this functor in <code>mathlib</code>? I imagine it's presented as a general results in terms of &lt;some name&gt; categories, but I couldn't seem to find it.</p>\n<p>More to the point, however; how come I can't write the commented out lemma? No matter how way I write it, I end up getting some missing typeclass. If I try to use the monstrosity just above it (helpfully made by <code>@[simps]</code>) it tells me it's not there (from the name, I'm guessing different typeclass routes). Is the right solution just to define the module instance separately? Or should I be using <code>algebra</code> and stuff instead. Having to use <code>change</code> feels wrong :(</p>\n<p>Thirdly; is this even the right to do category stuff in mathlib? I originally had the universe stuff, but it didn't seem to matter that much there; am I also missing other idiomatic things?</p>",
        "id": 254845254,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632581249
    },
    {
        "content": "<p>ahh, the <code>change</code> line can be replaced with <code>λ r, linear_map.map_smul φ (f r)</code>, but that seems to basically just be hiding the <code>change</code></p>",
        "id": 254845816,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632581762
    },
    {
        "content": "<p>The lemma looks kind of bad just taken at face value--I mean you could have <code>R = S</code> but <code>f</code> not the identity, for example.</p>",
        "id": 254846508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632582316
    },
    {
        "content": "<p>There is some kind of defeq abuse going on there.</p>",
        "id": 254846517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632582326
    },
    {
        "content": "<p>the left <code>smul</code> should be the <code>restriction_of_scalars</code> one, whilst the right one is the \"standard\" smul from the <code>Module S</code> structure; I get why you say that but I can't see another way to write it</p>",
        "id": 254847002,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632582764
    },
    {
        "content": "<p>I guess you need some explicit function going from <code>M</code> to <code>restriction_of_scalars f M</code> or vice versa</p>",
        "id": 254847039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632582809
    },
    {
        "content": "<p>yeah, that makes sense actually, and it makes it clearer what's going on too</p>",
        "id": 254847112,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632582848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars\">docs#restrict_scalars</a> works by using an <code>[algebra R S]</code> instance. So one possible definition of this functor could be this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.restrict_scalars</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.adjunctions</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"bp\">⥤</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Module.of</span> <span class=\"n\">R</span> <span class=\"bp\">$</span> <span class=\"n\">restrict_scalars</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.restrict_scalars</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"bp\">⥤</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_algebra</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 254849158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632584723
    },
    {
        "content": "<p>(note that I had to assume that the rings are commutative to use the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.to_algebra\">docs#ring_hom.to_algebra</a> )</p>",
        "id": 254849233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632584786
    }
]