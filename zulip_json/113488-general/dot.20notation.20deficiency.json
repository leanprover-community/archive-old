[
    {
        "content": "<p>I've noticed the following phenomenon before (indeed, I think it's been explained to me before) and I just noticed it again when writing <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Quotient.20of.20a.20ring.20by.20a.20sum.20of.20ideals/near/246954185\">this code</a> : if <code>I : ideal R</code> then I can use <code>I.quotient</code> for <code>ideal.quotient I</code> but I can't seem to use <code>I.quotient.mk</code> for <code>ideal.quotient.mk I</code>. </p>\n<p>1) Am I right about this or was I just mistaken, or not trying hard enough?</p>\n<p>2) If this is true that you can't use dot notation like this, should <code>ideal.quotient.mk</code> be called <code>ideal.quotient_mk</code> and similarly <code>ideal.quotient.lift</code>?</p>\n<p>3) Will Lean 4 be any different in this regard?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"c1\">-- let R be a commutative ring and let I,J be ideals of R</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">I.quotient</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span>  <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">I.quotient</span> <span class=\"o\">:=</span> <span class=\"n\">I.quotient.mk</span>  <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid field notation, type is not of the form (C ...) where C is a constant</span>\n<span class=\"cm\">  I.quotient</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 246965443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627039274
    },
    {
        "content": "<p>This isn't supposed to work in the first place. The <code>ideal R</code> argument of <code>ideal.quotient.mk</code> is implicit</p>",
        "id": 246966009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627039685
    },
    {
        "content": "<p>If you want it to work that argument should be explicit</p>",
        "id": 246966051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627039739
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.quotient.mk\">docs#ideal.quotient.mk</a> says it's explicit?</p>",
        "id": 246966169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627039823
    },
    {
        "content": "<p>Submodule avoids this by calling it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mkq\">docs#submodule.mkq</a> instead</p>",
        "id": 246966874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627040385
    },
    {
        "content": "<p>Introducing an <code>abbreviation</code> for <code>Type</code> makes this work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- just to carry dot notation</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">ideal.quotient'_type</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- replacement for `ideal.quotient`</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">ideal.quotient'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I.quotient'_type</span> <span class=\"o\">:=</span> <span class=\"n\">I.quotient</span>\n\n<span class=\"c1\">-- in addition to `ideal.quotient.mk`</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">ideal.quotient'_type.mk</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">I.quotient'_type</span> <span class=\"o\">:=</span> <span class=\"n\">I.quotient'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">I.quotient'</span> <span class=\"o\">:=</span>\n<span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">I.quotient'</span> <span class=\"o\">:=</span> <span class=\"n\">I.quotient'.mk</span>  <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 246967273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627040753
    },
    {
        "content": "<p>Oh I see, field projections have to have atomic names. <code>foo.bar.baz</code> can only be a projection named <code>baz</code> applied to a <code>foo.bar</code> (or a <code>baz</code> projection on a <code>bar</code> projection on a <code>foo</code>), not a projection named <code>bar.baz</code> applied to a <code>foo</code></p>",
        "id": 246967806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627041203
    },
    {
        "content": "<p>Is the solution here for lean to do something like the following when parsing <code>foo.bar.baz</code> with <code>foo : Foo</code>:</p>\n<ul>\n<li>infer the type of <code>Foo.bar foo</code></li>\n<li>If it is of type <code>Type</code>, then discard it and evaluate <code>Foo.bar.baz f</code></li>\n<li>If it is not of type <code>Type</code> but of type <code>Bar</code>, then evaluate <code>Bar.baz (Foo.bar f)</code></li>\n</ul>",
        "id": 246968017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627041383
    },
    {
        "content": "<p>I'm not sure that's better than embracing a variant of my hack</p>",
        "id": 246968027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627041391
    },
    {
        "content": "<p>this has to happen at parse time, so the typing information available is fairly limited</p>",
        "id": 246968120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627041483
    },
    {
        "content": "<p>Well it's sophisticated enough to understand coercions I think?</p>",
        "id": 246968192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627041539
    },
    {
        "content": "<p>not coercions, structure <code>extends</code></p>",
        "id": 246968204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627041552
    },
    {
        "content": "<p>What I mean by that is that <code>foo.bar_hom</code> works where <code>Foo.bar_hom : add_monoid_hom Foo Foo</code> (and <code>foo : Foo</code>)</p>",
        "id": 246968228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627041585
    },
    {
        "content": "<p>what is the type of <code>foo</code> in that example?</p>",
        "id": 246968330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627041633
    },
    {
        "content": "<p>because if it's <code>Foo</code> then that's just regular dot notation</p>",
        "id": 246968396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627041666
    },
    {
        "content": "<p>it's not like it actually understands that there is a coercion there, it just writes <code>Foo.bar_hom foo</code> and hopes for the best</p>",
        "id": 246968450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627041719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20deficiency/near/246967806\">said</a>:</p>\n<blockquote>\n<p>Oh I see, field projections have to have atomic names. <code>foo.bar.baz</code> can only be a projection named <code>baz</code> applied to a <code>foo.bar</code> (or a <code>baz</code> projection on a <code>bar</code> projection on a <code>foo</code>), not a projection named <code>bar.baz</code> applied to a <code>foo</code></p>\n</blockquote>\n<p>This has to be the case, otherwise there would be ambiguity as to whether <code>foo.bar.baz</code> means <code>baz foo.bar</code> or <code>bar.baz foo</code>.</p>",
        "id": 247241629,
        "sender_full_name": "Mac",
        "timestamp": 1627323693
    },
    {
        "content": "<p>Ambiguity is fine, there is ambiguity whenever I use something like <code>coe</code> or <code>ext</code> with a few namespaces open, and lean seems to do really well figuring out which one I mean</p>",
        "id": 247269164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627336630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> The problem here is that the ambiguity increases as the length of the chain increases. For example, <code>foo.bar.baz.bam</code> could be either <code>bar.baz.bam foo</code>, <code>baz.bam foo.bar</code>, or <code>bam foo.bar.baz</code>. Furthermore, unlike many other places in Lean where ambiguity works, there really isn't a clean way for it to Lean to disambiguate between the possible interpretations here (especially since name resolution / dot notation occurs at the parse time -- where type information is not available).</p>",
        "id": 247384105,
        "sender_full_name": "Mac",
        "timestamp": 1627416433
    },
    {
        "content": "<p>But I've seen lean 3 complain about my ambiguous code before -- \"you wrote <code>bar</code> but neither <code>_root_.bar</code> nor <code>foo.bar</code> work\" -- so there must be some way that the parser can handle ambiguity?</p>",
        "id": 247386336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627417613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I assume you mean property inheritance like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid field 'val', the environment does not contain 'Bar.val'</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">invalid field 'val', the environment does not contain 'Foo.val'</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>In this case, it first tries to resolve <code>val</code> as <code>Bar.val</code> an when that is missing tries <code>Foo.val</code> and then when that fails reports all its attempts. If <code>Bar.val</code> exists, it will always be picked (as <code>Foo.val</code> is only used as a fallback). Technically, as a result, no ambiguity ever occurs. </p>\n<p>This doesn't parallel neatly with the <code>foo.bar.baz</code> example for two reasons. First, it isn't clear which of <code>baz foo.bar</code> or <code>bar.baz foo</code> should be the default and which should be the fallback.  Second, the existence of property inheritance actually complicates matters. Let's say <code>baz foo.bar</code> is the default and <code>bar.baz foo</code>is the fallback. If <code>baz foo.bar</code> fails because <code>baz</code> it is not a member of <code>foo.bar</code>'s type, should I fallback to the type's parent's <code>baz</code> or should I fallback to <code>bar.baz foo</code>? </p>\n<p>One could resolve such ambiguity with some pre-defined name resolution order. However, it is unclear what that order would be and any such order would make name resolution very time consuming in complex dot notation chains.</p>",
        "id": 247390738,
        "sender_full_name": "Mac",
        "timestamp": 1627419660
    },
    {
        "content": "<p>Thanks a lot for the detailed comments!</p>",
        "id": 247391198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627419757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks! You're welcome! It's fun to talk about the pitfalls of language design. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 247392002,
        "sender_full_name": "Mac",
        "timestamp": 1627420055
    },
    {
        "content": "<p>Mario pointed out in another thread that there's a notation for specifically this problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"c1\">-- let R be a commutative ring and let I,J be ideals of R</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">I.quotient</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span>  <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">I.quotient</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"bp\">^.</span><span class=\"n\">quotient.mk</span>  <span class=\"c1\">-- works!</span>\n</code></pre></div>\n<p>I propose we refer to this as \"super dot\" notation because 1) it is super, 2) it gives <code>.</code> super powers, and 3) \"super\" is a good mnemonic for <code>^</code> which is used as superscript in LaTeX.</p>",
        "id": 249467773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628958834
    },
    {
        "content": "<p>The notation was deprecated in Lean v3.2.0, but perhaps we should ignore that</p>",
        "id": 249467834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628958929
    },
    {
        "content": "<p>Note that it makes you write funky stuff. <code>(equiv.refl _)^.set.compl.symm.trans</code> doesn't work (because <code>equiv.set.compl.symm.trans</code> can't be found), so you must write <code>(equiv.refl _)^.set.compl .symm.trans</code>.</p>",
        "id": 249469122,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628961020
    },
    {
        "content": "<p>Does <code>(equiv.refl _)^.set.compl^.symm^.trans</code> work, so that you're not mixing the two different dot notations?</p>",
        "id": 249470475,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1628963243
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">^.</span><span class=\"n\">set.compl</span><span class=\"bp\">^.</span><span class=\"n\">symm</span><span class=\"bp\">^.</span><span class=\"n\">trans</span> <span class=\"c1\">-- OK</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">^.</span><span class=\"n\">set.compl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>\n<p>So once you start with the superdot, you either have to continue with the superdot or use parentheses to interrupt it.</p>",
        "id": 249470938,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628963966
    },
    {
        "content": "<p>I found another issue with dot notation: you can't split lines that are over 100 columns, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">I.adic_basis.to_subgroups_basis.to_ring_filter_basis.to_add_group_filter_basis.nhds_zero_has_basis.mem_iff</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 249471794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628965384
    },
    {
        "content": "<p>Can't you fix that with parentheses?</p>",
        "id": 249471880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628965560
    },
    {
        "content": "<p>Are you sure? I think you can add spaces before any dot, as I did above.</p>",
        "id": 249472711,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628966885
    },
    {
        "content": "<p>Can you also fix it with unbundled <code>is_ring_filter_basis</code> typeclasses on filter bases? This was just the sort of pile-up I was getting when I removed unbundled ring homs and group homs, but it was far less severe (I never had chains anywhere near as long as this) and furthermore there were shortcuts -- e.g. you could maybe make <code>I.adic_basis.to_add_group_filter_basis</code> work directly?</p>",
        "id": 249472712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628966886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20deficiency/near/249472711\">said</a>:</p>\n<blockquote>\n<p>Are you sure? I think you can add spaces before any dot, as I did above.</p>\n</blockquote>\n<p>The one exception seems to be that you can't add spaces before \"regular\" dots, like the one in <code>equiv.refl</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- OK</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">^.</span><span class=\"n\">set.compl</span>\n  <span class=\"bp\">.</span><span class=\"n\">symm.trans</span>\n<span class=\"c1\">-- not ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">^.</span><span class=\"n\">set</span> <span class=\"bp\">.</span><span class=\"n\">compl</span>\n  <span class=\"bp\">.</span><span class=\"n\">symm.trans</span>\n</code></pre></div>",
        "id": 249473064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628967592
    },
    {
        "content": "<p>Kevin, there is no class here, only structures extending each other and definitions.</p>",
        "id": 249473155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628967681
    },
    {
        "content": "<p>But I can define shortcuts of course.</p>",
        "id": 249473160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628967691
    },
    {
        "content": "<p>Yeah sure, but adding spaces applies to Patrick's case, right?</p>",
        "id": 249473389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628968092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20deficiency/near/249473155\">said</a>:</p>\n<blockquote>\n<p>Kevin, there is no class here, only structures extending each other and definitions.</p>\n</blockquote>\n<p>Yes exactly, like there is no predicate class <code>[is_ring_hom]</code> any more, only structures like <code>ring_hom</code> extending <code>monoid_hom</code> etc. For morphisms we now seem convinced that this is the right way. I am suggesting that perhaps for these predicates on filter bases at 0 -- \"I interact well with the group structure\", \"I interact well with the ring structure\" could be predicate classes and the code might look cleaner.</p>",
        "id": 249473768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628968742
    }
]