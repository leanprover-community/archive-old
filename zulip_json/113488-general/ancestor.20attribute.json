[
    {
        "content": "<p>I'm trying to remove the unnecessary axioms for a group, ring etc. I'm seeing the ancestor attribute everywhere. What does it do, and how should I use it?</p>",
        "id": 198882722,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590582053
    },
    {
        "content": "<p>it records the content of the <code>extends</code> clause of an <code>old_structure_cmd</code> for posterity</p>",
        "id": 198883309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590582449
    },
    {
        "content": "<p>There is no more old structure command?</p>",
        "id": 198883409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590582505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> By now, we could hack lean to do this for us, right?</p>",
        "id": 198883420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590582520
    },
    {
        "content": "<p>sure</p>",
        "id": 198883431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590582530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/ancestor.20attribute/near/198883409\">said</a>:</p>\n<blockquote>\n<p>There is no more old structure command?</p>\n</blockquote>\n<p>There is... we're just logging what it does. For tactics.</p>",
        "id": 198883447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590582541
    },
    {
        "content": "<p>If I'm changing the attributes, then for example <code>monoid</code> will be an ancestor of <code>comm_monoid</code>, but will have some extra axioms. So should ancestors that don't come from <code>extends</code> be marked as ancestors?</p>",
        "id": 198883480,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590582566
    },
    {
        "content": "<p>no</p>",
        "id": 198883508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590582586
    },
    {
        "content": "<p>Will I break all the tactics?</p>",
        "id": 198883568,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590582605
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 198883580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590582617
    },
    {
        "content": "<p>What we really want here is a way of inserting into the constructor a way of saying \"I'm making a group and the user supplied only some of the fields, so make the rest using this construction\" rather than redefining the type</p>",
        "id": 198883598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590582635
    },
    {
        "content": "<p>in any case, the main consumer is <code>to_additive</code> and so you will know right away if it breaks</p>",
        "id": 198883634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590582662
    },
    {
        "content": "<p>this exists, it is called auto params</p>",
        "id": 198883763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590582733
    },
    {
        "content": "<p>It doesn't exist</p>",
        "id": 198883907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590582823
    },
    {
        "content": "<p>Let's take comm_group as an example</p>",
        "id": 198883980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590582856
    },
    {
        "content": "<p>It probably extends group, but now you don't want to ask for mul_one and one_mul, however because it's extending group there's no way of retrofitting the autoparam</p>",
        "id": 198884037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590582906
    },
    {
        "content": "<p>What we want is the ability not only to retrofit but also to ensure that when a hole command is used that we don't even show the autoparamed fields</p>",
        "id": 198884153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590582976
    },
    {
        "content": "<p>I know, I thought Chris already had a PR that does this</p>",
        "id": 198884220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590583049
    },
    {
        "content": "<p>you don't have to convince me that this is a good idea. Ideally this would get some lean support but as it is you just have to make a separate structure with an instance</p>",
        "id": 198884345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590583119
    },
    {
        "content": "<p>I will certainly grant that autoparams only solve some of the issues, and there are a lot more elaborate mechanisms I would like than what autoparams will give you. For example, defining a complete lattice where you only give the Sup, or only give the Inf, or only give the le</p>",
        "id": 198884618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590583284
    },
    {
        "content": "<p>or a group with left inverse and left unit, or right inverse and right unit</p>",
        "id": 198884649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590583307
    },
    {
        "content": "<p>It would be (relatively) easy to write a tactic that gets all these fields and has a store of constructor candidates containing a subset of all the fields and constructing the rest, and applies the first one where the input subset matches</p>",
        "id": 198885083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590583556
    },
    {
        "content": "<p>but since structure literals are implemented in C++ inextensibly it's tricky to do something like this</p>",
        "id": 198885154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590583581
    },
    {
        "content": "<p>and it would be nice as a library author to be able to provide all these constructor candidates</p>",
        "id": 198885384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590583724
    },
    {
        "content": "<p>right now they are these terrible <code>mk'</code> theorems with 14 hypotheses and no syntax support</p>",
        "id": 198885425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590583759
    },
    {
        "content": "<p>Right, it would be lovely to see the back of those. It's embarrassing showing undergraduates the official definition of a comm_group in Lean but at least syntax support would help</p>",
        "id": 198885597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590583873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/ancestor.20attribute/near/198884037\">said</a>:</p>\n<blockquote>\n<p>It probably extends group, but now you don't want to ask for mul_one and one_mul, however because it's extending group there's no way of retrofitting the autoparam</p>\n</blockquote>\n<p>Actually you can retrofit autoparams. You just add the field in the child structure a second time with the same name and a default definition</p>",
        "id": 198885660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590583922
    },
    {
        "content": "<p>Ha! Does this really work? With old structure command on?</p>",
        "id": 198885885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590584030
    },
    {
        "content": "<p>yeah, I think it is used in <code>monad</code> for example</p>",
        "id": 198885942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Are you aware of this <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 198885971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590584072
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">applicative</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">has_bind</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">pure</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 198885978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584084
    },
    {
        "content": "<p>These are default values, not auto params.</p>",
        "id": 198885994,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590584097
    },
    {
        "content": "<p>both <code>map</code> and <code>seq</code> are coming from superclasses</p>",
        "id": 198885996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584098
    },
    {
        "content": "<p>true, I think I mean opt param not auto param</p>",
        "id": 198886032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584120
    },
    {
        "content": "<p>And the fact that you can declare the default values afterwards requires workarounds which then cause <a href=\"https://github.com/leanprover-community/lean/issues/197\">lean#197</a>. (EDIT: wrong issue number, thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>)</p>",
        "id": 198886070,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590584149
    },
    {
        "content": "<p>Oh, I had no idea that was related</p>",
        "id": 198886162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584178
    },
    {
        "content": "<p>have you diagnosed that issue?</p>",
        "id": 198886186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584200
    },
    {
        "content": "<p>Yes, it goes as follows: since default values may be declared at any point, we can't elaborate the fields from left to right.  Instead, they are elaborated in some sort of dependency order: a field may only be elaborated when its type no longer contains any metavariables.  In order to reduce the metavariables (this is crucial for new-style structures), projections are reduced.  And this is why typeclass notation vanishes.</p>",
        "id": 198886433,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590584348
    },
    {
        "content": "<p>Oh, this sounds like it could also be related to <a href=\"https://github.com/leanprover-community/lean/issues/197\">lean#197</a>.</p>",
        "id": 198886687,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590584472
    },
    {
        "content": "<p>This is not at all how I expected opt params to be handled</p>",
        "id": 198886841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584531
    },
    {
        "content": "<p>Why not eagerly remove <code>auto_param</code> and <code>opt_param</code> markers from the types first (and store them in an internal data structure)? They aren't supposed to be part of the type system proper, they are just annotations that live in expr because everything does</p>",
        "id": 198887053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584624
    },
    {
        "content": "<p>Oh, they are stored in an internal data structure. (Check out <code>#print prefix monad.map</code>)</p>",
        "id": 198887191,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590584672
    },
    {
        "content": "<p>To be clear, default values for structures are stored as separate declations.  auto params are not, and optional arguments of definitions are not either.</p>",
        "id": 198887332,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590584755
    },
    {
        "content": "<p>Here's an idea: always elaborate elements of a structure in left to right order of use in the literal</p>",
        "id": 198887521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584874
    },
    {
        "content": "<p>no this is not backward compatible, but it is simple and easy to reason about</p>",
        "id": 198887624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590584914
    },
    {
        "content": "<p>When should default values and auto param fields be elaborated?</p>",
        "id": 198887625,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590584915
    },
    {
        "content": "<p>default values don't need to be elaborated, auto params go at the end</p>",
        "id": 198887808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590585014
    },
    {
        "content": "<p>I don't think it would be a good idea to have an invisible auto param providing data that is later referenced by a user-provided dependent argument</p>",
        "id": 198887913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590585077
    },
    {
        "content": "<blockquote>\n<p>default values don't need to be elaborated</p>\n</blockquote>\n<p>I'm not sure if that's how it's implemented.</p>",
        "id": 198888089,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590585167
    },
    {
        "content": "<p>I mean you already have an elaborated expr corresponding to the default value. You just need to substitute the values of the other fields in it</p>",
        "id": 198888200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590585221
    },
    {
        "content": "<p>but it can be used by later fields, so its effective elaboration order would be just before first use in a dependent arg</p>",
        "id": 198888304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590585269
    },
    {
        "content": "<p>I had something like this implemented already (elaborating fields left-to-right), and it choked on default arguments in <code>monad</code>.  Let me see again what's going wrong.</p>",
        "id": 198888385,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590585320
    },
    {
        "content": "<p>In particular that means that if you have a monad instance with <code>map_comp</code> and <code>map := x &gt;&gt;= pure ∘ f</code> then you can't write <code>map_comp := ...</code> before <code> pure := ...</code> and <code>bind := ...</code> unless you have also provided <code>map := ...</code></p>",
        "id": 198888521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590585379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/ancestor.20attribute/near/198886032\">said</a>:</p>\n<blockquote>\n<p>true, I think I mean opt param not auto param</p>\n</blockquote>\n<p>in which case, so did I</p>",
        "id": 198890136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590586283
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/282\">lean#282</a></p>",
        "id": 198906723,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590592508
    }
]