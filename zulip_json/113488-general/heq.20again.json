[
    {
        "content": "<p>Hmm, I wasn't expecting this to work.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">types_eq_of_heq</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 133673026,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536596659
    },
    {
        "content": "<p>why not?</p>",
        "id": 133673064,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536596715
    },
    {
        "content": "<p>casing on <code>h</code> makes sure that the types are equal and the arguments are equal</p>",
        "id": 133673078,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536596733
    },
    {
        "content": "<p>Mostly because I haven't seen this fact in core or mathlib, so I guess I assumed it was not provable.</p>",
        "id": 133673143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536596771
    },
    {
        "content": "<p>Now I have a followup question about <code>congr</code>.</p>",
        "id": 133673150,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536596778
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">α&#39;</span> <span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">hα</span> <span class=\"n\">hβ</span> <span class=\"n\">h</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">F</span> <span class=\"n\">α&#39;</span><span class=\"o\">,</span> <span class=\"n\">α&#39;</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span> <span class=\"n\">β&#39;</span><span class=\"o\">,</span> <span class=\"n\">β&#39;</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g&#39;</span><span class=\"o\">],</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ⊢ ⟨⟨F α, _⟩, ⟨⟨F β, _⟩, f⟩⟩ = ⟨⟨F α&#39;, _⟩, ⟨⟨F β&#39;, _⟩, f&#39;⟩⟩ -/</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> How to proceed? My solution: -/</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hα</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hα</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hβ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133673156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536596801
    },
    {
        "content": "<p>are you going to livestream?</p>",
        "id": 133673185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536596858
    },
    {
        "content": "<p><code>type_eq_of_heq</code></p>",
        "id": 133673186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536596860
    },
    {
        "content": "<p>I'm annoyed about this <code>{ rw hα }</code> thing. The goal there is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">F</span><span class=\"o\">}),</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">F</span><span class=\"o\">}),</span> <span class=\"n\">F</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</pre></div>\n\n\n<p>which I think is trying to say that when I do the second <code>congr'</code>, the types of the two sides are equal.</p>",
        "id": 133673196,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536596874
    },
    {
        "content": "<p>Wow, my grep skills failed</p>",
        "id": 133673243,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536596900
    },
    {
        "content": "<p>If I put <code>{ admit }</code> there, the rest of the proof seems to go through fine. So couldn't <code>congr'</code> deduce that the types are equal after the fact, using <code>type_eq_of_heq</code>?</p>",
        "id": 133673266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536596963
    },
    {
        "content": "<p>Here's a dumber example.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>There are four goals, <code>⊢ α = β</code> twice and <code>⊢ a == b</code> twice. But I can get the former from the latter.</p>",
        "id": 133673394,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536597136
    },
    {
        "content": "<p>Or a nicer presentation</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">α&#39;</span> <span class=\"n\">β</span> <span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b&#39;</span> <span class=\"o\">:</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 133673520,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536597348
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">α&#39;</span> <span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">hα</span> <span class=\"n\">hβ</span> <span class=\"n\">h</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">F</span> <span class=\"n\">α&#39;</span><span class=\"o\">,</span> <span class=\"n\">α&#39;</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span> <span class=\"n\">β&#39;</span><span class=\"o\">,</span> <span class=\"n\">β&#39;</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g&#39;</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n  <span class=\"n\">ext</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hα</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133673525,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536597360
    },
    {
        "content": "<p>The <code>ext Y, rw hα</code> part is still there, though. That's the only part I care about because it seems unnecessary.<br>\nIn my real use case, I have three of them and they are bigger</p>",
        "id": 133673613,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536597461
    },
    {
        "content": "<p>Does <code>set_option trace.congr_lemma true</code> do anything?</p>",
        "id": 133673768,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536597666
    },
    {
        "content": "<p>Kenny, I was thinking I would try this evening US eastern time today, maybe a bit late for you</p>",
        "id": 133673872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536597824
    },
    {
        "content": "<p>That's a pretty messy goal. I would clean it up by hand as follows:</p>\n<div class=\"codehilite\"><pre><span></span>begin\n  let G := λ A B (f : A → B) h h&#39;, (⟨⟨A, h⟩, ⟨B, h&#39;⟩, f⟩ : fns),\n  suffices : ∀ {f f&#39; h₁ h₂ h₃ h₄}, f == f&#39; →\n    G (F α) (F β) f h₁ h₂ = G (F α&#39;) (F β&#39;) f&#39; h₃ h₄, exact this h,\n  rw [hα, hβ], intros, congr&#39;, apply eq_of_heq a\nend\n</pre></div>",
        "id": 133674237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598263
    },
    {
        "content": "<p>I would avoid having type equalities and heqs in the hypotheses to begin with</p>",
        "id": 133674250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598295
    },
    {
        "content": "<p><code>congr</code> is clearly dropping the ball here. There are lots of superfluous goals being generated</p>",
        "id": 133674301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598345
    },
    {
        "content": "<p>But usually you don't want to deduce a type equality from a heq; rather you want to assume the type equality and prove a regular equality dependent on it</p>",
        "id": 133674319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598387
    },
    {
        "content": "<p>is there any way to prove this goal?</p>",
        "id": 133674335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536598423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">α&#39;</span> <span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">hα</span> <span class=\"n\">hβ</span> <span class=\"n\">h</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fns</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">F</span> <span class=\"n\">α&#39;</span><span class=\"o\">,</span> <span class=\"n\">α&#39;</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span> <span class=\"n\">β&#39;</span><span class=\"o\">,</span> <span class=\"n\">β&#39;</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">proofs</span> <span class=\"n\">true</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">hα</span> <span class=\"o\">},</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c\">/-</span><span class=\"cm\"> (eq.rec_on (subtype.eq hα) (g.snd)).fst = (g&#39;.snd).fst -/</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133674338,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536598426
    },
    {
        "content": "<p>Well how about the following modification to <code>congr</code>. After each single layer of <code>congr</code>, try filling each of the new goals by applying <code>exact type_eq_of_heq ?m_i</code> where <code>?m_i</code> is the metavariable of each other goal.</p>",
        "id": 133674402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536598466
    },
    {
        "content": "<p>That's not what you want though. You will have to deduce those type equalities anyway in order to prove the heq</p>",
        "id": 133674429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598518
    },
    {
        "content": "<p>But I didn't!</p>",
        "id": 133674434,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536598529
    },
    {
        "content": "<p>I happen to have the heq lying around, and where I proved it, the type equalities were obvious</p>",
        "id": 133674447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536598560
    },
    {
        "content": "<p>You satisfied the type equality proof by <code>assumption</code></p>",
        "id": 133674498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598600
    },
    {
        "content": "<p>Which type equality proof?</p>",
        "id": 133674522,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536598653
    },
    {
        "content": "<p><code>hα</code></p>",
        "id": 133674533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598677
    },
    {
        "content": "<p>and <code>hβ</code> later in the proof</p>",
        "id": 133674581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598699
    },
    {
        "content": "<p>Right, but then there is an inner proof obligation I have to take care of, the one I solve using <code>{ rw hα }</code></p>",
        "id": 133674591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536598713
    },
    {
        "content": "<p>Let me put up my real code</p>",
        "id": 133674615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536598758
    },
    {
        "content": "<p>you have to solve that anyway</p>",
        "id": 133674626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598782
    },
    {
        "content": "<p>No, it follows from being able to solve the rest of the goals</p>",
        "id": 133674682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536598804
    },
    {
        "content": "<p>how?</p>",
        "id": 133674706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598820
    },
    {
        "content": "<p>By <code>type_eq_of_heq</code>. Right?</p>",
        "id": 133674714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536598849
    },
    {
        "content": "<p>applied to what?</p>",
        "id": 133674717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598859
    },
    {
        "content": "<p>Isn't it the same thing as this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">α&#39;</span> <span class=\"n\">β</span> <span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b&#39;</span> <span class=\"o\">:</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">==</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">type_eq_of_heq</span> <span class=\"n\">ha</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">type_eq_of_heq</span> <span class=\"n\">hb</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133674730,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536598874
    },
    {
        "content": "<p>sure, but this is an unrealistic goal. Where are you going to get those heqs without a type equality?</p>",
        "id": 133674845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536598998
    },
    {
        "content": "<p>so in my real code it happens here <a href=\"https://gist.github.com/rwbarton/dfb90b2552f09b51798bb52af9948d48#file-filtered-lean-L249\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/dfb90b2552f09b51798bb52af9948d48#file-filtered-lean-L249\">https://gist.github.com/rwbarton/dfb90b2552f09b51798bb52af9948d48#file-filtered-lean-L249</a></p>",
        "id": 133674859,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536599038
    },
    {
        "content": "<p>S is the image of a functor F : I -&gt; C considered as a subgraph, defined here <a href=\"https://gist.github.com/rwbarton/dfb90b2552f09b51798bb52af9948d48#file-filtered-lean-L87\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/dfb90b2552f09b51798bb52af9948d48#file-filtered-lean-L87\">https://gist.github.com/rwbarton/dfb90b2552f09b51798bb52af9948d48#file-filtered-lean-L87</a></p>",
        "id": 133674928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536599112
    },
    {
        "content": "<p>can you MWE the state just before the <code>rintro</code>?</p>",
        "id": 133675006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536599224
    },
    {
        "content": "<p>or maybe just after</p>",
        "id": 133675033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536599258
    },
    {
        "content": "<p>It should be more or less what I pasted originally.<br>\nNote <code>hg : functor.map F ((⟨i', ⟨j', g⟩⟩.snd).snd) == f</code>, which came from the definition of <code>S</code></p>",
        "id": 133675129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536599387
    },
    {
        "content": "<p>Corresponding to my original <code>(h : f == f')</code></p>",
        "id": 133675183,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536599411
    },
    {
        "content": "<p>I want to catch the state before the type equalities enter the context</p>",
        "id": 133675193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536599432
    },
    {
        "content": "<p>Ah, so you mean <code>hi', hj'</code></p>",
        "id": 133675269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536599523
    },
    {
        "content": "<p>ideally you should be able to match on <code>hi', hj', hg</code> and save all the mess</p>",
        "id": 133675288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536599578
    },
    {
        "content": "<p>don't match on <code>⟨X, i, rfl⟩, ⟨Y, j, rfl⟩</code>, just do <code>⟨X, _⟩, ⟨Y, _⟩</code></p>",
        "id": 133675304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536599616
    },
    {
        "content": "<p>Hmm, I will try that</p>",
        "id": 133675399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536599715
    },
    {
        "content": "<p>Meanwhile I updated the gist with a version which is not M, but should be a WE</p>",
        "id": 133675614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536599975
    },
    {
        "content": "<p>Oh, there is a trick in <code>F ijg.1 = X ∧ F ijg.2.1 = Y ∧ ...</code>. That is not just <code>X</code>, but <code>X.val</code></p>",
        "id": 133675723,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600095
    },
    {
        "content": "<p>because of my representation of a subgraph, which I now infinitely regret</p>",
        "id": 133675726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600110
    },
    {
        "content": "<p>I have a subgraph as (1) a subset of the vertices, (2) for each pair of vertices in that set (as a subtype), a subset of the edges between them</p>",
        "id": 133675824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600204
    },
    {
        "content": "<p>works for me:</p>\n<div class=\"codehilite\"><pre><span></span>    rintro ⟨⟨X, _⟩, ⟨Y, _⟩, ⟨f, ⟨i, j, g⟩, ⟨⟩, ⟨⟩, ⟨⟩⟩⟩,\n    exact ⟨⟨i, j, g⟩, rfl⟩,\n</pre></div>",
        "id": 133675941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536600349
    },
    {
        "content": "<p>using <code>rfl</code> instead of <code>⟨⟩</code> calls <code>subst</code> instead of <code>cases</code>, and <code>subst</code> is not sufficiently aggressive wrt definitionally unfolding one side to a variable</p>",
        "id": 133676015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536600414
    },
    {
        "content": "<p>Ahh</p>",
        "id": 133676023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600424
    },
    {
        "content": "<p>I would suggest, if you are okay with the added verbosity, that you use an inductive type to define your hom sets instead of ands of eqs and heqs</p>",
        "id": 133676103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536600500
    },
    {
        "content": "<p>I see</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"err\">⇑</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">i&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">j&#39;</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⟩⟩.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"bp\">⟨</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">b_fst_property</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 133676111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600512
    },
    {
        "content": "<p>it names the variable <code>rfl</code> before substing, I think</p>",
        "id": 133676128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536600557
    },
    {
        "content": "<p>Looks that way.</p>",
        "id": 133676134,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600566
    },
    {
        "content": "<p>that's a whole lot better, thanks!</p>",
        "id": 133676219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600622
    },
    {
        "content": "<p>You mean, in the definition of S?</p>",
        "id": 133676236,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600638
    },
    {
        "content": "<p>yes</p>",
        "id": 133676240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536600644
    },
    {
        "content": "<p>it's up to you, you can use tricks like this to match on it either way</p>",
        "id": 133676274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536600670
    },
    {
        "content": "<p>oh, I could replace the whole <code>λ X Y, {f | ∃ (ijg : Σ (i j : I), i ⟶ j), F ijg.1 = X ∧ F ijg.2.1 = Y ∧ F.map ijg.2.2 == f}</code> with an inductive type I guess</p>",
        "id": 133676290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600700
    },
    {
        "content": "<p>right</p>",
        "id": 133676299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536600705
    },
    {
        "content": "<p>it would give nicer equations, but if this is a one-off it's probably not worth it</p>",
        "id": 133676371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536600751
    },
    {
        "content": "<p>and elsewhere I have similar constructions, like the union of a family of subgraphs</p>",
        "id": 133676380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600766
    },
    {
        "content": "<p>Yeah, I'm not sure I will need any of these constructions more than once, inside the associated proof</p>",
        "id": 133676387,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600782
    },
    {
        "content": "<p>But a good technique to keep in mind</p>",
        "id": 133676399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600795
    },
    {
        "content": "<p>oh, looks like you don't even need to match on <code>ijg</code> in that proof</p>",
        "id": 133676456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536600846
    },
    {
        "content": "<p>Yep</p>",
        "id": 133676522,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600923
    },
    {
        "content": "<p>I think I know what happened here</p>",
        "id": 133676543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600950
    },
    {
        "content": "<p>I started without the <code>F ijg.1 = X ∧ F ijg.2.1 = Y ∧ </code> part</p>",
        "id": 133676558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600959
    },
    {
        "content": "<p>in the definition of S. And then I realized that wasn't going to work</p>",
        "id": 133676605,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536600973
    },
    {
        "content": "<p>but I think I had already written the <code>⟨X, i, rfl⟩, ⟨Y, j, rfl⟩</code> patterns</p>",
        "id": 133676623,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536601010
    },
    {
        "content": "<p>yeah, of course you can't deduce <code>X = X'</code> and <code>Y = Y'</code> from <code>X ⟶ Y = X' ⟶ Y'</code></p>",
        "id": 133676760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536601147
    },
    {
        "content": "<p>not for function types and definitely not for homsets</p>",
        "id": 133676778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536601171
    },
    {
        "content": "<p>Although it curiously would not even matter for the cardinality estimate I need to do here, because it would blow things up by a factor of less than <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">κ</span></span></span></span></p>",
        "id": 133676917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536601280
    },
    {
        "content": "<p>But anyways, that's when I started to wonder: would it be better to just define the edges as <code>(mors : set (Σ X Y, X ⟶ Y))</code></p>",
        "id": 133676941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536601312
    },
    {
        "content": "<p>I'm inclined to say no, although possibly you might want <code>homs</code> to be defined on all objects, not just those in the subset</p>",
        "id": 133677178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536601521
    },
    {
        "content": "<p>and just require that it be empty outside the subset</p>",
        "id": 133677188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536601536
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure subgraph (C : Type u) [small_category C] : Type u :=\n(objs : set C)\n(homs : Π X Y : C, set (X ⟶ Y))\n(dom_mem : Π X Y f, f ∈ homs X Y → X ∈ objs)\n(cod_mem : Π X Y f, f ∈ homs X Y → Y ∈ objs)\n</pre></div>",
        "id": 133677264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536601596
    },
    {
        "content": "<p>Right, I would need those last two fields anyways. Just a difference between <code>set (Σ X Y, X ⟶ Y)</code> and <code>Π X Y : C, set (X ⟶ Y)</code></p>",
        "id": 133677305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536601660
    },
    {
        "content": "<p>having a big sigma will make things more complicated with heqs and stuff as you've seen</p>",
        "id": 133677362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536601691
    },
    {
        "content": "<p>Given that some of the things I do are look at the cardinality of the set of edges, and form the union of subgraphs</p>",
        "id": 133677367,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536601704
    },
    {
        "content": "<p>but I guess those are not significantly harder with the Pi approach</p>",
        "id": 133677381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536601717
    },
    {
        "content": "<p>I think <code>arrows := Σ X Y, X ⟶ Y</code> is a useful definition in a category though</p>",
        "id": 133677396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536601738
    }
]