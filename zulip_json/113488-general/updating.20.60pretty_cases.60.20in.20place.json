[
    {
        "content": "<p>Is there a method to update in place the result of using <code>pretty_cases</code> in an induction proof if the hypotheses or the type the induction is done on is changed? Not to automatically fix the proof, just what is generated by the <code>pretty_cases</code> command?</p>",
        "id": 317398960,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1671725020
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of what you're asking for?</p>",
        "id": 317403269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671726374
    },
    {
        "content": "<p>Suppose I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">day</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mon</span> <span class=\"o\">:</span> <span class=\"n\">day</span>\n<span class=\"bp\">|</span> <span class=\"n\">tue</span> <span class=\"o\">:</span> <span class=\"n\">day</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_weekday</span> <span class=\"o\">:</span> <span class=\"n\">day</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">day.mon</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">day.tue</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">day</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_weekday</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">day.mon</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">is_weekday</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">day.tue</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">is_weekday</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Then I add <code>wed</code> to the <code>day</code> type and to <code>is_weekday</code>. Can I run something that will add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">case</span> <span class=\"n\">day.wed</span>\n  <span class=\"o\">{</span> <span class=\"gr\">admit</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>to the <code>example</code> in place?</p>",
        "id": 317406731,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1671727350
    },
    {
        "content": "<p>Or if something about the definitions changes that changes the list of arguments to one or more cases, to have that list of arguments be updated in place.</p>",
        "id": 317407251,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1671727511
    },
    {
        "content": "<p>In the proof, <code>pretty_cases</code> is run to generate the list of cases.</p>",
        "id": 317407556,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1671727602
    },
    {
        "content": "<p>Currently I would write the statement of the new theorem, run <code>pretty_cases</code> on it, update the variable names generated by <code>pretty_cases</code>, and copy the previous code over for each case and then fix it as needed.</p>",
        "id": 317407999,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1671727710
    },
    {
        "content": "<p>I'm wondering if there might be a faster alternative.</p>",
        "id": 317408239,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1671727796
    },
    {
        "content": "<p><code>Try this</code> doesn't support editing existing code, only replacing the tactic that generates it</p>",
        "id": 317413522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671729305
    },
    {
        "content": "<p>It might be possible to write a tactic of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pretty_cases</span> <span class=\"o\">{</span>\n  <span class=\"n\">case</span> <span class=\"n\">day.mon</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">is_weekday</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">day.tue</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">is_weekday</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"o\">},</span>\n</code></pre></div>\n<p>but I imagine it would be prohibitively messy in Lean 3</p>",
        "id": 317413842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671729401
    },
    {
        "content": "<p>Can't you just run <code>pretty_cases</code> after the other cases?</p>",
        "id": 317413906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671729429
    },
    {
        "content": "<p>In Lean 4 we can have infoview stuff changing code, right?</p>",
        "id": 317414187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671729512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/updating.20.60pretty_cases.60.20in.20place/near/317413906\">said</a>:</p>\n<blockquote>\n<p>Can't you just run <code>pretty_cases</code> after the other cases?</p>\n</blockquote>\n<p>That is a good point for this example. Unfortunately the additional cases are not always added at the end, and sometimes the list of variable names for each case can change as well.</p>",
        "id": 317414788,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1671729690
    },
    {
        "content": "<p>The cases don't have to be in order</p>",
        "id": 317415437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671729890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/updating.20.60pretty_cases.60.20in.20place/near/317414187\">said</a>:</p>\n<blockquote>\n<p>In Lean 4 we can have infoview stuff changing code, right?</p>\n</blockquote>\n<p>More importantly, we can more reliably turn expressions back into the code that generates them.</p>",
        "id": 317415539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671729920
    }
]