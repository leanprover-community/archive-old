[
    {
        "content": "<p>The following proof works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h_exist</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h_exist</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But if you switch lines 2 and 3 then it no longer works. It seems cases somehow messes up the meta-variables created by apply. Does anyone understand what happens here? (by the way, the above <em>is</em> a MWE, no import required).</p>",
        "id": 193785391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586792830
    },
    {
        "content": "<p>Maybe this is one of those situations where term mode is clearer than tactic mode!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h_exist</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h_exist</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>This is the term you're trying to construct in your failing proof. What goes in the placeholder after <code>h</code>?</p>",
        "id": 193786805,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586793606
    },
    {
        "content": "<p>As a general principle, it's better to use <code>cases</code> on this ∃ while your goal is a proposition</p>",
        "id": 193787014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586793718
    },
    {
        "content": "<p>Reid, the goal is a proposition in both cases.</p>",
        "id": 193787374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586793864
    },
    {
        "content": "<p>Rob, if I start the proof with <code>refine λ h_exist, h _ (exists.elim h_exist (λ k hk, hk)),</code> then Lean doesn't give me a chance to fill the hole.</p>",
        "id": 193787714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586794023
    },
    {
        "content": "<p>Because that's not a good proof. Nothing can fill that hole. <code>h</code> needs a <code>k</code> and a proof of something that depends on <code>k</code>. But you've constructed that proof first, for a <code>k</code> that's out of scope at the moment you apply <code>h</code>.</p>",
        "id": 193788087,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586794212
    },
    {
        "content": "<p>Hmm</p>",
        "id": 193788815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586794571
    },
    {
        "content": "<p>Whenever I see those <code>[_]</code> brackets in the goal I know I'm doomed. You can get them by applying <code>delta</code> too many times as well.</p>",
        "id": 193789185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586794764
    },
    {
        "content": "<p>Note that you can do this if you \"destruct\" the existential using <code>classical.some</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h_exist</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h_exist</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">h_exist</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193789226,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586794796
    },
    {
        "content": "<p>Because now the witness is <code>classical.some h_exist</code> which is in scope when you apply <code>h</code>.</p>",
        "id": 193789338,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586794845
    },
    {
        "content": "<p>Tactic mode illustration of the problem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h_exist</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h_exist</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- use k, -- there is no k!</span>\n  <span class=\"c1\">-- cases h_exist, -- recursor can only eliminate into prop</span>\n  <span class=\"n\">use</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h_exist</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now h_exist has gone!</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193789652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586795044
    }
]