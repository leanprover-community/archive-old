[
    {
        "content": "<p>When class parameter is not marked as <code>[inst : class_type]</code> but as <code>(inst : clas_type)</code>. Is there a way to use placeholder <code>_</code> to fetch an instance of that class automatically. </p>\n<p>An example, I want to define coinduced topology on a space <code>X</code> by a given function from reals. However, the topology on reals should be provided explicitly to the function <code>coinduced curve \"Topology on R\"</code>. I was hoping that I can just write <code>_</code>, but this does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">constants</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">curve</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.coinduced</span> <span class=\"n\">curve</span> <span class=\"n\">_</span>\n</code></pre></div>\n\n<p>Gives an error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/.../</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">80</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n\n<p>It took me a long time to figure out how to get an instance manually </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.coinduced</span> <span class=\"n\">curve</span> <span class=\"n\">real.metric_space.to_uniform_space.to_topological_space</span>\n</code></pre></div>\n\n<p>I can write a simple helper function <code>fetch_instance</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fetch_instance</span> <span class=\"o\">{</span><span class=\"n\">cls</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">cls</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.coinduced</span> <span class=\"n\">curve</span> <span class=\"n\">fetch_instance</span>\n</code></pre></div>\n\n<p>What is the standard way to do this?</p>",
        "id": 213942515,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603210544
    },
    {
        "content": "<p><code>(by apply_instance)</code> should work in place of the <code>_</code></p>",
        "id": 213942807,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603210674
    },
    {
        "content": "<p>Your <code>fetch_instance</code> is exactly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infer_instance\">docs#infer_instance</a></p>",
        "id": 213942975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603210743
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/infer_instance/src\">src#infer_instance</a> is also defined with the same definition as your <code>fetch_instance</code>, but I think it's disfavored for some reason.</p>",
        "id": 213942978,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603210744
    },
    {
        "content": "<p>Is there a fundamental problem with using <code>_</code> instead of <code>infer_instance</code>? It would be quite intuitive.</p>",
        "id": 213943268,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603210879
    }
]