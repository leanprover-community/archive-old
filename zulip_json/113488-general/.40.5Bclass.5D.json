[
    {
        "content": "<p>How should I interpret the class attribute on something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">is_local_ring</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_local_ring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 167023292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559328719
    },
    {
        "content": "<p>The same way as on structures - \"if you have an instance implicit parameter of type <code>zero_ne_on h</code>, try to infer its value via its instances\"</p>",
        "id": 167028152,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1559332174
    },
    {
        "content": "<p>However, I don't think tagging (semi)reducible definitions as classes is a good idea. While typeclass search will never unfold them, other parts of the elaborator might, which could lead to confusing failures. Not sure if that ever happened in practice.</p>",
        "id": 167028302,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1559332276
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 167028617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559332496
    },
    {
        "content": "<p>It has happened to me in practice.</p>",
        "id": 167030373,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559333737
    },
    {
        "content": "<p>It also caused some problems in category theory when <code>has_limits_of_shape</code> was defined as a Pi type of <code>has_limit</code>.</p>",
        "id": 167037963,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559339909
    }
]