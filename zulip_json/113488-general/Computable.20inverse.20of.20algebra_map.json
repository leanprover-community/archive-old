[
    {
        "content": "<p>I have a definition of a magnitude function for some specific <code>A</code>, which has signature <code>def magnitude [ring R] [ring A] [algebra R A] : A → (⊥ : subalgebra R A)</code>, which is computable.</p>\n<p>I'd like to use it to define an inverse function, <code>def inv [field R] [ring A] [algebra R A] (a : A) := (magnitude A)⁻¹ • a</code>.</p>\n<p>Unfortunately, this doesn't work because I need the result of <code>magnitude</code> to be <code>R</code> not <code>⊥ : subalgebra R A</code>. I can get around this with a suitable invocation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.choice\">docs#classical.choice</a>, but I'd really rather that <code>inv</code> _were_ computable.</p>\n<p>My two questions are:</p>\n<ul>\n<li>Is there an easy way to replace a <code>classical.choice</code> with a <code>decidable</code> instance of some kind, to say \"assume there is an algorithm to perform this choice\", which allows the caller to actually attempt to provide one?</li>\n<li>Is there another way to transfer the instance<code>has_inv R → has_inv (⊥ : subalgebra R A)</code> that is computable?</li>\n</ul>",
        "id": 216795333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605450673
    },
    {
        "content": "<p>First question doesn't seem to make much sense to me because you are basically asking the caller to provide the value you're allegedly constructing</p>",
        "id": 216795713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605451026
    },
    {
        "content": "<p>How do you construct this value <code>magnitude a</code> of type <code>⊥ : subalgebra R A</code>?</p>",
        "id": 216795729,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605451048
    },
    {
        "content": "<p>Roughly as <code>⟨f a, (some_lemma a : ∃ r, f a = algebra_map R A r)⟩</code></p>",
        "id": 216795822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605451161
    },
    {
        "content": "<p>I have no idea what this \"magnitude\" is supposed to be, but can it be a function from <code>A</code> to <code>R</code>?</p>",
        "id": 216795851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605451203
    },
    {
        "content": "<p>I can't work out how to define it that way unfortunately. Ideally yes, I would do that</p>",
        "id": 216795896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605451224
    },
    {
        "content": "<p>I think the answer to the second question is no basically by a \"lack of imagination\" argument (\"how could you possibly go about doing it\")?</p>",
        "id": 216795897,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605451227
    },
    {
        "content": "<p>So I guess the proof of <code>some_lemma</code> is nonconstructive?</p>",
        "id": 216795930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605451279
    },
    {
        "content": "<p>Honestly I have no idea</p>",
        "id": 216795953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605451305
    },
    {
        "content": "<p>#print axioms will tell me?</p>",
        "id": 216795957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605451311
    },
    {
        "content": "<p>It's your lemma right? I mean the math proof... what did you do</p>",
        "id": 216795968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605451323
    },
    {
        "content": "<p>If you want stuff to be constructive you need to figure out how to compute it constructively, there are no shortcuts</p>",
        "id": 216796032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605451364
    },
    {
        "content": "<p>Well in this case, a shortcut would be \"find a computable left_inverse of <code>algebra_map</code> via typeclass resolution\", especially since we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.injective\">docs#ring_hom.injective</a> to prove that there is a <code>left_inverse</code></p>",
        "id": 216796060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605451405
    },
    {
        "content": "<blockquote>\n<p>It's your lemma right? I mean the math proof... what did you do</p>\n</blockquote>\n<p>I used <code>submonoid.induction_on</code>, which I guess pulled in the axiom of choice</p>",
        "id": 216796145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605451495
    },
    {
        "content": "<p>I'm not sure what you are suggesting, do you mean adding a new class whose purpose is to contain these inverses?</p>",
        "id": 216796259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605451620
    },
    {
        "content": "<p>A lot of algebras (e.g. exterior algebras, or more generally connected graded algebras) are <a href=\"https://ncatlab.org/nlab/show/augmented+algebra\">augmented</a></p>",
        "id": 216796359,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605451707
    },
    {
        "content": "<p>I'm suggesting a <code>[has_left_inverse f f_inj]</code>typeclass, which <code>open_locale classical</code> would provide instance for automatically</p>",
        "id": 216797004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605452427
    },
    {
        "content": "<p>Or perhaps more generally <code>[choosable (∃ r, f a = algebra_map R A r)]</code> which can either be provided by the caller or with <code>classical.choice</code></p>",
        "id": 216797093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605452549
    },
    {
        "content": "<p>In general this is exactly the sort of thing mathlib tries to avoid, since it's worse to have terms depend on the provenance of these instances than it is for things to be noncomputable</p>",
        "id": 216797535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605453291
    }
]