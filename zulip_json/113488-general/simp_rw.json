[
    {
        "content": "<p>simp_rw is supposed to rewrite under quantifiers.  But:  I have<br>\n<code>\nh1 : ∀ (u a : M), u ∈ x ∧ ¬a ∈ u → u ∪ single a ∈ x\n</code><br>\nand   <br>\n<code>\nsimp_rw and_comm at h1, \n</code><br>\n fails.   Why?</p>\n<p>The error message is \"simplify tactic failed to simplify\".</p>\n<p>I expected and_comm to rewrite once.   But maybe it just rewrites to what it considers \"canonical order\". <br>\nThat is,    I thought,  if it gets b /\\ a   it should produce a /\\ b and vice-versa,  but maybe it always produces a /\\ b?</p>",
        "id": 208605337,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1598902582
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 208605677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598902730
    },
    {
        "content": "<p>also could you describe the error in more detail than \"fails\"?</p>",
        "id": 208605727,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598902756
    },
    {
        "content": "<p>you can start by copying the error message</p>",
        "id": 208605756,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598902772
    },
    {
        "content": "<p><code>simp</code> and <code>simp_rw</code> simplify until they hit a normal form. Since <code>and_comm</code> can be applied over and over again, it has to decide whether <code>u ∈ x ∧ ¬a ∈ u</code> is simpler or <code>(¬a ∈ u) ∧ u ∈ x</code> is simpler. I think it decided the former, and therefore didn't rewrite.</p>\n<p>You could try <code>simp_rw and_comm (_ ∈ x) at h1</code>. If that doesn't work, please give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 208610821,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598905534
    }
]