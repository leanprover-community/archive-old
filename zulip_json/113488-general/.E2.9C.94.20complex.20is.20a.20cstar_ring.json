[
    {
        "content": "<p>I agree. Besides, I'm pretty sure <code>analysis/normed_space/star</code> is currently imported by nothing at all since it's so recent.</p>",
        "id": 263180576,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638293869
    },
    {
        "content": "<p>sounds good: <a href=\"https://github.com/leanprover-community/mathlib/issues/10555\">#10555</a></p>",
        "id": 263181066,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638294087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> has marked this topic as resolved.</p>",
        "id": 263181189,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638294142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> where do you think I should register the instance for <code>real</code>?  And I assume the one for <code>is_R_or_C</code> should go in <code>analysis/normed_space/is_R_or_C</code>.</p>",
        "id": 263197685,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638301340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> The convention is not fully formed yet, but I think <code>analysis/normed_space/is_R_or_C</code> should be about normed spaces over <code>is_R_or_C</code> rather than about <code>is_R_or_C</code> as a normed space.</p>",
        "id": 263204656,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638304540
    },
    {
        "content": "<p>I think maybe <code>data.complex.is_R_or_C</code> for the cstar-algebra instance (it already imports tons of stuff about normed spaces, so no real loss importing one more file).</p>",
        "id": 263204820,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638304606
    },
    {
        "content": "<p>The <code>is_R_or_C</code> instance actually implies the other two, so it's up to you whether to add them explicitly -- if you want to add the real one I think it could live in <code>analysis/normed_space/star</code> itself.</p>",
        "id": 263205173,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638304799
    },
    {
        "content": "<p>doesn't it help typeclass resolution to have separate instances?</p>",
        "id": 263205302,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638304864
    },
    {
        "content": "<p>Good question!  I don't know.</p>\n<p>(Note: if the instance contains <em>data</em>, then you definitely don't want to have separate instances.  But <code>cstar_ring</code> is a <code>Prop</code>-only class so that doesn't apply here.)</p>",
        "id": 263205492,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638304969
    },
    {
        "content": "<p>I thought that was why there are a million instances listed explicitly in <code>data.real.basic</code>. Yes, I realize you don't want separate instances with data because then you'll be stuck in a sort of definitional equality hell.</p>",
        "id": 263206580,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638305439
    },
    {
        "content": "<p>At the very least, maybe it will minimize imports in the future, and the proofs are short anyways. I'll include all three in the suggested places, but if you decide you only want <code>is_R_or_C</code> then we can remove the others.</p>",
        "id": 263210183,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638307094
    },
    {
        "content": "<p>My impression at the moment is that <code>is_R_or_C</code> is a bit heavy, in the sense that importing it implies importing a ton of other stuff. So it might still be good to have the more specialized instances as well.</p>",
        "id": 263211925,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638307989
    },
    {
        "content": "<p>But <code>analysis.complex.basic</code> imports <code>is_R_or_C</code>.</p>",
        "id": 263212069,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638308070
    },
    {
        "content": "<p>What about the reals?</p>",
        "id": 263212193,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638308146
    },
    {
        "content": "<p>Yes, they're much earlier in the hierarchy, so that's an argument for the separate <code>real.cstar_ring</code> instance at least.</p>",
        "id": 263212323,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638308208
    },
    {
        "content": "<p>Sounds good. Let's go for the <code>is_R_or_C</code> instance and the real instance. If <code>is_R_or_C</code> already imports the complex numbers there's not much point in having a separate instance for it.</p>",
        "id": 263212606,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638308373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20complex.20is.20a.20cstar_ring/near/263212606\">said</a>:</p>\n<blockquote>\n<p>If <code>is_R_or_C</code> already imports the complex numbers</p>\n</blockquote>\n<p>other way around :)</p>",
        "id": 263212705,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638308409
    },
    {
        "content": "<p>Right :-)</p>",
        "id": 263212731,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638308427
    },
    {
        "content": "<p>done</p>",
        "id": 263212962,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638308550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, CI gave an error about instance priority which I don't understand.</p>",
        "id": 263221602,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638313375
    },
    {
        "content": "<p>It means that this instance will always apply, i.e. whenever Lean is looking for a <code>cstar_ring K</code> instance, it will look for <code>is_R_or_C K</code>. In general, this sort of thing can lead to performance issues, so we want those to have low priority. (In this particular case it's probably fine since <code>is_R_or_C</code> only has two instances, but still -- let's just lower the priority.)</p>",
        "id": 263222254,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638313767
    },
    {
        "content": "<p>100 is the usual priority choice for this type of thing</p>",
        "id": 263224294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638315290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> when you have a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/10570\">#10570</a> again (no rush), just make sure you see my question about renaming <code>star_isometry</code> and <code>star_normed_group_hom</code> to get projection  syntax (if this is even possible in this case).</p>",
        "id": 263500247,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638479120
    }
]