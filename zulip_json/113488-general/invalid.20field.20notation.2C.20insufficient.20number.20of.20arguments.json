[
    {
        "content": "<p>Extracted from <a href=\"#narrow/stream/113488-general/topic/mem_of_super_set/near/249360699\">another thread</a>; what's going on with this error message?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"sd\">/-- Alias for dot notation -/</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">filter_mem_dot_notation</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">P</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">filter.has_mem'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">filter_mem_dot_notation</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">f.sets</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- replacing `hx` with `filter_mem_dot_notation (x ∈ f)` fixes the error</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">filter_mem_dot_notation.up</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">hx.up</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">hx.up</span> <span class=\"n\">h</span>  <span class=\"c1\">-- invalid field notation, insufficient number of arguments for 'filter_mem_dot_notation.up'</span>\n</code></pre></div>",
        "id": 249360436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628861485
    },
    {
        "content": "<p><code>#check filter_mem_dot_notation.up hx h</code> works fine. More interestingly, <code>#check hx.up h _</code> gives </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">function</span> <span class=\"bp\">'</span><span class=\"n\">filter_mem_dot_notation.up'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">explicit</span> <span class=\"n\">argument</span> <span class=\"k\">with</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">filter_mem_dot_notation</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so that's probably what the issue is -- Lean's dot notation is confused by this point (because it doesn't work with abbreviations very well?)</p>",
        "id": 249366288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628864557
    }
]