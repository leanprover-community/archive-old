[
    {
        "content": "<p>Is the following snippet useful enough to PR to mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_cases</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_cases</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_cases</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_cases</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_of_le_zero</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_one_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">ih</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- ring,     -- does nothing useful</span>\n  <span class=\"c1\">-- norm_num, -- does nothing useful</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- all_goals { ring },     -- works</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> had some tactic in the making that would do such case-bashing. Maybe we want something more general, that also handles <code>k ∈ finset.Ico 3 7</code>, etc...</p>",
        "id": 175791365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568621059
    },
    {
        "content": "<p>That was Scott's plan, but I don't think it's materialized yet. He did do <code>fin_cases</code> which you can force to work here. Not the most elegant way.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">k&#39;</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h_1</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 175793114,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568622671
    },
    {
        "content": "<p>Aha, that already a useful start. I guess that is already good enough to not PR <code>nat.le_cases</code> to mathlib.</p>",
        "id": 175793746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568623352
    },
    {
        "content": "<p>I think there's still an branch <code>nat_cases</code> that contains most of the tactic you're looking for.</p>",
        "id": 175794264,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568623872
    },
    {
        "content": "<p>It would be good to finish that off!</p>",
        "id": 175794276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568623880
    },
    {
        "content": "<p>Similarly our <code>hom</code> tactic, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>!</p>",
        "id": 175794286,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568623890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Yeah, you are right... with the move to bundled homs the <code>hom</code> tactic is getting less urgent every day, but still...</p>",
        "id": 175795303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568624740
    }
]