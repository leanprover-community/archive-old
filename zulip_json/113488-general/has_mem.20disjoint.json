[
    {
        "content": "<p>Currently, there is this definition in <code>data/list/basic.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∉</span> <span class=\"n\">l₂</span>\n</pre></div>\n\n\n<p>Would there be any interest in replacing it with the following more general version?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">disjoint</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β₁</span> <span class=\"n\">β₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">β₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">b₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∉</span> <span class=\"n\">b₂</span>\n</pre></div>\n\n\n<p>I'm using the latter quite a lot, and a number of the <code>list</code> theorems can be stated about it instead.</p>",
        "id": 135017185,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538462333
    },
    {
        "content": "<p>Can those list theorems be generalized too?</p>",
        "id": 135017241,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538462422
    },
    {
        "content": "<p>A number of them could.</p>",
        "id": 135017249,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538462454
    },
    {
        "content": "<p>What assumptions do they need on top of <code>has_mem</code>?</p>",
        "id": 135017259,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538462483
    },
    {
        "content": "<p>I haven't looked into it, but theorems like this obviously need <code>list</code>s:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">disjoint_of_disjoint_cons_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">disjoint</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n</pre></div>",
        "id": 135017312,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538462550
    },
    {
        "content": "<p>But this...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">disjoint</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">l₂</span> <span class=\"n\">l₁</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">i₂</span> <span class=\"n\">i₁</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span>\n</pre></div>",
        "id": 135017321,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538462580
    },
    {
        "content": "<p>you mean <code>lattice.disjoint</code></p>",
        "id": 135017383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538462673
    },
    {
        "content": "<p>I guess you could also reformulate the first one to use <code>insert</code></p>",
        "id": 135017384,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538462678
    },
    {
        "content": "<p>For me, the latter <code>disjoint</code> is useful when mixing <code>list</code> and <code>finset</code>.</p>",
        "id": 135017386,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538462678
    },
    {
        "content": "<blockquote>\n<p>you mean <code>lattice.disjoint</code></p>\n</blockquote>\n<p>I don't think I do. I specifically want <code>has_mem</code>.</p>",
        "id": 135017398,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538462725
    },
    {
        "content": "<p>but what structure has mem?</p>",
        "id": 135017401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538462744
    },
    {
        "content": "<p>Also, <code>β₁</code> and <code>β₂</code> are different.</p>",
        "id": 135017403,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538462756
    },
    {
        "content": "<p>does this make much sense for <code>option.has_mem</code>?</p>",
        "id": 135017404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538462756
    },
    {
        "content": "<blockquote>\n<p>I guess you could also reformulate the first one to use <code>insert</code></p>\n</blockquote>\n<p>I don't think you want to do that. It's a useful theorem by its own right.</p>",
        "id": 135017452,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538462785
    },
    {
        "content": "<p>Right, I would keep both</p>",
        "id": 135017462,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538462810
    },
    {
        "content": "<p>Kenny: I don't understand what you mean. Plenty of things have <code>has_mem</code> instances:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">topological_spaces</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">open_set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">computability</span><span class=\"bp\">/</span><span class=\"n\">partrec_code</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→.</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">code</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">⟩</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">hash_map</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">hash_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span><span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mem</span><span class=\"bp\">⟩</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"n\">has_mem</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">roption</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">⟩</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">semiquot</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">semiquot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"bp\">⟩</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">seq</span><span class=\"bp\">/</span><span class=\"n\">computation</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">computation</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">computation</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">⟩</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">seq</span><span class=\"bp\">/</span><span class=\"n\">seq</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">seq</span><span class=\"bp\">/</span><span class=\"n\">wseq</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">wseq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">seq</span><span class=\"bp\">/</span><span class=\"n\">wseq</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>    <span class=\"n\">unfold</span> <span class=\"n\">cons</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">wseq</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">seq</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">seq</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">theorem</span> <span class=\"n\">ne_of_mem_of_not_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"n\">set_theory</span><span class=\"bp\">/</span><span class=\"n\">lists</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">lists</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lists&#39;</span> <span class=\"n\">α</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set_theory</span><span class=\"bp\">/</span><span class=\"n\">lists</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">lists</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lists</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mem</span><span class=\"bp\">⟩</span>\n<span class=\"n\">set_theory</span><span class=\"bp\">/</span><span class=\"n\">zfc</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">pSet</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">pSet</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mem</span><span class=\"bp\">⟩</span>\n<span class=\"n\">set_theory</span><span class=\"bp\">/</span><span class=\"n\">zfc</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">Set</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mem</span><span class=\"bp\">⟩</span>\n<span class=\"n\">set_theory</span><span class=\"bp\">/</span><span class=\"n\">zfc</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"k\">show</span> <span class=\"bp\">@</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span> <span class=\"n\">y</span> <span class=\"err\">⟦</span><span class=\"bp\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">⟩</span><span class=\"err\">⟧</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"n\">set_theory</span><span class=\"bp\">/</span><span class=\"n\">zfc</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">Class</span> <span class=\"n\">Class</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Class</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 135017605,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538463076
    },
    {
        "content": "<p>how did you search that?</p>",
        "id": 135018358,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538464426
    },
    {
        "content": "<p>oh, it's a grep right</p>",
        "id": 135018400,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538464470
    },
    {
        "content": "<blockquote>\n<p>how did you search that?</p>\n</blockquote>\n<p><code>git grep has_mem</code></p>",
        "id": 135018684,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538465035
    },
    {
        "content": "<p>Why not <code>#print instances has_mem</code>?</p>",
        "id": 135018757,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538465137
    },
    {
        "content": "<p>Why not? You could use that, too. <code>git grep</code> is faster and, in this case, useful enough.</p>",
        "id": 135018826,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538465250
    },
    {
        "content": "<p>I accept your answer.</p>",
        "id": 135018878,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538465298
    },
    {
        "content": "<p>I don't think a <code>has_mem</code> version of <code>disjoint</code> makes sense. You get surely some basic facts from the implication. But otherwise we don't have any structure behind <code>mem</code>. Its better to use the <code>lattice</code> version.</p>",
        "id": 135019217,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538465863
    },
    {
        "content": "<p>In my case (which may be strange), I can't use the <code>lattice</code> version. It requires the types to be the same.</p>",
        "id": 135019292,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538465956
    },
    {
        "content": "<p>Note that anything that satisfies that definition also fits the lattice definition (at least mathematically), since it can be expressed on the lattice of sets <code>{x | x \\in s}</code></p>",
        "id": 135019293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538465966
    },
    {
        "content": "<p>In particular, I want to show that a <code>list</code> and a <code>finset</code> are disjoint.</p>",
        "id": 135019353,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538466007
    },
    {
        "content": "<p>oh, I see you've made the types different</p>",
        "id": 135019355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538466010
    },
    {
        "content": "<p>just say <code>l1.to_finset.disjoint s2</code></p>",
        "id": 135019367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538466030
    },
    {
        "content": "<blockquote>\n<p>just say <code>l1.to_finset.disjoint s2</code></p>\n</blockquote>\n<p>That adds the extra baggage of <code>to_finset</code>, which I don't need.</p>",
        "id": 135019376,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538466056
    },
    {
        "content": "<p>I really just want <code>∀ ⦃a : α⦄, a ∈ b₁ → a ∉ b₂</code>.</p>",
        "id": 135019388,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538466104
    },
    {
        "content": "<p>then define it for yourself</p>",
        "id": 135019443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538466173
    },
    {
        "content": "<p>I don't see strong evidence that this is a common case</p>",
        "id": 135019452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538466193
    },
    {
        "content": "<blockquote>\n<p>I don't think a <code>has_mem</code> version of <code>disjoint</code> makes sense. You get surely some basic facts from the implication. But otherwise we don't have any structure behind <code>mem</code>.</p>\n</blockquote>\n<p>Just to make my final case for the <code>has_mem</code>-based <code>disjoint</code> above before I go away. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>\n<p>Advantages:</p>\n<p>1. It provides a nice generalization of the <code>list</code>-based <code>disjoint</code>. So, you can define the basic implication facts such that they work for other types beside <code>list</code>. And, yet, you can also define the <code>list</code> <code>disjoint</code> facts just as they are, so you don't lose anything.<br>\n2. It works with two different types, while the <code>lattice</code> <code>disjoint</code> doesn't.<br>\n3. Useful simplification theorems can be defined for different combinations of types.</p>\n<p>Disadvantages:</p>\n<p>1. It adds too much generality?</p>\n<p>(I'm having trouble thinking of disadvantages.)</p>",
        "id": 135020502,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538467917
    },
    {
        "content": "<p>can you do the lattice disjoint using has_mem disjoint?</p>",
        "id": 135020550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538467982
    },
    {
        "content": "<blockquote>\n<p>can you do the lattice disjoint using has_mem disjoint?</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 135020615,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538468049
    },
    {
        "content": "<p>you say it's more general, but it doesn't capture the generality of lattices</p>",
        "id": 135020625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468077
    },
    {
        "content": "<p>so it's really just a generalization in a different direction</p>",
        "id": 135020638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468099
    },
    {
        "content": "<p>More general in the sense that the “sets” are different even though the element type is the same.</p>",
        "id": 135020647,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538468109
    },
    {
        "content": "<blockquote>\n<p>so it's really just a generalization in a different direction</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 135020651,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538468120
    },
    {
        "content": "<p>In particular, I like that the bottom element need not be the empty set / \"false\"</p>",
        "id": 135020656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468139
    },
    {
        "content": "<p>i.e. when I am talking about disjoint subgroups</p>",
        "id": 135020700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468171
    },
    {
        "content": "<p>This kind of generality gets use in several places in mathlib. Multiple type disjointness does not</p>",
        "id": 135020721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468229
    },
    {
        "content": "<p>If it comes up, I'm prepared to consider a definition but we have zero theorems that need this right now</p>",
        "id": 135020732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468262
    },
    {
        "content": "<p>Yeah, so this is not a very mathematically elegant generality, more of a practical one. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 135020734,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538468269
    },
    {
        "content": "<p>if all the theorems are in your project, then so should this definition</p>",
        "id": 135020778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468284
    },
    {
        "content": "<p>I'm not saying it's a bad definition, but it is certainly \"premature optimization\" for mathlib</p>",
        "id": 135020820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468374
    },
    {
        "content": "<p>That may be.</p>",
        "id": 135020883,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538468416
    },
    {
        "content": "<p>You could have a function <code>to_set [has_mem a b] : b -&gt; set a</code> for which <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span>' version of <code>disjoint</code> is consistent with <code>to_set a ∩ to_set b = ∅</code> even if <code>a</code> and <code>b</code> have different types.</p>",
        "id": 135057773,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538508182
    }
]