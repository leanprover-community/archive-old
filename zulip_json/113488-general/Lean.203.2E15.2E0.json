[
    {
        "content": "<p>Good evening, mathematicians and computer scientists!  May I announce the sixth release of the Lean community fork this month, Lean 3.15.0!  Many thanks to <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> and <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> for their contributions!  Let me show you the excerpt from the changelog!</p>\n<p>Features:</p>\n<ul>\n<li>Support for structured formatting using <code>eformat</code> (<a href=\"https://github.com/leanprover-community/lean/issues/276\">lean#276</a>)</li>\n<li>Show goals for subterms (<a href=\"https://github.com/leanprover-community/lean/issues/275\">lean#275</a>, <a href=\"https://github.com/leanprover-community/lean/issues/277\">lean#277</a>)</li>\n<li>Freeze instances in the simplifier (<a href=\"https://github.com/leanprover-community/lean/issues/273\">lean#273</a>)</li>\n<li>Support local attribute with docstring (<a href=\"https://github.com/leanprover-community/lean/issues/271\">lean#271</a>)</li>\n<li>VM objects may be hashed (<a href=\"https://github.com/leanprover-community/lean/issues/262\">lean#262</a>)</li>\n<li><code>expr.coord</code> and <code>expr.address</code> (<a href=\"https://github.com/leanprover-community/lean/issues/260\">lean#260</a>)</li>\n<li>Add <code>list.map_with_index</code> to core library (<a href=\"https://github.com/leanprover-community/lean/issues/259\">lean#259</a>)</li>\n<li>Add <code>expr.instantiate_vars_core</code> (<a href=\"https://github.com/leanprover-community/lean/issues/261\">lean#261</a>)</li>\n<li>Don't check levels on meta inductives (<a href=\"https://github.com/leanprover-community/lean/issues/263\">lean#263</a>)</li>\n</ul>\n<p>Bug fixes:</p>\n<ul>\n<li>Preserve VM code indexes across instances (<a href=\"https://github.com/leanprover-community/lean/issues/283\">lean#283</a>)</li>\n<li>Fixes a VM environment cache not updating (<a href=\"https://github.com/leanprover-community/lean/issues/280\">lean#280</a>)</li>\n<li>Do not use fseek in io.fs.read (<a href=\"https://github.com/leanprover-community/lean/issues/278\">lean#278</a>)</li>\n<li>Dot-notation pretty-printing (<a href=\"https://github.com/leanprover-community/lean/issues/269\">lean#269</a>)</li>\n</ul>\n<p>Changes:</p>\n<ul>\n<li>Elaborate structure instances left-to-right (<a href=\"https://github.com/leanprover-community/lean/issues/282\">lean#282</a>)</li>\n<li>Remove duplicated namespaces (<a href=\"https://github.com/leanprover-community/lean/issues/267\">lean#267</a>)</li>\n<li>Remove <code>(|</code> and <code>|)</code> aliases (<a href=\"https://github.com/leanprover-community/lean/issues/265\">lean#265</a>)</li>\n</ul>\n<h3>Special feature: widgets (<a href=\"https://github.com/leanprover-community/lean/issues/258\">lean#258</a>)</h3>\n<h4>Lean API</h4>\n<ul>\n<li>\n<p>Add widgets. This is an HTML-based UI framework for generating html within lean to enable interactive UI<br>\n  in the infoview in vscode and on the web.</p>\n</li>\n<li>\n<p>Add <code>tactic.save_widget: pos → widget.component tactic_state string → tactic unit</code>. Examples of widgets can be found in <code>library/widget/examples.lean</code>.<br>\n  Widgets are registered in exactly the same way as <code>save_info_thunk</code> saves text.</p>\n</li>\n<li>\n<p>Use the <code>#html</code> command to view <code>html empty</code> or <code>component tactic_state string</code> widgets.</p>\n</li>\n<li>\n<p>Add a 'structured format' pretty printing system <code>tactic_state.pp_tagged : tactic_state → expr → eformat</code>.<br>\n<code>eformat := tagged_format (expr.address × expr)</code>.<br>\n<code>tagged_format α : Type</code> performs the same role as <code>format</code> except that there is a special constructor<br>\n<code>tag : α → tagged_format → tagged_format</code> that contains information about<br>\n  which subexpression caused this string to be rendered.<br>\n  This is used to implement a widget which allows the user to hover over a pretty printed string<br>\n  and view information about the subexpressions that build up the original expression.<br>\n  For example, this lets you view types of pretty printed expressions and view implicit arguments.</p>\n</li>\n<li>\n<p>Add numerous docstrings</p>\n</li>\n</ul>",
        "id": 199058589,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590689037
    },
    {
        "content": "<p>The mathlib PR is building : <a href=\"https://github.com/leanprover-community/mathlib/issues/2851\">#2851</a> (feel free to fix things)</p>",
        "id": 199058711,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590689080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> The widgets feature for vscode-lean is still WIP, right? I'd be happy to review a PR for this feature to the community web editor whenever you're ready.</p>",
        "id": 199061569,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590690154
    },
    {
        "content": "<p>It’s all wip but hopefully it will drop on vscode soon</p>",
        "id": 199063029,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590690694
    },
    {
        "content": "<p>Wow, six releases in one month. Should we perhaps use more minor versions just to keep the version numbers under control?</p>",
        "id": 199063401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590690880
    },
    {
        "content": "<p>or maybe we need relative numbering like 3.mathlib.0 and 3.mathlib+1.0</p>",
        "id": 199063485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590690943
    },
    {
        "content": "<p>I think the current versioning scheme paints a good picture of the rate of development.</p>",
        "id": 199063491,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590690949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113488-general/topic/Lean.203.2E15.2E0/near/199063029\">said</a>:</p>\n<blockquote>\n<p>It’s all wip but hopefully it will drop on vscode soon</p>\n</blockquote>\n<p>Where's that cheerleader emoji?</p>",
        "id": 199067973,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590693015
    },
    {
        "content": "<p>Any more thoughts on <a href=\"https://github.com/leanprover-community/mathlib/issues/2851\">#2851</a> ? Since there were quite a few changes necessary, I think it would be good to have more eyes on it before merging.</p>",
        "id": 199273954,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590869381
    },
    {
        "content": "<p>I didn't contribute to the PR, but I can try to review</p>",
        "id": 199274082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590869568
    },
    {
        "content": "<p>I just looked at it and it's the most random PR I've ever seen</p>",
        "id": 199274443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590870160
    },
    {
        "content": "<p>I don't have further comments. Let's get this merged.</p>",
        "id": 199274701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590870606
    },
    {
        "content": "<p>It's now in the merge queue, but the last batch failed to build, so there might be an incompatibility with one of the other PRs (<a href=\"https://github.com/leanprover-community/mathlib/issues/2861\">#2861</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/2870\">#2870</a> or <a href=\"https://github.com/leanprover-community/mathlib/issues/2876\">#2876</a>): <a href=\"https://github.com/leanprover-community/mathlib/runs/723943411?check_suite_focus=true#step:7:11\">https://github.com/leanprover-community/mathlib/runs/723943411?check_suite_focus=true#step:7:11</a></p>",
        "id": 199283903,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590887323
    },
    {
        "content": "<p>OK, the culprit seems to be <a href=\"https://github.com/leanprover-community/mathlib/issues/2861\">#2861</a> (see comment there).</p>",
        "id": 199285388,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590890478
    },
    {
        "content": "<p>I downloaded the branch, and it works fine on my computer.</p>",
        "id": 199290793,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590901313
    },
    {
        "content": "<p>Yeah, I now think the issue is with <a href=\"https://github.com/leanprover-community/mathlib/issues/2851\">#2851</a> and something that was already merged.</p>",
        "id": 199290837,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590901371
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2848\">#2848</a> seems the most likely culprit</p>",
        "id": 199290905,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590901533
    },
    {
        "content": "<p>Is there a way to download the incomplete set of oleans?</p>",
        "id": 199290909,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590901551
    },
    {
        "content": "<p>The oleans should be on azure, but it might be a pain to get to the exact commit. I've just pushed a merge commit so in ~1 hour there should be some olean files for a broken build on the 315 branch.</p>",
        "id": 199290988,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590901677
    },
    {
        "content": "<p>Hmm, 315 builds on my computer (without <code>-T100000</code>).</p>",
        "id": 199292001,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590903440
    },
    {
        "content": "<p>The timeout with <code>-T100000</code> is <a href=\"https://github.com/leanprover-community/mathlib/blob/208f5e55d89ac2178f42d82211b9a8cbc9ccf41a/src/linear_algebra/dual.lean#L230\">here</a> under the <code>≃ₗ</code>.</p>",
        "id": 199292054,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590903564
    },
    {
        "content": "<p>No deterministic timeout if I change it from this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">eval_equiv</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">&lt;</span> <span class=\"n\">omega</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">of_bijective</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">eval_ker</span> <span class=\"o\">(</span><span class=\"n\">eval_range</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c1\">-- deterministic timeout</span>\n</code></pre></div>\n\n\n<p>to this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">eval_equiv</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">&lt;</span> <span class=\"n\">omega</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">of_bijective</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">eval_ker</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eval_range</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c1\">-- slow, but succeeds</span>\n</code></pre></div>",
        "id": 199292246,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590903872
    },
    {
        "content": "<p>I think it might be because of some bad instances where <code>one := 1</code> etc. was not used like recommended</p>",
        "id": 199292275,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590903958
    },
    {
        "content": "<p>Building locally to test this hypothesis.</p>",
        "id": 199292315,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590903974
    },
    {
        "content": "<p>The github actions build failed, so you should be able to get partial oleans now.</p>",
        "id": 199292998,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590905128
    },
    {
        "content": "<p>Deleting <code>dual.vector_space</code> seemed to make the difference.</p>",
        "id": 199293103,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590905313
    },
    {
        "content": "<p>The instances generated by <code>extends</code> don't follow Gabriel's advice. Is this a problem?</p>\n<blockquote>\n<p>Avoid sourcing ({ ..e } where e.g. e : euclidean_domain α) for fields like add, mul, zero, etc. Instead write { add := (+), mul := (*), zero := 0, ..e }. The reason is that { ..e } is equivalent to { mul := euclidean_domain.mul, ..e }. And euclidean_domain.mul should never be mentioned.</p>\n</blockquote>",
        "id": 199293188,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590905545
    },
    {
        "content": "<p>It builds</p>",
        "id": 199294728,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590908814
    },
    {
        "content": "<p>Generally, these new guidelines seem unintuitive and easy to forget. Is there some way a linter could help?</p>",
        "id": 199297333,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590914820
    }
]