[
    {
        "content": "<p>on <a href=\"https://github.com/leanprover-community/mathlib/tree/ericrbg/lean_bump\">branch#ericrbg/lean_bump</a>, I'm trying to bump to 3.36.0 (and I guess soon 3.36.1). the main breaking change in this is that the binders <code>∀ x y ∈ s</code> are now <code>∀ x, x ∈ s → ∀ y, y ∈ s</code> instead of <code>∀ x y, x ∈ s → y ∈ s</code>. this should not add anything more than tedium but can be quite annoying to deal with, see for example:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/0693aeb996512dc8aabd0130b53c87e7f70fb9ab/src/topology/uniform_space/basic.lean#L947\">https://github.com/leanprover-community/mathlib/blob/0693aeb996512dc8aabd0130b53c87e7f70fb9ab/src/topology/uniform_space/basic.lean#L947</a></p>\n<p>and it gets a bit more annoying in /src/topology/uniform_space/cauchy.lean (I haven't fixed this file yet because of this). my question is, am I missing some tactics/lemmas for this? <code>tauto, finish, simp</code> don't seem to help too much. or is the right approach to refactor lemmas that are of the form <code>∀ x y, p x → p y</code> to the new binder form? although that breaks plenty of other things, too, so I'm not too sure that's optimal either.</p>",
        "id": 266834137,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641315377
    },
    {
        "content": "<p>could you explain the tedium in that example a bit more? It's hard to tell what the issue is without building it</p>",
        "id": 266834399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641315511
    },
    {
        "content": "<p>It seems like this new binder form is generally preferable because you give away the information more granularly. I am myself guilty of using <code>∀ x y, x ∈ s → y ∈ s</code> in some convexity stuff, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex\">docs#convex</a> still uses them.</p>",
        "id": 266834452,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641315539
    },
    {
        "content": "<p>well the example I linked is now a whole <code>begin</code>...<code>end</code>, but it used to be a <code>simp</code> with two arguments</p>",
        "id": 266834512,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641315569
    },
    {
        "content": "<p>right, what caused the simp to break?</p>",
        "id": 266834701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641315625
    },
    {
        "content": "<p>apparently a change in Lean:</p>\n<blockquote>\n<p>the main breaking change in this is that the binders <code>∀ x y ∈ s</code> are now <code>∀ x, x ∈ s → ∀ y, y ∈ s</code> instead of <code>∀ x y, x ∈ s → y ∈ s</code></p>\n</blockquote>",
        "id": 266834877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641315708
    },
    {
        "content": "<p>and presumably the old order conveniently lined up with some other definition in a way that the new one doesn't</p>",
        "id": 266834962,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641315734
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ruWeJ3vp7wsHAPBckfJmGhvh/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ruWeJ3vp7wsHAPBckfJmGhvh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ruWeJ3vp7wsHAPBckfJmGhvh/image.png\"></a></div><p>this is the goal state after <code>simp_rw prod.forall</code>; before this would've been in the \"right\" order automatically but now there neds to be reordering</p>",
        "id": 266834973,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641315738
    },
    {
        "content": "<p>yes I'm aware of that (I wrote that change), but I'm wondering what definitions are specifically encouraging the old order</p>",
        "id": 266835013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641315759
    },
    {
        "content": "<p>You might have some luck with an (unannotated) simp lemma saying <code>(∀ x y, x ∈ s → y ∈ t → p) &lt;-&gt; (∀ x, x ∈ s → ∀ y, y ∈ t → p)</code></p>",
        "id": 266835418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641315951
    }
]