[
    {
        "content": "<p>I have a term<code>ns : list name</code>, and a function <code>foo : name -&gt; tactic string</code>. What I want is a term of type <code>list (list string)</code>. Naturally, I want to use some sort of <code>map</code> to apply foo to every element of <code>ns</code>, but that gives me the wrong type. What do I do to get rid of the <code>tactic</code> monad?</p>",
        "id": 159111373,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1550788494
    },
    {
        "content": "<p>Isn't it in general impossible to get out of a monad?</p>",
        "id": 159113131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550790117
    },
    {
        "content": "<p>The tactic could fail; then there's no possibility for getting out</p>",
        "id": 159113200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550790152
    },
    {
        "content": "<p><code>list.mmap</code> might help. You'll end up with a <code>tactic (list (list string))</code></p>",
        "id": 159114235,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550791260
    },
    {
        "content": "<p>Yes I guess so. I figured it out - at any rate. Thanks!</p>",
        "id": 159114350,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1550791385
    },
    {
        "content": "<p>I thought that this was what the monad transformers were about.</p>",
        "id": 159114358,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1550791410
    },
    {
        "content": "<p>But maybe they are different.</p>",
        "id": 159114368,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1550791426
    }
]