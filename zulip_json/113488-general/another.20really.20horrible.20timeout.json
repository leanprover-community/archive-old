[
    {
        "content": "<p>Found by Amelia:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Γ₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_monoid_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>\n<p>Changing <code>def hmm</code> to <code>example</code> makes it work fine, exactly as in <a href=\"#narrow/stream/113488-general/topic/crazy.20time-out/near/263470182\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/crazy.20time-out/near/263470182</a> . In particular all the typeclasses are fine. Has there been some change recently which is causing these timeouts?</p>",
        "id": 263780183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638726591
    },
    {
        "content": "<p>I thought that <code>def</code> and <code>example</code> were indistinguishable!</p>",
        "id": 263780266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638726686
    },
    {
        "content": "<p>Aah -- the thing they have in common is <code>valuation</code>.</p>",
        "id": 263781356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638728109
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>\n<p>Just to be clear, <code>empty</code> doesn't have any of the relevant typeclasses, so now one gets typeclass errors about failing to find <code>field empty</code> and <code>linear_ordered_comm_monoid_with_zero empty</code> but you also get a deterministic timeout.</p>",
        "id": 263781527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638728348
    },
    {
        "content": "<p>So to be clear, <code>def</code> fails but <code>lemma</code> and <code>example</code> both work? Perhaps it's the generating equation lemmas that times out?</p>",
        "id": 263781537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638728396
    },
    {
        "content": "<p>Yes, <code>def</code> fails but <code>lemma</code> and <code>example</code> both work (well, in this <code>empty</code> example nothing works but amongst the errors you have a deterministic timeout with <code>def</code> and no timeout with the other two)</p>",
        "id": 263781595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638728456
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Γ₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_monoid_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>",
        "id": 263781760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638728682
    },
    {
        "content": "<p><del>All three work fine on mathlib <a href=\"https://github.com/leanprover-community/mathlib/commit/7348f1b7fa7a80ce55b3d4c2dad07da93d7cd353\"><code>7348f1b7fa7a80ce55b3d4c2dad07da93d7cd353</code></a> / lean 3.35.1 on my machine</del> I think vscode tricked me</p>",
        "id": 263781865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638728774
    },
    {
        "content": "<p>is your timeoutometer set to further than mine? I tried with various commits from three months ago and could reproduce (the file <code>field_theory.is_alg_closed.algebraic_closure</code> appeared three months ago)</p>",
        "id": 263781907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638728841
    },
    {
        "content": "<p>Who knows, my orange bars have now vanished and won't come back...</p>",
        "id": 263782003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638728950
    },
    {
        "content": "<p>This seems to work fine too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>suggesting the <code>sorry</code> is to blame</p>",
        "id": 263782116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638729088
    },
    {
        "content": "<p>As does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">sorry_but_works</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span> <span class=\"n\">sorry_but_works</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 263782200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638729204
    },
    {
        "content": "<p>Great, I'll tell Amelia to use that instead :-/</p>",
        "id": 263782256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638729252
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 263782368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638729412
    },
    {
        "content": "<p>Yeah, it actually seems like the <code>noncomputable</code> is what causes the problem</p>",
        "id": 263782472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638729525
    },
    {
        "content": "<p>In fact, maybe it's detecting _whether_ it's noncomputable that causes trouble</p>",
        "id": 263782481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638729553
    },
    {
        "content": "<p>We saw this before in a thread that <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> was involved in -- Yakov do you remember? There was a term which Lean would complain about whether you made it noncomputable or not, and you had some insights into why this was happening.</p>",
        "id": 263782498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638729602
    },
    {
        "content": "<p>I think our case was something with the equation compiler not using \"noncomputable\" until it made the whole function?</p>",
        "id": 263782569,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638729665
    },
    {
        "content": "<p>does <code>noncomputable theory</code> help?</p>",
        "id": 263785370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638733387
    },
    {
        "content": "<p>Nope.</p>",
        "id": 263785784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638734001
    },
    {
        "content": "<p>I'm trying to minimise. Does someone have a good tip to make a simple noncomputable function, i.e. some kind of \"noncomputable stub\"?</p>",
        "id": 263785835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638734064
    },
    {
        "content": "<p>It's not valuations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>",
        "id": 263786226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638734571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/another.20really.20horrible.20timeout/near/263785835\">said</a>:</p>\n<blockquote>\n<p>I'm trying to minimise. Does someone have a good tip to make a simple noncomputable function, i.e. some kind of \"noncomputable stub\"?</p>\n</blockquote>\n<p><code>constant</code>?</p>",
        "id": 263786327,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638734730
    },
    {
        "content": "<p>It's more complicated than this. If I use the reals, things work fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">real'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">algebraic_closure'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring.direct_limit</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure.step</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">algebraic_closure.to_step_of_le</span> <span class=\"n\">K</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">real'.field</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">real'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">real'</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">algebraic_closure'.field</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">field.direct_limit.field</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">this_works</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">real'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">this_times_out</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263786966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638735668
    },
    {
        "content": "<p><code>(classical.choice ⟨0⟩, x).2</code> is an easy way to make <code>x</code> noncomputable</p>",
        "id": 263787223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638735976
    },
    {
        "content": "<p>I think this is the root cause -- like Maria's earlier timeout it's probably something to do with noncomputable. Again it has to be a def -- <code>lemma</code> and <code>example</code> work fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">algebraic_closure'.comm_ring</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ideal.quotient.comm_ring</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goals accomplished</span>\n  <span class=\"n\">recover</span><span class=\"o\">,</span> <span class=\"c1\">-- goals accomplished</span>\n  <span class=\"c1\">-- delete the next line for a timeout</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- tactic failed, no goals to be solved</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263790793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638740751
    },
    {
        "content": "<p>The actual proof of <code>comm_ring (algebraic_closure K)</code> in mathlib unfolds to <code>ideal.quotient.comm_ring _</code>.</p>",
        "id": 263790883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638740872
    },
    {
        "content": "<p>Note also that if you mark the def <code>noncomputable</code> then Lean complains that it's not noncomputable before the timeout occurs. (My guess is that it's noncomputable...)</p>",
        "id": 263790960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638740970
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ideal.quotient.comm_ring</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- times out</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263791220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638741330
    },
    {
        "content": "<p>This is the ring we're talking about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">free_comm_ring</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">algebraic_closure.step</span> <span class=\"n\">K</span> <span class=\"n\">i</span><span class=\"o\">)))),</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ideal.quotient.comm_ring</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- times out</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263791625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638741765
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Z3nYNChlcJBo4jgyOVCfktRN/timeout.png\">timeout.png</a><br>\nI used <code>pp.all</code> to figure out what the ideal was (note line numbers). So now we're in the same sort of situation Maria was in, with innocuous working code which Lean can't handle for some reason.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Z3nYNChlcJBo4jgyOVCfktRN/timeout.png\" title=\"timeout.png\"><img src=\"/user_uploads/3121/Z3nYNChlcJBo4jgyOVCfktRN/timeout.png\"></a></div>",
        "id": 263792093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638742410
    },
    {
        "content": "<p>I don't know where to go from here :-(</p>",
        "id": 263792175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638742532
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263792820,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638743509
    },
    {
        "content": "<p>On the other hand, this works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ring.direct_limit.comm_ring</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- the definition of this is `ideal.quotient.comm_ring _`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So it looks like the problem is solved, but in fact all that happens is that it blows up in your face later.</p>",
        "id": 263795622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638747339
    },
    {
        "content": "<p>Current state of things: it's something to do with (a) field (b) noncomputable. I'm posting this here because I want to switch computer and I wondered if people were interested in my progress. It doesn't compile with master mathlib -- for that you have to change <code>J.quotient</code> to <code>_ \\quot J</code> in a couple of places (it compiles with mathlib from around a week ago). The game is to get the imports down to 0. Right now I've reduced them to just ring and field theory.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.free_comm_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.quotient</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">algebraic_closure'</span>\n\n<span class=\"c1\">-- important that this takes `[field]`</span>\n<span class=\"kd\">def</span> <span class=\"n\">monic_irreducible</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">max_ideal</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">monic_irreducible</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">max_ideal.is_maximal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">max_ideal</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_maximal</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- The first step of constructing `algebraic_closure`: adjoin a root of all monic polynomials -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">adjoin_monic</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">max_ideal</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">adjoin_monic.field</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">adjoin_monic</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ideal.quotient.field</span> <span class=\"n\">_</span>\n\n<span class=\"sd\">/-- The canonical ring homomorphism to `adjoin_monic k`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">to_adjoin_monic</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">adjoin_monic</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">mv_polynomial.C</span>\n\n<span class=\"sd\">/-- The `n`th step of constructing `algebraic_closure`, together with its `field` instance. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">step_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">field</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">⟩</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">@</span><span class=\"n\">algebraic_closure'.adjoin_monic</span> <span class=\"n\">ih.1</span> <span class=\"n\">ih.2</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_closure'.adjoin_monic.field</span> <span class=\"n\">ih.1</span> <span class=\"n\">ih.2</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- The `n`th step of constructing `algebraic_closure`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">step_aux</span> <span class=\"n\">K</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">step.field</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"n\">K</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">step_aux</span> <span class=\"n\">K</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"c1\">-- if this is computable it works</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">to_step_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"n\">K</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">step</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">algebraic_closure'.to_adjoin_monic</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"n\">K</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">step.field</span> <span class=\"n\">K</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- if this is computable it works</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">to_step_of_le</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"n\">K</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">step</span> <span class=\"n\">K</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.le_rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">to_step_succ</span> <span class=\"n\">K</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">algebraic_closure'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">algebraic_closure'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">algebraic_closure'.step</span> <span class=\"n\">K</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">algebraic_closure'.to_step_of_le</span> <span class=\"n\">K</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"n\">ideal.span</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">free_comm_ring.of</span> <span class=\"o\">(⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)})</span><span class=\"bp\">.</span><span class=\"n\">quotient</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.quotient.comm_ring</span> <span class=\"n\">_</span> <span class=\"c1\">-- timeout with def, fine with lemma/example</span>\n</code></pre></div>",
        "id": 264015718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638890558
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 264694491,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639395755
    }
]