[
    {
        "content": "<p>I was really surprised by the following <code>simp</code> behavior. There is a lemma in <code>ennreal</code> that reads</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>It can be improved to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sub_eq_zero_iff_le</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>(following the general rule: if there is an equivalence, don't state the implication). From what I understand of the simplifier, the second version should be strictly stronger than the first. For the first one, if there is a goal <code>a - b = 0</code>, the simplifier checks if it knows that <code>a ‚â§ b</code> and if yes it closes the goal. For the second one, if there is a goal <code>a - b = 0</code>, then it is reduced to <code>a ‚â§ b</code>. Then if this fact is known to the simplifier it will reduce to <code>true</code> and will be closed.<br>\nIt turns out I am wrong: if I remove the first lemma and add the second instead, then some proofs break. I would like to understand why, and what it means on the way we should state simp lemmas.</p>",
        "id": 148272942,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543057158
    },
    {
        "content": "<p>Having the second one as a rewrite lemma means that if <code>a - b = 0</code> appears in the statement, then it can be replaced by <code>a &lt;= b</code>. Having the first means that if simp can prove <code>a &lt;= b</code> then it can replace <code>a - b</code> in the goal with <code>0</code>. That means that things like <code>(a - b) + b = b</code> will simplify as well, where the iff version won't trigger</p>",
        "id": 148273070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543057384
    },
    {
        "content": "<p>generally speaking it is important to view a simp lemma as <code>conditions -&gt; LHS =&gt; RHS</code>, and modifications like this change the structure of the rewrite</p>",
        "id": 148273147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543057482
    },
    {
        "content": "<p>it might be that you want to rewrite <code>a - b = 0</code> to <code>a &lt;= b</code> but that's a different rule</p>",
        "id": 148273161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543057513
    },
    {
        "content": "<p>Yes, of course. I was thinking of the lemma <code>lemma foo (h : a ‚â§ b) : (a - b = 0) ‚Üî true</code>, but this is a different rewrite rule.</p>",
        "id": 148273252,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543057663
    },
    {
        "content": "<p>I've never worried too much about <code>simp</code> but I am trying to write some code using the category theory library and I want to get basic automation working on it (my co-authors have always done this for me in the past). </p>\n<p>I don't know if this is enough context, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a topological space, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a category, and after I write this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">val_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">‚Ñ±</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ±</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">‚Ñ±</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>(trying to train <code>simp</code> to change the non-canonical <code>‚Ñ±.val</code> back into the coe-to-fun version <code>‚áë‚Ñ±</code>) it still gets stuck, e.g. <code>simp</code> will not solve this:</p>\n<div class=\"codehilite\"><pre><span></span>‚Ñ± : presheaf X C,\nU : opens X\n‚ä¢ ùüô (‚Ñ±.val U) = ùüô (‚áë‚Ñ± U)\n</pre></div>\n\n\n<p>I've never tried to train <code>simp</code> before. Sorry for the hopefully basic questions.</p>",
        "id": 183541174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576496334
    },
    {
        "content": "<p>gaargh got it</p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, motive is not type correct\n</pre></div>",
        "id": 183541297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576496437
    },
    {
        "content": "<p>Can I define a new equality which is equality up to motives not being type correct?</p>",
        "id": 183541352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576496520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Is this mathlib? Or are you working on another repo?</p>",
        "id": 183541504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576496679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>dunfold coe_fn has_coe_to_fun.coe, simp\n</pre></div>\n\n\n<p>works!</p>\n<p>Johan -- It's my first day off in weeks and I'm just writing sheaves of categories on a topological space in the mundane way to teach myself about how to use categories in Lean.</p>",
        "id": 183541540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576496736
    },
    {
        "content": "<p>Sure, but I'm confused. I don't know what <code>F.val</code> means</p>",
        "id": 183541593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576496768
    },
    {
        "content": "<p>And as far as I know mathlib also doesn't have a coe2fun for presheaves</p>",
        "id": 183541604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576496782
    },
    {
        "content": "<p>In mathlib it would be <code>F.obj</code>, I guess</p>",
        "id": 183541616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576496798
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"c1\">-- ‚Ñ±</span>\n<span class=\"o\">(</span><span class=\"n\">res</span>   <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">val</span> <span class=\"n\">U</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">val</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hid</span>   <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Hcomp</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWV</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"err\">‚â´</span> <span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 183541725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576496892
    },
    {
        "content": "<p>What should I have called <code>F.val</code>? I was just making it all up.</p>",
        "id": 183541745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576496916
    },
    {
        "content": "<p>There is already a definition of <code>presheaf</code> in mathlib</p>",
        "id": 183541794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576496992
    },
    {
        "content": "<p>I know.</p>",
        "id": 183542695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576497842
    },
    {
        "content": "<p>I am teaching myself category theory by re-inventing the wheel.</p>",
        "id": 183542728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576497853
    },
    {
        "content": "<p>I am already stuck ;-) I'll start another thread.</p>",
        "id": 183542756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576497887
    },
    {
        "content": "<blockquote>\n<p>I've never worried too much about <code>simp</code> but I am trying to write some code using the category theory library and I want to get basic automation working on it (my co-authors have always done this for me in the past). </p>\n<p>I don't know if this is enough context, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a topological space, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a category, and after I write this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">val_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">‚Ñ±</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ±</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">‚Ñ±</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>(trying to train <code>simp</code> to change the non-canonical <code>‚Ñ±.val</code> back into the coe-to-fun version <code>‚áë‚Ñ±</code>) it still gets stuck, e.g. <code>simp</code> will not solve this:</p>\n</blockquote>\n<p>‚Ñ± : presheaf X C,<br>\nU : opens X<br>\n‚ä¢ ùüô (‚Ñ±.val U) = ùüô (‚áë‚Ñ± U)</p>\n<div class=\"codehilite\"><pre><span></span>I&#39;ve never tried to train `simp` before. Sorry for the hopefully basic questions.\n</pre></div>\n\n\n<p>Use <code>dsimp</code></p>",
        "id": 183563725,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576512686
    }
]