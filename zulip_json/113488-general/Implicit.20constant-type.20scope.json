[
    {
        "content": "<p>Is there a way to tell lean that every numeric constant (a'la <code>1</code> <code>42</code>) I use in &lt;some scope&gt; is actually from <code>Z</code> rather than <code>N</code> or am I stuck with <code>(0 : Z)</code>? (Coq has <code>Open Scope ZScope</code> command that lets me do this sort of thing.)</p>",
        "id": 123699670,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521029080
    },
    {
        "content": "<p>I asked this a while ago and got the response \"3 means 3:N by default and this is wired in\". Maybe this is a question for Lean 4 devs?</p>",
        "id": 123704252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521037788
    },
    {
        "content": "<p>PS as a mathematician I would say that N in general stinks (it's not even a ring) and I know many common (to mathematicians) use cases where every single numeral would be a real number by default, and it would be really lovely just to be able to write 7, 5/2, -0.26 and e*pi^2 and have them all interpreted as real numbers by default. This is what mathematicians are used to (e.g. in python, maple etc). I would be happy to jump through hoops on line 1 in order to get this functionality for the rest of the file.</p>",
        "id": 123710068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521045485
    },
    {
        "content": "<p>PS Chris Hughes implemented sin and cos and exp in Lean so we have formal definitions of e and pi (they could also be trivially defined as infinite series, e.g. pi = 4 (1 - 1/3 + 1/5 + 1/7 - 1/9 + ...), e = 1/0! + 1/1! + 1/2! + 1/3! + ...)</p>",
        "id": 123710200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521045670
    },
    {
        "content": "<p>(modulo proofs that these things converge :-/</p>",
        "id": 123710219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521045707
    },
    {
        "content": "<p>)</p>",
        "id": 123710220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521045708
    },
    {
        "content": "<p>python numbers are reals? maybe you mean the rationals</p>",
        "id": 123711262,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521046883
    },
    {
        "content": "<p>I think python's math.pi is real ;-)</p>",
        "id": 123711343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047022
    },
    {
        "content": "<p>The terrifying is that in maths there is only one 5/2, and it's the rational real complex 5/2.</p>",
        "id": 123711346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047038
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&gt;&gt;&gt; type(2.6)\n&lt;type &#39;float&#39;&gt;\n&gt;&gt;&gt;\n</pre></div>",
        "id": 123711404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047102
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&gt;&gt;&gt; type(7/2)\n&lt;class &#39;float&#39;&gt;\n&gt;&gt;&gt;\n</pre></div>\n\n\n<p>in python3</p>",
        "id": 123711507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047212
    },
    {
        "content": "<p>and in python2 it's an int ;-) I think there was a certain amount of fuss made about the change...</p>",
        "id": 123711550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047262
    },
    {
        "content": "<p>the problem with the default type being <code>rat</code> (i.e. float) is that for many cs applications, you want to recurse on the size of a set</p>",
        "id": 123711621,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521047350
    },
    {
        "content": "<p>for that reason, I think that's why <code>nat</code> is the default</p>",
        "id": 123711630,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521047372
    },
    {
        "content": "<p>fsharp uses <code>int</code> as the default value for numeric constants, if you want a <code>float</code> you need to write <code>2.</code> for example</p>",
        "id": 123711765,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521047532
    },
    {
        "content": "<p>But in mathematics a very common use case is \"here we are doing a question about vectors in R^3 (R the real numbers). So let's let v be the vector (1,2,3) and now let's multiply it by 2\" and whilst we know the CS tricks of putting in a decimal point, we don't need them there because on line 1 we just said that every number was a real number until further notice.</p>",
        "id": 123711859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047665
    },
    {
        "content": "<p>That is what mathematics undergraduate example sheets look like, so +1 to Mr Schönfinkel</p>",
        "id": 123711892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047721
    },
    {
        "content": "<p>PS whilst we both know that a float is neither a rat nor a real, I think that reals are a better approximation ;-)</p>",
        "id": 123711983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&gt;&gt;&gt; type(math.pi)\n&lt;type &#39;float&#39;&gt;\n&gt;&gt;&gt;\n</pre></div>",
        "id": 123711992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047831
    },
    {
        "content": "<p>woaaaah</p>",
        "id": 123711996,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521047835
    },
    {
        "content": "<p>math.pi can't ever be a real</p>",
        "id": 123712009,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521047855
    },
    {
        "content": "<p>in a very real sense it's an approximation like <code>22/7</code></p>",
        "id": 123712017,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521047866
    },
    {
        "content": "<p>in Lean math.pi can be a real</p>",
        "id": 123712024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047875
    },
    {
        "content": "<p>in python, at least</p>",
        "id": 123712065,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521047884
    },
    {
        "content": "<p>?</p>",
        "id": 123712072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047894
    },
    {
        "content": "<p>in python, math.pi is a rational approximation to pi with 32 bits of precision</p>",
        "id": 123712082,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521047914
    },
    {
        "content": "<p>it's a real in the sense that my 15 year old son can take its square root in python using <code>math.sqrt</code></p>",
        "id": 123712087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047928
    },
    {
        "content": "<p>whilst knowing that the square root of a rational is not rational</p>",
        "id": 123712095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047951
    },
    {
        "content": "<p>in general</p>",
        "id": 123712097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521047958
    },
    {
        "content": "<p>ah, i see what you mean. still in my brain i've always though of float as actually being <code>rat</code></p>",
        "id": 123712250,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521048135
    },
    {
        "content": "<p>if we had a constructive theory of the reals, we could compute with them!</p>",
        "id": 123712361,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521048288
    },
    {
        "content": "<p>and then maybe we could relate that in some way to the actual computer implementation of floating point numbers... and i'd be pretty happy</p>",
        "id": 123712462,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521048367
    },
    {
        "content": "<p>the map from floats to reals, I hear, stinks. Floats almost guaranteed not to be associative for example: <code>N + (-N + epsilon) != (N + -N) + epsilon</code></p>",
        "id": 123712589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521048562
    },
    {
        "content": "<p>the LHS being zero</p>",
        "id": 123712590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521048569
    },
    {
        "content": "<p>so I think this rules out being able to write down any map which commutes with addition</p>",
        "id": 123712648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521048613
    },
    {
        "content": "<p>Maybe a better idea is just to implement floats in Lean, which might well already have been done</p>",
        "id": 123712667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521048662
    },
    {
        "content": "<p>although quite who is interested in floats nowadays I don't know ;-)</p>",
        "id": 123712676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521048683
    },
    {
        "content": "<p>i know you meant that jokingly but float verification is a huge issue in computer hardware</p>",
        "id": 123712729,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521048758
    },
    {
        "content": "<p>an error in how Intel handled floating point numbers cost them $475 million in 1994</p>",
        "id": 123712746,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521048801
    },
    {
        "content": "<p>Oh I remember it :-) It was all over usenet :-)</p>",
        "id": 123712805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521048868
    },
    {
        "content": "<p>\"Ten reasons why Intel's floating point error is a problem.<br>\n1.0000000000000000034737) People doing astronomy need calculations to high accuracy<br>\n1.9999999999999999994734) ...<br>\n3.0000000000000000007567) ...</p>\n<p>etc etc</p>",
        "id": 123712837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521048959
    },
    {
        "content": "<p>Here's my favourite mental model of when to not worry about IEEE floats. When you use it for natural quantities that one needs to measure, they implicitly capture the imprecision. So when you want to model something like weight and you say that my thing weighs 1 kilogram, floats will give you some approximation to it and that should be fine considering pretty much nothing weighs <strong>exactly</strong> 1 kilogram anyway, probably even the platinum-irridium thing that is supposed to weigh exactly 1 kilogram (in our corner of the universe). It's only man-made entities where floats become a problem, because those were made from our understanding of fractions and reals and we would expect them to behave accordingly (the obvious example is balance in your bank account, you don't want floats to randomly round nor not add associatively).</p>",
        "id": 123746096,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521112361
    }
]