[
    {
        "content": "<p>I thought that typeclass inference could use information in the context to fill in parameters to instances. However, I can't get this to work.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">my_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">my_class</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">constructor</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_class</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p><code>bar</code> fails. Is there a way to solve this?</p>",
        "id": 178605349,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1571597843
    },
    {
        "content": "<p>I don't think it's solvable</p>",
        "id": 178605503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571598104
    },
    {
        "content": "<p>Is the issue that x&lt;y isn't a typeclass?</p>",
        "id": 178605518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571598122
    },
    {
        "content": "<p>Oh I see, this is the point</p>",
        "id": 178605552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571598141
    },
    {
        "content": "<p>So, you mean I should go for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">my_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">le_class</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">le_class</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">le_class</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">my_class</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">constructor</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">le_class</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_class</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>This is a little bit sad, but it works...</p>",
        "id": 178605729,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1571598463
    },
    {
        "content": "<p>Would it be possible in Lean 4 to allow for normal parameters in instances, where instance search would only be allowed to look in the context to fill these parameters, instead of going on with the search?</p>",
        "id": 178605878,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1571598704
    },
    {
        "content": "<p>That would be really nice.</p>",
        "id": 178606058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571598967
    },
    {
        "content": "<p>I half-started typing \"maybe you could make a wrapper def and make it a class\" but then I thought it would probably be so horrible to use in practice that I had better not mention it!</p>",
        "id": 178607359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571600885
    },
    {
        "content": "<p>I learned this week that something much more general is planned for Lean 4: you will be able to invoke tactics from instances using <code>auto_param</code>s, like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">.</span> <span class=\"n\">my_tac</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_class</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>I would guess something along the lines of <code>def my_tac := tactic.linarith &lt;|&gt; tactic.assumption</code> would solve most of your goals automatically, and the rest manually, provided you can stuff the proof you need into the environment somehow.</p>",
        "id": 178609338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571604280
    },
    {
        "content": "<p>(I don't think it ever occurred to me to even try this in Lean 3, but I just confirmed that it in fact does not work currently.)</p>",
        "id": 178609365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571604335
    },
    {
        "content": "<p>Where did you see that in Lean 4?</p>",
        "id": 178609412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571604368
    },
    {
        "content": "<p>I was at MSR for the past week.</p>",
        "id": 178609418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571604406
    },
    {
        "content": "<p>Did you tell Lean 4 everything you know about IMO problem solving?</p>",
        "id": 178609446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571604470
    },
    {
        "content": "<p>But this is my favorite tidbit. Also consider the possibility of coercing to a bundled morphism, with a tactic which synthesizes the proof of continuity, or whatever.</p>",
        "id": 178609488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571604489
    },
    {
        "content": "<p>Do they have tests suggesting this won't kill type class search performance?</p>",
        "id": 178609568,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571604623
    },
    {
        "content": "<blockquote>\n<p>Did you tell Lean 4 everything you know about IMO problem solving?</p>\n</blockquote>\n<p>Well, the reason this feature is only planned so far is that there is no mechanism at all to invoke tactics (<code>begin ... end</code>) yet, so it's a bit premature to communicate with Lean 4 directly</p>",
        "id": 178609571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571604628
    },
    {
        "content": "<p>Yeah I know, this (and VScode extension) is why we cannot play with Lean 4 yet.</p>",
        "id": 178609630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571604752
    },
    {
        "content": "<p>I don't think the problem has ever been about performance. Certainly tactics should be used sparingly and fail fast in such a context, but when I talked about this with leo early in lean 3 his concern was that this will make type class searches nondeterministic (so caching is not necessarily safe anymore)</p>",
        "id": 178609666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571604835
    },
    {
        "content": "<blockquote>\n<p>Do they have tests suggesting this won't kill type class search performance?</p>\n</blockquote>\n<p>Of course it will be bad if the tactic itself is expensive, but based on what I understand about the new instance search procedure, I expect the tactic will be invoked at most once per specific goal per query.</p>",
        "id": 178609731,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571604937
    },
    {
        "content": "<p>it actually might be nice for the typeclass search itself to have the conditions for applicability of the tactic already available. I guess if you want this to work using auto_param instances, you would need a dummy blanket instance like <code>instance (h : continuous f . cont_tac) : continuous f</code></p>",
        "id": 178610012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571605380
    },
    {
        "content": "<p>Here is the current plan: when typeclass resolution encounters a precondition in an instance whose head unifies with a goal, it will create a metavariable for the proof and move on as if the precondition had been proved. If typeclass inference eventually succeeds, the elaborator will call any registered tactics to instantiate those metavariables (i.e. to prove the preconditions), and will throw a (good) error message if any of these tactics fail. This plan will not handle cases where different instances are desired depending on whether or not certain preconditions are provable. Interleaving typeclass resolution and tactic invocation would add a lot of complexity and we do not intend to support it. However, we would potentially consider supporting it if there were very valuable uses of typeclasses that require it. If anyone has any such examples, now is the time to share.</p>",
        "id": 178623928,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571629877
    },
    {
        "content": "<p>I assume tactics can still call <code>apply_instance</code>?</p>",
        "id": 178624342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571630532
    },
    {
        "content": "<blockquote>\n<p>I assume tactics can still call <code>apply_instance</code>?</p>\n</blockquote>\n<p>Yes, that direction is fine.</p>",
        "id": 178624365,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571630634
    },
    {
        "content": "<p>So instances with auto_params always succeed then? A tactic that appears in an auto_param instance must handle the complete problem without failure?</p>",
        "id": 178624425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571630710
    },
    {
        "content": "<p>One example that comes to mind is Z/pZ. It would be nice if we could infer a field structure on Z/nZ if and only if n is prime</p>",
        "id": 178624610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571631083
    },
    {
        "content": "<p>This plan is effectively going to always assume that the primality check succeeds, but then the question is whether that leads to a bad proof sometimes. For example, maybe I want multiplication on Z/4Z, and the instance search does <code>has_mul Z/4Z &lt;- ring Z/4Z &lt;- field Z/4Z &lt;- defer proof that 4 is prime</code> and \"succeeds\", then it runs the primality check, fails, and says \"sorry, no multiplication found\", even though let's say the instance it would have tried right after <code>ring A &lt;- field A</code> was <code>ring Z/nZ</code> with no assumptions</p>",
        "id": 178624734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571631341
    },
    {
        "content": "<blockquote>\n<p>So instances with auto_params always succeed then? </p>\n</blockquote>\n<p>Here is another way to think about it. Typeclass resolution will ignore preconditions and <em>commit</em> to the first instance it can synthesize (ignoring preconditions). Then the elaborator will call the registered tactics to synthesize the preconditions, and fail if they cannot be synthesized.</p>\n<blockquote>\n<p>A tactic that appears in an auto_param instance must handle the complete problem without failure?</p>\n</blockquote>\n<p>This is actually a separate issue, but I would suggest that the tactics must succeed completely. The alternative is for the elaborator to return subgoals as in Coq's <code>refine</code>, but I think this leads to unmaintainable code.</p>",
        "id": 178624839,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571631525
    },
    {
        "content": "<blockquote>\n<p>This plan is effectively going to always assume that the primality check succeeds, but then the question is whether that leads to a bad proof sometimes. For example, maybe I want multiplication on Z/4Z, and the instance search does <code>has_mul Z/4Z &lt;- ring Z/4Z &lt;- field Z/4Z &lt;- defer proof that 4 is prime</code> and \"succeeds\", then it runs the primality check, fails, and says \"sorry, no multiplication found\", even though let's say the instance it would have tried right after <code>ring A &lt;- field A</code> was <code>ring Z/nZ</code> with no assumptions</p>\n</blockquote>\n<p>Thanks, this is a great example of something that will not work reliably with the current plan.</p>",
        "id": 178624869,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571631566
    },
    {
        "content": "<p>Workaround: make <code>prime</code> a class, with instances for whatever concrete primes you care about, and take <code>[prime n]</code> as an argument to instances instead of <code>(prime n . &lt;tac&gt;)</code>. The typeclass resolution will also succeed for arbitrary <code>n</code> if <code>prime n</code> is in the context. Note: you only need to use the restricted <code>[prime n]</code> as an argument to instances, and can still use <code>(prime n . &lt;tac&gt;)</code> for non-instances.</p>",
        "id": 178625397,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571632482
    },
    {
        "content": "<p>That is what we do today, or rather a slight variant in which <code>Z/pZ</code> is a newtype over <code>Z/nZ</code> with an additional argument with the proof of primality; this way the proof doesn't have to be inferred by type class inference. <code>prime p</code> has since become a class anyway, because of issues like this.</p>",
        "id": 178627759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571636641
    },
    {
        "content": "<p>But at the moment you can't provide an instance of <code>prime 2</code>, because it is not 100% a class, I guess?</p>",
        "id": 178630753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571641389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> did you also see the old discussion at <a href=\"#narrow/stream/113488-general/topic/cleaning.20iff/near/174233034\" title=\"#narrow/stream/113488-general/topic/cleaning.20iff/near/174233034\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/cleaning.20iff/near/174233034</a>?</p>",
        "id": 178632943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571644132
    },
    {
        "content": "<p>The following works on my fork of Lean4, no matter the order of the instance declarations:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"c1\">-- skipping the rest</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"mi\">2</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"mi\">3</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">Field</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">Ring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">FieldToHasDiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasDiv</span> <span class=\"n\">α</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">FieldToHasMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasMul</span> <span class=\"n\">α</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">RingToHasMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasMul</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">mkType</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">PrimeField</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Prime</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">mkType</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">NonPrimeRing</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">mkType</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">fooCP2R</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">mkType</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">*</span> <span class=\"n\">α</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">fooCP2F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">mkType</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">/</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">/</span> <span class=\"n\">α</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">fooCN2R</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">mkType</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">*</span> <span class=\"n\">α</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">fooAN2R</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">mkType</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">*</span> <span class=\"n\">α</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">fooAP2R</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nPrime</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">mkType</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">*</span> <span class=\"n\">α</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">fooAP2F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nPrime</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">mkType</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">/</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">/</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>Also, it should already work on Lean4::master and presumably Lean3 if you make <code>Prime</code> an explicit class:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">Prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">spec</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 178655959,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571665537
    },
    {
        "content": "<blockquote>\n<p>Workaround: make <code>prime</code> a class ...</p>\n</blockquote>\n<p>I called this a \"workaround\" last night but I now think it is actually a good solution. Suppose you tried to write <code>(x y : Z/&lt;huge concrete number&gt;Z)</code> and then wrote <code>x / y</code>. Would you really want <code>/</code> to do primality testing behind the scenes?</p>",
        "id": 178656549,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571665920
    },
    {
        "content": "<p>Primality testing is much easier than prime factorization, but it's still a valid point.</p>",
        "id": 178657234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571666337
    },
    {
        "content": "<p>Doesn't it cache instance searches?</p>",
        "id": 178658038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571666802
    },
    {
        "content": "<blockquote>\n<p>Primality testing is much easier than prime factorization, but it's still a valid point.</p>\n</blockquote>\n<p>(updated)</p>",
        "id": 178658701,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571667204
    },
    {
        "content": "<blockquote>\n<p>Doesn't it cache instance searches?</p>\n</blockquote>\n<p>We don't know yet when and whether to cache typeclass resolution results in Lean4. We may not need to cache at all, since the resolution itself will be so much faster than in Lean3, but we'll see. Either way, it is bad style to depend on caching policies for reasonable performance when there exists a simple, reliable solution: <code>instance : Prime &lt;huge concrete number&gt; := by primality_test</code>.</p>",
        "id": 178659273,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571667548
    },
    {
        "content": "<p>Daniel, among all those wonders of type class resolution, could you also try to improve error reporting? When Lean 3 fails to infer an instance then most of the time we don't even know which instance it was trying to infer.</p>",
        "id": 178663324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571670000
    },
    {
        "content": "<blockquote>\n<p>Daniel, among all those wonders of type class resolution, could you also try to improve error reporting? When Lean 3 fails to infer an instance then most of the time we don't even know which instance it was trying to infer.</p>\n</blockquote>\n<p>Thanks for pointing this out. There is low-hanging fruit in improving these messages, but reliable debugging probably requires more than just better error messages, e.g. much better tracing. We still don't have a plan for tracing in general but we are actively discussing it.</p>",
        "id": 178664411,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571670594
    },
    {
        "content": "<p>By low-hanging fruit, I mean improvements that can be made relatively locally, independent of any major refactor such as tracing. And yes, we will make those improvements no matter what we decide about tracing.</p>",
        "id": 178665054,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1571670906
    }
]