[
    {
        "content": "<p>While refactoring some code I managed to segfault Lean. I've mostly reduced the issue.</p>\n<p><a href=\"https://gist.github.com/a3c2de85461ed212c174b62565346d1b\">https://gist.github.com/a3c2de85461ed212c174b62565346d1b</a></p>",
        "id": 213376568,
        "sender_full_name": "SnowFox",
        "timestamp": 1602732152
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mode</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">type</span> <span class=\"bp\">=</span> <span class=\"n\">T.b</span> <span class=\"k\">then</span> <span class=\"n\">nat</span> <span class=\"k\">else</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">q</span> <span class=\"o\">{</span><span class=\"n\">rtype</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">rtype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">opt_param</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">rtype</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n  <span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">(⟨</span><span class=\"n\">tt</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">T.a</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 213377359,
        "sender_full_name": "SnowFox",
        "timestamp": 1602733155
    },
    {
        "content": "<p>I suspect it might be the same issue as <a href=\"https://github.com/leanprover-community/lean/issues/52\">lean#52</a> but I haven't checked with <code>lldb</code>.</p>",
        "id": 213379685,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602736622
    },
    {
        "content": "<p>The reason for my hunch is that if I open your code with the web editor (with the convenient new button that shows up when I hover over your snippet), I get the same message:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>equation compiler failed (use 'set_option trace.eqn_compiler.elim_match true' for additional details)\nnested exception message:\ncases tactic failed, it is not applicable to the given hypothesis\n</code></pre></div>",
        "id": 213379745,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602736714
    },
    {
        "content": "<p>Plausible. Speaking of the playground.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">trace.eqn_compiler.elim_match</span> <span class=\"n\">true'</span> <span class=\"n\">for</span> <span class=\"n\">additional</span> <span class=\"n\">details</span><span class=\"o\">)</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">cases</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">applicable</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">given</span> <span class=\"n\">hypothesis</span>\n</code></pre></div>",
        "id": 213379748,
        "sender_full_name": "SnowFox",
        "timestamp": 1602736722
    },
    {
        "content": "<p>^^</p>",
        "id": 213379753,
        "sender_full_name": "SnowFox",
        "timestamp": 1602736730
    },
    {
        "content": "<p>I have run this previously; forgot to mention it!</p>",
        "id": 213379826,
        "sender_full_name": "SnowFox",
        "timestamp": 1602736806
    },
    {
        "content": "<p>I guess I should add my code and trace to that thread then?</p>",
        "id": 213379866,
        "sender_full_name": "SnowFox",
        "timestamp": 1602736913
    },
    {
        "content": "<p>Or a new issue and reference it as plausibly related?</p>",
        "id": 213379911,
        "sender_full_name": "SnowFox",
        "timestamp": 1602736948
    },
    {
        "content": "<p>Give me a second, I'll check with <code>lldb</code>.</p>",
        "id": 213379934,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602736994
    },
    {
        "content": "<p>Okay.</p>",
        "id": 213379940,
        "sender_full_name": "SnowFox",
        "timestamp": 1602737009
    },
    {
        "content": "<p>Yep, it's crashing in the same function.</p>",
        "id": 213380023,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602737125
    },
    {
        "content": "<p>Since <span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> found the issue first, maybe he has an idea for a workaround?</p>",
        "id": 213380093,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602737195
    },
    {
        "content": "<p>Oh I already have my workaround. <code>@q ff ..</code> for that example.</p>",
        "id": 213380879,
        "sender_full_name": "SnowFox",
        "timestamp": 1602738416
    },
    {
        "content": "<p>In my real code that's <code>@arith integer ..</code>, I found this because I'm using patterns to abstract away noise / focus on the relevant details.</p>",
        "id": 213380981,
        "sender_full_name": "SnowFox",
        "timestamp": 1602738523
    }
]