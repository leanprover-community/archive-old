[
    {
        "content": "<p>Dear expert tactic writers, a couple of years ago, I wrote the first version of the <code>choose</code> tactic. It was a very simple wrapper around <code>classical.some</code> and <code>classical.some_spec</code>, but already very useful for mathematicians. Very quickly, Johannes made it much more general so that it's more useful but I probably lost hope to understand the code. Now I would need a new version and I don't know what to do (I could build an independent stupid version but it would probably be better to integrate it as an option to <code>choose</code>). The situation that came up several times recently is this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span><span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bad_chooser</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">choose_aux</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">inhabit</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">default</span> <span class=\"n\">Y</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">chooser</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">choose_aux</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">chooser_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">chooser</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">choose_aux</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>The issue with <code>bad_chooser</code> is that the dependent function type is often less convenient to use as the version offered by the last two declarations. And <code>choose f hf using h</code> currently gives the bad version.</p>",
        "id": 206680732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597229861
    },
    {
        "content": "<p>Let me ping <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> since he is the latest one to have stumbled on this.</p>",
        "id": 206680821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597229933
    },
    {
        "content": "<p>Actually the above version is already not general enough, I should have written:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choose_aux</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">inhabit</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">default</span> <span class=\"n\">Y</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">noncomputable</span>\n<span class=\"n\">def</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">chooser</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choose_aux</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">chooser_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">chooser</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choose_aux</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206682970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597231743
    },
    {
        "content": "<p>Anatole, while waiting for a potential improved version of <code>choose</code>, you can put those functions and lemmas somewhere and then in your proof, use:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">sub_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"err\">←</span> <span class=\"n\">sub_zero</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">exists_ratio_has_deriv_at_eq_ratio_slope&#39;</span> <span class=\"n\">g</span> <span class=\"n\">g&#39;</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hgg&#39;</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"n\">sub</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hff&#39;</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"n\">sub</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"n\">hga</span> <span class=\"n\">hfa</span>\n      <span class=\"o\">(</span><span class=\"n\">tendsto_nhds_within_of_tendsto_nhds</span> <span class=\"o\">(</span><span class=\"n\">hgg&#39;</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">tendsto_nhds_within_of_tendsto_nhds</span> <span class=\"o\">(</span><span class=\"n\">hff&#39;</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">exists_prop</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">chooser</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">chooser_spec</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 206683100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597231852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> proposed another feature for <code>choose</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/3699\">#3699</a>, if he does that then maybe this could happen at the same time.</p>",
        "id": 206683255,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597232026
    },
    {
        "content": "<p>Maybe it would be better to treat this as two operations, <code>choose</code> with the current behavior followed by <code>extend</code> which extends a partial function to a total one</p>",
        "id": 206683585,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597232361
    },
    {
        "content": "<p>I agree with both Rob and Reid. I'll experiment with Reid's version, but I need to disappear for one day and a half.</p>",
        "id": 206685191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597233821
    },
    {
        "content": "<p>Reid, did you mean some version of:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"k\">else</span> <span class=\"n\">default</span> <span class=\"n\">Y</span>\n\n<span class=\"n\">def</span> <span class=\"n\">chooser&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">chooser_spec&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">chooser&#39;</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">chooser&#39;</span><span class=\"o\">,</span> <span class=\"n\">extend</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>and now I really leave (I'll read Zulip but won't have Lean for one day and a half).</p>",
        "id": 206688439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597236187
    },
    {
        "content": "<p>any ideas on syntax? I think I know how this can be implemented, but the new strategy requires <code>Y</code> to be inhabited/has_zero/nonempty</p>",
        "id": 206688764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597236449
    },
    {
        "content": "<p>For example <code>choose! f hf using h</code> will do the same thing as <code>choose</code> but it will remove all propositional arguments from <code>f</code> using a default value that it magics up somehow</p>",
        "id": 206689081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597236662
    },
    {
        "content": "<p>the under the hood implementation can be as reid says, but I think it would be nicer from the user point of view to be able to do both parts in one tactic call</p>",
        "id": 206689231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597236761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm imagining something along the following lines--not sure how feasible this is to implement:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- α β : Type</span>\n<span class=\"c1\">-- y : β</span>\n<span class=\"c1\">-- P : α → Prop</span>\n<span class=\"c1\">-- Q : β → Prop</span>\n<span class=\"c1\">-- f : Π (x : α), P x → β</span>\n<span class=\"c1\">-- hf : ∀ (x : α) (H : P x), Q (f x H)</span>\n\n<span class=\"n\">extend</span> <span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"kn\">using</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"n\">hf&#39;</span><span class=\"o\">],</span>\n\n<span class=\"c1\">-- f : α → β</span>\n<span class=\"c1\">-- hf : ∀ (x : α), P x → Q (f x)</span>\n<span class=\"c1\">-- hf&#39; : ∀ (x : α), (¬ P x) → f x = y</span>\n</code></pre></div>",
        "id": 206690493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597237487
    },
    {
        "content": "<p>how would you present the negative case if <code>f</code> had several propositional arguments (which I assume are all getting deleted)?</p>",
        "id": 206690762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597237612
    },
    {
        "content": "<p>also, <code>y</code> could be a function</p>",
        "id": 206690833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597237660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/non.20dependent.20chooser/near/206683100\">said</a>:</p>\n<blockquote>\n<p>Anatole, while waiting for a potential improved version of <code>choose</code>, you can put those functions and lemmas somewhere and then in your proof, use [...]</p>\n</blockquote>\n<p>I know Patrick can't answer now, but what would be a good place to put this into the library ?</p>",
        "id": 206693044,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597238882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/non.20dependent.20chooser/near/206689081\">said</a>:</p>\n<blockquote>\n<p>For example <code>choose! f hf using h</code> will do the same thing as <code>choose</code> but it will remove all propositional arguments from <code>f</code> using a default value that it magics up somehow. the under the hood implementation can be as reid says, but I think it would be nicer from the user point of view to be able to do both parts in one tactic call</p>\n</blockquote>\n<p>This all sounds perfect to me. My initial reaction to <code>choose!</code> was: no the exclamation mark means \"try harder\", but I managed to convinced myself that eliminating propositional arguments was trying harder to make a (non-dependent) function.</p>",
        "id": 206869273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597351669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113488-general/topic/non.20dependent.20chooser/near/206693044\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Anatole, while waiting for a potential improved version of <code>choose</code>, you can put those functions and lemmas somewhere and then in your proof, use [...]</p>\n</blockquote>\n<p>I know Patrick can't answer now, but what would be a good place to put this into the library ?</p>\n</blockquote>\n<p>It could be in <code>logic.function.basic</code> but if Mario says he can merge it into the <code>choose</code> tactic soon then he will handle that. In any case I think we need the definition and lemma outside of the tactic, since we can want to use it in term mode definitions.</p>",
        "id": 206869660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597351847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you tell whether you intend to work on this improvement to <code>choose</code> in the near future? We need to decide whether <a href=\"https://github.com/leanprover-community/mathlib/issues/3740\">#3740</a> is waiting for this.</p>",
        "id": 207028251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597508450
    },
    {
        "content": "<p>Sure, I will look into it</p>",
        "id": 207028317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597508538
    },
    {
        "content": "<p>Oh yeah I completely forgot to make a PR for Patrick's lemmas, sorry :(</p>",
        "id": 207028328,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597508577
    },
    {
        "content": "<p>Mario doesn't need us to prove those lemmas, this is negligible compared to the tactic side.</p>",
        "id": 207028378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597508644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/3806\">#3806</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207037903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597523292
    },
    {
        "content": "<p>I tried to use the new choose to streamline the proof of Baire theorem, and it seems to me that this use case is not covered by the new version. The issue is that the type might be empty, but in the choosing process there is a universal quantification over this type, so if the type is empty everything becomes trivial. Here is a mwe:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zou</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">choose</span> <span class=\"n\">F</span> <span class=\"n\">hF</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">hF</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I would like to be able to <code>choose! F hF using h</code>, but <code>α</code> might be empty.</p>",
        "id": 207126587,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597659412
    },
    {
        "content": "<p>Do you mean you want a special case where the target type appears in the variables as well?</p>",
        "id": 207128842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597661335
    },
    {
        "content": "<p>Yes, when a target type appears in a forall, then the forall variable could be used as a default value (or to inhabit the type). In my mwe, I would like the proof to be</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">F</span> <span class=\"n\">hF</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">hF</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 207134279,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597665597
    },
    {
        "content": "<p>coming right up</p>",
        "id": 207154525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597676591
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3842\">#3842</a></p>",
        "id": 207178565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597688355
    }
]