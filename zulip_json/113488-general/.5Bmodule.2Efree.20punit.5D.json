[
    {
        "content": "<p>As observed by <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> , the <code>module.free</code> instance for the zero module is not found by type class search. It should come from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.free.of_subsingleton\">docs#module.free.of_subsingleton</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/punit.subsingleton\">docs#punit.subsingleton</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">free_zero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module.free.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">free_zero'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module.free.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span> <span class=\"n\">module.free.of_subsingleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span>  <span class=\"c1\">--works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 273430558,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646003388
    },
    {
        "content": "<p>This is presumably a universe issue?</p>",
        "id": 273432122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646005527
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">module.free.of_subsingleton.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">module.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">N</span><span class=\"o\">],</span> <span class=\"n\">module.free.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>what does the <code>u_3</code> do?</p>",
        "id": 273453694,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646033305
    },
    {
        "content": "<p>Sometimes lean gets universes wrong like that -- probably the declaration needs to be rewritten with explicit sensible universe choices</p>",
        "id": 273454008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646033525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20universe.20question.3A.20max.20u.20v.20.3D.20max.20v.20u.3F/near/273255520\">said</a>:</p>\n<blockquote>\n<p>It's also possible one of the lemmas has spurious universe arguments, there is a linter to check for this so try <code>#lint</code></p>\n</blockquote>",
        "id": 273454129,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646033699
    },
    {
        "content": "<p>the <code>pempty</code> needs to be un-polymorphed</p>",
        "id": 273454283,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646033881
    },
    {
        "content": "<p>in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module.free</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_basis</span> <span class=\"o\">(</span><span class=\"n\">basis.empty</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">pempty</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273454341,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646033912
    },
    {
        "content": "<p>should I set it to the universe of <code>R</code> or the universe of <code>N</code>, or doesn't it matter?</p>",
        "id": 273454374,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646033969
    },
    {
        "content": "<p>in both cases, the instance is found</p>",
        "id": 273454388,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646033985
    },
    {
        "content": "<p>or simply use <code>empty</code>?</p>",
        "id": 273454599,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646034213
    },
    {
        "content": "<p><code>module.free</code> is a <code>Prop</code>, right? So it really doesn't matter at all. Using <code>empty</code> is the cleanest solution, I would think.</p>",
        "id": 273455357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646035005
    },
    {
        "content": "<p>yes, it is<br>\nthanks!</p>",
        "id": 273456337,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646035727
    },
    {
        "content": "<p>So it seems like the linter somehow failed to catch this, right?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/f3a04edad2f7569b2ec277c64d41fca364441525/src/linear_algebra/free_module/basic.lean#L129\">https://github.com/leanprover-community/mathlib/blob/f3a04edad2f7569b2ec277c64d41fca364441525/src/linear_algebra/free_module/basic.lean#L129</a></p>",
        "id": 273466997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646042424
    },
    {
        "content": "<p>I don't think we have a linter that checks for unused universes in the type of a declaration. There was definitely talk about it, and I think it's not a good idea to check for it in defs, but we should check it in instances and lemmas.</p>",
        "id": 273470945,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1646044629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/.5Bmodule.2Efree.20punit.5D/near/273455357\">said</a>:</p>\n<blockquote>\n<p><code>module.free</code> is a <code>Prop</code>, right? So it really doesn't matter at all. Using <code>empty</code> is the cleanest solution, I would think.</p>\n</blockquote>\n<p>Does this risk introducing a <code>1</code> into the universe parameters?</p>",
        "id": 273512119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646064281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/.5Bmodule.2Efree.20punit.5D/near/273470945\">said</a>:</p>\n<blockquote>\n<p>I don't think we have a linter that checks for unused universes in the type of a declaration. There was definitely talk about it, and I think it's not a good idea to check for it in defs, but we should check it in instances and lemmas.</p>\n</blockquote>\n<p>We could require the doc string for the def to make an explicit remark about universes in order to silence the linter</p>",
        "id": 273513664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646064884
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 273539655,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646075902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/.5Bmodule.2Efree.20punit.5D/near/273470945\">said</a>:</p>\n<blockquote>\n<p>I don't think we have a linter that checks for unused universes in the type of a declaration. There was definitely talk about it, and I think it's not a good idea to check for it in defs, but we should check it in instances and lemmas.</p>\n</blockquote>\n<p>I think we should check for it in defs too, but with the understanding that it is not unreasonable to have unused universes in defs and allowing the lint adds documentation indicating that it is deliberate</p>",
        "id": 273542934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646077348
    },
    {
        "content": "<p>Yeah, I'd guess this would be rare and worthy of documentation when it does arise anyways</p>",
        "id": 273551352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646081188
    },
    {
        "content": "<p>Off-hand the only kind of example I can think of is \"is <code>equiv</code> to something in <code>Type v</code>\"</p>",
        "id": 273551421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646081241
    }
]