[
    {
        "content": "<p>Is there a way to tell <code>refine_struct</code> to use opt_params? In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">my_struct</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">qux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zbg</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">some</span> <span class=\"o\">:</span> <span class=\"n\">my_struct</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'd like to have only <code>bar</code> to fill by hand, but it is also asking for <code>qux</code> and <code>zbg</code>.</p>",
        "id": 233148390,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617610588
    },
    {
        "content": "<p>I think it is possible, but not easy. It looks like <code>refine_struct</code> reimplements a decent amount of the elaborator's implementation of struct literals</p>",
        "id": 233149083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617611216
    },
    {
        "content": "<p>you would basically have to look up whether any of the fields are opt_params or auto_params and apply the appropriate tactic</p>",
        "id": 233149123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617611255
    },
    {
        "content": "<p>It turns out that in my application just adding a field <code>qux := _</code> is enough to do the trick (it is then filled by the command <code>intros; ext; try { refl };</code> which is supposed to fill all the remaining fields, and picks somehow the opt_param).</p>",
        "id": 233150306,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617612282
    },
    {
        "content": "<p>Is there a reason why </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">some</span> <span class=\"o\">:</span> <span class=\"n\">my_struct</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is not satisfactory? This version does use <code>opt_params</code>.</p>",
        "id": 233181388,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1617634233
    },
    {
        "content": "<p>It really depends on the situation. Sometimes <code>refine</code> works but <code>refine_struct</code> doesn't, sometimes the opposite, and I really can't say why (the status of metavariables at the end of both constructs is not the same, so it depends on what the rest of the proof does). Anyway, things are progressing steadily (see <a href=\"https://github.com/leanprover-community/mathlib/tree/nsmul_data\">branch#nsmul_data</a>) -- the only thing I have not been able to fix properly for now is in <code>ordinal_notation</code>, but I'm far from being done.</p>",
        "id": 233196476,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617640563
    },
    {
        "content": "<p>For instance, I've just replaced</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">linear_map.ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">{</span><span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which was failing with the message <code>tactic failed, result contains meta-variables</code>, by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">nspow</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n<span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">linear_map.ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">{</span><span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 233196963,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617640825
    },
    {
        "content": "<p>Oof, that sounds pretty fragile.</p>",
        "id": 233210129,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1617647184
    },
    {
        "content": "<p>Yes. The refactor would be much easier if <code>refine</code> and <code>refine_struct</code> had a better behavior with respect to metavariables and autoparams, but since I have absolutely no clue at how they work, I just go the stupid way of fixing everything along the way (which is not so bad).</p>",
        "id": 233217057,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617650557
    },
    {
        "content": "<p>Just to show the kind of things one gets with this refactor. In the file <code>monoid_algebra.lean</code>, there are the lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">While</span> <span class=\"n\">we</span> <span class=\"n\">were</span> <span class=\"n\">not</span> <span class=\"n\">able</span> <span class=\"n\">to</span> <span class=\"n\">define</span> <span class=\"bp\">`</span><span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">`</span> <span class=\"n\">due</span>\n<span class=\"n\">to</span> <span class=\"n\">definitional</span> <span class=\"n\">inconveniences</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">can</span> <span class=\"n\">still</span> <span class=\"k\">show</span> <span class=\"n\">the</span> <span class=\"n\">types</span> <span class=\"n\">are</span> <span class=\"n\">isomorphic.</span>\n</code></pre></div>\n<p>So I just checked, and with the new definitions the definitional inconvenience is gone:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">it_works</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(And I haven't done anything special about it in this file, it's just that things are better definitionally now).</p>",
        "id": 233218010,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617651035
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a></p>",
        "id": 233467732,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617793111
    },
    {
        "content": "<p>I'd need some help on this from someone who knows its category theory library, because a proof becomes too slow after the change. The reason is probably that there are now more fields in rings, so it slows down some proofs, and a proof that was on the edge just becomes too slow. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , maybe?</p>",
        "id": 233481281,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617800039
    },
    {
        "content": "<p>Looking now.</p>",
        "id": 233481438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617800094
    },
    {
        "content": "<p>Okay, I've fixed this --- but only by dividing the two failing <code>def</code>s up into their constituent parts, not by actually understanding and fixing the slow-down.</p>",
        "id": 233489895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617803183
    },
    {
        "content": "<p>While I'm completely in favour of this PR, I hope we're not suffering from Stockholm syndrome regarding \"forgetful inheritance\" here: it is a disappointing failure of Lean that we have to do this in mathlib, and we should hope that some magical future theorem prover makes this design issue irrelevant.</p>",
        "id": 233491311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617803690
    },
    {
        "content": "<p>I completely agree with that: ideally, we could register subsingletons instances so that the kernel considers them as defeq from this point on.</p>",
        "id": 233491965,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617803896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/refine_struct.20and.20opt_param/near/233489895\">said</a>:</p>\n<blockquote>\n<p>Okay, I've fixed this --- but only by dividing the two failing <code>def</code>s up into their constituent parts, not by actually understanding and fixing the slow-down.</p>\n</blockquote>\n<p>Thanks! I just checked, and the original proof is also very slow on master, so the PR is not changing so much here.</p>",
        "id": 233492320,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617804022
    },
    {
        "content": "<p>Is there any way to contruct a pexpr for a struct literal (ie, an instance of that macro) from within a tactic?</p>",
        "id": 289072406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657415136
    },
    {
        "content": "<p>Eg something such that <code>mk_literal [`foo, `bar] = ``({ foo := _, bar := _ }) </code></p>",
        "id": 289072484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657415264
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pexpr.mk_structure_instance\">docs#pexpr.mk_structure_instance</a></p>",
        "id": 289072703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657415601
    }
]