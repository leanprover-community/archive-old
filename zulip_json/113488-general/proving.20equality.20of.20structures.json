[
    {
        "content": "<p>Is there a tactic or something that's like <code>apply subtype.eq</code>, but works for a general structure? Or do I have to write down the equality lemma manually?</p>",
        "id": 126644596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526476731
    },
    {
        "content": "<p><code>congr</code>, which doesn't always work</p>",
        "id": 126644607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526476748
    },
    {
        "content": "<p>I thought about <code>congr</code>, but my goal is literally <code>e1 = e2</code> and <code>congr</code> made no progress. Somehow I need to eta expand each side first, and then apply <code>congr</code>.</p>",
        "id": 126644746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526476924
    },
    {
        "content": "<p>From the changelog:</p>",
        "id": 126646065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526478832
    },
    {
        "content": "<p>\"simp now reduces equalities c a_1 ... a_n = c b_1 ... b_n to a_1 = b_1 /\\ ... /\\ a_n = b_n if c is a constructor. This feature can be disabled using simp {constructor_eq := ff}\"</p>",
        "id": 126646068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526478835
    },
    {
        "content": "<p>of course, simp might do other things as well...</p>",
        "id": 126646116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526478862
    },
    {
        "content": "<p>hm I asked a similar question a while ago, but it was about a lemma not a tactic: <a href=\"#narrow/stream/113488-general/subject/structure.20equality.20from.20parts/near/124033713\" title=\"#narrow/stream/113488-general/subject/structure.20equality.20from.20parts/near/124033713\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/structure.20equality.20from.20parts/near/124033713</a></p>",
        "id": 126654166,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1526489942
    },
    {
        "content": "<p>Yes, same goal. I managed to write my lemma by copying <code>subtype.eq</code> very carefully.</p>",
        "id": 126654471,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490314
    },
    {
        "content": "<p>Someone (yikes, I've forgotten who, and my copy doesn't record the name) wrote for me a tactic called <code>congr_struct</code> that sometimes is useful for proving equalities of structures. In the presence of fields with dependencies on earlier fields it create new <code>heq</code> goals, which isn't always what you want.</p>",
        "id": 126674624,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1526519305
    },
    {
        "content": "<p>There's a copy at &lt;<a href=\"https://github.com/semorrison/lean-tidy/blob/master/src/tidy/congr_struct.lean\" target=\"_blank\" title=\"https://github.com/semorrison/lean-tidy/blob/master/src/tidy/congr_struct.lean\">https://github.com/semorrison/lean-tidy/blob/master/src/tidy/congr_struct.lean</a>&gt; (you can just remove the import if you want to steal a copy).</p>",
        "id": 126674631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1526519337
    },
    {
        "content": "<p>If anyone wants it I can PR it into mathlib. I'm not actually using it anywhere myself at the moment.</p>",
        "id": 126674640,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1526519357
    },
    {
        "content": "<p>I end up writing my own lemmas, e.g. of the form</p>\n<div class=\"codehilite\"><pre><span></span>structure NaturalTransformation (F G : C ↝ D) : Type (max (u+1) v) :=\n  (components: Π X : C, (F +&gt; X) ⟶ (G +&gt; X))\n  (naturality: ∀ {X Y : C} (f : X ⟶ Y), (F &amp;&gt; f) ≫ (components Y) = (components X) ≫ (G &amp;&gt; f))\n\ninfixr ` ⟹ `:50  := NaturalTransformation\n\nlemma NaturalTransformations_componentwise_equal\n  (α β : F ⟹ G)\n  (w : ∀ X : C, α.components X = β.components X) : α = β :=\n  begin\n    induction α with α_components α_naturality,\n    induction β with β_components β_naturality,\n    have hc : α_components = β_components := funext w,\n    subst hc\n  end\n</pre></div>",
        "id": 126674691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1526519418
    },
    {
        "content": "<p>(and I have lots of these, unfortunately)</p>",
        "id": 126674692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1526519428
    },
    {
        "content": "<p>Mathlib is calling these lemmas \"extensionality\" theorems, for use with Simon's <code>ext</code> tactic. The fastest way to prove them is to case on both structures, then apply <code>congr</code> and other extensionality theorems to the resulting goals</p>",
        "id": 126676097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526522528
    },
    {
        "content": "<p>I don't have the necessary stuff to test your example, but I think it is possible to have a proof that looks something like <code>by cases α; cases β; congr; exact funext w</code></p>",
        "id": 126676208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526522836
    },
    {
        "content": "<p>Yes, that proof works too.</p>",
        "id": 126679010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1526529060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks for refactoring my unbundled presheaves of types code; whilst you no longer reduce the length of what I write by a factor of 10, you still input some new ideas which I can learn from. Here's something I picked up. I am interested in proving equalities of structures, i.e. writing extensionality lemmas (I'm adding to an old thread, I thought it might be a way of making things more coherent). I had thought that Lean generated lemmas which did these things for me. But I learnt from your refactor that Lean does not always generate the best ones. Here's a concrete example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"c1\">-- this is a subsingleton but not a prop</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fs</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_eq</span><span class=\"o\">,</span> <span class=\"c1\">-- auto-generated lemmas FTW</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- but hf is not needed!</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">ext_better1</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ft</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">t</span><span class=\"o\">):</span>\n<span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">s</span> <span class=\"n\">fs</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">t</span> <span class=\"n\">ft</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hs</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">ext_better2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"c1\">-- what does this even do?</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Lean basically generated the first proof automatically. But the heq can be avoided. There are two ways of avoiding it, both of which I demonstrate here. The first is a direct application of <code>congr</code>. The second does cases on an equality! What is going on there? I don't understand what happens. Hypothesis <code>hs</code> changes from</p>\n<div class=\"codehilite\"><pre><span></span>hs : {s := x_s, fs := x_fs}.s = {s := y_s, fs := y_fs}.s\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span>hs : {s := x_s, fs := x_fs}.s = {s := x_s, fs := y_fs}.s\n</pre></div>\n\n\n<p>One of those structures doesn't even look type correct to to me. Oh -- wait -- the <em>type</em> of <code>y_fs</code> changes! So it is type correct! The cases is doing something magic. What is going on?</p>\n<p>Side question: which ext lemma is the best one to prove? The one with the structures or the one with the components? Or should one prove both?</p>",
        "id": 162712910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554574288
    },
    {
        "content": "<p>I think <code>better2</code> is the one that you want to have.</p>",
        "id": 162713077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554574503
    },
    {
        "content": "<p>Cases on an equality is one of the most useful things you can do in the presence of dependencies. The effect is the same as <code>subst</code>: The variable (in this case <code>y_s</code>) is removed from the context and all occurrences are replaced with <code>x_s</code>. This usually means you can make progress, because now <code>x_fs</code> and <code>y_fs</code> have the same type, so you can reasonably state and prove an equality about them</p>",
        "id": 162717612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554580344
    },
    {
        "content": "<p>What actually happened is that <code>cases</code> first reverts all dependencies, like <code>y_fs</code>, and then rewrites the goal (which is a dependent pi making reference to <code>y_s</code>) to change <code>y_s</code> to <code>x_s</code>. Then the type of <code>y_fs</code> changes at the same time as the goal changes, so it stays type correct</p>",
        "id": 162717714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554580473
    }
]