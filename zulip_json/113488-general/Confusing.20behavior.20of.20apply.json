[
    {
        "content": "<p>I am doing the Natural Naumber Game, specifically (this)[https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=8&amp;level=3] exercise. </p>\n<p>So far, I have written the following into the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ_eq_succ_of_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">succ_inj</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I expected to have <code>a = b</code> after applying <code>succ_inj</code>, but instead I have this now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This looks confusing to me because the definition of <code>succ_inj</code> goes the other way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">succ_inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>What is happening?</p>",
        "id": 322768274,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1674327470
    },
    {
        "content": "<p>What lean is doing is logically correct. You are being asked to prove P-&gt;Q. Your question is \"I used the fact that Q-&gt;P and I expected it to work\". Hopefully looking at it this way will indicate the error of logic that you have made.</p>",
        "id": 322769276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674328085
    },
    {
        "content": "<p>I see many beginners confused by the <code>apply</code> tactic. Maybe my <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_C/tactics/apply.html\">documentation of the apply tactic</a> in the notes for the course I'm currently teaching will help you understand your error.</p>",
        "id": 322769606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674328316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Confusing.20behavior.20of.20apply/near/322769276\">said</a>:</p>\n<blockquote>\n<p>What lean is doing is logically correct. You are being asked to prove P-&gt;Q. Your question is \"I used the fact that Q-&gt;P and I expected it to work\". Hopefully looking at it this way will indicate the error of logic that you have made.</p>\n</blockquote>\n<p>Is there a way to apply <code>succ</code> on both sides of <code>g</code>? I tried <code>apply succ g</code> but that doesn't seem to work.</p>",
        "id": 322769920,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1674328516
    },
    {
        "content": "<p>Can you explain why this is a logically correct step?</p>",
        "id": 322770319,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674328776
    },
    {
        "content": "<p>Again I'll direct you to the documentation of <code>apply</code> for the explanation of why this doesn't work. <code>apply</code> only does one thing, even though users seem to want it to do so many other things. In Lean of 2023 there is a way to apply <code>succ</code> to both sides of an equality in a hypothesis, with the <code>apply_fun</code> tactic, but I don't remember whether that was implemented before or after NNG was written. But the reason I don't talk about it in NNG is because you don't need it. You are focussed on <code>apply</code> but this is a red herring. You've got the wrong tactic.</p>",
        "id": 322770333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674328788
    },
    {
        "content": "<p>This did the trick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 322771322,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1674329293
    },
    {
        "content": "<p><code>simp</code> just applies the <code>rw</code> tactic cleverly. Can you prove the goal without using <code>simp</code> but only using <code>rw</code>?</p>",
        "id": 322771389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674329340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Confusing.20behavior.20of.20apply/near/322771389\">said</a>:</p>\n<blockquote>\n<p><code>simp</code> just applies the <code>rw</code> tactic cleverly. Can you prove the goal without using <code>simp</code> but only using <code>rw</code>?</p>\n</blockquote>\n<p>I tried both <code>rw succ g</code> and <code>rw succ_inj</code> but neither worked, so I gave up</p>",
        "id": 322771525,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1674329426
    },
    {
        "content": "<p>I think you should review how <code>rw</code> works as well. Take a look at my documentation for <code>rw</code> in my course and then as homework figure out why neither of the things you suggest will work.</p>",
        "id": 322771885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674329672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Confusing.20behavior.20of.20apply/near/322771885\">said</a>:</p>\n<blockquote>\n<p>I think you should review how <code>rw</code> works as well. Take a look at my documentation for <code>rw</code> in my course and then as homework figure out why neither of the things you suggest will work.</p>\n</blockquote>\n<p>Ok, I think I got it with the help of ChatGPT,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>It was so obvious to use <code>a = b</code>. I can't believe I didn't notice that earlier. I think I got a better understanding on why the other attempts didn't work, as <code>rw</code> is only for equalities or iffs.</p>",
        "id": 322782361,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1674337934
    },
    {
        "content": "<p>I would expect most of the things GPT says on this topic are misinformation. Maybe you are just lucky.</p>",
        "id": 322824206,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1674375396
    },
    {
        "content": "<p>You mean you thought it's not familiar with Lean? ChatGPT is definitely a programmers' major productivity tool by now for many mainatream languages (python, C, Javascript etc.).</p>",
        "id": 322824487,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674375621
    },
    {
        "content": "<p>Yes. Also ChatGPT is far less effective than Copilot on code. So specialization is important here.</p>",
        "id": 322825937,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1674376540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/Confusing.20behavior.20of.20apply/near/322824487\">said</a>:</p>\n<blockquote>\n<p>You mean you thought it's not familiar with Lean? ChatGPT is definitely a programmers' major productivity tool by now for many mainatream languages (python, C, Javascript etc.).</p>\n</blockquote>\n<p>I really don't understand where this idea is coming from, all of the things I've been fixing in Python and C code since the release of ChatGPT require tons of extra information from the system its running on, other configuration files, the hardware. Even if ChatGPT was perfect and didn't give wrong answers with a 100% confidence sometimes it could never know these things unless I am already 90% the way there to have things fixed and told it about them. At which point I am wasting more time explaining ChatGPT the issue than just fixing it.</p>",
        "id": 322847188,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674388245
    },
    {
        "content": "<p>Hmm, look at this: <em><a href=\"https://arstechnica.com/information-technology/2023/01/chatgpt-is-enabling-script-kiddies-to-write-functional-malware/\">ChatGPT is enabling script kiddies to write functional malware</a></em></p>\n<p>Maybe it's not good at fixing bugs but that doesn't mean it's bad at everything. The natural number game has been around for years so probably appears in its dataset ...</p>\n<p>I haven't tried Copilot but my understanding is that it isn't conversational, so ChatGPT probably provides better pair coding experience. People are describing it as a junior-to-mid-level intern.</p>\n<p>BTW, OpenAI just priced ChatGPT Pro at $42, the answer to life, universe, and everything :)</p>",
        "id": 323119667,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674508620
    }
]