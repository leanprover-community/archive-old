[
    {
        "content": "<p>I am starting to submit more specialized material (Hausdorff distance in #PR696, but I have the Gromov-Hausdorff space waiting). While the Hausdorff distance is still of very broad use, I have the feeling that maybe the Gromov-Hausdorff space is too specialized for mathlib.</p>",
        "id": 157781078,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549550270
    },
    {
        "content": "<p>In Isabelle, there is the AFP (archive of formal proof), containing formal developments that are too specialized for the main library. The point is that the maintainers of the main library also correct the AFP to make sure everything compiles all the time, avoiding bitrot. But someone who uses only the main library will not need to compile all of the AFP.</p>",
        "id": 157781283,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549550406
    },
    {
        "content": "<p>I don't know anything about travis, but would it be easy to set up something similar for mathlib, i.e., parallel to <code>src</code> there would be a directory <code>lafp</code> or whatever name you like, that would not be compiled by <code>lean --make</code> by default but that would still be checked by travis?</p>",
        "id": 157781389,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549550516
    },
    {
        "content": "<p>I have often wondered what will become of the schemes and perfectoid projects. I forgot about schemes for months after I did it and turned my attention to perfectoid spaces, and then when I went back to it it was unsurprisingly very broken, because algebra had changed a lot, and I needed to get Kenny in to fix it. I feel like if I'd been notified the day a commit broke my repo it would have been a much less daunting job to fix it. Of course I can say \"oh, it compiles with mathlib version x so use that\" but I don't think that's a very good answer for something like perfectoid spaces -- people might want to use them for other things later as our ambitions grow, and incompatible software is probably a nightmare.</p>",
        "id": 157787560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549555265
    },
    {
        "content": "<p>PS thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> :-)</p>",
        "id": 157787604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549555297
    },
    {
        "content": "<p>The easiest way for the maintainers to ensure that it build with mathlib is to put it in mathlib itself. As for limiting compilation and recompilation, it certainly is an issue but I think right now it's better to address it by other means than cutting up mathlib in a myriad of small pieces.</p>",
        "id": 157803167,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549566163
    },
    {
        "content": "<p>I think it's important that maintaining compatibility becomes a broadly distributed obligation. We don't want this to start to fall on a \"core\" group of sacrificial maintainers. (As, perhaps, has happened with Isabelle.)</p>",
        "id": 157820104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549579468
    },
    {
        "content": "<p>I think it is important to maintain high standards for PR acceptance to prevent this kind of degradation</p>",
        "id": 157820288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549579656
    },
    {
        "content": "<p>what I think is a really bad idea is to have a bunch of \"articles\" that are owned by their authors and only subject to minor revision</p>",
        "id": 157820353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549579698
    },
    {
        "content": "<p>because this ties peoples' hands later when they want to generalize this or that</p>",
        "id": 157820369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549579717
    },
    {
        "content": "<p>As a PR author, you should not get too attached to your particular proofs or the way you structure a development - everything may be subject to change in the future at the behest of the maintainers or as a result of future PRs</p>",
        "id": 157820464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549579811
    },
    {
        "content": "<blockquote>\n<p>I think it's important that maintaining compatibility becomes a broadly distributed obligation. We don't want this to start to fall on a \"core\" group of sacrificial maintainers. (As, perhaps, has happened with Isabelle.)</p>\n</blockquote>\n<p>I guess putting everything all together puts the burden of maintenance on whoever makes a PR that breaks everything.</p>",
        "id": 157820494,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549579852
    },
    {
        "content": "<p>The only thing I would try to maintain is monotonicity with respect to proven theorems, i.e. if you prove Sylow's theorem then you can be sure that all future versions of mathlib will have Sylow's theorem, although the proof might change completely, the statement might change, the file could move, etc. (Your name will remain attached to any future versions though)</p>",
        "id": 157820548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549579908
    },
    {
        "content": "<blockquote>\n<p>I guess putting everything all together puts the burden of maintenance on whoever makes a PR that breaks everything.</p>\n</blockquote>\n<p>For instance, if someone changes the name of a lemma in mathlib for better coherence, then she should change the name of all applications of this lemma in mathlib, but also in the AFP. That sounds reasonable, since she knows exactly which lemmas can break, and the new names. On the other hand, the author of the AFP entry  is not aware of the name change, he will only see that the old name does not work anymore, but he will have no clue on the new name and it will take much longer for him to find the new name.</p>",
        "id": 157840876,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549610733
    },
    {
        "content": "<p>To be sure that this is the job of the PR author and not of the maintainer, it is enough that the green light on travis indicates that both mathlib and AFP compile correctly together.</p>",
        "id": 157840941,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549610831
    },
    {
        "content": "<p>I don't really see what the benefit is of a quarantine like this for some part of mathlib</p>",
        "id": 157840999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549610947
    },
    {
        "content": "<p>so what if it's specialized? I think that we should focus more on being able to make use of mathlib where only half of it is compiled because you don't care about the rest</p>",
        "id": 157841056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549611004
    },
    {
        "content": "<p>That would be cool, I'm perfectly able to use half of a math book and not care about the rest. Lean should be able to do that to.</p>",
        "id": 157841072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549611056
    },
    {
        "content": "<p>I mean lean <em>can</em> do this now. It's just a question of what to <code>lean --make</code></p>",
        "id": 157841087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549611082
    },
    {
        "content": "<p>But it's simpler and easier to just compile everything when in doubt currently</p>",
        "id": 157841089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549611114
    },
    {
        "content": "<p>I am not sure if <code>lean --make foo.lean</code> will compile all and only the dependencies of foo, but if so then if <code>foo</code> is your project then you can just make sure that all the theories you care about are imported, then compile it</p>",
        "id": 157841154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549611219
    },
    {
        "content": "<p>One option is to have a generalization of <code>init.default</code> import lists, where we have a curated collection of big theory imports. So for example \"core only\", \"mathlib tactics\", \"programming tools\", \"basic natural numbers\", \"commutative algebra\", \"analysis and measure theory\", \"computability\", \"everything\" etc. You load one of these files and they import a relatively complete list of files useful for the target area. That way if you care about analysis and measure theory you just <code>lean --make</code> this file, import it, and you are all set</p>",
        "id": 157841369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549611583
    },
    {
        "content": "<p>One of these lists can be a rough analogue of what Isabelle calls the standard library (as distinct from the AFP). Anything not in that list is \"more specialized\" and probably isn't useful for people who just say \"I want mathlib\"</p>",
        "id": 157841428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549611674
    },
    {
        "content": "<p>(Note, these would not be used inside mathlib itself, which needs more fine grained dependency tracking)</p>",
        "id": 157841484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549611755
    },
    {
        "content": "<p>But a helper tool could explode the <code>import init.big.list</code> into <code>import fine.grained dep.end.encies</code>.</p>",
        "id": 157841532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549611855
    },
    {
        "content": "<p>sure... couple that with import analysis and it could be a quick post processing step on PRs</p>",
        "id": 157841537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549611897
    },
    {
        "content": "<p>I agree that having different make targets (and being able to <code>lean --make foo.lean</code>) would be a perfect solution.</p>",
        "id": 157843335,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549614601
    },
    {
        "content": "<p>This discussion has inspired me to write a tool which I have just pushed to master. When you import mathlib, you shouldn't have to build any of it yourself anymore. The instructions on installing the tool are in mathlib's readme file</p>",
        "id": 157900146,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549666190
    },
    {
        "content": "<p>You should describe the tool here on zulip too - what's it good for, how is it used</p>",
        "id": 157901171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549667259
    },
    {
        "content": "<p>also that sounds suspiciously like something that should have gone through a PR process first :P</p>",
        "id": 157901232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549667298
    },
    {
        "content": "<p>The PR didn’t get much attention so I thought I’d release it to get feedback from users. Maybe I should have tried louder advertisements</p>",
        "id": 157901968,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549668044
    },
    {
        "content": "<p>The script, when you call it, checks which version of mathlib your project uses and fetches olean files for it. You can also set it up to get called every time you check out a branch</p>",
        "id": 157902079,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549668145
    },
    {
        "content": "<p>If I could get elan to call it too after <code>leanpkg configure</code> you should never have to compile mathlib except when you’re developing mathlib</p>",
        "id": 157902180,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549668260
    },
    {
        "content": "<blockquote>\n<p>The PR didn’t get much attention so I thought I’d release it</p>\n</blockquote>\n<p>Hm, this seems like a bad default</p>",
        "id": 157902187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549668292
    },
    {
        "content": "<p>What's the obstacle to having <code>leanpkg configure</code> call it.</p>",
        "id": 157902191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549668303
    },
    {
        "content": "<p>it's <code>leanpkg</code>, which is in core</p>",
        "id": 157902212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549668328
    },
    {
        "content": "<p>Ah, of course.</p>",
        "id": 157902224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549668337
    },
    {
        "content": "<p>Regarding the PR process --- perhaps we can ask everyone to add the extra step \"if you've asked for reviewers, and not got any after a reasonable amount of time, you can ask plaintively on the PR reviews stream on zulip\"?</p>",
        "id": 157902331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549668413
    },
    {
        "content": "<p>I think the build instructions should be moved off the main readme, they can be in a separate file linked from the readme</p>",
        "id": 157902347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549668425
    },
    {
        "content": "<p>I think compilation is a major part of using mathlib. I think it should be available as one of the first things you read about mathlib</p>",
        "id": 157902648,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549668690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think you're right. In any case, I might have been overly eager to deploy.</p>",
        "id": 157902758,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549668783
    },
    {
        "content": "<p>Can I use <code>update-mathlib</code> if I just <code>git clone</code> the repository without using adding it as a dependency to a project using <code>leanpkg</code>?</p>",
        "id": 157902886,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549668915
    },
    {
        "content": "<p>Meaning that you want to work on mathlib itself and you want to get started with a fully compiled set of olean files? <code>update-mathlib</code> does not handle that as of yet. I can look into making that work.</p>",
        "id": 157903078,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549669094
    },
    {
        "content": "<p>How do you feel about calling it as <code>update-mathlib here</code>?</p>",
        "id": 157903084,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549669117
    },
    {
        "content": "<p>One downside of this change is that my github inbox is now being spammed with new tags that are created. Does anyone know how I can mute those? I appreciate only seeing PRs and other issues in that inbox.</p>",
        "id": 157919063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549695808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can you maybe push these binaries to a different repository instead?  Kind of like <code>leanprover/lean</code> vs. <code>leanprover/lean-nightly</code>.  Johan is not the only one who's annoyed by the spammy emails.  It also clutters the <code>tig</code> output.</p>",
        "id": 157932467,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1549722938
    },
    {
        "content": "<p>Sure, I'll get right on it. What is the <code>tig</code> output?</p>",
        "id": 157939936,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549736283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Is there a way to get Travis to upload a release to a separate repository?</p>",
        "id": 157941241,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549738541
    },
    {
        "content": "<p>so where are the compiled mathlibs now?</p>",
        "id": 158116128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549977284
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nightly/releases\">https://github.com/leanprover-community/mathlib-nightly/releases</a></p>",
        "id": 158116154,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549977312
    },
    {
        "content": "<p>But the <code>update-mathlib</code> script  doesn't seem to work</p>",
        "id": 158116169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549977342
    },
    {
        "content": "<p>where are you?</p>",
        "id": 158116172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549977346
    },
    {
        "content": "<p>I couldn't get update-mathlib to work either.</p>",
        "id": 158116230,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549977368
    },
    {
        "content": "<p>and also I can't find the version of the nightly</p>",
        "id": 158117436,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549978479
    },
    {
        "content": "<p>also now that the builds are not clogging up people's emails, could we revert back to building it every commit?</p>",
        "id": 158381653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550000912
    },
    {
        "content": "<p>The releases were the best thing that happened to be this month, many thanks for whoever was behind it; I absolutely did not mind my emails being clogged in exchange for a precompiled up-to-date mathlib</p>",
        "id": 158383027,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550001867
    },
    {
        "content": "<p>What is the current status of precompiled mathlib?</p>",
        "id": 158383080,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550001912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I told you in private that this <code>.olean</code> project was a game-changer for some of my students, and there you have first hand proof.</p>",
        "id": 158383263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550002044
    },
    {
        "content": "<p>So it's working well already?</p>",
        "id": 158383361,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550002100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> merci beaucoup pour le projet</p>",
        "id": 158383381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550002117
    },
    {
        "content": "<p>Vous êtes les bienvenus :)</p>",
        "id": 158383421,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550002145
    },
    {
        "content": "<p>It was working well, in the sense that whenever mathlib changes I could find the corresponding precompiled version at <a href=\"https://github.com/leanprover-community/mathlib/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/releases\">https://github.com/leanprover-community/mathlib/releases</a></p>",
        "id": 158383437,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550002163
    },
    {
        "content": "<p>But for some reason I can no longer find them</p>",
        "id": 158383456,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550002174
    },
    {
        "content": "<p>Right, we're making a lot of changes. We moved the binaries to <code>leanprover-community/mathlib-nightly</code></p>",
        "id": 158383563,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550002254
    },
    {
        "content": "<p>however that branch is configured to release once every day instead of once every mathlib commit</p>",
        "id": 158383629,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550002317
    },
    {
        "content": "<p>That's right, people were complaining that there were too many releases</p>",
        "id": 158383700,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550002351
    },
    {
        "content": "<p>I think people were actually complaining about too many emails <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 158383713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550002370
    },
    {
        "content": "<p>Are the releases on that branch still triggering emails?</p>",
        "id": 158383828,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550002452
    },
    {
        "content": "<p>Indeed! Is there a need for that many releases by the way?</p>",
        "id": 158383878,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550002509
    },
    {
        "content": "<p>They should not be</p>",
        "id": 158383912,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550002545
    },
    {
        "content": "<p>It might be nice to have a shorter turn-around time for people who are moving bits of their projects into mathlib, I guess?</p>",
        "id": 158383915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550002548
    },
    {
        "content": "<p>That's true</p>",
        "id": 158383984,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550002594
    },
    {
        "content": "<p>I'm definitely for one release every commit</p>",
        "id": 158383992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550002602
    },
    {
        "content": "<p>Ok, so we can move <code>lean-3.4.2</code> once a day and produce one binary per commit</p>",
        "id": 158384040,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550002650
    },
    {
        "content": "<p>why not just move <code>lean-3.4.2</code> on every commit as well?</p>",
        "id": 158385020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550003511
    },
    {
        "content": "<p>To give it some stability. If you want to be bleeding edge, you'll have to copy the commit hashes. Otherwise, people who upgrade their dependency on mathlib on the same day will agree on which version to use</p>",
        "id": 158385359,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550003769
    },
    {
        "content": "<p>I would like a way to be bleeding edge without having to change a value every commit</p>",
        "id": 158390769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550008255
    },
    {
        "content": "<p>also my original proposal for binary releases would have one bleeding edge release plus a nightly breadcrumb</p>",
        "id": 158390854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550008323
    },
    {
        "content": "<p>Do you think that having <code>lean-3.4.2</code> be almost a synonym of <code>master</code> would be the way to go?</p>",
        "id": 158390856,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550008324
    },
    {
        "content": "<p>no, I think <code>master</code> = bleeding edge and <code>lean-3.4.2</code> = stable-ish seems good</p>",
        "id": 158390895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550008357
    },
    {
        "content": "<p>Do you want a <code>lean-3.4.2</code> tag and a <code>bleeding-edge</code> tag?</p>",
        "id": 158390911,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550008369
    },
    {
        "content": "<p>bleeding edge isn't a tag</p>",
        "id": 158390920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550008380
    },
    {
        "content": "<p>it's just <code>master</code></p>",
        "id": 158390945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550008391
    },
    {
        "content": "<p>How do you get <code>leanpkg upgrade</code> to fetch <code>master</code> instead of <code>lean-3.4.2</code>?</p>",
        "id": 158391020,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550008436
    },
    {
        "content": "<p>you can't, currently<br>\nThis is why <a href=\"https://github.com/leanprover/mathlib/issues/365\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/365\">#365</a> is an issue</p>",
        "id": 158391122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550008481
    },
    {
        "content": "<p>At one point, our goal was to just make <code>lean-3.4.2</code> stay equal to <code>master</code></p>",
        "id": 158391358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550008656
    },
    {
        "content": "<p>so basically, there's the fixed name <code>lean-3.4.2</code> which leanpkg will fetch, and we need to decide how we want it to behave</p>",
        "id": 158391683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550008830
    },
    {
        "content": "<p>The down side of working off of <code>master</code> btw is that sometimes, the build breaks</p>",
        "id": 158391697,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550008844
    },
    {
        "content": "<p>When Mario and Johannes were the only people who could push to master it was <em>extremely</em> rare that master didn't compile</p>",
        "id": 158392143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550009247
    },
    {
        "content": "<p>We could still have a stable branch that would be pushed only manually</p>",
        "id": 158392240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550009304
    },
    {
        "content": "<p>Actually, that seems like something we could fold into the travis build</p>",
        "id": 158395970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550012441
    },
    {
        "content": "<p>if the build of master fails, we don't push binaries and don't update <code>lean-3.4.2</code>, otherwise we update it to the latest</p>",
        "id": 158396021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550012479
    },
    {
        "content": "<p>So is there a precompiled mathlib for every (successfully built) commit?</p>",
        "id": 158474448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550089852
    },
    {
        "content": "<p>That is the intent, not fully implemented just yet.</p>",
        "id": 158476406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550091494
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nightly/releases\">https://github.com/leanprover-community/mathlib-nightly/releases</a> is frozen again?</p>",
        "id": 158698103,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550328033
    },
    {
        "content": "<p>Why do you think that?</p>",
        "id": 158713272,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550352899
    },
    {
        "content": "<p>because the last commit for Feb 15 is 8730619 instead of 17f9bef</p>",
        "id": 158713338,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550352986
    },
    {
        "content": "<p>There reason is that there's one nightly release per calendar day. 8730619 was pushed on the same day (according to GMT time) as 17f9bef.</p>",
        "id": 158713772,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550353640
    },
    {
        "content": "<p>and above Reid claims that the intent is one release per commit</p>",
        "id": 158713826,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550353738
    },
    {
        "content": "<p>Right, that intent has yet to be implemented</p>",
        "id": 158714539,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550354806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> what's the progress of the implementation of the intent?</p>",
        "id": 158962813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550657202
    },
    {
        "content": "<p>also shouldn't 78ce6e4 be released on Feb 19 despite there not being any commit on Feb 19?</p>",
        "id": 158962837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550657245
    },
    {
        "content": "<p>I haven't gotten started yet</p>",
        "id": 158990188,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550679916
    },
    {
        "content": "<blockquote>\n<p>also shouldn't 78ce6e4 be released on Feb 19 despite there not being any commit on Feb 19?</p>\n</blockquote>\n<p>No, the way it works is that it takes the first successful commit of the day as the nightly for that day</p>",
        "id": 158990527,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550680206
    }
]