[
    {
        "content": "<p>I'm having some trouble because the compiler doesn't recognize that for some type <code>T n</code> with an index n in a group, we have T (n+k+l)=T (n+(k+l)) (for some variables n, l, k, I suppose that it works fine when we fix n,l,k as explicit numbers).   I guess this is a common problem with a standard solution, what is generally done in this case ? Should I compose by  some canonical bijection between T (n+k+l) and T (n+(k+l)) , or is there a more subtle solution ?</p>\n<p>Here is a mwe with the type fin n : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mwe</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"kd\">begin</span>  <span class=\"n\">rcases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">ineq</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">fin.mk</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span> <span class=\"kd\">end</span> <span class=\"c1\">--makes the sum i-&gt;i+k and changes the type.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">composition_f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mwe</span>\n</code></pre></div>\n<p>which gives me the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In a more complex case with type adjoin_root I get a deterministic timeout, I suppose the compiler gets stuck trying to figure out some way to match the types.</p>",
        "id": 218262370,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606727405
    },
    {
        "content": "<p>Yes, this is a common problem. And it is very annoying.</p>",
        "id": 218262533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606727527
    },
    {
        "content": "<p>Two possible solutions are: make everything terms of a sigma type <code>\\Sig g : G, T g</code>, or do as you suggest, and compose with a canonical bijection. The latter happens quite often in the category library. You would have to start treating <code>T</code> as a \"functor\" on a groupoid. (You don't need to use the category lib for this, but you should be aware that the code is forcing you into this \"functorial\" direction.)</p>",
        "id": 218262742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606727688
    },
    {
        "content": "<p>I took me some time figuring out what was causing the timeout ! I'll try the functorial workaround, I understand it better than the sigma type solution.</p>",
        "id": 218263071,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606727895
    },
    {
        "content": "<p>Moreover, thinking of this as a functor from the group seen as a category to the set category or the ring category makes me feel better, for some reason.</p>",
        "id": 218263542,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606728200
    },
    {
        "content": "<p>If you search for <code>heq</code> in this chat, you'll find other solutions being discussed.</p>",
        "id": 218264195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606728624
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/heq.20alternative/near/210378589\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/heq.20alternative/near/210378589</a> is quite interesting</p>",
        "id": 218264271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606728693
    },
    {
        "content": "<p>Also, in your mwe you have a typo (<code>k + n</code> should be <code>k + m</code> in the error message).</p>",
        "id": 218266185,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1606729844
    },
    {
        "content": "<p>Indeed, I've edited it (I've checked that the error message doesn't change other than the n-&gt; m).  <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  nice, I understand better the sigma type solution now, although this \"path\" business is still obscure for me. I feel like the solution<code>C : Π {n : ℕ}, vector α n → ι</code> is not flexible enough (mostly because of Reid Barton's saying \"the purpose of C is to hide the problematic type index, so it can't appear in the result type of C\") but I don't yet understand the implications here.</p>",
        "id": 218268725,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606731582
    },
    {
        "content": "<p>In this particular case, you can use fin.cast</p>",
        "id": 218308535,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606753051
    },
    {
        "content": "<p>So could you phrase your lemma to include <code>cast</code>?</p>",
        "id": 218308687,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606753110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> okay that would be the particular case of the \"canonical bijection\" solution. However I wrote this only to illustrate by a minimal working example, my problem is actually on quotients of ring by some ideals. So what I need is some ideal.quotient.cast  function.</p>",
        "id": 218318572,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606757542
    },
    {
        "content": "<p>I just defined a  function <code>quotient_cast : {I J: ideal R} (iej: I=J) : I.quotient →+* J.quotient</code> together with two \"trivial\" lemmas, one taking care of the reflexive equality I=I and the other one taking care of the transitivity of equality with I=J and J=K. I used ideal.quotient_map and I had to dsimp definitions for the lemmas... I feel like there could be a more general function \"cast\" defined on any indexed type, with the same two lemmas. Maybe it already exists somewhere in category theory ?</p>",
        "id": 218326205,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606761161
    },
    {
        "content": "<p>Note that very often, these kind of \"congr\" lemmas are special cases of generally useful ones. For example if <code>I &lt;= J</code>, then you also get such a map...</p>",
        "id": 218326429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606761272
    },
    {
        "content": "<p>Johan raises an important point. Sets are modelled internally as functions to Prop, and even if two sets I and J are equal but not definitionally equal, proving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>⊆</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">I\\subseteq J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> is still easy.</p>",
        "id": 218326881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606761511
    },
    {
        "content": "<p>True, I should make it more general with I &lt;= J. Using  <a href=\"http://ideal.quotient.mk\">ideal.quotient.mk</a> instead of ideal.quotient_map will probably make the proof of the lemmas more natural...</p>",
        "id": 218355860,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606775422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"349646\">@Simon Andreys</span> but the more general version will undoubtly already be there, somewhere in mathlib.</p>",
        "id": 218380494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606797969
    },
    {
        "content": "<p>I've been looking for it, but it seems to be well hidden... I found <code>submodule.quot_equiv_of_eq</code> for the weak version of the quotient by two equal submodule (and there seems to be no attached lemmas), but the closest thing I found for ring morphisms is i<code>deal.quotient_map</code>... I may be looking at the wrong place or searching for the wrong names.</p>",
        "id": 218398487,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606815555
    }
]