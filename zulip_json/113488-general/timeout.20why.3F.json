[
    {
        "content": "<p><a href=\"/user_uploads/3121/wIzTywbodH_AVuTH7cpl6Fs7/timeout.lean\">timeout.lean</a><br>\nI get a timeout for this toy compiler on a small expression? Why?</p>",
        "id": 227306483,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614015520
    },
    {
        "content": "<p>Please paste your example in a code block.</p>",
        "id": 227307630,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614015957
    },
    {
        "content": "<p>or a github gist... if it's too long</p>",
        "id": 227307750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614015983
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Instr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">pushC</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">pushV</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">Instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">mult</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Instr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Code</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">Instr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Stack</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp_aux</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Code</span> <span class=\"bp\">→</span> <span class=\"n\">Code</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">pushC</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">pushV</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">comp_aux</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">comp_aux</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">::</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">comp_aux</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">comp_aux</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"o\">::</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Code</span>\n  <span class=\"o\">:=</span> <span class=\"n\">comp_aux</span> <span class=\"n\">e</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"o\">:=</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"s2\">\"y\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">e1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 227308106,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614016102
    },
    {
        "content": "<p>maybe it's the <code>string</code> bug</p>",
        "id": 227308108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1614016103
    },
    {
        "content": "<p>I remember there was a bug with evaluating strings because of some <code>\"undefined\"</code> string</p>",
        "id": 227308140,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1614016115
    },
    {
        "content": "<p>You should use <code>#eval</code> instead of <code>#reduce</code>.</p>",
        "id": 227308181,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614016137
    },
    {
        "content": "<p>It is related to strings, but it's not a bug. This comes up pretty often. <a href=\"#narrow/stream/113489-new-members/topic/deep.20recursion.20error.20reducing.20strings\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/deep.20recursion.20error.20reducing.20strings</a></p>",
        "id": 227308183,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614016138
    },
    {
        "content": "<p>We need to work on SEO for the Zulip archive. It's too bad that googling \"lean prover string reduce\" doesn't turn up one of the relevant threads.</p>",
        "id": 227308278,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614016179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20why.3F/near/227308181\">said</a>:</p>\n<blockquote>\n<p>You should use <code>#eval</code> instead of <code>#reduce</code>.</p>\n</blockquote>\n<p>I see but then I have a different problem: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">35</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">an</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"bp\">'</span><span class=\"n\">has_repr'</span><span class=\"o\">,</span> <span class=\"n\">dumping</span> <span class=\"n\">internal</span> <span class=\"n\">representation</span>\n</code></pre></div>",
        "id": 227308407,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614016211
    },
    {
        "content": "<p>So I guess you need to provide an</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">Code</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 227308577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614016283
    },
    {
        "content": "<p>Are there derive handlers for <code>has_repr</code>? If so you can put <code>@[derive has_repr]</code> before most of your defs.</p>",
        "id": 227308679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614016320
    },
    {
        "content": "<p>Unfortunately not.  But they would be pretty useful.</p>",
        "id": 227308818,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614016366
    },
    {
        "content": "<p><a href=\"https://github.com/gebner/mathlib/blob/e66976e99d5e1b7811e80bb7ca41421a5e31a322/src/tactic/derive_to_string.lean\">https://github.com/gebner/mathlib/blob/e66976e99d5e1b7811e80bb7ca41421a5e31a322/src/tactic/derive_to_string.lean</a></p>",
        "id": 227309182,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614016501
    },
    {
        "content": "<p>But the automatically generated instances are not particularly nice.  (It's hard to know if you should parenthesize or not.  That is, <code>var 5</code> or <code>var (5)</code>.)</p>",
        "id": 227309391,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614016569
    },
    {
        "content": "<p>I am not sure what is going on. Surely lean knows how to evaluate this expression? Or not? And it should also know how to print a list. And Instr which is just a sum???</p>",
        "id": 227309416,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614016578
    },
    {
        "content": "<p>It doesn't unfold <code>Code</code> when trying to figure out how to print things, afaik.</p>",
        "id": 227309523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614016622
    },
    {
        "content": "<p>You can write <code>@[derive has_repr]</code> above <code>def Code</code>, but apparently for <code>Instr</code> you will have to write the instance by hand.</p>",
        "id": 227309627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614016659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20why.3F/near/227309523\">said</a>:</p>\n<blockquote>\n<p>It doesn't unfold <code>Code</code> when trying to figure out how to print things, afaik.</p>\n</blockquote>\n<p>It's not this - I tried substitute Code by list Instr.</p>",
        "id": 227309636,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614016662
    },
    {
        "content": "<p>I guess it got stuck on <code>Instr</code> at that point</p>",
        "id": 227309759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614016697
    },
    {
        "content": "<p>Actually I also have a related problem. How do I use ++ on Code (which is defined as list Instr)?</p>",
        "id": 227309858,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614016743
    },
    {
        "content": "<p>Is there a way to just have a type synonym, without indroducing a new type?</p>",
        "id": 227309938,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614016772
    },
    {
        "content": "<p>You could use <code>@[reducible] def</code> instead.</p>",
        "id": 227310505,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614016983
    },
    {
        "content": "<p>Or you could use <code>@[deriv has_append, deriv has_repr] def</code> to copy the instances explicitly.</p>",
        "id": 227310570,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614017003
    },
    {
        "content": "<p>Type-class inference can see through reducible definitions, so you get all instances from list automatically.</p>",
        "id": 227310610,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614017027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20why.3F/near/227310505\">said</a>:</p>\n<blockquote>\n<p>You could use <code>@[reducible] def</code> instead.</p>\n</blockquote>\n<p>Thank you - this does the trick.</p>",
        "id": 227311051,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614017201
    },
    {
        "content": "<p>I still don't understand why #reduce hangs. Btw all I wanted is a nice example for the code without having to create it by hand... :-(</p>",
        "id": 227311697,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614017474
    },
    {
        "content": "<p>Please read the link that Rob posted earlier, it explains the issue.</p>",
        "id": 227311935,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614017577
    },
    {
        "content": "<p>Ah I sort of ignored this because I couldn't imagine it had anything to do with strings. I see. Weird.</p>",
        "id": 227313168,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1614018086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20why.3F/near/227309391\">said</a>:</p>\n<blockquote>\n<p>But the automatically generated instances are not particularly nice.  (It's hard to know if you should parenthesize or not.  That is, <code>var 5</code> or <code>var (5)</code>.)</p>\n</blockquote>\n<p>Is the heuristic \"does the argument contain a space\" good enough?</p>",
        "id": 227314546,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614018659
    },
    {
        "content": "<p>It will still use unnecessary parens, but not all the time</p>",
        "id": 227314810,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614018755
    },
    {
        "content": "<p>(I think we should add this derive handler, I've missed it before too)</p>",
        "id": 227314969,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614018825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20why.3F/near/227314546\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20why.3F/near/227309391\">said</a>:</p>\n<blockquote>\n<p>But the automatically generated instances are not particularly nice.  (It's hard to know if you should parenthesize or not.  That is, <code>var 5</code> or <code>var (5)</code>.)</p>\n</blockquote>\n<p>Is the heuristic \"does the argument contain a space\" good enough?</p>\n</blockquote>\n<p>That seems slow.  I would rather go for a typeclass/attribute <code>class does_not_require_parens (α : Sort*) : Prop</code>.  The proper way is of course to add four classes <code>has_to_{repr,string,format,tactic_format}_parens</code> which return tuples consisting of (left-binding power, string, right-binding power).</p>",
        "id": 227329543,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614024572
    },
    {
        "content": "<p>That still seems trickier than I care to waste my time on. What if we just add the dumb version? People can still implement their own <code>has_repr</code>s if they don't like the ugly derived one.</p>",
        "id": 227337225,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614027964
    },
    {
        "content": "<p>I won't complain about a \"bad\" version.  I think any derive handler is better than none, and we can improve it afterwards.</p>",
        "id": 227339631,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614029038
    },
    {
        "content": "<p>Most of the discussion so far seems to blame <code>string</code>, right? I have a similar problem using <code>nat</code>. Following the idea from <a href=\"https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/tests/lean/run/soundness.lean\">https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/tests/lean/run/soundness.lean</a>, we are defining atomic symbols in our logic with nat. Everything looks fine until we need to implement a function to convert between representations.</p>",
        "id": 232277217,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617028216
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? <code>nat</code> should be fine for small numbers</p>",
        "id": 232277699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617028403
    },
    {
        "content": "<p><code>num</code> may perform better if you have larger numbers and still need kernel computation</p>",
        "id": 232277846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617028452
    },
    {
        "content": "<p>Sorry, yes, I didn't complete my post. The relevant part is <a href=\"https://github.com/arademaker/alc-lean/blob/atomics/src/alc.lean#L21-L39\">https://github.com/arademaker/alc-lean/blob/atomics/src/alc.lean#L21-L39</a>. and <a href=\"https://github.com/arademaker/alc-lean/blob/atomics/src/sequent.lean#L7-L40\">https://github.com/arademaker/alc-lean/blob/atomics/src/sequent.lean#L7-L40</a>. Line 40 is the problem... reduce produces a timeout.</p>",
        "id": 232277925,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617028472
    },
    {
        "content": "<p>The function <code>sigma'</code> is a recursive function to transform the <code>lconcept</code> (labeled concepts) into regular concepts of the logic. The idea is that labeled concepts are concepts were the quantifier prefix were separated into a list.  The reduce is to test if the function definition is right, I can't understand why it doesn't work.</p>",
        "id": 232278293,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617028625
    },
    {
        "content": "<p>The reduction of lconcept and concept terms works. The non-standard facts about <code>sigma'</code> is the pattern match over the structure and the way the recursion calls are constructed. the recursive call is done inside the term being produced.</p>",
        "id": 232279748,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617029127
    },
    {
        "content": "<p>The issue is that <code>sigma'</code> is written in a way that is not straightforwardly structural recursive, so lean is falling back on well founded recursion and this performs poorly in the kernel. There is an easy fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sigma'_aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Label</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Forall</span> <span class=\"n\">r</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Every</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">sigma'_aux</span> <span class=\"n\">ls</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Exists</span> <span class=\"n\">r</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Some</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">sigma'_aux</span> <span class=\"n\">ls</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigma'</span> <span class=\"o\">:</span> <span class=\"n\">LConcept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">roles</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sigma'_aux</span> <span class=\"n\">roles</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 232283201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617030336
    },
    {
        "content": "<p>Hi @mario, indeed, I ended up with the same approach that I was about to post. Thank you...</p>",
        "id": 232283480,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617030464
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Label</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Concept</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Concept</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c</span>\n <span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">Forall</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Every</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">ls</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">Exists</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Some</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">ls</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigma2</span> <span class=\"o\">(</span><span class=\"n\">lc</span> <span class=\"o\">:</span> <span class=\"n\">LConcept</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Concept</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"n\">lc.roles</span> <span class=\"n\">lc.concept</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">sigma2</span> <span class=\"o\">(</span><span class=\"n\">LConcept.mk</span> <span class=\"o\">[</span><span class=\"n\">Forall</span> <span class=\"n\">R</span><span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Exists</span> <span class=\"n\">R</span><span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Concept.Bot</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Can we see this as a Lean bug? So maybe we can expect better behaviour in Lean 4?</p>",
        "id": 232283603,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617030505
    },
    {
        "content": "<p>What would the bug be exactly? This is an interaction of components that are all working as designed</p>",
        "id": 232283690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617030541
    },
    {
        "content": "<p>Also, I think the days of hoping that everything will magically be better in lean 4 are over, because the real thing is out. Many things are better, many other things can be made better in user space, and some things aren't any different. Right now I think well founded recursion isn't completely supported yet but I don't think the overall structure of how the equation compiler picks a compilation strategy will change much if at all</p>",
        "id": 232284105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617030713
    },
    {
        "content": "<p>well, the pattern matching was used as expected. The syntax for the definition is right. So why the reduction is not working? You said that it is not  <code>straightforwardly structural recursive</code> but it is a recursive definition. Can we provide any hint to Lean? Maybe?!</p>",
        "id": 232284209,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617030737
    },
    {
        "content": "<p>I see.</p>",
        "id": 232284279,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617030773
    },
    {
        "content": "<p>Structural recursion means it has to be written in a certain form. You pattern match on an inductive type and call the function on subterms</p>",
        "id": 232284292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617030781
    },
    {
        "content": "<p><code>sigma'</code> isn't written like that because <code>(LConcept.mk ls c)</code> is not a subterm of <code>{ LConcept . roles := (Forall r :: ls) , concept := c}</code></p>",
        "id": 232284389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617030831
    },
    {
        "content": "<p>I'm not saying it can't be better, I'm saying there is a nontrivial design question that has to be resolved to improve the situation</p>",
        "id": 232284507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617030861
    },
    {
        "content": "<p>well founded recursion is much more flexible, you can call the function on anything with a smaller \"size\", where size is a natural number defined automatically on inductive types. <code>sizeof (LConcept.mk ls c) &lt; sizeof { LConcept . roles := (Forall r :: ls) , concept := c}</code> which is why the wf recursion compilation strategy succeeds</p>",
        "id": 232284813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617030975
    },
    {
        "content": "<p>I see, thank you for the explanation.</p>",
        "id": 232285097,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617031063
    },
    {
        "content": "<p>However, the issue with well founded recursion is that it requires unfolding proofs in order for the definition to definitionally reduce in the kernel (which is what <code>#reduce</code> does), and lean / mathlib generally make no effort to write proofs that can be computed well (indeed, most proofs use axioms and those block computation entirely)</p>",
        "id": 232285116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617031067
    },
    {
        "content": "<p>The real answer is \"don't use <code>#reduce</code>\" though</p>",
        "id": 232285354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617031107
    },
    {
        "content": "<p>It is slow and mostly useless</p>",
        "id": 232285410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617031118
    },
    {
        "content": "<p><code>#eval</code> works fine on the wf definition</p>",
        "id": 232285515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617031140
    },
    {
        "content": "<p>But for using eval I will need to understand how to provide the has_repr instance to may structures and inductive types..</p>",
        "id": 232285654,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617031180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> If the only reason you aren't using <code>#eval</code> is because <code>#reduce</code> gets better printing, here's a life hack for you</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">print</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.pp</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">print</span> <span class=\"bp\">$</span> <span class=\"n\">sigma'</span> <span class=\"o\">(</span><span class=\"n\">LConcept.mk</span> <span class=\"o\">[</span><span class=\"n\">Forall</span> <span class=\"n\">R</span><span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Exists</span> <span class=\"n\">R</span><span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Concept.Bot</span><span class=\"o\">))</span>\n<span class=\"c1\">-- Ax R#0:Ex R#1:Bot</span>\n</code></pre></div>\n<p>That way you just need <code>@[derive has_reflect]</code> on all your inductive types, and you get the same printing as lean will normally do, meaning that notations and things work as normal</p>",
        "id": 232296228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617035479
    },
    {
        "content": "<p>Thank you, I should have missed someting, I spread the <code>@[derive has_reflect]</code> all over the places but now eval does not produce anything</p>\n<p><a href=\"https://github.com/arademaker/alc-lean/blob/atomics/src/sequent.lean\">https://github.com/arademaker/alc-lean/blob/atomics/src/sequent.lean</a></p>",
        "id": 232298568,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617036525
    },
    {
        "content": "<p>Oh, no. Sorry. It is working, the Emacs mode is not showing it with the <code>C-c C-b</code> (Toogle message boxes).</p>",
        "id": 232298740,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617036600
    },
    {
        "content": "<p>you might also try using <code>run_cmd</code> instead of <code>#eval</code>; it should look the same but maybe emacs shows it differently</p>",
        "id": 232298912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036652
    }
]