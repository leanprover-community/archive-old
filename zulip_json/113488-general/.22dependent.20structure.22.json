[
    {
        "content": "<p>Here I am writing the beginning of a category structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Cat</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">Obj</span><span class=\"o\">:</span> <span class=\"n\">U</span>\n<span class=\"n\">Mor</span><span class=\"o\">:</span> <span class=\"n\">U</span>\n<span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span>\n<span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span>\n<span class=\"n\">Id</span><span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"bp\">-&gt;</span><span class=\"n\">Mor</span>\n</code></pre></div>\n<p>Right now I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">expected</span><span class=\"o\">,</span> <span class=\"n\">got</span>\n  <span class=\"o\">(</span><span class=\"n\">Mor</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I also want to tweak so that Obj and Mor can be constituents of any universe.</p>",
        "id": 315911071,
        "sender_full_name": "Dean Young",
        "timestamp": 1671050539
    },
    {
        "content": "<p><code>-&gt;</code> expects types on the left and right, and you're giving it terms.</p>",
        "id": 315913571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671051594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.22dependent.20structure.22/near/315913571\">said</a>:</p>\n<blockquote>\n<p><code>-&gt;</code> expects types on the left and right, and you're giving it terms.</p>\n</blockquote>\n<p>Oh shoot. I guess I didn't see that. Can you help me</p>\n<ul>\n<li>choose a universe U containing Type in my Main.lean (Evidently Type1 doesn't work in the Main.lean file?)</li>\n<li>switch ( U : Type) with something that can take in a universe containing Type (or just any universe I guess)</li>\n</ul>",
        "id": 315923085,
        "sender_full_name": "Dean Young",
        "timestamp": 1671055219
    },
    {
        "content": "<p>The syntax is <code>Type 1</code>, not <code>Type1</code>. I'm not sure what you want, but as a jumping off point, these are acceptable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Cat</span> <span class=\"n\">where</span>\n<span class=\"n\">Obj</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">Mor</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span>\n<span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span>\n<span class=\"n\">Id</span><span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"bp\">-&gt;</span><span class=\"n\">Mor</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cat'</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Mor</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span>\n<span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Mor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span>\n<span class=\"n\">Id</span><span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"bp\">-&gt;</span><span class=\"n\">Mor</span>\n</code></pre></div>\n<p>Universe variables are implicitly quantified; you can see them by hovering over the declaration name, and you can manipulate them to some extent with the same syntax (e.g. <code>Cat.{u}</code>).</p>",
        "id": 315931228,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1671058988
    },
    {
        "content": "<p>I suppose you want <code>Obj</code> and <code>Mor</code> to be subsets of <code>U</code> in this case, not terms of <code>U</code>. Or make them types as others have already commented.</p>",
        "id": 315932143,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671059379
    },
    {
        "content": "<p>There's also the intermediate version, as defined in mathlib, where <code>Obj</code> is a parameter and <code>Mor</code> (/<code>Hom</code>) is a field.</p>",
        "id": 315948198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671070443
    }
]