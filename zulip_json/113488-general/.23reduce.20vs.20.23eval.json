[
    {
        "content": "<p>Does it ever happen that #reduce runs forever while #eval terminates immediately?</p>",
        "id": 123060876,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519768124
    },
    {
        "content": "<p>Try 1000*1000</p>",
        "id": 123061271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519768620
    },
    {
        "content": "<p>it times out</p>",
        "id": 123061346,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519768685
    },
    {
        "content": "<p>Does that not count as \"I ran forever but I explained this to you in a different kind of way\"</p>",
        "id": 123061357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519768705
    },
    {
        "content": "<p>It would but my example involves numbers such as 1 and 0</p>",
        "id": 123061395,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519768765
    },
    {
        "content": "<p>Try <code>(1+1)*(1+1)*(1+1)*(1+1)*...*(1+1)</code></p>",
        "id": 123061409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519768798
    },
    {
        "content": "<p>... but it also involves an encoding of an infinite tree ... I wonder if that's what is taking super duper long</p>",
        "id": 123061467,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519768817
    },
    {
        "content": "<p>I'll be more specific. I'm trying:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">to_bin_tree</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">mk_tree</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>where <code>my_tree</code> creates an infinite tree starting at 0 and incrementing it from time to time and <code>to_bin_tree</code> truncates it after 3 steps. It creates the following binary tree:</p>\n<div class=\"codehilite\"><pre><span></span>(node 0 (node 1 (node ⊥ ⊥)))\n</pre></div>",
        "id": 123061650,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519769093
    },
    {
        "content": "<p>Anyway, you made your point. Truncating the tree is probably much more expensive now that I changed their representation</p>",
        "id": 123061734,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519769251
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 123061736,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519769259
    }
]