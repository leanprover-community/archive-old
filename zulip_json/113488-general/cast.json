[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">cast_eq_of_heq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">type_eq_of_heq</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"bp\">_</span> <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 167768359,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560180204
    },
    {
        "content": "<p>I feel like <code>cast</code> isn't used enough</p>",
        "id": 167768365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560180209
    },
    {
        "content": "<p>here's a theorem I proved with <code>cast</code></p>",
        "id": 167768380,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560180218
    },
    {
        "content": "<p>cast is used exactly as often as it should be, which is almost never</p>",
        "id": 167768515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560180307
    },
    {
        "content": "<p>it's also not much different from <code>eq.rec</code></p>",
        "id": 167768550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560180353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I run into <code>cast</code>s all the time, but I would like to not use them, in accordance with your \"almost never\". However, I don't see any way to do that. For example, as soon as I define a few simple things, <code>cast</code>s seem to become necessary really quickly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">vector</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span> <span class=\"n\">mk_vec</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">n</span>\n<span class=\"kn\">variable</span> <span class=\"n\">consume_vec</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"c1\">-- Of course, I could just swap the x,y arguments to consume_vec here but this</span>\n<span class=\"c1\">-- doesn&#39;t seem to be possible very often with more complicated types.</span>\n<span class=\"n\">def</span> <span class=\"n\">something_useful</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">consume_vec</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk_vec</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- At what point does this go wrong? To me, it seems like</span>\n<span class=\"c1\">-- it goes wrong as soon as `vector` is defined the way it is here.</span>\n</pre></div>",
        "id": 167868647,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560272134
    },
    {
        "content": "<p>you are right... it goes wrong as soon as you state the problem like that</p>",
        "id": 167886098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560283821
    }
]