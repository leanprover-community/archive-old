[
    {
        "content": "<p>Here's something weird I found. If you make an alias of <code>list.perm.rec_on</code>,  the<code>induction</code> tactic suddenly complains about it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">list.perm.rec_on</span> <span class=\"bp\">←</span> <span class=\"n\">list.perm.rec_on'</span>\n\n<span class=\"c1\">-- Works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">list.perm.rec_on</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n\n<span class=\"c1\">-- invalid user defined recursor, type of the major premise 'ᾰ' does not contain the recursor index 'ᾰ'</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">list.perm.rec_on'</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 292353884,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659924471
    },
    {
        "content": "<p>I wonder if this has to do with <code>@[elab_as_eliminator]</code></p>",
        "id": 292354134,
        "sender_full_name": "David Renshaw",
        "timestamp": 1659924810
    },
    {
        "content": "<p>Something similar happens with <code>relation.trans_gen.rec_on</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.relation</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">relation.trans_gen.rec_on</span> <span class=\"bp\">←</span> <span class=\"n\">relation.trans_gen.rec_on'</span>\n\n<span class=\"c1\">-- Works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">relation.trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">relation.trans_gen.rec_on</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n\n<span class=\"c1\">-- invalid user defined recursor, type of the major premise 'ᾰ' must be for the form (I ...), where I is a constant</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">relation.trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">relation.trans_gen.rec_on'</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 292354222,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659924914
    },
    {
        "content": "<p>hm... <code>attribute [elab_as_eliminator] list.perm.rec_on'</code> does not seem to help.</p>",
        "id": 292354237,
        "sender_full_name": "David Renshaw",
        "timestamp": 1659924951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> might have an idea of what's going on</p>",
        "id": 292354586,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659925448
    },
    {
        "content": "<p><code>induction using</code> doesn't really work in lean 3, you should just use refine</p>",
        "id": 292378630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659950790
    },
    {
        "content": "<p>but you should make an issue to track it since it's hard to remember whhat goes wrong</p>",
        "id": 292378703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659950865
    },
    {
        "content": "<p>Would it be worthwhile to kill <code>induction using</code> in mathlib?</p>",
        "id": 292408212,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659968410
    },
    {
        "content": "<p>I wanted to test out redefining <code>list.perm</code> as the transitive closure of the \"at most one swap\" relation, which gives a more general induction principle, but this change causes more trouble than it would otherwise due to <code>induction using</code> now failing...</p>",
        "id": 292408528,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659968550
    },
    {
        "content": "<p>It works perfectly well in nearly all cases, in my experience</p>",
        "id": 292414784,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659971390
    },
    {
        "content": "<p>I thought that as well, but I've found a total of three fail cases in the past two or so weeks</p>",
        "id": 292416243,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659972053
    },
    {
        "content": "<p>Does <code>alias</code> even work well for data? I thought we only ever used it for theorems</p>",
        "id": 305665507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666532675
    },
    {
        "content": "<p>it works fine for <code>def</code> and <code>theorem</code>, not so much for <code>inductive</code></p>",
        "id": 305666699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666533246
    },
    {
        "content": "<p>well, for <code>def</code> it probably won't copy the definitional equation, resulting in poor <code>rw</code> behavior</p>",
        "id": 305666777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666533287
    }
]