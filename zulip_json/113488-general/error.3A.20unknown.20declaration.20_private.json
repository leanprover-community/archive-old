[
    {
        "content": "<p>I got an error in the CI that I've never seen before, during the <code>export as low-level text file</code> step:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Run lean --recursive --export=mathlib.txt src/\n  lean --recursive --export=mathlib.txt src/\n  shell: /usr/bin/bash -e {0}\n&lt;unknown&gt;:1:1: error: unknown declaration '_private.1263093571.lt'\nError: Process completed with exit code 1.\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib/runs/3932628186\">https://github.com/leanprover-community/mathlib/runs/3932628186</a></p>\n<p>Anyone knows what's up here? I already tried re-running all jobs, it's a reproducible error.</p>",
        "id": 258154249,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634629210
    },
    {
        "content": "<p>Oh, this has been mentioned here<br>\n<a href=\"#narrow/stream/113488-general/topic/bors.20failing\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/bors.20failing</a><br>\nWas there any solution to this? Is this just an unlucky hash collision or something?</p>",
        "id": 258154348,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634629292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 258154418,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634629323
    },
    {
        "content": "<p>The error didn't come back after bors split the batch in the failure I linked to, so it being some kind of hash collision makes sense to me.</p>",
        "id": 258154816,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1634629593
    },
    {
        "content": "<p>Ok, thanks! I tried merging into master. Hopefully that \"fixes\" it.</p>",
        "id": 258154852,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634629622
    },
    {
        "content": "<p>I don't know anything about CI but I'm interested in learning what a hash collision is. I thought that a hash was something like a 64 character string of garbage and the chances of two different collections of files having the same hash was something we'd never see before the sun burnt out</p>",
        "id": 258155235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634629855
    },
    {
        "content": "<p>It depends on how many characters you use</p>",
        "id": 258156705,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634630762
    },
    {
        "content": "<p>This is probably not an actual hash collision (because in that case I would expect an error of the form <code>declaration ... already exists</code>).<br>\nAs Ruben says, it depends on the number of characters you use. In the name of the private definition you see that it uses 10 digits, which is still a huge amount, but already a lot less (if we made 300k private definitions, we'd get some hash collisions).<br>\nSecondly, it depends on how you generate these hashes. For private definitions, no random number generator is used, so that the name will be the same if you compile the (same) library twice. So it computes it based on some data about the library. In Lean 2 we got a hash collision this way (<a href=\"https://github.com/leanprover/lean/issues/648\">leanprover/lean#648</a>), since for two private declarations this data was exactly the same.</p>",
        "id": 258157086,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634630988
    },
    {
        "content": "<p>I just got another curious error message in the <code>export as low-level text file</code> step:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>/home/ghrunner/actions-runner/_work/_temp/0b458b3b-45ef-4c14-a948-d0340aaa6393.sh: line 1: 1393818 Killed                  lean --recursive --export=mathlib.txt src/\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib/runs/3963242676\">https://github.com/leanprover-community/mathlib/runs/3963242676</a></p>",
        "id": 258534613,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634818856
    }
]