[
    {
        "content": "<p>Do we have a convention on whether we assume <code>n ≠ 0</code> or <code>0 &lt; n</code> in statements (for <code>n : nat</code>)? Should we have a linter for this?</p>",
        "id": 202195837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593278089
    },
    {
        "content": "<p>I would also like to standardize this and similar things (like <code>n ≠ 0</code> vs <code>0 &lt; n</code> in <code>ennreal</code> or <code>n ≠ \\top</code> vs <code>n &lt; \\top</code> in <code>ennreal</code>).</p>",
        "id": 202195927,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593278217
    },
    {
        "content": "<p>The convention is <code>0 &lt; n</code> but I would prefer <code>n ne 0</code></p>",
        "id": 202195939,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593278244
    },
    {
        "content": "<p>My vote would be to use inequalities as default: they are more easily usable. For example <code>n ≠ 0</code> and <code>n \\le m</code> doesn't immediately give <code>m ≠ 0</code>, but replace <code>ne 0</code> by inequalities and it's one step.<br>\n(inequalities are sometimes 1 step longer to prove, but I think \"immediate usability\" is more useful).</p>",
        "id": 202196004,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593278326
    },
    {
        "content": "<p>Why would you prefer <code>\\ne</code>, <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>?</p>",
        "id": 202196010,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593278342
    },
    {
        "content": "<p>It's usually easier to prove <code>ne 0</code>, <code>assume h : n = 0, simp * at *</code> works quite a lot. It's also more consistent with types other than <code>nat</code>, where a nonzero assumption is more common than positivity, so it's easier to prove a casted nat is nonzero if you already have <code>n ne 0</code></p>",
        "id": 202196158,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593278614
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 202196289,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593278844
    },
    {
        "content": "<p>I think assumptions like <code>a * b \\ne 0</code> are more common ways to prove nonzero-ness than transitivity of <code>le</code> or <code>lt</code></p>",
        "id": 202196357,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593278957
    },
    {
        "content": "<p>Before writing this post I was also intuitively leaning towards <code>≠</code>... I think unconsciously for reasons similar to the ones that Chris has listed.</p>",
        "id": 202196912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593279803
    },
    {
        "content": "<p>Ok, that's fair. I'm fine with switching to \"not equal\" as default.</p>",
        "id": 202197083,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593280073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> How hard is it to write a linter for this?</p>",
        "id": 202197971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281222
    },
    {
        "content": "<p>It's not hard. <br>\nSo the linter complains whenever you have an assumption of the form <code>0 &lt; _</code> in <code>nat</code>. That's easy. I think we want to allow other cases, like an <code>iff</code> containing <code>0 &lt; _</code>?</p>",
        "id": 202198231,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593281569
    },
    {
        "content": "<p>I don't know if we want that...</p>",
        "id": 202198238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281595
    },
    {
        "content": "<p>I think that apart from some cases that we explicitly <code>nolint</code>, we should strive to then keep <code>0 &lt; _</code> out of assumptions, and conclusions.</p>",
        "id": 202198281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281642
    },
    {
        "content": "<p>ok, it's also easy to check for any occurrence of <code>0 &lt; _</code> in <code>nat</code>.</p>",
        "id": 202198490,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593281966
    },
    {
        "content": "<p>Let's first get to a consensus though, few people have chimed in so far.</p>",
        "id": 202198496,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593281984
    },
    {
        "content": "<p>Let's ping some people with opinions: <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 202198571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593282073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 202198579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593282100
    },
    {
        "content": "<p>Lol... I could almost as well have just used <code>@maintainers</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 202198617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593282128
    },
    {
        "content": "<p>first let's remove all the <code>n &gt; 0</code> instances in core</p>",
        "id": 202198641,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593282169
    },
    {
        "content": "<p>For <code>n ≠ 0</code>, like this message (you can like both).</p>",
        "id": 202198694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593282247
    },
    {
        "content": "<p>For <code>0 &lt; n</code>, like this message (you can like both).</p>",
        "id": 202198697,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593282252
    },
    {
        "content": "<p>I love that ne is a function: you can just apply it when you're showing simple term mode stuff to mathematicians or explaining definitional equality. The more <code>ne</code> the better</p>",
        "id": 202200894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593285481
    },
    {
        "content": "<p>I don't see much point in a lint rule because it will be unavoidable to use both anyways.</p>",
        "id": 202202040,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593287154
    },
    {
        "content": "<p>I'd rather just write whatever is more natural/convenient locally, which I guess is the status quo.</p>",
        "id": 202202765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593288219
    },
    {
        "content": "<p>A lint rule seems excessive, except for the fact that it would be really nice to be much more consistent/principled about this choice, and from experience it may take a linting rule to push us to achieve this. :-)</p>",
        "id": 202211432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593303445
    },
    {
        "content": "<p>I'm about to change some occurrences of  <code>n ≠ 0</code> as hypotheses to <code>0 &lt; n</code> (where <code>n : ℕ</code>) eg in <code>data.multiset.erase_dup</code>. Is everybody fine with that?</p>",
        "id": 251339490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630392298
    },
    {
        "content": "<p>If the diff has a net negative size, then I would find it hard to object.</p>",
        "id": 251341435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630393671
    },
    {
        "content": "<p>There was a 10-to-1 vote in favor of <code>n ≠ 0</code> compared to <code>0 &lt; n</code> earlier in this thread, so I think not everybody is fine with that.</p>",
        "id": 251341618,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1630393802
    },
    {
        "content": "<p>Good point. I've just changed my vote to no vote</p>",
        "id": 251341780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630393899
    },
    {
        "content": "<p>The convention we have settled on in <code>ennreal</code> (with respect to top) is that in assumptions we should favor <code>a \\ne top</code>, and in conclusions we should favor <code>a &lt; top</code>. The reason being that it is very easy to go from the strict inequality to non-equality, so if you have strict inequality in the context it is trivial to apply a lemma using non-equality.</p>",
        "id": 251341927,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630394001
    },
    {
        "content": "<p>Well, I'm mostly removing some <code>nat.pos_of_ne_zero hn</code> where <code>hn : n ≠ 0</code>. So it does sound like I'm going in the right direction.</p>",
        "id": 251342009,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630394058
    },
    {
        "content": "<p>Also, the style guide indicates that <code>0 &lt; n</code> is the favored form.</p>",
        "id": 251342031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630394081
    },
    {
        "content": "<p>To be fair, if everything was using <code>n ≠ 0</code> this wouldn't happen.</p>",
        "id": 251345200,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630395919
    },
    {
        "content": "<p>Would it be evil to have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne.bot_lt</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⊥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">bot_lt_iff_ne_bot.mpr</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne.bot_lt'</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">⊥</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⊥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.symm.bot_lt</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne.lt_top</span> <span class=\"o\">[</span><span class=\"n\">order_top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_top_iff_ne_top.mpr</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne.lt_top'</span> <span class=\"o\">[</span><span class=\"n\">order_top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.symm.lt_top</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 251346067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630396446
    },
    {
        "content": "<p>It wouldn't be evil at all, but it would still be longer to type than <code>h.ne</code> to go from <code>h : a &lt; top</code> to <code>a \\ne top</code> (or <code>h.ne'</code> for the other non-equality) :-)</p>",
        "id": 251347434,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630397208
    },
    {
        "content": "<p>Completely agreed. So I think your rule of thumb \"inputs use <code>\\ne</code>, outputs use <code>&lt;</code>\" is a very good one. But we will still need to move from <code>\\ne</code> to <code>&lt;</code> occasionaly.</p>",
        "id": 251347567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630397285
    },
    {
        "content": "<p>Does everyone agree that I update the style guide to mention this rule of thumb?</p>",
        "id": 251347668,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630397360
    },
    {
        "content": "<p>I would first see how often <code>n ≠ 0</code> and <code>0 &lt; n</code> are used, because in my experience I encountered <code>0 &lt; n</code> much more.</p>",
        "id": 251353721,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630400965
    },
    {
        "content": "<p>I've seen both, and I've made an active effort to write an API that uses <code>n ≠ 0</code> as inputs and <code>0 &lt; n</code> as outputs as much as possible</p>",
        "id": 251354983,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630401614
    },
    {
        "content": "<p>The question isn't so much what exists now, but what's most useful going forward. There seemed to be a fair amount of support for ne in hypotheses upthread, at least.</p>",
        "id": 251359543,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1630404014
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8935\">#8935</a> has the dot-notation lemmas from above</p>",
        "id": 251371804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630410821
    },
    {
        "content": "<p>I have updated the style guide, see the paragraph <code>Normal forms</code> at the end of <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/templates/contribute/style.md#normal-forms\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/templates/contribute/style.md#normal-forms</a></p>",
        "id": 251373650,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630411681
    }
]