[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I was just looking at your remarks here <a href=\"#narrow/stream/303200-sphere-eversion/topic/formulating.20continuity.20lemmas\">https://leanprover.zulipchat.com/#narrow/stream/303200-sphere-eversion/topic/formulating.20continuity.20lemmas</a> as well as the corresponding <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement\">library note</a>.</p>",
        "id": 260393835,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636112039
    },
    {
        "content": "<p>For example, should we therefore add the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.module</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous_add'</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">continuous_add</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">$</span> <span class=\"n\">hf.prod_mk</span> <span class=\"n\">hg</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous_sub'</span> <span class=\"o\">[</span><span class=\"n\">has_sub</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_sub</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">continuous_sub</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">$</span> <span class=\"n\">hf.prod_mk</span> <span class=\"n\">hg</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous_neg'</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_neg.comp</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous_smul'</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_smul</span> <span class=\"n\">M</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">continuous_smul</span> <span class=\"n\">M</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">continuous_const.prod_mk</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 260393928,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636112091
    },
    {
        "content": "<p>Oh wait, I think I'm being silly. Ignore!</p>",
        "id": 260394089,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636112225
    },
    {
        "content": "<p>Why is that question silly?</p>",
        "id": 260394136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636112257
    },
    {
        "content": "<p>Well for one thing, I had forgotten that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.add\">docs#continuous.add</a> etc</p>",
        "id": 260394153,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636112279
    },
    {
        "content": "<p>Oh, I thought your question was about using <code>(λ x, f x + g x)</code> vs <code>f + g</code> in the statement.</p>",
        "id": 260394216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636112305
    },
    {
        "content": "<p>Nope!</p>",
        "id": 260394253,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636112337
    },
    {
        "content": "<p>Yeah, we have the versions like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.add\">docs#continuous.add</a>. I don't think it matters too much whether we formulate with <code>(λ x, f x + g x)</code> vs <code>f + g</code> (that distinction matters for <code>rw</code> and <code>simp</code>, but these continuity proofs are usually proven using term-mode)</p>",
        "id": 260396175,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636113778
    },
    {
        "content": "<p>I think <code>continuity</code> uses the <code>reducible</code> transparency level by default, in which case you would want the lemma statement to syntactically match whatever you have, which is most often the form with the lambda</p>",
        "id": 260397460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636114750
    },
    {
        "content": "<p>Is this a feature of a limitation of <code>continuity</code>?</p>",
        "id": 260397727,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636114963
    },
    {
        "content": "<p>Probably a necessary feature. Otherwise it would spend too much time unfolding definitions.</p>",
        "id": 260398875,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636115638
    }
]