[
    {
        "content": "<p>At the moment we have two types for integers mod n <code>zmod</code> and <code>zmodp</code> depending on whether <code>n</code> is <code>prime</code> or not, so that the field instance can be synthesized. This means that a lot of proofs are duplicated. I think there are other places where this sort of problem could come up.</p>\n<p>Here's an idea I came up with that might make this nicer</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mport</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">option&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">option&#39;</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">option&#39;</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"n\">option&#39;</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>This way proofs that apply whether or not <code>n</code> is prime can be stated in full generality in one statement, and the field instances can be put on the type <code>zmod n (some _)</code>  What do people think of this strategy?</p>",
        "id": 178039299,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570975380
    },
    {
        "content": "<p>Alternatively, we make a <code>coe</code> from <code>nat.primes</code> to <code>pnat</code>. And we ditch <code>zmodp</code>. Then just use <code>zmod</code>.</p>",
        "id": 178045239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570985265
    },
    {
        "content": "<p>Then the idea is to put the instance on <code>zmod ((coe : primes -&gt; pnat) p)</code>?</p>",
        "id": 178045575,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570985830
    },
    {
        "content": "<p>the field instance I mean</p>",
        "id": 178045579,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570985834
    },
    {
        "content": "<p>Exactly</p>",
        "id": 178045673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570985991
    },
    {
        "content": "<p>Parts of the library are currently using <code>[nat.prime p]</code>. But then, we can't write <code>instance : nat.prime (ring_char k)</code> for finite fields <code>k</code>. Because <code>nat.prime</code> is not actually a class. There's still a bunch of things that have to be sorted out here.</p>",
        "id": 178045759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570986089
    },
    {
        "content": "<p>Otoh, maybe <code>ring_char</code> is actually bad. If you have 3 or more fields, it might be more practical to show that they all have <code>char_p _ p</code> then showing that they all pairwise have the same <code>ring_char</code>.</p>",
        "id": 178045885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570986255
    },
    {
        "content": "<p>This seems sensible to me. Because you almost always have the assumption <code>p.prime</code> as an assumption to the theorem, it shouldn't be as annoying as <code>pnat</code>, because you never start with a natural number and then prove it's prime like you do with positivity. I think perhaps refactors like this should wait until Lean 4 when we know exactly what type class inference will be like</p>",
        "id": 178046451,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570987096
    }
]