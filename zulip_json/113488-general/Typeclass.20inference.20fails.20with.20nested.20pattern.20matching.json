[
    {
        "content": "<p>Lean has no problems with</p>\n<div class=\"codehilite\"><pre><span></span>def foo : nat → unit\n| 0 := ()\n| (k+1) :=\n  if (0 &lt; k)\n  then ()\n  else ()\n</pre></div>\n\n\n<p>But if I change the first match case </p>\n<div class=\"codehilite\"><pre><span></span>def bar : nat → unit\n| 0 :=\n  match 0 with\n  | _ := ()\n  end\n| (k+1) :=\n  if (0 &lt; k)\n  then ()\n  else ()\n</pre></div>\n\n\n<p>Then Lean suddenly can't decide <code>0 &lt; k</code>. But if you swap the match case order</p>\n<div class=\"codehilite\"><pre><span></span>def baz : nat → unit\n| (k+1) :=\n  if (0 &lt; k)\n  then ()\n  else ()\n| 0 :=\n  match 0 with\n  | _ := ()\n  end\n</pre></div>\n\n\n<p>Then it works again. Apparently Lean doesn't like nested pattern matching, but it's a bit strange that this should affect typeclass inference or be sensitive to the match case order. Any thoughts on what's going on here?</p>",
        "id": 158945966,
        "sender_full_name": "Seul Baek",
        "timestamp": 1550638166
    },
    {
        "content": "<p>I think the main problem there is that the type of <code>0</code> in the match is not known</p>",
        "id": 158946699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550639052
    },
    {
        "content": "<p>If I modify <code>bar</code> to</p>\n<div class=\"codehilite\"><pre><span></span>def bar&#39; : nat → unit\n| (k+2) :=\n  match k with\n  | _ := ()\n  end\n| (k+1) :=\n  if (0 &lt; k)\n  then ()\n  else ()\n| _ := ()\n</pre></div>\n\n\n<p>The problem still persists, so I think it's likely something else</p>",
        "id": 158946864,
        "sender_full_name": "Seul Baek",
        "timestamp": 1550639328
    },
    {
        "content": "<p>It's some race condition, I think. I've got it down to this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"o\">()</span> <span class=\"o\">()</span>\n</pre></div>",
        "id": 158947045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550639635
    },
    {
        "content": "<p>filling any of the underscores makes it work</p>",
        "id": 158947093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550639652
    },
    {
        "content": "<p>Thanks. I guess the rule of thumb is to supply more explicit type information whenever something like this happens</p>",
        "id": 158947757,
        "sender_full_name": "Seul Baek",
        "timestamp": 1550640704
    }
]