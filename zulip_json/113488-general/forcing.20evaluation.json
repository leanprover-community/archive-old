[
    {
        "content": "<p>I want to write <code>example</code>s  to document the behavior of functions I write. I don't want to have to write proofs, rather just enforce that the output matches the expected string. When things get 'complicated enough' I cannot prove that a <code>to_string</code> method yields a particular string via <code>refl</code>. E.g. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">def</span> <span class=\"n\">ts_a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"mi\">0</span>\n<span class=\"kn\">instance</span><span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">ts_a</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_string</span> <span class=\"n\">a</span> <span class=\"c1\">-- &quot;0&quot;...as expected</span>\n<span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;(0, 0)&quot;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"n\">to_string</span> <span class=\"n\">a</span> <span class=\"bp\">=</span><span class=\"s2\">&quot;0&quot;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- doesn&#39;t work</span>\n</code></pre></div>\n\n\n<p>Is there anything at the term level that forces evaluation?</p>",
        "id": 204168316,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594958046
    },
    {
        "content": "<p>Hmm, they both work for me if I add <code>open A</code> after <code>inductive A</code>.</p>",
        "id": 204168583,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594958408
    },
    {
        "content": "<p>(without <code>open A</code>, neither of them work...)</p>",
        "id": 204168594,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594958437
    },
    {
        "content": "<p>hm I have <code>open A</code> in my machine (forgot to paste it into zulip)</p>",
        "id": 204168609,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594958466
    },
    {
        "content": "<p>This is my full file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kn\">open</span> <span class=\"n\">A</span>\n<span class=\"n\">def</span> <span class=\"n\">ts_a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"mi\">0</span>\n<span class=\"kn\">instance</span><span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">ts_a</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_string</span> <span class=\"n\">a</span> <span class=\"c1\">-- &quot;0&quot;...as expected</span>\n<span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;(0, 0)&quot;</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"n\">to_string</span> <span class=\"n\">a</span> <span class=\"bp\">=</span><span class=\"s2\">&quot;0&quot;</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>I'm using Lean 3.17.1, though I don't think the version should matter...</p>",
        "id": 204168677,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594958579
    },
    {
        "content": "<p>Oh, I changed the <code>by refl</code>s to <code>rfl</code>s when I was messing around, but it works either way.</p>",
        "id": 204168697,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594958635
    },
    {
        "content": "<p>What's the full error you're seeing for the one that doesn't work?</p>",
        "id": 204168765,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594958735
    },
    {
        "content": "<p>I'm using 3.16.5</p>\n<p>Error is \"invalid apply tactic, failed to unify <code>to_string a = \"a\" </code> with <code>?m_2 = ?m_2</code></p>",
        "id": 204168882,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594958903
    },
    {
        "content": "<p>oh oops, I had changed the value from \"0\" to \"a\" at some point. </p>\n<p>But the problem is still real for more complicated things - I was just trying to come up with a minimal example on the fly.</p>",
        "id": 204168900,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594958981
    },
    {
        "content": "<p>Let me try to dig up a not-too-big one</p>",
        "id": 204168902,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594958994
    },
    {
        "content": "<p>I think I know what you're getting at, and I seem to recall someone joking (?) about us needing a <code>norm_string</code> tactic (like <code>norm_num</code> for strings).</p>",
        "id": 204168985,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594959108
    },
    {
        "content": "<p>Found it: <a href=\"#narrow/stream/113489-new-members/topic/deep.20recursion.20with.20append/near/201199589\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/deep.20recursion.20with.20append/near/201199589</a></p>",
        "id": 204169047,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594959166
    },
    {
        "content": "<p>the ugly example </p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">alist</span>\n  <span class=\"kn\">abbreviation</span> <span class=\"n\">pairmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">alist</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"err\">Σ</span> <span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"n\">def</span> <span class=\"n\">to_pairmap</span><span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n                               <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pairmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n    <span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">d</span> <span class=\"o\">[]</span>         <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">to_alist</span> <span class=\"n\">α</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"err\">Σ</span> <span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">d</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">alist</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"err\">Σ</span> <span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n                              <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"o\">(),</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span>\n                              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_pairmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">d</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">alist</span><span class=\"bp\">.</span><span class=\"n\">lookup</span> <span class=\"s2\">&quot;r&quot;</span> <span class=\"o\">(</span><span class=\"n\">to_pairmap</span> <span class=\"o\">[(</span><span class=\"s2\">&quot;x&quot;</span><span class=\"o\">,</span><span class=\"s2\">&quot;a&quot;</span><span class=\"o\">)])))</span> <span class=\"c1\">-- none</span>\n<span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">alist</span><span class=\"bp\">.</span><span class=\"n\">lookup</span> <span class=\"s2\">&quot;r&quot;</span> <span class=\"o\">(</span><span class=\"n\">to_pairmap</span> <span class=\"o\">[(</span><span class=\"s2\">&quot;x&quot;</span><span class=\"o\">,</span><span class=\"s2\">&quot;a&quot;</span><span class=\"o\">)])))</span><span class=\"bp\">=</span><span class=\"s2\">&quot;none&quot;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>\n\n\n<p>and the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid apply tactic, failed to unify</span>\n<span class=\"cm\">  to_string (alist.lookup &quot;r&quot; (to_pairmap [(&quot;x&quot;, &quot;a&quot;)])) = &quot;none&quot;</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  ?m_2 = ?m_2</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ to_string (alist.lookup &quot;r&quot; (to_pairmap [(&quot;x&quot;, &quot;a&quot;)])) = &quot;none&quot;</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 204169211,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594959459
    },
    {
        "content": "<p>yeah if there were a way to capture the output of <code>#eval</code> and use it in a <code>meta example</code> that would work</p>",
        "id": 204169221,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594959481
    },
    {
        "content": "<p>Depending on what you're aiming for, you could do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">run_cmd</span> <span class=\"n\">guard</span> <span class=\"err\">$</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">alist</span><span class=\"bp\">.</span><span class=\"n\">lookup</span> <span class=\"s2\">&quot;r&quot;</span> <span class=\"o\">(</span><span class=\"n\">to_pairmap</span> <span class=\"o\">[(</span><span class=\"s2\">&quot;x&quot;</span><span class=\"o\">,</span><span class=\"s2\">&quot;a&quot;</span><span class=\"o\">)]))</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;none&quot;</span>\n</code></pre></div>\n\n\n<p><strong>edit</strong>: the <code>do</code> was unnecessary</p>",
        "id": 204169693,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594960139
    },
    {
        "content": "<p>that works  perfectly for this example! I'll have to look up how it works</p>",
        "id": 204169785,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594960259
    },
    {
        "content": "<p>It would be great to be able to put this inside a function that takes something with <code>has_to_string</code> and a string to test against</p>",
        "id": 204169946,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594960503
    },
    {
        "content": "<p>though naively trying that I  get <code>type of sorry macro is not a sort</code></p>",
        "id": 204169953,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594960525
    },
    {
        "content": "<p>I don't know yet if we can define our own macros</p>",
        "id": 204170022,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594960623
    },
    {
        "content": "<p>Is this close to what you want?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test_string</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_to_string</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">guard</span> <span class=\"err\">$</span> <span class=\"n\">to_string</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">test_string</span> <span class=\"o\">(</span><span class=\"n\">alist</span><span class=\"bp\">.</span><span class=\"n\">lookup</span> <span class=\"s2\">&quot;r&quot;</span> <span class=\"o\">(</span><span class=\"n\">to_pairmap</span> <span class=\"o\">[(</span><span class=\"s2\">&quot;x&quot;</span><span class=\"o\">,</span><span class=\"s2\">&quot;a&quot;</span><span class=\"o\">)]))</span> <span class=\"s2\">&quot;none&quot;</span>\n</code></pre></div>",
        "id": 204170162,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594960815
    },
    {
        "content": "<p>yes! this is exactly what I need to write a test suite - thank you!</p>",
        "id": 204170310,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594961058
    },
    {
        "content": "<p>There is no need to call <code>to_string</code> for this kind of test</p>",
        "id": 204171646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594963130
    },
    {
        "content": "<p>you can just <code>guard $ alist.lookup \"r\" (to_pairmap [(\"x\",\"a\")]) = none</code></p>",
        "id": 204171663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594963168
    }
]