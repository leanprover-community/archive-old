[
    {
        "content": "<p><code>fin 1</code> is a subtype of nat so there's a subtype.decidable_eq, and <code>fin 1</code> is also a subsingleton so there's a decidable_eq_of_subsingleton. Amelia is defining a function as a composite of two quite complicated functions, and one of them is expecting a (fin n) at some point and is using the subtype instance, and the other one is expecting a subsingleton. When she puts in <code>fin 1</code> things go pear-shaped at some point. She can't use the <code>convert</code> trick because she's defining data. I've tried fiddling with priorities but it won't fix the problem. Help!</p>",
        "id": 225580525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612806058
    },
    {
        "content": "<p><code>congr</code> should eliminate the different instances because we have a <code>subsingleton (decidable p)</code> somewhere</p>",
        "id": 225582929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807168
    },
    {
        "content": "<p>But if I use this in the middle of a definition won't it give me a term I can't ever prove something about?</p>",
        "id": 225583065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612807208
    },
    {
        "content": "<p><code>convert</code> can totally be used for data, just make sure to <code>#print</code> the definition afterwards to check its not insane</p>",
        "id": 225583096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807219
    },
    {
        "content": "<p>I've had some data definitions that I could only satisfy the elaborator by using tactic mode</p>",
        "id": 225583265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807278
    },
    {
        "content": "<p>In your case, what will probably happen is that the <code>decidable</code> argument will be replaced with a <code>eq.rec _</code></p>",
        "id": 225583331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807304
    },
    {
        "content": "<p>It's got <code>_.mpr</code> in it, and <code>_</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">ι_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">e_5</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">ι_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_13</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_13_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ι_1</span><span class=\"o\">],</span>\n   <span class=\"n\">eq.trans</span>\n     <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n       <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">ι_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_5</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">ι_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_13</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">],</span>\n         <span class=\"n\">eq.drec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"n\">alternating_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">ι</span><span class=\"o\">))</span> <span class=\"n\">e_5</span><span class=\"o\">)</span>\n        <span class=\"n\">N</span>\n        <span class=\"n\">ι</span>\n        <span class=\"n\">ι_1</span>\n        <span class=\"n\">e_5</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"n\">alternating_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">ι_1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">subsingleton.elim</span> <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"n\">_inst_13</span> <span class=\"n\">e_5</span><span class=\"o\">)</span> <span class=\"n\">_inst_13_1</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>of type <code>alternating_map R M M (fin 1) = alternating_map R M M (fin 1)</code></p>",
        "id": 225583350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612807313
    },
    {
        "content": "<p>This worries me. Should it?</p>",
        "id": 225583417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612807325
    },
    {
        "content": "<p><code>alternating_map R M M (fin 1) : Type u</code></p>",
        "id": 225583448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612807345
    },
    {
        "content": "<p>Hmm, that's not quite as ideal as I'd hoped</p>",
        "id": 225583525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807375
    },
    {
        "content": "<p>Call the broken function with @ and stick a <code>by congr</code> in the decidable argument?</p>",
        "id": 225583588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807395
    },
    {
        "content": "<p>Also I'm glad to see <code>alternating_map</code> is being used!</p>",
        "id": 225583629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807419
    },
    {
        "content": "<p>oh yeah, this is your fault ;-)</p>",
        "id": 225583657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612807433
    },
    {
        "content": "<p>Oh, I see why this is a problem - it's not just a function with a <code>decidable</code> argument, it's a dependent function whose return type itself depends on the decidable argument</p>",
        "id": 225583867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807516
    },
    {
        "content": "<p>There's almost 5000 lines of it being used in the <code>koszul_cx</code> branch</p>",
        "id": 225583870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612807517
    },
    {
        "content": "<p>So yes, the output above looks exactly like I would expect it to be, and I don't know how to avoid that, other than just using classical instances throughout the <a href=\"https://github.com/leanprover-community/mathlib/tree/koszul_cx\">branch#koszul_cx</a> stuff</p>",
        "id": 225583933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807559
    },
    {
        "content": "<p>Oh - the fix is maybe to make <code>multilinear_map.of_subsingleton</code> take the decidable argument explicitly</p>",
        "id": 225584515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807828
    },
    {
        "content": "<p>Rather than deduce it from  <code>subsingleton</code> within the definition.</p>",
        "id": 225584530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807836
    },
    {
        "content": "<p>The elaborator should work out that only the non-deduced one will fill the gap correctly</p>",
        "id": 225584549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612807847
    },
    {
        "content": "<p>Does <code>local attribute [-instance] decidable_eq_of_subsingleton</code> before the definition help?</p>",
        "id": 225588375,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612809473
    },
    {
        "content": "<p>I've minimised. I'm trying to define <code>oops</code>. Let's say that everything else is in mathlib. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.unique</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">alternating_map</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">epow_lift</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">alternating_map</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of_unique</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">alternating_map</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:=</span> <span class=\"n\">epow_lift</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">of_unique</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  epow_lift 1 (of_unique (fin 1))</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  of_unique (fin 1)</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @alternating_map (fin 1) (λ (a b : fin 1), @decidable_eq_of_subsingleton (fin 1) _ a b)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @alternating_map (fin 1)</span>\n<span class=\"cm\">    (λ (a b : fin 1), @subtype.decidable_eq ℕ (λ (x : ℕ), x &lt; 1) (λ (a b : ℕ), nat.decidable_eq a b) a b)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 225594662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612812341
    },
    {
        "content": "<p>The truth is that I can change <code>of_unique</code>, but I don't see how that helps. But the whole truth is that Amelia says that perhaps in her use case she doesn't even need to write <code>of_unique</code> and can just specialise to iota = <code>fin 1</code>, so here we are lucky. But I don't see a way around this in general, if everything really was in mathlib, and I don't see why it couldn't have been.</p>",
        "id": 225595080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612812527
    },
    {
        "content": "<p>Changing <code>of_unique</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">of_unique</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">alternating_map</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>makes the problem go away, and is also the right thing to do - any <code>decidable</code> instances needed by a \"lemma statement\" (or in this case, return type) should be provided explicitly, and not inferred from other typeclasses.</p>",
        "id": 225595366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612812650
    },
    {
        "content": "<p>@Sebastien I can't see how any changing instances, or instance priorities, can help, because the subtype decidable instance is embedded in the def of <code>epow_lift</code> and the subsingleton decidable instance is embedded in <code>of_unique</code>.</p>",
        "id": 225595442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612812688
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/classicalize/near/224871122\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/classicalize/near/224871122</a></p>",
        "id": 225595585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612812729
    },
    {
        "content": "<p>I don't really understand this, but in our actual use case if I add [decidable_eq iota] in the definition of <code>of_unique</code> then I get an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">_inst_6</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">inferred</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">decidable_eq_of_subsingleton</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>in <code>of_unique</code>.</p>",
        "id": 225595948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612812903
    },
    {
        "content": "<p><del>It needs to be after <code>unique</code></del></p>",
        "id": 225596128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612812985
    },
    {
        "content": "<p>got it!</p>",
        "id": 225596237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612813065
    },
    {
        "content": "<p>What was the fix?</p>",
        "id": 225596254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612813071
    },
    {
        "content": "<p>The actual def in the use case used another function which also had the property that it violated Yury's rule of thumb, so I needed to add another one.</p>",
        "id": 225596344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612813099
    },
    {
        "content": "<p>Oh this is great. I'm so glad I asked. So indeed the part of the definition I had access to was precisely the part which violated Yury's rule of thumb (which I've read and which I now understand -- I didn't before). Thanks Eric and Sebastian!</p>",
        "id": 225596533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612813207
    },
    {
        "content": "<p><code>of_unique</code> sounds like it would be a straightforward thing to PR to mathlib</p>",
        "id": 225596630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612813276
    },
    {
        "content": "<p>Unfortunately <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> has instead adopted the principle of writing 4900 lines of code and not making a single PR :-(</p>",
        "id": 225597324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612813616
    },
    {
        "content": "<p>You can see the argument from her side -- she is a final year MSc student working hard on her studies in a lockdown situation where teaching is suboptimal, and also trying to write a project for me, and PR's are hassle, especially large ones.</p>",
        "id": 225597506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612813687
    },
    {
        "content": "<p>I'll try and PR something this week I swear :P</p>",
        "id": 225598539,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1612814132
    },
    {
        "content": "<p>Feedback on how we can make the PR process less of a hassle is always welcome!</p>",
        "id": 225598710,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612814200
    }
]