[
    {
        "content": "<p>Hi, I was wondering whether there is not a small issue with <code>nth_rewrite</code>. For instance, doing this will give me \"goals accomplished\" in vscode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>before telling me <code>tactic failed, result contains meta-variables</code> after the proof. Any ideas? Basically, nth_rewrite seems to never add to the goal stack the missing hypotheses</p>",
        "id": 273238339,
        "sender_full_name": "Guillaume",
        "timestamp": 1645800683
    },
    {
        "content": "<p>Looks like an issue similar to <a href=\"https://github.com/leanprover-community/mathlib/pull/3349\">#3349</a>. You can check it's not already reported on the GitHub issues page and if not please report it. In the meantime <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#recover\">tactic#recover</a> might help you rescue your proof for now. Just run it after the nth rewrite to see the side hypothesis goals generated</p>",
        "id": 273243868,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645803273
    },
    {
        "content": "<p><code>recover</code> does indeed recover, although I think there's also a small issue with the mathematics as well ;-)</p>",
        "id": 273250536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645806668
    },
    {
        "content": "<p>thanks! I tried <code>recover</code>, but the tactic state is not what I would expect: it provides <code>0 &lt; ?m_3</code> while I would expect <code>0 &lt; -1</code></p>",
        "id": 273253097,
        "sender_full_name": "Guillaume",
        "timestamp": 1645807806
    },
    {
        "content": "<p>does it work to supply e.g. <code>zero_lt_one</code>?</p>",
        "id": 273253183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645807848
    },
    {
        "content": "<p>it sounds like the rewrite didn't actually work</p>",
        "id": 273253257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645807889
    },
    {
        "content": "<p>You reached a situation the current <code>recover</code> didn't invision: you have metavariables that do not occur in the <code>result</code>, but only in the types of other metavariables. Here is one way to get your desired goal <code>0 &lt; -1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">metavariables_aux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">donemvars</span> <span class=\"n\">todo</span>         <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">donemvars</span> <span class=\"bp\">++</span> <span class=\"n\">todo</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">donemvars</span> <span class=\"o\">[]</span>           <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">donemvars</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">donemvars</span> <span class=\"o\">(</span><span class=\"n\">mvar</span><span class=\"o\">::</span><span class=\"n\">todo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">tp</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">mvar</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">newmvars</span> <span class=\"o\">:=</span> <span class=\"n\">expr.list_meta_vars</span> <span class=\"n\">tp</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">newmvars</span> <span class=\"o\">:=</span> <span class=\"n\">newmvars.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">mvar</span><span class=\"o\">,</span> <span class=\"n\">mvar</span> <span class=\"bp\">∉</span> <span class=\"n\">todo</span> <span class=\"bp\">∧</span> <span class=\"n\">mvar</span> <span class=\"bp\">∉</span> <span class=\"n\">donemvars</span><span class=\"o\">),</span>\n  <span class=\"n\">metavariables_aux</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">mvar</span><span class=\"o\">::</span><span class=\"n\">donemvars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">todo</span><span class=\"bp\">++</span><span class=\"n\">newmvars</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">metavariables'</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">result</span><span class=\"o\">,</span>\n  <span class=\"n\">metavariables_aux</span> <span class=\"mi\">10</span> <span class=\"o\">[]</span> <span class=\"n\">e.list_meta_vars</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.recover'</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">metavariables'</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.set_goals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">recover'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span>\n  <span class=\"c1\">-- goal: ⊢ 0 &lt; -1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I will PR this.</p>",
        "id": 273258201,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645809919
    },
    {
        "content": "<p>This is not really satisfactory though... It will give metavariables that can have only one possible value, or otherwise <code>result</code> will be type-incorrect. Is there a way to say to Lean \"solve this goal in the only way that will make <code>result</code> type-correct\"? I tried variations of <code>instantiate_mvars</code> and <code>type_check</code> on <code>result</code>, but I don't see how to do this.</p>",
        "id": 273260098,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645810783
    }
]