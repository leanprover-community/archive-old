[
    {
        "content": "<p>I'm coming to Lean as a programmer first who is working on group and category theory on the side. In order to fill in the gap on documentation on how to use Lean from the perspective of a programmer I created, <a href=\"https://agentultra.github.io/lean-for-hackers/\" target=\"_blank\" title=\"https://agentultra.github.io/lean-for-hackers/\">https://agentultra.github.io/lean-for-hackers/</a></p>\n<p>It's a guide meant for programmers and enthusiasts, for Lean 3, hence the title.</p>\n<p>I hope someone finds it useful. Appreciate any feedback.</p>",
        "id": 184981469,
        "sender_full_name": "James King",
        "timestamp": 1578371302
    },
    {
        "content": "<p>I was inspired a bit by my own frustrations and watching George Hotz's twitch stream when he was running into issues getting started.</p>",
        "id": 184981488,
        "sender_full_name": "James King",
        "timestamp": 1578371380
    },
    {
        "content": "<p>It's also a work in progress. Starting with your typical, \"Hello, world\" style examples.</p>",
        "id": 184981883,
        "sender_full_name": "James King",
        "timestamp": 1578372087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220270\">@James King</span> Nice, it's sort of the complement of the usual guides (-;</p>",
        "id": 184983439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578374627
    },
    {
        "content": "<p>This is really nice! One comment: \"Lean doesn’t have any concept of an implicit entry-point into our program\", if you run lean as <code>lean --run</code> then function <code>main</code> is run as an entry point, this might be more familiar for hackers.</p>",
        "id": 184984436,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1578376357
    },
    {
        "content": "<blockquote>\n<p>If you don’t use one of those editors, Lean speaks LSP. </p>\n</blockquote>\n<p>Lean 3 doesn't actually speak LSP, though apparently <a href=\"#narrow/stream/113488-general/topic/VScode.20goodies/near/181310242\" title=\"#narrow/stream/113488-general/topic/VScode.20goodies/near/181310242\">Lean 4 will</a>. For Lean 3, you can send JSON messages to <code>lean --server</code> via stdin and then receive JSON responses from stdout. The message format can be deduced from the code in the <a href=\"https://github.com/leanprover/lean-client-js/tree/master/lean-client-js-core/\" target=\"_blank\" title=\"https://github.com/leanprover/lean-client-js/tree/master/lean-client-js-core/\">lean-client-js-core</a> package.</p>",
        "id": 184985918,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578378689
    },
    {
        "content": "<p>Thanks for the feedback! I'll get that updated ASAP. And maybe add a disclaimer that it's a work in progress. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 185013629,
        "sender_full_name": "James King",
        "timestamp": 1578406466
    }
]