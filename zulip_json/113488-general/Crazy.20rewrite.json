[
    {
        "content": "<p>My students explore Lean by typing random commands. Does anyone understand how the following proof works?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x&#39;</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"n\">gof</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">gof</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189493782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583158208
    },
    {
        "content": "<p>The issue being that it should be <code>apply</code> not <code>rw</code>. This is a common issue with mathematicians, they can't tell the difference between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span>, and indeed in work of schoolkids I've seen the terms used interchangeably. It's very surprising to me that this works!</p>",
        "id": 189493958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583158344
    },
    {
        "content": "<p>The first <code>rw hf x</code> closes the first goal, but creates a new one for the assumption to <code>injective</code></p>",
        "id": 189493998,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1583158369
    },
    {
        "content": "<p>Yes, exactly. I feel betrayed by Lean!</p>",
        "id": 189494010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583158377
    },
    {
        "content": "<p>Well spotted Chris :-)</p>",
        "id": 189494060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583158410
    },
    {
        "content": "<p>Sorry, I don't buy this explanation.</p>",
        "id": 189494172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583158476
    },
    {
        "content": "<p>Oooh, maybe I see.</p>",
        "id": 189494199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583158509
    },
    {
        "content": "<p>This is evil.</p>",
        "id": 189494210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583158517
    },
    {
        "content": "<p>When you do <code>rw</code> it creates new goals for assumptions to the lemmas you used.</p>",
        "id": 189494238,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1583158542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113488-general/topic/Crazy.20rewrite/near/189493998\" title=\"#narrow/stream/113488-general/topic/Crazy.20rewrite/near/189493998\">said</a>:</p>\n<blockquote>\n<p>The first <code>rw hf x</code> closes the first goal, but creates a new one for the assumption to <code>injective</code></p>\n</blockquote>\n<p>I was interested enough by this to pause my work on formalizing incidence geometry in Lean and step through this proof, and was wondering why the heck <code>rw</code> was acting like <code>apply</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 189494239,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1583158543
    },
    {
        "content": "<p>Can you imagine the random walk that led to this? Note that <code>rw hf</code> won't do the trick.</p>",
        "id": 189494313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583158588
    },
    {
        "content": "<p>But I don't have a choice. I promised I would give full credit for Lean proofs that work and don't use the mathlib version of the statement. But I also asked for a pen and paper proof of the same result, and there I can remove credit.</p>",
        "id": 189494451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583158700
    },
    {
        "content": "<p>The follow-your-nose approach often leads to proofs you don't really understand.</p>",
        "id": 189494529,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1583158782
    },
    {
        "content": "<p>Maybe they used <code>hint</code>? And maybe <code>hint</code> ranked <code>rw</code> higher than <code>apply</code>. (It's shorter after all. Do they get points for golfing?)</p>",
        "id": 189494537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583158786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Crazy.20rewrite/near/189494537\" title=\"#narrow/stream/113488-general/topic/Crazy.20rewrite/near/189494537\">said</a>:</p>\n<blockquote>\n<p>Maybe they used <code>hint</code>? And maybe <code>hint</code> ranked <code>rw</code> higher than <code>apply</code>. (It's shorter after all. Do they get points for golfing?)</p>\n</blockquote>\n<p>Ooh ... proof golfing ... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 189494608,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1583158812
    },
    {
        "content": "<p>I don't think <code>hint</code> suggests tactics like <code>rw</code> and <code>apply</code> that take parameters.</p>",
        "id": 189495245,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583159239
    },
    {
        "content": "<p>Their mathlib was frozen at the beginning of the term in early January, so they don't have <code>hint</code>.</p>",
        "id": 189495368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583159300
    }
]