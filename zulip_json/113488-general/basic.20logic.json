[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_or_infinite_peaks</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>(<code>is_peak a i</code> is just some random predicate). This is true by pure logic. Is there a tactic which does this for me? I tried <code>cc</code> and <code>finish</code> and now I'm out of ideas.</p>",
        "id": 158114114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549975414
    },
    {
        "content": "<p><code>tauto</code>?</p>",
        "id": 158114194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549975496
    },
    {
        "content": "<p>I'm happy to be classical if this is an issue</p>",
        "id": 158114195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549975497
    },
    {
        "content": "<p>Didn't  try it though...</p>",
        "id": 158114206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549975505
    },
    {
        "content": "<p>tauto doesn't work for me. I hope I've not made a typo :-) I didn't try to prove it :-)</p>",
        "id": 158114229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549975529
    },
    {
        "content": "<p>OK, no typo :-)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_or_infinite_peaks</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">forall_not_of_not_exists</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_forall</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_imp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Help!</p>",
        "id": 158114663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549975846
    },
    {
        "content": "<p>Just to be clear, the question is how to pwn it, not how to prove it.</p>",
        "id": 158114700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549975884
    },
    {
        "content": "<p>Did you try something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_or_infinite_peaks</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 158114763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549975955
    },
    {
        "content": "<p>I agree there should be a tactic for this. I started to work on it, but have too many things going on...</p>",
        "id": 158114800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549976002
    },
    {
        "content": "<p>Better:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_or_infinite_peaks</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">or_iff_not_imp_left</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 158114921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549976130
    },
    {
        "content": "<p>I realized while teaching that students don't like <code>left</code> vs <code>right</code> when proving disjunctions, what they feel to be natural is exactly this \"or_iff_not_imp_left\" style of proof</p>",
        "id": 158115060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549976259
    },
    {
        "content": "<p>I mean normal students, not constructive Kenny</p>",
        "id": 158115146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549976313
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_peak</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_or_infinite_peaks</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">not_forall</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_peak</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 158115295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549976463
    },
    {
        "content": "<p>I would usually use <code>by_cases ∃ N, ∀ i, is_peak a i → i ≤ N</code> and simplify the hypothesis in the second branch</p>",
        "id": 158115363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549976511
    },
    {
        "content": "<p>I should have written my solution works with <code>simpa only </code></p>",
        "id": 158115367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549976514
    },
    {
        "content": "<p>I still don't know why <code>not_exists</code> is a simp lemma while <code>not_forall</code> isn't</p>",
        "id": 158115444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549976571
    },
    {
        "content": "<p>I was just asking myself the same question</p>",
        "id": 158115461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549976592
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/not_forall\" title=\"#narrow/stream/113488-general/topic/not_forall\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/not_forall</a></p>",
        "id": 158115485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549976624
    },
    {
        "content": "<p>those decidability assumptions are really awkward tho</p>",
        "id": 158115487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549976625
    },
    {
        "content": "<p>because one is constructive and the other isn't?</p>",
        "id": 158115488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549976625
    },
    {
        "content": "<p>they are both constructive kenny</p>",
        "id": 158115543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549976650
    },
    {
        "content": "<p>you know what I mean</p>",
        "id": 158115554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549976660
    }
]