[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pochhammer</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">pochhammer</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">bytecode</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">pochhammer._main'</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">classical.choice'</span>\n</code></pre></div>",
        "id": 228703412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614823228
    },
    {
        "content": "<p>Adding <code>noncomputable theory</code> doesn't help. What's going on?</p>",
        "id": 228703444,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614823245
    },
    {
        "content": "<p>You have to add <code>noncomputable def</code>. We saw this earlier with <code>dickson</code> polynomials:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.chebyshev.defs</span>\n\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dickson</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>       <span class=\"o\">:=</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">dickson</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dickson</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>The reason being, as far as my debugging let me to believe, is that the equation compiler defers labelling the whole <code>def</code> as <code>noncomputable</code> only until the end. However, since utilizing <code>polynomial</code> already requires <code>noncomputable</code>, it doesn't understand that it needs to say so just based on the inductive case. Finally, adding <code>noncomputable theory</code> doesn't help because that only causes an effect after the definition has been compiled. But the compiling itself is what's breaking.</p>",
        "id": 228707894,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614826610
    },
    {
        "content": "<p>Here's a simpler example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"c1\">-- this complains!</span>\n<span class=\"kd\">def</span> <span class=\"n\">silly</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"o\">(⟨</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">silly</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 228708087,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614826784
    },
    {
        "content": "<p>But this, of course, works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">silly'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"o\">(⟨</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 228708275,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614826895
    },
    {
        "content": "<p>Full example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"c1\">-- this complains!</span>\n<span class=\"kd\">def</span> <span class=\"n\">silly</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"o\">(⟨</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">silly</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">silly_comp</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"o\">(⟨</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">silly_comp</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">silly_rec</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"o\">(⟨</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">silly</span> <span class=\"mi\">0</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">silly_comp</span> <span class=\"mi\">0</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">silly_rec</span> <span class=\"mi\">0</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">silly</span> <span class=\"mi\">1</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">silly_comp</span> <span class=\"mi\">1</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">silly_rec</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 228708444,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614827005
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover-community/lean/issues/451\">lean#451</a> related?</p>",
        "id": 228897969,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614919999
    }
]