[
    {
        "content": "<p>How does one get Lean to prove this automatically? I was expecting some sort of incantation involving <code>fin_cases</code> and <code>dec_trivial</code> would work, but I couldn't manage it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 302876751,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665156182
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"c1\">-- the defeq works this way</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- mathlib also has lemma for it</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">fin.sum_univ_two</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 302881457,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665157525
    },
    {
        "content": "<p>Aha, but we just ran into part of my <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>. What if I had, say, 20 terms? It would be nice to have some tactic that could handle this without an ugly change.</p>",
        "id": 302887825,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665159484
    },
    {
        "content": "<p>Just <code>simp_rw</code> with  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_succ\">docs#fin.sum_univ_succ</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_zero\">docs#fin.sum_univ_zero</a></p>",
        "id": 302888012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665159539
    },
    {
        "content": "<p>After <a href=\"https://github.com/leanprover-community/mathlib/pull/16518\">#16518</a> is merged (tomorrow?) <code>norm_num</code> will evaluate both sides of this</p>",
        "id": 302891179,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665160431
    },
    {
        "content": "<p>It seems to already work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 302891323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665160473
    },
    {
        "content": "<p>I also came up with a general way of proving such equalities <a href=\"https://github.com/leanprover-community/mathlib/pull/15684#discussion_r931876837\">as a comment</a> in the PR where the <code>fin.sum_univ_x</code> lemmas were added:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">multiset.fold_eq_foldl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">},</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>but it's not good for rewriting the LHS to RHS.</p>",
        "id": 302900829,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665163726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/splitting.20an.20explicit.20.60finset.2Esum.60/near/302891323\">said</a>:</p>\n<blockquote>\n<p>It seems to already work:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>with what imports? I tried on some random lean window I had open and it didn't, perhaps my mathlib is too old!</p>",
        "id": 302908617,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665166133
    },
    {
        "content": "<p>there is a norm_num extension for finset.sum but it's half-broken with weird unierse isuses</p>",
        "id": 302911395,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665167101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n</code></pre></div>",
        "id": 302915066,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665168520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Turns out <code>by simp</code> works too with those imports, and <code>norm_num</code> is likely working just because it does <code>simp</code></p>",
        "id": 302920674,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665170730
    },
    {
        "content": "<p>It  turns out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_two\">docs#fin.sum_univ_two</a> is a simp lemma but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_three\">docs#fin.sum_univ_three</a> is not, so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>fails.</p>",
        "id": 302940580,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665179996
    },
    {
        "content": "<p>I have a PR about generating this kind of lemma at elaboration time, which handles the n=20 case</p>",
        "id": 302955404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665191640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/splitting.20an.20explicit.20.60finset.2Esum.60/near/302955404\">said</a>:</p>\n<blockquote>\n<p>I have a PR about generating this kind of lemma at elaboration time, which handles the n=20 case</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16518\">#16518</a> or another one? <a href=\"https://github.com/leanprover-community/mathlib/pull/16518\">#16518</a> has been delegated.</p>",
        "id": 302962650,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665199776
    },
    {
        "content": "<p>Term mode proof for any number of elements (faster than <code>simp</code> or <code>norm_num</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.fin</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">v</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">auto</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 302970732,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1665209458
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15738\">#15738</a></p>",
        "id": 303022973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665237829
    }
]