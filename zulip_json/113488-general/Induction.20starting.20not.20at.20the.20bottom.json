[
    {
        "content": "<p>Is there an easy way to perform induction with a \"different starting element\"? (easy = without writing a lemma <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> ). Perhaps some way to leverage the existing induction theorem?<br>\nIn my case, I want to prove something about <em>nonempty</em> finsets. Namely, that finite sup in a directed set stays in the directed set:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdir</span> <span class=\"o\">:</span> <span class=\"n\">directed_on</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hemp</span> <span class=\"o\">:</span> <span class=\"n\">F.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">F</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F.sup</span> <span class=\"n\">id</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I'd love to start with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">finset.induction</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but alas, this is only necessarily true for nonempty finsets.<br>\nI've had the same case before when wanting to prove something about positive naturals, so I thought I'd ask for some tips.</p>",
        "id": 222688974,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1610612003
    },
    {
        "content": "<p>You can probably just use the usual induction principle in any given case. Or you can just write your own and <code>apply</code> it. Why do you think the usual induction principle won't work for you? I think that all other induction principles are derived from it, in some sense. What happens after applying finset.induction? The base case should be provable by contradiction, no?</p>",
        "id": 222689750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610612563
    },
    {
        "content": "<p>Well, the base case here needs <code>⊥ ∈ S</code>, which I have no reason to assume for an arbitrary directed set <code>S</code>. But, I think I see what you're saying - namely a \"custom\" induction principle will not be hard to write since it can simply use the regular one?</p>",
        "id": 222690311,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1610613043
    },
    {
        "content": "<p>You just prove by induction that <code>⊥ ∈ S -&gt; P S</code></p>",
        "id": 222690366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610613100
    },
    {
        "content": "<p>the implication ensures that the case <code>S = ⊥</code> is vacuously true</p>",
        "id": 222690418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610613130
    },
    {
        "content": "<p>Ah, that's perfect! I had tried something like that in proving the implication <code>F.nonempty -&gt; F.sup id in S</code> by induction, but rather your proposition is what I need. Thanks!<br>\nWell, wait, this would still ensure I need bottom in S anywhere to apply it...</p>",
        "id": 222690552,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1610613259
    }
]