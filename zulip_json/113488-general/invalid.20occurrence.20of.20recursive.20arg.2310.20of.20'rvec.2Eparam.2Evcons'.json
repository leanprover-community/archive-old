[
    {
        "content": "<p>The following code leads to the error message <code>invalid occurrence of recursive arg#10 of 'rvec.param.vcons', the body of the functional type depends on it.</code></p>\n<p>Lean seems to care about where the argument <code>vhdR</code> (of the <code>cons</code> constructor of  my <code>rvec.param</code> inductive type) is located. I do not understand from where this restriction comes... <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> an idea about that? I am particularily surprised because the Coq equivalent works (see snippet below)</p>\n<p>Lean code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">rvec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">vhd</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vtl</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α0</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α1</span> <span class=\"n\">a1</span><span class=\"o\">),</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">param</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nR</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">vhd0</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α0</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vhd1</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α1</span> <span class=\"n\">n1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">vhdR</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"n\">nR</span> <span class=\"n\">vhd0</span> <span class=\"n\">vhd1</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> this must be after vtl1, but why? -/</span>\n    <span class=\"o\">(</span><span class=\"n\">vtl0</span> <span class=\"o\">:</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vtl1</span> <span class=\"o\">:</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vtlR</span> <span class=\"o\">:</span> <span class=\"n\">αR</span> <span class=\"n\">vtl0</span> <span class=\"n\">vtl1</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span>\n  <span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">param</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"n\">nR</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">vhd0</span> <span class=\"n\">vtl0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rvec</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">vhd1</span> <span class=\"n\">vtl1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Coq code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Set</span> <span class=\"kn\">Implicit</span> <span class=\"kn\">Arguments</span><span class=\"o\">.</span>\n\n<span class=\"kn\">Inductive</span> <span class=\"n\">rvec</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">|</span> <span class=\"n\">rvnil</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n<span class=\"o\">|</span> <span class=\"n\">rvcons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">vhd</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vtl</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">).</span>\n\n<span class=\"kn\">Inductive</span> <span class=\"n\">natR</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"kn\">Set</span> <span class=\"o\">:=</span>\n<span class=\"o\">|</span> <span class=\"n\">OR</span> <span class=\"o\">:</span> <span class=\"n\">natR</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"o\">|</span> <span class=\"n\">SR</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span><span class=\"o\">,</span> <span class=\"n\">natR</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"o\">-&gt;</span> <span class=\"n\">natR</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n1</span><span class=\"o\">).</span>\n\n<span class=\"kn\">Inductive</span> <span class=\"n\">rvecR</span> <span class=\"o\">(</span><span class=\"n\">A0</span> <span class=\"n\">A1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AR</span> <span class=\"o\">:</span> <span class=\"n\">A0</span> <span class=\"o\">-&gt;</span> <span class=\"n\">A1</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">forall</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span><span class=\"o\">,</span> <span class=\"n\">natR</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rvec</span> <span class=\"n\">A0</span> <span class=\"n\">n0</span> <span class=\"o\">-&gt;</span> <span class=\"n\">rvec</span> <span class=\"n\">A1</span> <span class=\"n\">n1</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">|</span> <span class=\"n\">rvnilR</span> <span class=\"o\">:</span> <span class=\"n\">rvecR</span> <span class=\"n\">AR</span> <span class=\"n\">OR</span> <span class=\"o\">(</span><span class=\"n\">rvnil</span> <span class=\"n\">A0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rvnil</span> <span class=\"n\">A1</span><span class=\"o\">)</span>\n<span class=\"o\">|</span> <span class=\"n\">rvconsR</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nR</span> <span class=\"o\">:</span> <span class=\"n\">natR</span> <span class=\"n\">n0</span> <span class=\"n\">n1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">vhd0</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span> <span class=\"n\">A0</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vhd1</span> <span class=\"o\">:</span> <span class=\"n\">rvec</span> <span class=\"n\">A1</span> <span class=\"n\">n1</span><span class=\"o\">),</span> <span class=\"n\">rvecR</span> <span class=\"n\">AR</span> <span class=\"n\">nR</span> <span class=\"n\">vhd0</span> <span class=\"n\">vhd1</span> <span class=\"o\">-&gt;</span>\n      <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">vtl0</span> <span class=\"o\">:</span> <span class=\"n\">A0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vtl1</span> <span class=\"o\">:</span> <span class=\"n\">A1</span><span class=\"o\">),</span> <span class=\"n\">AR</span> <span class=\"n\">vtl0</span> <span class=\"n\">vtl1</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">rvecR</span> <span class=\"n\">AR</span> <span class=\"o\">(</span><span class=\"n\">SR</span> <span class=\"n\">nR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rvcons</span> <span class=\"n\">vhd0</span> <span class=\"n\">vtl0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rvcons</span> <span class=\"n\">vhd1</span> <span class=\"n\">vtl1</span><span class=\"o\">).</span>\n</pre></div>",
        "id": 171589021,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563958497
    },
    {
        "content": "<p>Yes, lean cares about the order of arguments here</p>",
        "id": 171589502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563958995
    },
    {
        "content": "<p>It's an arbitrary restriction, but it makes things easier since otherwise you have to worry about the <code>vhd</code> argument appearing somewhere weird in <code>wtl</code></p>",
        "id": 171589592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959056
    },
    {
        "content": "<p>It obviously makes no mathematical difference, as you can just reorder the arguments</p>",
        "id": 171589644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959116
    },
    {
        "content": "<blockquote>\n<p>It obviously makes no mathematical difference, as you can just reorder the arguments</p>\n</blockquote>\n<p>Since I am meta-programming a parametricity transformation, \"reordering arguments\" introduces the need to make additional wrappers here and there :-/</p>",
        "id": 171589783,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563959252
    },
    {
        "content": "<blockquote>\n<p>It's an arbitrary restriction, but it makes things easier since otherwise you have to worry about the <code>vhd</code> argument appearing somewhere weird in <code>wtl</code></p>\n</blockquote>\n<p>I still do not understand why it is working for <code>rvec</code> and not for <code>rvec.param</code> though...</p>",
        "id": 171589881,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563959360
    },
    {
        "content": "<p>Actually my judgment was premature. This used to not even be allowed in <code>rvec</code>, but the restriction was lifted at some point, apparently not enough</p>",
        "id": 171589936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959403
    },
    {
        "content": "<p>I think the difference is that <code>vtl0</code> and <code>vtl1</code> appear in parameters in the return type</p>",
        "id": 171589998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959442
    },
    {
        "content": "<p>OK, then do you think I can safely ignore types such as <code>rvec</code> during my translation, for such types will not be in lean core or in mathlib?</p>",
        "id": 171590268,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563959705
    },
    {
        "content": "<p>What do you mean? What is the goal, are you translating Coq proofs to lean?</p>",
        "id": 171590322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959760
    },
    {
        "content": "<p>It is certainly true that <code>rvec</code> won't be in mathlib</p>",
        "id": 171590380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959791
    },
    {
        "content": "<p>Actually mathlib is pretty sparse on fancy inductive types, because mathematicians rule the roost around here and they don't see the point</p>",
        "id": 171590411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959826
    },
    {
        "content": "<blockquote>\n<p>What do you mean? What is the goal, are you translating Coq proofs to lean?</p>\n</blockquote>\n<p>no, I am writing a parametricity translation for lean, which might be run on any inductive type in existing libraries. So I am wondering if there will be real cases where the recursive argument of a constructor does not come last...</p>",
        "id": 171590416,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563959833
    },
    {
        "content": "<blockquote>\n<p>Actually mathlib is pretty sparse on fancy inductive types, because mathematicians rule the roost around here and they don't see the point</p>\n</blockquote>\n<p>Then I am lucky :D</p>",
        "id": 171590452,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563959862
    },
    {
        "content": "<p>I'm honestly drawing a blank on <em>any</em> inductive types other than really basic stuff like <code>sum</code> and <code>sigma</code> that are already defined in core. It's all structures</p>",
        "id": 171590554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959958
    },
    {
        "content": "<p>Inductive predicates are also fairly common</p>",
        "id": 171590561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563959975
    },
    {
        "content": "<blockquote>\n<p>Inductive predicates are also fairly common</p>\n</blockquote>\n<p>could you give me examples?</p>",
        "id": 171590683,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563960109
    },
    {
        "content": "<p>The inductive predicate <code>in_closure s a</code> defines the subgroup closure</p>",
        "id": 171590963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960412
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/subgroup.lean#L468-L472\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/subgroup.lean#L468-L472\">https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/subgroup.lean#L468-L472</a></p>",
        "id": 171591065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960500
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/subgroup.lean#L468-L472\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/subgroup.lean#L468-L472\">https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/subgroup.lean#L468-L472</a></p>\n</blockquote>\n<p>damn, I am probably going to run into trouble because of this one :(</p>",
        "id": 171591091,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563960540
    },
    {
        "content": "<p>Here's another example of a not completely trivial inductive predicate<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/defs.lean#L379-L381\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/defs.lean#L379-L381\">https://github.com/leanprover-community/mathlib/blob/master/src/data/list/defs.lean#L379-L381</a></p>",
        "id": 171591228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563960690
    },
    {
        "content": "<blockquote>\n<p>Here's another example of a not completely trivial inductive predicate<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/defs.lean#L379-L381\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/defs.lean#L379-L381\">https://github.com/leanprover-community/mathlib/blob/master/src/data/list/defs.lean#L379-L381</a></p>\n</blockquote>\n<p>this one looks less problematic to me because the recursive argument comes last and only once. (parametricity introduces duplications and interleaving which causes the problem)</p>",
        "id": 171591320,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563960793
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/subgroup.lean#L468-L472\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/subgroup.lean#L468-L472\">https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/subgroup.lean#L468-L472</a></p>\n</blockquote>\n<p>damn, I am probably going to run into trouble because of this one :(</p>\n</blockquote>\n<p>Indeed...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">in_closure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">basic</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α1</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">αR</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">α0</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">α1</span> <span class=\"n\">a1</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">basic</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">αR</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"n\">aR</span> <span class=\"o\">(</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">a0</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">a1</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">αR</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">a0_1</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">α0</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1_1</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">α1</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">aR_1</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"n\">aR</span> <span class=\"n\">a0_1</span> <span class=\"n\">a1_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">a0_2</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">α0</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1_2</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">α1</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">aR_1</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"n\">aR</span> <span class=\"n\">a0_2</span> <span class=\"n\">a1_2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"n\">aR</span>\n      <span class=\"o\">(</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a0_1</span> <span class=\"n\">a0_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a1_1</span> <span class=\"n\">a1_2</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>does not go through... <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 171591758,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563961315
    },
    {
        "content": "<p>Yeah, I think I see how the algorithm goes and you will only be able to handle one recursive arg which comes last</p>",
        "id": 171591814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563961351
    },
    {
        "content": "<p>so I will have to perform reordering and wrap things around...</p>",
        "id": 171591834,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563961376
    },
    {
        "content": "<p>But you should be able to order the arguments as <code>[a0, a1, b0, b1, c0, c1, aR, bR, cR]</code></p>",
        "id": 171591850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563961386
    },
    {
        "content": "<blockquote>\n<p>But you should be able to order the arguments as <code>[a0, a1, b0, b1, c0, c1, aR, bR, cR]</code></p>\n</blockquote>\n<p>Yes, that is what I will do,  but since it is not the \"canonical\" order, I will have to do wrappers</p>",
        "id": 171591872,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563961429
    },
    {
        "content": "<p>Actually I am going to do <code>[a0, b0, c0, a1, b1, c1, aR, bR, cR]</code></p>",
        "id": 171591956,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563961485
    },
    {
        "content": "<p>or remember that this is a \"funny order definition\" and apply the reordering in the theorems</p>",
        "id": 171591958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563961487
    },
    {
        "content": "<blockquote>\n<p>or remember that this is a \"funny order definition\" and apply the reordering in the theorems</p>\n</blockquote>\n<p>my intuition whispers to me is that it is better to precompute the reordering as wrappers rather than on each application. Thanks for your time and advice!</p>",
        "id": 171592059,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563961604
    },
    {
        "content": "<p>You will need the wrappers to be pretty transparent lest they break defeq stuff</p>",
        "id": 171592087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563961645
    },
    {
        "content": "<p>Presumably you aren't writing tactic scripts with the metaprogramming so it may not be a big deal</p>",
        "id": 171592164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563961714
    },
    {
        "content": "<blockquote>\n<p>You will need the wrappers to be pretty transparent lest they break defeq stuff</p>\n</blockquote>\n<p>I'm not sure I understand, but I don't think they should be transparent</p>",
        "id": 171592172,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563961731
    },
    {
        "content": "<p>wrappers have a tendency to change inference and break tactics that look at the expression</p>",
        "id": 171592263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563961831
    },
    {
        "content": "<p>for pure proof terms you can get away with defeq but most of the time it matters when you have a constructor vs a definition that unfolds to a constructor</p>",
        "id": 171592319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563961892
    },
    {
        "content": "<blockquote>\n<p>for pure proof terms you can get away with defeq but most of the time it matters when you have a constructor vs a definition that unfolds to a constructor</p>\n</blockquote>\n<p>I do not understand how a definition that unfolds to a constructor can break defeq...</p>",
        "id": 171592405,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563961966
    },
    {
        "content": "<p>It won't break defeq, it will break other things</p>",
        "id": 171592417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563961980
    },
    {
        "content": "<p>feel free to ignore my ramblings</p>",
        "id": 171592428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563961990
    },
    {
        "content": "<blockquote>\n<p>It won't break defeq, it will break other things</p>\n</blockquote>\n<p>Would you have examples in mind?</p>",
        "id": 171592433,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563961995
    },
    {
        "content": "<p>Stuff like <code>rw</code> will not like if you wrap a constructor</p>",
        "id": 171592446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563962021
    },
    {
        "content": "<blockquote>\n<p>feel free to ignore my ramblings</p>\n</blockquote>\n<p>I'd rather not ignore them! I'd like to be aware if I will break something unintentionally...</p>",
        "id": 171592459,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563962040
    },
    {
        "content": "<blockquote>\n<p>Stuff like <code>rw</code> will not like if you wrap a constructor</p>\n</blockquote>\n<p>What specific use or <code>rw</code>?</p>",
        "id": 171592515,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563962058
    },
    {
        "content": "<p>Also you can't pattern match on a wrapped constructor</p>",
        "id": 171592527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563962069
    },
    {
        "content": "<p>and cases and the inductive recursor will not re-wrap the constructor for you</p>",
        "id": 171592553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563962095
    },
    {
        "content": "<p>there was a thread here last week about making proofs by induction show <code>0</code> in the base case instead of <code>my_nat.zero</code></p>",
        "id": 171592588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563962137
    },
    {
        "content": "<p>I think <code>rw</code> and pattern matching are not a concern since the purpose of parametricity translations is mostly for automations... but I need to think twice</p>",
        "id": 171592592,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563962145
    },
    {
        "content": "<p>Like I said, carry on, you probably don't have to worry</p>",
        "id": 171592668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563962211
    },
    {
        "content": "<p>What does the parametricity translation do to <code>choice</code>?</p>",
        "id": 171592700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563962260
    },
    {
        "content": "<blockquote>\n<p>What does the parametricity translation do to <code>choice</code>?</p>\n</blockquote>\n<p>Since Pierce law is provably non parametric, so are LEM and any choice axiom that would entail it, ... so I will probably send an error message... (the error message will read: \"cannot transfer your theorems because you were not constructive enough\").<br>\nThis will be an incentive to write constructive functions and structures, since otherwise transfer by isomorphism theorems will not work ^^'</p>",
        "id": 171593228,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563962806
    },
    {
        "content": "<p>(And maybe mathematicians will finally see the point in constructive maths :P)</p>",
        "id": 171593241,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563962825
    },
    {
        "content": "<p>I'm afraid that we will just complain that we want better transfer. Because in real world maths we can easily transport non-constructive properties/functions/data/etc...</p>",
        "id": 171593568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563963216
    },
    {
        "content": "<p>Which is not meant as discouragement to you. Because I think any improvement of the transfer ecosystem is already a big win.</p>",
        "id": 171593626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563963269
    },
    {
        "content": "<p>I think that this is a more important point than transferring weird inductive types. Large swaths of mathlib are nonconstructive</p>",
        "id": 171594099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563963855
    },
    {
        "content": "<p>But more precisely, can you say what would happen if you apply the parametricity transformation to <code>choice</code>?</p>",
        "id": 171594136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563963914
    },
    {
        "content": "<p>I don't think I did this right...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span>\n  <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">αR</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">choice</span><span class=\"bp\">.</span><span class=\"n\">param</span>\n  <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"n\">αR</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</pre></div>",
        "id": 171594854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563964722
    },
    {
        "content": "<blockquote>\n<p>I don't think I did this right...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span>\n  <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">αR</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">choice</span><span class=\"bp\">.</span><span class=\"n\">param</span>\n  <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"n\">αR</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</pre></div>\n\n\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val0</span> <span class=\"o\">:</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val1</span> <span class=\"o\">:</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">αR</span> <span class=\"n\">val0</span> <span class=\"n\">val1</span> <span class=\"bp\">→</span>\n          <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"n\">αR</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">val0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">val1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">choice</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"n\">αR</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"n\">αR</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I am cheating, my plugin is already able to perform these transformations ;)</p>",
        "id": 171596943,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563966882
    },
    {
        "content": "<p>I was sure one can derive <code>false</code> from <code>choice.param</code>, but I cannot find the reference anymore, so maybe I'm wrong!</p>",
        "id": 171597054,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563966992
    },
    {
        "content": "<p><a href=\"https://arxiv.org/pdf/1209.6336.pdf\" target=\"_blank\" title=\"https://arxiv.org/pdf/1209.6336.pdf\">https://arxiv.org/pdf/1209.6336.pdf</a> 5.4.2 but they do not reference the proof :-/</p>",
        "id": 171597303,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563967261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> </p>\n<blockquote>\n<p>I'm afraid that we will just complain that we want better transfer. Because in real world maths we can easily transport non-constructive properties/functions/data/etc...</p>\n</blockquote>\n<p>I'm afraid I do not know any consistent logical foundation for transporting non constructive functions or proof of constructive statements (opaque/proof-irrelevant non constructive proofs are okay, I would say)</p>",
        "id": 171597394,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563967365
    },
    {
        "content": "<p>Here is the proof that <code>em.param</code> is false.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a0</span> <span class=\"bp\">∨</span> <span class=\"n\">b0</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">∨</span> <span class=\"n\">b1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bR</span> <span class=\"o\">:</span> <span class=\"n\">b0</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a1</span><span class=\"o\">),</span>\n  <span class=\"n\">aR</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span> <span class=\"bp\">→</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"n\">aR</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">bR</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bR</span> <span class=\"o\">:</span> <span class=\"n\">b0</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b1</span><span class=\"o\">),</span>\n  <span class=\"n\">bR</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span> <span class=\"bp\">→</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"n\">aR</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">bR</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">def</span> <span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">a0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">a1</span><span class=\"o\">),</span> <span class=\"n\">aR</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">em</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pR</span> <span class=\"o\">:</span> <span class=\"n\">p0</span> <span class=\"bp\">→</span> <span class=\"n\">p1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">p0</span> <span class=\"n\">p1</span> <span class=\"n\">pR</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">p0</span> <span class=\"n\">p1</span> <span class=\"n\">pR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">p1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">em_param_is_false</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">em</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">true</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">true</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 171599132,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563969140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<blockquote>\n<p>I think that this is a more important point than transferring weird inductive types. Large swaths of mathlib are nonconstructive</p>\n</blockquote>\n<p>I think the opposite: most of the statements are stated without classical features, but I should be able to translate any such statement, even if it contains a weird inductive predicate.</p>",
        "id": 171599796,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563969928
    },
    {
        "content": "<p>I think it is important to be able to translate classical results that depend on other definitions that are classical but can be proven to be parametric by other means</p>",
        "id": 171600467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563970621
    },
    {
        "content": "<blockquote>\n<p>I think it is important to be able to translate classical results that depend on other definitions that are classical but can be proven to be parametric by other means</p>\n</blockquote>\n<p>Of course! but then you provide the parametricity proofs you depend on by hand. Most transfer result will be parametrized by isomorphisms  anyway (which are special cases of parametricity relations).</p>",
        "id": 171600837,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563970933
    },
    {
        "content": "<p>Most of the time, the simplest way to prove something parametric will still be to give a constructive alternative definition <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 171600905,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1563971006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span>\n  <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aR</span> <span class=\"o\">:</span> <span class=\"n\">αR</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">choice</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αR</span> <span class=\"o\">:</span> <span class=\"n\">α0</span> <span class=\"bp\">→</span> <span class=\"n\">α1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">α0</span> <span class=\"n\">α1</span> <span class=\"n\">αR</span> <span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span>\n  <span class=\"n\">αR</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">a1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">bool</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"bp\">≠</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"n\">choice</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">ff_ne_tt</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟨</span><span class=\"n\">ff</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 171601682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563971628
    }
]