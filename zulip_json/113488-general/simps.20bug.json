[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The `n`th power map on a commutative monoid for a natural `n`, considered as a morphism of</span>\n<span class=\"sd\">monoids. -/</span>\n<span class=\"kd\">@[to_additive nsmul_add_monoid_hom \"Multiplication by a natural `n` on a commutative additive</span>\n<span class=\"kd\">monoid, considered as a morphism of additive monoids.\", simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">pow_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">one_pow</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">,</span><span class=\"n\">mul_pow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">pow_monoid_hom_apply</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">nsmul_add_monoid_hom_apply</span> <span class=\"c1\">-- doesn't work</span>\n<span class=\"k\">#check</span> <span class=\"n\">pow_add_monoid_hom_apply</span> <span class=\"c1\">-- oops</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">pow_add_monoid_hom_apply :</span>\n<span class=\"cm\">  ∀ (M : Type u_2) [_inst_1 : add_comm_monoid M] (n : ℕ) (_x : M),</span>\n<span class=\"cm\">  ⇑(nsmul_add_monoid_hom M n) _x = n • _x</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 247328798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627390545
    },
    {
        "content": "<p>Maybe <code>to_additive</code> should change <code>pow</code> to <code>nsmul</code> and <code>gpow</code> to <code>gsmul</code>? Not sure though. Whether or not it does, I guess <code>simps</code> should spot the human-generated name?</p>",
        "id": 247329035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627390673
    },
    {
        "content": "<p>Does it work if you put <code>simps</code> before <code>to_additive</code>?</p>",
        "id": 247329130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627390717
    },
    {
        "content": "<p>Or do you just not get any lemma at all?</p>",
        "id": 247329139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627390726
    },
    {
        "content": "<p>Can you do simps attribute tagging as a separate command as a stopgap in the meantime?</p>",
        "id": 247334614,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627393571
    },
    {
        "content": "<p>You mean, no <code>simps</code> at all on the definition, and then below the def'n write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"n\">pow_monoid_hom</span> <span class=\"n\">nsmul_add_monoid_hom</span>\n</code></pre></div>\n<p>I guess that should work? <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 247335400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627393995
    },
    {
        "content": "<p>Or simps prior to to_additive, and a separate tag on the nsmul generated hom</p>",
        "id": 247336277,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627394295
    },
    {
        "content": "<p>But that breaks symmetry <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 247336641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627394417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/simps.20bug/near/247336277\">said</a>:</p>\n<blockquote>\n<p>Or simps prior to to_additive, and a separate tag on the nsmul generated hom</p>\n</blockquote>\n<p><code>simps</code> complains if you put it before <code>to_additive</code>, so this isn't an option.</p>",
        "id": 247343278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627397364
    },
    {
        "content": "<p>here's a much shorter version of the bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- subtype is the easiest way I could think of to get a simps lemma</span>\n<span class=\"kd\">@[to_additive bar, simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>which errors with <code>to_additive: can't transport foo_coe to itself.</code></p>",
        "id": 247343593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627397498
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/8457\">#8457</a></p>",
        "id": 247497204,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1627496560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Your suggestion still generates the lemma <code>pow_add_monoid_hom_apply</code>.</p>",
        "id": 247497435,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1627496646
    },
    {
        "content": "<p>Huh? I don't understand how that can happen. If you call</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"n\">nsmul_add_monoid_hom</span>\n</code></pre></div>\n<p>then it shouldn't put the <code>pow</code> back into the name, right?</p>",
        "id": 247497682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627496760
    },
    {
        "content": "<p><code>attribute [simps] pow_monoid_hom</code> generates that lemma. If a declaration is tagged with <code>@[to_additive]</code> and then with <code>@[simps]</code> then <code>simps</code> automatically additivizes all generated simps-lemmas. Before <a href=\"https://github.com/leanprover-community/mathlib/issues/8457\">#8457</a> it would just use the auto-generated name by <code>to_additive</code>.</p>",
        "id": 247498040,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1627496916
    },
    {
        "content": "<p>Aah, now I see.</p>",
        "id": 247498115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627496968
    }
]