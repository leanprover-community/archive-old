[
    {
        "content": "<p>In my homology refactor project, I have structures similar to the MWE below, where I can't get <code>simps</code> to generate the expected projections:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.kernels</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">kernel_data</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hι₀</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">kernel_fork.of_ι</span> <span class=\"n\">ι</span> <span class=\"n\">hι₀</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">kernel_data.of_has_kernel</span> <span class=\"o\">[</span><span class=\"n\">has_kernel</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">kernel_data</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">kernel</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">kernel.ι</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">hι₀</span> <span class=\"o\">:=</span> <span class=\"n\">kernel.condition</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">hι</span> <span class=\"o\">:=</span> <span class=\"n\">kernel_is_kernel</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The problem is with the <code>is_limit</code> field <code>hι</code>, but I do not need <code>simps</code> to generate any <code>simp</code> lemma for this field. I have tried <code>@[simps K ι]</code>, but I always get the error message <code>Failed to find constructor  in structure category_theory.limits.is_limit.</code>. ( <code>set_option trace.simps.verbose true</code> is not very helpful either.) Is there a way to fix this on a given definition, or using some <code>initialize_simps_projections</code>?</p>",
        "id": 313098176,
        "sender_full_name": "Joël Riou",
        "timestamp": 1669825513
    },
    {
        "content": "<p>Why can't you just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.limit_cone\">docs#category_theory.limits.limit_cone</a> for this?</p>",
        "id": 313105991,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669827542
    },
    {
        "content": "<p>This is a bug in <code>@[simps]</code>. The problem is that projection name <code>hι</code> is a prefix of <code>hι₀</code>. As a workaround you can rename the projections (e.g. <code>hι</code> -&gt; <code>hι'</code>).</p>",
        "id": 313106359,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669827625
    },
    {
        "content": "<p>It's the last item in <a href=\"https://github.com/leanprover-community/mathlib/pull/5489\">#5489</a></p>",
        "id": 313106980,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669827772
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>!<br>\n<span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>: This is not the actual structure, this is a MWE for the problem I encountered for a more elaborate structure.</p>",
        "id": 313112258,
        "sender_full_name": "Joël Riou",
        "timestamp": 1669829264
    }
]