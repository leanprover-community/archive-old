[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/6481\">#6481</a> I attempted to remove the commutativity assumption on the ground (semi)ring when constructing the <code>mv_polynomial</code> ring. It was no problem removing the commutativity assumption from the definition but as soon as I added the semiring instance, much later in the file <code>eval\\2_eta</code> broke which to me seems unrelated and I read the error message as there being a problem with universes, though I don't understand why. Can someone clarify why this happens and how this can be solved?</p>",
        "id": 228151340,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614540762
    },
    {
        "content": "<p>Try adding an explicit type annotation to <code>C</code>?</p>",
        "id": 228151793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614541303
    },
    {
        "content": "<p>When it is defined or where it breaks?</p>",
        "id": 228152058,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614541601
    },
    {
        "content": "<p><code>@[simp] lemma eval₂_eta (p : mv_polynomial σ R) : eval₂ (C : R →+* mv_polynomial σ R) X p = p :=</code> fixes the first problem.</p>",
        "id": 228152155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614541708
    },
    {
        "content": "<p>I am assuming that this wasn't needed before. What has happened?</p>",
        "id": 228152162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614541720
    },
    {
        "content": "<p>The elaborator gets stuck because it can't invoke typeclass inference to convert comm_semiring to semiring?</p>",
        "id": 228152217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614541794
    },
    {
        "content": "<p>The second error is more scary: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eval₂_comp_left</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">map</span> <span class=\"n\">g</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">S₁</span> <span class=\"bp\">→+*</span> <span class=\"n\">mv_polynomial</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">S₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">?</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→+*</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 228152309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614541844
    },
    {
        "content": "<p>The elaborator is very bad when it comes to bundled homs with a domain that is itself a bundled hom, from what I recall</p>",
        "id": 228152512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614542055
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/ef5c1d50c3f95b3c8cda0bb843305eacdfde69ca/src/data/mv_polynomial/basic.lean#L744-L753\">It used to work</a> :-(</p>",
        "id": 228152643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614542200
    },
    {
        "content": "<p>The error is now on <code>eval₂_comp_left</code> on line 748.</p>",
        "id": 228152670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614542235
    },
    {
        "content": "<p><code>  refine eq.trans (eval₂_comp_left (map g) (C.comp f) X p) _,</code> in tactic mode works where line 748 in the link above used to fail. <code>rw</code> also fails, it's not often I use <code>eq.trans</code>! What is going on here?</p>",
        "id": 228153019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614542555
    },
    {
        "content": "<p>I think this is the heart of the problem for the next error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">(</span><span class=\"n\">eval₂_hom</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ring_hom</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span>\n        <span class=\"bp\">?</span>\n        <span class=\"n\">u_1</span>\n        <span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ring_hom</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial.semiring</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 228154754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614544314
    },
    {
        "content": "<p>I'm having exterior_algebra flashbacks</p>",
        "id": 228154979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614544503
    },
    {
        "content": "<p>Is something irreducible?</p>",
        "id": 228154996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614544512
    },
    {
        "content": "<p>The PR literally just changes [comm_semiring] to [semiring] in the definition of <code>mv_polynomial</code> and adds an instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_algebra.semiring</span>\n</code></pre></div>\n<p>and that's it</p>",
        "id": 228155215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614544705
    },
    {
        "content": "<p>Yeah, but that might be enough to make an existing irreducible change from not a problem to very much a problem</p>",
        "id": 228155273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614544767
    },
    {
        "content": "<p>I ran into some very similar looking problems when I weakened <code>direct_sum</code> from requiring add_comm_group to add_comm_monoid</p>",
        "id": 228155368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614544851
    },
    {
        "content": "<p>Which were only really resolved by doing the weakening in even more places</p>",
        "id": 228155370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614544853
    },
    {
        "content": "<p>Thanks for looking into this. Note that changing [comm_semiring] to [semiring] didn't break anything yet, only the new instance did.</p>",
        "id": 228155988,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614545511
    },
    {
        "content": "<p>OK I managed to fix everything and I pushed, but goodness knows what other trouble we'll run into.</p>",
        "id": 228163291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614553098
    },
    {
        "content": "<p>Thanks a lot I'll continue working on it tomorrow.</p>",
        "id": 228163429,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614553258
    },
    {
        "content": "<p>If R is a <code>comm_semiring</code>, then we have two routes to <code>semiring (mv_polynomial S R)</code>, one via \"R is a semiring and hence mv polys are a semiring\", and one via \"mv_polynomials are a comm_semiring and hence a semiring\". Are these defeq? If not then this is a problem.</p>",
        "id": 228163458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614553286
    },
    {
        "content": "<p>This issue no doubt shows up all over the place -- some random algebraic functor will send commutative X's to commutative X's and general X's to X's and there will be a corresponding diamond. Is it always defeq in mathlib? What happens when it isn't?</p>",
        "id": 228163523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614553355
    },
    {
        "content": "<p>It just occurred to me that perhaps another solution is to decrease the priority of the semiring -&gt; mv_poly semiring instance.</p>",
        "id": 228163886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614553770
    },
    {
        "content": "<p>Hmm, they do seem to be defeq in this case. I don't understand why I have to add the type ascriptions. I don't really understand what Eric was saying, but I'm sure he knows more about this than me. The type mismatch error above seems to be a red herring, I don't know why that wasn't unifying.</p>",
        "id": 228164177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614554054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> My commit fixed the erorrs in the file but made the code worse (I added a bunch of type ascriptions). Another fix is to replace your <code>instance [semiring R]: semiring (mv_polynomial σ R) := add_monoid_algebra.semiring</code> with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_algebra.semiring</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">90</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 228164411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614554299
    },
    {
        "content": "<p>I see that there are errors in other files after my type ascription fix so I think the correct / easiest thing to do is to just add the instance at a lower priority. I have no feeling about the problems this will cause elsewhere.</p>",
        "id": 228164547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614554477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I managed to break it again by moving the definition of the semiring homomorphism C to the semiring section. The proof fails at the same places which you fixed earlier and then reverted, e.g. <code>eval\\2_eta</code>. I pushed to show what is happening. This only happened when moving the definitions of monomial and C, i.e. ll. 117--128.</p>",
        "id": 228195228,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614587274
    },
    {
        "content": "<p>I made some progress, at the moment I can see two similar problems to what we had before in <code>ring_theory.polynomial.basic</code> and two deterministic timeouts in <code>ring_theory.polynomial.homogeneous</code>. I'm still curious what the problem is here if anyone has some more insight.</p>",
        "id": 228299869,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614630287
    }
]