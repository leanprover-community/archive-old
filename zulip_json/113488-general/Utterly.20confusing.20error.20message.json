[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- tactic by_contradiction failed, target is not a proposition</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there something we can do?</p>",
        "id": 237726342,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620334315
    },
    {
        "content": "<p>Of course the error message goes away in math mode.</p>",
        "id": 237726424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620334334
    },
    {
        "content": "<p>But still, people can forget to enter math mode.</p>",
        "id": 237726460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620334349
    },
    {
        "content": "<p>\"math mode\" is \"open_locale classical\"?</p>",
        "id": 237732806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620336138
    },
    {
        "content": "<p>Don't forget to also write <code>noncomputable theory</code></p>",
        "id": 237733467,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620336353
    },
    {
        "content": "<p>This is indeed a bug.  Under the hood the following happens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">classical.by_contradiction</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid apply tactic, failed to unify</span>\n<span class=\"cm\">  P → Q</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  (¬?m_1 → false) → ?m_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 237783887,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620375006
    },
    {
        "content": "<p>Should <code>by_contra</code> always use <code>refine</code>?</p>",
        "id": 237783990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620375085
    },
    {
        "content": "<p>This is what <code>by_contradiction</code> does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">decidable.by_contradiction</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eapply</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">applyc</span> <span class=\"bp\">``</span><span class=\"n\">classical.by_contradiction</span> <span class=\"bp\">&lt;|&gt;</span>\n</code></pre></div>\n<p>I guess the easiest fix is to do same <code>mk_mapp</code> incantation for <code>classical.by_contradiction</code> as well.</p>",
        "id": 237784198,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620375207
    },
    {
        "content": "<p>maybe we should just look for and remove all uses of <code>applyc</code> and <code>apply</code> in tactics. They are pretty much all bugs waiting to happen</p>",
        "id": 237784373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620375304
    },
    {
        "content": "<p>it would be even better if we could come up with a replacement that is equally convenient, although I'm not sure if there is a better general purpose heuristic than what apply already uses</p>",
        "id": 237784544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620375387
    }
]