[
    {
        "content": "<p>The duplication between <code>psigma</code> and <code>sigma</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/17168/files#diff-8f3eb92e8b8001d8951315524e40f72e60657f04691a5f99b31fc979846aac0e\">this PR</a> has prompted me to think about making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma\">docs#sigma</a> a reducible def in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psigma\">docs#psigma</a>, so everything proven about <code>psigma</code> will be immediately applicable to <code>sigma</code>, without needing to write any tactic to transport between them. Presumably the same could be done for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psum\">docs#psum</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum\">docs#sum</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pprod\">docs#pprod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod\">docs#prod</a>, though <code>pprod</code> isn't used much AFAIK.</p>\n<p>Today I came up with another idea: if we make <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and\">docs#and</a> a reducible def in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists\">docs#exists</a>, then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_prop/src\">src#exists_prop</a> would be <code>iff.rfl</code>, so <code>∃ x ∈ s, p x</code> would be the same as <code>∃ x, x ∈ s ∧ p x</code>. Maybe people can come up with other examples for which this could lead to potential simplifications? I expect such changes won't break many things because it doesn't break any defeq, only makes more things defeq, but most of these are so fundamental that they're in core, and I'm not sure about the prospects of such changes to be accepted, especially considering that the transition to Lean 4 is near, and Lean 4 core isn't a lean-community fork but under official development.</p>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">sigma'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">psigma</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">and'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">and'.left</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">and'</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">hp</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">and'.right</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">and'</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩,</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 307845665,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667512054
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/empty.20definition\">#general &gt; empty definition</a> by <span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span>.</p>",
        "id": 307846312,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667512298
    },
    {
        "content": "<p>Note that we recently changed the definition of <code>fin</code> to <em>not</em> be defeq to <code>subtype</code></p>",
        "id": 307848729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667513331
    },
    {
        "content": "<p>I think there's a good argument to do this for psigma/sigma + pprod/prod where the semantics really are the same, but I don't think aliasing <code>and</code> and <code>exists</code> is obviously a good idea.</p>",
        "id": 307848838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667513383
    },
    {
        "content": "<p>and possibly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pempty\">docs#pempty</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/empty\">docs#empty</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false\">docs#false</a>?</p>",
        "id": 307889473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667541944
    },
    {
        "content": "<p>Oh sorry, I see my original message was moved to this topic.</p>",
        "id": 307893871,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667544987
    }
]