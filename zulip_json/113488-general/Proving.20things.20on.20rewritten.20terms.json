[
    {
        "content": "<p>Hi!  I may try to explain the problem, but it's probably more clear for you to see for yourself what it is.</p>\n<p>I'm trying to finish the following proof in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">matset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">set.card</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">equiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">mat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">matset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matset</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">el</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">el</span> <span class=\"bp\">∈</span> <span class=\"n\">s.set</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">set'</span> <span class=\"o\">:=</span> <span class=\"n\">s.set.cons</span> <span class=\"n\">el</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">mat'</span> <span class=\"o\">:=</span> <span class=\"n\">s.mat.push_back</span> <span class=\"n\">el</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">set'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.card_cons</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mat'</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Here's the goal and the context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">insert</span> <span class=\"o\">:</span> <span class=\"n\">matset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matset</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">matset</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">el</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">el</span> <span class=\"bp\">∉</span> <span class=\"n\">s.set</span><span class=\"o\">,</span>\n<span class=\"n\">set'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">finset.cons</span> <span class=\"n\">el</span> <span class=\"n\">s.set</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">mat'</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"o\">(</span><span class=\"n\">s.set.card</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">s.mat.push_back</span> <span class=\"n\">el</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set'</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">_.mpr</span> <span class=\"n\">mat'</span>\n</code></pre></div>\n<p>It would be trivial, if not for mpr , caused by rewrite. I wonder what is the best way to approach it without changing the matset type?</p>\n<p>Thanks a lot for any help.</p>",
        "id": 275378118,
        "sender_full_name": "Artem Yurchenko",
        "timestamp": 1647353627
    },
    {
        "content": "<p>I'm not sure if it makes things any easier, but you can swap the <code>.mpr</code> for a <code>cast</code> : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">matset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.set</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span>\n  <span class=\"o\">{</span>\n   <span class=\"n\">set</span> <span class=\"o\">:=</span> <span class=\"n\">s.set.cons</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">mat</span> <span class=\"o\">:=</span>\n         <span class=\"k\">let</span> <span class=\"n\">mat'</span> <span class=\"o\">:=</span> <span class=\"n\">s.mat.push_back</span> <span class=\"n\">a</span> <span class=\"k\">in</span>\n         <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"o\">((</span><span class=\"n\">finset.card</span> <span class=\"n\">s.set</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"o\">(</span><span class=\"n\">finset.cons</span> <span class=\"n\">a</span> <span class=\"n\">s.set</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n            <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">finset.card_cons</span><span class=\"o\">,}</span> <span class=\"k\">in</span>\n         <span class=\"n\">cast</span> <span class=\"n\">h'</span> <span class=\"n\">mat'</span><span class=\"o\">,</span>\n   <span class=\"n\">equiv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,}</span>\n  <span class=\"c1\">-- ⊢ ∀ (x : α), x = a ∨ x ∈ s.set ↔ x ∈ cast _ (s.mat.push_back a)</span>\n   <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 275383276,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1647355860
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span>! I also tried to solve for this goal, but wasn't successful</p>",
        "id": 275383723,
        "sender_full_name": "Artem Yurchenko",
        "timestamp": 1647356048
    },
    {
        "content": "<p>Do you really need to use array for what you are doing? As you are seeing its quite awkward as it is a dependent type. If you can use <code>list</code> instead I think things will be a lot easier.</p>",
        "id": 275386368,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647357174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Some other operations that I define on it seem to be _much_ less awkward and more efficient to define in terms of indices.<br>\nOne operation is fold: <code>def fold (s : matset β) : α → (α → s → α) → α</code>. The other is random: <code>def element_random (s : matset α) (s_nonempty : s.nonempty): rand s</code>. <br>\nJust iterating over a list doesn't help, because it doesn't carry a proof of \"belonging\" to the matset, which is trivial to get for arrays with <code>array.read_mem</code>.</p>",
        "id": 275410664,
        "sender_full_name": "Artem Yurchenko",
        "timestamp": 1647366756
    },
    {
        "content": "<p>Why do you even carry around the <code>finset</code>? You can reconstruct it from the <code>array</code>.</p>",
        "id": 275410887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647366839
    },
    {
        "content": "<p>I often need to recreate a set from the array, so I carry  it around, kind of \"cached\"</p>",
        "id": 275411088,
        "sender_full_name": "Artem Yurchenko",
        "timestamp": 1647366904
    },
    {
        "content": "<p>Mathlib has a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.fold\">docs#finset.fold</a>, is that helpful? Also to get a proof of belonging you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.attach\">docs#finset.attach</a> (or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.attach\">docs#list.attach</a>).</p>",
        "id": 275411688,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647367085
    }
]