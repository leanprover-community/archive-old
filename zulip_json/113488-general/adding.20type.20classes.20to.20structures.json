[
    {
        "content": "<p>What is the best way to add a type class to a structure? E.g. we define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">dfa</span><span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">final</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Sigma</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but we want to say that Q is finite and <code>δ</code> is decidable.</p>",
        "id": 289946137,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1658139661
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">dfa</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">final</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Sigma</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is one option. I'm not sure what you mean by \"<code>δ</code> is decidable\". Maybe you mean <code>decidable_eq Q</code>?</p>",
        "id": 289946453,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658139908
    },
    {
        "content": "<p>Thank you. I meant to say that final is decidable.</p>",
        "id": 289947233,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1658140459
    },
    {
        "content": "<p>Ah then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">dfa</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">final</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">final</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Sigma</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289947509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658140684
    },
    {
        "content": "<p>You also want to follow on with <code>attribute [instance] dfa._inst_1 dfa._inst_2</code></p>",
        "id": 289948085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658141063
    },
    {
        "content": "<p>Which is to say, don't leave them nameless like <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> did!</p>",
        "id": 289948100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658141080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/adding.20type.20classes.20to.20structures/near/289948100\">said</a>:</p>\n<blockquote>\n<p>Which is to say, don't leave them nameless like <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> did!</p>\n</blockquote>\n<p>exactly how does this work?</p>",
        "id": 290496562,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1658491295
    },
    {
        "content": "<p>They're just saying \"if you write <code>[hf : fintype Q]</code> then you can write <code>attribute [instance] hf</code></p>",
        "id": 290501148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658493975
    },
    {
        "content": "<p>[fintype Q} does not imply [decidable_eq Q], right?</p>",
        "id": 290502574,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1658494756
    },
    {
        "content": "<p>That's right. It's a bug or a feature, depending on whom you talk to.</p>",
        "id": 290503050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658494987
    },
    {
        "content": "<p>I guess I feel tempted to introduce a type class: dec_fintype. At least that is what I need for automata theory.</p>",
        "id": 290503276,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1658495112
    }
]