[
    {
        "content": "<p>The line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">use</span> <span class=\"mi\">8</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">),</span>\n</code></pre></div>\n\n<p>in the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eight_has_a_cube_root</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">use</span> <span class=\"mi\">8</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">),</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>makes Lean complain:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">instantiate</span> <span class=\"n\">goal</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">frozen_name</span> <span class=\"n\">has_pow.pow</span><span class=\"o\">)</span> <span class=\"mi\">8</span> <span class=\"o\">((</span><span class=\"n\">frozen_name</span> <span class=\"n\">has_div.div</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typed_expr</span> <span class=\"o\">(</span><span class=\"n\">frozen_name</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Any help would be appreciated <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213857857,
        "sender_full_name": "Formally Verified Waffle Maker",
        "timestamp": 1603148995
    },
    {
        "content": "<p>The error message isn't very helpful here, but if you use the very similar <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#existsi\">tactic#existsi</a>, you'll see the underlying problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eight_has_a_cube_root</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">existsi</span> <span class=\"mi\">8</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">⊢ has_pow ℕ ℚ</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ ∃ (n : ℕ), n ^ 3 = 8</span>\n<span class=\"cm\">-/</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>The problem is that Lean doesn't know how to raise a natural number to a rational power.</p>",
        "id": 213858501,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603149491
    },
    {
        "content": "<p>Note that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eight_has_a_cube_root</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">use</span> <span class=\"mi\">8</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213858851,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603149763
    },
    {
        "content": "<p>I've imported the function where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.has_pow\">docs#real.has_pow</a> was defined, changed the statement to talk about reals (which I <em>think</em> is what you wanted?) and use a real exponent.</p>",
        "id": 213858906,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603149814
    },
    {
        "content": "<p>Here is the rest of the proof (with 7 instead of 8):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">seven_has_a_cube_root</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">use</span> <span class=\"mi\">7</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213859164,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603150014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/cannot.20compute.20cube.20root/near/213859164\">said</a>:</p>\n<blockquote>\n<p>Here is the rest of the proof (with 7 instead of 8):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">seven_has_a_cube_root</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">use</span> <span class=\"mi\">7</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/cannot.20compute.20cube.20root/near/213858501\">said</a>:</p>\n<blockquote>\n<p>The error message isn't very helpful here, but if you use the very similar <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#existsi\">tactic#existsi</a>, you'll see the underlying problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eight_has_a_cube_root</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">existsi</span> <span class=\"mi\">8</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">⊢ has_pow ℕ ℚ</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ ∃ (n : ℕ), n ^ 3 = 8</span>\n<span class=\"cm\">-/</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>The problem is that Lean doesn't know how to raise a natural number to a rational power.</p>\n</blockquote>\n<p>Thank you very much for your kind support! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 213864840,
        "sender_full_name": "Formally Verified Waffle Maker",
        "timestamp": 1603154936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355768\">@Formally Verified Waffle Maker</span> there's some basic type theory to be known here. in maths we have partial functions, and numbers have flexible types (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>⊂</mo><mi mathvariant=\"double-struck\">Z</mi><mo>⊂</mo><mi mathvariant=\"double-struck\">Q</mi><mo>⊂</mo><mi mathvariant=\"double-struck\">R</mi><mo>⊂</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\Bbb N \\subset \\Bbb Z \\subset \\Bbb Q \\subset \\Bbb R \\subset \\Bbb C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72799em;vertical-align:-0.0391em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72799em;vertical-align:-0.0391em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72799em;vertical-align:-0.0391em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>). but in Lean, a natural number cannot suddenly become a real number, so expressions like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>8</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">8^{1/3}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">8</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span> doesn't make sense (or at least shouldn't give you a natural number) because it would have to be defined for all natural numbers, and last time I checked <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>7</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">7^{1/3}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span> is not a natural number. Here's the thing. Functions have fixed types as well. A function (such as cube root) have a fixed type for the input and a fixed type for the output (technically a lie, but let's go with this for now), so cube root has to have codomain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\Bbb R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.</p>",
        "id": 213881315,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603177553
    }
]