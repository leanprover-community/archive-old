[
    {
        "content": "<p>I wrote a new linter that catches type-class loops (<a href=\"https://github.com/leanprover-community/mathlib/issues/8932\">#8932</a>), and I'm making some topics with some issues it found. I don't always know the best solution to fix these loops, so I'm hoping that someone who knows that part of mathlib better can fix these.</p>\n<p>In category theory (<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> @others) I found the following issues:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.adjunction.has_limit_comp_equivalence\">docs#category_theory.adjunction.has_limit_comp_equivalence</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.under.category_theory.limits.has_limit\">docs#category_theory.under.category_theory.limits.has_limit</a> loop together. See following example (which is supposed to fail)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.adjunction.limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.over</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">under</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">limits.has_limit</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<ul>\n<li>Similarly, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.adjunction.has_colimit_comp_equivalence\">docs#category_theory.adjunction.has_colimit_comp_equivalence</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.over.category_theory.limits.has_colimit\">docs#category_theory.over.category_theory.limits.has_colimit</a> loop together</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.forget₂.category_theory.reflects_isomorphisms\">docs#category_theory.forget₂.category_theory.reflects_isomorphisms</a> loops together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.has_forget_to_Type\">docs#category_theory.has_forget_to_Type</a></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.reflects_isomorphisms</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">concrete_category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">concrete_category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_forget₂</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">reflects_isomorphisms</span> <span class=\"o\">(</span><span class=\"n\">forget₂</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<ul>\n<li>\n<p>The instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.pseudoelement.has_zero\">docs#category_theory.abelian.pseudoelement.has_zero</a> doesn't cause a loop per se, but<br>\nwhenever we are trying to find an instance for <code>has_zero</code> applied to any <code>coe_sort</code> this instance (and all <code>category</code> instances) are tried. Can we make this localized?</p>\n</li>\n<li>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.quiver.hom.add_comm_group\">docs#category_theory.quiver.hom.add_comm_group</a> (and other instances on <code>single_obj</code> if they exist) is superfluous, since type-class inference is happy to unfold <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.single_obj.category_struct\">docs#category_theory.single_obj.category_struct</a>. I don't think this really causes issues, but you could consider removing it</p>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.preadditive.default</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.single_obj</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">single_obj</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- ring.to_add_comm_group</span>\n</code></pre></div>",
        "id": 251455046,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1630442176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Just double checking... do you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.has_limit_equivalence_comp\">docs#category_theory.limits.has_limit_equivalence_comp</a> ? (The first link doesn't work in your message.)</p>",
        "id": 251455401,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630442327
    },
    {
        "content": "<p>Oops, it's missing the <code>category_theory</code> prefix. I mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.adjunction.has_limit_comp_equivalence\">docs#category_theory.adjunction.has_limit_comp_equivalence</a></p>",
        "id": 251455532,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1630442396
    },
    {
        "content": "<p>Ah!</p>",
        "id": 251455599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630442407
    },
    {
        "content": "<p>I fixed the links in my first message</p>",
        "id": 251455676,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1630442436
    },
    {
        "content": "<p>Sorry this took a while to get to: <a href=\"https://github.com/leanprover-community/mathlib/issues/9154\">#9154</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9155\">#9155</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9156\">#9156</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9157\">#9157</a>.</p>",
        "id": 252947377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631408524
    },
    {
        "content": "<p>Thanks for writer a new linter! They are a really valuable investment.</p>",
        "id": 252947402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631408576
    }
]