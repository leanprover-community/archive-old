[
    {
        "content": "<p>I don't really remember if having useless <code>id</code> in typeclasses can be bad for typeclass inference or not. For instance in</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">power_series</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">power_series</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">id</span> <span class=\"n\">mv_power_series</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n</code></pre></div>\n\n\n<p>Thoughts?</p>",
        "id": 200573875,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591895115
    },
    {
        "content": "<p>It does have a (probably bad) effect, yes.</p>",
        "id": 200573943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591895153
    },
    {
        "content": "<p>Namely, if this instance <code>power_series.ring</code> itself appears in the type of an instance search problem (maybe for a class like <code>class fancy_ring (A : Type) [ring A] := ...</code>, although this is not so common in the algebraic hierarchy, I suppose), then instance search will not be able to see that <code>power_series.ring</code> is actually equal to <code>mv_power_series.ring</code> so it won't apply instances that are declared for the latter.</p>",
        "id": 200575413,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591895748
    },
    {
        "content": "<p>Isn't hiding stuff the goal of such an instance?</p>",
        "id": 200579166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591897127
    },
    {
        "content": "<p>I don't think <code>id</code> has instance reducibility</p>",
        "id": 200579801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591897364
    },
    {
        "content": "<p>it is as opaque as a regular definition</p>",
        "id": 200579838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591897384
    },
    {
        "content": "<p>I think this comes up when you are trying to prove that some defeq diamond commutes</p>",
        "id": 200580070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591897484
    },
    {
        "content": "<p>It's not easy to come up with an example where it would matter here because I guess <code>power_series</code> must be defined by something like <code>def power_series := mv_power_series unit</code>, and this <code>def</code> also doesn't have instance reducibility.</p>",
        "id": 200580101,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591897499
    },
    {
        "content": "<p>it shouldn't hamper regular instance search</p>",
        "id": 200580103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591897500
    },
    {
        "content": "<p>A recent <code>norm_num</code> bug had to do with a problem of this form, where <code>int.has_sub</code> is defeq to <code>algebra_has_sub</code> but the defeq is only if you unfold semireducible definitions so lean prefers to unfold something else</p>",
        "id": 200580404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591897630
    },
    {
        "content": "<p>The typical way this burns you is if you have a second ring instance for <code>power_series</code>, like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mv_power_series</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span>\n</code></pre></div>",
        "id": 200580558,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591897688
    },
    {
        "content": "<p>You have, among many instances,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>        <span class=\"o\">:</span> <span class=\"n\">semiring</span>        <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">power_series</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>   <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span>   <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">power_series</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>            <span class=\"o\">:</span> <span class=\"n\">ring</span>            <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">power_series</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>       <span class=\"o\">:</span> <span class=\"n\">comm_ring</span>       <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">power_series</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 200584741,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591899476
    },
    {
        "content": "<p>O.ooo... did I create a mess?</p>",
        "id": 200584932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591899559
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3033\">#3033</a> (not sure it is really useful, but I don't think it can hurt).</p>",
        "id": 200586635,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591900281
    },
    {
        "content": "<p>It's typically not a problem because type-class instances usually occur in implicit arguments (and implicit arguments are unified with a higher transparency setting, i.e., semireducible).  The last time I've seen this issue is with the <code>bundled</code> structure from the category theory library (where the type-class instance is explicit).  Maybe the conclusion here is to make <code>bundled.str</code> instance-implicit.</p>",
        "id": 200592887,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591903401
    },
    {
        "content": "<p>The <code>clean</code> tactic is intended for just this purpose</p>",
        "id": 200593837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591903850
    },
    {
        "content": "<p>it removes identity functions inserted to the term by tactics that do definitional reduction</p>",
        "id": 200593902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591903878
    }
]