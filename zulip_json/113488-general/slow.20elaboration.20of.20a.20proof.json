[
    {
        "content": "<p>Consider the following on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.laurent_series</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_unit_of_mem_non_zero_divisors</span> <span class=\"o\">{</span><span class=\"n\">G₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">G₀</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">non_zero_divisors</span> <span class=\"n\">G₀</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_unit</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors.ne_zero</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors.ne_zero</span> <span class=\"n\">hx</span><span class=\"o\">)⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_fraction_ring</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">laurent_series</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_units</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">laurent_series.coe_algebra_map</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">is_unit_of_mem_non_zero_divisors</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">hahn_series.of_power_series</span> <span class=\"n\">ℤ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">hahn_series.of_power_series_injective</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ring_hom.map_mem_non_zero_divisors</span> <span class=\"o\">(</span><span class=\"n\">hahn_series.of_power_series</span> <span class=\"n\">ℤ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"n\">hy</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">surj</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_iff_exists</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>\n<p>On my machine it takes 40 seconds, where the offending line seems to be the one starting with <code>exact ring_hom....</code> What's going on here?</p>",
        "id": 266747009,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641250957
    },
    {
        "content": "<p>Something else is up too -- if I change the proof to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">map_units</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">laurent_series.coe_algebra_map</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">is_unit_of_mem_non_zero_divisors</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">laurent_series</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n      <span class=\"n\">hahn_series.of_power_series_injective</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>that is also very slow</p>",
        "id": 266747057,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641250999
    },
    {
        "content": "<p>injective algebra maps and slow functions :) does specifying the TC arguments speed it up?</p>",
        "id": 266747457,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641251258
    },
    {
        "content": "<p>I don't know the root cause, but this is some sort of universe issue, changing to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_fraction_ring</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">laurent_series</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_units</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">laurent_series.coe_algebra_map</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">is_unit_of_mem_non_zero_divisors</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">hahn_series.of_power_series</span> <span class=\"n\">ℤ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">hahn_series.of_power_series_injective</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ring_hom.map_mem_non_zero_divisors</span> <span class=\"o\">(</span><span class=\"n\">hahn_series.of_power_series</span> <span class=\"n\">ℤ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">surj</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_iff_exists</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>it becomes instant for me, edit: ok maybe not instant but seems way faster</p>",
        "id": 266749559,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641252514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> which of the TC arguments? For which statement?</p>",
        "id": 266749578,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641252530
    },
    {
        "content": "<p>Even with universes, this is slow for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.laurent_series</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_unit_of_mem_non_zero_divisors</span> <span class=\"o\">{</span><span class=\"n\">G₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">G₀</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">non_zero_divisors</span> <span class=\"n\">G₀</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_unit</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors.ne_zero</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors.ne_zero</span> <span class=\"n\">hx</span><span class=\"o\">)⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_fraction_ring</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">laurent_series</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_units</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">laurent_series.coe_algebra_map</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">is_unit_of_mem_non_zero_divisors</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"o\">(</span><span class=\"n\">power_series</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">laurent_series</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n      <span class=\"n\">hahn_series.of_power_series_injective</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">surj</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_iff_exists</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>",
        "id": 266749640,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641252579
    },
    {
        "content": "<p>But I can corroborate that <code>{K : Type u}</code> speeds it up!</p>",
        "id": 266749736,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641252633
    },
    {
        "content": "<p>Hm very strange, I have that exact file and it is only a second or so</p>",
        "id": 266749781,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641252667
    },
    {
        "content": "<p>Alex, with the <code>exact</code> line or the <code>function.injective (algebra_map ...)</code> line?</p>",
        "id": 266749889,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641252738
    },
    {
        "content": "<p>Oh right sorry, with exact + universes it is fast</p>",
        "id": 266750012,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641252839
    },
    {
        "content": "<p>But the second one is still slow</p>",
        "id": 266750060,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641252852
    },
    {
        "content": "<p>Strange. Gonna sweep it under the rug and just PR with the fast version. Thanks for the quick fix! <a href=\"https://github.com/leanprover-community/mathlib/pull/11220\">#11220</a></p>",
        "id": 266750334,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641253084
    }
]