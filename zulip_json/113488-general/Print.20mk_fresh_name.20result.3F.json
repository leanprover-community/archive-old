[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span>\n    <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">mk_fresh_name</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">hyp</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hyp</span>\n</pre></div>\n\n\n<p>I've tried placing the cursor at various points and that never gives the name stored in n, so how can I print that local variable <code>n</code>?</p>",
        "id": 174419482,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567047615
    },
    {
        "content": "<p>I'm not sure either how to make a \"function that returns a string\".  I've tried 10 different thoughts on it :/</p>",
        "id": 174419690,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567048016
    },
    {
        "content": "<p>Found this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">interface</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">io</span>\n<span class=\"n\">def</span> <span class=\"n\">print_squares</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">io</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">print_squares</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;</span>\n<span class=\"n\">put_str</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;^2 = &quot;</span> <span class=\"bp\">++</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">print_squares</span> <span class=\"mi\">100</span>\n</pre></div>",
        "id": 174419782,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567048175
    },
    {
        "content": "<p>What's literal for the void or empty type?</p>",
        "id": 174420000,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567048526
    },
    {
        "content": "<p>I need <br>\ndef my_print : empty -&gt; string := ...</p>",
        "id": 174420009,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567048556
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cr4k2QZjXi0qSsCRVOfZx_l1/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> <br>\nAlmost got it, but not quite.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cr4k2QZjXi0qSsCRVOfZx_l1/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/3121/cr4k2QZjXi0qSsCRVOfZx_l1/pasted_image.png\"></a></div>",
        "id": 174420217,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567048862
    },
    {
        "content": "<p>If by void you mean that thing in C, it's called <code>unit</code> and its element is <code>()</code></p>",
        "id": 174420486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049296
    },
    {
        "content": "<p><code>void</code> is a terrible name, because it's not empty</p>",
        "id": 174420488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049307
    },
    {
        "content": "<p>If you want a function that takes no arguments, that's just a value</p>",
        "id": 174420515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how do I convert a <code>tactic name</code> type to a string?</p>",
        "id": 174420563,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049407
    },
    {
        "content": "<p><code>def my_print : unit -&gt; string := ... </code> is basically equivalent to <code>def my_print : string := ...</code> and it can only return a constant string because lean is pure functional</p>",
        "id": 174420571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049433
    },
    {
        "content": "<p><code>to_string : name -&gt; string</code> should work</p>",
        "id": 174420585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049468
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n<span class=\"kn\">open</span> <span class=\"n\">io</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">print_name3</span> <span class=\"o\">:=</span>\n    <span class=\"n\">put_str</span> <span class=\"n\">mk_fresh_name</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">print_name3</span>\n</pre></div>",
        "id": 174420591,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049482
    },
    {
        "content": "<p>Doesn't work, because mk_fresh_name isn't a string</p>",
        "id": 174420595,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049500
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/lls3YSxHyWr_bC4x31KC2Ghj/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lls3YSxHyWr_bC4x31KC2Ghj/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/3121/lls3YSxHyWr_bC4x31KC2Ghj/pasted_image.png\"></a></div><p>Here's trying <code>to_string</code>.  Errors...</p>",
        "id": 174420646,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n<span class=\"kn\">open</span> <span class=\"n\">io</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_name3</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">run_tactic</span> <span class=\"n\">mk_fresh_name</span><span class=\"o\">,</span>\n   <span class=\"n\">put_str</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">to_string</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">print_name3</span>\n</pre></div>",
        "id": 174420656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  You're a super-coder.  Thank you!</p>",
        "id": 174420661,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049636
    },
    {
        "content": "<p>I take it you aren't familiar with monads; it's a good thing to read up on if you want to do imperative coding in lean</p>",
        "id": 174420698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049643
    },
    {
        "content": "<p>Yeah, I'm not that far yet in my cat theory studies.  Not a good place to be, but I'm getting there...</p>",
        "id": 174420702,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049675
    },
    {
        "content": "<p>I'll read up on monads &amp; programming this week</p>",
        "id": 174420708,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049697
    },
    {
        "content": "<p>don't worry about the category theory monads, programming monads are easier and more useful</p>",
        "id": 174420716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  thank you!</p>",
        "id": 174420718,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049720
    },
    {
        "content": "<p>and there are a bazillion tutorials online for them because haskell loves them and lean inherited the love</p>",
        "id": 174420722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  it returns <code>_fresh.657.185</code>.  I was expecting a nice variable like <code>C</code> that is available in the current scope</p>",
        "id": 174420781,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049830
    },
    {
        "content": "<p>it's globally unique, what did you expect?</p>",
        "id": 174420788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049857
    },
    {
        "content": "<p>it needs a lot of numbers because lean goes through names ravenously</p>",
        "id": 174420793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049880
    },
    {
        "content": "<p>I only need it unique for the current \"context of the current file\".  I.e. in the usual sense of declaring new variables in Lean</p>",
        "id": 174420836,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049893
    },
    {
        "content": "<p>\"available in the current scope\" doesn't exist</p>",
        "id": 174420841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049905
    },
    {
        "content": "<p>Like, this:</p>",
        "id": 174420843,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049911
    },
    {
        "content": "<p>there isn't really a global scope</p>",
        "id": 174420846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049917
    },
    {
        "content": "<p>every definition has its own local scope</p>",
        "id": 174420857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049949
    },
    {
        "content": "<p><code>variable n : nat</code>, is the only thing in a file.  Then querying for a free name should return something like <code>a</code>.</p>",
        "id": 174420863,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567049968
    },
    {
        "content": "<p>and stuff like <code>variable</code> are only directions for how to populate that local scope</p>",
        "id": 174420864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567049973
    },
    {
        "content": "<p>without a definition, i.e. in a <code>run_cmd</code> or <code>#eval</code>, there is no scope</p>",
        "id": 174420884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050002
    },
    {
        "content": "<p>Well, do you understand why I would need this?</p>",
        "id": 174420937,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050067
    },
    {
        "content": "<p>no?</p>",
        "id": 174420939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050072
    },
    {
        "content": "<p>BananaCats works with one Bancats window per Lean file.  Each Bancats window has many diagrams.  Whatever you're currently doing, those create-object commands get put at the end of the lean file (usually).  And to query stuff like if a variable name is available, I also do that there, then remove the command immediately, once the result is obtained.</p>",
        "id": 174421001,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050141
    },
    {
        "content": "<p>sounds good so far</p>",
        "id": 174421007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050175
    },
    {
        "content": "<p>If you create an object in a diagram</p>",
        "id": 174421008,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050178
    },
    {
        "content": "<p>then that code is permanent and is marked as auto-gen'd and \"don't edit me\"</p>",
        "id": 174421018,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050193
    },
    {
        "content": "<p>It's only permanent until the user decides to delete the object in the diagram and that variable's refcount drops to zero</p>",
        "id": 174421023,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050216
    },
    {
        "content": "<p>So, if managing to get the next available variable name is not doable right now in Lean, I can handle it on the Python side</p>",
        "id": 174421065,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050243
    },
    {
        "content": "<p>Because I just keep a dictionary of variables created</p>",
        "id": 174421074,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050252
    },
    {
        "content": "<p>and manage it</p>",
        "id": 174421078,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050263
    },
    {
        "content": "<p>I still don't know why you need variable names from that though</p>",
        "id": 174421079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050264
    },
    {
        "content": "<p>don't objects have user created names?</p>",
        "id": 174421085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050284
    },
    {
        "content": "<p>The user has the option to not specify the variable name sometimes.  And if the variable name is not available, I need to inform the user when they're thinking up a name</p>",
        "id": 174421097,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050307
    },
    {
        "content": "<p>It's a really professional app :)</p>",
        "id": 174421102,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050333
    },
    {
        "content": "<p>To test if a variable is available, you can try to add the variable line and see if you get a redeclaration error</p>",
        "id": 174421149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050369
    },
    {
        "content": "<p>For instance, when I create a category, I might not care that it got the variable name C</p>",
        "id": 174421150,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  thanks, I'll try it out :)</p>",
        "id": 174421157,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050388
    },
    {
        "content": "<p>If you are autogenerating names, just use some convention like <code>_banana_1</code>, <code>_banana_2</code> to make it obvious that they are autogenerated</p>",
        "id": 174421164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050408
    },
    {
        "content": "<p>The Lean Code has to be readable and editable under the assumption that in version 0 you can't re-sync with Bancats pyqt5 should you mess with auto-gen code</p>",
        "id": 174421180,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050456
    },
    {
        "content": "<p>You're allowed to edit the file in VSCode while it's auto-gen'd (parts of it) by Bancats app</p>",
        "id": 174421184,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050476
    },
    {
        "content": "<p>Sort of like how Visual Studio &amp; Qt Creator work</p>",
        "id": 174421225,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050492
    },
    {
        "content": "<p>To accomplish this, I'm just storing the auto-gen code as strings on BanCats side, with the variable name.  When refcount goes to 0, I search the file for the exact declaration code, delete it</p>",
        "id": 174421238,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050532
    },
    {
        "content": "<p>This is all guess work so far, I have still to connect my app to VSCode</p>",
        "id": 174421247,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050564
    },
    {
        "content": "<p>In lean proofs, there are many tactics that create names automatically, but it's bad form to refer to them explicitly - that means you should have named it</p>",
        "id": 174421248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050566
    },
    {
        "content": "<p>I did work on some of the lean extension's typescript, adapting it to connect to two different EXE's, lean and bancats</p>",
        "id": 174421260,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I'm not sure what that entails</p>",
        "id": 174421312,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050629
    },
    {
        "content": "<p>Should have named what?</p>",
        "id": 174421331,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050669
    },
    {
        "content": "<p>Could you give an example of what's bad?</p>",
        "id": 174421333,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050683
    },
    {
        "content": "<p>Anyway, thanks for all your help.  I like the variable decl idea, and will be using it</p>",
        "id": 174421387,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050774
    },
    {
        "content": "<p>I mean if you write <code>intro</code> and it introduces a variable called <code>_a</code>, that's fine, but if you later have to write e.g. <code>exact _a</code> then you should go back and change it to <code>intro x</code> and <code>exact x</code></p>",
        "id": 174421401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050841
    },
    {
        "content": "<p>Similarly, if you have an unnamed object, that's fine, but if you have to talk about that object in any way then it's not fine anymore and you should prompt the user to name it</p>",
        "id": 174421456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567050883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you're probably right.</p>",
        "id": 174421474,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050942
    },
    {
        "content": "<p>My design ideas aren't final until I release.  I'm design as I code and learn what <em>can</em> be done.</p>",
        "id": 174421531,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567050966
    },
    {
        "content": "<p>A simple mechanism that should work is to use the variable testing thing to find the next available name in some series like <code>C_1</code>, <code>C_2</code> or whatever you think a nice letter for your objects is</p>",
        "id": 174421557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051043
    },
    {
        "content": "<p>the point about using auto variable names is more a code style thing; from an implementation perspective I think it should be fine to let the user refer to them if they really want to</p>",
        "id": 174421618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051133
    },
    {
        "content": "<p>Right, that's what I do, except with dictionary when it's within app.  Bancats also supports auto-indexing in a very simple and smart way.  If you name an arrow <code>f</code> and check auto-indexing.  It will go to <code>g</code>.  But also understands any index-like thing in the symbol, e.g. $\\text{Hom}_C(A_1, B_2)$ has several indexables, and you get to choose the one you want.  Neat, eh?</p>",
        "id": 174421687,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051233
    },
    {
        "content": "<p>as in you might be calling that <code>f_12</code>?</p>",
        "id": 174421705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051273
    },
    {
        "content": "<p>or <code>f_1</code> or <code>f_2</code></p>",
        "id": 174421713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051278
    },
    {
        "content": "<p>? not sure</p>",
        "id": 174421723,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051295
    },
    {
        "content": "<p>Seems like it would be tricky to preserve all this information in the lean file without special annotation</p>",
        "id": 174421769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051332
    },
    {
        "content": "<p>Yes, that's one of the ways to auto-index, but as it is now, you need to have $f_1$ made as an arrow first, then it will know what to do. Or you could start at $f_i$ and it will go to $f_j, f_k, f_l, ...$</p>",
        "id": 174421777,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I don't do that</p>",
        "id": 174421786,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051371
    },
    {
        "content": "<p>The Bancats system is to have lean files mixed with .bancats files</p>",
        "id": 174421789,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051382
    },
    {
        "content": "<p>They go together</p>",
        "id": 174421796,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051386
    },
    {
        "content": "<p>so the bancats file sources all the autogenerated data in the lean file?</p>",
        "id": 174421800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051410
    },
    {
        "content": "<p>You cannot open the bancats file by double clicking it, unless we can somehow get that to trigger VSCode to open instead</p>",
        "id": 174421801,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  yes, most likely</p>",
        "id": 174421803,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051424
    },
    {
        "content": "<p>why can't you do your own variable name tracking then?</p>",
        "id": 174421806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051441
    },
    {
        "content": "<p>And the lean files provide the formal proof, but also the bancats diagrams show visually the steps in the proof</p>",
        "id": 174421843,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051444
    },
    {
        "content": "<p>are you worried about user variables polluting your namespace?</p>",
        "id": 174421852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I can do both actually, and that will provide benefits in places</p>",
        "id": 174421853,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051464
    },
    {
        "content": "<p>Well, there's only one bancats window per file, but that window could have 50 diagrams in it say</p>",
        "id": 174421870,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051503
    },
    {
        "content": "<p>But they all point to the same lean file</p>",
        "id": 174421879,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051513
    },
    {
        "content": "<p>if you generate a complete lean file then you will know all the variable declarations in it, so you can avoid any collisions</p>",
        "id": 174421880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051513
    },
    {
        "content": "<p>Then if you need multiple leans, you pop open another bancats window</p>",
        "id": 174421886,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051525
    },
    {
        "content": "<p>The entire scope of dissertation is one bancats instance -&gt; they don't communicate between instances of bancats</p>",
        "id": 174421899,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051551
    },
    {
        "content": "<p>*scope of discourse of math</p>",
        "id": 174421903,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  yes, but as I say, it will not be 100% autogen, the user can go in and add stuff even to the currently pointed to file</p>",
        "id": 174421949,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051596
    },
    {
        "content": "<p>So they could create new variables there, using them up, while it's not reflected in Bancats, and that's okay</p>",
        "id": 174421955,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051614
    },
    {
        "content": "<p>Bancats is only a visual driver and displayer of diagram chasing proofs, which naturally are easier to remember if there's a diagram invovled.</p>",
        "id": 174421968,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051656
    },
    {
        "content": "<p>later, because of the Curry-Howard-Lambek correspondence of type thoery with cat theory, we may be able to use the diagram editor in a more interesting way such as extending Lean using diagrams (graphs) instead of 100% pure formal Lean code.</p>",
        "id": 174422010,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051731
    },
    {
        "content": "<p>But that's not a goal for version 1 or anything soon</p>",
        "id": 174422012,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051742
    },
    {
        "content": "<p>hm, well I wish you luck</p>",
        "id": 174422028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567051789
    },
    {
        "content": "<p>In version 1, if the user would like to add a new non-standard lib category, then they'll have to write some .lean file and import it somehow.</p>",
        "id": 174422030,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  thank you!  ^_^</p>",
        "id": 174422074,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051814
    },
    {
        "content": "<p>I've already come up with a 90% visual proof of Yoneda's Lemma.  The proof, I've never seen it before in a book, and no one else does the proof that way.  It's two commuting squares pasted together (natural diagram squares).  But you should wait for version 1 to view it in all of its bancat features</p>",
        "id": 174422146,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567051955
    },
    {
        "content": "<p>Here's an MS Paint3D mock-up of it (with some text to complet that part of Yoneda's lemma):<br>\n<a href=\"https://i.stack.imgur.com/4uCeN.png\" target=\"_blank\" title=\"https://i.stack.imgur.com/4uCeN.png\">https://i.stack.imgur.com/4uCeN.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i.stack.imgur.com/4uCeN.png\" target=\"_blank\" title=\"https://i.stack.imgur.com/4uCeN.png\"><img src=\"https://i.stack.imgur.com/4uCeN.png\"></a></div>",
        "id": 174422175,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567052040
    },
    {
        "content": "<p>But of course Lean will step in and any of that text will just be comments</p>",
        "id": 174422221,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567052076
    }
]