[
    {
        "content": "<p>Is this line evil? <a href=\"https://github.com/leanprover-community/mathlib/blob/ad0f42dfaae66f646155e33acd047aa5c8a35014/src/data/nat/enat.lean#L20\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/ad0f42dfaae66f646155e33acd047aa5c8a35014/src/data/nat/enat.lean#L20\">https://github.com/leanprover-community/mathlib/blob/ad0f42dfaae66f646155e33acd047aa5c8a35014/src/data/nat/enat.lean#L20</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"bp\">ℕ</span> <span class=\"n\">enat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">some</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Because <code>enat</code> is also receives <code>nat.cast</code>. So now we get <code>\\u n = \\u n</code> which is not true by <code>rfl</code>.</p>",
        "id": 165814627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558016657
    },
    {
        "content": "<p>No, that's fine</p>",
        "id": 165816346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558017750
    },
    {
        "content": "<p>It can't be helped</p>",
        "id": 165816354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558017758
    },
    {
        "content": "<p>There should be a simp lemma to get rid of the transitive path though</p>",
        "id": 165816373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558017773
    },
    {
        "content": "<p>oh wait, they are going the same direction</p>",
        "id": 165816531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558017856
    },
    {
        "content": "<p>so this is like <code>int.coe_nat</code></p>",
        "id": 165816558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558017878
    },
    {
        "content": "<p>there should be a simp lemma one way or the other</p>",
        "id": 165816622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558017921
    },
    {
        "content": "<p>How do I even state the simp-lemma?</p>",
        "id": 165817047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558018163
    },
    {
        "content": "<p>I mean, how do I get Lean to infer the cast on the LHS and the coe on the RHS.</p>",
        "id": 165817071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558018189
    },
    {
        "content": "<p>Can't we just define the coe to be <code>nat.cast</code>? And have a simp-lemma that simps away <code>some n</code>?</p>",
        "id": 165817143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558018214
    },
    {
        "content": "<p>you have to write it out, yes it's ugly</p>",
        "id": 165817345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558018361
    },
    {
        "content": "<p>yes that's an alternative</p>",
        "id": 165817384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558018395
    },
    {
        "content": "<p>the defeqs on <code>roption.some</code> aren't that great, so it doesn't seem like a bad idea</p>",
        "id": 165817407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558018417
    },
    {
        "content": "<p>of course the run time is exponential rather than O(1)</p>",
        "id": 165817423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558018433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What do you mean with that last remark?</p>",
        "id": 165818629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558019159
    },
    {
        "content": "<p>And with \"writing it out\", you mean I have to write weird code as if it's pp.all output?</p>",
        "id": 165818712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558019186
    },
    {
        "content": "<p>roption.some does basically nothing, it's a constant function</p>",
        "id": 165818726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558019192
    },
    {
        "content": "<p>nat.cast has exponential run time</p>",
        "id": 165818758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558019212
    },
    {
        "content": "<p>Aha..., so it's better to simp away <code>nat.cast</code></p>",
        "id": 165818791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558019232
    },
    {
        "content": "<p>I didn't say that</p>",
        "id": 165818804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558019243
    },
    {
        "content": "<p>it's better to simp to something with a lot of lemmas</p>",
        "id": 165818822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558019258
    },
    {
        "content": "<p>when rewriting with simp runtime doesn't matter</p>",
        "id": 165818841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558019275
    },
    {
        "content": "<p>(runtime of the function being manipulated, not runtime of the simp command itself)</p>",
        "id": 165818922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558019315
    },
    {
        "content": "<p>It's better not to have the coe surely?</p>",
        "id": 165821242,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558020921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I don't know... I'm really not an expert when it comes to these things.</p>",
        "id": 165822263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558021740
    },
    {
        "content": "<p>I don't know how important the complexity of such a map is.</p>",
        "id": 165822278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558021751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">enat</span><span class=\"bp\">.</span><span class=\"n\">nat_cast_eq_coe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 165824465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558023432
    },
    {
        "content": "<p>I think it's better to drop the coe. Less ways to say things means less complexity overall</p>",
        "id": 165825069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558023914
    },
    {
        "content": "<p>that lemma can then be stated as <code>some n = \\u n</code></p>",
        "id": 165825153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558023964
    },
    {
        "content": "<p>Ok... fine with me...</p>",
        "id": 165825747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558024544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What is the reasoning behind simp-lemmas like this?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/enat.lean#L173\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/enat.lean#L173\">https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/enat.lean#L173</a></p>",
        "id": 165980852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558196393
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">to_with_top_top</span> <span class=\"o\">:</span> <span class=\"n\">to_with_top</span> <span class=\"err\">⊤</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">to_with_top_top&#39;</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">to_with_top</span> <span class=\"err\">⊤</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">to_with_top_top</span>\n</pre></div>",
        "id": 165980913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558196410
    },
    {
        "content": "<p>Why can't we just make the first lemma a simp-lemma, and remove the 2nd lemma?</p>",
        "id": 165980920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558196434
    },
    {
        "content": "<p>Sometimes the <code>decidable top.dom</code> instance ends up not being defeq to <code>decidable_true</code> and then the first lemma won't work.</p>",
        "id": 165981125,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558196865
    },
    {
        "content": "<p>Aah, I see, thanks!</p>",
        "id": 165981313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558197131
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1048\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1048\">#1048</a></p>",
        "id": 165981724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558197778
    },
    {
        "content": "<p>Probably breaks other files...</p>",
        "id": 165981743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558197799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think these changes are fine? I had to replace a whole bunch of <code>rfl</code> proofs with more elaborate proofs.</p>",
        "id": 165981753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558197841
    },
    {
        "content": "<p>If you think this is ok, then I'll fix the files that depend on <code>enat</code>.</p>",
        "id": 165981798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558197858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> But won't the second version use typeclass inference to get the decidable instance anyway, and then complain that it's not the one it got from unification? I think it should be <code>{_: decidable (⊤ : enat).dom}</code></p>",
        "id": 165997829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558225739
    },
    {
        "content": "<p>You'd have thought so, but I think there was an example where it helped, though I don't remember what.</p>",
        "id": 166004907,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558239433
    },
    {
        "content": "<p>Hmm..... I'm not sure if I understand these issues well enough to do a decent refactor of <code>enat</code>...</p>",
        "id": 166005215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558240019
    },
    {
        "content": "<p>I think the example might have had a <code>local attribute... Classical around</code></p>",
        "id": 166010614,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558250108
    },
    {
        "content": "<p>The proof of <code>to_with_top_le</code> doesn't work without these lemmas. There is a local <code>_inst_2 : decidable (⊤.dom)</code>, so I guess that's why.</p>",
        "id": 166023101,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558271666
    }
]