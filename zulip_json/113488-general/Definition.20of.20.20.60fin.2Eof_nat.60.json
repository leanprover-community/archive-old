[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.of_nat\">docs#fin.of_nat</a> is not convenient to use. Maybe <code>def of_nat {n : ℕ} [nonempty (fin n)] (a : nat) : fin n</code> is better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">succ_pos</span> <span class=\"n\">n</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of_nat</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h.elim</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">i.2</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 281554870,
        "sender_full_name": "FR",
        "timestamp": 1651949191
    },
    {
        "content": "<p>If it is preferred, I will make a PR to the core library. My Github username is negiizhao.</p>",
        "id": 281555211,
        "sender_full_name": "FR",
        "timestamp": 1651949682
    },
    {
        "content": "<p>I think those instance create a typeclass loop, doesn't <code>has_zero</code> imply <code>non_empty</code>?</p>",
        "id": 281556615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651951589
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_zero.nonempty\">docs#has_zero.nonempty</a></p>",
        "id": 281556619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651951600
    },
    {
        "content": "<p>Yeah, so we can't have the instances you suggest</p>",
        "id": 281556624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651951621
    },
    {
        "content": "<p>If you wanted to go down that route we could use <code>[fact (n \\ne 0)]</code> instead, but I think that would be more annoying</p>",
        "id": 281556637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651951641
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fact\">docs#fact</a> is in mathlib, we can't use it in core library.<br>\nHow about make a new typeclass like <code>nonempty_fin</code>? I just can't figure out a better solution...</p>",
        "id": 281584524,
        "sender_full_name": "FR",
        "timestamp": 1651994275
    },
    {
        "content": "<p>Why can't you just use the current <code>fin.of_nat</code>?</p>",
        "id": 281584795,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651994675
    },
    {
        "content": "<p>We can use the current <code>fin.of_nat</code> only for <code>fin (succ n)</code>.</p>",
        "id": 281584877,
        "sender_full_name": "FR",
        "timestamp": 1651994834
    },
    {
        "content": "<p>The same goes for <code>0</code> and <code>1</code>.</p>",
        "id": 281584933,
        "sender_full_name": "FR",
        "timestamp": 1651994966
    },
    {
        "content": "<p>Sure. And there's no way you can use it for <code>fin 0</code>, so what's the problem?</p>",
        "id": 281585000,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651995117
    },
    {
        "content": "<p>For example, we can't say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>even though we know that <code>fin n</code> is nonempty and therefore has 0.</p>\n<p>In APIs, this is often written as <code>x : fin n.succ</code>. But it would become annoying when using these APIs.</p>",
        "id": 281585740,
        "sender_full_name": "FR",
        "timestamp": 1651996324
    },
    {
        "content": "<p>I've been using these APIs lots and it is not. Can you give an example?</p>",
        "id": 281585820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651996476
    },
    {
        "content": "<p>Sorry, I tried, but it's not easy to make a mwe.</p>\n<p>In the case like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_add_flip\">docs#fin_add_flip</a>, it's not easy to change the expression in <code>fin</code> to the form <code>n.succ</code>.</p>\n<p>I also tried to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.of_nat'\">docs#fin.of_nat'</a>, but there are only a few related APIs.</p>",
        "id": 281586840,
        "sender_full_name": "FR",
        "timestamp": 1651998162
    },
    {
        "content": "<p>Note that I suggested the <code>fact</code> version of <code>has_zero</code> before, here: <a href=\"#narrow/stream/113489-new-members/topic/Permutation.20groups.20-.20coercions.20from.20nat.20to.20.28fin.20n.29\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Permutation.20groups.20-.20coercions.20from.20nat.20to.20.28fin.20n.29</a></p>",
        "id": 281586954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651998346
    },
    {
        "content": "<p>It sounds like we just need to copy across the <code>of_nat</code> API for <code>of_nat</code></p>",
        "id": 281587005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651998417
    },
    {
        "content": "<p>Is there any plan for refactoring?</p>",
        "id": 282340999,
        "sender_full_name": "FR",
        "timestamp": 1652517123
    }
]