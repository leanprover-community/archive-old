[
    {
        "content": "<p>Travis is complaining on my PRs <a href=\"https://github.com/leanprover-community/mathlib/issues/883\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/883\">#883</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/897\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/897\">#897</a>, but I am not sure this is my fault: what is failing is the shell tests \"check install scripts\" and \"check dev scripts\". Is there anything I can do about it?</p>",
        "id": 162769598,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1554665750
    },
    {
        "content": "<p>I conjecture it's something to do with pushing from your own fork instead of a branch of leanprover-community. <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> 's working on fixing it. I guess <a href=\"https://github.com/leanprover-community/mathlib/issues/883\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/883\">#883</a> can probably safely be merged, and it will build once it's on master.</p>",
        "id": 162770446,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554667173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> can you push your branches to <code>leanprover-community/mathlib</code>? It makes it easier to test the installation scripts that way because GitHub rejects requests when you make more than a few without authentication.</p>",
        "id": 162772006,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554669743
    },
    {
        "content": "<p>Travis is timing out on completely innocent pull requests, like <a href=\"https://github.com/leanprover-community/mathlib/issues/1423\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1423\">#1423</a>. <br>\nDoes anyone know which commit caused this regressed behavior?</p>\n<p>I saw that other Github repo's automatically got a reply with compilation performance. Maybe we can make a bot that automatically replies to a PR if the compilation time is increased by more than 5% or something?</p>",
        "id": 175361313,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568137791
    },
    {
        "content": "<p>I assumed in my previous message that there was a merged commit that caused performance issues, but they all seem fine. Maybe this was a cache-related issue (I merged the PR into master, maybe that fixes it)</p>",
        "id": 175361861,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568138159
    },
    {
        "content": "<p>Regardless of what caused it here, regression testing for compilation time would be a good idea.</p>",
        "id": 175363359,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568139060
    },
    {
        "content": "<p>I don't know if Travis is reliable enough to do this.</p>",
        "id": 175363403,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568139092
    },
    {
        "content": "<p>But maybe we could run something once a day on Scott's server?</p>",
        "id": 175363427,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568139109
    },
    {
        "content": "<p>I guess that would more reliably throw the same processing power at it.</p>",
        "id": 175363495,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568139132
    },
    {
        "content": "<p>Last three pushes to master built in around 107 (most recent), 100, 110 minutes. I didn't look at the changes, but I assume they were not responsible for this variance.</p>",
        "id": 175363544,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568139160
    },
    {
        "content": "<p>Interestingly <a href=\"https://travis-ci.org/leanprover-community/mathlib/builds/583109848?utm_source=github_status&amp;utm_medium=notification\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/builds/583109848?utm_source=github_status&amp;utm_medium=notification\">this build</a> of PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1428\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1428\">#1428</a> timed out, but <code>leanpkg build</code> actually finished, it just took so much longer than usual that there wasn't enough time left to run <code>leanchecker</code>.</p>",
        "id": 175363759,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568139284
    },
    {
        "content": "<p>I'm sure a dedicated machine would be more consistent, I'm not sure how much more consistent.<br>\nDoesn't Scott already build everything anyways? Or did I imagine that?</p>",
        "id": 175364067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568139475
    },
    {
        "content": "<p>I think the mathlib nightlies get pushed to Scott from Travis. Would he be building for another reason?</p>",
        "id": 175364221,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568139592
    },
    {
        "content": "<p>I could be wrong about that though.</p>",
        "id": 175364308,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568139620
    },
    {
        "content": "<p>No, at present I'm still building nothing. That project fell through, for lack of anyone who had the time/expertise combination to script things. I <em>think</em> the idea had been to push from travis to my account on S3, and then for my computer to poll that S3 account, but the pushing-to-S3 step never happened.</p>",
        "id": 175380528,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568151305
    },
    {
        "content": "<p>I would love to have the infrastructure in place so that every commit received an olean cache. I can provide the CPU time, I think.</p>",
        "id": 175380624,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568151372
    },
    {
        "content": "<p>I think that's <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> 's territory. Checking build times once a day would be a lot simpler. Do you think your server has a consistent enough load to do this with enough precision?</p>",
        "id": 175380791,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568151524
    },
    {
        "content": "<p>Probably. It has 18 physical cores. I routinely leave some single-threaded calculations running, but it's never more than 6. It's been a while since I've had anything multithreaded that I want left running. So if I limit the build to say 6 or 8 cores, and run it in the middle of my night, it shouldn't have any competition.</p>",
        "id": 175381239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568151950
    },
    {
        "content": "<p>The idea is that I would just pull a fresh copy of master, build, and have a script post the time here?</p>",
        "id": 175381306,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568151996
    },
    {
        "content": "<p>Yeah, something like that. We just want to see an alert if there's an unexpected jump in compile time. Posting here would be enough.</p>",
        "id": 175381416,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568152094
    },
    {
        "content": "<p>Ideally, if it noticed a spike it would try to find the responsible commit.</p>",
        "id": 175381554,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568152215
    },
    {
        "content": "<p>That could use a bunch more cycles.</p>",
        "id": 175381574,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568152235
    },
    {
        "content": "<p>I think our limiting factor is scripting and testing, not available cycles.</p>",
        "id": 175381962,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568152361
    },
    {
        "content": "<p>I am just capable enough at writing bash scripts to do a bad job of this, so help would definitely be appreciated. It might require jumping through some hoops, but I could probably work out how to give someone ssh access.</p>",
        "id": 175382070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568152488
    },
    {
        "content": "<p>Feel free to put that code up on <code>mathlib-tools</code> and I'll see if I can contribute something</p>",
        "id": 175402790,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1568180163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, I'm helpless at this, it seems. I downloaded zulip's sample python file for posting a message from <a href=\"api/send-message\" target=\"_blank\" title=\"api/send-message\">https://leanprover.zulipchat.com/api/send-message</a>, as <code>scripts/zulip.py</code>. I ran <code>pip install zulip</code>, which seemed to work. However running <code>./zulip.py</code> just says:</p>\n<div class=\"codehilite\"><pre><span></span>idaeus:scripts scott$ python zulip.py\nTraceback (most recent call last):\n  File &quot;zulip.py&quot;, line 1, in &lt;module&gt;\n    import zulip\n  File &quot;/Users/scott/projects/lean/mathlib-tools/scripts/zulip.py&quot;, line 4, in &lt;module&gt;\n    client = zulip.Client(config_file=&quot;~/.zuliprc&quot;)\nAttributeError: &#39;module&#39; object has no attribute &#39;Client&#39;\n</pre></div>\n\n\n<p>which suggests to me that python is not correctly finding the zulip library.</p>",
        "id": 175403885,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568181909
    },
    {
        "content": "<p>(I've committed the sample script to <code>mathlib-tools</code>, so you can see what I'm trying to do.)</p>",
        "id": 175403888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568181932
    },
    {
        "content": "<p>I tried some variations, e.g. <code>pip3 install zulip</code>, and it reports success too. :-)</p>",
        "id": 175403891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568181954
    },
    {
        "content": "<p>(If my computer can't even work out how to run a little shell script, how on earth is it going to get a gold medal at the IMO...?!)</p>",
        "id": 175404150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568182347
    },
    {
        "content": "<p>I'm sure there are a lot of IMO gold medalists that down know what a bash script is...</p>",
        "id": 175404253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568182544
    },
    {
        "content": "<p>Cancel this request for help, I found <code>zulip-send</code>, which just works from the command line.</p>",
        "id": 175408797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568188433
    },
    {
        "content": "<p>I can also put together some shell scripts, especially if you can figure out a way to grant me access to your machine</p>",
        "id": 175426403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568205412
    },
    {
        "content": "<p>I was thinking it might be nice to run <code>lean --profile</code> with these regular builds of mathlib to get more detailed diagnostics. However, I tried running <code>lean --make --profile src/ &gt; profile.log</code> in my mathlib directory and it keeps segfaulting after a while. Has anyone tried anything like this?</p>",
        "id": 175452421,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1568221003
    },
    {
        "content": "<p>I also meant to ask whether there are statistics (<code>lean --profile</code> or anything else like it) which would be good to record and don't affect compile time too much</p>",
        "id": 175452489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568221073
    },
    {
        "content": "<p>I managed to profile mathlib with <code>lean -j1 --make --profile src/ &gt; profile.log</code>. It took maybe 2 hours on my machine, so it's probably not something we could run more than once a day:</p>\n<div class=\"codehilite\"><pre><span></span>cumulative profiling times:\n    compilation 12.8s\n    decl post-processing 2.56e+03s\n    elaboration 3.87e+03s\n    elaboration: tactic compilation 70.9s\n    elaboration: tactic execution 2.67e+03s\n    parsing 122s\n    type checking 17.2s\n</pre></div>\n\n\n<p>I've attached the (compressed) <code>profile.log</code> if anyone else wants to have a go at extracting useful statistics from it: <a href=\"user_uploads/3121/PLD-jhGvJwY0mtkFerySJ6zd/profile_140a606.log.zip\" target=\"_blank\" title=\"user_uploads/3121/PLD-jhGvJwY0mtkFerySJ6zd/profile_140a606.log.zip\">profile_140a606.log.zip</a> (3.1MB)</p>",
        "id": 175490289,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1568250400
    },
    {
        "content": "<p>Couldn't we run it 12*N times per day, if we have N processors?</p>",
        "id": 175490477,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568250664
    },
    {
        "content": "<p>(Assuming we believe in isolation between processors which is definitely false, but hey)</p>",
        "id": 175490497,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568250713
    },
    {
        "content": "<p>It also used a fairly large amount of memory too (~2 GB by the end).</p>",
        "id": 175490555,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1568250769
    },
    {
        "content": "<p>I have 128gb on this machine, so memory shouldn't be a problem.</p>",
        "id": 175496464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568259991
    },
    {
        "content": "<p>Unfortunately my computer has rebooted itself several times in the last few days, and I can't work out why.</p>",
        "id": 175496472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568260010
    },
    {
        "content": "<p>A student has been running calculations in GAP that use lots of RAM, but simultaneously I started experimenting with building Lean regularly via cron, so I don't really know which is at fault.</p>",
        "id": 175496487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568260047
    },
    {
        "content": "<p>I've also been having trouble getting my build script to run multithreaded.... Usually Lean uses lots of cores, but somehow when it runs in the cron job, it uses 2 cores for a few minutes, then drops to 1, and I'm completely bamboozled as to why.</p>",
        "id": 175496567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568260152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, in terms of giving you (or <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>) access to this computer, I think the options are:</p>\n<p>1. We fill out the \"campus visitor\" form, which would give you an ANU id number. I then get our IT people to add that id number to our VPN configuration. To ssh in, you'd then need to connect to the relevant VPN, then ssh.<br>\n2. I make a persistent outbound ssh tunnel to some other server (e.g. the one hosting my website), that forwards traffic back to port 22 here. Dodgy as anything, but that's what they invented ssh tunnelling for, I guess.<br>\nIt's a bit of a hassle either way.</p>",
        "id": 175496700,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568260344
    },
    {
        "content": "<p>1. looks simpler to me. It also looks less likely you'll get reprimanded for it.</p>",
        "id": 175496721,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1568260434
    },
    {
        "content": "<p>Okay, I have just initiated our process to give both you and Reid university id's here. You'll receive an email with a link to a form, but feel free to fill out the barest minimum of information it will let you submit with. :-)</p>",
        "id": 175496984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568260848
    },
    {
        "content": "<p>Cool :)</p>",
        "id": 175496997,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1568260870
    },
    {
        "content": "<p>Sorry I'm not too verbose today. I'm exhausted</p>",
        "id": 175497005,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1568260901
    },
    {
        "content": "<p>Is \"suburb\" what you call a city?</p>",
        "id": 175524836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568292375
    },
    {
        "content": "<p>I guess. :-)</p>",
        "id": 175525467,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568292870
    },
    {
        "content": "<p>By Australian standards, clearly Berkeley is part of San Francisco, and thus we have very few \"cities\", so apparently \"suburb\" is the next division down.</p>",
        "id": 175525552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568292951
    },
    {
        "content": "<blockquote>\n<p>Couldn't we run it 12*N times per day, if we have N processors?<br>\n(Assuming we believe in isolation between processors which is definitely false, but hey)</p>\n</blockquote>\n<p>I tried this once, and the conclusion was that sadly if you want to get reliable benchmark results, you need to run your program with pretty much exclusive access to the machine (and on real hardware as opposed to a cloud vCPU). Running one benchmark per physical CPU core skews the timings to the point of uselessness, probably due to contention on memory, on I/O, and whatever else is shared between CPUs. Anyway in case of mathlib, because the build times are so long, maybe random noise is not that much of an issue - unless it's possible for a single run of <code>lean --make</code> to somehow get in a failure mode which makes the entire build proceed slower than usual, but that seems unlikely.</p>",
        "id": 175568606,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1568320474
    },
    {
        "content": "<p>Yeah, I'm pretty disappointed by the results <a href=\"#narrow/stream/113538-travis/topic/build.20time.20bot\" title=\"#narrow/stream/113538-travis/topic/build.20time.20bot\">from overnight</a>. </p>\n<p>113m51.476s<br>\n113m18.228s<br>\n114m49.561s<br>\n110m48.239s<br>\n105m30.344s<br>\n101m58.073s</p>\n<p>I would guess that's too much random variability to be useful.</p>",
        "id": 175575761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568325980
    },
    {
        "content": "<p>What conditions is that under?</p>",
        "id": 175576037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568326252
    },
    {
        "content": "<p>Travis or your own machine?</p>",
        "id": 175576042,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568326260
    },
    {
        "content": "<p>1 core?</p>",
        "id": 175576045,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568326264
    },
    {
        "content": "<p>This is on my own machine, running with <code>-j1</code>.</p>",
        "id": 175576386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568326654
    },
    {
        "content": "<p>I realise now that I left it running every hour, so builds were overlapping. I've slowed down cron and will see if that improves things.</p>",
        "id": 175576647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568326892
    },
    {
        "content": "<p>If no one else is already working on it I'll take a stab at writing a Python script to parse the profile output into JSON (or some other format?) later tonight.</p>",
        "id": 175576894,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1568327101
    },
    {
        "content": "<p>Now that the builds are not overlapping, the timing is quite uniform ---</p>\n<p>98m31.200s<br>\n98m52.938s<br>\n99m3.707s<br>\n99m7.776s<br>\n98m57.582s<br>\n98m42.635s<br>\n98m45.471s</p>",
        "id": 175724174,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568506026
    },
    {
        "content": "<p>However this has been running over the weekend, without anything else running on this machine. We'll have to see if it stays uniform tomorrow once I'm in the office.</p>",
        "id": 175724280,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568506223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> if you feel like parsing the profile output into something useful that might be fun. :-)</p>",
        "id": 175724344,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568506331
    },
    {
        "content": "<p>My script keeps uploading the logs.</p>",
        "id": 175724348,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568506348
    },
    {
        "content": "<p>top 100 items:</p>\n<div class=\"codehilite\"><pre><span></span>62.4 decl post-processing of lattice.semilattice_sup_top took 62.4s\n61.2 decl post-processing of subtype.comm_group took 61.2s\n59.3 decl post-processing of is_subgroup.of_div took 59.3s\n46.6 decl post-processing of to_monoid_hom took 46.6s\n34.8 decl post-processing of image_subgroup took 34.8s\n27.8 decl post-processing of list_prod_apply took 27.8s\n25.7 decl post-processing of subset_closure took 25.7s\n25.4 decl post-processing of closure_subset took 25.4s\n24.6 elaboration of monoidal_of_has_finite_coproducts took 24.6s\n23.3 decl post-processing of group took 23.3s\n23.2 decl post-processing of subtype.group took 23.2s\n22.4 decl post-processing of open_subgroup.has_coe took 22.4s\n22.1 decl post-processing of continuous_multiset_prod took 22.1s\n21.9 decl post-processing of exists_list_of_mem_closure took 21.9s\n21.8 elaboration of monoidal_of_has_finite_products took 21.8s\n18.9 decl post-processing of image_pointwise_mul took 18.9s\n18.8 decl post-processing of image_closure took 18.8s\n18.6 decl post-processing of pointwise_mul_monoid took 18.6s\n18.1 decl post-processing of inv_ker_one took 18.1s\n16.8 decl post-processing of subtype.monoid took 16.8s\n16.7 elaboration of functoriality_is_right_adjoint took 16.7s\n16.6 decl post-processing of ker_lift_mk&#39; took 16.6s\n16.3 elaboration of functoriality_is_left_adjoint took 16.3s\n16.1 decl post-processing of ker_lift took 16.1s\n15.9 decl post-processing of map took 15.9s\n15.5 decl post-processing of is_subgroup.coe_inv took 15.5s\n15.5 decl post-processing of preimage_pointwise_mul_preimage_subset took 15.5s\n15.4 decl post-processing of closure_subgroup took 15.4s\n15.2 elaboration of prod_filter_range_p_mul_q_div_two_eq_prod_product took 15.2s\n15.1 decl post-processing of mem_pointwise_one took 15.1s\n14.8 elaboration of quadratic_reciprocity took 14.8s\n14.6 decl post-processing of ext took 14.6s\n14.4 decl post-processing of multiset_prod_apply took 14.4s\n14.3 elaboration of simple_func_sequence_tendsto took 14.3s\n14.2 decl post-processing of normal_in_normalizer took 14.2s\n14.1 elaboration of has_sum_sigma took 14.1s\n13.9 decl post-processing of continuous_on.mul took 13.9s\n13.9 decl post-processing of prod took 13.9s\n13.7 decl post-processing of tendsto_multiset_prod took 13.7s\n13.7 elaboration of exists_preimage_norm_le took 13.7s\n13.7 decl post-processing of exists_list_of_mem_closure took 13.7s\n13.6 decl post-processing of lift_mk took 13.6s\n13.6 decl post-processing of closure.is_submonoid took 13.6s\n13.6 decl post-processing of pointwise_mul_eq_Union_mul_left took 13.6s\n13.6 decl post-processing of refl took 13.6s\n13.6 decl post-processing of inj_of_trivial_ker took 13.6s\n13.4 elaboration of CommRing_yoneda took 13.4s\n13.4 decl post-processing of normal_iff_eq_cosets took 13.4s\n13.3 decl post-processing of subtype_val.is_group_hom took 13.3s\n13.3 decl post-processing of finset_prod_apply took 13.3s\n13.2 decl post-processing of closure_singleton took 13.2s\n12.9 elaboration of cocones_iso took 12.9s\n12.8 decl post-processing of pointwise_mul_semigroup took 12.8s\n12.7 decl post-processing of closure took 12.7s\n12.2 decl post-processing of coe.is_group_hom took 12.2s\n11.9 decl post-processing of coe_inf took 11.9s\n11.8 decl post-processing of mem_closure took 11.8s\n11.8 decl post-processing of le_iff took 11.8s\n11.7 decl post-processing of pointwise_mul_eq_Union_mul_right took 11.7s\n11.5 decl post-processing of mem_closure_union_iff took 11.5s\n11.4 elaboration: tactic execution took 11.4s\n11.3 decl post-processing of empty_pointwise_mul took 11.3s\n11.3 decl post-processing of symm took 11.3s\n11.3 elaboration: tactic execution took 11.3s\n11.2 decl post-processing of pointwise_mul_empty took 11.2s\n11.2 decl post-processing of inhabited took 11.2s\n11.1 decl post-processing of eq_trivial_iff took 11.1s\n11.1 decl post-processing of continuous_subgroup took 11.1s\n11.1 elaboration of map_integral took 11.1s\n11.1 decl post-processing of mul_left took 11.1s\n11.1 decl post-processing of pointwise_mul took 11.1s\n11.1 decl post-processing of ext&#39; took 11.1s\n10.9 decl post-processing of mem_norm_comm took 10.9s\n10.8 decl post-processing of comm_monoid took 10.8s\n10.8 decl post-processing of map_one took 10.8s\n10.5 elaboration of cones_iso took 10.5s\n10.2 elaboration of exists_subgroup_card_pow_prime took 10.2s\n10.2 elaboration of lintegral_eq_nnreal took 10.2s\n10.1 decl post-processing of inv_ker_one&#39; took 10.1s\n10.1 decl post-processing of singleton.is_mul_hom took 10.1s\n10.1 decl post-processing of closure_mono took 10.1s\n9.91 decl post-processing of injective_ker_lift took 9.91s\n9.86 decl post-processing of continuous_monoid took 9.86s\n9.74 decl post-processing of prod_map_range_index took 9.74s\n9.71 decl post-processing of tendsto_list_prod took 9.71s\n9.58 decl post-processing of one_ker_inv&#39; took 9.58s\n9.56 elaboration of unique_diff_within_at.eq took 9.56s\n9.5 decl post-processing of open_subgroup took 9.5s\n9.49 decl post-processing of inv_iff_ker&#39; took 9.49s\n9.47 decl post-processing of inj_iff_trivial_ker took 9.47s\n9.44 decl post-processing of prod_zero_index took 9.44s\n9.38 decl post-processing of image_closure took 9.38s\n9.38 elaboration: tactic execution took 9.38s\n9.37 decl post-processing of subtype_mk.is_monoid_hom took 9.37s\n9.2 elaboration: tactic execution took 9.2s\n9.15 decl post-processing of lift took 9.15s\n9.07 elaboration of glue_dist_triangle took 9.07s\n9.06 decl post-processing of continuous_group took 9.06s\n9.06 elaboration: tactic execution took 9.06s\n9.03 decl post-processing of closure_subset_iff took 9.03s\n</pre></div>",
        "id": 175724914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1568507456
    },
    {
        "content": "<p>but there is a bit fishy going on; I suspect the times there do not actually reflect the time</p>",
        "id": 175724921,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1568507470
    },
    {
        "content": "<p>On Lines 267140-267142 we have:</p>\n<div class=\"codehilite\"><pre><span></span>elaboration of subtype.comm_group took 670ms\ntype checking of subtype.comm_group took 0.786ms\ncompilation of subtype.comm_group took 2.67ms\n</pre></div>\n\n\n<p>and then suddenly on Line 271385:</p>\n<div class=\"codehilite\"><pre><span></span>decl post-processing of subtype.comm_group took 61.7s\n</pre></div>",
        "id": 175724927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1568507492
    },
    {
        "content": "<p>How long did everything in the lines in between take? Is the <code>decl post-processing</code> for some reason being deferred, and the report time is wall time, including all the work on other things that happened in between?</p>",
        "id": 175727843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568512900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I have looked into this a few weeks ago, and I'm almost certain that \"type checking .. took\" is incorrect - see <a href=\"https://github.com/leanprover-community/lean/issues/58\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/58\">#58</a>. I'm not sure about the other timings (elaboration, compilation) though.</p>",
        "id": 175746725,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1568550422
    },
    {
        "content": "<p>Here's a python script that does some minimal parsing of these log files into JSON format: <a href=\"https://gist.github.com/bryangingechen/005e51814e698f889a76b59da0e58852\" target=\"_blank\" title=\"https://gist.github.com/bryangingechen/005e51814e698f889a76b59da0e58852\">https://gist.github.com/bryangingechen/005e51814e698f889a76b59da0e58852</a></p>\n<p>The JSON files consist of an array of key-value pairs, which mostly correspond to individual lines of the log files (except for elaboration / tactics, which I tried to group together). As a simple example, the following lines:</p>\n<div class=\"codehilite\"><pre><span></span>parsing took 0.117ms\nelaboration of integral took 63.5ms\ntype checking of integral took 0.289ms\ncompilation of measure_theory.integral took 0.00211ms\ndecl post-processing of integral took 0.932ms\n</pre></div>\n\n\n<p>become:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">[{</span>\n<span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;pars&quot;</span><span class=\"p\">,</span>\n<span class=\"nt\">&quot;t&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.117</span>\n<span class=\"p\">},</span>\n<span class=\"p\">{</span>\n<span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;elab&quot;</span><span class=\"p\">,</span>\n<span class=\"nt\">&quot;lines&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n<span class=\"nt\">&quot;t&quot;</span><span class=\"p\">:</span> <span class=\"mf\">63.5</span><span class=\"p\">,</span>\n<span class=\"nt\">&quot;decl&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;integral&quot;</span>\n<span class=\"p\">},</span>\n<span class=\"p\">{</span>\n<span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;tc&quot;</span><span class=\"p\">,</span>\n<span class=\"nt\">&quot;t&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.289</span><span class=\"p\">,</span>\n<span class=\"nt\">&quot;decl&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;integral&quot;</span>\n<span class=\"p\">},</span>\n<span class=\"p\">{</span>\n<span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;comp&quot;</span><span class=\"p\">,</span>\n<span class=\"nt\">&quot;t&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.00211</span><span class=\"p\">,</span>\n<span class=\"nt\">&quot;decl&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;measure_theory.integral&quot;</span>\n<span class=\"p\">},</span>\n<span class=\"p\">{</span>\n<span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;decl&quot;</span><span class=\"p\">,</span>\n<span class=\"nt\">&quot;t&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.932</span><span class=\"p\">,</span>\n<span class=\"nt\">&quot;decl&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;integral&quot;</span>\n<span class=\"p\">}]</span>\n</pre></div>\n\n\n<p>I didn't try too hard to group things together further – if there are other things I should do please let me know.</p>\n<p>The JSON files turn out to be ~35MB compared to the ~25MB of the logs. Here's one corresponding to <a href=\"#narrow/stream/113538-travis/topic/build.20time.20bot/near/175769199\" title=\"#narrow/stream/113538-travis/topic/build.20time.20bot/near/175769199\">this log</a> in the Travis stream. <a href=\"/user_uploads/3121/2_2PjNAJ8GWayo_KcbQQ4_gq/profile_81a31ca.json.zip\" target=\"_blank\" title=\"profile_81a31ca.json.zip\">profile_81a31ca.json.zip</a> (3.1MB)</p>",
        "id": 175770899,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1568589392
    },
    {
        "content": "<p>Based on <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/602292786?utm_medium=notification&amp;utm_source=github_status\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/602292786?utm_medium=notification&amp;utm_source=github_status\">https://travis-ci.org/leanprover-community/mathlib/jobs/602292786?utm_medium=notification&amp;utm_source=github_status</a>, I'm guessing the Travis config in <a href=\"https://github.com/leanprover-community/mathlib/issues/1606\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1606\">#1606</a> isn't right. I wanted to reuse the olean files from the build to run a final test. That test takes ~45 seconds on my laptop and has been going for 20 min on Travis, so I'm guessing it's recompiling everything. I tried to copy the setup for archive and test, which do use the oleans -- any ideas?</p>",
        "id": 178966978,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571932639
    },
    {
        "content": "<p>My guess is that this is because the master branch was updated after the travis build started. My understanding is that each build stage does a merge with master when it starts, so this can lead to later stages having to do rebuilds.</p>",
        "id": 178968348,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571933397
    },
    {
        "content": "<p>What? Every build stage does a merge with master? That can't be right. It's testing the PR, not the PR's compatibility with master.</p>",
        "id": 178968484,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571933474
    },
    {
        "content": "<p>Yes, this surprised me at first too. But see <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/602292786#L164\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/602292786#L164\">https://travis-ci.org/leanprover-community/mathlib/jobs/602292786#L164</a> and <a href=\"https://docs.travis-ci.com/user/pull-requests/#my-pull-request-isnt-being-built\" target=\"_blank\" title=\"https://docs.travis-ci.com/user/pull-requests/#my-pull-request-isnt-being-built\">https://docs.travis-ci.com/user/pull-requests/#my-pull-request-isnt-being-built</a></p>",
        "id": 178968592,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571933551
    },
    {
        "content": "<p>If that's what it's doing, I'm very confused about our CI, heh.</p>",
        "id": 178968596,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571933554
    },
    {
        "content": "<p>But the archive task ran the same command, and finished in a minute. I don't think <a href=\"https://github.com/leanprover-community/mathlib/commit/3f8a492bfa4ba2ad0ff26c3bff298e3afb05f861\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/3f8a492bfa4ba2ad0ff26c3bff298e3afb05f861\">https://github.com/leanprover-community/mathlib/commit/3f8a492bfa4ba2ad0ff26c3bff298e3afb05f861</a> landed in between the two.</p>",
        "id": 178969425,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571934159
    },
    {
        "content": "<p>You're right that the commit happened earlier, so I'm not sure why the docs and archive stages didn't require a rebuild.</p>",
        "id": 178970709,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571934936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Do you know what's up here?</p>",
        "id": 178972289,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571935863
    },
    {
        "content": "<p>I do see wildly different build times for the archive in the PR history, which is consistent with oleans from the first step being invalidated by a merge.</p>",
        "id": 178972476,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571936018
    },
    {
        "content": "<p>If this is what's happening, it sounds both inefficient and unreliable.</p>",
        "id": 178972510,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571936040
    },
    {
        "content": "<blockquote>\n<p>My understanding is that each build stage does a merge with master when it starts, so this can lead to later stages having to do rebuilds.</p>\n</blockquote>\n<p>Where's my upside-down light bulb emoji</p>",
        "id": 178972562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571936055
    },
    {
        "content": "<p>Ah. Perhaps one relevant line is this? <a href=\"https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L14\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L14\">https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L14</a><br>\nEdit - never mind, everything in the last step is happening in <code>src</code>.</p>",
        "id": 178972728,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571936169
    },
    {
        "content": "<p>Sometimes, it's enough to just restart the travis build</p>",
        "id": 178973016,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571936362
    },
    {
        "content": "<p>we might also want to try the build of test and archive with touching all the <code>olean</code> files in <code>src</code></p>",
        "id": 178973056,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571936397
    },
    {
        "content": "<p>Because each stage is a whole new build, you restore the cache and clone the git repo and there the time stamps can be unreliable.</p>",
        "id": 178973170,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571936446
    },
    {
        "content": "<p>Okay, I restarted the build. <a href=\"https://github.com/leanprover-community/mathlib/issues/1565\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1565\">#1565</a> should hit master while this is going, so let's see if the same issue comes up.</p>",
        "id": 178973548,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571936671
    },
    {
        "content": "<p>Should we just add the command to touch all oleans in src? It can't hurt.</p>",
        "id": 178973602,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571936715
    },
    {
        "content": "<p>It also wouldn't hurt to remove <code>--make</code> when we build the archive and tests.</p>",
        "id": 178973667,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571936755
    },
    {
        "content": "<p>If each stage does a fresh merge with master, how do the first stages even work? What if a commit lands during pre-build 2? Doesn't that mean all the work has to be redone in the test stage?</p>",
        "id": 178973913,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571936906
    },
    {
        "content": "<blockquote>\n<p>Doesn't that mean all the work has to be redone in the test stage?</p>\n</blockquote>\n<p>I think so, doesn't it explain the spread in run times for the test stages?</p>",
        "id": 178975645,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571937887
    },
    {
        "content": "<p>I thought the reason we had the pre-build stages was because we were hitting time limits when we built the whole thing in one stage. If we were doing that in the test stage, shouldn't we hit the same limits?</p>",
        "id": 178976043,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571938090
    },
    {
        "content": "<p>I think we do sometimes, but people often restart the jobs when they fail.</p>",
        "id": 178976784,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571938515
    },
    {
        "content": "<p>It feels like that should be way more common. I guess commits near the leafs of the import hierarchy would have less of an effect, maybe that limits it.</p>",
        "id": 178978287,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571939458
    },
    {
        "content": "<p>My mind is blown, and not in a good way, heh.</p>",
        "id": 178978312,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571939475
    },
    {
        "content": "<p>We could move the linting test to the test stage. That would create less potential duplication of work.</p>",
        "id": 178978406,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571939538
    },
    {
        "content": "<p>But then maybe we should move archive and docs too? Neither is slow, unless the oleans are outdated.</p>",
        "id": 178978578,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571939647
    },
    {
        "content": "<p>What do you mean by move docs and archive?</p>",
        "id": 178979508,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571940236
    },
    {
        "content": "<p>The docs and archive stages of the Travis build. If we build those directories as part of the test stage, instead of as separate stages, there's no chance that updates to master will invalidate the oleans.</p>",
        "id": 178979883,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571940433
    },
    {
        "content": "<p>Updates to master has no effect on the build. That's not what the issues are</p>",
        "id": 178979925,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571940472
    },
    {
        "content": "<p>The state of the cache and the timestamps on the files is where you should look for the issues.</p>",
        "id": 178979997,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571940507
    },
    {
        "content": "<p>This does sound more plausible, though I'm having trouble constructing a mechanism under which recompilation sometimes happens, but usually not.<br>\nCould it have to do with the cache being shared between concurrent builds?</p>",
        "id": 178980180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571940619
    },
    {
        "content": "<blockquote>\n<p>Updates to master has no effect on the build. </p>\n</blockquote>\n<p>Are you sure about this? I thought <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/602292783#L164\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/602292783#L164\">this line</a> would mean that a merge happens at the start of each stage, but maybe my git / github understanding is wrong.</p>",
        "id": 178980290,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571940702
    },
    {
        "content": "<p>Which line do you mean?</p>",
        "id": 178980436,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571940774
    },
    {
        "content": "<p><code>$ git fetch origin +refs/pull/1606/merge:</code></p>",
        "id": 178980485,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571940805
    },
    {
        "content": "<p>line 164, it should be highlighted</p>",
        "id": 178980527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571940834
    },
    {
        "content": "<p>In particular I thought the suffix <code>/merge</code> retrieves a merge commit from the PR branch to master.</p>",
        "id": 178980588,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571940852
    },
    {
        "content": "<p>I can't find any official documentation about the <code>/merge</code> ref, but I did find <a href=\"https://discourse.drone.io/t/github-claims-that-merge-refs-are-undocumented-feature/1100\" target=\"_blank\" title=\"https://discourse.drone.io/t/github-claims-that-merge-refs-are-undocumented-feature/1100\">this forum post</a> in which someone quotes Github support as saying:</p>\n<blockquote>\n<p>The /merge refs that are being used here are an undocumented feature and you shouldn’t be relying on them. That feature was build to power Pull Requests in the Web UI, it was not built to be used by 3rd party services. Because it’s undocumented – you should not have any expectations about behavior, the behavior might change at any time and those refs might completely go away without warning.</p>\n</blockquote>",
        "id": 178981120,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571941180
    },
    {
        "content": "<p>After some testing on my own fork... maybe the <code>+refs/pull/*/merge</code> branches are fixed to merge with whatever master was at the time of the last commit on the PR branch?</p>",
        "id": 178981196,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571941205
    },
    {
        "content": "<p>It makes a merge with something, but it doesn't seem to be current master, yeah.</p>",
        "id": 178981220,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941220
    },
    {
        "content": "<p>I tried with <a href=\"https://github.com/leanprover-community/mathlib/issues/1540\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1540\">#1540</a> and it gave me a merge with the commit containing <a href=\"https://github.com/leanprover-community/mathlib/issues/1584\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1584\">#1584</a>. I don't see how these are related yet.</p>",
        "id": 178981430,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941320
    },
    {
        "content": "<p>If I'm reading the forum post correctly, it seems that the <code>/merge</code> ref gets updated only when needed by the web UI? Disturbing.</p>\n<blockquote>\n<p>Instead, the mergeability is triggered when it’s needed: when a user visits the page for the pull request via the UI or requests the pull request via the API. In order to determine the mergeability of a pull request, GitHub actually performs a merge between the head and the base ref, and the result of that merge is stored in the /merge ref (the ref you’re using).</p>\n</blockquote>",
        "id": 178981562,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571941373
    },
    {
        "content": "<p>git tells me the latter commit is also <code>sgouezel/master</code> but I'm assuming that's not relevant :)</p>",
        "id": 178981574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941383
    },
    {
        "content": "<p>Oh hey, it gave me a merge with current master this time.</p>",
        "id": 178981661,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941439
    },
    {
        "content": "<p>Possibly because you or I clicked on the PR page for <a href=\"https://github.com/leanprover-community/mathlib/issues/1540\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1540\">#1540</a> and that triggered an update?</p>",
        "id": 178981746,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571941467
    },
    {
        "content": "<p>Presumably</p>",
        "id": 178981789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941499
    },
    {
        "content": "<p>And it seems plausible that the last time anyone looked at that page was 2 days ago</p>",
        "id": 178981813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941515
    },
    {
        "content": "<p>So, that's pretty terrible</p>",
        "id": 178981831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941528
    },
    {
        "content": "<p>So basically, Travis is choosing at random what to build every time.</p>",
        "id": 178981845,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571941530
    },
    {
        "content": "<p>Is this <code>/merge</code> stuff built in to Travis or something we configured?</p>",
        "id": 178981883,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941538
    },
    {
        "content": "<p>Including on the final builds for Mergify.</p>",
        "id": 178981890,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571941541
    },
    {
        "content": "<p>mergify doesn't build the same commit it will push? I thought that was part of the point</p>",
        "id": 178981997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941591
    },
    {
        "content": "<p>I think it's built into travis. Maybe we will have to look into other CI services?</p>",
        "id": 178982105,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571941637
    },
    {
        "content": "<p>It's not in the .travis.yml  file. Maybe it's configured somewhere I don't have access to?</p>",
        "id": 178982113,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571941639
    },
    {
        "content": "<p>^ <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> (?)</p>",
        "id": 178982229,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941692
    },
    {
        "content": "<p>Hmm, actually, I'm not sure about Mergify. It merges the PR into master and lets Travis build that. Travis is... maybe... checking the merge of that with something else? Does Mergify's merge commit force the <code>/merge</code> branch to update?</p>",
        "id": 178982302,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571941762
    },
    {
        "content": "<p>I'd hope that adding a commit to the PR would update <code>/merge</code> to merge with the current master.</p>",
        "id": 178982457,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571941838
    },
    {
        "content": "<p>Hopefully the commit mergify builds will be a descendant of current master anyways, right? Otherwise what would happen when it tries to push?</p>",
        "id": 178982482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941854
    },
    {
        "content": "<p>So the merge from <code>/merge</code> ought to be a no-op</p>",
        "id": 178982500,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941867
    },
    {
        "content": "<p>Mergify doesn't build the squashed commit.</p>",
        "id": 178982530,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571941890
    },
    {
        "content": "<p>We could test it. Start the build with <code>git rev-parse HEAD</code></p>",
        "id": 178982560,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571941906
    },
    {
        "content": "<blockquote>\n<p>Mergify doesn't build the squashed commit.</p>\n</blockquote>\n<p>I'm going to go cry in the corner</p>",
        "id": 178982664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571941952
    },
    {
        "content": "<p>The file state in the commit that Mergify pushes is exactly the same as the PR branch that Mergify checks. But the git history is different.</p>",
        "id": 178982940,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571942063
    },
    {
        "content": "<p>And now I don't trust that Travis is actually checking what's in the PR branch.</p>",
        "id": 178982983,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571942095
    },
    {
        "content": "<p>Travis runs again once a commit is added to master. THAT one should be checked correctly.</p>",
        "id": 178983055,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571942134
    },
    {
        "content": "<p>Sounds like it's time to look at alternatives</p>",
        "id": 178983904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571942617
    },
    {
        "content": "<p>I can potentially look into setting up a Jenkins server. As far as I can see, Jenkins is capable of distributing builds to different servers, so we could share the load if others also have some resources</p>",
        "id": 178985517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571943605
    },
    {
        "content": "<p>I guess the problem with moving away from Travis is that this also creates Mergify headaches</p>",
        "id": 178989530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571946203
    },
    {
        "content": "<p>So it reached the lint stage a little while ago and started recompiling again. There's no way anything could have changed between the archive and lint stages. The archive took a minute, no commits to master, etc.</p>",
        "id": 178989923,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571946473
    },
    {
        "content": "<p>I added a line to touch the olean files before the lint stage. Not sure if it will help, but maybe.</p>",
        "id": 178990014,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571946517
    },
    {
        "content": "<p>If our hypothesis is true and it is getting unpredictable info from the <code>/merge</code> branch: my impression is this is bizarre, and inefficient, but not fatal.</p>",
        "id": 178990139,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571946605
    },
    {
        "content": "<p>There's no real connection between Mergify and Travis, any CI with proper GitHub support should work with Mergify.</p>",
        "id": 178990293,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571946715
    },
    {
        "content": "<p>Yeah... but I don't know how hard it is to get Github support working for self-hosted CI's</p>",
        "id": 178990395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571946777
    },
    {
        "content": "<p>The costs of the Travis craziness are slower and occasionally broken PR builds, and <em>maybe</em> it's possible a broken PR could make it to master. The costs of switching to a CI with bad GitHub support are higher, I think.</p>",
        "id": 178990665,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571946937
    },
    {
        "content": "<p>Git lab has a nice CI infrastructure and it supports github. If Travis is too much of a pain, it can be worth investigating. And the maximum timeout is 3 hours which goes most of the way to building mathlib completely</p>",
        "id": 178990876,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571947066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Did you mean running a github server on a local machine? It is a pretty straightforward effort.</p>",
        "id": 178991040,
        "sender_full_name": "Tim Daly",
        "timestamp": 1571947152
    },
    {
        "content": "<p>A Jenkins server</p>",
        "id": 178991520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571947440
    },
    {
        "content": "<p>And it should integrate with the github repo</p>",
        "id": 178991563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571947448
    },
    {
        "content": "<p>You can't run github locally can you? I thought it was closed source. Or did they open source it?</p>",
        "id": 178991605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571947481
    },
    {
        "content": "<p>I think you can buy a license. Even if it were free, it would definitely not be worth it for us.</p>",
        "id": 178991828,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571947614
    },
    {
        "content": "<p>There's also \"github actions\", which should definitely integrate well with github, although it's still in \"limited public\" beta. <a href=\"https://help.github.com/en/github/automating-your-workflow-with-github-actions/about-github-actions\" target=\"_blank\" title=\"https://help.github.com/en/github/automating-your-workflow-with-github-actions/about-github-actions\">https://help.github.com/en/github/automating-your-workflow-with-github-actions/about-github-actions</a></p>",
        "id": 178991980,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571947712
    },
    {
        "content": "<p>Each build is allowed to upload some <a href=\"https://help.github.com/en/github/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts\" target=\"_blank\" title=\"https://help.github.com/en/github/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts\">\"artifacts\"</a>, so we might be able to set up olean caches for each PR?</p>",
        "id": 178992170,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571947823
    },
    {
        "content": "<p>Argh. I'll let it go a bit longer to be sure, but it looks like <a href=\"https://github.com/leanprover-community/mathlib/issues/1606\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1606\">#1606</a> is still rebuilding everything. <a href=\"https://travis-ci.org/leanprover-community/mathlib/builds/602507227?utm_source=github_status&amp;utm_medium=notification\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/builds/602507227?utm_source=github_status&amp;utm_medium=notification\">https://travis-ci.org/leanprover-community/mathlib/builds/602507227?utm_source=github_status&amp;utm_medium=notification</a></p>",
        "id": 178995874,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571950022
    },
    {
        "content": "<p>I'd expect max 5 min if all the oleans are there already.</p>",
        "id": 178995914,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571950055
    },
    {
        "content": "<p>How is the linting step relevantly different from the archive step?</p>",
        "id": 178995995,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571950116
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/3f1125af2a425123fc2535e59714c6a991b1cf7f/.travis.yml\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/3f1125af2a425123fc2535e59714c6a991b1cf7f/.travis.yml\">https://github.com/leanprover-community/mathlib/blob/3f1125af2a425123fc2535e59714c6a991b1cf7f/.travis.yml</a></p>",
        "id": 178996012,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571950138
    },
    {
        "content": "<p>You can run a git server. Github is just a collection of servers with a user api.</p>",
        "id": 178999946,
        "sender_full_name": "Tim Daly",
        "timestamp": 1571952702
    },
    {
        "content": "<p>I ran a private git server on my local net when I was doing security research</p>",
        "id": 179000076,
        "sender_full_name": "Tim Daly",
        "timestamp": 1571952791
    },
    {
        "content": "<p>I would advise against jumping to that solution. Once we setup our own servers, we have to keep them running, fix the configuration, etc. There are other CI services that we can investigate before we decide to run our own</p>",
        "id": 179000389,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571952960
    },
    {
        "content": "<p>There is precisely 0% chance we are going to self-host the mathlib git repo.</p>",
        "id": 179000498,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571953042
    },
    {
        "content": "<p>Github does what lean needs and seems to do it best. I'm not suggesting that you use local servers. I do, but for public work like Axiom, I use github.</p>",
        "id": 179000656,
        "sender_full_name": "Tim Daly",
        "timestamp": 1571953116
    },
    {
        "content": "<p>For my security work I needed jenkins and git but hosted on a secure subnet. I was just responding to the question of whether it was possible to run git-like services locally.</p>",
        "id": 179000790,
        "sender_full_name": "Tim Daly",
        "timestamp": 1571953203
    },
    {
        "content": "<p>Nobody wants the extra burden of admin work on a server. I do it, but it is annoying and I don't recommend it unless you have the skills, patience, and nothing else worth doing. :-)</p>",
        "id": 179000943,
        "sender_full_name": "Tim Daly",
        "timestamp": 1571953371
    },
    {
        "content": "<p>Thanks for clarifying. I'm especially worried about the last one. I think there are plenty of skilled and dedicated people around but there's plenty of other stuff they can look into</p>",
        "id": 179001124,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571953602
    },
    {
        "content": "<p>AFAICT I don't see any magic options in travis that adjust how it builds PRs. <a href=\"https://docs.travis-ci.com/user/pull-requests/\" target=\"_blank\" title=\"https://docs.travis-ci.com/user/pull-requests/\">This page</a> mentions the <code>*/merge</code> ref</p>",
        "id": 179010578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571962132
    },
    {
        "content": "<p>the only thing I can do is turn different kinds of builds on or off (they are all on), or adjust the <code>.travis.yml</code></p>",
        "id": 179010660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571962207
    },
    {
        "content": "<p>Oh my god, this is so frustrating. I got the linting test to work (i.e., Travis failed due to linting errors) by moving it to the <code>test</code> stage. Then I changed the linting test to a weaker one that should pass. Now it's running the linting test in the pre-build. It's reusing cached oleans from the previous run, which is fine and expected. But the auto-generated <code>lint_mathlib.lean</code> shouldn't show up until the <code>test</code> stage. Is it somehow retrieving the file state from the previous run?</p>",
        "id": 179033798,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571994738
    },
    {
        "content": "<p><code>lint_mathlib.lean</code> isn't part of the git repo. It failed to build in the last run, so there shouldn't be an olean, and even if there were, <code>purge_olean.sh</code> should delete it.</p>",
        "id": 179033813,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571994760
    },
    {
        "content": "<p>Is there a way I can see the contents of the directory Travis is working in?</p>",
        "id": 179033825,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571994782
    },
    {
        "content": "<p>I still have no idea why the separate linting stage was refusing to use the cached oleans.</p>",
        "id": 179033906,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571994851
    },
    {
        "content": "<p>Hmm. I guess this is the meaning of this line: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L17\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L17\">https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L17</a></p>",
        "id": 179034375,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571995318
    },
    {
        "content": "<p>But shouldn't <a href=\"https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L38\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L38\">https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L38</a> delete <code>lint_mathlib.lean</code>?</p>",
        "id": 179034505,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571995439
    },
    {
        "content": "<p>Which part runs the linting step?</p>",
        "id": 179045609,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572007349
    },
    {
        "content": "<p>What I would suggest is that you delete <code>lint_mathlib.lean</code> after you're done using it. This way, it won't make its way into the build cache</p>",
        "id": 179046508,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572008165
    },
    {
        "content": "<p>Right now, <a href=\"https://github.com/leanprover-community/mathlib/blob/d5b4664462e70132be1e6f0ef6cfbf2669b2ef77/.travis.yml#L89\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/d5b4664462e70132be1e6f0ef6cfbf2669b2ef77/.travis.yml#L89\">https://github.com/leanprover-community/mathlib/blob/d5b4664462e70132be1e6f0ef6cfbf2669b2ef77/.travis.yml#L89</a></p>",
        "id": 179046545,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008198
    },
    {
        "content": "<p>I'm solving issues locally. It turns out the file name <code>data/rat/meta.lean</code> causes issues.</p>",
        "id": 179046570,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008223
    },
    {
        "content": "<p>The autogenerated <code>data/rat/all.lean</code> imports <code>.meta</code> which parses wrong.</p>",
        "id": 179046588,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008239
    },
    {
        "content": "<p>ah! What if you quote it?</p>",
        "id": 179046607,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572008268
    },
    {
        "content": "<p>I'm going to push a commit renaming that in a sec, which <em>should</em> make the current setup work.</p>",
        "id": 179046609,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008271
    },
    {
        "content": "<p>But it still doesn't explain why Travis wanted to build mathlib from scratch when I had the linting step in its own stage.</p>",
        "id": 179046671,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008301
    },
    {
        "content": "<p>Did using <code>touch</code> help?</p>",
        "id": 179046721,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572008345
    },
    {
        "content": "<p>Nope.</p>",
        "id": 179046740,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008359
    },
    {
        "content": "<p>The whole thing is muddled by the fact that Travis actually builds merges with \"master.\" <code>data.rat.meta</code> didn't even exist on the PR branch so I couldn't figure out locally what was happening.</p>",
        "id": 179046994,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008526
    },
    {
        "content": "<p>Is it okay if I merge <a href=\"https://github.com/leanprover-community/mathlib/issues/1612\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1612\">#1612</a> directly? I built locally with these changes.</p>",
        "id": 179047157,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008667
    },
    {
        "content": "<p>That seems so non-sensical to me</p>",
        "id": 179047163,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572008669
    },
    {
        "content": "<p>It's absolutely insane.</p>",
        "id": 179047171,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008680
    },
    {
        "content": "<p>go for it</p>",
        "id": 179047180,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572008686
    },
    {
        "content": "<p>I'm going to look into setting up a gitlab pipeline. Maybe that can make things better</p>",
        "id": 179047229,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572008718
    },
    {
        "content": "<p>Oh, actually, never mind. I don't need to merge that yet, we can let the check run just to be sure.</p>",
        "id": 179047258,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008754
    },
    {
        "content": "<p><a href=\"https://travis-ci.org/leanprover-community/mathlib/builds/602804142?utm_source=github_status&amp;utm_medium=notification\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/builds/602804142?utm_source=github_status&amp;utm_medium=notification\">https://travis-ci.org/leanprover-community/mathlib/builds/602804142?utm_source=github_status&amp;utm_medium=notification</a></p>",
        "id": 179047476,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008932
    },
    {
        "content": "<p>This has to pass.</p>",
        "id": 179047481,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572008939
    },
    {
        "content": "<p>Unfortunately, it will fail soon because <a href=\"https://github.com/leanprover-community/mathlib/issues/1612\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1612\">#1612</a> missed a <code>data.rat.meta</code> in <code>test/rat.lean</code>. I've fixed it in that PR, but not in the lint one yet.</p>",
        "id": 179061309,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572017869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  Do you want me to rebase travis_lint on rename_rat_meta?</p>",
        "id": 179061471,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572017988
    },
    {
        "content": "<p>Gah.</p>",
        "id": 179061569,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572018014
    },
    {
        "content": "<p>I just did, but thanks.</p>",
        "id": 179061575,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572018019
    },
    {
        "content": "<p>It passed. Proof of concept, we can run a lint test in Travis.</p>",
        "id": 179063547,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572019211
    },
    {
        "content": "<p>Of course, the script in that PR is a mess now from all my attempts to make it work. And I'm done with this for the weekend.</p>",
        "id": 179063580,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572019237
    },
    {
        "content": "<p>I just finished an experiment with gitlab. Have a look: <a href=\"https://gitlab.com/simon.hudon/mathlib/commit/5b32a70e3f0006f3f6cc93f836aac533ce89c6ed/pipelines?ref=master\" target=\"_blank\" title=\"https://gitlab.com/simon.hudon/mathlib/commit/5b32a70e3f0006f3f6cc93f836aac533ce89c6ed/pipelines?ref=master\">https://gitlab.com/simon.hudon/mathlib/commit/5b32a70e3f0006f3f6cc93f836aac533ce89c6ed/pipelines?ref=master</a></p>",
        "id": 179079725,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572030431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  I'm trying Azure for <code>lean-depot</code>. So far, it seems so much faster than Travis or GitLab. I think we might want to consider adopting it for mathlib</p>",
        "id": 180267018,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1573243825
    },
    {
        "content": "<p>Sounds good to me! The free or paid version?</p>",
        "id": 180305313,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573292467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> GitHub just popped a bunch of balloons in my face about this: <a href=\"https://github.com/features/actions\" target=\"_blank\" title=\"https://github.com/features/actions\">https://github.com/features/actions</a></p>",
        "id": 180672357,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573679007
    },
    {
        "content": "<p>I usually don't click annoying ads like that out of principle, but it's free for open projects and (presumably) well integrated with GitHub. At a glance, it looks like it could do what we want.</p>",
        "id": 180672463,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573679057
    },
    {
        "content": "<p>Maybe worth investigating too.</p>",
        "id": 180672474,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573679063
    },
    {
        "content": "<p>That looks like an exciting tool. Are you thinking of a specific use?</p>",
        "id": 180672806,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1573679254
    },
    {
        "content": "<p>Uh, as far as I can tell can do the same thing as Travis or Azure.</p>",
        "id": 180673121,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573679430
    },
    {
        "content": "<p>I couldn't find any info about how much time or speed they give you.</p>",
        "id": 180673156,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573679462
    },
    {
        "content": "<p>Here's a page with some more details on limits: <a href=\"https://help.github.com/en/github/automating-your-workflow-with-github-actions/about-github-actions\" target=\"_blank\" title=\"https://help.github.com/en/github/automating-your-workflow-with-github-actions/about-github-actions\">https://help.github.com/en/github/automating-your-workflow-with-github-actions/about-github-actions</a></p>",
        "id": 180673279,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573679531
    },
    {
        "content": "<p>Github Actions in fact run on Azure and they are quite similar to Azure Pipelines in most other aspects, but not completely. It is quite confusing.</p>",
        "id": 180714101,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1573724436
    },
    {
        "content": "<p>Are there things that Github Actions can do but Azure can't?</p>",
        "id": 180740464,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1573744976
    },
    {
        "content": "<p>I don't know, I have only looked at Pipelines in detail</p>",
        "id": 180740777,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1573745149
    }
]