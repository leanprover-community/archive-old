[
    {
        "content": "<p>Yesterday I was talking with Reid, and we thought it might be nice if we can have variants on the ever-awesome underscore <code>_</code>.</p>\n<ul>\n<li><code>_</code> The good old underscore that does what it currently does</li>\n<li><code>_₁</code> An underscore that tells lean: no matter what, whenever this tactic is over, you must have figured out how to assign this meta-variable</li>\n<li><code>_₂</code> An underscore that tells lean: no matter what, whenever this tactic is over, you must not assign this meta-variable. It has to become a new goal</li>\n</ul>\n<p>We can discuss the notation later. Is this possible? Would others like this?</p>\n<p>Here's a reason <code>_₂</code> might be useful. Now that interactive <code>calc</code> is using <code>refine</code>, some of the underscores in a calc-block will become new goals, and others will be filled in by lean. For readability, it can be very useful to have a visual cue as to which underscores will generate goals that will be filled in later. Currently the visual cue is a comment, but it would be much better if this is tied in to the actual code. After all, comments rot.</p>",
        "id": 199113814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590727827
    },
    {
        "content": "<p>Interesting! I like the idea, but it sounds hard to implement.</p>\n<p>How about <code>_.</code> instead of <code>_₁</code>, denoting \"this ends here!\", and <code>_?</code> instead of <code>_₂</code>, for \"this one remains a mystery\"?</p>",
        "id": 199116237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590731147
    },
    {
        "content": "<p><code>_.</code> might be confused with <code>_</code> followed by <code>.</code></p>",
        "id": 199116584,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590731557
    },
    {
        "content": "<p>It could also be confused with <code>._</code> which means an inaccessible pattern</p>",
        "id": 199117337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590732391
    },
    {
        "content": "<p>I think I would rather have a new tactic like <code>exact</code> but with <code>_₂</code> markings</p>",
        "id": 199117376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590732445
    },
    {
        "content": "<p>rather than using these marks everywhere</p>",
        "id": 199117384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590732471
    },
    {
        "content": "<p>(this could even be implemented without lean support)</p>",
        "id": 199117427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590732491
    },
    {
        "content": "<p>I would like to keep the notation short (if we are discussing notation anyways) because I want to encourage this to be used in place of <code>_</code>. But first of all, we need to figure out whether this can be implemented.</p>",
        "id": 199118061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590734176
    },
    {
        "content": "<p>it can be implemented in mathlib easily</p>",
        "id": 199119296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590735379
    },
    {
        "content": "<p>you make <code>_₂</code> a notation for <code>id_subgoal _</code> and then in the <code>exact_with_marked_subgoals</code> tactic (name TBD) you scour the term for these <code>id_subgoal</code> terms, remove them from the input, produce subgoals for them, elaborate the term, double check that the subgoals are still unassigned and add them to the tactic state</p>",
        "id": 199119474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590735512
    },
    {
        "content": "<p>Je ne comprend pas... would you mind translating that to Latin?</p>",
        "id": 199121701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590737387
    },
    {
        "content": "<p>As in... it sounds cool and reasonable, but I have no idea what you are really suggesting.</p>",
        "id": 199121757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590737407
    },
    {
        "content": "<p>Do you want to write a new tactic <code>exact_with_marked_subgoals</code> that should help here?</p>",
        "id": 199121785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590737429
    },
    {
        "content": "<p>Is this going to be a user facing tactic, or is this supposed to be hidden behind notation/api etc...</p>",
        "id": 199121830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590737484
    },
    {
        "content": "<p>I think the idea is that you'd initially write some tactic under a new name, and if it works nicely you could imagine eventually dropping it in as a replacement for the core <code>exact</code>.</p>",
        "id": 199121893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590737525
    },
    {
        "content": "<p>Is there some kind of doubles underline in Unicode?</p>",
        "id": 199121903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590737534
    },
    {
        "content": "<p>I don't think we should change <code>exact</code> or <code>refine</code>. This requires special handling at tactic granularity, so I think it is appropriate to have a new <code>exact/refine</code> combination tactic</p>",
        "id": 199123387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590738662
    },
    {
        "content": "<p>it sounds like it will mostly only be used for things like <code>calc</code> anyway</p>",
        "id": 199123456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590738724
    }
]