[
    {
        "content": "<p>I'm trying to prove that the recursive definition of Catalan numbers I saw on Zulip (see <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>'s definition here: <a href=\"https://leanprover-community.github.io/archive/stream/113488-general/topic/status.20of.20Taylor.20series.html\">https://leanprover-community.github.io/archive/stream/113488-general/topic/status.20of.20Taylor.20series.html</a>) agrees with the explicit one in terms of the central binomial coefficients. I have a pen and paper proof that seems relatively straightforward to formalise. However, I struggle already with the basic setup. The first step of the strategy would be to prove that it suffices to prove that the explicit definition satisfies the recursion. Here is what I have regarding that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.choose.central</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">catalan</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">i.2</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">nat.lt_succ_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">n.sub_le</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n             <span class=\"n\">catalan</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">catalan</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">catalan_zero</span> <span class=\"o\">:</span> <span class=\"n\">catalan</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">catalan</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">catalan_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">catalan</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">catalan</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">catalan</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">catalan</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catalan'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat.central_binom</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">catalan'_zero</span> <span class=\"o\">:</span> <span class=\"n\">catalan'</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">catalan'</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">catalan_defs_agree</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">catalan'</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">catalan</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">nat.case_strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">catalan_succ</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What I now would like to do as the next step towards the sorry is replace <code>catalan i</code> and <code>catalan (n-i)</code> below the sum by <code>catalan' i</code> and <code>catalan' (n-i)</code> using the (strong) induction hypothesis. How do I do that?</p>",
        "id": 286877983,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1655798158
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">catalan'_eq_catalan</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">catalan'</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">catalan</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">nat.case_strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">catalan_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_sum</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">transitivity</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d.succ</span><span class=\"o\">,</span> <span class=\"n\">catalan'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">catalan'</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hd</span> <span class=\"n\">_</span> <span class=\"n\">i.is_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hd</span> <span class=\"n\">_</span> <span class=\"n\">tsub_le_self</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286878981,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655798724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317890\">Julian Külshammer</span> has marked this topic as resolved.</p>",
        "id": 286881043,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655800017
    },
    {
        "content": "<p>Thanks a lot! One step closer.</p>",
        "id": 286881066,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1655800026
    },
    {
        "content": "<p>How many of the <a href=\"https://www.cambridge.org/core/books/abs/catalan-numbers/bijective-exercises/1B228D24483F2DAA7B6BA1D342F4A0AC\">214 combinatorial interpretations of Catalan numbers</a> will mathlib know a few years from now? :)</p>",
        "id": 286920418,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1655821214
    },
    {
        "content": "<p>I have no idea, but at least now it knows that the two definitions agree:  <a href=\"https://github.com/leanprover-community/mathlib/pull/14869\">#14869</a></p>",
        "id": 286920721,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1655821344
    }
]