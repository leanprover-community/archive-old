[
    {
        "content": "<p>Do we yet have anything about *-algebras? I'd like some! I know we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_invo/src\">src#ring_invo</a> (which I've just tidied up a bit in <a href=\"https://github.com/leanprover-community/mathlib/issues/4052\">#4052</a>).</p>",
        "id": 209213295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599376349
    },
    {
        "content": "<p>I was imagining something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"err\">†</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"err\">†</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"err\">†</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 209213362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599376451
    },
    {
        "content": "<p>It would be fun to, e.g. prove Bell's inequality, or define Banach algebras...</p>",
        "id": 209213385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599376530
    },
    {
        "content": "<p>I think it would be nice to have some sort of <code>has_star</code> typeclass that could be used for this, with instances for complex conjugation, Hermitian adjoints, etc.</p>",
        "id": 209247873,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1599437705
    },
    {
        "content": "<p>I wonder how much value <code>has_star</code> itself actually has, vs. starting at <code>star_ring</code>. Are the examples of less-than-rings which we will want to talk about star(=linear, antimultiplicative involutions) on? I guess I have no complaint about <code>star_ring</code> only depending on <code>semiring</code>, rather than <code>ring</code>.</p>",
        "id": 209253499,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599448270
    },
    {
        "content": "<p>I also feel pretty strongly about not making global notation for this. Depending on which topic of mathematics I'm thinking about today, I might feel strongly that this operation should be written as star, bar, or dagger. :-)</p>",
        "id": 209253556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599448348
    },
    {
        "content": "<p>But the bar will look funny in unicode, no matter what, right?</p>",
        "id": 209255908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599452465
    },
    {
        "content": "<p>feeling strongly about notation rarely leads to being happy in lean (or life, for that matter)</p>",
        "id": 209256980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599454246
    },
    {
        "content": "<p>I was kinda surprised this works to be honest:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">̅</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">̅</span><span class=\"n\">x</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">̅</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>of course the second one looks silly, but <code> ̅x</code> isn't so bad in vscode.</p>",
        "id": 209257405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1599454834
    },
    {
        "content": "<p>Yeah, actually we probably want to be flexible regarding notation on this one!</p>",
        "id": 209333452,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1599520657
    },
    {
        "content": "<p>I've tried to revive the star parts of <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s PR in <a href=\"https://github.com/leanprover-community/mathlib/issues/4886\">#4886</a></p>",
        "id": 215457578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604412593
    },
    {
        "content": "<p>Were those PRs actually dropped, or did <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  just not have time yet?</p>",
        "id": 215477503,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1604421058
    },
    {
        "content": "<p>I think he's just been busy</p>",
        "id": 215479795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604422077
    },
    {
        "content": "<p>I thought I'd try splitting them up to help speed things along</p>",
        "id": 215479866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604422094
    },
    {
        "content": "<p>I hadn't had time, but definitely come back to them. Happy for any help, however!</p>",
        "id": 215538239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1604461624
    },
    {
        "content": "<p>Should I take that as \"I don't object to you splitting out that PR and having to deal with merging it back in later\"?</p>",
        "id": 215563497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604485712
    }
]