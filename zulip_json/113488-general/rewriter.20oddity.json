[
    {
        "content": "<p>I ran into this while showing someone the natural numbers game; am I wrong in thinking one (or all) of these should succeed? Both the rewrites fail, and so does <code>library_search</code>. The version of <code>pow_zero</code> in core works, as does the one in NNG. I'm on mathlib cd29ede, lean 3.16.5c</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202652259,
        "sender_full_name": "Chris B",
        "timestamp": 1593668785
    },
    {
        "content": "<p>wrt. the rewrites, I think you need <code>nat.pow_zero</code>, not <code>pow_zero</code>.</p>",
        "id": 202652641,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593669278
    },
    {
        "content": "<p>Here's the first error message if you have <code>set_option pp.notation false</code> and <code>set_option pp.implicit true</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">@</span><span class=\"n\">pow</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">has_pow</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">monoid</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"err\">‚ä¢</span> <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pow</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_pow</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>So Lean is having trouble unifying <code>@pow nat nat (@monoid.has_pow nat nat.monoid) b 0</code> (required by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_zero/src\">src#pow_zero</a>, in <code>algebra.group_power</code>) with <code>@pow nat nat nat.has_pow b 0</code>, whereas <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_zero/src\">src#nat.pow_zero</a> (in core) works.</p>",
        "id": 202653379,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593670234
    },
    {
        "content": "<p>Thank you both. The type of <code>pow_zero</code> says it's generic over instances of <code>monoid</code> and  <code>#print instances monoid</code> shows that there's a <code>nat.monoid</code> in the environment. I don't really know anything about how lean handles typeclass instances internally, but am I wrong to think that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_zero/src\">src#pow_zero</a> should succeed here?</p>",
        "id": 202654378,
        "sender_full_name": "Chris B",
        "timestamp": 1593671576
    },
    {
        "content": "<p>it should not succeed</p>",
        "id": 202655596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593672929
    },
    {
        "content": "<p>the problem is that there are two power functions, <code>monoid.pow</code> and <code>nat.pow</code>, and they look the same</p>",
        "id": 202655610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593672951
    },
    {
        "content": "<p>if you use power on nats you get <code>nat.pow</code>, otherwise you get <code>monoid.pow</code></p>",
        "id": 202655659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593672971
    },
    {
        "content": "<p>and only the <code>nat.pow_*</code> theorems work on <code>nat.pow</code> unless you first rewrite with <code>nat.pow_eq_pow</code></p>",
        "id": 202655683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593673011
    },
    {
        "content": "<p>This is something which could be fixed but which would just be painful to fix, right?</p>",
        "id": 202655851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593673174
    },
    {
        "content": "<p>Wow, what a bummer. Is that kind of overloading common in mathlib?</p>",
        "id": 202656802,
        "sender_full_name": "Chris B",
        "timestamp": 1593673983
    },
    {
        "content": "<p>Thanks for the explanation though.</p>",
        "id": 202656815,
        "sender_full_name": "Chris B",
        "timestamp": 1593673999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113488-general/topic/rewriter.20oddity/near/202656802\">said</a>:</p>\n<blockquote>\n<p>Wow, what a bummer. Is that kind of overloading common in mathlib?</p>\n</blockquote>\n<p>No, this issue with <code>nat.pow</code> is sort of unique. At some point we'll have the courage to fix it.</p>",
        "id": 202657186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593674285
    },
    {
        "content": "<p>When the number of people reporting it every month on Zulip becomes too much to bear :-)</p>",
        "id": 202657516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593674532
    },
    {
        "content": "<p>Is nat.pow still in core?</p>",
        "id": 202657539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593674552
    },
    {
        "content": "<p>The issue with <code>nat.pow</code> is also similar to <code>coe : nat -&gt; int</code> vs <code>coe : nat -&gt; A</code></p>",
        "id": 202657677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593674656
    },
    {
        "content": "<p>It is in core. Did we determine that it had a GMP implementation in C++?</p>",
        "id": 202657711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593674697
    },
    {
        "content": "<p>Yes, I think it does</p>",
        "id": 202657748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593674742
    },
    {
        "content": "<p>it doesn't</p>",
        "id": 202657879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593674856
    },
    {
        "content": "<p>but gcd does? crazy</p>",
        "id": 202657907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593674882
    },
    {
        "content": "<p>The coe issue burnt <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> only yesterday, with maps from nat to int to with_top int</p>",
        "id": 202657939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593674885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/rewriter.20oddity/near/202657879\">said</a>:</p>\n<blockquote>\n<p>it doesn't</p>\n</blockquote>\n<p>Then we should give it one, right?</p>",
        "id": 202657967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593674921
    },
    {
        "content": "<p>looks pretty easy</p>",
        "id": 202658021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593674976
    },
    {
        "content": "<p>If you speak GMP</p>",
        "id": 202658031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593674990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/rewriter.20oddity/near/202657939\">said</a>:</p>\n<blockquote>\n<p>The coe issue burnt <span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> only yesterday, with maps from nat to int to with_top int</p>\n</blockquote>\n<p>Yeah, I was trying to show </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">val_int_power</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>for a discrete valuation field K. Finally used this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">sub_add_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>so it worked out okay.</p>",
        "id": 202678532,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593691503
    }
]