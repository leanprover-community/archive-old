[
    {
        "content": "<p>Yet another unification problem. I'm trying to define <code>subsemiring</code> reusing <code>submonoid</code>. The following code fails in the definition of <code>comap</code>. It fails to unify different <code>carrier</code>s coming from <code>to_submonoid</code> and <code>to_add_submonoid</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">submonoid</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subsemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">submonoid</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subsemiring</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">subsemiring</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">m</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_coe</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_coe</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The preimage of a subsemiring along a monoid homomorphism is a subsemiring. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"err\">↑</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">to_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"err\">↑</span><span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">subsemiring</span>\n</pre></div>",
        "id": 195270547,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587795315
    },
    {
        "content": "<p>Ping here</p>",
        "id": 197072158,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589137112
    },
    {
        "content": "<p>Solved by using <code>(f : R →* S)</code> instead of <code>coe f</code>.</p>",
        "id": 197072380,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589137332
    },
    {
        "content": "<p>the randomness of Lean</p>",
        "id": 197072822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589137931
    },
    {
        "content": "<p>magic doesn't work in Lean</p>",
        "id": 197072990,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589138263
    },
    {
        "content": "<p>It's the wrong sort of arrow right? It should be \\u=</p>",
        "id": 197073134,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589138347
    },
    {
        "content": "<p>No, it is a conversion to <code>monoid_hom</code> / <code>add_monoid_hom</code>, so it is a correct type of arrow. I guess that Lean failed to figure out the target type of this coercion.</p>",
        "id": 197073350,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589138557
    }
]