[
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/Knaster-Tarski.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/Knaster-Tarski.lean\">https://github.com/kckennylau/Lean/blob/master/Knaster-Tarski.lean</a><br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> por favor diz que nao fazias isso</p>",
        "id": 124351778,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522298634
    },
    {
        "content": "<p>pooh favoh jeez ki now fazeeaish eesoo</p>",
        "id": 124351819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522298664
    },
    {
        "content": "<p>(that's how I pronounce it)</p>",
        "id": 124351820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522298671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> if you're interested</p>",
        "id": 124352028,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299159
    },
    {
        "content": "<p>it's related to the link I pm'ed you</p>",
        "id": 124352029,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299164
    },
    {
        "content": "<p>Actually I'm a bit surprised it's not there</p>",
        "id": 124352073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299253
    },
    {
        "content": "<p>bom!</p>",
        "id": 124352074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299265
    },
    {
        "content": "<p>I'm certain there's something like it somewhere, but maybe it's not stated on complete lattices</p>",
        "id": 124352082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299326
    },
    {
        "content": "<p>I thought it's a theorem of complete lattices</p>",
        "id": 124352084,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299346
    },
    {
        "content": "<p>There is a <code>lfp</code> function in ordinal with a similar proof attached</p>",
        "id": 124352085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299357
    },
    {
        "content": "<p>nice</p>",
        "id": 124352126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299369
    },
    {
        "content": "<p>that's the theorem about normal ordinal functions right</p>",
        "id": 124352127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299375
    },
    {
        "content": "<p>does it have a name?</p>",
        "id": 124352131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299379
    },
    {
        "content": "<p>maybe you can prove your <code>lfp</code> using this :D</p>",
        "id": 124352132,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299410
    },
    {
        "content": "<p>nvm it isn't a complete lattice</p>",
        "id": 124352134,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299414
    },
    {
        "content": "<p><code>is_normal.nfp_fp</code> is what I was thinking of</p>",
        "id": 124352135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299415
    },
    {
        "content": "<p>Dunno, it's not a complete lattice</p>",
        "id": 124352141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299429
    },
    {
        "content": "<p>interesting</p>",
        "id": 124352143,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299437
    },
    {
        "content": "<p>Maybe that means there's a hidden abstraction?</p>",
        "id": 124352144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299444
    },
    {
        "content": "<p>well to be fair</p>",
        "id": 124352147,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299457
    },
    {
        "content": "<p>like a sup-continuous monotone function</p>",
        "id": 124352149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299463
    },
    {
        "content": "<p>your set is well-ordered</p>",
        "id": 124352151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299466
    },
    {
        "content": "<p>hmm</p>",
        "id": 124352152,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299471
    },
    {
        "content": "<p>but my function isn't sup-continuous</p>",
        "id": 124352196,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299493
    },
    {
        "content": "<p>Are you sure? Seems like it follows from the assumptions</p>",
        "id": 124352209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299595
    },
    {
        "content": "<p>Anyway, I think this is why it isn't abstracted :)</p>",
        "id": 124352257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299634
    },
    {
        "content": "<p>look at my aux 3</p>",
        "id": 124352258,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522299642
    },
    {
        "content": "<p>Why do <code>next</code> and <code>previous</code> take an unused proof argument?</p>",
        "id": 124352320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299815
    },
    {
        "content": "<p>Wouldn't it be nicer to state <code>aux3</code> for subsets of <code>fixed_points f</code> rather than sets in the subtype?</p>",
        "id": 124352371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299934
    },
    {
        "content": "<p>Then you could skip the <code>subtype.val ''</code> part</p>",
        "id": 124352372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522299952
    },
    {
        "content": "<p>then how can I use it</p>",
        "id": 124352417,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522300029
    },
    {
        "content": "<blockquote>\n<p>Why do <code>next</code> and <code>previous</code> take an unused proof argument?</p>\n</blockquote>\n<p>fixed</p>",
        "id": 124352420,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522300051
    },
    {
        "content": "<p>For the big ol <code>complete_lattice</code> proof, I don't think that's the claim you want. Rather, <code>fixed_points f</code> is a complete sublattice of the powerset</p>",
        "id": 124352423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522300079
    },
    {
        "content": "<p>sublattice?</p>",
        "id": 124352463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522300099
    },
    {
        "content": "<p>and then you have that construction generally for all sublattices</p>",
        "id": 124352465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522300121
    },
    {
        "content": "<p>I'm not aware of the existence of sublattices in Lean?</p>",
        "id": 124352466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522300125
    },
    {
        "content": "<p>I don't think they exist</p>",
        "id": 124352473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522300154
    },
    {
        "content": "<p>But you could just skip the complete_lattice construction and just prove that the sup of fixed points is a fixed point</p>",
        "id": 124352482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522300189
    },
    {
        "content": "<blockquote>\n<p>Wouldn't it be nicer to state <code>aux3</code> for subsets of <code>fixed_points f</code> rather than sets in the subtype?</p>\n</blockquote>\n<p>nope, unprovable</p>",
        "id": 124352530,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522300250
    },
    {
        "content": "<p>wait, misinterpreted</p>",
        "id": 124352533,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522300264
    },
    {
        "content": "<blockquote>\n<p>But you could just skip the complete_lattice construction and just prove that the sup of fixed points is a fixed point</p>\n</blockquote>\n<p>they aren't</p>",
        "id": 124352537,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522300274
    },
    {
        "content": "<p>oh, I see, you need that <code>next</code> thing in the middle</p>",
        "id": 124352545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522300306
    },
    {
        "content": "<p>Hm, it's something like a retract from <code>set A</code> to <code>fixed_points f</code></p>",
        "id": 124352585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522300330
    },
    {
        "content": "<p>It still strikes me as a generic construction</p>",
        "id": 124352591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522300357
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/Knaster-Tarski.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/Knaster-Tarski.lean\">https://github.com/kckennylau/Lean/blob/master/Knaster-Tarski.lean</a></p>",
        "id": 124352638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522300495
    },
    {
        "content": "<blockquote>\n<p>Wouldn't it be nicer to state <code>aux3</code> for subsets of <code>fixed_points f</code> rather than sets in the subtype?</p>\n</blockquote>\n<p>done. compare aux3 and aux4. aux4 has not been changed. which one is better?</p>",
        "id": 124352645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522300522
    },
    {
        "content": "<p><code>Sup (f '' A)</code> is also expressible as an indexed sup, <code>⨆ x ∈ A, f x</code></p>",
        "id": 124352756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522300731
    },
    {
        "content": "<p>oh</p>",
        "id": 124352871,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522301018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> so what is the verdict?</p>",
        "id": 124353364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302145
    },
    {
        "content": "<p>I prefer aux3 since it is more likely to be used as a lemma</p>",
        "id": 124353373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302189
    },
    {
        "content": "<p>and in general?</p>",
        "id": 124353374,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302199
    },
    {
        "content": "<p>do you find ways of abstracting Knaster-Tarski?</p>",
        "id": 124353375,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302222
    },
    {
        "content": "<p>Not anything obvious</p>",
        "id": 124353414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302249
    },
    {
        "content": "<p>and is it worth pushing?</p>",
        "id": 124353416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302263
    },
    {
        "content": "<p>I wonder if it works in conditionally complete lattices</p>",
        "id": 124353417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302265
    },
    {
        "content": "<p>yes, PR it</p>",
        "id": 124353418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302279
    },
    {
        "content": "<p>what is cc lattices?</p>",
        "id": 124353419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> should also weigh in, he's more involved in complete lattice theory than me</p>",
        "id": 124353420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302300
    },
    {
        "content": "<p>real numbers, basically</p>",
        "id": 124353427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302313
    },
    {
        "content": "<p>sup of nonempty bounded sets</p>",
        "id": 124353428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302334
    },
    {
        "content": "<p>bot uses top, top uses bot</p>",
        "id": 124353429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302336
    },
    {
        "content": "<p>?</p>",
        "id": 124353432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302354
    },
    {
        "content": "<p>I think they can do without each other then</p>",
        "id": 124353433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302354
    },
    {
        "content": "<p>the least fixed point is from the top element of the original lattice</p>",
        "id": 124353475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302382
    },
    {
        "content": "<p>f(x)=x+1 has no fixed points</p>",
        "id": 124353478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302407
    },
    {
        "content": "<p>sounds legit</p>",
        "id": 124353489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302430
    },
    {
        "content": "<p>[0,infty) is downward complete right</p>",
        "id": 124353495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302478
    },
    {
        "content": "<p>same example applies</p>",
        "id": 124353536,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302488
    },
    {
        "content": "<p>[0,1] is complete right</p>",
        "id": 124353642,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302727
    },
    {
        "content": "<p>yes</p>",
        "id": 124353655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302785
    },
    {
        "content": "<p>hmm</p>",
        "id": 124353658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302790
    },
    {
        "content": "<p>you don’t even need continuity</p>",
        "id": 124353661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302810
    },
    {
        "content": "<p>wait, doesn't that imply banach's fp theorem in 1D?</p>",
        "id": 124353663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522302825
    },
    {
        "content": "<p><span class=\"emoji emoji-1f62e\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 124353665,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302833
    },
    {
        "content": "<p>maths is beautiful</p>",
        "id": 124353708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522302864
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/88\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/88\">https://github.com/leanprover/mathlib/pull/88</a></p>",
        "id": 124354180,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522304001
    },
    {
        "content": "<p>There is already <code>order/fixed_points.lean</code> in mathlib. It contains <code>lattice.lfp</code> and <code>lattice.gfp</code> to compute the least and greatest fixed point of a function. For conditionally complete lattices: we could add a subtype instance for intervals on conditionally complete lattices. Then  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>]</mo><mo>:</mo><mrow><mi mathvariant=\"double-struck\">R</mi></mrow></mrow><annotation encoding=\"application/x-tex\">[0, 1] : \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">[</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span><span class=\"mrel\">:</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> would be a complete lattice.</p>",
        "id": 124355353,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522306795
    },
    {
        "content": "<p>fair enough</p>",
        "id": 124355402,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522306861
    },
    {
        "content": "<p>Your <code>next</code> and <code>previous</code> function can be represented using the <code>gfp</code> and <code>lfp</code>: e.g. <code>gfp (λz, x ⊔ f z) = Sup {z | z ≤ x ⊔ f z}</code>. Then you can use the lfp and gfp properties.</p>",
        "id": 124355578,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522307192
    },
    {
        "content": "<p>so you're just going to close my PR?</p>",
        "id": 124355580,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522307222
    },
    {
        "content": "<p>No, I don't want to close it. I would like to see the fixed point lattice in <code>order/fixed_points.lean</code>. And using the constants and proofs we already have.</p>",
        "id": 124355626,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522307292
    },
    {
        "content": "<p>oh ok</p>",
        "id": 124355628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522307319
    },
    {
        "content": "<p>are you going to edit it or am I going to edit it?</p>",
        "id": 124355629,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522307330
    },
    {
        "content": "<p>Of course, if you want you can edit it! I have a couple more changes: rename <code>aux1..4</code> to something useful and replace <code>is_ord_hom</code> by the assumption <code>monotone f</code>, also going from type class to just assumption.</p>",
        "id": 124355684,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522307445
    },
    {
        "content": "<p>how would you rename <code>aux1..4</code>? <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span></p>",
        "id": 124358216,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522313013
    },
    {
        "content": "<p>something like <code>sup_le_f_sup_of_fixed_points</code>?</p>",
        "id": 124358372,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522313323
    },
    {
        "content": "<p>ach fur gottesliebe</p>",
        "id": 124358375,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522313333
    },
    {
        "content": "<p>that's 10 times as long</p>",
        "id": 124358377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522313341
    },
    {
        "content": "<p>and more descriptive too ;-)</p>",
        "id": 124358387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522313369
    },
    {
        "content": "<p>do you use <code>f</code> in names?</p>",
        "id": 124358437,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522313414
    },
    {
        "content": "<p>Wait -- aren't you and I editing some schemes files with function names like <code>structure_sheaf_of_rings_on_affine_scheme</code> ?</p>",
        "id": 124358438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522313423
    },
    {
        "content": "<p>my mind replaces <code>f</code> with <code>apply</code> in names</p>",
        "id": 124358439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522313424
    },
    {
        "content": "<p>yes, and it's always you who type it :P</p>",
        "id": 124358442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522313437
    },
    {
        "content": "<p><code>definition  structure_sheaf_of_rings_on_affine_scheme (R : Type*) [comm_ring R] : is_sheaf_of_rings (structure_presheaf_of_rings_on_affine_scheme R) :=...</code> :-)</p>",
        "id": 124358452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522313481
    },
    {
        "content": "<p>well Mario told me I couldn't use <code>tag00EJ</code>...</p>",
        "id": 124358453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522313499
    },
    {
        "content": "<p>I never typed it :P</p>",
        "id": 124358454,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522313499
    },
    {
        "content": "<p>Perhaps <code>tag00EJ</code> is as bad as <code>aux1</code> right? ;-)</p>",
        "id": 124358459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522313519
    },
    {
        "content": "<p>right</p>",
        "id": 124358499,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522313527
    }
]