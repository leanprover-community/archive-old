[
    {
        "content": "<p>Why doesn't Lean just tell me this is nonsense? It won't accept (banana : fin 2) but it's accepting 17, and I don't know what that's supposed to mean. (Will Lean 4 be any different in this respect?) Just curious, thanks!</p>",
        "id": 226199560,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1613165997
    },
    {
        "content": "<p>Does <code>#eval</code> work?</p>",
        "id": 226201458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613167039
    },
    {
        "content": "<p>Anyway it's defined with wrapping arithmetic, so it is <code>1</code></p>",
        "id": 226201489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613167059
    },
    {
        "content": "<p>There is a PR in the pipes to change it to saturating arithmetic but it will still be <code>1</code> in that case</p>",
        "id": 226201545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613167083
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">17</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- 1</span>\n</code></pre></div>",
        "id": 226201655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613167122
    },
    {
        "content": "<p>As for why lean doesn't say it's nonsense, it's because numerals in lean desugar to applications of the <code>bit0</code> and <code>bit1</code> functions that are defined on anything with a <code>1</code> and a <code>+</code></p>",
        "id": 226201835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613167216
    },
    {
        "content": "<p>this approach doesn't leave any room for saying that some numerals are okay and others are not, you either get all numerals or none</p>",
        "id": 226201900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613167247
    },
    {
        "content": "<p>as for whether lean 4 will change things, it's not clear. The approach is different - there is a class <code>OfNat A n</code> that inhabits each particular numeral, so in principle we could have instances <code>OfNat (fin 17) 0</code> , ...<code>OfNat (fin 17) 16</code> with no more, and then you will only be able to use these numerals, but it's not yet clear how to get families of instances parameterized by decidable arithmetic predicates like this (we would want <code>instance (h : m &lt; n) : OfNat (fin n) m</code> here but that needs typeclass inference to prove <code>m &lt; n</code> somehow).</p>",
        "id": 226202164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613167392
    },
    {
        "content": "<p>Lean 4 has less room to \"somehow prove something\" in type class search as it is no longer supposed to invoke the tactic framework. The only option that I know of is to use an instance of <code>Fact (n &lt; m)</code></p>",
        "id": 226262430,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1613244393
    },
    {
        "content": "<p>Well it doesn't need to invoke \"tactics\" per se, there are a bunch of monads now, we just need the relevant one to have extensible rules, possibly with a caveat that any extensions need to be pure-functional and possibly some other properties, and the user is responsible for any slowdown that results. Lean 3 can't call tactics either, and especially when it comes to dealing with kernel literals the alternative to \"computed instances\" is a sort of prolog-programming in instance search which is almost guaranteed to have worse performance and probably a worse result too (a needlessly complicated instance term coming out, that affects downstream elaboration).</p>",
        "id": 226272289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613255007
    }
]