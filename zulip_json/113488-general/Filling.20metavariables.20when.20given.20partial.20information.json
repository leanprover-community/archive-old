[
    {
        "content": "<p>Let's have an expression <code>(λ x : _, x)</code>, is there a way to turn it into <code>(λ x : nat, x)</code> if I know its type should be <code>_ → nat</code>?</p>\n<p>My attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">pe</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span>  <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">pe</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n</code></pre></div>\n\n<p>However this still prints <code>λ (x : ?m_1), x</code>. Is there a simple way to achieve this?</p>",
        "id": 212958085,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1602409362
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 212958298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602409699
    },
    {
        "content": "<p>Thanks, but assuming  <code>nat → _</code> instead of  <code>_ → nat</code>  fails to infer the type. Why is that?</p>",
        "id": 212959494,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1602411790
    },
    {
        "content": "<p>Also I would like to be able to partially infer types. E.g. for expression <code>(λ x y, x)</code> given it has the type <code>_ → _ → nat</code>concluding that it is <code>(λ (x : nat) (y : _), x)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 212960041,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1602412793
    },
    {
        "content": "<p>Lean will almost never let you write <code>nat -&gt; _</code></p>",
        "id": 212960219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602413081
    },
    {
        "content": "<p>because it produces a metavariable that depends on another variable, which doesn't unify with anything</p>",
        "id": 212960233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602413112
    },
    {
        "content": "<p>Note that lean is doing dependent type theory, even if you aren't</p>",
        "id": 212960269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602413162
    },
    {
        "content": "<p>so arrows are hard</p>",
        "id": 212960288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602413177
    },
    {
        "content": "<p>This has a slightly more comprehensible result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">expr.app</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">e</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 212960365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602413401
    },
    {
        "content": "<p>and you can also do <code>nat -&gt; _</code> that way, e.g. using <code>``(%%p (_ : nat) _)</code></p>",
        "id": 212960413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602413442
    },
    {
        "content": "<p>I see that with dependent types it gets really difficult. (You have a slight typo, there should be <code>tactic.to_expr ... tt ff</code>)</p>",
        "id": 212960708,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1602413917
    }
]