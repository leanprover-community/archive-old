[
    {
        "content": "<p>I'm trying to figure out how <code>let</code> works.  Consider the following silly example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">|</span> <span class=\"n\">nat.prime</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>At this point, the immediate goal is <code>5 ∈ P</code>.  If I use <code>dsimp</code>, then this goal is translated into <code>nat.prime 5</code>, so the information about what <code>P</code> stands for must be stored somewhere that is available to <code>dsimp</code>, but I can't figure out where it is.  It seems like it is a definition, but changing <code>dsimp</code> to <code>unfold P</code> doesn't work.  I thought the definition must be stored as a declaration in the environment, but I've searched for it there and I can't find it.  Where is <code>dsimp</code> getting the information from?</p>",
        "id": 271859840,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1644859781
    },
    {
        "content": "<p>If you look at your goal state, you should see <code>P : set nat := ...</code></p>",
        "id": 271860180,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644859936
    },
    {
        "content": "<p>Yes, I see that.  My problem is that I'm trying to write a tactic that accesses that information.  If I use tactic.local_context, the only thing I can find there is that <code>P</code> has type <code>set nat</code>.  How do I find out what it is defined to be equal to?</p>",
        "id": 271860600,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1644860117
    },
    {
        "content": "<p>Ah, I see... You might want to look at how <code>let</code> and/or <code>set</code> is implemented.<br>\nIt may also be worthwhile to ask this question in the <a class=\"stream\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics\">#metaprogramming / tactics</a> stream.</p>",
        "id": 271860804,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644860209
    },
    {
        "content": "<p>Oh, I may have found it.  I think I have to call tactic.local_defs, not tactic.local_context.</p>",
        "id": 271860832,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1644860219
    },
    {
        "content": "<p>Here's the code for the tactic <code>set</code> (which is similar to <code>let</code>):<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/199e8ca8f03a76351168456183a9a25cd851b272/src/tactic/interactive.lean#L801\">https://github.com/leanprover-community/mathlib/blob/199e8ca8f03a76351168456183a9a25cd851b272/src/tactic/interactive.lean#L801</a></p>",
        "id": 271861163,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644860360
    },
    {
        "content": "<p>No, tactic.local_defs doesn't do it.  It just returns a list of the expressions that have definitions--in my case, that's just <code>P</code>--but not what the definitions actually are.</p>",
        "id": 271861990,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1644860734
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.local_def_value\">docs#tactic.local_def_value</a> should be it. This stuff is indeed well hidden in the stdlib (for no particular reason afaik).</p>",
        "id": 271862462,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1644860958
    },
    {
        "content": "<p>Thanks.  Yes, I think that's what I was looking for.</p>",
        "id": 271862672,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1644861051
    },
    {
        "content": "<p>OK, tactic.local_def_value does what I wanted.  But now I'm still wondering why <code>unfold P</code> doesn't work.  It looks to me like <code>unfold</code> looks for definitions in the environment, but not in the local context.  Wouldn't it make sense for it to look in the local context as well?</p>",
        "id": 271873830,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1644865918
    },
    {
        "content": "<p>Does <code>delta P</code> work?</p>",
        "id": 271891463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644874224
    },
    {
        "content": "<p><code>delta P</code> gives the error message <code>unknown declaration 'P'</code>.</p>",
        "id": 271903242,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1644880373
    },
    {
        "content": "<p>You can just use <code>change</code>in tactic mode to make the substitution; I don't know of any other way. I always use <code>set</code> not <code>let</code> because then I have the hypothesis to rewrite with. I'm aware this is not answering your question though</p>",
        "id": 271905000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644881593
    },
    {
        "content": "<p><code>simp</code> and <code>dsimp</code> support unfolding lets, so you can use <code>dsimp only [P]</code> in lieu of <code>unfold P</code></p>",
        "id": 271905781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644882173
    },
    {
        "content": "<p>they are the only definition unfolding tactics that know about let decls</p>",
        "id": 271905797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644882194
    }
]