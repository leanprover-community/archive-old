[
    {
        "content": "<p>Paraphrasing from <code>group_theory.group_action.defs</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ite_smul'</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>There must be a golfy 10 character proof of this, right? This is some theorem about <code>[has_scalar M S]</code>, the notation typeclass.</p>\n<p>PS does the fact that the proof term generated by <code>split_ifs</code> is a page or so, does a simplification make to_additive's job substantially easier? Or does <code>to_additive</code> work by magic?</p>",
        "id": 244811172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625325995
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ite_smul'</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">apply_ite</span> <span class=\"o\">(</span><span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span>\n</code></pre></div>",
        "id": 244812125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625327653
    },
    {
        "content": "<p>Or <code>apply_ite ((• b) : M → S) _ _ _</code> if you want your underscores trailing</p>",
        "id": 244812200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625327770
    }
]