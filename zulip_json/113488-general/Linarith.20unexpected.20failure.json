[
    {
        "content": "<p>A very strange thing is happening here:</p>\n<p><a href=\"https://github.com/FredericLeRoux/LEAN_ESPACES_METRIQUES/blob/master/esp_metrique.lean#L96\" title=\"https://github.com/FredericLeRoux/LEAN_ESPACES_METRIQUES/blob/master/esp_metrique.lean#L96\">https://github.com/FredericLeRoux/LEAN_ESPACES_METRIQUES/blob/master/esp_metrique.lean#L96</a></p>\n<p>The current proof ends with linarith, and it works. But then let's replace line 96,<br>\n<code> have clef : d x z ≤ d x y + d y z, from triangle x y z</code><br>\nwith the less explicit<br>\n<code> have clef, from triangle x y z</code><br>\nLean's answer to this line does not change, as expected. So the context at line 96, after this change, seems to be as before.<br>\nBut now the linarith tactic at the next line fails!</p>",
        "id": 196951550,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1588972491
    },
    {
        "content": "<p>Did you try looking at this with <code>set_option pp.all true</code>?</p>",
        "id": 196952394,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588973069
    },
    {
        "content": "<p>Probably it adds <code>dist x z ≤ dist x y + dist y z</code> with a metavariable instead of an instance for <code>metric_space</code>.</p>",
        "id": 196952461,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588973120
    },
    {
        "content": "<p>So I tried pp.all. Both lines give exactly the same result:<br>\n<code>clef :\n  @has_le.le.{0} real real.has_le (@espace_metrique.dist X _inst_1 x z)\n    (@has_add.add.{0} real (@distrib.to_has_add.{0} real (@ring.to_distrib.{0} real real.ring))\n       (@espace_metrique.dist X _inst_1 x y)\n       (@espace_metrique.dist X _inst_1 y z))</code><br>\n<code>clef2 :\n  @has_le.le.{0} real real.has_le (@espace_metrique.dist X _inst_1 x z)\n    (@has_add.add.{0} real (@distrib.to_has_add.{0} real (@ring.to_distrib.{0} real real.ring))\n       (@espace_metrique.dist X _inst_1 x y)\n       (@espace_metrique.dist X _inst_1 y z))</code></p>",
        "id": 196954447,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1588974560
    },
    {
        "content": "<p>Then you need a better expert on Lean internals.</p>",
        "id": 196954624,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588974679
    },
    {
        "content": "<p><code>have clef := triangle x y z, </code> works, but <code>have clef, from triangle x y z, </code> fails</p>",
        "id": 196955186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588975066
    },
    {
        "content": "<p>You can by the way change the <code>linarith</code> to:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z_in</span><span class=\"o\">,</span> <span class=\"n\">y_in</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>which works fine</p>",
        "id": 196955437,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588975217
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">...</span>\n    <span class=\"k\">have</span> <span class=\"n\">clef</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">clef2</span> <span class=\"o\">:=</span> <span class=\"n\">triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">clef</span> <span class=\"bp\">=</span> <span class=\"n\">clef2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"c1\">--    linarith only [clef, z_in, y_in, hε], -- fails!</span>\n    <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">clef2</span><span class=\"o\">,</span> <span class=\"n\">z_in</span><span class=\"o\">,</span> <span class=\"n\">y_in</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">],</span> <span class=\"c1\">-- works</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>This is surprising (to me). With pp.all on true, clef and clef2 are identical (indeed the prettyprinter is telling me they have the same type)</p>",
        "id": 196955489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588975255
    },
    {
        "content": "<p>I think the <code>rfl</code> is doing some simplifications/unfolding to prove the equality, but <code>linarith</code> doesn't perform these; and the clef (in Kevin's code) has something folded differently to what the <code>linarith</code> wants</p>",
        "id": 196955671,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588975365
    },
    {
        "content": "<p>And this also explains why <code>pp.all</code> thinks the terms are the same</p>",
        "id": 196955712,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588975393
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>clef clef2 : d x z ≤ d x y + d y z,\nh : clef = clef2\n⊢ d x z &lt; r\n</code></pre></div>",
        "id": 196955760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588975433
    },
    {
        "content": "<p>Where's that Mario super-pp-all code?</p>",
        "id": 196955812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588975455
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">...</span>\n    <span class=\"k\">have</span> <span class=\"n\">clef</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">clef</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">clef</span><span class=\"o\">,</span> <span class=\"n\">z_in</span><span class=\"o\">,</span> <span class=\"n\">y_in</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">]}</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>works as well, showing that there is something to simplify in the term, and it's this simplification that makes it work</p>",
        "id": 196955882,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588975524
    },
    {
        "content": "<p>ha ha! I think it's the same issue as the one I found a few days ago!</p>",
        "id": 196956139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588975737
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">clef</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">clef2</span> <span class=\"o\">:=</span> <span class=\"n\">triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">clef</span> <span class=\"bp\">=</span> <span class=\"n\">clef2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span><span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">clef</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span><span class=\"o\">,</span>\n      <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span> <span class=\"n\">t</span><span class=\"o\">)),</span>\n    <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span><span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">clef2</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span><span class=\"o\">,</span>\n      <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span> <span class=\"n\">t</span><span class=\"o\">)),</span>\n<span class=\"c1\">--    linarith only [clef, z_in, y_in, hε],</span>\n    <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">clef2</span><span class=\"o\">,</span> <span class=\"n\">z_in</span><span class=\"o\">,</span> <span class=\"n\">y_in</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 196956175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588975770
    },
    {
        "content": "<p><code>clef</code> has some metavariable in it which pp.all can't see</p>",
        "id": 196956252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588975813
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/rw.3A.20equality.20is.20not.20an.20equality/near/196693213\" title=\"#narrow/stream/113488-general/topic/rw.3A.20equality.20is.20not.20an.20equality/near/196693213\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/rw.3A.20equality.20is.20not.20an.20equality/near/196693213</a></p>",
        "id": 196956476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588976034
    },
    {
        "content": "<p>So<code>linarith</code> doesn't know that it's an inequality</p>",
        "id": 196956726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588976169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is<code>from</code> broken??</p>",
        "id": 196956780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588976213
    },
    {
        "content": "<p>The first trace starts with a metavariable</p>",
        "id": 196956816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588976236
    },
    {
        "content": "<p>I think the <code>have clef, from</code> pattern might just be a bad idea: we're naming something without giving its type at all</p>",
        "id": 196956863,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588976271
    },
    {
        "content": "<p>which I'm distinguishing from <code>have clef := triangle x y z</code> since in this one the type can be inferred</p>",
        "id": 196956935,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588976305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/Linarith.20unexpected.20failure/near/196955437\" title=\"#narrow/stream/113488-general/topic/Linarith.20unexpected.20failure/near/196955437\">said</a>:</p>\n<blockquote>\n<p>You can by the way change the <code>linarith</code> to:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z_in</span><span class=\"o\">,</span> <span class=\"n\">y_in</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>which works fine</p>\n</blockquote>\n<p>did you guess this or did it come from something like <code>linarith?</code> ?</p>",
        "id": 196958469,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588977495
    },
    {
        "content": "<p>Is it possible to write a <code>zonk</code> tactic which instantiates all metavariables that have been assigned everywhere?</p>",
        "id": 196958526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588977587
    },
    {
        "content": "<p>I'm glad to finally understand this situation where <code>pp.all</code> prints two identical types but they behave differently for some tactics</p>",
        "id": 196958603,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588977634
    },
    {
        "content": "<p><code>have clef := triangle x y z, linarith [clef, ...]</code> worked so I presumed <code>linarith [triangle x y z, ...]</code> should work too</p>",
        "id": 196958607,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588977637
    },
    {
        "content": "<p>Indeed, <code>expr.to_raw_fmt t</code>gives <code>(mvar _mlocal._fresh.880.289587 _mlocal._fresh.880.289587 (const 2 []))</code>when applied on the bad version of clef. I am happy with <code>have clef := triangle x y z</code>, but that's frightening!</p>",
        "id": 196992414,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1589031989
    },
    {
        "content": "<p>I guess I'm also a bit confused because in GHC I thought zonking was a performance optimization--suggesting that the difference between an assigned metavariable and its definition should somehow be invisible to everything.</p>",
        "id": 196992480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589032083
    },
    {
        "content": "<p>it is definitely supposed to be invisible to everything, but <code>expr</code> is a type in lean, with distinct constructors for <code>mvar</code> and other things, so it's tough to make it actually invisible to pure code</p>",
        "id": 196993127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589033082
    },
    {
        "content": "<p>e.g. if I have an unassigned <code>mvar</code>, store it somewhere, then the mvar gets assigned, and I recheck my store, it had better still be an <code>mvar</code> because otherwise it wouldn't be a pure function, yet it is nevertheless an assigned mvar</p>",
        "id": 196993199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589033171
    }
]