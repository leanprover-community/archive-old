[
    {
        "content": "<p>Dear All,</p>\n<p>I feel that my proof below is very clumsy: does anyone have a better proof of the lemma?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid</span>\n\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_and_eq_of_le_of_le_of_mul_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">contravariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- im-prove me, please!</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">trichotomous_of</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">a0</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h.trans_le</span> <span class=\"n\">ha</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">trichotomous_of</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">b0</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h.trans_le</span> <span class=\"n\">hb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_of_mul_le_mul_left'</span> <span class=\"n\">ab.le</span><span class=\"o\">)</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">mul_lt_mul_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">ab.le</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296577417,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662036090
    },
    {
        "content": "<p>Slightly improved:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_and_eq_of_le_of_le_of_mul_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">contravariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">ha.eq_or_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hb.eq_or_lt</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_of_mul_le_mul_left'</span> <span class=\"n\">ab.le</span><span class=\"o\">)</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">mul_lt_mul_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">ab.le</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296578202,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1662036382
    },
    {
        "content": "<p>Thanks!</p>\n<p>This also works, but, given the statement, it also feels very awkward:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_and_eq_of_le_of_le_of_mul_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">contravariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">has_mul.to_covariant_class_right</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">mul_le_mul'</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt_of_ne</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"n\">a0</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha0</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">_root_.mul_lt_mul_left'</span> <span class=\"o\">(</span><span class=\"n\">hb.lt_of_ne</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">ha</span> <span class=\"n\">ha0.symm</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296591730,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662040764
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_and_eq_of_le_of_le_of_mul_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">contravariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">has_mul.to_covariant_class_right</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">b0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_of_le_of_lt</span> <span class=\"n\">ha</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"n\">ha.eq_of_not_lt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">ab</span> <span class=\"o\">(</span><span class=\"n\">ha'</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n         <span class=\"o\">(</span><span class=\"n\">hb.eq_of_not_lt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">ab</span> <span class=\"o\">(</span><span class=\"n\">hb'</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296667065,
        "sender_full_name": "FR",
        "timestamp": 1662054258
    },
    {
        "content": "<p>Maybe we need contrapositive lemmas of <code>mul_lt_mul_of_lt_of_le</code> and <code>mul_lt_mul_of_le_of_lt</code></p>",
        "id": 296667366,
        "sender_full_name": "FR",
        "timestamp": 1662054346
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_and_eq_of_le_of_le_of_mul_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">contravariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">has_mul.to_covariant_class_right</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">a0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">b0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_of_le_of_lt</span> <span class=\"n\">ha</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">ha'</span> <span class=\"n\">hb'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ha.antisymm'</span> <span class=\"o\">(</span><span class=\"n\">ha'</span> <span class=\"n\">ab.le</span><span class=\"o\">),</span> <span class=\"n\">hb.antisymm'</span> <span class=\"o\">(</span><span class=\"n\">hb'</span> <span class=\"n\">ab.le</span><span class=\"o\">)⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296668376,
        "sender_full_name": "FR",
        "timestamp": 1662054646
    },
    {
        "content": "<p>Personally I'd split this lemma into two.</p>",
        "id": 296669878,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662055070
    },
    {
        "content": "<p>The two halves seem to have little to do with one another.</p>",
        "id": 296669995,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662055093
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_and_eq_of_le_of_le_of_mul_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">contravariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a0</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">has_mul.to_covariant_class_right</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">contravariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨(</span><span class=\"n\">covariant_lt_iff_contravariant_le</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">covariant_class.elim</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">le_of_mul_le_mul_right'</span> <span class=\"o\">(</span><span class=\"n\">h.trans</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left'</span> <span class=\"n\">hb</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a0</span> <span class=\"bp\">*</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">le_of_mul_le_mul_left'</span> <span class=\"o\">(</span><span class=\"n\">h.trans</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right'</span> <span class=\"n\">ha</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ha.antisymm'</span> <span class=\"o\">(</span><span class=\"n\">ha'</span> <span class=\"n\">ab.le</span><span class=\"o\">),</span> <span class=\"n\">hb.antisymm'</span> <span class=\"o\">(</span><span class=\"n\">hb'</span> <span class=\"n\">ab.le</span><span class=\"o\">)⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The \"direct\" proof is longer, but I think it is possible to change the typeclass assumptions.</p>",
        "id": 296672698,
        "sender_full_name": "FR",
        "timestamp": 1662055958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@FR</span> thank you very much!  I used one of your versions in the <code>unique_prods</code> PR!</p>",
        "id": 296673049,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662056084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> if this lemma were less specialized, I would probably split it.  Since it is a technical step, I simply wanted to be done with it quickly.</p>",
        "id": 296673217,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662056146
    }
]