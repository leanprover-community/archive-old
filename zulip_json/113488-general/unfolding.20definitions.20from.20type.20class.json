[
    {
        "content": "<p>Say I have a goal like <code>⊢ f x</code> where <code>f</code> is coming from a type class instance. How do I unfold the definition of <code>f</code> from the type class?</p>",
        "id": 263945591,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638838100
    },
    {
        "content": "<p>Generally the answer is to not unfold, and use and/or build the API for <code>f</code> instead. If you must unfold, you can <code>dsimp [f]</code> or <code>unfold f</code> or <code>delta f</code>.</p>",
        "id": 263945849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638838326
    },
    {
        "content": "<p>I'm building the API for <code>f</code>, so that's why I need to unfold. Unfortunately, none of your suggestions worked.</p>",
        "id": 263946142,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638838586
    },
    {
        "content": "<p>It would be easier to help if you gave a more complete example, of a specific f and example that leaves you in that goal state, and what exactly you'd like the goal to look like after</p>",
        "id": 263946698,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638839000
    },
    {
        "content": "<p>Let me try to make a toy example.</p>",
        "id": 263946717,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638839021
    },
    {
        "content": "<p>Well, my toy example has the goal with the <code>f</code> expanded. Dang it.</p>",
        "id": 263947852,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638840055
    },
    {
        "content": "<p>Here's the real code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_sup</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_conv</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_conv</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">conv</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l &lt;= l' means l' ⊆ l</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">kent_convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">kent_conv</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">limit_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">kent_convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sup_conv</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">conv</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l ⊔ l' means l ∩ l'</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">kent_convergence_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">limit_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">conv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">pure_conv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">filter.map_pure</span><span class=\"o\">,</span> <span class=\"n\">pure_conv</span><span class=\"o\">],</span>\n  <span class=\"n\">le_conv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">map_mono</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_conv</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">induced_kent</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">kent_convergence_space</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">kent_convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">ind</span> <span class=\"o\">:=</span> <span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"k\">in</span> <span class=\"o\">{</span>\n  <span class=\"n\">kent_conv</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">delta</span> <span class=\"n\">conv</span> <span class=\"c1\">-- HAS NO EFFECT</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"n\">ind</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 263948098,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638840277
    },
    {
        "content": "<p>You also don't usually have to actually unfold, you can just know what the next step is (maybe <code>intro</code>) and do it.</p>",
        "id": 263948385,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638840576
    },
    {
        "content": "<p>In this case though you probably want something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">induced_def</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">convergence_space.conv</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">induced_kent</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">kent_convergence_space</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">kent_convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">ind</span> <span class=\"o\">:=</span> <span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"k\">in</span> <span class=\"o\">{</span>\n  <span class=\"n\">kent_conv</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">induced_def</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"n\">ind</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 263948680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638840865
    },
    {
        "content": "<p>This is where <code>class</code> is starting to make your life more difficult, and it would be more convenient to follow the pattern used by <code>topological_space</code></p>",
        "id": 263948807,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638840976
    },
    {
        "content": "<p>I tried the approach of <code>topological space</code>, but it produces other problems.</p>",
        "id": 263948965,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638841159
    },
    {
        "content": "<p>Thanks for the <code>induced_def</code> hint. That works.</p>",
        "id": 263949294,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638841492
    },
    {
        "content": "<p>Why are you using ascii art everywhere?!?</p>",
        "id": 263970518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638865674
    },
    {
        "content": "<p>(Patrick is referring to <code>∀</code> vs <code>forall</code>, → vs <code>-&gt;</code>, <code>λ</code> vs <code>fun</code>, ...)</p>",
        "id": 263971862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638866652
    },
    {
        "content": "<p>I'm trying to prove the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">convergence_space.inf_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">converges_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊓</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">converges_</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">converges_</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I need to unfold what p ⊓ q here means. I can't seem to unfold it to the definition that was given in the complete_lattice (convergence_space α) instance. Any tips?</p>",
        "id": 291495872,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659281024
    },
    {
        "content": "<p>Use <code>change</code>?</p>",
        "id": 291497244,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659282668
    },
    {
        "content": "<p>Or, define a <code>convergence_space.inf_eq</code> lemma.</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold_projs\">tactic#unfold_projs</a> might do something helpful as well.</p>",
        "id": 291497351,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659282803
    },
    {
        "content": "<p>If the exact definition of something gives you any extra properties that the basic API doesn't, you can make an <code>rfl</code> lemma to unfold it.</p>",
        "id": 291504258,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659291137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/unfolding.20definitions.20from.20type.20class/near/291497244\">said</a>:</p>\n<blockquote>\n<p>Use <code>change</code>?</p>\n</blockquote>\n<p>I can't use <code>change</code> since I don't know what the definition is to begin with. It's the one autogenerated from complete_lattice_of_Inf .</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/unfolding.20definitions.20from.20type.20class/near/291497351\">said</a>:</p>\n<blockquote>\n<p>Or, define a <code>convergence_space.inf_eq</code> lemma.<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold_projs\">tactic#unfold_projs</a> might do something helpful as well.</p>\n</blockquote>\n<p>inf_eq is basically what I'm trying to define. I tried <code>unfold_projs</code> but it doesn't unfold to the point where I can see what p ⊓ q means.</p>",
        "id": 291508634,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659296477
    },
    {
        "content": "<p>I can dig into the code of complete_lattice_of_Inf to see what it is doing, but I would like a way unfold the definition to tell me what it is doing.</p>",
        "id": 291508744,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659296640
    },
    {
        "content": "<p>Are you using VS Code? Have you already tried clicking on the term in the widgets view and navigate through the instances until you can see what it is?</p>",
        "id": 291508837,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659296757
    },
    {
        "content": "<p>Yes, I'm using VS Code. I clicked around, but I couldn't find anything useful.</p>",
        "id": 291508895,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659296810
    },
    {
        "content": "<p>So <code>p ⊓ q</code> is <code>Inf {p, q}</code> according to <code>complete_lattice_of_Inf</code> so I can use <code>change</code> here with that. It bugs me that I have to dig this out instead of getting it from doing an <code>unfold</code>. This can't be that hard, can it?</p>",
        "id": 291509567,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659297709
    },
    {
        "content": "<p>The approach used by mathlib is to write a rfl lemma for every data field of an instance</p>",
        "id": 291510144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659298473
    },
    {
        "content": "<p>Eg, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.inf_coe\">docs#submodule.inf_coe</a></p>",
        "id": 291510252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659298619
    },
    {
        "content": "<p>I didn't know that. I have seen <code>*_eq</code> lemmas here and there, but I didn't really see a pattern or why they existed. So basically you are saying that I have no choice but to dig into the code?</p>",
        "id": 291510339,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659298743
    },
    {
        "content": "<p>In your case though, it would probably be best to provide to provide <code>inf</code> manually rather than getting the default <code>Inf {x, y}</code> definition</p>",
        "id": 291510346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659298752
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.inf_coe\">docs#submodule.inf_coe</a> doesn't work.</p>",
        "id": 291510347,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659298752
    },
    {
        "content": "<p>I wasn't suggesting it would work; my point is that you should write a lemma that describes how everything was defined as soon as you define an instance</p>",
        "id": 291510409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659298808
    },
    {
        "content": "<blockquote>\n<p>In your case though, it would probably be best to provide to provide inf manually rather than getting the default Inf {x, y} definition</p>\n</blockquote>\n<p>I have done this in my master branch, but it requires proving stuff. In fact, in my master branch I define an instance of every single type class that makes up complete_lattice. But I want to avoid having to do all this work since I have to repeat this sort of thing for 4 more things in the convergence_space hierarchy.</p>",
        "id": 291510528,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659298960
    },
    {
        "content": "<blockquote>\n<p>you should write a lemma that describes how everything was defined as soon as you define an instance</p>\n</blockquote>\n<p>I can do this, but the unfolding problem remains.</p>",
        "id": 291510548,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659298997
    },
    {
        "content": "<p>If the proof is <code>rfl</code>, then you don't need to manually unfold anything</p>",
        "id": 291510560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659299020
    },
    {
        "content": "<p>I don't follow. How will I know that p ⊓ q is Inf {p, q} without digging into the code or unfolding?</p>",
        "id": 291510622,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659299069
    },
    {
        "content": "<p>If you don't know what the definition even ended up being, that's often a sign that you probably should define it differently</p>",
        "id": 291510738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659299208
    },
    {
        "content": "<p>You're right that it creates more work, but you'll have to do that anyway later to prove that <code>inf</code> does the right thing</p>",
        "id": 291510750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659299232
    },
    {
        "content": "<p>So you may as well just define it the right way to begin with</p>",
        "id": 291510755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659299248
    },
    {
        "content": "<p>Perhaps you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.complete_lattice\">docs#function.injective.complete_lattice</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice_of_Inf\">docs#complete_lattice_of_Inf</a></p>",
        "id": 291510803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659299301
    },
    {
        "content": "<p>I have already done this in my master branch as I mentioned. My takeaway here is that <code>unfold</code> just does not work in the way I expect.</p>",
        "id": 291510809,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659299316
    },
    {
        "content": "<p>Scrolling up, I notice that you never actually mention how you tried to use <code>unfold</code>; I assume <code>unfold has_inf.inf</code> didn't work?</p>",
        "id": 291512377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659301388
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? Note how your previous question in this thread was resolved quickly after you posted one.</p>",
        "id": 291514307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659304116
    },
    {
        "content": "<p>Here you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">converges_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">converges</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">convergence_space.inf_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">converges_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊓</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">converges_</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">converges_</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hconv</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">has_inf.inf</span> <span class=\"n\">at</span> <span class=\"n\">hconv</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291760346,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659470240
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dunfold</span> <span class=\"n\">has_inf.inf</span> <span class=\"n\">semilattice_inf.inf</span> <span class=\"n\">lattice.inf</span> <span class=\"n\">conditionally_complete_lattice.inf</span>\n      <span class=\"n\">complete_lattice.inf</span> <span class=\"n\">convergence_space.complete_lattice</span> <span class=\"n\">complete_lattice_of_Inf</span> <span class=\"n\">at</span> <span class=\"n\">hconv</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>works</p>",
        "id": 291767159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659473482
    },
    {
        "content": "<p>You needed to keep unfolding further</p>",
        "id": 291767173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659473490
    },
    {
        "content": "<p>I don't quite get why <code>unfold</code> can't make progress beyond <code>convergence_space.complete_lattice</code></p>",
        "id": 291767196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659473512
    },
    {
        "content": "<p>Ah, I didn't realize that I could unfold multiple definitions in one <code>unfold</code>. I was actually writing <code>unfold</code> multiple times and I stopped at complete_lattice.inf since I thought that was the last place since that is instance I defined that would have it.</p>",
        "id": 291918883,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659560142
    },
    {
        "content": "<p>Oh wait, you used <code>dunfold</code>. First time seeing that tactic.</p>",
        "id": 291918985,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659560196
    },
    {
        "content": "<p>If you hover over <code>complete_lattice.inf</code> in the infoview you'll see that it's <code>@complete_lattice.inf _ convergence_space.complete_lattice</code>, which is why I unfolded <code>convergence_space.complete_lattice</code> next</p>",
        "id": 291922121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659561795
    },
    {
        "content": "<p>I'm afraid I have no idea why <code>unfold convergence_space.complete_lattice</code> failed but <code>dunfold convergence_space.complete_lattice</code> worked</p>",
        "id": 291922139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659561808
    },
    {
        "content": "<p>Should I report it as a possible bug?</p>",
        "id": 292073107,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1659648991
    }
]