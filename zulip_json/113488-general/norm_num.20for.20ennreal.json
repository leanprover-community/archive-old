[
    {
        "content": "<p>Hi, would it be hard to make <code>norm_num</code> work for <code>ennreal</code>s? E.g., the following fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 227378287,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614051379
    },
    {
        "content": "<p>Method 1 requires a <code>linear_ordered_semiring</code>. (PS: why does <code>one_lt_bit1</code> need <code>nontrivial</code> and <code>linear_ordered_semiring</code>? One implies the other)</p>",
        "id": 227380581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614053961
    },
    {
        "content": "<p>Method 2 requires only <code>semiring</code> for the casting part, and <code>char_zero</code> for lifting not equal</p>",
        "id": 227380775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614054156
    },
    {
        "content": "<p>but it's not implemented for le and lt</p>",
        "id": 227380780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614054167
    },
    {
        "content": "<p>Do these theorems hold for ennreal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_one_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_one_bit0</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"c1\">-- deliberately strong hypothesis because bit1 0 is not a numeral</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_one_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_one_bit1</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_bit0_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit0_le_bit0.2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_bit0_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_bit0_bit1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_bit1_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_bit1_bit0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_bit1_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit1_le_bit1.2</span>\n</code></pre></div>",
        "id": 227380816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614054225
    },
    {
        "content": "<p>The constraints on <code>ordered_semiring</code> are too strict for <code>ennreal</code>, it requires <code>a &lt; b → 0 &lt; c → c * a &lt; c * b</code></p>",
        "id": 227381205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614054659
    },
    {
        "content": "<p>wikipedia also does not attest the lt-version of this theorem</p>",
        "id": 227381354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614054813
    },
    {
        "content": "<p>For <code>le</code> theorems the answer is \"yes\".</p>",
        "id": 227387026,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614060737
    },
    {
        "content": "<p>hm, that might be enough; the mutual recursion is mostly between <code>le</code> and <code>sle</code> (<code>a + 1 &lt;= b</code>) theorems</p>",
        "id": 227387649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614061454
    },
    {
        "content": "<p>But we need an algebraic class that captures this</p>",
        "id": 227387703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614061519
    },
    {
        "content": "<p>These are the lt theorems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lt_one_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">one_lt_two</span> <span class=\"o\">(</span><span class=\"n\">bit0_le_bit0.2</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_one_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">one_lt_bit1.2</span> <span class=\"n\">h</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_bit0_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit0_lt_bit0.2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_bit0_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">bit0_le_bit0.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_bit1_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">bit0_le_bit0.2</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_bit1_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit1_lt_bit1.2</span>\n</code></pre></div>\n<p>I think they are all true for ennreal as well</p>",
        "id": 227387775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614061571
    },
    {
        "content": "<p>That is, <code>bit0</code> is injective on ennreal, although that's definitely not true for all ordered semirings in the weak sense, for example saturating fin n does not have that property</p>",
        "id": 227387901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614061709
    },
    {
        "content": "<p>That said I really don't expect the generic norm_num method to work to prove things like <code>(1 : fin 15) &lt; (17 : fin 15)</code></p>",
        "id": 227387954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614061793
    },
    {
        "content": "<p>since it doesn't really have any concept of \"characteristic\", it thinks all numbers act the same in the target ring</p>",
        "id": 227388030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614061856
    },
    {
        "content": "<p>I'm not going to work on this right now, but I will say that norm_num is using the weakest available class that supports these theorems; if you refactor things so that there is a weaker class supporting these it should be a drop in replacement.</p>",
        "id": 227388465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614062354
    },
    {
        "content": "<p>Thank you for an explanation.</p>",
        "id": 227487691,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614107921
    },
    {
        "content": "<p>IIRC <code>linarith</code> doesn't work on random total orders. Is there a similar list of lemmas which have to be satisfied? One could go the other way and make a minimal <code>is_normnummable</code> class and then make instances as required. Could one do the same for <code>linarith</code>?</p>",
        "id": 227499823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614112873
    },
    {
        "content": "<p>Sure, <code>is_normnummable</code> would do just fine, although I hope that it boils down to less than the laundry list of lemmas above, so the class has some independent usefulness and it's not dead weight in the typeclass system.</p>",
        "id": 227506266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614115645
    },
    {
        "content": "<p>I think something like a linear order + ring + le versions of the ordered ring axioms + 0 &lt; 1 should suffice</p>",
        "id": 227506444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614115726
    },
    {
        "content": "<p>Ennreal isn't a ring, hopefully you mean semiring</p>",
        "id": 227508389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614116544
    },
    {
        "content": "<p><code>is_normnummable</code> won't get in the way of the rest of the typeclass system if we have no instances assuming <code>[is_normnummable</code>.</p>",
        "id": 227538778,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614133932
    },
    {
        "content": "<p>BTW, what does <code>norm_num</code> do with negation?</p>",
        "id": 227538800,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614133972
    },
    {
        "content": "<p>(ignore, we have no unary <code>-</code> on <code>(e)nnreal</code>)</p>",
        "id": 227538849,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614134022
    },
    {
        "content": "<p>But we have subtraction.</p>",
        "id": 227538910,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614134049
    },
    {
        "content": "<p><code>norm_num</code> works on naturals, right?</p>",
        "id": 227578013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614162801
    },
    {
        "content": "<p>There is a norm_num extension specifically for handling <code>nat.sub</code></p>",
        "id": 227586881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614167707
    },
    {
        "content": "<p>It pretty much has to be that way since the instance that provides <code>nat.sub</code> is not a special case of any existing typeclass other than <code>has_sub</code></p>",
        "id": 227586987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614167771
    }
]