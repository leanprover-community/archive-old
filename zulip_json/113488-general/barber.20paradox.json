[
    {
        "content": "<p>Can someone please help me with the barber paradox proof in lean?</p>",
        "id": 151478623,
        "sender_full_name": "Cameron Crossman",
        "timestamp": 1544560478
    },
    {
        "content": "<p>theorem barber_paradox : ¬ (∀ x : men, shaves barber x ↔ ¬ shaves x x)</p>",
        "id": 151478627,
        "sender_full_name": "Cameron Crossman",
        "timestamp": 1544560480
    },
    {
        "content": "<p>Do you have a specific question?</p>",
        "id": 151478769,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1544560645
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Logic.20.26.20Proof\" title=\"#narrow/stream/113488-general/topic/Logic.20.26.20Proof\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Logic.20.26.20Proof</a></p>",
        "id": 151479142,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544561041
    },
    {
        "content": "<blockquote>\n<p>theorem barber_paradox : ¬ (∀ x : men, shaves barber x ↔ ¬ shaves x x)</p>\n</blockquote>\n<p>See <code>barber_is_dead</code> (and a tactic mode proof above it) here: <a href=\"https://github.com/abhimanyupallavisudhir/lean/blob/master/logic_theorems.lean\" target=\"_blank\" title=\"https://github.com/abhimanyupallavisudhir/lean/blob/master/logic_theorems.lean\">https://github.com/abhimanyupallavisudhir/lean/blob/master/logic_theorems.lean</a></p>",
        "id": 151882895,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1544971888
    },
    {
        "content": "<p>Ha ha are you revising Cantor's theorem :-)</p>",
        "id": 151883459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544972872
    },
    {
        "content": "<p>I don't think you need to be classical for pants on fire. I had to prove this in cantor at the end</p>",
        "id": 151883587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544973041
    },
    {
        "content": "<p><code>example (P : Prop) (Q : Prop) : ¬ P → (P → Q) := by intros;contradiction</code> etc. Your instinct as a mathematician is to case split, but it's often not necessary. Not that this matters (at least not that it matters to us mathematicians...)</p>",
        "id": 151887219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544978930
    },
    {
        "content": "<p>I am enthusiastic because I have recently read Kevin Buzzard’s article: When will computers prove theorems? I really liked the comparison of LaTeX and Lean from the point of view of the progress of mathematics. Now I have already started to get acquainted with the language of Lean. I am working on an informatically-philosophically inspired manuscript in which I would like to put a Lean proof. I chose the Barber Paradox. Partly based on the conversations here, I have made a proof and would like to ask that is it correct?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n    <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span> <span class=\"k\">assume</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hbarbermpr</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"bp\">→</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">),</span>\n        <span class=\"k\">have</span> <span class=\"n\">hbarbermp</span>  <span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">),</span>\n        <span class=\"k\">have</span> <span class=\"n\">nsbb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n            <span class=\"k\">assume</span> <span class=\"n\">sbb</span> <span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n            <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hbarbermp</span> <span class=\"n\">sbb</span> <span class=\"n\">sbb</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nsbb</span> <span class=\"o\">(</span><span class=\"n\">hbarbermpr</span> <span class=\"n\">nsbb</span><span class=\"o\">)</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">NoSuchBarber</span>\n</code></pre></div>",
        "id": 206917550,
        "sender_full_name": "Norbert Bátfai",
        "timestamp": 1597402451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328937\">Norbert Bátfai</span> <a href=\"#narrow/stream/113488-general/topic/barber.20paradox/near/206917550\">said</a>:</p>\n<blockquote>\n<p>is it correct?</p>\n</blockquote>\n<p>The whole point of Lean is that you can ask Lean if it's correct. If there are no errors, then it's correct.</p>",
        "id": 206917734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597402621
    },
    {
        "content": "<p>(assuming you formalized the statement correctly)</p>",
        "id": 206917764,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597402655
    },
    {
        "content": "<p>Could save two lines in your manuscript with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hbarber</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"bp\">↔</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>and then use <code>hbarber.mpr</code> instead of <code>hbarbermpr</code> below</p>",
        "id": 206919734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597404470
    },
    {
        "content": "<p>well, you could save more than that :-)</p>",
        "id": 206919782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597404490
    },
    {
        "content": "<p>Oh, for sure :)</p>",
        "id": 206919792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597404506
    },
    {
        "content": "<p>I guess it comes down to context. If the purpose of the code snippet is to demonstrate Lean to a lay audience, then having all the intermediate steps spelled out can be helpful. But someone writing for mathlib – whose audience is experienced Lean programmers – would use a much terser style.</p>",
        "id": 206923332,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597407672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n    <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span> <span class=\"k\">assume</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- I don&#39;t want two hypotheses called h</span>\n        <span class=\"k\">have</span> <span class=\"n\">hbarber</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">barber</span><span class=\"o\">,</span> <span class=\"c1\">-- human-generated good idea</span>\n        <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"c1\">-- computer can finish it off</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206923480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597407773
    },
    {
        "content": "<p>but of course this teaches you far less :-)</p>",
        "id": 206923529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597407826
    },
    {
        "content": "<p>Thanks, so the proof is really nicer:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n    <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span> <span class=\"k\">assume</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hbarber</span> <span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">nsbb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n            <span class=\"k\">assume</span> <span class=\"n\">sbb</span> <span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n            <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hbarber</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">sbb</span> <span class=\"n\">sbb</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nsbb</span> <span class=\"o\">(</span><span class=\"n\">hbarber</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">nsbb</span><span class=\"o\">)</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">NoSuchBarber</span>\n</code></pre></div>",
        "id": 206923540,
        "sender_full_name": "Norbert Bátfai",
        "timestamp": 1597407837
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">not_iff_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 206923942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597408145
    },
    {
        "content": "<p>That's the mathlib proof</p>",
        "id": 206923951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597408156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/barber.20paradox/near/206923480\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n    <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span> <span class=\"k\">assume</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- I don&#39;t want two hypotheses called h</span>\n        <span class=\"k\">have</span> <span class=\"n\">hbarber</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">barber</span><span class=\"o\">,</span> <span class=\"c1\">-- human-generated good idea</span>\n        <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"c1\">-- computer can finish it off</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Thanks, your tactical proof is amazing. I am a newbie, but for me, it shows very well the power of the interactive nature of Lean.</p>",
        "id": 206924171,
        "sender_full_name": "Norbert Bátfai",
        "timestamp": 1597408301
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">barber</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hbarber</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Here's a proof discovered by a computer after the good idea is input.</p>",
        "id": 206924181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597408315
    },
    {
        "content": "<p>I cannot get the computer to have the good idea itself :-(</p>",
        "id": 206924277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597408357
    },
    {
        "content": "<p>Going the manual way:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"n\">barber</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hbarber</span> <span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">nsbb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">sbb</span><span class=\"o\">,</span> <span class=\"n\">hbarber</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">sbb</span> <span class=\"n\">sbb</span><span class=\"o\">,</span>\n    <span class=\"n\">nsbb</span> <span class=\"o\">(</span><span class=\"n\">hbarber</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">nsbb</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">NoSuchBarber</span>\n</code></pre></div>",
        "id": 206924338,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1597408428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> a bit unfortunate that <code>tauto</code> (without the <code>!</code>) doesn't work, since the manual proof seems to be constructive <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 206924429,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597408473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328937\">@Norbert Bátfai</span> here's your code minimally modified to follow the spacing conventions (indent with 2 spaces, no space after opening bracket and before closing bracket, don't start a line with a punctuation except brackets), and also to remove the use of tactic mode (your proof does not actually need tactic mode):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"err\">$</span>\n  <span class=\"k\">assume</span> <span class=\"n\">barber</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hbarbermpr</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"bp\">→</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hbarbermp</span>  <span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">nsbb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"k\">assume</span> <span class=\"n\">sbb</span> <span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hbarbermp</span> <span class=\"n\">sbb</span> <span class=\"n\">sbb</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nsbb</span> <span class=\"o\">(</span><span class=\"n\">hbarbermpr</span> <span class=\"n\">nsbb</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206925527,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597409330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/113488-general/topic/barber.20paradox/near/206923332\">said</a>:</p>\n<blockquote>\n<p>I guess it comes down to context. If the purpose of the code snippet is to demonstrate Lean to a lay audience, then having all the intermediate steps spelled out can be helpful. But someone writing for mathlib – whose audience is experienced Lean programmers – would use a much terser style.</p>\n</blockquote>\n<p>I am interested in the case of \"lay audience\". Because I am looking for the opportunity to desing a First Ordel Logic-based game. My idea is for players to formalize their relationships and everyday activities. Until recently I have been thinking about a combination of FOL and Prolog, but now I really liked the Lean.</p>",
        "id": 206925937,
        "sender_full_name": "Norbert Bátfai",
        "timestamp": 1597409661
    },
    {
        "content": "<p>Sounds great! I assume you've heard of the Natural Number Game? Perhaps you can reuse the infrastructure for that.</p>",
        "id": 206926666,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597410199
    },
    {
        "content": "<p>Thanks, and yes, I have played with it. From the point of view of education, it is a great gamification app for mathematical logic and especially the Lean. But I think, from the point of view of gaming, it seems like learning math rather than gaming. Unfortunately, I don’t have such a good idea of how to make a new League of legends or CS:GO on a logical basis either :) I am thinking of a simple secret diary written in a visual or math language where additional knowledge can be generated from the knowledge entered. Now that I have met the Lean, I am thinking about organizing a game around this ITP. I don’t have a specific idea for a rapid prototype for experimenting game-experience, but I am looking at pages that You mentioned, for example <a href=\"https://github.com/mpedramfar/Lean-game-maker\">https://github.com/mpedramfar/Lean-game-maker</a> or <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game\">https://github.com/ImperialCollegeLondon/natural_number_game</a></p>",
        "id": 206931212,
        "sender_full_name": "Norbert Bátfai",
        "timestamp": 1597413164
    },
    {
        "content": "<p>Thanks for your pieces of advice. They are merged with Eric Wieser's modification:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"err\">$</span>\n  <span class=\"k\">assume</span> <span class=\"n\">barber</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hbarber</span> <span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">nsbb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"k\">assume</span> <span class=\"n\">sbb</span> <span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hbarber</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">sbb</span> <span class=\"n\">sbb</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nsbb</span> <span class=\"o\">(</span><span class=\"n\">hbarber</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">nsbb</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I was using tactical mode mainly because in this mode I was able to trace the operation of Lean well.</p>",
        "id": 206932691,
        "sender_full_name": "Norbert Bátfai",
        "timestamp": 1597414051
    },
    {
        "content": "<p>I remember hearing that the proof state was now traceable in term mode, but I didn't find that to be the case on the online lean compiler. Did I imagine it? Is that feature restricted to vs-code?</p>",
        "id": 206933789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597414690
    },
    {
        "content": "<p>you just need to know the undocumented underscore trick</p>",
        "id": 206933916,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597414785
    },
    {
        "content": "<p>the only reason tactic mode is more popular is because NNG popularized tactic-mode Lean</p>",
        "id": 206933979,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597414805
    },
    {
        "content": "<p>but term mode is as easy to use as tactic mode</p>",
        "id": 206933996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597414811
    },
    {
        "content": "<p>at least for me</p>",
        "id": 206934012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597414823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/barber.20paradox/near/206933979\">said</a>:</p>\n<blockquote>\n<p>the only reason tactic mode is more popular is because NNG popularized tactic-mode Lean</p>\n</blockquote>\n<p>Mwahh, tactic mode was popular before NNG existed</p>",
        "id": 206934081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597414877
    },
    {
        "content": "<p>I think Eric is talking about inspecting the proof state of a term-mode proof after it has been written. This feature was added 2  months ago (or somewhere around then).</p>",
        "id": 206934176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597414932
    },
    {
        "content": "<p>I have no idea if it is supposed to work in the web editor.</p>",
        "id": 206934191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597414943
    },
    {
        "content": "<p>I think it greatly improved the readability of term-mode proofs.</p>",
        "id": 206934222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597414971
    },
    {
        "content": "<p>The community web editor should be on the same version of Lean as mathlib <code>master</code>. Can you show an example?</p>",
        "id": 206934252,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597415009
    },
    {
        "content": "<p>My example is the proofs above. I can't seem to stick my cursor anywhere to get something useful</p>",
        "id": 206935005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597415460
    },
    {
        "content": "<p>Relatedly, I'm finding that <code>import data.subtype</code> works locally but fails on the web editor - is the web editor mathlib-less?</p>",
        "id": 206935065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597415500
    },
    {
        "content": "<p>Are you using the community web editor? <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=theorem%20NoSuchBarber%20%28Man%20%3A%20Type%29%20%28shaves%20%3A%20Man%20%E2%86%92%20Man%20%E2%86%92%20Prop%29%0A%20%20%28h%20%3A%20%E2%88%83%20x%20%3A%20Man%2C%20%E2%88%80%20y%20%3A%20Man%2C%20shaves%20x%20y%20%E2%86%94%20%C2%ACshaves%20y%20y%29%20%3A%0A%20%20false%20%3A%3D%0Aexists.elim%20h%20%24%0A%20%20assume%20barber%20%3A%20Man%2C%0A%20%20assume%20h%20%3A%20%E2%88%80%20y%20%3A%20Man%2C%20shaves%20barber%20y%20%E2%86%94%20%C2%ACshaves%20y%20y%2C%0A%20%20%20%20have%20hbarber%20%3A%20shaves%20barber%20barber%20%E2%86%94%20%C2%ACshaves%20barber%20barber%2C%0A%20%20%20%20%20%20from%20h%20barber%2C%0A%20%20%20%20have%20nsbb%20%3A%20%C2%ACshaves%20barber%20barber%2C%20from%0A%20%20%20%20%20%20assume%20sbb%20%3A%20shaves%20barber%20barber%2C%0A%20%20%20%20%20%20show%20false%2C%20from%20hbarber.mp%20sbb%20sbb%2C%0A%20%20%20%20show%20false%2C%20from%20nsbb%20%28hbarber.mpr%20nsbb%29%0A\">Here's the link to the barber paradox</a>.</p>\n<p>I do see the types as I move my cursor around: <a href=\"/user_uploads/3121/GNyoxeDqiKOnNOgr04EpjLwx/Screen-Shot-2020-08-14-at-10.32.03-AM.png\">Screen-Shot-2020-08-14-at-10.32.03-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GNyoxeDqiKOnNOgr04EpjLwx/Screen-Shot-2020-08-14-at-10.32.03-AM.png\" title=\"Screen-Shot-2020-08-14-at-10.32.03-AM.png\"><img src=\"/user_uploads/3121/GNyoxeDqiKOnNOgr04EpjLwx/Screen-Shot-2020-08-14-at-10.32.03-AM.png\"></a></div>",
        "id": 206935232,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597415587
    },
    {
        "content": "<p>Nope, I was using the other one...</p>",
        "id": 206935990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597416034
    },
    {
        "content": "<p>I strongly believe that the proof should be as readable as the same proof in natural language:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Man</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"n\">Man</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">NoSuchBarber</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">barber</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Man</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- from the existence of such a barber,</span>\n  <span class=\"c1\">-- we obtain a barber and the associated hypothesis</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">barber</span><span class=\"o\">,</span> <span class=\"n\">barber_shaves_only_who_doesnt_self_shave</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- apply the associated hypothesis to the barber (as a customer)</span>\n  <span class=\"k\">have</span> <span class=\"n\">self_shaving_dilemma</span> <span class=\"o\">:=</span> <span class=\"n\">barber_shaves_only_who_doesnt_self_shave</span> <span class=\"n\">barber</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- apply `(a ↔ ¬a) → false` to `shaves barber barber` as `a`</span>\n  <span class=\"k\">have</span> <span class=\"n\">dilemma_implies_false</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">iff_not_self</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- apply the theorem &quot;dilemma implies false&quot; to the fact that</span>\n  <span class=\"c1\">-- we have proven the self-shaving dilemma</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dilemma_implies_false</span> <span class=\"n\">self_shaving_dilemma</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206937100,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597416761
    },
    {
        "content": "<p>There have been several interesting advances recently on making simple games with graphical interfaces in lean (using the Widgets setup), like rubiks cube <a href=\"https://github.com/kendfrey/rubiks-cube-group\">https://github.com/kendfrey/rubiks-cube-group</a> and sudoku <a href=\"https://github.com/TwoFX/sudoku\">https://github.com/TwoFX/sudoku</a></p>",
        "id": 206945322,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597420904
    },
    {
        "content": "<p>Do you have a screenshot/example file for the Rubik's cube?</p>",
        "id": 206950795,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597423830
    },
    {
        "content": "<p>Some screenshots here <a href=\"https://twitter.com/XenaProject/status/1289450598530654208?s=20\">https://twitter.com/XenaProject/status/1289450598530654208?s=20</a> . I don't think the code is public yet.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/XenaProject/status/1289450598530654208?s=20\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1263810297560735744/gMianQ_V_normal.jpg\"></a><p>Ooh <a href=\"https://t.co/c3kEB5JF1v\">https://twitter.com/XenaProject/status/1289450598530654208/photo/1</a></p><span>- The Xena Project (@XenaProject)</span><div class=\"twitter-image\"><a href=\"https://t.co/c3kEB5JF1v\"><img src=\"https://pbs.twimg.com/media/EeUMfDEXkAgJzIc.png:medium\"></a></div></div></div>",
        "id": 206951067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597423961
    },
    {
        "content": "<p>Oh -- <a href=\"https://github.com/kendfrey/rubiks-cube-group\">https://github.com/kendfrey/rubiks-cube-group</a></p>",
        "id": 206951179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597424025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"322237\">@Kendall Frey</span> how does it work?</p>",
        "id": 206951652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597424229
    },
    {
        "content": "<p>he tells me that you can put stuff like <code>#html (R2 L2 U2 D2 F2 B2).to_html</code> at the bottom of <code>src/rubiks_cube.lean</code> to get stuff like <a href=\"/user_uploads/3121/Y7Vb1ScKuWsw2fpCqyezCE2y/cube.png\">cube.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Y7Vb1ScKuWsw2fpCqyezCE2y/cube.png\" title=\"cube.png\"><img src=\"/user_uploads/3121/Y7Vb1ScKuWsw2fpCqyezCE2y/cube.png\"></a></div>",
        "id": 206952457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597424628
    },
    {
        "content": "<p>Yes, it's not an interactive game though. It renders a cube state as a human-readable picture, as a fancier form of <code>has_repr</code></p>",
        "id": 206952755,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1597424778
    },
    {
        "content": "<p>one person's repo which renders a cube state as a human-readable picture is another person's game</p>",
        "id": 206953566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597425239
    },
    {
        "content": "<p>Can <code>to_html</code> emit JavaScript with a webgl 3d canvas?</p>",
        "id": 206968345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597433442
    },
    {
        "content": "<p>HTML widgets don't support JS as far as I know.</p>",
        "id": 206997663,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1597453187
    },
    {
        "content": "<p>Surely that's an artificial restriction, as the VS Code extension itself is written in JavaScript.</p>",
        "id": 207000405,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597457353
    },
    {
        "content": "<p>there are security concerns, of course...</p>",
        "id": 207000659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597457780
    },
    {
        "content": "<p>Of course! A less (?) dangerous solution would be to define custom elements on the VS Code side, and have the Lean use those.</p>",
        "id": 207000844,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597458092
    },
    {
        "content": "<p>however from what I can tell vscode-lean has disabled all the security restrictions, so it's probably just a lack of implementation in the widget impl</p>",
        "id": 207000849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597458117
    },
    {
        "content": "<p>I think also since tactics can run arbitrary code already, the only situation where that makes a difference is when using a remote editor, as in that case the compiler and editor are running in separate contexts</p>",
        "id": 207003777,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597463700
    },
    {
        "content": "<p>I tried to describe my thoughts: <a href=\"https://arxiv.org/abs/2009.09068\">https://arxiv.org/abs/2009.09068</a></p>",
        "id": 210832959,
        "sender_full_name": "Norbert Bátfai",
        "timestamp": 1600757167
    },
    {
        "content": "<p>wrt the 3D stuff; right now with widgets you can only output an html DOM object for the infoview to render, so you can do svg and CSS transformations and even CSS animations, but no arbitrary javascript yet.</p>",
        "id": 216505189,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1605204246
    }
]