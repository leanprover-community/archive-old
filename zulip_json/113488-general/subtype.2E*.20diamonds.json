[
    {
        "content": "<p>With current definitions Lean fails to unify <code>group.to_monoid subtype.group</code> with <code>subtype.monoid group.to_monoid</code>. This diff makes it work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/src/group_theory/subgroup.lean b/src/group_theory/subgroup.lean</span>\n<span class=\"gh\">index d54cd8eba..ac0b1dbcb 100644</span>\n<span class=\"gd\">--- a/src/group_theory/subgroup.lean</span>\n<span class=\"gi\">+++ b/src/group_theory/subgroup.lean</span>\n<span class=\"gu\">@@ -50,11 +50,13 @@ theorem multiplicative.is_subgroup_iff</span>\n\n @[to_additive add_group]\n instance subtype.group {s : set α} [is_subgroup s] : group s :=\n<span class=\"gd\">-by subtype_instance</span>\n<span class=\"gi\">+{ inv := λ x, ⟨(x:α)⁻¹, is_subgroup.inv_mem x.2⟩,</span>\n<span class=\"gi\">+  mul_left_inv := λ x, subtype.eq $ mul_left_inv x.1,</span>\n<span class=\"gi\">+  .. subtype.monoid }</span>\n\n @[to_additive add_comm_group]\n instance subtype.comm_group {α : Type*} [comm_group α] {s : set α} [is_subgroup s] : comm_group s :=\n<span class=\"gd\">-by subtype_instance</span>\n<span class=\"gi\">+{ .. subtype.group, .. subtype.comm_monoid }</span>\n\n @[simp, to_additive]\n lemma is_subgroup.coe_inv {s : set α} [is_subgroup s] (a : s) : ((a⁻¹ : s) : α) = a⁻¹ := rfl\n<span class=\"gh\">diff --git a/src/group_theory/submonoid.lean b/src/group_theory/submonoid.lean</span>\n<span class=\"gh\">index e9fa5895e..c644e06d9 100644</span>\n<span class=\"gd\">--- a/src/group_theory/submonoid.lean</span>\n<span class=\"gi\">+++ b/src/group_theory/submonoid.lean</span>\n<span class=\"gu\">@@ -221,12 +221,17 @@ end is_submonoid</span>\n /-- Submonoids are themselves monoids. -/\n @[to_additive add_monoid &quot;An `add_submonoid` is itself an `add_monoid`.&quot;]\n instance subtype.monoid {s : set α} [is_submonoid s] : monoid s :=\n<span class=\"gd\">-by subtype_instance</span>\n<span class=\"gi\">+{ one := ⟨1, is_submonoid.one_mem s⟩,</span>\n<span class=\"gi\">+  mul := λ x y, ⟨x * y, is_submonoid.mul_mem x.2 y.2⟩,</span>\n<span class=\"gi\">+  mul_one := λ x, subtype.eq $ mul_one x.1,</span>\n<span class=\"gi\">+  one_mul := λ x, subtype.eq $ one_mul x.1,</span>\n<span class=\"gi\">+  mul_assoc := λ x y z, subtype.eq $ mul_assoc x.1 y.1 z.1 }</span>\n\n /-- Submonoids of commutative monoids are themselves commutative monoids. -/\n @[to_additive add_comm_monoid &quot;An `add_submonoid` of a commutative `add_monoid` is itself a commutative `add_monoid`. &quot;]\n instance subtype.comm_monoid {α} [comm_monoid α] {s : set α} [is_submonoid s] : comm_monoid s :=\n<span class=\"gd\">-by subtype_instance</span>\n<span class=\"gi\">+{ mul_comm := λ x y, subtype.eq $ mul_comm x.1 y.1,</span>\n<span class=\"gi\">+  .. subtype.monoid }</span>\n\n /-- Submonoids inherit the 1 of the monoid. -/\n @[simp, to_additive &quot;An `add_submonoid` inherits the 0 of the `add_monoid`. &quot;]\n</pre></div>\n\n\n<p>However I understand that a proper fix should modify the <code>subtype_instance</code> tactic, and I fail to understand how it works.</p>",
        "id": 188081582,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581575030
    },
    {
        "content": "<p>Motivated by <a href=\"#narrow/stream/113489-new-members/topic/action.20of.20subgroup.20inference.20issues\" title=\"#narrow/stream/113489-new-members/topic/action.20of.20subgroup.20inference.20issues\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/action.20of.20subgroup.20inference.20issues</a></p>",
        "id": 188081656,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581575132
    },
    {
        "content": "<p>Header says that <code>subtype_instance</code> was written by <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> . Simon, could you please explain how it works (or even better fix it)?</p>",
        "id": 188083200,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581577487
    },
    {
        "content": "<p>E.g., I see that <code>subtype.monoid</code> has some rewrite on a <code>rfl</code> in the definition of <code>one</code> and I can't understand where it comes from.</p>",
        "id": 188083227,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581577541
    },
    {
        "content": "<p>I don't know that there's a simple solution to make those instances commute. You maybe have to prove that they are equal</p>",
        "id": 188083576,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1581578124
    },
    {
        "content": "<p>But Yury gave a diff that makes them defeq, right?</p>",
        "id": 188083701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581578364
    },
    {
        "content": "<p>The following code works with definition from the diff:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">group_action</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">subset_has_scalar</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">s</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">submonoid_mul_action</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_submonoid</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">s</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">mul_smul</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">orbit_rel</span> <span class=\"n\">s</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 188084128,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581579115
    },
    {
        "content": "<p>It fails with current definitions, and proving equality wouldn't help.</p>",
        "id": 188084194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581579176
    },
    {
        "content": "<p>Sorry, it's not straightforward and I won't have time to look into it in the near future</p>",
        "id": 188084395,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1581579491
    },
    {
        "content": "<p>You may have to go with your version until someone can adapt the tactics</p>",
        "id": 188084402,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1581579527
    },
    {
        "content": "<p>OK.</p>",
        "id": 188084408,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581579537
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1981\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1981\">#1981</a></p>",
        "id": 188085827,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581581451
    }
]