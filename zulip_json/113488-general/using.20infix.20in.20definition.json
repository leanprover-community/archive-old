[
    {
        "content": "<p>I remember that in Lean 2 we could use <code>infix</code> inside a definition, referring  to the thing being defined.<br>\nIs this implemented in the latest master branch?</p>",
        "id": 124004353,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1521628069
    },
    {
        "content": "<p>I don't think there is anything like that</p>",
        "id": 124004476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521628238
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive sub : env → type → type → Prop\n  notation e ` ⊢ `:40 a ` &lt;: `:40 b:40 := sub e a b\n| ...\n</pre></div>",
        "id": 124004526,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521628344
    },
    {
        "content": "<p>The only change is the removal of <code>:=</code> after the type</p>",
        "id": 124004527,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521628374
    },
    {
        "content": "<p>Worked for me! Thanks Sebastian and Mario.</p>",
        "id": 124004632,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1521628570
    },
    {
        "content": "<p>Wait, does that work for <code>def</code> as well? I thought it only worked in <code>inductive</code> and <code>structure</code></p>",
        "id": 124004639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521628611
    },
    {
        "content": "<p>My bad, I should have said <code>inductive</code> definitions</p>",
        "id": 124004662,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1521628681
    }
]