[
    {
        "content": "<p>Is it possible to teach lean to match on mathlib's pnat?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"c1\">-- invalid function application in pattern, it cannot be reduced to a constructor (possible solution</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273902613,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1646267627
    },
    {
        "content": "<p>Are there any advantages of defining pnat using subtype instead of something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">pnat'</span> <span class=\"bp\">|</span> <span class=\"n\">pnat_succ</span> <span class=\"o\">(</span><span class=\"n\">nat_pred</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">pnat'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"c1\">-- OK</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pnat'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273902766,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1646267718
    },
    {
        "content": "<p>You can still pattern match, for example like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(there may be some other spelling for the <code>false.elim</code> case, but you get the point...)</p>",
        "id": 273903630,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1646268229
    },
    {
        "content": "<p>Or you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat.rec_on\">docs#pnat.rec_on</a> directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">pnat.rec_on</span> <span class=\"n\">a</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273903930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1646268421
    },
    {
        "content": "<p>I guess you don't even have to fill in the <code>\\&lt;0,h\\&gt;</code> branch</p>",
        "id": 273938140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646295968
    }
]