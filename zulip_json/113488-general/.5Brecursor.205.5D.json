[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/c8ae79d0f51c98dbddd97d2cdadb4110cfa97b21/src/data/mv_polynomial.lean#L91\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/c8ae79d0f51c98dbddd97d2cdadb4110cfa97b21/src/data/mv_polynomial.lean#L91\">What does [recursor 5] mean?</a></p>",
        "id": 185965478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579301352
    },
    {
        "content": "<p>It means that this should be treated like a recursion principle, and the major premise is the 5th argument (<code>p</code>)</p>",
        "id": 185973089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579310118
    },
    {
        "content": "<p>I'm honestly not sure if it is still needed anymore</p>",
        "id": 185973090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579310131
    },
    {
        "content": "<p>In Lean 2 this attribute allowed you to then write <code>induction p using mv_polynomial.induction_on</code> in later proofs. Not sure if it works the same in Lean 3.</p>",
        "id": 186120747,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1579541612
    },
    {
        "content": "<p>Oh! Maybe this is why I have always had problems with this form...</p>",
        "id": 186129701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579550704
    },
    {
        "content": "<p>Following on from this question, if one wanted this recursor on mv_polynomials:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">u</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">p</span>\n</pre></div>\n\n\n<p>then should it be tagged <code>[recursor 5]</code> as well, or just <code>@[elab_as_eliminator]</code>?</p>",
        "id": 192281747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585586076
    }
]