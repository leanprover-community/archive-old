[
    {
        "content": "<p>Hello,  I have a problem <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n<p>Do you have an idea ? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">X</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"c1\">-- I don&#39;t understand why i&#39;m always dealing with this kind of thing ???</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196076366,
        "sender_full_name": "orlando",
        "timestamp": 1588464817
    },
    {
        "content": "<p>Is there something like fintype.card_univ?</p>",
        "id": 196076479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588465010
    },
    {
        "content": "<ol>\n<li>Open <code>fintype/basic</code></li>\n<li>Search for <code>card</code>.</li>\n</ol>",
        "id": 196076645,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588465367
    },
    {
        "content": "<p><code>fintype.card_congr $ equiv.set.univ X</code></p>",
        "id": 196076677,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588465421
    },
    {
        "content": "<p>Would a hammer have found this?</p>",
        "id": 196076718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588465448
    },
    {
        "content": "<p>I found the second part by <code>library_search</code></p>",
        "id": 196076720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588465479
    },
    {
        "content": "<p>Good question though.</p>",
        "id": 196076726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588465503
    },
    {
        "content": "<p>After a while you learn how to use a type and you pick up sufficiently many tricks that you can solve problems like this yourself. I think I can solve most trivial-to-mathematician questions about <code>nat</code>in Lean now.</p>",
        "id": 196076900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588465851
    },
    {
        "content": "<p>thx <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  ! <br>\nIt's ok ! But  I have a problem, i think, in my calculus,  <code> card </code> is calculate in a ring <code> R </code> and not in <code> nat </code> ...  or i don't know that strange <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Rt</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"err\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"err\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span>    <span class=\"c1\">--- not the same ↑  and i don&#39;t understand for the moment !</span>\n</code></pre></div>\n\n\n<p>I try to isolate the problem  tomorow !</p>",
        "id": 196078458,
        "sender_full_name": "orlando",
        "timestamp": 1588468614
    },
    {
        "content": "<p>One of these should work:</p>\n<ol>\n<li><code>rw [fintype.card_congr (equiv.set.univ α)]</code>.</li>\n<li><code>congr</code>, then <code>exact fintype.card_congr (equiv.set.univ α)</code>.</li>\n</ol>",
        "id": 196078633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588468959
    },
    {
        "content": "<p>(I think that both should work but didn't test)</p>",
        "id": 196078636,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588468977
    },
    {
        "content": "<p>good : i don't understand why  but <code> apply fintype.card_congr, exact equiv.set.univ G, </code> work  the other proposition doesn't work in my context ! </p>\n<p>thx <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  ... i can sleep now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 196080561,
        "sender_full_name": "orlando",
        "timestamp": 1588472687
    }
]