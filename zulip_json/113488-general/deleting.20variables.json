[
    {
        "content": "<p>Is it possible to delete something that has been declared using <code>variables</code>? (I want to \"upgrade\" an instance variable to a class which extends the original one.)</p>",
        "id": 127485299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527990256
    },
    {
        "content": "<p>no</p>",
        "id": 127485300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527990279
    },
    {
        "content": "<p>Can you show me concretely what you're going for?</p>",
        "id": 127485309,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527990330
    },
    {
        "content": "<p>My actual example involves my own classes, but something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> other definitions that don&#39;t require the group structure... -/</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127485402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527990562
    },
    {
        "content": "<p>I can just put the earlier definitions in their own section which has the <code>monoid</code> variable</p>",
        "id": 127485439,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527990603
    },
    {
        "content": "<p>but I was hoping for something more convenient</p>",
        "id": 127485452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527990614
    },
    {
        "content": "<p>Ah I see! Your best bet I think is to end your section and start it just before the <code>group</code> variable</p>",
        "id": 127485457,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527990627
    },
    {
        "content": "<p>What is the inconvenient in doing that?</p>",
        "id": 127485460,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527990650
    },
    {
        "content": "<p>Not really very inconvenient, just a few extra lines of <code>section</code>/<code>end</code></p>",
        "id": 127485469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527990705
    },
    {
        "content": "<p>One downside I can see is if you have other variables declared in the first section that you want to keep in the rest of the section</p>",
        "id": 127485519,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527990822
    },
    {
        "content": "<p>In that case, I would do this:</p>\n<div class=\"codehilite\"><pre><span></span>section\nvariables {α : Type}\nsection\nvariables [monoid α]\n\n/- other definitions that don&#39;t require the group structure... -/\nend\nvariables [group α]\nend\n</pre></div>",
        "id": 127485562,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527990882
    },
    {
        "content": "<p>Actually, if you don't do anything, what error do you get?</p>",
        "id": 127485613,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527990979
    },
    {
        "content": "<p>There I got an error which arose because <code>*</code> was using the monoid instance and <code>\\-1</code> was using the group instance</p>",
        "id": 127485719,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527991222
    },
    {
        "content": "<p>Ah, ok, I thought maybe it would go through the group by default</p>",
        "id": 127485732,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527991272
    },
    {
        "content": "<p>well it's still a problem to have redundant typeclasses on a def</p>",
        "id": 127485734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527991304
    },
    {
        "content": "<p>Why?</p>",
        "id": 127485815,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527991444
    },
    {
        "content": "<p>in the theorem itself, it's a problem since they aren't the same structure, in uses it's a nuisance to have a redundant assumption</p>",
        "id": 127485832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527991533
    },
    {
        "content": "<p>Right in theorems I know the issues. With defs, I can't see it will be a nuisance down the line but not how that definition would be invalid</p>",
        "id": 127485882,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527991655
    },
    {
        "content": "<p>It won't be invalid. Often things like duplicate typeclass hypotheses will go unnoticed for a long time because they aren't really visibly different</p>",
        "id": 127486403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527992849
    },
    {
        "content": "<p>unless you use <code>@thm</code> and notice two underscores in place of one</p>",
        "id": 127486404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527992872
    },
    {
        "content": "<p>It would be nice to have warnings for that kind of stuff. Actually, more warnings in general would be nice</p>",
        "id": 127486500,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527993012
    }
]