[
    {
        "content": "<p>Why does this work with a general <code>ι</code>, but fail with <code>fin 2</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n\n<span class=\"sd\">/-- A value which wraps a type. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">typeinfo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">typeinfo</span>\n\n<span class=\"sd\">/-- Get the type of the domain of a function type. -/</span>\n<span class=\"kd\">abbreviation</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">typeinfo.domain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">typeinfo</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"sd\">/-- Get the type of the codomain of a function type. -/</span>\n<span class=\"kd\">abbreviation</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">typeinfo.codomain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">typeinfo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n\n<span class=\"sd\">/-- Get the type of the codomain of a dependent function type. -/</span>\n<span class=\"kd\">abbreviation</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">typeinfo.pi_codomain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">typeinfo</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">typeinfo</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">typeinfo.of</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">typeinfo.domain</span> <span class=\"o\">(</span><span class=\"n\">typeinfo.of</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">typeinfo</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">typeinfo.of</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">typeinfo.domain</span> <span class=\"o\">(</span><span class=\"n\">typeinfo.of</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">))</span>  <span class=\"c1\">-- fail, everything else works</span>\n</code></pre></div>",
        "id": 225813409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612950402
    },
    {
        "content": "<p>The <code>: _</code> trick works <code>#check typeinfo.domain (typeinfo.of (fin 2 → M') : _)</code>. Not sure if that's helpful really though.</p>",
        "id": 225817762,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1612953282
    },
    {
        "content": "<p>Unfortunately adding <code>: _</code> in my larger context of using this for notation in <a href=\"https://github.com/leanprover-community/mathlib/issues/6152\">#6152</a> makes it ineligible for pretty-printing</p>",
        "id": 225818148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612953588
    },
    {
        "content": "<p>But it does fix the problem</p>",
        "id": 225819560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612954603
    },
    {
        "content": "<p><code>attribute [elab_simple] typeinfo.of</code> fixes it!</p>",
        "id": 225819761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612954738
    }
]