[
    {
        "content": "<p>Which tags have to be added to <code>T.len</code> and <code>T.push</code> such that the example proof works without <code>simp_rw [T.len]</code>? In other words, how to introduce a definition that can be automatically unfolded by rw?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible, inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">T.len</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">t.s.length</span>\n\n<span class=\"kd\">@[reducible, inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">T.push</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">t.s</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">length_push</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.length_append</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">t.len</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">t.push</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">len</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- simp_rw [T.len],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">length_push</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_add_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277938173,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649190047
    },
    {
        "content": "<p>Does <code>abbreviation</code> work?</p>",
        "id": 277939614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649190863
    },
    {
        "content": "<p>No. With abbreviations, we still have to <code>change list.length _ &lt; list.length _</code> before rw.</p>",
        "id": 277939879,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649191023
    },
    {
        "content": "<p><code>abbreviation</code> doesn't generate equation lemmas</p>",
        "id": 277940546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649191348
    }
]