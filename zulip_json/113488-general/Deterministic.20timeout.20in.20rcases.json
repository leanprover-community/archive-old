[
    {
        "content": "<p>I'm having trouble with this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_mul_cos_cases</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real.cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real.cos</span> <span class=\"o\">(</span><span class=\"n\">real.pi</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">int.fract</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">two_mul_cos_cases</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The example times out. Changing the conclusion to something simpler makes it much faster. Changing <code>simp only</code> by <code>rw</code> or <code>fin_cases</code> still leads to the timeout.</p>",
        "id": 291515982,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659306533
    },
    {
        "content": "<p>Changing the <code>simp only</code> line so that it also acts on the goal fixes this timeout...</p>",
        "id": 291516163,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659306798
    },
    {
        "content": "<p>there is something really fishy going on in the expression <code>({0, 1 / 3, 1 / 2, 2 / 3} : finset ℚ)</code></p>",
        "id": 291516512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659307316
    },
    {
        "content": "<p>many basic operations take way longer than they should when that thing is around, and I managed to OOM kill lean while playing around with it</p>",
        "id": 291516566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659307365
    },
    {
        "content": "<p>my guess is that the expression consists of <code>insert</code> operations which require decidability of <code>rat</code> and this is blowing up for some reason on those concrete numbers</p>",
        "id": 291516577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659307415
    },
    {
        "content": "<p>You're almost certainly correct, since the problem goes away when I change <code>finset</code> with <code>multiset</code></p>",
        "id": 291516634,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659307484
    },
    {
        "content": "<p>this is fast:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">fract</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but if you comment out the <code>b</code> and <code>c</code> or <code>c</code> and <code>d</code> lines then suddenly the <code>rintro</code> becomes really expensive</p>",
        "id": 291516665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659307551
    },
    {
        "content": "<p>which suggests that <code>dec_trivial : 1 / 3 != 1 / 2</code> is being evaluated and something is not going well</p>",
        "id": 291516713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659307587
    },
    {
        "content": "<p>Is decidability of equality between rational fractions slow?</p>",
        "id": 291516743,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659307651
    },
    {
        "content": "<p>it shouldn't be that slow</p>",
        "id": 291516750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659307679
    },
    {
        "content": "<p>ah, there is a gcd involved, maybe that's getting stuck</p>",
        "id": 291516808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659307705
    },
    {
        "content": "<p>Aha: when you whnf <code>fract q ∈ ({a, b, c, d} : finset ℚ)</code>, you get <code>list.mem (fract q) (list.insert a (list.insert b (list.insert c [d])))</code>. Since it's using <code>insert</code> and not <code>cons</code> this does not make it all the way to the disjunction like you would prefer; and if you put in concrete numbers for a,b,c,d then it will have to evaluate whether they are equal or not before we can tell if it is definitionally a disjunction. This is a problem because lots of stuff likes to call whnf on the goal to find out if it's a prop and other things</p>",
        "id": 291517003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659308061
    },
    {
        "content": "<p>so the correct solution is to start the proof with <code>simp only [finset.mem_insert, finset.mem_singleton],</code> as you suggested</p>",
        "id": 291517031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659308149
    },
    {
        "content": "<p>oof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"n\">as_true</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- timeout</span>\n</code></pre></div>",
        "id": 291517146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659308305
    },
    {
        "content": "<p>another way to \"fix\" it is to put <code>local attribute [instance] classical.dec</code> at the top of the file</p>",
        "id": 291517293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659308520
    },
    {
        "content": "<p>this will make the inserts infer the fake decidability instance, and this will fail to evaluate, meaning the whnf stops trying to reduce it earlier</p>",
        "id": 291517352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659308590
    },
    {
        "content": "<p>when you use the \"computable\" decidability instance, lean actually tries to compute it, and I suspect that whnf is even reducing proofs in order to evaluate the gcd, which times out</p>",
        "id": 291517406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659308650
    },
    {
        "content": "<p>Why would the gcd time out here?</p>",
        "id": 291517482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659308820
    },
    {
        "content": "<p>Is this to do with acc.rec being irreducible in the kernel?</p>",
        "id": 291517490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659308843
    },
    {
        "content": "<p>I think something is calling <code>whnf</code> with a really high reducibility setting</p>",
        "id": 291517840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659309386
    },
    {
        "content": "<p>here's a test you can play with, using the <code>#whnf</code> command:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span> <span class=\"n\">lean.parser</span>\n\n<span class=\"kd\">@[user_command]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">whnf_cmd</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">interactive.parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"#whnf\"</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">parser.pexpr</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">synthesize_tactic_state_with_variables_as_hyps</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span>\n  <span class=\"n\">of_tactic</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"o\">{</span>\n    <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.whnf</span> <span class=\"n\">e</span> <span class=\"n\">tactic.transparency.semireducible</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span> <span class=\"o\">}</span> <span class=\"n\">ts</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"bp\">#</span><span class=\"n\">whnf</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>At this reducibility setting, it doesn't get evaluated much at all, but if you change <code>semireducible</code> to <code>all</code> it will evaluate the outer bit, and you can observe that e.g. <code>(1 / (3 : ℚ)).denom - 3</code> reduces to 0</p>",
        "id": 291517967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659309637
    },
    {
        "content": "<p>interestingly, <code>#whnf as_true ((1 / (3 : ℚ)) ≠ 1 / 2)</code> evaluates to <code>true</code> quickly with <code>all</code> enabled and does not reduce at lower settings, so I'm not sure what got it stuck in a loop</p>",
        "id": 291517978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659309698
    }
]