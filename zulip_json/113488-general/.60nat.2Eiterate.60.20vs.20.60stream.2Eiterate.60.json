[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.iterate\">docs#nat.iterate</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.iterate\">docs#stream.iterate</a> are propositionally equal but one of them uses <code>iterate f a (n + 1) = iterate f (f a) n</code> while the other uses <code>iterate f a (n + 1) = f (iterate f a n)</code>. Which one is faster in Lean? How do I run a benchmark?</p>",
        "id": 262665775,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637814345
    },
    {
        "content": "<p>Wouldn't it depend on the f? Does lean do any stream fusion? In Haskell, this is why foldr is preferred over foldl, because there are fewer thunks in foldr. Which of these two is foldl or foldr?</p>",
        "id": 262665900,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637814580
    },
    {
        "content": "<p>In Lean, <code>stream</code> is just a fancy name for <code>nat → α</code>, no special handling at all.</p>",
        "id": 262666024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637814732
    },
    {
        "content": "<p>I see that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.fib\">docs#nat.fib</a> is defined using <code>stream.iterate</code> and I wonder if it's faster than with <code>nat.iterate</code>.</p>",
        "id": 262666047,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637814786
    },
    {
        "content": "<p>(for reference, I meant stream fusion as in <a href=\"https://stackoverflow.com/a/38910170/7690601\">https://stackoverflow.com/a/38910170/7690601</a>)</p>",
        "id": 262666135,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637814912
    },
    {
        "content": "<p>Maybe not relevant because lean is strict, AFAIK.</p>",
        "id": 262666169,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637814960
    },
    {
        "content": "<p>\"set_option profiler true\" and then test various #evals?</p>",
        "id": 262666216,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637814991
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.optimize_bytecode</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">nat.iterate'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">nat.iterate'</span> <span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">nat.iterate₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">nat.iterate₂</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"k\">#eval</span> <span class=\"n\">nat.iterate</span> <span class=\"n\">id</span> <span class=\"mi\">2000000</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">nat.iterate'</span> <span class=\"n\">id</span> <span class=\"mi\">2000000</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>They are actually quite similar in generated code and performance. Ideally <code>nat.iterate</code> would perform better because it is tail recursive, but lean 3 does not implement tail call optimization so it looks like a wash</p>",
        "id": 262666239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637815066
    },
    {
        "content": "<p>Is the memory usage the same?</p>",
        "id": 262666294,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637815134
    },
    {
        "content": "<p>that's harder to profile, but I would guess that <code>nat.iterate'</code> (the non-tail recursive version) has better memory usage because unlike the situation with TCO where <code>nat.iterate</code> would be O(1) and the other O(n), without it they are both O(n) but <code>nat.iterate</code> has <code>f 1, ..., f n</code> on the stack and <code>nat.iterate'</code> has a bunch of copies of <code>f</code></p>",
        "id": 262666401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637815316
    },
    {
        "content": "<p>So similar to the foldl vs foldr situation?</p>",
        "id": 262666449,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637815364
    },
    {
        "content": "<p>yes, foldl vs foldr analysis is basically the same</p>",
        "id": 262666456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637815382
    },
    {
        "content": "<p>Off topic, but do you think lean4 can be used to help support evaluation using rewrite rules?</p>",
        "id": 262666482,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637815433
    },
    {
        "content": "<p>Yes, I was talking about this with Leo just today. Rewrite rules during compilation are definitely on the agenda, although not super near term</p>",
        "id": 262666567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637815537
    },
    {
        "content": "<p>Is it OK if I redefine <code>nat.fib</code> using <code>nat.iterate</code>? We have more theory about <code>nat.iterate</code> than about <code>stream.iterate</code>.</p>",
        "id": 262666883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637815999
    },
    {
        "content": "<p>(and I'm going to PR a rewrite of <code>stream.iterate</code> in terms of <code>nat.iterate</code>)</p>",
        "id": 262666894,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637816028
    },
    {
        "content": "<p>sounds good to me. No need to have two functions for this</p>",
        "id": 262667404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637816630
    },
    {
        "content": "<p>Note that <code>nat.iterate</code> is the \"wrong\" way to do induction. If you know that <code>P a -&gt; P(f a)</code>, you need to <code>rw iterate_succ'</code> to apply it. I was considering changing it in core. What do you think?</p>",
        "id": 262676701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637828169
    },
    {
        "content": "<p>I would just make <code>iterate_succ'</code> a simp lemma and not the other one</p>",
        "id": 262676937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637828402
    },
    {
        "content": "<p>Yeah but about cases where the function isn't Prop-valued?</p>",
        "id": 262677382,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637828721
    },
    {
        "content": "<p>Then you still can't choose between different <code>n</code> in case of a periodic orbit.</p>",
        "id": 262701235,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637844359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/.60nat.2Eiterate.60.20vs.20.60stream.2Eiterate.60/near/262666894\">said</a>:</p>\n<blockquote>\n<p>(and I'm going to PR a rewrite of <code>stream.iterate</code> in terms of <code>nat.iterate</code>)</p>\n</blockquote>\n<p>Did this PR ever happen?</p>",
        "id": 319970488,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673103320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/.60nat.2Eiterate.60.20vs.20.60stream.2Eiterate.60/near/262666894\">said</a>:</p>\n<blockquote>\n<p>(and I'm going to PR a rewrite of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.iterate\">docs#stream.iterate</a> in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.iterate\">docs#nat.iterate</a>)</p>\n</blockquote>\n<p>is there a PR anywhere for this?</p>",
        "id": 319970647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673103384
    },
    {
        "content": "<p>I have <a href=\"https://github.com/leanprover-community/mathlib/tree/YK-stream-struct\">branch#YK-stream-struct</a></p>",
        "id": 319982293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673109255
    },
    {
        "content": "<p>Unfortunately, I mixed many changes into 1 branch. I'll try to split smaller changes into reviewable PRs.</p>",
        "id": 319982348,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673109295
    },
    {
        "content": "<p>Should we redefine <code>nat.iterate</code> to align with <code>stream.iterate</code> defeq?</p>",
        "id": 319996299,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673117676
    },
    {
        "content": "<p>Or <code>stream.iterate</code>?</p>",
        "id": 319996308,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673117684
    },
    {
        "content": "<p>I think we should change nat.iterate since then it would be defeq to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nsmul_rec\">docs#nsmul_rec</a> on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.End\">docs#function.End</a></p>",
        "id": 319999349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673119795
    },
    {
        "content": "<p>That will take a bit longer because it's in the core.</p>",
        "id": 320013875,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673132303
    },
    {
        "content": "<p>That would make my life much easier in <a href=\"https://github.com/leanprover-community/mathlib/pull/18077\">#18077</a>, as Eric alludes to.</p>",
        "id": 320014904,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673133260
    },
    {
        "content": "<p>I'll try to do it tomorrow.</p>",
        "id": 320017605,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673135864
    },
    {
        "content": "<p>This is of course assuming we no longer care at all about tail recursion, in either Lean 3 or Lean 4</p>",
        "id": 320017683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673135915
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.iterate#doc\">docs4#Nat.iterate</a> is also in core, right?</p>",
        "id": 320018176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673136341
    },
    {
        "content": "<p>Oh it is not! Then I guess we're quite free to change the definition.</p>",
        "id": 320018301,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673136411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Could you please provide more details?</p>",
        "id": 320021622,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673139087
    },
    {
        "content": "<p>It would be nice to make the <code>npow</code> field of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.End.Monoid\">docs#function.End.Monoid</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.monoid\">docs#module.End.monoid</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid.End.monoid\">docs#add_monoid.End.monoid</a> etc defeq to <code>nat.iterate</code>. We certainly could do this by manually specifying the <code>npow</code> field, but since the algorithm is just \"iterate\" and the default <a href=\"https://leanprover-community.github.io/mathlib_docs/find/npow_rec\">docs#npow_rec</a> is also just \"iterate\", it seems like we don't need both algorithms</p>",
        "id": 320022093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673139441
    },
    {
        "content": "<p>So essentially, there are three declarations that I think we should merge: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/npow_rec\">docs#npow_rec</a>  as <code>iterate ((*) n)</code> or similar, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.iterate\">docs#nat.iterate</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.iterate\">docs#stream.iterate</a></p>",
        "id": 320022181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673139501
    },
    {
        "content": "<p>My comment about tail recursion is just referencing the thread above</p>",
        "id": 320022190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673139510
    },
    {
        "content": "<blockquote>\n<p>but lean 3 does not implement tail call optimization so it looks like a wash</p>\n</blockquote>\n<p>Clearly we can pick whatever we like in Lean 3; but we should make sure that the choice is also fine for Lean 4, either due to possible tail recursion support there, or because <code>@[csimp]</code> makes non-optimal implementations irrelevant.</p>",
        "id": 320022246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673139576
    },
    {
        "content": "<p>What is <code>@[csimp]</code>?</p>",
        "id": 320024595,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673141516
    },
    {
        "content": "<p>Which implementation works better with tail recursion?</p>",
        "id": 320024667,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673141556
    },
    {
        "content": "<p>Both of those are probably questions for <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 320025473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673142201
    },
    {
        "content": "<p>which implementations are we talking about? <code>stream.iterate</code> is implemented using a direct call to <code>nat.rec_on</code>, which does not work in lean 4</p>",
        "id": 320026008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673142748
    },
    {
        "content": "<p><code>@[csimp]</code> is a mechanism for replacing one definition with an equal one, like a simp lemma but only for the compiler</p>",
        "id": 320026040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673142786
    },
    {
        "content": "<p>you can use it to get both good defeqs and good performance by using a naive definition with good defeqs for the main definition and then using <code>@[csimp]</code> to rewrite it to a tail-recursive version for the compiler</p>",
        "id": 320026131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673142847
    },
    {
        "content": "<p>There are two natural ways to define <code>nat.iterate</code>, as a left fold or a right fold. TBH they are probably both useful</p>",
        "id": 320026154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673142904
    },
    {
        "content": "<p>the tail recursive one is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.iterate/src\">src#nat.iterate</a></p>",
        "id": 320026187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673142948
    },
    {
        "content": "<p>So, we should use something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterate'</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span>      <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">iterate'</span> <span class=\"n\">op</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterate</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span>      <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">iterate</span> <span class=\"n\">op</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[csimp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">iterate_eq_iterate'</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">iterate</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">iterate'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">Function</span>\n</code></pre></div>",
        "id": 320026500,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673143213
    },
    {
        "content": "<p>(I moved lemmas about <code>iterate</code> to <code>function</code> in Lean 3 and I suggest that we move the definition to <code>function</code> as well)</p>",
        "id": 320026605,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673143297
    },
    {
        "content": "<p>I've changed my mind, it's not <code>nat.iterate</code> that's backwards, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nsmul_rec\">docs#nsmul_rec</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/npow_rec\">docs#npow_rec</a></p>",
        "id": 320026633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673143315
    },
    {
        "content": "<p><code>nsmul_rec (n + 1) a = a + nsmul_rec n a</code> is not a sensible defeq</p>",
        "id": 320026680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673143332
    },
    {
        "content": "<p><del>AFAIR, this was aligned with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul\">docs#nat.mul</a></del> I'm wrong.</p>",
        "id": 320026724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673143392
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 320026734,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673143406
    },
    {
        "content": "<ol>\n<li>IMHO, <code>a ^ (n + 1) = a ^ n * a</code> is a more reasonable defeq.</li>\n<li>This corresponds to <code>a ^ n = ((* a)^[n] 1)</code> with another definition of <code>nat.iterate</code>.</li>\n</ol>",
        "id": 320026855,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673143532
    },
    {
        "content": "<p>With the current definition of <code>nat.iterate</code>, <code>(* a)^[n+1] 1</code> unfolds to <code>(* a)^[n] (1 * a)</code>.</p>",
        "id": 320026919,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673143584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/.60nat.2Eiterate.60.20vs.20.60stream.2Eiterate.60/near/320026724\">said</a>:</p>\n<blockquote>\n<p><del>AFAIR, this was aligned with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul\">docs#nat.mul</a></del> I'm wrong.</p>\n</blockquote>\n<p>I think you're right but it was a historical accident and no longer is relevant</p>",
        "id": 320027408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673144056
    },
    {
        "content": "<p>Just to confirm your post above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.stream.init</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">npow_rec'</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">stream.iterate</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span>  <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">npow_rec'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">npow_rec'</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 320027550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673144241
    },
    {
        "content": "<p>Actually, this doesn't help <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">function.End</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">npow_rec'</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">stream.iterate</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">n</span>  <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- fails, can't commute application with recursor</span>\n</code></pre></div>",
        "id": 320027864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673144506
    },
    {
        "content": "<p>We should redefine <code>stream.iterate</code> using <code>nat.iterate</code>, then this will work.</p>",
        "id": 320028773,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673145595
    },
    {
        "content": "<p>But I want to decide which defeq should be preserved before doing the refactor.</p>",
        "id": 320028827,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673145627
    },
    {
        "content": "<p>I am of the opinion that <code>nat.iterate</code> is backwards regardless. You can't prove <code>P (f^[n] a)</code> from <code>P a</code> and <code>∀ b, P b → P (f b)</code> without rewriting <code>function.iterate_succ'</code>.</p>",
        "id": 320048484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673166022
    },
    {
        "content": "<p>You can. You just need <code>induction n generalizing a</code>.</p>",
        "id": 320051435,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673168472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/.60nat.2Eiterate.60.20vs.20.60stream.2Eiterate.60/near/320028773\">said</a>:</p>\n<blockquote>\n<p>We should redefine <code>stream.iterate</code> using <code>nat.iterate</code>, then this will work.</p>\n</blockquote>\n<p>I'm pretty sure no refactor will maker my last example <code>rfl</code></p>",
        "id": 320056696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673172372
    }
]