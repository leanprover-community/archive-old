[
    {
        "content": "<p>Johan was telling me about outparams recently and I am now in the dangerous situation of having a very weak understanding of them and trying to use them to solve everything. Ashvni is rewriting <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.cast_nat_cast\">docs#zmod.cast_nat_cast</a> and getting goals of the form <code>char_p (zmod (d * p ^ m)) ?m_1</code>. Note that <code>char_p</code> is a class. Lean has an instance <code>zmod.char_p : ∀ (n : ℕ), char_p (zmod n) n</code> but what the type class inference system does _not_ know is that if <code>char_p (zmod n) a</code> then we'd better have <code>a = n</code>! Is there a way of telling the type class inference system to solve all goals of the form <code>char_p (zmod n) ?m_1</code> by setting <code>?m_1 = n</code> and then using <code>zmod.char_p</code>? Is this what <code>outparams</code> do or am I way off?</p>",
        "id": 261152322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636646840
    },
    {
        "content": "<p>I personally wouldn't mind making <code>p</code> an out_param of <code>char_p</code>. But some instances would need to be removed. For example <code>char_p R (ring_char R)</code> would be very dangerous.</p>",
        "id": 261153321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636647355
    },
    {
        "content": "<p>Do we have any instances of the form <code>char_p R (ring_char R)</code> today?</p>",
        "id": 261166913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636653998
    },
    {
        "content": "<p>As I understand it, <code>out_param</code> modifies <code>char_p</code> not <code>zmod.char_p</code>, so it says roughly \"whenever you search for a char_p instance, infer the canonical <code>p</code> value from the instance you find\"</p>",
        "id": 261166977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636654050
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">rg</span> <span class=\"s2\">\"char_p.*ring_char\"</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">char_p</span><span class=\"bp\">/</span><span class=\"n\">quotient.lean</span>\n<span class=\"mi\">25</span><span class=\"o\">:</span><span class=\"bp\">@@</span><span class=\"n\">subsingleton.elim</span> <span class=\"o\">(</span><span class=\"bp\">@@</span><span class=\"n\">char_p.subsingleton</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">ring_char.of_eq</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">char_p</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">92</span><span class=\"o\">:</span><span class=\"n\">unfold</span> <span class=\"n\">ring_char</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">char_p.cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"mi\">94</span><span class=\"o\">:</span><span class=\"kd\">theorem</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"mi\">97</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"n\">char_p</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"mi\">103</span><span class=\"o\">:</span><span class=\"n\">char_p.congr</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 261167157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636654155
    },
    {
        "content": "<p>I assume that's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_char.char_p\">docs#ring_char.char_p</a></p>",
        "id": 261168708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636655070
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_char.eq_iff\">docs#ring_char.eq_iff</a></p>",
        "id": 261275388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636733957
    }
]