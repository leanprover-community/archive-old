[
    {
        "content": "<p>I have a proposition <code>p</code> that requires an <code>is_some x</code>, but I only have an equality <code>x = some y</code>. How do I convert it?</p>",
        "id": 266066600,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640451174
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"c1\">-- h : x = some y</span>\n</code></pre></div>",
        "id": 266066780,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640451559
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be helpful. But in general, you can rewrite the assumption and use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.is_some_some\">docs#option.is_some_some</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">option</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_some</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_some_some</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 266067050,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640451893
    },
    {
        "content": "<p>But <code>is_some_some</code> gives you an equality. What I want is a value of type <code>is_some x</code>.</p>",
        "id": 266067071,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640451957
    },
    {
        "content": "<p><code>is_some x</code> is not a type. It is a term. Note that <code>is_some</code> returns a <code>bool</code>, not a <code>Prop</code>. What you've done in <code>have : is_some x, simp [h]</code> is an implicit coercion.</p>",
        "id": 266067121,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640451999
    },
    {
        "content": "<p>Oh boy. So the type that I actually what then is <code>is_some x = tt</code>?</p>",
        "id": 266067140,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640452054
    },
    {
        "content": "<p>It depends on your use case. It's impossible to tell without a mwe.</p>",
        "id": 266067277,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640452255
    },
    {
        "content": "<p>In your example, do I have to write <code>is_some x = tt</code> or could I just write <code>is_some x</code>?</p>",
        "id": 266067287,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640452312
    },
    {
        "content": "<p><code>is_some x : Prop</code> is <em>defined</em> as <code>is_some x = tt</code></p>",
        "id": 266067399,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640452492
    },
    {
        "content": "<p>In the example given you need the <code>= tt</code>. Otherwise, it complains. Looks like lean doesn't realize it could coerce it to a Prop.</p>",
        "id": 266067459,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640452571
    },
    {
        "content": "<p>This is unexpected. Give us a MWE.</p>",
        "id": 266067478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640452664
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">option</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_some_some</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 266067538,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640452721
    },
    {
        "content": "<p>It says: <code>error: tactic failed, there are unsolved goals</code>.</p>",
        "id": 266067542,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640452735
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">option</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">is_some_some</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 266067612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640452878
    },
    {
        "content": "<p>This too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_some_some</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 266067666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640452941
    },
    {
        "content": "<p>Ah, so you need <code>exact rfl</code> to do the coercion? OK.</p>",
        "id": 266067766,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640453116
    },
    {
        "content": "<p>It's just that the goal at the end is <code>tt</code>, which is defeq to <code>tt = tt</code>, but <code>rw</code> doesn't see it so it doesn't automatically close the goal.</p>",
        "id": 266067895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640453300
    },
    {
        "content": "<p>The goal for me looks like <code>⊢ ↥tt</code>.</p>",
        "id": 266067982,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640453424
    },
    {
        "content": "<p>Yes, which is defeq to <code>tt = tt</code>, as I just said.</p>",
        "id": 266068006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640453465
    },
    {
        "content": "<p>I see. Thanks for explaining.</p>",
        "id": 266068068,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640453542
    },
    {
        "content": "<p>Subst may be a nice tactic too</p>",
        "id": 266070133,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640456927
    },
    {
        "content": "<p>Why does <code>is_some</code> return a <code>bool</code>? I thought it was more common to define a property by a map into <code>Prop</code>.</p>",
        "id": 266070795,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640458128
    },
    {
        "content": "<p>It's a computer science function</p>",
        "id": 266076338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640467571
    },
    {
        "content": "<p>It'll be used in tactics probably. You probably wouldn't use it in proofs</p>",
        "id": 266076344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640467603
    },
    {
        "content": "<p>In proofs you would usually do a case match on a term of type <code>option X</code></p>",
        "id": 266077237,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640469221
    }
]