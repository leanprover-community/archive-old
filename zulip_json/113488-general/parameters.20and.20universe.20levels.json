[
    {
        "content": "<p>My type theory understanding is fuzzy in various places. Here's one that I don't understand. Why does this first <code>list</code> implementation not require a universe bump, but the second does? I would have thought they were the same, but Lean complains.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">list'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list'</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list'</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list'</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 286985567,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1655853112
    },
    {
        "content": "<p>They are isomorphic, yes, but by syntactic restrictions belong to different universes.<br>\nConsider the following variation, which is genuinely larger:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">list''</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list''</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list''</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">list''</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 286986266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655853708
    },
    {
        "content": "<p>Hmm... I think I must have a fundamental misunderstanding here, because I would have exepected <code>list'' : Type u → Type (max u 0)</code> since <code>nat : Type 0</code>. And what exactly is the \"syntactic restriction\" that occurs with <code>list'</code>?</p>",
        "id": 286988044,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1655855287
    },
    {
        "content": "<p>One of the fields of the <code>list''.cons</code> constructor is of type <code>Type u : Type (u+1)</code>, so the whole type belongs to universe <code>u+1</code>.</p>",
        "id": 286988094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655855331
    },
    {
        "content": "<p>Yes in actuality for a specific <code>α</code> the only value of <code>Type u</code> that can appear in a <code>cons</code> value of type <code>list' α</code> is <code>α</code> itself--but Lean doesn't care about that.</p>",
        "id": 286988124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655855371
    },
    {
        "content": "<p>This is explained a little bit in §7.8 of \"Theorem Proving in Lean\" (v 3.23.0): If your inductive family has a constructor with an argument of type <code>β : Type v</code>, then the types of the family need to be of type <code>Type v</code> at least.<br>\nIn the example, there is an argument <code>α</code> of type <code>Type u : Type (u + 1)</code>.</p>",
        "id": 287072605,
        "sender_full_name": "Bart Michels",
        "timestamp": 1655912643
    },
    {
        "content": "<p>The way I understand it is as a safeguard against defining something like the \"union\" of everything of type <code>Type u</code> and then declaring that to be still of type <code>Type u</code>, which seems dangerous.</p>",
        "id": 287072791,
        "sender_full_name": "Bart Michels",
        "timestamp": 1655912708
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 287103589,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1655927110
    },
    {
        "content": "<p>Thanks both, I think I understand now. Let me try to explain my current conception to see if it matches reality.</p>\n<p><code>list</code> takes a <em>parameter</em> <code>α</code> which is fixed throughout the entirety of the inductive definition. The <code>list.cons</code> constructor has type <code>α → list → list</code> which must live in universe level <code>imax u v</code> where <code>list : Type v</code>. Of course, <code>list.nil : α</code> and <code>α : Type u</code>, so we have two conditions: <code>imax u v ≤ v</code> and <code>u ≤ v</code>, and it is possible to satisfy these conditions by taking <code>v = u</code>, which is why it makes sense for <code>list : Type u</code>.</p>\n<p>In contrast, <code>α</code> is and <em>index</em> in <code>list'</code> (and <code>list''</code>), which means that it can vary throughout the inductive constructors. So, <code>list'.cons : Π (α : Type u), α → list' α → list' α</code> and since <code>α → list' α → list' α : Type (imax u v)</code>, then <code>Π (α : Type u), α → list' α → list' α : Type ((imax u v) + 1)</code>. Likewise the type of the constructor <code>list'.nil</code> lives in universe level <code>u+1</code>. Consequently, we have two constraints, <code>(imax u v) + 1 ≤ v</code> and <code>u + 1 ≤ v</code>, and so the minimum possible universe level for <code>v</code> is <code>u+1</code>.</p>\n<p>Finally, <code>list''</code> is highlighing / using the fact that the index <code>α</code> can vary (and in this way it is not just a syntactic restriction). In this case, for each type <code>α</code>, <code>list''.cons</code> is constructing a new type. (Of course, this was also occurring in <code>list'</code> but this was partially occluded by the fact that it's isomorphic to <code>list</code>.)</p>\n<p>Is this the correct understanding?</p>",
        "id": 287105242,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1655928028
    }
]