[
    {
        "content": "<p>Is there any better way to add a well-founded instance ?<br>\nI wanted to prove some lemmas by <code>linear order</code>, <code>monomial order</code> (defined as below) and <code>&lt;</code> is well-founded</p>\n<p>(<code>lean class is_monomial_order (α : Type*) [has_add α] (r : α → α → Prop) :=\n(monomial_order : ∀ a b : α, r a b → ∀ c : α, r (c + a) (c + b))</code>)</p>\n<p>So something like :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_monomial_order</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>  <span class=\"o\">(</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>It's a bit annoying that every time I wanted to use those lemmas I have to explicitly add the well-founded proof</p>\n<p>I've tried instance <code>is_well_order</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_monomial_order</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>  <span class=\"o\">[</span><span class=\"n\">is_well_order</span>  <span class=\"n\">α</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n</pre></div>\n\n\n<p>And after realizing <code>is_well_order</code> implies <code>linear_order</code>, I tried the following two ways, but neither of them looks good...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_well_order</span>  <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">linear_order_of_STO&#39;</span> <span class=\"n\">r</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">mo</span> <span class=\"o\">:</span> <span class=\"n\">is_monomial_order</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_well_order</span>  <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mo</span> <span class=\"o\">:</span> <span class=\"n\">is_monomial_order</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n</pre></div>",
        "id": 159269628,
        "sender_full_name": "AHan",
        "timestamp": 1551001755
    },
    {
        "content": "<p>how is your <code>has_add</code> being supplied to your monomial order?</p>",
        "id": 159269758,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551001970
    },
    {
        "content": "<p>as in, how does <code>variables {α : Type*} [linear_order α] [is_monomial_order α (≤)]  [is_well_order  α ((&lt;) : α → α → Prop) ]</code> even type check?</p>",
        "id": 159269766,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551001987
    },
    {
        "content": "<p>Ah sorry actually those <code>α</code> should be <code>α →₀ β</code> as I am operating on <code>finsupp</code><br>\nmy bad...</p>",
        "id": 159269770,
        "sender_full_name": "AHan",
        "timestamp": 1551002031
    },
    {
        "content": "<p>and what instances are on <code>\\b</code>?</p>",
        "id": 159269814,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002077
    },
    {
        "content": "<p>I mean, the only canonically ordered monoids that are well-founded seem to be the limit ordinals, which we don't really care about other than the first one (i.e. <code>nat</code>), so I don't know what you're trying to achieve</p>",
        "id": 159269866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002163
    },
    {
        "content": "<p>I defined a class <br>\n<code>lean class decidable_canonically_ordered_monoid (α : Type*) extends canonically_ordered_monoid α, decidable_linear_ordered_cancel_comm_monoid α </code></p>\n<p><code>\\b</code> is of the instance <code>decidable_canonically_ordered_monoid </code></p>",
        "id": 159269870,
        "sender_full_name": "AHan",
        "timestamp": 1551002173
    },
    {
        "content": "<p>I fail to see how <code>\\a \\to\\_0 \\b</code> can have a well order</p>",
        "id": 159269873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002185
    },
    {
        "content": "<p>or maybe just consider <code>\\b</code> as <code>nat</code>  would be better, sorry for confusing.<br>\nI'm just trying to prove something on monomials</p>",
        "id": 159269994,
        "sender_full_name": "AHan",
        "timestamp": 1551002413
    },
    {
        "content": "<p>according to wikipedia<br>\n\"In the case of finitely many variables, well-ordering of a monomial order is equivalent to the conjunction of the following two conditions:</p>\n<div class=\"codehilite\"><pre><span></span>The order is a total order.\nIf u is any monomial then 1 ≤ u .&quot;\n</pre></div>\n\n\n<p>And I'm trying to prove this, so the well order of <code>α →₀ β</code> is actually the well order of monomials</p>",
        "id": 159270058,
        "sender_full_name": "AHan",
        "timestamp": 1551002534
    },
    {
        "content": "<p>but it will not satisfy <code>∀ a b : α, r a b → ∀ c : α, r (c + a) (c + b)</code></p>",
        "id": 159270072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002593
    },
    {
        "content": "<p>what is \"the\" well order of <code>\\a \\to\\_o \\b</code>?</p>",
        "id": 159270075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002617
    },
    {
        "content": "<p>Why won't it satisfy the relation?<br>\nFor example Lexicographic order on monomials</p>",
        "id": 159270197,
        "sender_full_name": "AHan",
        "timestamp": 1551002806
    },
    {
        "content": "<p>never mind, I was wrong</p>",
        "id": 159270212,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002872
    },
    {
        "content": "<p>I suppose you can define a new structure <code>well_order</code> that extends <code>linear_order</code></p>",
        "id": 159270256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002903
    },
    {
        "content": "<p>monomials are well founded, but they are not well ordered because the order is not total</p>",
        "id": 159270313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551003025
    },
    {
        "content": "<p>it's basically the same as asserting that the &lt; order on multiset is well founded</p>",
        "id": 159270315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551003061
    },
    {
        "content": "<p>yes, so I am trying to prove it either with <br>\n\"well-founded + linear order + monomial order\" or with \"well-order + monomial order\"</p>",
        "id": 159270383,
        "sender_full_name": "AHan",
        "timestamp": 1551003238
    }
]