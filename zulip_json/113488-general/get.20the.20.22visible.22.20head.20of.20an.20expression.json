[
    {
        "content": "<p>I would like a function that takes an <code>expr</code>, and returns to me the \"head\", including implicit arguments.</p>\n<p>Thus <code>@rfl X</code> should stay as <code>@rfl X</code>, <code>nat.factorial 7</code> should produce <code>nat.factorial</code>, and <code>3 + 7</code> should produce <code>@has_add.add nat nat.has_add</code>.</p>",
        "id": 229945813,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615504749
    },
    {
        "content": "<p>Does that make sense? Do we already have it?</p>",
        "id": 229945827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615504757
    },
    {
        "content": "<p>There is <code>expr.get_app_fn</code>, which gets the very topmost head of the <code>app</code>. (But this turns <code>@rfl X</code> into just <code>@rfl</code>, etc.)</p>",
        "id": 229945875,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615504800
    },
    {
        "content": "<p>I guess if it existed it would be in <code>src/meta/expr.lean</code>, and there doesn't seem to be anything like this.</p>",
        "id": 229946530,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615505102
    },
    {
        "content": "<p>I had hoped that I could achieve this using pattern matching, e.g. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">f</span> <span class=\"bp\">%%</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but this just gives me a <code>function expected at</code> error on the <code>%%f</code>.</p>",
        "id": 229947178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615505409
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">app_implicits</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">binding_info</span> <span class=\"n\">ty</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">binder_info.default</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">app_implicits</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_app_fn_with_implicits</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e.get_app_fn_args</span><span class=\"o\">,</span>\n  <span class=\"n\">app_implicits</span> <span class=\"n\">f</span> <span class=\"n\">args</span>\n</code></pre></div>\n<p>seems to do it.</p>",
        "id": 229953593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615508895
    },
    {
        "content": "<p>Here's a version that avoids multiple calls to <code>infer_type</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">app_implicits</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">_</span> <span class=\"n\">binder_info.default</span> <span class=\"n\">_</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">app_implicits</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_app_fn_with_implicits</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e.get_app_fn_args</span> <span class=\"k\">in</span>\n<span class=\"n\">app_implicits</span> <span class=\"n\">f</span> <span class=\"n\">args</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">infer_type</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 229965497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615516684
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 230008616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615546021
    }
]