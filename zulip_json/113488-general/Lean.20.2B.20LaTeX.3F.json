[
    {
        "content": "<p>I've been reading work of Lamport about structured proofs.  Here's an extract from <a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean/blob/master/src/limits.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1P1-lean/blob/master/src/limits.lean\">https://github.com/ImperialCollegeLondon/M1P1-lean/blob/master/src/limits.lean</a> :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- We now prove that if aₙ → l and bₙ → m then aₙ + bₙ → l + m.</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">tendsto_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- let epsilon be a positive real</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- We now need to come up with N such that</span>\n  <span class=\"c1\">-- n &gt;= N implies |aₙ + bₙ - (l + m)| &lt; ε.</span>\n  <span class=\"c1\">-- Well, note first that epsilon / 2 is also positive.</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hε2</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Choose large M₁ such that n ≥ M₁ implies |a n - l| &lt; ε /2,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">Hε2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">M₁</span> <span class=\"n\">HM₁</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and similarly choose M₂ for the b sequence.</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">Hε2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">M₂</span> <span class=\"n\">HM₂</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- let N be the max of M1 and M2</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and let&#39;s use this value of N.</span>\n  <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Of course N ≥ M₁ and N ≥ M₂.</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≥</span> <span class=\"n\">M₁</span> <span class=\"o\">:=</span> <span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≥</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span> <span class=\"n\">le_max_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Now say n ≥ N.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Then obviously n ≥ M₁...</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hn₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">M₁</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ...so |aₙ - l| &lt; ε /2</span>\n<span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">HM₁</span> <span class=\"n\">n</span> <span class=\"n\">Hn₁</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>and so on and so on. The point is that I am spelling out the proof I would tell mathematicians in comments, and writing Lean code, which is sometimes self-evident (<code>intros n Hn</code>) and sometimes much harder for beginners to understand (e.g. using <code>le_max_left</code> -- a student could look up what this did, but it's much harder for them to find this function for themselves, and there are far more contrived lines in other parts of this repo). </p>\n<p>I would like to make this look really sexy and I am almost sure that this should be possible with known technology. My dream would be to have what looks like a LaTeX document (perhaps viewed through a web browser) and when you hover over e.g. \"Then obviously n &gt;= M_1\" you get some transient box which says <code>have Hn₁ : n ≥ M₁ := by linarith,</code>, and if you click on it then you somehow end up viewing a Lean file, or part of a Lean file, where you can look at the goal and change / edit things and play around (and then hit the \"reset\" button when you've screwed everything up).</p>\n<p>In other words, I'd like to have some sort of thing which I can present as a \"formally verified, but looks like LaTeX, proof that the limit of the sum is the sum of the limits\". </p>\n<p>I have no doubt that this sort of thing is possible. I've learnt sphinx but I am not quite sure if it is the tool for the job. Does anyone have any suggestions as to how one might be able to do this? There is no particular time frame and if it involves writing a bunch of code then maybe I can find people who will write this code for me. <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> do either of you know about this kind of thing? </p>\n<p>When it comes to writing Lean code I am 100% convinced that I could write code in the above style which could become \"online notes\" for a beginning analysis course (such as, let's say, the beginning analysis course in Imperial's new curriculum which starts in October). The notes would have the advantage that they are formally verified. But I do not understand enough about how to build the app I envisage and I would dearly like to hear some suggestions!</p>",
        "id": 156681378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548242591
    },
    {
        "content": "<p>Do you remember Neil Stricklands demo? That might be a first approximation of what you want.</p>",
        "id": 156682310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548243680
    },
    {
        "content": "<p>I meant this one: <a href=\"http://neil-strickland.staff.shef.ac.uk/dagstuhl/Systems/Lean_mathlib/Tasks/primes/\" target=\"_blank\" title=\"http://neil-strickland.staff.shef.ac.uk/dagstuhl/Systems/Lean_mathlib/Tasks/primes/\">http://neil-strickland.staff.shef.ac.uk/dagstuhl/Systems/Lean_mathlib/Tasks/primes/</a></p>",
        "id": 156682399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548243796
    },
    {
        "content": "<p>Ooh -- thanks for digging that up! <span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> how did you make this? My plan would be to hide the Lean completely and just have standard maths proof prose visible initially, but one can somehow open up the Lean to see it if one wants to.</p>",
        "id": 156683049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548244598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> As a quick mockup in Emacs, I used Outshine mode to achieve the following (I realise this doesn't address the LaTeX side of things at all).  This required changing the comment syntax a little bit.  <a href=\"/user_uploads/3121/_NxlgyLxGewpsjrAPECKZ-g9/Screen-Shot-2019-01-23-at-14.41.33.png\" target=\"_blank\" title=\"Screen-Shot-2019-01-23-at-14.41.33.png\">Screen-Shot-2019-01-23-at-14.41.33.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_NxlgyLxGewpsjrAPECKZ-g9/Screen-Shot-2019-01-23-at-14.41.33.png\" target=\"_blank\" title=\"Screen-Shot-2019-01-23-at-14.41.33.png\"><img src=\"/user_uploads/3121/_NxlgyLxGewpsjrAPECKZ-g9/Screen-Shot-2019-01-23-at-14.41.33.png\"></a></div>",
        "id": 156693777,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548254634
    },
    {
        "content": "<p>pressing TAB at the start of the buffer, or on a \"headline\", cycles between showing or not showing headlines / all content below that level.</p>",
        "id": 156693999,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548254799
    },
    {
        "content": "<p>Maybe there's a similar plugin to Outshine for VS Code? </p>\n<p>For presentation purposes, a related setup for Jupyter is described here: <br>\n<a href=\"http://chris-said.io/2016/02/13/how-to-make-polished-jupyter-presentations-with-optional-code-visibility/\" target=\"_blank\" title=\"http://chris-said.io/2016/02/13/how-to-make-polished-jupyter-presentations-with-optional-code-visibility/\">http://chris-said.io/2016/02/13/how-to-make-polished-jupyter-presentations-with-optional-code-visibility/</a><br>\nwith a clickable demo here:<br>\n<a href=\"https://nbviewer.jupyter.org/github/csaid/polished_notebooks/blob/master/notebook_polished.ipynb\" target=\"_blank\" title=\"https://nbviewer.jupyter.org/github/csaid/polished_notebooks/blob/master/notebook_polished.ipynb\">https://nbviewer.jupyter.org/github/csaid/polished_notebooks/blob/master/notebook_polished.ipynb</a></p>",
        "id": 156694296,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548255040
    },
    {
        "content": "<p>Indeed this is something we can already mostly do with current technology, although we should be able to do it much better with the Lean 4 parser. Without the possibility to modify the Lean code, we could make something very easily (maybe only after thinking a bit more about the expected output with nested subproofs). In order to get a truly interactive version we could reuse Gabriel's work on the documentation view.</p>",
        "id": 156701032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548259733
    },
    {
        "content": "<p>Right. Nothing you say surprises me. Now how do I actually _do_ it?</p>",
        "id": 156702191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548260506
    },
    {
        "content": "<p>Which version? Interactive or read-only?</p>",
        "id": 156705049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548262728
    },
    {
        "content": "<p>read-only would be a good start.</p>",
        "id": 156707960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548264733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  there is a new version of my examples now which you can find by following the links at  <a href=\"http://bim.shef.ac.uk/lean\" target=\"_blank\" title=\"http://bim.shef.ac.uk/lean\">http://bim.shef.ac.uk/lean</a>.<br>\nAt the moment they are not packaged in a way that makes it super-easy for anyone else to use the same framework, but it is not all that sophisticated either.  The key ingredients are the files <br>\n1. <a href=\"http://bim.shef.ac.uk/lean/viewer.js\" target=\"_blank\" title=\"http://bim.shef.ac.uk/lean/viewer.js\">http://bim.shef.ac.uk/lean/viewer.js</a><br>\n2. <a href=\"http://bim.shef.ac.uk/lean/viewer.css\" target=\"_blank\" title=\"http://bim.shef.ac.uk/lean/viewer.css\">http://bim.shef.ac.uk/lean/viewer.css</a><br>\n3. <a href=\"http://bim.shef.ac.uk/lean/lean_task_index.html\" target=\"_blank\" title=\"http://bim.shef.ac.uk/lean/lean_task_index.html\">http://bim.shef.ac.uk/lean/lean_task_index.html</a> (which is a kind of template)<br>\n4. Libraries <a href=\"http://bim.shef.ac.uk/js/jquery.js\" target=\"_blank\" title=\"http://bim.shef.ac.uk/js/jquery.js\">http://bim.shef.ac.uk/js/jquery.js</a> and <a href=\"http://bim.shef.ac.uk/js/he.js\" target=\"_blank\" title=\"http://bim.shef.ac.uk/js/he.js\">http://bim.shef.ac.uk/js/he.js</a><br>\nFor each example you need <br>\n1. A copy of lean_task_index.html with the name, title and description filled in.<br>\n2. A lean file with comments delineated by the strings <br>\n\"/-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \"<br>\nand <br>\n\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-/\"</p>\n<p>Let me know if you want further details.</p>",
        "id": 156709620,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1548266061
    },
    {
        "content": "<p>Neil, I just had a look at the very first example and something is not quite correct. <code>apply refl</code> is not using the <code>refl</code> tactic, it's using a lemma called <code>refl</code> (use F12 to see it). Use <code>refl</code> alone if you want the <code>refl</code> tactic.</p>",
        "id": 156709958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548266328
    },
    {
        "content": "<p>Thanks, I'll fix that.</p>",
        "id": 156710182,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1548266493
    },
    {
        "content": "<p>There is an old code here <a href=\"https://github.com/leanprover/lean.js\" target=\"_blank\" title=\"https://github.com/leanprover/lean.js\">https://github.com/leanprover/lean.js</a></p>",
        "id": 156712996,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548268777
    },
    {
        "content": "<p>below in the examples. It's using lean interactively in the browser.</p>",
        "id": 156713098,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548268820
    },
    {
        "content": "<p>This seems to be exactly what you'd need to have an interactive lean webpage<br>\n<a href=\"https://github.com/leanprover/lean-client-js/\" target=\"_blank\" title=\"https://github.com/leanprover/lean-client-js/\">https://github.com/leanprover/lean-client-js/</a></p>",
        "id": 156713804,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548269314
    },
    {
        "content": "<blockquote>\n<p>read-only would be a good start.</p>\n</blockquote>\n<p>I'll try to find time over the week-end to build some demo</p>",
        "id": 156728489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548280430
    },
    {
        "content": "<p>Using the libraries that I mentioned doesn't seem to be very easy. On the other hand, directly manipulating the online lean website seems to be doable. I'll try to make a small interactive example in a few days.</p>",
        "id": 156778439,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548342217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> I played around with trying to get a custom version of the web editor working a while back in this thread: <a href=\"#narrow/stream/113488-general/topic/online.20leanprover\" title=\"#narrow/stream/113488-general/topic/online.20leanprover\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/online.20leanprover</a> . I didn't get too far though.</p>",
        "id": 156778956,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548342550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Thanks. Hopefully this will be easier, since here we only need to play around with the reactjs code to to something in the frontend without touching other parts.</p>",
        "id": 156841534,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548410456
    },
    {
        "content": "<p>I changed a few things in the online lean editor and turned it into this : <a href=\"/user_uploads/3121/SV1PUgOO5U2DB4dzH-LExXak/lean-web-editor-with-latex.tar.gz\" target=\"_blank\" title=\"lean-web-editor-with-latex.tar.gz\">lean-web-editor-with-latex.tar.gz</a></p>",
        "id": 156987229,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548621703
    },
    {
        "content": "<p>do you have a live demo somewhere?</p>",
        "id": 156987368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548621918
    },
    {
        "content": "<p>I'm now running it at <a href=\"http://192.168.43.31:8080/\" target=\"_blank\" title=\"http://192.168.43.31:8080/\">http://192.168.43.31:8080/</a></p>",
        "id": 156987504,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548622117
    },
    {
        "content": "<p>Firefox can’t establish a connection to the server at 192.168.43.31:8080.</p>",
        "id": 156987513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548622133
    },
    {
        "content": "<p>That's a local-network IP :) It's not publicly accessible</p>",
        "id": 156987523,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548622147
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 156987526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548622149
    },
    {
        "content": "<p>I don't know why I thought http-server would run it on the web</p>",
        "id": 156987540,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548622185
    },
    {
        "content": "<p>is there an easy way to run it locally ?</p>",
        "id": 156987594,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548622209
    },
    {
        "content": "<p>You may be able to redirect something there</p>",
        "id": 156987599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548622223
    },
    {
        "content": "<p>I don't know how to do that</p>",
        "id": 156987763,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548622541
    },
    {
        "content": "<p>Maybe you can explain how we could run it locally then, and what there is to see</p>",
        "id": 156988002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548622834
    },
    {
        "content": "<p>sure, you'd need to follow the instructions in the readme. run these first :<br>\nnpm install<br>\n./fetch_lean_js.sh<br>\n./node_modules/.bin/webpack</p>",
        "id": 156988077,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548623005
    },
    {
        "content": "<p>then you can into the \"dist\" folder and run \"http-server\"</p>",
        "id": 156988127,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548623071
    },
    {
        "content": "<p>At the moment the content is hardcoded, I have yet to add some kind of editor for the latex part. For any line in the latex, if you click on it, you'll see the corresponding lean code. You can change it and see the goals and warnings etc. but if you click on another line, the changes won't be saved. You can also see all the lean code at the same time, which would be like the normal online editor.</p>",
        "id": 156988205,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548623265
    },
    {
        "content": "<p>Nice!</p>",
        "id": 156988337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548623490
    },
    {
        "content": "<p>People who want to know what we are talking about can go to <a href=\"http://pat.perso.ens-lyon.org/lean/\" target=\"_blank\" title=\"http://pat.perso.ens-lyon.org/lean/\">http://pat.perso.ens-lyon.org/lean/</a> (it probably won't stay there for long)</p>",
        "id": 156988449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548623674
    },
    {
        "content": "<p>I can't see any error message when I edit the Lean code</p>",
        "id": 156988459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548623705
    },
    {
        "content": "<p>wait, the LaTeX doesn't work there</p>",
        "id": 156988520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548623811
    },
    {
        "content": "<p>I used to work when served locally</p>",
        "id": 156988525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548623819
    },
    {
        "content": "<p>The error messages didn't show up at all or were they late ? because the code is probably not the most efficient code possible !</p>",
        "id": 156988646,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548624010
    },
    {
        "content": "<p>You're right about the LaTeX. I think it works only if things are loaded in the correct order. It shouldn't be difficult to fix.</p>",
        "id": 156988725,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548624126
    },
    {
        "content": "<p>I don't have time to play with this (I have lectures to prepare) but it looks like a nice try</p>",
        "id": 156988739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548624185
    },
    {
        "content": "<p>Thanks</p>",
        "id": 156988788,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548624271
    },
    {
        "content": "<p>Hey that's very cool!</p>",
        "id": 156989789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548626059
    },
    {
        "content": "<p>Glad you liked it. I'll make it a bit more usable this week.</p>",
        "id": 156994368,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548634836
    },
    {
        "content": "<p>Could you try something from <a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean/blob/master/src/limits.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1P1-lean/blob/master/src/limits.lean\">https://github.com/ImperialCollegeLondon/M1P1-lean/blob/master/src/limits.lean</a>?</p>",
        "id": 157063321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548714631
    },
    {
        "content": "<p>Sure, I'll sort it out this weekend</p>",
        "id": 157389394,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1549058248
    },
    {
        "content": "<p>I worked on it a little bit and there's a bug that I haven't solved yet. I'll put it here as soon as I figure out how to make it work.</p>",
        "id": 157490886,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1549240532
    },
    {
        "content": "<p>I also worked on a prototype of a read-only online viewer this week-end (no Lean running in the browser). I hope I'll have something to show later today.</p>",
        "id": 157504786,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549264893
    },
    {
        "content": "<p>I think I'll stop with my experiment for now. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> could you tell me if <a href=\"https://www.math.u-psud.fr/~pmassot/lean/\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/lean/\">https://www.math.u-psud.fr/~pmassot/lean/</a> looks like what you wanted? You should mouse over everything to see what happens. This file is auto-generated from <a href=\"https://www.math.u-psud.fr/~pmassot/lean/source.html\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/lean/source.html\">https://www.math.u-psud.fr/~pmassot/lean/source.html</a></p>",
        "id": 157558129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549315138
    },
    {
        "content": "<p>In particular, tactic lines begin and end with an active zone that is currently not so easy to spot</p>",
        "id": 157558212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549315211
    },
    {
        "content": "<p>That looks much cleaner than what I have here ! Could you send its code so I can add the interactive part to it ?</p>",
        "id": 157561730,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1549318338
    },
    {
        "content": "<p>The UI to inspect the current tactic state is a bit confusing (invisible regions that highlight when you mouse over?)</p>",
        "id": 157564224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549320576
    },
    {
        "content": "<p>(but otherwise pretty great!)</p>",
        "id": 157564230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549320585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, I see in the source file that you've introduced your own mini mark-up language, e.g. things like:</p>\n<div class=\"codehilite\"><pre><span></span>/- Sub-section\nBasic definitions\n-/\n</pre></div>\n\n\n<p>I wonder if it might be better to just use markdown for this.</p>",
        "id": 157564601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549320937
    },
    {
        "content": "<p>This is really cool! It looks like, if a line in the source has both code and a comment, only the comment is printed in the HTML, is that right? This means you see a bunch of <code>}</code> but no  <code>{</code>.</p>",
        "id": 157564692,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549321044
    },
    {
        "content": "<p>I was about to say exactly the same thing! :-)</p>",
        "id": 157564880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549321208
    },
    {
        "content": "<p>Having a link that pops out a proof into an interactive lean session would be pretty nice, too.</p>",
        "id": 157564914,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549321239
    },
    {
        "content": "<p>I'll show this to the kids today (I give an optional analysis lecture Tuesday 1-2 every week). It's really nice!</p>",
        "id": 157588296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549351917
    },
    {
        "content": "<p>Allowing Markdown syntax for title is trivial, except that I put the constrain that the Lean file should compile, so the markdown has to be wrapped in a Lean comment. Would you like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- # My title</span>\n</pre></div>\n\n\n<p>Of course one could also builds a tool which starts with a combined file and independently spits out a valid Lean file and a valid html file. But I really like to be able to write the source file in VScode with real time Lean compilation.</p>",
        "id": 157588424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549352088
    },
    {
        "content": "<p>About lines like <code>  { -- We assume...</code> : This is indeed handled as a special case. I know the result is a bit weird but I don't know what we want here. Does anyone has a clear idea of what the source and rendered result should look like?</p>",
        "id": 157588508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549352183
    },
    {
        "content": "<p>I warned that the UI for showing tactics would be weird. Again I need suggestions. I don't want to have buttons shown permanently around each Lean line. Maybe I could show two buttons when the mouse is over the Lean line. This would be very touch unfriendly, but the interface is currently oriented towards wide screens anyway (although it would be trivial to but tactic state below the main view on narrow screens)</p>",
        "id": 157588572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549352316
    },
    {
        "content": "<p>I think that having shading permanently around each Lean line would be fine. It doesn't have to look like a button, you could make it only slightly different from the background color.</p>",
        "id": 157591138,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549355813
    },
    {
        "content": "<p>Could you just make the entire line clickable? As soon as I click somewhere on a line of Lean code, the tactic state updates to that point. That would be quite intuitive, I think.</p>",
        "id": 157591381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549356146
    },
    {
        "content": "<p>I could do that of course. I don't know whether it would become much longer to generate the file. I guess the Lean server responds pretty quickly to VScode, but here it means the lean to html conversion would ask for the Lean state at every single character of the proofs</p>",
        "id": 157633518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549395072
    },
    {
        "content": "<p>This is useful only in case of rewrite with a list of lemmas or equalities. Otherwise the tactic state doesn't change in the middle of a line</p>",
        "id": 157633605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549395130
    },
    {
        "content": "<p>Aah, no, I just meant to update to <em>after</em> that line.</p>",
        "id": 157633647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549395185
    },
    {
        "content": "<p>So to bad for <code>rw [foo, bar]</code>.</p>",
        "id": 157633663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549395203
    },
    {
        "content": "<p>The problem is you also want to see the state before a line, especially the first line of a proof</p>",
        "id": 157633766,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549395288
    },
    {
        "content": "<p>UI is hard</p>",
        "id": 157633782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549395301
    },
    {
        "content": "<p>I pushed what I think is Rob's suggestion (clickable areas are permanently slightly darker)</p>",
        "id": 157633882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549395393
    },
    {
        "content": "<blockquote>\n<p>UI is hard</p>\n</blockquote>\n<p>Definitely. And after &gt;10 years of fooling around I've discovered that I'm not right person for that job (-;</p>",
        "id": 157634745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549396084
    },
    {
        "content": "<p>I think it wouldn't be that difficult to add the interactive part to it. So that one can double click on a line and go into edit mode and play around.</p>",
        "id": 157635561,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1549396693
    },
    {
        "content": "<p>Fixing the latex part in the interactive code that I sent only needed a few lines, but it took me a while to figure out what was wrong. And it seems like the lean server doesn't like firefox very much. It seems to be working in Chrome. Making a good UI on the other hand is gonna take some time. It would be much easier to add the interactive part to this UI.</p>",
        "id": 157636297,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1549397276
    },
    {
        "content": "<p>I think I'm done removing all the hard-coded paths in my script, so that other people could play with it (I hope). It's not the same thing as claiming I've cleaned the code...</p>",
        "id": 157641035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549401260
    },
    {
        "content": "<p>You can find it at <a href=\"https://github.com/leanprover-community/format_lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean\">https://github.com/leanprover-community/format_lean</a></p>",
        "id": 157641045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549401272
    },
    {
        "content": "<p>The main thing is a very simple finite state machine. It's based on functions, so it's functional programming, right? The two main principles are:</p>\n<ul>\n<li>every function should take every opportunity to modify its arguments</li>\n<li>every function should use the state of the environment at the time it was defined</li>\n</ul>",
        "id": 157641103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549401359
    },
    {
        "content": "<p>Every line from the source file is read, and falls into one of three categories: blank line, normal line and special line. Each reader registers a number of special lines handlers, as in <a href=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/lecture.py#L307-L311\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/lecture.py#L307-L311\">https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/lecture.py#L307-L311</a> which is the reader used in my demo. Each handlers has a regex that is match against the current line. If it matches, the handlers has the opportunity to inspect the current state of the file reader, and change it. It particular it will most probably change how normal lines and blank lines will be interpreted. The simplest case is <a href=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/lecture.py#L103-L109\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/lecture.py#L103-L109\">https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/lecture.py#L103-L109</a> which discards the Lean header. Of course it can  say that normal lines will be somehow added to the output, maybe after querying a Lean server for tactic state. Then the collected output is passed to a renderer. The renderer I've defined in <a href=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/renderer.py\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/renderer.py\">https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/renderer.py</a> in based on Jinja2.</p>",
        "id": 157641500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549401678
    },
    {
        "content": "<p>People who only want to play with the UI can tweak the CSS at <a href=\"https://github.com/leanprover-community/format_lean/tree/master/sass\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean/tree/master/sass\">https://github.com/leanprover-community/format_lean/tree/master/sass</a> (you need to know tiny bit if SASS) and the templates at <a href=\"https://github.com/leanprover-community/format_lean/tree/master/templates\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean/tree/master/templates\">https://github.com/leanprover-community/format_lean/tree/master/templates</a> (you may need a tiny bit of Jinja2)</p>",
        "id": 157641612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549401765
    },
    {
        "content": "<p>Of course I can try to write proper documentation if someone actually wants to modify all this</p>",
        "id": 157641872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549401970
    },
    {
        "content": "<p>I should use the VScode regex for tactic state highlighting instead of pygment</p>",
        "id": 157643822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549403579
    },
    {
        "content": "<p>VS Code's syntax highlighting uses \"textMate\" grammars, and when I looked before, I wasn't able to find any standalone syntax colorizers that accept that format. (The online lean demo pages get this functionality via the Monaco editor). I was only looking for JS packages though, it's possible there are some in python.</p>",
        "id": 157644443,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1549404121
    },
    {
        "content": "<p>I used pygments, which is a python lib (actually I used Gabriel's fork which is more suitable for Lean). But the VScode extension does not use textMate for the tactic state view, see <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L412-L418\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L412-L418\">https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L412-L418</a></p>",
        "id": 157651481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549410246
    },
    {
        "content": "<p>Ah, of course. I missed the most important part \"tactic state\".</p>",
        "id": 157655450,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1549414815
    },
    {
        "content": "<p>Just to say publically what I said to Patrick yesterday -- on Friday I showed this to some students who I meet weekly and who went to my lectures last term (so know what Lean is) but have no interest in Lean. They were really interested in this though, and wanted more. It's like <a href=\"https://coq.inria.fr/tutorial-nahas\" target=\"_blank\" title=\"https://coq.inria.fr/tutorial-nahas\">this</a> (Coq) but infinitely nicer-looking. I'll try and work on some more of this today. I have a bunch of basic analysis formalised <a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1P1-lean\">here</a> and it would be great to get it into Patrick's format.</p>",
        "id": 157929110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549716455
    },
    {
        "content": "<p>One of them was complaining that they couldn't follow the proof given by the lecturer for one of the theorems, and I pointed out that this could never happen with a formalised version because you can always chase back.</p>",
        "id": 157929152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549716502
    },
    {
        "content": "<p>I guess my main quibble with it would be the format, I have been looking at the various 'literate programming' tools around, which take a different approach, instead of encoding the documentation in the source comments, they embed the sources in a documentation format, and then extract the sources. I guess perhaps that would be useful if you wanted to e.g. embed excercises, and extract stand alone snippets from the book.</p>",
        "id": 157935083,
        "sender_full_name": "matt rice",
        "timestamp": 1549727857
    },
    {
        "content": "<p>This is really two different point of view on the same thing. In my version the focus is on writing documented Lean code, not writing documentation containing Lean code</p>",
        "id": 157935150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549727986
    },
    {
        "content": "<p>I know nothing about \"literate programming\" -- I want to write a \"book\" here, a companion to our undergraduate analysis course at Imperial College which will be part of our new curriculum.</p>",
        "id": 157935192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549728006
    },
    {
        "content": "<p>In particular my version allows to get the interactivity of Lean while writing.</p>",
        "id": 157935202,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549728020
    },
    {
        "content": "<p>Matt, the thing you want already exists, it's used to write TPIL for instance</p>",
        "id": 157935207,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549728047
    },
    {
        "content": "<p>Patrick: Thanks, will look, i had looked at the sources for Logic &amp; Proof, but hadn't seen a mechanism for extracting the sources from it</p>",
        "id": 157935271,
        "sender_full_name": "matt rice",
        "timestamp": 1549728179
    },
    {
        "content": "<p>One other thing to note about css, i ran across <a href=\"https://github.com/edwardtufte/tufte-css\" target=\"_blank\" title=\"https://github.com/edwardtufte/tufte-css\">https://github.com/edwardtufte/tufte-css</a> yesterday which looks really nice</p>",
        "id": 157935339,
        "sender_full_name": "matt rice",
        "timestamp": 1549728308
    },
    {
        "content": "<p>I've added Mardown support. Now any text comment</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">My comment</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>is run through <a href=\"https://github.com/miyuchina/mistletoe\" target=\"_blank\" title=\"https://github.com/miyuchina/mistletoe\">https://github.com/miyuchina/mistletoe</a> I chose this markdown python library a bit at random, let's see if it works</p>",
        "id": 157944527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549744313
    },
    {
        "content": "<p>I just added a command line client, see <a href=\"https://github.com/leanprover-community/format_lean/blob/master/README.md#usage\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean/blob/master/README.md#usage\">https://github.com/leanprover-community/format_lean/blob/master/README.md#usage</a></p>",
        "id": 157945837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549746811
    },
    {
        "content": "<p>Now I'll stop for one week again, waiting for Kevin to write example Lean files.</p>",
        "id": 157945843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549746842
    },
    {
        "content": "<blockquote>\n<p>One of them was complaining that they couldn't follow the proof given by the lecturer for one of the theorems, and I pointed out that this could never happen with a formalised version because you can always chase back.</p>\n</blockquote>\n<p>I'm pretty unconvinced of this. There are many proofs in mathlib which are only human decipherable with enormously more effort than would be required for a good textbook proof, _even if_ you already read Lean well.</p>",
        "id": 157946196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549747462
    },
    {
        "content": "<p>The solution, of course, is for us all to have more time on our hands, and to improvement human comprehensibility of mathlib proofs. :-)</p>",
        "id": 157946211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549747520
    },
    {
        "content": "<p>Increasing expectations of readability would be a reasonable first step.</p>",
        "id": 157946213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549747537
    },
    {
        "content": "<p>This is another thing I miss with metamath - you can actually say that and be correct. Most proof assistants, including lean, do too much behind the scenes work so that it is not really comprehensible to a human even in relatively simple cases</p>",
        "id": 157946284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549747676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> did you see the proofs we are talking about? There are nothing like mathlib proofs. There are written specifically for students, and heavily commented.</p>",
        "id": 157947089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549749028
    },
    {
        "content": "<p>Absolutely! Those proofs are fantastic. I was only disagreeing with Kevin's suggestion that one could always drill down until you understood everything. Drilling down probably means descending into mathlib, and understanding becomes increasingly difficult.</p>",
        "id": 157947246,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549749305
    },
    {
        "content": "<p>Oh yes, you shouldn't drill too deep, that's notoriously dangerous</p>",
        "id": 157947255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549749340
    },
    {
        "content": "<p>Oh I see what you mean. I have been thinking about this a little -- it would be nice if ultimately we could guide some drilling to the library which will hide all our dirty work (e.g. tactics such as \"apply le_max_left &lt;|&gt; linarith\") and then put big warning signs in there not to drill any more!</p>",
        "id": 157949733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549753959
    },
    {
        "content": "<p>I'm not convinced hiding dirty work is a good idea for teaching Lean. As soon as someone tries to write their own proof, they'll find they need to know how to do the dirty work. Maybe it is a good idea for teaching analysis though.</p>",
        "id": 157952751,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549759655
    },
    {
        "content": "<p>strong agree on this. If you actually expect to teach people how to use the tool, they have to feel the \"typical experience\", not the \"rose-colored talk version of lean\"</p>",
        "id": 157952793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549759733
    },
    {
        "content": "<p>This is <em>not</em> a tool for teaching people Lean.</p>",
        "id": 157953934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549761869
    },
    {
        "content": "<p>This is a tool for teaching people analysis.</p>",
        "id": 157953935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549761879
    },
    {
        "content": "<p>I absolutely agree that you can't teach Lean this way. Neil tried it with his write-ups and I think they're too long and complicated. This is a different thing. This is for students who know no Lean but want to pass a basic analysis exam. The Lean code is intimidating but the tactic state is not. The tactic state, and in particular the goal, often make a lot of sense here.</p>",
        "id": 157953949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549761950
    },
    {
        "content": "<p>If you want to teach mathematicians Lean you have to start with 2+2=4 and (a+b)^2=a^2+2ab+b^2.</p>",
        "id": 157954003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762018
    },
    {
        "content": "<p>Stuff they learnt at school and can hence assume.</p>",
        "id": 157954013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762034
    },
    {
        "content": "<p>I am not sure about that. The solution to the first one is DTT magic and the second is lean magic</p>",
        "id": 157954016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762059
    },
    {
        "content": "<p>Well, you have TPIL to teach your tribe how to use Lean. Teaching my tribe is harder and maybe I still haven't worked out how to do it.</p>",
        "id": 157954060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762097
    },
    {
        "content": "<p>examples like that just leave people bewildered as to what just happened</p>",
        "id": 157954064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762128
    },
    {
        "content": "<p>But I've got 150 feedback forms and I am now convinced that I want to teach people analysis and have Lean ticking away in the background</p>",
        "id": 157954066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762133
    },
    {
        "content": "<p>We teach people mathematics in high school in a completely non-rigorous way; arguments like limit of sin(x)/x is 1 is proved by \"draw a picture\". Then students go to university and see how it's done rigorously.</p>",
        "id": 157954077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762182
    },
    {
        "content": "<p>I think it's great for demos, to show that lean has a chance of really getting to the hard problems by making the easy problems easy, but that's not the same thing</p>",
        "id": 157954078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762184
    },
    {
        "content": "<p>I'm quite dubious as to the actual long term success of this approach. The people who last are the ones who dive into the details</p>",
        "id": 157954133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762232
    },
    {
        "content": "<p>Maths lectures are one level of rigour up. We present proofs which we claim are rigorous, at least most of the time. But arguments are still sometimes handwavey. Chris was told in 2nd year lectures the other day that the proof of some theorem about two integrals being equal was \"draw the obvious picture\".</p>",
        "id": 157954148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762268
    },
    {
        "content": "<p>For first introductions, you really want to get that spark of interest, and these approaches work well. But after that, once they are committed, you want to step back and do it systematically</p>",
        "id": 157954154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762300
    },
    {
        "content": "<p>you can't handwave at lean, no matter how much you want to</p>",
        "id": 157954196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762329
    },
    {
        "content": "<p>Maths students don't have enough time to learn Lean properly but I want them to engage with it at some level anyway.</p>",
        "id": 157954197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762334
    },
    {
        "content": "<p>Just like last year, it's past Christmas and my 1st years realise that in a few months they have a bunch of exams to deal with. I get 6-7 people at Xena and they're all dedicated people who can actually write Lean code. But there are literally 100 other people who would be interested in that web page.</p>",
        "id": 157954208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762384
    },
    {
        "content": "<p>I think for a formalizer or budding formalizer, the most valuable skill is being able to deconstruct a mathematician's argument. When they say draw the obvious picture, draw it, convince yourself, and go back over why you are convinced and work it down to something precise</p>",
        "id": 157954217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762429
    },
    {
        "content": "<p>I can't make them learn the details of how it all works. But they can see the goals changing and the hypotheses appearing -- that stuff is easy to understand and they have never seen anything like it before.</p>",
        "id": 157954219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762432
    },
    {
        "content": "<p>I have to work with what I have, and what I have is people who can't get over the learning curve but who i want to engage anyway. This is a good half way house for them; I've tried it and I have had very positive results.</p>",
        "id": 157954263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762485
    },
    {
        "content": "<p>I think it's similar to the difference between a textbook for a foreign language and a phrasebook</p>",
        "id": 157954274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762514
    },
    {
        "content": "<p>I know exactly who I'm teaching and what I want to teach them -- and at the end of the day, I want to make sure they can do an epsilon-delta argument correctly. That's the important thing. They're paying £9000 or £28000 and at the end of it they have to pass an exam with epsilon-delta questions in. That's what they're interested in.</p>",
        "id": 157954319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762565
    },
    {
        "content": "<p>the phrasebook will help you out on the spot, let you get around, and so on. But it's not building a foundation for the dedicated, and while it's not really harmful you will still need to go back and cover the basics if you decide to go all in</p>",
        "id": 157954324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762593
    },
    {
        "content": "<p>If they look at the material presented like in Patrick's html file, then at any stage they can see a completely rigorous assertion. This is what many of them need to see at this stage -- because <em>this is what the exam will be in</em>. They want to pass the exam -- that is what they are mainly motivated by. This will teach them what they want to learn.</p>",
        "id": 157954336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762641
    },
    {
        "content": "<p>I say again -- I am not attempting to teach them Lean.</p>",
        "id": 157954339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762662
    },
    {
        "content": "<p>I am attempting to show them that Lean can be used as a good learning tool for mathematics.</p>",
        "id": 157954341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762674
    },
    {
        "content": "<p>I am not saying you are doing it wrong, even. There are different learning objectives in play</p>",
        "id": 157954386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762693
    },
    {
        "content": "<p>They come here from school and they think very vaguely, many of them. They struggle in pure maths. Next year the syllabus is being completely revamped and it will be much harder. The new students next year will need even better teaching materials, and I think I am looking at them in Patrick's html file.</p>",
        "id": 157954393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549762725
    },
    {
        "content": "<p>I think the isabelle style statement chaining + heavy automation approach is good as an antidote to vague thinking in that it can spot check your assertions, before you go too far off the rails</p>",
        "id": 157954460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762861
    },
    {
        "content": "<p>For the ones who ask <em>how does math work</em> it's better to have a more explicit metamath style where they can drill down until their heads explode (or they are satisfied, whichever comes first)</p>",
        "id": 157954523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762946
    },
    {
        "content": "<p>right now lean is much closer to the first approach</p>",
        "id": 157954531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549762984
    },
    {
        "content": "<p>although you can use it in the second way, like TPIL does</p>",
        "id": 157954538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549763012
    },
    {
        "content": "<p>I really think we should create that \"Lean for teaching\" stream in order to clear this confusion.</p>",
        "id": 157966624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549788270
    },
    {
        "content": "<p>I got Patrick's formatter working :D <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/analysis_stuff/sandwich.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/analysis_stuff/sandwich.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/analysis_stuff/sandwich.html</a></p>",
        "id": 158025498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549886563
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/JdAEw2Xqv8OuNgE4Ed86MzG9/sandwich.png\" target=\"_blank\" title=\"sandwich.png\">sandwich.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JdAEw2Xqv8OuNgE4Ed86MzG9/sandwich.png\" target=\"_blank\" title=\"sandwich.png\"><img src=\"/user_uploads/3121/JdAEw2Xqv8OuNgE4Ed86MzG9/sandwich.png\"></a></div>",
        "id": 158025526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549886633
    },
    {
        "content": "<p>Source is <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/analysis_stuff/sandwich.lean\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/analysis_stuff/sandwich.lean\">http://wwwf.imperial.ac.uk/~buzzard/xena/analysis_stuff/sandwich.lean</a> -- a Lean file which compiles (for me -- there are local imports)</p>",
        "id": 158026117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549887455
    },
    {
        "content": "<p>There is weird typesetting in <code>so for all n ≥ N</code></p>",
        "id": 158026268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549887649
    },
    {
        "content": "<p>Otherwise, this confirms that Patrick created something cool (-;</p>",
        "id": 158026274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549887662
    },
    {
        "content": "<p>Yeah, in the png? I fixed it in the html. I'm still figuring out what one can get away with.</p>",
        "id": 158026288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549887688
    },
    {
        "content": "<p>it confirms that Patrick created something which someone other than Patrick can run, which is a useful thing to know.</p>",
        "id": 158026355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549887771
    },
    {
        "content": "<p>Perhaps I won't mention that I had to move my import <code>limits.lean</code> into mathlib to get it to compile <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 158026376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549887811
    },
    {
        "content": "<p>Currently the tool allows only one supporting library, but this is easy to fix. First I need to teach RSA, but then I'll fix that tonight</p>",
        "id": 158027588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549889362
    },
    {
        "content": "<p>I wonder if we could extend the usefulness of these non-interactive literate formalisations. Given that the goal state is so helpful for someone following along but perhaps having difficulty seeing what a step achieves, we could try to make the goal state even more understandable. What if we turned every name appearing in the goal state into a hyperlink, that links back to the source code of mathlib where it is defined? (Ideally, this would be a html-ified copy of the source code, that in turn has hyperlinks everywhere.) More complicated, as an optional extra names that have been defined in the current document could be have relative hyperlinks, that revealed that fragment of Lean code.</p>",
        "id": 158064512,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549918510
    },
    {
        "content": "<p>Independently, merely having a fully crosslinked html version of the mathlib source code would be pretty helpful. I'm not sure if our current tooling lets us write this, yet.</p>",
        "id": 158064621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549918592
    },
    {
        "content": "<p>In principle this is already possible. I'm a bit hesitant to work on this because it should become much easier with the Lean 4 parser. But, in principle, we can ask Lean for information at every single location of the source file, and create the links</p>",
        "id": 158064728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549918686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I just pushed a new commit adding the possibility to handle full projects (see README). The nice thing is everything setup you need can be read from <code>leanpkg.toml</code> so you can simply go to the root of your project and type <code>format_project</code>. I also added a handler for theorems if lemmas are not good enough for you.</p>",
        "id": 158068440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549921679
    },
    {
        "content": "<blockquote>\n<p>In principle this is already possible. I'm a bit hesitant to work on this because it should become much easier with the Lean 4 parser. But, in principle, we can ask Lean for information at every single location of the source file, and create the links</p>\n</blockquote>\n<p>I have a really clunky implementation of this lying around somewhere, I could dig it up at some point</p>",
        "id": 158081144,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549933074
    },
    {
        "content": "<p>Little styling-bug report for Lean formatter (<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>). In Kevin's demo: <a href=\"http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\">http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html</a> click on the line \"Note that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>≥</mo><msub><mi>N</mi><mi>a</mi></msub></mrow><annotation encoding=\"application/x-tex\">N \\ge N_a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"mrel\">≥</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>≥</mo><msub><mi>N</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">N \\ge N_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"mrel\">≥</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>,\" in the proof. Then you get two Lean-lines of the same length; but the tactic-state-buttons don't align.</p>",
        "id": 158103134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549962824
    },
    {
        "content": "<p>Also, low-urgency feature request: Can we get resizable tactic-state window? Like in VScode?</p>",
        "id": 158103193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549962856
    },
    {
        "content": "<p>Also: I can't get to see \"no goals\" when I click on the last tactic-state-button of the proof (after <code>split;linarith</code> in Kevin's demo).</p>",
        "id": 158103356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549963061
    },
    {
        "content": "<p>Does putting a comma on the last line help with that?</p>",
        "id": 158103549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549963305
    },
    {
        "content": "<p>Probably, but it would be nice if that is not part of the user manual of Lean-formatter...</p>",
        "id": 158103622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549963371
    },
    {
        "content": "<p>Anyway, these are pretty low-urgency things, I would say.</p>",
        "id": 158103639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549963385
    },
    {
        "content": "<p>I'm sad that I can't click on <code>obvious_ineq</code> to find out what it is</p>",
        "id": 158103649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549963409
    },
    {
        "content": "<p>Hahaha</p>",
        "id": 158103651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549963418
    },
    {
        "content": "<p>but I guess I'm not the target audience</p>",
        "id": 158103657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549963430
    },
    {
        "content": "<p>Johan, the two styling issues you mention are straight from the Lean source. The lines that don't line up actually have different length in <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/analysis_stuff/sandwich.lean\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/analysis_stuff/sandwich.lean\">http://wwwf.imperial.ac.uk/~buzzard/xena/analysis_stuff/sandwich.lean</a> (one of them ends with spurious spaces). I guess I could strip spaces at the end of lines, but it would remove some of the author liberty. The missing \"no goals\" comes straight from Lean. Adding a comma at the end of the line in the source would indeed fix that issue. The resizable tactic state is probably possible, I need to study more javascript and css</p>",
        "id": 158112230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549973308
    },
    {
        "content": "<p>feedback from a guinea pig from imperial year 2:</p>\n<blockquote>\n<p>It’s nice / The animations are smooth / But it’s not obvious that you need to press on the definitions to reveal the code / Lines, not definitions / Apart from that, it’s really nice</p>\n</blockquote>",
        "id": 158116627,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549977780
    },
    {
        "content": "<blockquote>\n<p>One other thing to note about css, i ran across <a href=\"https://github.com/edwardtufte/tufte-css\" target=\"_blank\" title=\"https://github.com/edwardtufte/tufte-css\">https://github.com/edwardtufte/tufte-css</a> yesterday which looks really nice</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"143402\">@matt rice</span> I tried it in <a href=\"http://pat.perso.ens-lyon.org/math114/cours1.html\" target=\"_blank\" title=\"http://pat.perso.ens-lyon.org/math114/cours1.html\">http://pat.perso.ens-lyon.org/math114/cours1.html</a> and I agree it looks pretty nice. Here I also used other templates of <code>lean-format</code> to get inlined tactic state. This is part of lecture notes I'm writing for my logic and proof course. The source is at <a href=\"http://pat.perso.ens-lyon.org/math114/source.html\" target=\"_blank\" title=\"http://pat.perso.ens-lyon.org/math114/source.html\">http://pat.perso.ens-lyon.org/math114/source.html</a> for people who want to see how Markdown and LaTeX are handled.</p>",
        "id": 158655328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550269454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I have a new iteration for you: <a href=\"http://pat.perso.ens-lyon.org/M1P1/\" target=\"_blank\" title=\"http://pat.perso.ens-lyon.org/M1P1/\">http://pat.perso.ens-lyon.org/M1P1/</a> is your sandwich file, rendered in \"no lean proof\" mode, only tactic state. It also uses the new tactic state tampering feature, see the <a href=\"http://pat.perso.ens-lyon.org/M1P1/format.toml\" target=\"_blank\" title=\"http://pat.perso.ens-lyon.org/M1P1/format.toml\">config file used for this render</a> (beware my Firefox needs to be explicitly told to use UTF8 when opening that file)</p>",
        "id": 159197767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550875180
    },
    {
        "content": "<p>I guess it's clearer if I post the config file here:</p>\n<div class=\"codehilite\"><pre><span></span>templates = &quot;templates&quot;\njs = [&quot;lean_tufte.js&quot;]\ncss = [&quot;tufte.css&quot;, &quot;et-book.css&quot;, &quot;with_tufte.css&quot;]\nassets = [&quot;et-book&quot;, &quot;tufte.css&quot;, &quot;et-book.css&quot;]\noutdir = &quot;M1P1&quot;\nonly = [&quot;sandwich.lean&quot;]\ntactic_state_filters = [\n  [&#39;is_limit ([^ ]+) ([^ ]+)&#39;, &#39;\\1ₙ tends to \\2&#39;],\n  [&#39;ℕ → ℝ&#39;, &#39;ℝ-valued sequence&#39;],\n  [&#39;([a-z]) n([ ,\\n])&#39;, &#39;\\1ₙ\\2&#39;],\n  [&#39;no goals&#39;, &#39;Current goal completed!&#39;],\n]\n</pre></div>",
        "id": 159197974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550875337
    },
    {
        "content": "<p>Of course this kind of regex tampering is very brittle, but we won't be able to do much more before Lean 4's customizable pretty printer <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 159198031,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550875385
    },
    {
        "content": "<p>Wow! That looks very slick. Congratulations!</p>",
        "id": 159214605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550899255
    },
    {
        "content": "<p>One little point of feedback. You have joined together the lines in the html output. I agree that this is a good move. But the result is that you have two grey boxes next to each other (1 end-of-line, 1 start-of-line) that have the same resulting tactic state. I think it would be even better if you could merge these boxes into one box.</p>",
        "id": 159214661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550899351
    },
    {
        "content": "<p>Of course one problem is that, in more complicated proofs, those two boxes could lead to different states (in case of subproofs). We would need more examples of formatted proofs actually. Then we'll be able to decide whether something smarter should be done.</p>",
        "id": 159220479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550910878
    },
    {
        "content": "<p>I'd like to also point out that everyone can play with this tool. Modifying CSS and template files doesn't even require any python knowledge</p>",
        "id": 159220683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550911257
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> I have a new iteration for you: <a href=\"http://pat.perso.ens-lyon.org/M1P1/\" target=\"_blank\" title=\"http://pat.perso.ens-lyon.org/M1P1/\">http://pat.perso.ens-lyon.org/M1P1/</a> is your sandwich file, rendered in \"no lean proof\" mode, only tactic state. It also uses the new tactic state tampering feature, see the <a href=\"http://pat.perso.ens-lyon.org/M1P1/format.toml\" target=\"_blank\" title=\"http://pat.perso.ens-lyon.org/M1P1/format.toml\">config file used for this render</a> (beware my Firefox needs to be explicitly told to use UTF8 when opening that file)</p>\n</blockquote>\n<p>This looks great! Is this compiled with the latest version on github ? There seems to be some bugs in the code, I couldn't run it.</p>",
        "id": 159861933,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1551642279
    },
    {
        "content": "<p>I completely missed this! That's beautiful Patrick!</p>",
        "id": 159863117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551644342
    },
    {
        "content": "<p>Yes, I can confirm this builds using the latest version on github. You need to put the config file  I linked to in the project directory</p>",
        "id": 159865146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551647708
    },
    {
        "content": "<p>oh wait</p>",
        "id": 159865150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551647732
    },
    {
        "content": "<p>you need more</p>",
        "id": 159865152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551647736
    },
    {
        "content": "<p>I'm sorry</p>",
        "id": 159865155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551647740
    },
    {
        "content": "<p>I forgot some pieces</p>",
        "id": 159865159,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551647749
    },
    {
        "content": "<p>A suggestion for this tool --- I can see you're writing the types to give \"human friendly\" names in places (like \"R-valued sequence\").</p>",
        "id": 159865211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551647809
    },
    {
        "content": "<p>I wonder if it might be better to give the human friendly name as a comment after the actual type.</p>",
        "id": 159865220,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551647826
    },
    {
        "content": "<p>This way reading the proof states is still a bridge towards learning Lean, and ensures consistency (I haven't seen an example, but I'm worried that these rewrites might not be uniformly applied when the types appear nested inside something else?)</p>",
        "id": 159865272,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551647904
    },
    {
        "content": "<p>I've put a standalone archive at <a href=\"http://www.math.u-psud.fr/~pmassot/M1P1.tar.gz\" target=\"_blank\" title=\"http://www.math.u-psud.fr/~pmassot/M1P1.tar.gz\">www.math.u-psud.fr/~pmassot/M1P1.tar.gz</a></p>",
        "id": 159865273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551647907
    },
    {
        "content": "<p>The human friendly type is clearly a horrible hack, waiting for <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span>  pretty-printer</p>",
        "id": 159865287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551647945
    },
    {
        "content": "<p>currently it's nothing more than a regex search and replace</p>",
        "id": 159865291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551647984
    },
    {
        "content": "<p>Okay. Even with a better pretty printer, I like the idea of displaying types in a way that can be re-entered in Lean, with read-only versions for humans in comments.</p>",
        "id": 159865406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551648126
    },
    {
        "content": "<p>In any case, this is cool stuff!</p>",
        "id": 159865409,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551648131
    },
    {
        "content": "<p>This style of rendering is designed to hide Lean as much as possible, there are other choices of templates that display also the Lean statement and proof. It's a different intent.</p>",
        "id": 159865433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551648201
    },
    {
        "content": "<p>Anyway, if you like this you can use it. If people start using it I'll keep improving it.</p>",
        "id": 159865479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551648251
    },
    {
        "content": "<p>Although I'd like to do some actual Lean this week (but I'm stuck until someone understands what happens with <a href=\"#narrow/stream/116395-maths/topic/uniform.20split/near/159860012\" title=\"#narrow/stream/116395-maths/topic/uniform.20split/near/159860012\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/uniform.20split/near/159860012</a>)</p>",
        "id": 159865493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551648300
    },
    {
        "content": "<p>I finally finished adding the interactive component to Lean formatter. The syntax is the same as before and I tried to keep the changes minimal. <a href=\"https://github.com/mpedramfar/format_lean\" target=\"_blank\" title=\"https://github.com/mpedramfar/format_lean\">https://github.com/mpedramfar/format_lean</a>.</p>",
        "id": 163352681,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1555304711
    },
    {
        "content": "<p>Sounds good! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> I'll try to find some time to play around with this. But my time is a bit limited this week <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 163352759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555304877
    },
    {
        "content": "<p>I needed to run <code>pip3 install .</code>, not <code>pip install .</code>.</p>",
        "id": 163353135,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555305538
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>arguta:mathlib scott$ format_project --outdir my_dir\nTraceback (most recent call last):\n  File &quot;/usr/local/bin/format_project&quot;, line 12, in &lt;module&gt;\n    from format_lean.renderer import Renderer\n  File &quot;/usr/local/lib/python3.7/site-packages/format_lean/renderer.py&quot;, line 9, in &lt;module&gt;\n    from pygments.lexers import LeanLexer\nModuleNotFoundError: No module named &#39;pygments&#39;\n</pre></div>",
        "id": 163353221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555305697
    },
    {
        "content": "<p>After installing Gabriel's fork of <code>pygments</code>, I ran into</p>\n<div class=\"codehilite\"><pre><span></span>arguta:mathlib scott$ format_project --outdir my_dir\nTraceback (most recent call last):\n  File &quot;/usr/local/bin/format_project&quot;, line 23, in &lt;module&gt;\n    from interactive.server import interactive_server\nModuleNotFoundError: No module named &#39;interactive&#39;\n</pre></div>\n\n\n<p>and will give up at this point. :-)</p>",
        "id": 163353273,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555305767
    },
    {
        "content": "<blockquote>\n<p>I needed to run <code>pip3 install .</code>, not <code>pip install .</code>.</p>\n</blockquote>\n<p>If running pip is not the same as running pip3, then you might be working outside any virtual environment (the default python version of ubuntu is 2.7). This code needs python &gt;= 3.<br>\nI also realised that in \"INSTALL.md\", in the instructions, I have a link to Patrick's Lean formatter. If you have installed that version of Lean formatter, then it makes sense for it to say it can't find the 'interactive' module. I fixed the typos.</p>",
        "id": 163356455,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1555310637
    },
    {
        "content": "<p>Yes, I'm just running on a mac, where <code>pip</code> is for the python 2 installation, and <code>pip3</code> is for the python 3. I don't think this is uncommon, and I think it's pretty uniform to have a <code>pip3</code> available, so I'd just suggest changing the instructions to use that.</p>",
        "id": 163357082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555311423
    },
    {
        "content": "<p>So... what do I do to fix this \"No module named 'interactive'\" problem?</p>",
        "id": 163357090,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555311445
    },
    {
        "content": "<blockquote>\n<p>So... what do I do to fix this \"No module named 'interactive'\" problem?</p>\n</blockquote>\n<p>I just learned something new about how python installs packages. I'll fix it.</p>",
        "id": 163361201,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1555316104
    },
    {
        "content": "<p>The dream of a fully interactive Lean/LaTeX book gets a step closer :-)</p>",
        "id": 163361407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555316325
    },
    {
        "content": "<p>I think it should be working smoothly now. The installation process is also more straight-forward. It's a bit hacky, but it should do the job.</p>",
        "id": 163403012,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1555352283
    }
]