[
    {
        "content": "<p>In <code>topological_space.lean</code>, I see:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_open</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_univ</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">∩</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_sUnion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">t</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⋃₀</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">topological_space</span>\n</pre></div>",
        "id": 124809321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523219129
    },
    {
        "content": "<p>Why not directly replacing <code>structure</code> with <code>class</code>?</p>",
        "id": 124809361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523219168
    },
    {
        "content": "<p>What would be the difference?</p>",
        "id": 124809362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523219180
    },
    {
        "content": "<p>Currently the operations <code>topological_space.is_open</code> has an <strong>explicit</strong> <code>topological_space</code> argument, when using <code>class</code> this would be a <strong>instance</strong> argument. So when working with multiple topologies on the same type the current way is a little bit simpler as one can just write <code>t.is_open s</code>, instead of <code>@is_open _ t s</code>.</p>",
        "id": 124809726,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523220027
    },
    {
        "content": "<p>Thanks. What does this last line do then?</p>",
        "id": 124809769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523220132
    },
    {
        "content": "<p>we still want to use <code>topological_space</code> as a type class, for this we need to add this attribute. Later we add <code>is_open</code> etc as names in the root namespace with the corresponding <strong>instance</strong> arguments.</p>",
        "id": 124809778,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523220222
    },
    {
        "content": "<p>I sort of see. Do you have an example of a lemma involving two topological structures on the same type? I guess in this case you don't use square brackets arguments?</p>",
        "id": 124809868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523220396
    },
    {
        "content": "<p>I should be more precise, it is not about structures on the same type, but a way to refer explicitly to the structure and not be force to only refer to it  over the type. For example see: <a href=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/topological_space.lean#L712\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/topological_space.lean#L712\">https://github.com/leanprover/mathlib/blob/master/analysis/topology/topological_space.lean#L712</a> and following.</p>",
        "id": 124810140,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523221035
    },
    {
        "content": "<p>You mean the same definition with <code>class topological_space</code> would not give you a type <code>topological_space α</code>?</p>",
        "id": 124810253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523221306
    },
    {
        "content": "<p>But I can still do</p>",
        "id": 124810355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523221559
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">toto</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">toto</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 124810395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523221585
    },
    {
        "content": "<p>So I don't understand what you mean</p>",
        "id": 124810397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523221606
    },
    {
        "content": "<p>In my search for minimal example I noticed a class doesn't need to have any field <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue winking eye\">:stuck_out_tongue_winking_eye:</span></p>",
        "id": 124810407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523221663
    },
    {
        "content": "<p>No, <code>class topological_space</code> is nearly the same as <code>structure topological_space</code>. The main difference is the attribute added to <code>topological_space</code> and the binder information on the generated projections, i.e. that <code>is_open</code> has a explicit argument or that it has a type class instance argument.</p>",
        "id": 124811318,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523223909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">class</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- this doesn&#39;t work</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo&#39;</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo&#39;</span><span class=\"bp\">.</span><span class=\"n\">bar&#39;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- this works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- this works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"n\">foo&#39;</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H&#39;</span><span class=\"bp\">.</span><span class=\"n\">bar&#39;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- this doesn&#39;t work</span>\n</pre></div>",
        "id": 124812952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523227866
    },
    {
        "content": "<p>Projections work differently.</p>",
        "id": 124812957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523227900
    },
    {
        "content": "<p>I am not saying I understand why we want topological space to be this way, but I think this is what Johannes is saying.</p>",
        "id": 124812998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523227952
    },
    {
        "content": "<p>Johannes' link is to a construction partially ordering all topologies on a fixed type, so he likes <code>foo</code> better here because <code>H.bar</code> works nicely if we have <code>H1, H2...</code></p>",
        "id": 124813133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523228282
    }
]