[
    {
        "content": "<p>What's going on in this gist?</p>\n<p><a href=\"https://gist.github.com/eric-wieser/66022bcfd708091799bc86e80404b504\">https://gist.github.com/eric-wieser/66022bcfd708091799bc86e80404b504</a></p>\n<p>Line 106 fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n<span class=\"n\">carriers</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">semiring_add_gradation</span> <span class=\"n\">carriers</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">carriers</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">carriers</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span>       <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">carriers</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Why is it failing to synthesize an instance that is right there in the context?</p>",
        "id": 224305130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611827989
    },
    {
        "content": "<p>I got an error with <code>simp</code> in the line before -- invalid simp lemma. My mathlib is a couple of weeks old though. Is it a pp.all thing?</p>",
        "id": 224306305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611828611
    },
    {
        "content": "<p>My first thoughts are to diff the <code>pp.all</code> output, or to use <code>letI</code> instead of <code>haveI</code>.</p>",
        "id": 224306338,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611828630
    },
    {
        "content": "<p>For some reason this <code>rw</code> line works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.coe_dfinsupp_sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">_inst</span> <span class=\"n\">i</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 224306497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611828734
    },
    {
        "content": "<p>but not <code>_inst</code> or <code>(λ i, _inst i)</code></p>",
        "id": 224306572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611828786
    },
    {
        "content": "<p>Oh yes, presumably decidable isn't a prop so it's letI</p>",
        "id": 224306681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611828846
    },
    {
        "content": "<p><code>letI</code> doesn't change seem to help here</p>",
        "id": 224306851,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611828955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.coe_dfinsupp_sum\">docs#add_monoid_hom.coe_dfinsupp_sum</a> is very new</p>",
        "id": 224307288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611829228
    },
    {
        "content": "<p>I wonder if changing the lemma to use {} instead of [] for that argument helps</p>",
        "id": 224307367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611829293
    },
    {
        "content": "<p>Since the instance in question is already in the goal statement anyway</p>",
        "id": 224307386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611829310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, <code>pp.all</code> and <code>pp.notation</code> continue to show a hypothesis that matches the goal</p>",
        "id": 224307642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611829479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Not.20finding.20typeclass.20in.20hypotheses/near/224307367\">said</a>:</p>\n<blockquote>\n<p>I wonder if changing the lemma to use {} instead of [] for that argument helps</p>\n</blockquote>\n<p>That could be the solution. if there's some synthesised versus unified conflict going on, that <code>decidable</code> is prone to.</p>",
        "id": 224307840,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611829609
    },
    {
        "content": "<p>Why have you even got that un-whatever-its-called-reduced (beta-reduced?) lambda-term in inst? Can you dsimp everything away?</p>",
        "id": 224308352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611829966
    },
    {
        "content": "<p>To try and help it pattern match <code>β</code>. Reducing it to <code>Π (i : ι) (x : carriers i), decidable (x ≠ 0)</code> doesn't help, and it makes the goal and hypothesis mismatch in a visible way.</p>",
        "id": 224308408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611830000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Not.20finding.20typeclass.20in.20hypotheses/near/224307840\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Not.20finding.20typeclass.20in.20hypotheses/near/224307367\">said</a>:</p>\n<blockquote>\n<p>I wonder if changing the lemma to use {} instead of [] for that argument helps</p>\n</blockquote>\n<p>That could be the solution. if there's some synthesised versus unified conflict going on, that <code>decidable</code> is prone to.</p>\n</blockquote>\n<p>This fixes the problem</p>",
        "id": 224308531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611830073
    },
    {
        "content": "<p>But it feels like a bug that I have to do that</p>",
        "id": 224308600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611830137
    },
    {
        "content": "<p>For the failing version, <code>set_option trace.class_instances true</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span>  <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_3</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_4</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>But I don't know how to learn more about the metavariables</p>",
        "id": 224308894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611830331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Not.20finding.20typeclass.20in.20hypotheses/near/224307642\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span>, <code>pp.all</code> and <code>pp.notation</code> continue to show a hypothesis that matches the goal</p>\n</blockquote>\n<p>Wait, this was a lie. I used <code>set_option pp.all</code> without the trailing <code>true</code>. There is a difference.</p>",
        "id": 224309632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611830843
    },
    {
        "content": "<p>For the zero, the goal uses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_has_zero</span>\n               <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n                   <span class=\"bp\">@</span><span class=\"n\">coe_sort</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_submonoid</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">A</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_submonoid.has_coe_to_sort</span> <span class=\"n\">A</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">A</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                     <span class=\"o\">(</span><span class=\"n\">carriers</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n                  <span class=\"n\">i</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span>\n                  <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n                      <span class=\"bp\">@</span><span class=\"n\">coe_sort</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_submonoid</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">A</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_submonoid.has_coe_to_sort</span> <span class=\"n\">A</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">A</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                        <span class=\"o\">(</span><span class=\"n\">carriers</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n                     <span class=\"n\">i</span><span class=\"o\">)</span>\n                  <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n                      <span class=\"bp\">@</span><span class=\"n\">add_submonoid.to_add_comm_monoid</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">A</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">carriers</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n                     <span class=\"n\">i</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>While the hypothesis uses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_submonoid.has_zero</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">A</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n               <span class=\"o\">(</span><span class=\"n\">carriers</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 224310115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611831146
    },
    {
        "content": "<p>Oh, I screwed up the typeclasses on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.coe_dfinsupp_sum\">docs#add_monoid_hom.coe_dfinsupp_sum</a>... Maybe relaxing those will fix it</p>",
        "id": 224311693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611832176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, how far from prime-time is your \"typeclass assumptions are too strict\" linter?</p>",
        "id": 224311727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611832195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> not too far, maybe a week or so from prime time, I have some changes to make but I think I at least know the right algorithm now <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 224394039,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611868724
    },
    {
        "content": "<p>Another \"the typeclass is right there\" situation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- fail</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi.is_scalar_tower'</span>  <span class=\"c1\">-- fail</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span>\n<span class=\"n\">pi.is_scalar_tower'</span>  <span class=\"c1\">-- fail, does not find `i` which exactly matches the goal state</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span>\n<span class=\"bp\">@</span><span class=\"n\">pi.is_scalar_tower'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span>  <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Why can't lean find the <code>i</code> instance?</p>",
        "id": 248961366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628590547
    },
    {
        "content": "<p>Adding a non-dependent version of the instance seems to fix it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pi.is_scalar_tower_again</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi.is_scalar_tower'</span>\n</code></pre></div>\n<p>I wonder if we need to do this for all instance on pi types</p>",
        "id": 248965778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628594204
    },
    {
        "content": "<p>I have the feeling that we're running into this problem relatively often, and it's freaking me out a bit because the issue seems to be deep in the unifier and I don't really understand.  It would really help if we had a small mathlib-free MWE.  (We can also post the MWE on the Lean 4 bug tracker...)</p>",
        "id": 248966278,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628594572
    },
    {
        "content": "<p>Some more data (the missing instance is <a href=\"https://github.com/leanprover-community/mathlib/issues/8604\">#8604</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>\n\n<span class=\"c1\">-- oops, this instance is missing</span>\n<span class=\"kd\">instance</span> <span class=\"n\">semigroup.to_is_scalar_tower</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mul_assoc</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- fail</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 248967798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628595839
    },
    {
        "content": "<p>Here's the version without mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span>  <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">has_scalar</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar.smul</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_mul.to_has_scalar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">*</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pi.has_scalar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pi.has_scalar'</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">has_scalar</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">is_scalar_tower</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_scalar_tower</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">•</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">semigroup</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">mul_one_class</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">is_scalar_tower</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">is_scalar_tower</span> <span class=\"o\">(</span><span class=\"n\">smul_assoc</span><span class=\"o\">)</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">semigroup.to_is_scalar_tower</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mul_assoc</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pi.is_scalar_tower'</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n\n<span class=\"c1\">-- change `monoid` to `semigroup` and the below work</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- fail</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi.is_scalar_tower'</span>  <span class=\"c1\">-- fail</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"k\">in</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.freeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pi.is_scalar_tower'</span>  <span class=\"c1\">-- fail, does not find `i` which exactly matches the goal state</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span>\n<span class=\"bp\">@</span><span class=\"n\">pi.is_scalar_tower'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span>  <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 248968719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628596533
    },
    {
        "content": "<p>Good news: in the straightforward Lean 4 translation of this MWE, all examples work!</p>",
        "id": 248971277,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628598236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Not.20finding.20typeclass.20in.20hypotheses/near/248971277\">said</a>:</p>\n<blockquote>\n<p>Good news: in the straightforward Lean 4 translation of this MWE, all examples work!</p>\n</blockquote>\n<p>They do now :) Please consider PRing your translation as a \"run\" test so they always do.</p>",
        "id": 248982985,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1628604186
    },
    {
        "content": "<p>Isn't it <a href=\"https://github.com/leanprover/lean4/issues/509\">https://github.com/leanprover/lean4/issues/509</a> ? (I think it was said at the time that it was possible to backport this in Lean 3)</p>",
        "id": 248985782,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1628605324
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/typeclass.20failure/near/242412905\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/typeclass.20failure/near/242412905</a></p>",
        "id": 248986122,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1628605474
    }
]