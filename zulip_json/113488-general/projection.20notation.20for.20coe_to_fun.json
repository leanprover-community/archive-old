[
    {
        "content": "<p>Would it be a bad idea to hide <code>coe_fn</code> from the pretty-print output and use projection notation? As an example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.mul_add</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">my_proj</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">my_proj</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">my_proj</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_proj</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">my_proj</span> <span class=\"bp\">→</span> <span class=\"n\">my_proj</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">my_proj</span> <span class=\"bp\">≃</span> <span class=\"n\">my_proj</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">my_proj</span> <span class=\"bp\">→+</span> <span class=\"n\">my_proj</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">my_proj</span> <span class=\"bp\">≃+</span> <span class=\"n\">my_proj</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_proj</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x.a</span>   <span class=\"c1\">-- x.a : my_proj</span>\n<span class=\"k\">#check</span> <span class=\"n\">x.b</span>   <span class=\"c1\">-- ⇑my_proj.b x : my_proj</span>\n<span class=\"k\">#check</span> <span class=\"n\">x.a'</span>  <span class=\"c1\">-- ⇑my_proj.c x : my_proj</span>\n<span class=\"k\">#check</span> <span class=\"n\">x.b'</span>  <span class=\"c1\">-- ⇑my_proj.d x : my_proj</span>\n</code></pre></div>\n<p>If so, which of these seems like the better approach?</p>\n<ul>\n<li>Add <code>@[pp_dot]</code> as a dual of <code>@[pp_nodot]</code>, and apply it to the bundled homs where it makes things clearer</li>\n<li>Adjust <a href=\"https://github.com/leanprover-community/lean/blob/9aab827f572d73821f418f3413f775d0b0eda9fa/src/frontends/lean/pp.cpp#L926\"><code>pretty_fn&lt;T&gt;::is_field_notation_candidate</code></a> to allow projections of the form <code>⇑constant_name f</code> to be printed <code>f.constant_name</code></li>\n</ul>",
        "id": 217399055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605878225
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 217400270,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605878916
    },
    {
        "content": "<p>Maybe <code>0</code> isn't the best example to illustrate this with.  How about <code>def x : my_proj := 0</code> first?</p>",
        "id": 217400391,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605878994
    },
    {
        "content": "<p>The motivation here is some change <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> is making to <code>linear_map.to_bilin</code>, which makes it an equiv and not a normal function (or perhaps not that exactly, but something equivalent)</p>",
        "id": 217400450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605879010
    },
    {
        "content": "<p>Seems like a good idea to me.  I didn't even realize that <code>x.b</code> worked in the first place.</p>",
        "id": 217400552,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605879073
    },
    {
        "content": "<p>I didn't realize it did either until I tried this out</p>",
        "id": 217400574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605879091
    },
    {
        "content": "<p>I'm guessing right now we bail out on <code>if (!is_constant(f)) return false;</code>, and would need to change that to use <code>is_coercion_fn</code> somehow first</p>",
        "id": 217400950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605879296
    },
    {
        "content": "<p>It works off there are no more arguments.</p>",
        "id": 219834450,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607949120
    },
    {
        "content": "<p>*iff?</p>",
        "id": 219835354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607949614
    },
    {
        "content": "<p>Otherwise it starts looking for an argument of type ... and fails.</p>",
        "id": 219839775,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607952143
    },
    {
        "content": "<p>BTW, is it hard to make it work with more arguments? It works be nice to make <code>polynomial.eval</code> a bundled homomorphism without loosing dot notation.</p>",
        "id": 219839999,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607952254
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of a case where projection notation doesn't work?</p>",
        "id": 219840822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607952672
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cast_le\">docs#fin.cast_le</a></p>",
        "id": 219842058,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607953300
    },
    {
        "content": "<p>Yep, that fails with \"invalid field notation, function 'fin.cast_le' does not have explicit argument with type (fin ...)\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">n.cast_le</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219847378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607955863
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 219847915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607956068
    }
]