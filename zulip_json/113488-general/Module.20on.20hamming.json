[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span>  you asked about this. This is a MWE for <code>hamming</code> not getting a module typeclass. Why doesn't the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hamming.module\">docs#hamming.module</a> fire here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">information_theory.hamming</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">linear_code</span> <span class=\"o\">(</span><span class=\"bp\">𝓓</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"bp\">𝓓</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">hamming</span> <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">𝓓</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝓓</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"bp\">𝓓</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">dimension</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">linear_code</span> <span class=\"bp\">𝓓</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.finrank</span> <span class=\"n\">F</span> <span class=\"n\">C.carrier</span>\n</code></pre></div>",
        "id": 303162156,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1665341142
    },
    {
        "content": "<p>This is a good question. It does with the type synonym, I assume?</p>",
        "id": 303162311,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1665341259
    },
    {
        "content": "<p>Does it if you spell that D -&gt; F (with the proper unicode)?</p>",
        "id": 303162368,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1665341290
    },
    {
        "content": "<p>Yes, that works fine</p>",
        "id": 303162396,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1665341324
    },
    {
        "content": "<p>This looks like the standard dependent typeclass issue that we have all the time with pi types</p>",
        "id": 303185518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665365493
    },
    {
        "content": "<p>Lean isn't always able to conclude that <code>@module R M ring.to_semiring _</code> is the same type as <code>@module R M comm_semiring.to_semiring _</code></p>",
        "id": 303185593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665365554
    },
    {
        "content": "<p>In particular, it frequently fails to do so in the presence of pi types</p>",
        "id": 303185603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665365578
    }
]