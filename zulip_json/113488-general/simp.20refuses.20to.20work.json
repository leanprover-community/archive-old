[
    {
        "content": "<p>Can anyone explain</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf_top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_sort</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↥</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">squeeze_simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⊓</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">findim</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- simp, -- fails</span>\n  <span class=\"c1\">-- simp only [inf_top_eq], --fail</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inf_top_eq</span><span class=\"o\">],</span> <span class=\"c1\">--works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221447796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609675093
    },
    {
        "content": "<p>Not sure if this helps, but here's the trace output for the two examples (I don't really understand the <code>canonize_instances</code> option but it reduced the amount of output in the working case.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf_top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_sort</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↥</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inf_top_eq</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">canonize_instances</span><span class=\"o\">:=</span><span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[simplify] eq: ↥(a ⊓ ⊤) = ↥a</span>\n<span class=\"cm\">[simplify] eq: ↥(a ⊓ ⊤)</span>\n<span class=\"cm\">[simplify] eq: a ⊓ ⊤</span>\n<span class=\"cm\">[simplify] eq: a</span>\n<span class=\"cm\">[simplify] eq: ⊤</span>\n<span class=\"cm\">[simplify] eq: ⊤</span>\n<span class=\"cm\">[simplify] eq: has_inf.inf</span>\n<span class=\"cm\">3. [simplify.rewrite] [inf_top_eq]: a ⊓ ⊤ ==&gt; a</span>\n<span class=\"cm\">[simplify] eq: coe_sort</span>\n<span class=\"cm\">[simplify] eq: ↥a</span>\n<span class=\"cm\">[simplify] eq: a</span>\n<span class=\"cm\">[simplify] eq: coe_sort</span>\n<span class=\"cm\">[simplify] eq: eq</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⊓</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">findim</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inf_top_eq</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">canonize_instances</span><span class=\"o\">:=</span><span class=\"n\">ff</span><span class=\"o\">},</span> <span class=\"c1\">--fail</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[simplify] eq: findim 𝕜 ↥(F ⊓ ⊤) = findim 𝕜 ↥F</span>\n<span class=\"cm\">[simplify] eq: findim 𝕜 ↥(F ⊓ ⊤)</span>\n<span class=\"cm\">[simplify] eq: findim</span>\n<span class=\"cm\">[simplify] eq: findim 𝕜 ↥F</span>\n<span class=\"cm\">[simplify] eq: findim</span>\n<span class=\"cm\">[simplify] eq: eq</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221458822,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609691560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> since you're looking at <code>simp</code> things, do you know what might be going on here?</p>",
        "id": 221629192,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609840777
    },
    {
        "content": "<p>The culprit is <code>findim</code>.  Because the type-class instances come after the vector space, the automatically generated congruence lemmas don't permit rewriting the vector space:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⊓</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">findim</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">do</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n<span class=\"n\">lem</span> <span class=\"bp\">←</span> <span class=\"n\">mk_specialized_congr_lemma_simp</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">lem.arg_kinds</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">lem.type</span><span class=\"o\">,</span>\n<span class=\"gr\">admit</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[fixed_no_param, fixed_no_param, fixed_no_param, fixed_no_param, fixed]</span>\n<span class=\"cm\">∀ [_inst_8 : vector_space 𝕜 ↥(F ⊓ ⊤)], findim 𝕜 ↥(F ⊓ ⊤) = findim 𝕜 ↥(F ⊓ ⊤)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 221629791,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609841247
    },
    {
        "content": "<p>It is a crying shame that we have to come to Gabriel and others of his ilk to ask these questions, and they come up with these brilliant diagnoses involving using clever tricks which are totally undocumented. My system of \"starring interesting posts\" has failed; I have too much starred now. I don't know what to do about this.</p>",
        "id": 221631520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609842755
    },
    {
        "content": "<p>We could start documenting these clever tricks somewhere on our website.</p>",
        "id": 221631661,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609842851
    },
    {
        "content": "<blockquote>\n<p>Because the type-class instances come after the vector space</p>\n</blockquote>\n<p>Which instances are you referring to?</p>",
        "id": 221631840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609843006
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">findim</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">],</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>Everything that comes after <code>V</code>.</p>",
        "id": 221631905,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609843075
    },
    {
        "content": "<p>So does this mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">findim</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">],</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>is a better definition (which should be an invisible change to uses of findim without an <code>@</code>).<br>\nIs this something we should be changing everywhere then?<br>\nI guess we could make a linter for this: Like non-instance binders must come as late as possible in the list of binders?</p>",
        "id": 221632158,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609843307
    },
    {
        "content": "<p>It's not the literal order that matters, but the dependencies.  As long as there are type-class arguments that depend on <code>V</code>, you can't rewrite <code>V</code>.</p>",
        "id": 221632525,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609843584
    },
    {
        "content": "<p>By \"vector space\", did you mean<code>V</code> or <code>vector_space K V</code>?</p>",
        "id": 221632560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609843618
    },
    {
        "content": "<p>I suppose it's not feasible to add every possible rewrite that's blocked by this as additional simp lemmas, right? </p>\n<p>Maybe <code>rewrite_search</code> would be able to solve this.</p>",
        "id": 221633254,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609844200
    },
    {
        "content": "<p>The small congruence changes in lean 3 since this thread was made haven't made any difference. Are we able to reproduce this in Lean 4, or is it fixed there?</p>",
        "id": 280815473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651440999
    }
]