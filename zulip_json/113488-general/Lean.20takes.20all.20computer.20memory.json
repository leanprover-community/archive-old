[
    {
        "content": "<p>I'm in the midst of a small PR <a href=\"https://github.com/leanprover-community/mathlib/pull/11233\">#11233</a>, with a few modifications, but Lean is completely stuck, takes all the computer memory… What did I do wrong ?</p>",
        "id": 266842287,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1641319146
    },
    {
        "content": "<p>A ton of moving error messages such as <br>\n<code>invalid import: data.option.defs \nexcessive memory consumption detected at 'expression traversal' (potential solution: increase memory consumption threshold)</code></p>",
        "id": 266842530,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1641319234
    },
    {
        "content": "<p>Your cache is messed up. Try getting a new one using <code>leanproject get-cache</code> and restarting the LEan server.</p>",
        "id": 266842653,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641319297
    },
    {
        "content": "<p>Here is what happens :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">03</span><span class=\"o\">)</span> <span class=\"n\">pro</span><span class=\"bp\">-</span><span class=\"n\">acl</span> <span class=\"bp\">&gt;</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span> <span class=\"n\">for</span> <span class=\"n\">eb0a06df7</span>\n  <span class=\"n\">locally...</span>\n  <span class=\"n\">remotely...</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">available</span> <span class=\"n\">for</span> <span class=\"n\">revision</span> <span class=\"n\">eb0a06df7</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span> <span class=\"n\">for</span> <span class=\"mi\">584</span><span class=\"n\">c7bb0f</span>\n  <span class=\"n\">locally...</span>\n  <span class=\"n\">Found</span> <span class=\"kn\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">was</span> <span class=\"n\">available</span> <span class=\"n\">for</span> <span class=\"n\">eb0a06df7.</span> <span class=\"n\">A</span> <span class=\"n\">cache</span> <span class=\"n\">was</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">ancestor</span> <span class=\"mi\">584</span><span class=\"n\">c7bb0f.</span>\n<span class=\"n\">To</span> <span class=\"n\">see</span> <span class=\"n\">the</span> <span class=\"n\">intermediate</span> <span class=\"n\">commits</span><span class=\"o\">,</span> <span class=\"n\">run</span><span class=\"o\">:</span>\n  <span class=\"n\">git</span> <span class=\"n\">log</span> <span class=\"c1\">--graph eb0a06df7 584c7bb0f^!</span>\n<span class=\"n\">Run</span> <span class=\"bp\">`</span><span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"c1\">--rev` on one of the available commits above.</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">fetch</span> <span class=\"n\">cached</span> <span class=\"n\">oleans</span>\n</code></pre></div>\n<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>\n<p>If I give  <code>leanproject</code> the tag of the earlier revision, what will happen of my tiny modifications ?</p>",
        "id": 266843131,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1641319552
    },
    {
        "content": "<p>Supposedly nothing, but if you are on an old version of <code>leanproject</code> it might accidentally throw them away</p>",
        "id": 266843289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641319629
    },
    {
        "content": "<p>By that I mean it only fetches the cache. It doesn't do any git stuff.</p>",
        "id": 266843345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641319668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> When in doubt, make sure that you save all your open files, and commit them.</p>",
        "id": 266843538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641319774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> You can try getting the cache from <code>master</code> and then merging <code>master</code> into your branch:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ git checkout master\n$ git pull origin master\n$ leanproject get-cache\n$ git checkout sign_from_cycle_type<span class=\"err\">'</span>\n$ git merge master\n</code></pre></div>",
        "id": 266843704,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641319852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20takes.20all.20computer.20memory/near/266843131\">said</a>:</p>\n<blockquote>\n<p>Here is what happens :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">03</span><span class=\"o\">)</span> <span class=\"n\">pro</span><span class=\"bp\">-</span><span class=\"n\">acl</span> <span class=\"bp\">&gt;</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span> <span class=\"n\">for</span> <span class=\"n\">eb0a06df7</span>\n  <span class=\"n\">locally...</span>\n  <span class=\"n\">remotely...</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">available</span> <span class=\"n\">for</span> <span class=\"n\">revision</span> <span class=\"n\">eb0a06df7</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span> <span class=\"n\">for</span> <span class=\"mi\">584</span><span class=\"n\">c7bb0f</span>\n  <span class=\"n\">locally...</span>\n  <span class=\"n\">Found</span> <span class=\"kn\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">was</span> <span class=\"n\">available</span> <span class=\"n\">for</span> <span class=\"n\">eb0a06df7.</span> <span class=\"n\">A</span> <span class=\"n\">cache</span> <span class=\"n\">was</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">ancestor</span> <span class=\"mi\">584</span><span class=\"n\">c7bb0f.</span>\n<span class=\"n\">To</span> <span class=\"n\">see</span> <span class=\"n\">the</span> <span class=\"n\">intermediate</span> <span class=\"n\">commits</span><span class=\"o\">,</span> <span class=\"n\">run</span><span class=\"o\">:</span>\n  <span class=\"n\">git</span> <span class=\"n\">log</span> <span class=\"c1\">--graph eb0a06df7 584c7bb0f^!</span>\n<span class=\"n\">Run</span> <span class=\"bp\">`</span><span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"c1\">--rev` on one of the available commits above.</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">fetch</span> <span class=\"n\">cached</span> <span class=\"n\">oleans</span>\n</code></pre></div>\n<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>\n<p>If I give  <code>leanproject</code> the tag of the earlier revision, what will happen of my tiny modifications ?</p>\n</blockquote>\n<p>I'd try <code>leanproject get-cache --fallback=download-all</code> and see if that helps. It should be completely safe by now</p>",
        "id": 266844475,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641320309
    },
    {
        "content": "<p>Tiny changes may require many files be recompiled, so could be the cause of the problem. If that's the case, getting cache for an ancester version won't help. I suggest running  <code>leanproject build</code>, or you may commit, push, wait for modified mathlib to be built/compiled on the cloud, <code>leanproject get-cache</code> when they are ready, then restart the server.</p>",
        "id": 266862980,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1641330188
    },
    {
        "content": "<p>This is certainly what happens, because I can't manage to have it work.<br>\nI tried a <code>leanproject build</code> but it was not finished 2 hours later… <br>\nLet's commit and push and check tomorrow!</p>",
        "id": 266864029,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1641330735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> if you want to compile only the files necessary for a single lean file called <code>foo.lean</code>, you can use <code>lean --make foo.lean</code>. If you instead use <code>leanproject build</code>, it will try to build the whole library.</p>",
        "id": 266864170,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641330830
    },
    {
        "content": "<p>So, if you're editing some file <code>a.lean</code> that is imported by many other files, and you next want to work on <code>b.lean</code> which imports <code>a.lean</code>, if you use <code>lean --make b.lean</code>, then only the bare minimum will be compiled..</p>",
        "id": 266864291,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641330894
    },
    {
        "content": "<p>It seems that I run into similar problems in my PR <a href=\"https://github.com/leanprover-community/mathlib/pull/11181\">https://github.com/leanprover-community/mathlib/pull/11181</a>.</p>",
        "id": 266970102,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641406452
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11181#issuecomment-1005956398\">https://github.com/leanprover-community/mathlib/pull/11181#issuecomment-1005956398</a></p>",
        "id": 266970168,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641406501
    },
    {
        "content": "<p>Issue solved by letting GitHub build the project and getting olean from GitHub. VS code doesn't seem useable for building large Lean libraries.</p>",
        "id": 267068941,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641480699
    },
    {
        "content": "<p>if you want to build locally, you should use <code>leanproject build</code></p>",
        "id": 267069093,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641480757
    },
    {
        "content": "<p>I've done that twice. My computer ran overnight and finished it in late morning.</p>",
        "id": 267072718,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641482668
    }
]