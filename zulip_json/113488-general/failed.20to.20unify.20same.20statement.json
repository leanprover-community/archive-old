[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cube_le_exp_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">exp_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">rpow_le_rpow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>What is going on, how can't it unify two expression which print exactly the same. Is there something going on behind the scenes?</p>",
        "id": 243219689,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624063934
    },
    {
        "content": "<p>maybe one of those 3's is a nat and one is a real number?</p>",
        "id": 243219712,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1624064015
    },
    {
        "content": "<p><code>set_option pp.notation false\nset_option pp.implicit true</code></p>\n<p>is an easy way to see it's different</p>",
        "id": 243219776,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624064108
    },
    {
        "content": "<p>but rpow is (3:ℝ) whilst the original statement is 3:ℕ</p>",
        "id": 243219784,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624064126
    },
    {
        "content": "<p>Try <code>convert</code></p>",
        "id": 243265793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624132006
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cube_le_exp_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">exp_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">rpow_le_rpow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">],</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_one_le_exp_of_nonneg</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243279086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624152039
    }
]