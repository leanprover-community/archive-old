[
    {
        "content": "<p>Hi everyone! I'm very new to Zulip and hoping that I'm posting this in the right stream/channel/topic (?). I was playing around with the <code>number_field</code> library and I encountered something strange. This MWE (some people seem to be missing <code>import algebraic_geometry.prime_spectrum.basic</code>, but not me) works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">number_field</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">associates.mk</span> <span class=\"n\">p.val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"c1\">-- this is ok</span>\n</code></pre></div>\n<p>However, when I try to replace the general Dedekind domain <code>R</code> with the specific <code>ùìû K</code> I had in mind, the following complains that the synthesised instances are not definitionally equal (but are visually the same):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">number_field</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"bp\">$</span> <span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">associates.mk</span> <span class=\"n\">p.val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"c1\">-- instance not defeq</span>\n</code></pre></div>\n<p>I thought it was a diamond but couldn't figure out how to locate or fix it, so I asked this on the Xena Discord server, and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> reduced the problem, after playing around with implicit pp, to showing that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">comm_monoid_with_zero.to_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>There seems to be a diamond? Possibly unrelated to this, but recently I've been encountering many deterministic timeout and excessive memory issues specific to the <code>number_field</code> library (universe issues, computability issues) and can't help but feel something is slightly off with its instances (or possibly just be me being new to Lean). Can someone help out?</p>",
        "id": 273268715,
        "sender_full_name": "David Ang",
        "timestamp": 1645814818
    },
    {
        "content": "<p>With current master the first example needs the extra import and doesn't work either. I don't know if David has discovered one issue or two issues. Here is at least one diamond on current master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebraic_geometry.prime_spectrum.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">number_field</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">associates.mk</span> <span class=\"n\">p.val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"c1\">-- diamond</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">monoid_with_zero</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">comm_monoid_with_zero.to_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- not refl</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr'</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr'</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273273250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645816848
    },
    {
        "content": "<p>I guess it's the scalar action that disagrees?</p>",
        "id": 273278034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645819425
    },
    {
        "content": "<p>Unfortunately our clever new <code>ext</code> lemmas make this harder to debug</p>",
        "id": 273278131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645819469
    },
    {
        "content": "<p>I guess <code>change monoid_with_zero.mk _ ... = monoid_with_zero.mk _ ...; congr' 1</code> gets you in the same place as the dumb ext lemmas</p>",
        "id": 273278262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645819553
    },
    {
        "content": "<p>Looks like you're right about the scalar actions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">comm_monoid_with_zero.to_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">monoid_with_zero.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">monoid_with_zero.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">filter</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">filter</span>\n<span class=\"bp\">‚ñ∂</span> <span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">number_field</span> <span class=\"n\">K</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">semiring.one</span> <span class=\"bp\">=</span> <span class=\"n\">comm_monoid_with_zero.one</span>\n\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">number_field</span> <span class=\"n\">K</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">semiring.npow</span> <span class=\"bp\">=</span> <span class=\"n\">comm_monoid_with_zero.npow</span>\n</code></pre></div>",
        "id": 273414785,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645982469
    },
    {
        "content": "<p>The first goal unfolds to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">algebra.linear_map</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra.linear_map</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">range</span>\n</code></pre></div>",
        "id": 273414873,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645982573
    },
    {
        "content": "<p>Which <code>congr</code>s to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">number_field.ring_of_integers_algebra</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">algebra.id</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273414944,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645982655
    },
    {
        "content": "<p>Aha, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/number_field.ring_of_integers_algebra\">docs#number_field.ring_of_integers_algebra</a> is the inclusion of ùìû K into ùìû L given an inclusion of K into L. Apparently this doesn't become defeq to the inclusion of ùìû K into itself.</p>",
        "id": 273414983,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645982754
    },
    {
        "content": "<p>(c.f. <a href=\"https://github.com/leanprover-community/mathlib/pull/12331\">#12331</a>)</p>",
        "id": 273415040,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645982790
    },
    {
        "content": "<p>This thread is basically the same as <a href=\"#narrow/stream/113488-general/topic/diamond.20for.20monoid.20instance.20on.20ideals\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/diamond.20for.20monoid.20instance.20on.20ideals</a>, right?</p>",
        "id": 273416347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645984409
    },
    {
        "content": "<p>yes, I think this is the specific issue but now the discussion has converged</p>",
        "id": 273416354,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645984434
    },
    {
        "content": "<p>The diamond unfolds down to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.coe_eta\">docs#subtype.coe_eta</a>, which isn't true by refl: see <a href=\"#narrow/stream/113488-general/topic/instance.20diamond.20in.20algebra.2Eid.20for.20subtypes/near/273414112\">this thread</a></p>",
        "id": 273416394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645984456
    },
    {
        "content": "<p>The algebra_map formed by the identity function is not equal to the one that applies the identity function to the coercion and rebuilds the subtype, but the latter is the only reasonable way to have one subtype act on another</p>",
        "id": 273416410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645984510
    }
]