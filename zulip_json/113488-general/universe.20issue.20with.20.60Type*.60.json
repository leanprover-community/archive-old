[
    {
        "content": "<p>There was a time when I was scared of <code>Type*</code>, preferring to roll my own universes. However there were changes, particularly the advent of <code>{A B C : Type*}</code>, and I switched back. But here's something which I think is odd:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">submodule.span_as_sum</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c.support</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">c.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">smul_add_hom</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">span_induction</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">hm</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">finsupp.single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_support_single</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">hy.1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">set.subset.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">set.union_subset</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.coe_union</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_subset</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">support_add</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hc</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_support_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp.coe_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">right_ne_zero_of_mul</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_smul_index'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom.map_finsupp_sum</span> <span class=\"o\">(</span><span class=\"n\">smul_add_hom</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">m</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_smul</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(((</span><span class=\"n\">smul_add_hom</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">submodule.span_as_sum</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">submodule.span_as_sum.{u_1 u_2 u_3} :</span>\n<span class=\"cm\">  ∀ {R : Type u_1} {M : Type (max u_2 u_3)} [_inst_1 : semiring.{u_1} R] [_inst_2 : add_comm_group.{(max u_2 u_3)} M]</span>\n<span class=\"cm\">  [_inst_3 : semimodule.{u_1 (max u_2 u_3)} R M] {m : M} {s : set.{(max u_2 u_3)} M},</span>\n<span class=\"cm\">    m ∈ span.{u_1 (max u_2 u_3)} R s →</span>\n<span class=\"cm\">    (∃ (c : M →₀ R),</span>\n<span class=\"cm\">       ↑(c.support) ⊆ s ∧ c.sum (λ (i : M), ⇑(⇑((smul_add_hom.{u_1 (max u_2 u_3)} R M).flip) i)) = m)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I have R and M in two different universes, but somehow M's universe has become the max of two unspecified universes which I can't figure out the origin of. Paging through the proof I didn't spot any occurrence of <code>u_2</code> or <code>u_3</code> outside <code>max u_2 u_3</code>. Furthermore if I change <code>{M : Type*}</code> to <code>{M : Type u}</code> then the proof compiles just the same and the universes in the goal are what I would expect -- one for R and one for M and that's it. </p>\n<p>What's going on?</p>",
        "id": 228074514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614450394
    },
    {
        "content": "<p>Oh it's not even the proof -- if I sorry the proof I still observe the same phenomenon.</p>",
        "id": 228074938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614450867
    },
    {
        "content": "<p>If I change <code>(λ i, (smul_add_hom R M).flip i)</code> to <code>(λ m r, r • m)</code> the issue disappears</p>",
        "id": 228075818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614451868
    },
    {
        "content": "<p>Got it -- it's <code>add_monoid_hom.flip</code>.</p>",
        "id": 228075886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614451954
    },
    {
        "content": "<p>I am still confused by this.  Is there an explicit argument that <code>smul_add_hom</code> wants that is not there, then?</p>",
        "id": 228076072,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614452173
    },
    {
        "content": "<p>Should there be an extra <code>R</code> somewhere?</p>",
        "id": 228076089,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614452216
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.flip\">docs#add_monoid_hom.flip</a> for reference</p>",
        "id": 228076524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614452729
    },
    {
        "content": "<p>OK so here is some behaviour I find counterintuitive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">smul_add_hom</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">a</span> <span class=\"c1\">-- Π {R : Type u_3} {M : Type u_4}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">smul_add_hom</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">b</span> <span class=\"c1\">-- Π {R : Type u_3} {M : Type (max u_4 u_5)}  ...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">smul_add_hom</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">c</span> <span class=\"c1\">-- Π {R : Type u_3} {M : Type u_4} ...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">a.flip</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  a.flip</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  a</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m_1 →+ ?m_2 →+ ?m_2 : Type (max ? ?)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ?m_1 →+ ?m_2 →+ ?m_3 : Type (max ? ? ?)</span>\n<span class=\"cm\">Additional information:</span>\n<span class=\"cm\">/home/buzzard/active-lean-projects/mathlib/scratch/scratch5.lean: context: switched to simple application elaboration procedure because failed to use expected type to elaborate it, error message</span>\n<span class=\"cm\">  type mismatch at application</span>\n<span class=\"cm\">    a.flip</span>\n<span class=\"cm\">  term</span>\n<span class=\"cm\">    a</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    ?m_1 →+ ?m_2 →+ ?m_2 : Type (max ? ?)</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    ?m_1 →+ ?m_2 →+ ?m_3 : Type (max ? ? ?)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 228076528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614452734
    },
    {
        "content": "<p><code>Type*</code> in a lemma or definition is adjusted based on its use</p>",
        "id": 228076605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614452803
    },
    {
        "content": "<p><code>Type*</code> in variables always means \"just make another universe\"</p>",
        "id": 228076807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614452822
    },
    {
        "content": "<p>I've seen this a lot where I write <code>Sort*</code> in a lemma, but lean has worked out that my typeclasses require <code>Type*</code> and changed it for me silently</p>",
        "id": 228076834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614452863
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">a</span> <span class=\"c1\">-- Π {R : Type u_3} {M : Type u_4}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">flip</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">b</span> <span class=\"c1\">-- Π {R : Type u_3} {M : Type u_4}  ...</span>\n</code></pre></div>\n<p>So the phenomenon doesn't persist for bare functions.</p>",
        "id": 228077059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614453079
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">flip</span> <span class=\"c1\">-- (M → N → P) → N → M → P</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"c1\">-- Type (max (max u v w) v u w)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">add_monoid_hom.flip</span> <span class=\"c1\">-- (M →+ N →+ P) → N →+ M →+ P</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">N</span> <span class=\"bp\">→+</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">P</span> <span class=\"c1\">-- Type (max (max u v w) v u w)</span>\n</code></pre></div>\n<p>This is the issue I think. <code>add_monoid_hom.flip</code>, and even <code>flip</code>, produce terms whose types have some pretty crazy universes.</p>",
        "id": 228077566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614453627
    },
    {
        "content": "<p>I think we need to simp those universe parameters</p>",
        "id": 228077583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614453661
    },
    {
        "content": "<p>I can't reproduce with normal functions :-/ I'm still wondering if this can be fixed in the sense that one could get <code>a.flip</code> working.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo.flip</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">c.hom</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">a</span> <span class=\"c1\">-- Π {M : Type u_1} {N : Type u_2} ...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]:</span> <span class=\"n\">foo</span> <span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">b</span> <span class=\"c1\">-- Π {M : Type u_1} {N : Type u_2} ...</span>\n</code></pre></div>",
        "id": 228078073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614454291
    },
    {
        "content": "<p>This is usually the fault of a bad definition, which has two universe arguments and only uses <code>max u v</code>, like you found. But looking at <code>add_monoid_hom.flip</code> I don't see anything suspicious, it uses exactly as many universes as one would expect.</p>\n<p>EDIT: Actually the issue is <code>add_monoid_hom.flip</code>, or more specifically the unification problem that arises when you match an argument of type <code>R →+ M →+ M</code> against the input to <code>add_monoid_hom.flip</code>, because this basically looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_3</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_4</span> <span class=\"bp\">?</span><span class=\"n\">l_5</span><span class=\"o\">)}</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_4</span> <span class=\"bp\">?</span><span class=\"n\">l_5</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_7</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which results in unifying <code>?l_2</code> against <code>max ?l_4 ?l_5</code>, resulting in two free universe metavariables that are later turned into real variables at the end.</p>\n<p>The fix for this is simple: Use explicit universes in this particular theorem.  This is an issue with the universe unification strategy, maybe it can be fixed, maybe not, but I still think it is best to let the algorithm handle universe variables where possible, in spite of these rare issues</p>",
        "id": 228117564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614503331
    },
    {
        "content": "<p>So you're saying that I should just not worry about this and use <code>Type u</code> instead of <code>Type*</code> for the original theorem? That's fine by me! It's also kind of telling me to go back to using Type u in general.</p>",
        "id": 228117858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614503646
    },
    {
        "content": "<p>It is my impression that this doesn't happen very often</p>",
        "id": 228117958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614503801
    },
    {
        "content": "<p>I think if you use <code>variables {R M : Type*}</code> then it will use fresh universe variables, instead of metavariables, which are not susceptible to these spurious unification issues</p>",
        "id": 228117984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614503863
    },
    {
        "content": "<p>Arguably this is more natural default behavior</p>",
        "id": 228118035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614503901
    },
    {
        "content": "<p>I'm not sure which of these two is more expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 228118109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614504005
    },
    {
        "content": "<p>Thanks!  At the moment, the theorem is stated with the <code>M</code> universe explicit.</p>",
        "id": 228119818,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614506204
    },
    {
        "content": "<p>If you use variables you can go back to Type*, if you care</p>",
        "id": 228126808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614514273
    },
    {
        "content": "<p>Given that this lemma went in the middle of a file, where there were other conventions about <code>variables</code>, I think that I prefer to leave it as is.  Had it been on a file that I started with this purpose in mind, I maybe would not have realized, since I might indeed had <code>R</code> and <code>M</code> declared as variables at the beginning.</p>",
        "id": 228126940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614514400
    },
    {
        "content": "<p>I didn’t quite follow: was the problem determined to be that there were two universe variables that only appeared together as a <code>max u v</code> but never separately?</p>\n<p>I think this situation is bound to come up, but if the type theory is parametric over universes it is okay to solve them to be the same variable. (The one I am studying has this property, so I will do that.) But I think in Lean, because you have LEM and things like ordinals and cardinals which change depending on their universe, it is no longer parametric? Correct me if I am wrong.</p>",
        "id": 228136392,
        "sender_full_name": "Nick Scheel",
        "timestamp": 1614525428
    },
    {
        "content": "<p>Or was the problem that the parts that should have determined the variables were also implicit?</p>",
        "id": 228136619,
        "sender_full_name": "Nick Scheel",
        "timestamp": 1614525689
    },
    {
        "content": "<p>The problem was that an equation which one has to solve using universes was solved in a suboptimal way if you ask the system to solve it in a certain way</p>",
        "id": 228138910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614528098
    },
    {
        "content": "<p>Is this related?</p>\n<p>Right now on master</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">topological_group.of_nhds_one.{u_1 u_2} :</span>\n<span class=\"cm\">  ∀ {G : Type (max u_1 u_2)} [_inst_5 : group.{(max u_1 u_2)} G] [_inst_6 : topological_space.{(max u_1 u_2)} G],</span>\n<span class=\"cm\">    filter.tendsto.{(max u_1 u_2) (max u_1 u_2)}</span>\n<span class=\"cm\">      (function.uncurry.{(max u_1 u_2) (max u_1 u_2) (max u_1 u_2)} has_mul.mul.{(max u_1 u_2)})</span>\n<span class=\"cm\">      ((nhds.{(max u_1 u_2)} 1).prod (nhds.{(max u_1 u_2)} 1))</span>\n<span class=\"cm\">      (nhds.{(max u_1 u_2)} 1) →</span>\n<span class=\"cm\">    filter.tendsto.{(max u_1 u_2) (max u_1 u_2)} (λ (x : G), x⁻¹) (nhds.{(max u_1 u_2)} 1)</span>\n<span class=\"cm\">      (nhds.{(max u_1 u_2)} 1) →</span>\n<span class=\"cm\">    (∀ (x₀ : G),</span>\n<span class=\"cm\">       nhds.{(max u_1 u_2)} x₀ =</span>\n<span class=\"cm\">         filter.map.{(max u_1 u_2) (max u_1 u_2)} (λ (x : G), x₀ * x) (nhds.{(max u_1 u_2)} 1)) →</span>\n<span class=\"cm\">    (∀ (x₀ : G),</span>\n<span class=\"cm\">       filter.tendsto.{(max u_1 u_2) (max u_1 u_2)} (λ (x : G), x₀ * x * x₀⁻¹) (nhds.{(max u_1 u_2)} 1)</span>\n<span class=\"cm\">         (nhds.{(max u_1 u_2)} 1)) →</span>\n<span class=\"cm\">    topological_group.{(max u_1 u_2)} G</span>\n<span class=\"cm\">All Messages (1)</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Changing <code>Type*</code> to <code>Type u</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/6647\">#6647</a> fixes this issue.</p>",
        "id": 229906001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615489132
    },
    {
        "content": "<p>yep</p>",
        "id": 229907169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615489555
    },
    {
        "content": "<p>I think it's <code>tendsto (uncurry ((*) : G → G → G))</code> that causes the bad unify here</p>",
        "id": 229907245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615489572
    },
    {
        "content": "<p>I've put <a href=\"https://github.com/leanprover-community/mathlib/issues/6647\">#6647</a> on the queue. We should add a library note for this if we find some more examples.</p>",
        "id": 229940415,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615501980
    },
    {
        "content": "<p>It was <code>flip</code> before IIRC, which is of a similar nature to uncurry.</p>",
        "id": 229983413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615530625
    },
    {
        "content": "<p>I want to point my finger at expressions like <code>G → G → G</code>, where the type of the implication is something like <code>imax u (imax u u)</code> where <code>u</code> is the sort of <code>G</code>. That simplifies to <code>u</code> when it's a variable, but when that expression appears in stages, where <code>?u</code> is a metavariable, it's not obvious that it's going to normalize at first. When it is <code>G → H → G</code> when the universes are actually different there is no issue because lean guesses correctly.</p>",
        "id": 230035360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615558609
    }
]