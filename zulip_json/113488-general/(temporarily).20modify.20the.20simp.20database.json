[
    {
        "content": "<p>Is it possible to temporarily modify the simp database?</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"bp\">...</span>\n<span class=\"kd\">begin</span>\n  <span class=\"bp\">#</span><span class=\"n\">modifies_temp_simp</span> <span class=\"o\">[</span><span class=\"bp\">+</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"bp\">+</span><span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">baz</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In the above proof, both <code>simp</code> would be equivalent to <code>simp [foo, bar, -baz]</code>. Outside of <code>my-lemma</code>, however, <code>simp</code> reverts back to its default behavior.</p>\n<p>I can even imagine a fancier version where it is scoped, so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"bp\">...</span>\n<span class=\"kd\">begin</span>\n  <span class=\"bp\">#</span><span class=\"n\">modifies_scoped_simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">baz</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"o\">{</span>\n    <span class=\"bp\">#</span><span class=\"n\">modifies_scoped_simp</span> <span class=\"o\">[</span><span class=\"bp\">+</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"o\">{</span>\n    <span class=\"bp\">#</span><span class=\"n\">modifies_scoped_simp</span> <span class=\"o\">[</span><span class=\"bp\">+</span><span class=\"n\">bar</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>would have <code>simp</code> acts like <code>simp [+foo, -baz]</code> in the <code>zero</code> case, and <code>simp [+bar, -baz]</code> in the <code>succ</code> case.</p>\n<p>If the scoped version / temporary version is not possible, even the permanent one could still do the job. It's just slightly more annoying to work with.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">modifies_permanent_simp</span> <span class=\"o\">[</span><span class=\"bp\">+</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"bp\">+</span><span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">baz</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"bp\">...</span>\n<span class=\"kd\">begin</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"bp\">#</span><span class=\"n\">modifies_permanent_simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"bp\">+</span><span class=\"n\">baz</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 217142675,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1605710503
    },
    {
        "content": "<p>The last one is possible using <code>local attribute</code> inside a <code>section</code>. The first two are probably also possible in principle but it might be tricky to ensure that the attribute changes don't leak out of the lemma.</p>",
        "id": 217143946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605711042
    },
    {
        "content": "<p>It would be easier to implement something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"bp\">...</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">with_temp_simp</span> <span class=\"o\">[</span><span class=\"bp\">+</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"bp\">+</span><span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">baz</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"bp\">...</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"bp\">...</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217144022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605711075
    },
    {
        "content": "<p>There's a (noninteractive) tactic <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.with_local_reducibility\">docs#tactic.with_local_reducibility</a> which does something like this but for irreducibility, which I guess is not really an attribute but is modified as though it were one.</p>",
        "id": 217144480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605711254
    },
    {
        "content": "<p>I think you can just make attribute changes from the lemma, because lean rolls back everything in the environment after a lemma</p>",
        "id": 217151795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605714139
    },
    {
        "content": "<p>this also makes me want a <code>let_tac</code> command for defining a temporary tactic in a proof</p>",
        "id": 217151865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605714173
    },
    {
        "content": "<p>ohh, in a lemma yes</p>",
        "id": 217152928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605714609
    },
    {
        "content": "<p>dang:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">let_tac</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"bp\">?</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">tk</span> <span class=\"s2\">\":=\"</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">reflected_value.expr</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parser.itactic_reflected</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">tactic.interactive</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">f.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"n\">add_decl</span> <span class=\"o\">(</span><span class=\"n\">declaration.defn</span> <span class=\"n\">name</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">tac</span> <span class=\"o\">(</span><span class=\"n\">reducibility_hints.regular</span> <span class=\"mi\">1</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">run_tac</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">tactic.interactive</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">f.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">name</span> <span class=\"o\">[])</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">let_tac</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- foo -- does not exist at parse time :(</span>\n  <span class=\"n\">run_tac</span> <span class=\"n\">foo</span> <span class=\"c1\">-- VM does not have code :(</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217154664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605715216
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">let_tac</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"bp\">?</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">tk</span> <span class=\"s2\">\":=\"</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">reflected_value.expr</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parser.itactic_reflected</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">tactic.interactive</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">f.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"n\">add_decl</span> <span class=\"o\">(</span><span class=\"n\">declaration.defn</span> <span class=\"n\">name</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">tac</span> <span class=\"o\">(</span><span class=\"n\">reducibility_hints.regular</span> <span class=\"mi\">1</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">run_tac</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">tactic.interactive</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">f.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">tac</span><span class=\"o\">),</span>\n  <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">declaration.value</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">env.get</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n  <span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">val</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">let_tac</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">run_tac</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- :)</span>\n  <span class=\"n\">run_tac</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217155648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605715534
    }
]