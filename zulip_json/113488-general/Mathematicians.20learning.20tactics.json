[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">one</span>       <span class=\"o\">:=</span> <span class=\"n\">succ_pnat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_one</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127318046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700334
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/00a2eb4119d27761c8a6ee38eb1eae532cd3ac19/data/pnat.lean#L52\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/00a2eb4119d27761c8a6ee38eb1eae532cd3ac19/data/pnat.lean#L52\">https://github.com/leanprover/mathlib/blob/00a2eb4119d27761c8a6ee38eb1eae532cd3ac19/data/pnat.lean#L52</a></p>",
        "id": 127318057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700361
    },
    {
        "content": "<p>All of the proofs of the axioms are the same</p>",
        "id": 127318061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700373
    },
    {
        "content": "<p>\"it's true for <code>nat</code> so done by <code>subtype.eq</code>\"</p>",
        "id": 127318070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700395
    },
    {
        "content": "<p>Could I write that sentence as a tactic?</p>",
        "id": 127318075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700407
    },
    {
        "content": "<p>I don't even know if that's possible because I don't know what tactics know about names</p>",
        "id": 127318082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700430
    },
    {
        "content": "<p>I'm looking for a proof that defines <code>mul</code> and <code>one</code> and then says <code>done by tactic</code></p>",
        "id": 127318143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700490
    },
    {
        "content": "<p>If I can do the above with a tactic then I think I can start to work on the tactic I actually want.</p>",
        "id": 127318210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700566
    },
    {
        "content": "<p>and maybe other mathematicians might like the same sort of tactics</p>",
        "id": 127318216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700580
    },
    {
        "content": "<p>Remember when we noticed that proving that if A and B were equiv and A was a ring then B was a ring, was actually quite annoying?</p>",
        "id": 127318230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700618
    },
    {
        "content": "<p>And Kenny would just knock off a proof and he'd just check all ten axioms</p>",
        "id": 127318243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700630
    },
    {
        "content": "<p>and every proof would be <code>funext, simp [name of thing I'm proving]</code></p>",
        "id": 127318254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700661
    },
    {
        "content": "<p>I think it's about time Kenny learnt how to write this tactic too</p>",
        "id": 127318296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700683
    },
    {
        "content": "<p>This is somewhat similar to Simon's pi instance tactic</p>",
        "id": 127318312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700701
    },
    {
        "content": "<p>Can you give me a link?</p>",
        "id": 127318314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700710
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean\">https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean</a></p>",
        "id": 127318327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700740
    },
    {
        "content": "<p>It's just the same underlying question Mario. It's some concept that is natural to us -- you exchange something with something that's equiv and then an algorithm goes off in our heads which just transfers a whole bunch of structure from one thing to the other effortlessly</p>",
        "id": 127318339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700768
    },
    {
        "content": "<p>but to be perfectly honest, the \"Kenny method\", which I used also in metamath days, actually gets things done</p>",
        "id": 127318345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700780
    },
    {
        "content": "<p>It's only after you find yourself doing exactly the same thing ~20 times that you should start considering the tactic approach</p>",
        "id": 127318406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700807
    },
    {
        "content": "<p>That's the point. I wonder if this is what I'm staring at.</p>",
        "id": 127318420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700835
    },
    {
        "content": "<p>with less than that, the time it takes to figure out how to write a tactic <em>eclipses</em> the time it would have taken to just copy paste get it over with</p>",
        "id": 127318426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700849
    },
    {
        "content": "<p>I'm running into it again and again, constantly proving trivial things</p>",
        "id": 127318428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700860
    },
    {
        "content": "<p>and the reason I'm interested</p>",
        "id": 127318437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700873
    },
    {
        "content": "<p>That's not the same</p>",
        "id": 127318439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700876
    },
    {
        "content": "<p>is that the tactic formalises something which I do naturally in my brain</p>",
        "id": 127318444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700888
    },
    {
        "content": "<p>if it's <em>different</em> trivial things, the tactic won't help</p>",
        "id": 127318445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700890
    },
    {
        "content": "<p>and I like formalizing stuff</p>",
        "id": 127318447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700896
    },
    {
        "content": "<p>it will handle one kind of trivial and leave untouched 60 others</p>",
        "id": 127318451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700908
    },
    {
        "content": "<p>This is the point at which I stop understanding</p>",
        "id": 127318452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700912
    },
    {
        "content": "<p>and the only way I will understand</p>",
        "id": 127318455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700917
    },
    {
        "content": "<p>is by trying to do it and failing</p>",
        "id": 127318473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700922
    },
    {
        "content": "<p>How many other proofs look like the proof of <code>comm_monoid pnat</code>?</p>",
        "id": 127318499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700938
    },
    {
        "content": "<p>so I want to finally understand how difficult it is to write schoolkid.</p>",
        "id": 127318500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700944
    },
    {
        "content": "<p>I don't know Mario. That's what I want to find out.</p>",
        "id": 127318504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700957
    },
    {
        "content": "<p>Instead of saying \"Mario go write schoolkid like I told you, it should be there\"</p>",
        "id": 127318514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700976
    },
    {
        "content": "<p>it should already be in your file staring back at you before you want to consider writing a tactic automating it</p>",
        "id": 127318521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527700987
    },
    {
        "content": "<p>I should just try to write it myself</p>",
        "id": 127318523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700989
    },
    {
        "content": "<p>Another way to put it: Tactics are a <em>refactoring technique</em>. You should already have a repetitive proof, and now you want to get the same thing done but easier</p>",
        "id": 127318592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527701056
    },
    {
        "content": "<p>I also wonder whether you really need a tactic, or just a lemma/instance \"a subtype of a monoid is a monoid if it's closed under multiplication and contains the identity\"</p>",
        "id": 127318616,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527701104
    },
    {
        "content": "<p>^ this. In this world of automation, lemmas are unsung heroes</p>",
        "id": 127318684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527701176
    },
    {
        "content": "<p>that might be true in this case, but i think knowing how to write a tactic is a useful and core lean skill. Even if you don't write tactics, you should understand how they work so you can understand why they fail</p>",
        "id": 127320354,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527703013
    },
    {
        "content": "<p>obviously there is chapter 8 in programming in lean. now if you don't want to write anything complicated, the way forward is to browse through how the tactics are written in core lean, starting with the most basic ones like intro.</p>",
        "id": 127320393,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527703071
    },
    {
        "content": "<p>(this is all on my to-do list as well, haha)</p>",
        "id": 127320399,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527703080
    },
    {
        "content": "<p>for references there is John Harrison's \"Practical Logic and Automated Reasoning\", Chlipala's \"Certified Programming with Dependent Types\", although in Coq, is handy</p>",
        "id": 127320469,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527703146
    },
    {
        "content": "<p>for some applications I have \"Term Rewriting and All That\", \"Decision Procedures: An Algorithmic Point of View\", \"Modern Computer Algebra\"</p>",
        "id": 127320585,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527703241
    },
    {
        "content": "<p>All the way at the bottom of my very sad to-do list is: \"learn Isabelle and study sledgehammer and nitpick\" (some other popular and useful tactics...)</p>",
        "id": 127320794,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527703461
    },
    {
        "content": "<p>since i only make progress with Lean on the weekends, I'll see you guys in a few years :)</p>",
        "id": 127320822,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527703508
    },
    {
        "content": "<p>But the <code>intro</code> tactic is written in C++, right? At least I found <a href=\"https://github.com/leanprover/lean/tree/dac6eec55661d3a2dab56859ffc05aef1aabb185/src/library/tactic\" target=\"_blank\" title=\"https://github.com/leanprover/lean/tree/dac6eec55661d3a2dab56859ffc05aef1aabb185/src/library/tactic\">https://github.com/leanprover/lean/tree/dac6eec55661d3a2dab56859ffc05aef1aabb185/src/library/tactic</a>, and it contains a lot of <code>cpp</code> files.</p>",
        "id": 127321007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527703769
    },
    {
        "content": "<p>try <code>library/init/meta/interactive.lean</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident_</span><span class=\"err\">?</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">intro1</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n</pre></div>",
        "id": 127321123,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527703913
    },
    {
        "content": "<p>So what is the relation between this <code>lean</code>-file and the <code>cpp</code>-files that I found?</p>",
        "id": 127321207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527703989
    },
    {
        "content": "<p>The tactics that you found are declared in Lean as constants:</p>\n<div class=\"codehilite\"><pre><span></span>meta constant intro_core    : name → tactic expr\nmeta constant intron        : nat → tactic unit\n</pre></div>\n\n\n<p>That is, they do not have Lean definitions and Lean simply executes the C++ implementation when they are called.</p>",
        "id": 127321289,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527704104
    },
    {
        "content": "<p>Dumb question:</p>",
        "id": 127321647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527704512
    },
    {
        "content": "<p>what's the quickest way to generate a complete \"blank\" construction of a <code>comm_ring</code></p>",
        "id": 127321708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527704546
    },
    {
        "content": "<p>I want</p>",
        "id": 127321712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527704551
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>{mul := _,\n</pre></div>",
        "id": 127321718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527704559
    },
    {
        "content": "<p><code>mul_assoc := _,</code></p>",
        "id": 127321725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527704569
    },
    {
        "content": "<p>etc etc</p>",
        "id": 127321731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527704580
    },
    {
        "content": "<p><code>{..}</code></p>",
        "id": 127321765,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1527704636
    },
    {
        "content": "<p>You should look into <code>pexpr.mk_structure_instance</code></p>",
        "id": 127321819,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527704655
    },
    {
        "content": "<p>Possibly first stupid question of many</p>",
        "id": 127322553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">semigroup</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 127322561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705569
    },
    {
        "content": "<p>I am just trying to play with structures to see how far I can get in tactic mode</p>",
        "id": 127322575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705595
    },
    {
        "content": "<p>but Lean doesn't like that instance</p>",
        "id": 127322588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705602
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at field &#39;mul_assoc&#39;\n  sorry\nhas type\n  ∀ (a b c : Π (i : I), f i), ?m_1 (?m_1 a b) c = ?m_1 a (?m_1 b c)\nbut is expected to have type\n  ∀ (a b c : Π (i : I), f i), a * b * c = a * (b * c)\n</pre></div>",
        "id": 127322628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> thanks -- that comment helped!</p>",
        "id": 127322630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705625
    },
    {
        "content": "<p>I'm still stuck though</p>",
        "id": 127322634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705630
    },
    {
        "content": "<p>fixed it</p>",
        "id": 127322666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">semigroup</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n<span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 127322669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705692
    },
    {
        "content": "<p>I think Mario once explained to me what was going on there but I still find it confusing</p>",
        "id": 127322676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527705706
    },
    {
        "content": "<p>I am experimenting with algebra.pi_instances</p>",
        "id": 127323292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527706484
    },
    {
        "content": "<p>I kind of suspect that Kenny will know all the answers to my questions</p>",
        "id": 127323297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527706496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> what's your golf proof of <code>instance comm_ring [∀ i, comm_ring $ f i] : comm_ring (Π i : I, f i)</code>?</p>",
        "id": 127323332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527706553
    },
    {
        "content": "<p>Product of commutative rings is a ring.</p>",
        "id": 127323365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527706563
    },
    {
        "content": "<p>Do you have to write as many lines as there are axioms (plus a few more lines on top)?</p>",
        "id": 127323385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527706602
    },
    {
        "content": "<p>Or can you do tricks -- but you can't use Simon's tactic, just stuff like simp</p>",
        "id": 127323397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527706625
    },
    {
        "content": "<p>you can write tools</p>",
        "id": 127323402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527706637
    },
    {
        "content": "<p>but in tactic mode, not new tactics</p>",
        "id": 127323406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527706663
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_ring</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">add_assoc</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_zero</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">zero_add</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_left_neg</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_comm</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_one</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">one_mul</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">left_distrib</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">right_distrib</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127324580,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527708217
    },
    {
        "content": "<p>Kenny I want to play with the add/zero/neg etc part of your code</p>",
        "id": 127325167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527708987
    },
    {
        "content": "<p>but if I try this</p>",
        "id": 127325169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527708993
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_ring</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span><span class=\"o\">,</span><span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"kn\">end</span><span class=\"o\">,</span><span class=\"c1\">-- λ x y i, x i + y i,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">add_assoc</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_zero</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">zero_add</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_left_neg</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">add_comm</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_one</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">one_mul</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">left_distrib</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">right_distrib</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127325171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527708998
    },
    {
        "content": "<p>how do you want to play with them?</p>",
        "id": 127325176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527709013
    },
    {
        "content": "<p>then there's no definition of add so your tactic doesn't finish the job and the errors from this for some reason stop Lean from processing <code>add</code></p>",
        "id": 127325185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527709031
    },
    {
        "content": "<p>what do you want to change it to?</p>",
        "id": 127325192,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527709046
    },
    {
        "content": "<p>I want to change it into a begin end tactic</p>",
        "id": 127325201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527709073
    },
    {
        "content": "<p>of the form \"intros,funext,apply has_add.add end\"</p>",
        "id": 127325248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527709089
    },
    {
        "content": "<p>trust the force, Luke</p>",
        "id": 127325254,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527709099
    },
    {
        "content": "<p>Can you write a tactic which does add,zero,neg,mul and one?</p>",
        "id": 127325285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527709147
    },
    {
        "content": "<p>not really</p>",
        "id": 127325301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527709167
    },
    {
        "content": "<p>In every case it's \"deduce it from the factors\"</p>",
        "id": 127325306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527709172
    },
    {
        "content": "<p>I'm not clear on why we're rehashing this. You are rediscovering Simon's tactic</p>",
        "id": 127327884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527712613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">pi</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>     <span class=\"c1\">-- The indexing type</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"c1\">-- The family of types already equiped with instances</span>\n\n<span class=\"n\">class</span> <span class=\"n\">notation_crazy_structure_that_someone_else_wrote</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_le</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">can_a_tactic_prove_me</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">notation_crazy_structure_that_someone_else_wrote</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">notation_crazy_structure_that_someone_else_wrote</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 127328137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527712950
    },
    {
        "content": "<p>I'm trying to learn it</p>",
        "id": 127328145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527712961
    },
    {
        "content": "<p>I can't prove that with pi_instance</p>",
        "id": 127328238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713090
    },
    {
        "content": "<p>I am hoping I can just have a proof of the form \"by canonical\"</p>",
        "id": 127328254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713115
    },
    {
        "content": "<p>I have to learn it because I can't keep pestering Simon every time I want it to do a bit more</p>",
        "id": 127328266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713145
    },
    {
        "content": "<p>no extra inputs or anything</p>",
        "id": 127328440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713324
    },
    {
        "content": "<p>because isn't it true that all that structure just transfers over completely canonically?</p>",
        "id": 127328458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> can <code>pi_instance</code> do this without being fed any extra information whatsoever?</p>",
        "id": 127328540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713426
    },
    {
        "content": "<p>Lean needs to get better at doing stuff which mathematicians find trivial</p>",
        "id": 127328563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713472
    },
    {
        "content": "<p>Do what specifically?</p>",
        "id": 127328635,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527713527
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 127328636,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527713528
    },
    {
        "content": "<p>construct the instance above called <code>can_a_tactic_prove_me</code></p>",
        "id": 127328683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713629
    },
    {
        "content": "<p>Is it possible to write a tactic which proves a goal like that without any extra prodding?</p>",
        "id": 127328725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713649
    },
    {
        "content": "<p>I think so.</p>",
        "id": 127328730,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527713669
    },
    {
        "content": "<p>By generalising your pi_instance tactic?</p>",
        "id": 127328740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713691
    },
    {
        "content": "<p>I'm working on a set of tactics to replace <code>pi_instance</code>. It would be the dual of <code>cases</code> / <code>case</code> which I call <code>refine_struct</code>/ <code>field</code> / <code>apply_field</code>. Basically, you write <code>refine_struct { .. } ; intro ; apply_field</code>. Maybe you'd need a bit more but you would have a generic way of referring to the field that you're looking into</p>",
        "id": 127328857,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527713809
    },
    {
        "content": "<p>oh wow!</p>",
        "id": 127328918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713882
    },
    {
        "content": "<p>I've been procrastinating with writing my dissertation and working but I should get back to it</p>",
        "id": 127328953,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527713939
    },
    {
        "content": "<p>Yes that's exactly the sort of conclusion I was coming to (that's why I was asking about <code>..</code>). I wanted to do <code>begin refine { .. },...</code> but was having trouble with it</p>",
        "id": 127328962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713947
    },
    {
        "content": "<p>Well can I write these tactics somehow?</p>",
        "id": 127328969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713956
    },
    {
        "content": "<p>Or Kenny when he's finished doing my project?</p>",
        "id": 127328976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527713967
    },
    {
        "content": "<p>It is actually some pretty tricky stuff so it would be easier for me to just do it than to explain how to do it. Although, I'd like to also write a tutorial about it</p>",
        "id": 127329067,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527714061
    },
    {
        "content": "<p>Darn it I need a route into this stuff</p>",
        "id": 127329164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527714161
    },
    {
        "content": "<p>In the mean time, I have a goodie coming up: a tactic that asserts that subtractions have non-negative results (they don't hit the floor of natural numbers) and a tactic that assert that all divisors are non-null</p>",
        "id": 127329194,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527714212
    },
    {
        "content": "<p>I need to find a tactic which I can write and is somehow distantly related to what I want to be able to do with tactics</p>",
        "id": 127329201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527714217
    },
    {
        "content": "<p>subtractions -- Patrick will be over the moon!</p>",
        "id": 127329253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527714244
    },
    {
        "content": "<p>If you want, I can show you my subtraction tactic and let you figure out the version for division</p>",
        "id": 127329342,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527714367
    },
    {
        "content": "<p>I could have a look!</p>",
        "id": 127329369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527714457
    },
    {
        "content": "<p>Somehow it's the canonical stuff that I'm interested in though</p>",
        "id": 127329374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527714474
    },
    {
        "content": "<p>What do you mean by canonical?</p>",
        "id": 127329426,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527714514
    },
    {
        "content": "<p>Feel free to try your hand on <a href=\"https://gist.github.com/cipher1024/72af1694ce395d7162bab1a72c1f9c56\" target=\"_blank\" title=\"https://gist.github.com/cipher1024/72af1694ce395d7162bab1a72c1f9c56\">https://gist.github.com/cipher1024/72af1694ce395d7162bab1a72c1f9c56</a></p>",
        "id": 127330210,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527715511
    },
    {
        "content": "<p>Thanks Simon! I'll have a very close look at that (but probably not today <span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span> )</p>",
        "id": 127349075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527750576
    }
]