[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Help! I'm looking at upgrading to 3.4.0, but one of the recent commits introduced a bug that breaks a lot of mathlib stuff. I'm a bit worried I will have to abandon 3.4 and stick to nightlies unless it is fixed.</p>\n<div class=\"codehilite\"><pre><span></span>def f : ℕ → ℕ := λ _, 0\n\ntheorem A (x : ℕ) : f x = 0 := rfl\ntheorem B (x : ℕ) : (f : _) x = 0 := rfl\ntheorem C (x : ℕ) : (f : ℕ → ℕ) x = 0 := rfl\n\nexample (x) : f x = 0 := by simp [A] --ok\nexample (x) : f x = 0 := by have := A x; rw this --ok\nexample (x) : f x = 0 := by simp [B] --fails\nexample (x) : f x = 0 := by have := B x; rw this --fails\nexample (x) : f x = 0 := by simp [C] --fails\nexample (x) : f x = 0 := by have := C x; rw this --fails\n</pre></div>",
        "id": 125331297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524180741
    },
    {
        "content": "<p>Oh, it's not a bug, it's <code>typed_expr</code>. What is the purpose of this thing?</p>",
        "id": 125331546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524181316
    },
    {
        "content": "<p>and how do I get my type ascriptions back?</p>",
        "id": 125331596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524181351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>typed_expr</code> <a href=\"https://github.com/leanprover/lean/commit/bcaa0b2/\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/bcaa0b2/\">*is* the new type ascription</a>. I'm investigating what's happening here.</p>",
        "id": 125432803,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524220331
    },
    {
        "content": "<p>I am very relieved to see this answer</p>",
        "id": 125434269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524220589
    },
    {
        "content": "<p>because there was always the fear that something had to be changed to make the monad stuff work</p>",
        "id": 125434333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524220613
    },
    {
        "content": "<p>and that it couldn't be changed back and Mario's observation was supposed to be the new normal</p>",
        "id": 125434488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524220629
    },
    {
        "content": "<p>I found the issue, it's certainly not intended behavior. I'll talk to Leo about it.</p>",
        "id": 125437568,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524221170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  I have some additional information about what is happening, although you may already know:</p>\n<ul>\n<li>When you type <code>(e : t)</code>, the resulting pexpr contains a constant <code>typed_expr t e</code>, to record the existence of the type ascription. (I am not sure what it used to be, probably a macro of some kind.)</li>\n<li>It used to be the case that the corresponding expr was just <code>e</code>, i.e. type ascriptions leave no trace in the resulting term. This property is super important for me. Now, the resulting expr is <code>typed_expr t e</code>, which breaks many simp lemmas which used type ascriptions to silently correct some intermediate types, since simp doesn't unfold reducibles in simp lemma LHS for matching. (And it probably shouldn't, otherwise this would make it hard to actually get rid of a reducible via a simp lemma.)</li>\n<li>I have a workaround tactic <code>clean</code> which is like <code>by exact</code> but removes all identity functions from the given pexpr after elaboration. I am using this on all simp lemmas that use type ascription. But this is probably not the best solution, and I hope you have luck fixing this. What about just stripping <code>typed_expr</code> during pexpr -&gt; expr translation?</li>\n</ul>",
        "id": 125471033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524263673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I tried to @ you in the RSS feed, did that not work? <a href=\"#narrow/stream/116290-rss/subject/Recent.20Commits.20to.20lean.3Amaster/near/125451078\" title=\"#narrow/stream/116290-rss/subject/Recent.20Commits.20to.20lean.3Amaster/near/125451078\">https://leanprover.zulipchat.com/#narrow/stream/116290-rss/subject/Recent.20Commits.20to.20lean.3Amaster/near/125451078</a></p>",
        "id": 125486104,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524298504
    },
    {
        "content": "<p>Will there be a Lean 3.4.1 then?</p>",
        "id": 125487371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524301606
    },
    {
        "content": "<p>Yes. I'll wait a while to make sure you're not digging up any other obscure issues :D</p>",
        "id": 125487416,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524301696
    },
    {
        "content": "<p>Sure</p>",
        "id": 125487420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524301704
    },
    {
        "content": "<p>There's one more, I need to minimize</p>",
        "id": 125487421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524301710
    },
    {
        "content": "<p>It seems Lean could use a rather large test project to test such things...</p>",
        "id": 125487422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524301736
    },
    {
        "content": "<p>Like... a math library say</p>",
        "id": 125487427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524301752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Here's problem number 2 from the mathlib update, reasonably minimized:</p>\n<div class=\"codehilite\"><pre><span></span>universe u\nvariables {α : Type u}\n\ndef X (α : Type u) : Type u := sorry\ninstance {α} : has_mem α (X α) := sorry\ndef ID [decidable_eq α] (s : X α) : X α := sorry\ntheorem mem_ID [decidable_eq α] (a : α) (s : X α) : a ∈ ID s ↔ a ∈ s := sorry\n\ndef T (m : X α) : Type u := sorry\ninstance decidable_eq_T {m : X α} : decidable_eq (T m) := sorry\n\ndef F (m : X α) : X (T m) := sorry\nexample {s : X α} {f : T s} : f ∈ ID (F (id s)) ↔ f ∈ F (id s) :=\nby rw [mem_ID]; admit\n</pre></div>\n\n\n<p>It derives from <code>finset.mem_pi</code>, which no longer typechecks in the latest nightly. If anyone is running the 04-06 nightly, could you check that this code typechecks?</p>",
        "id": 125653376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524625832
    },
    {
        "content": "<p>Yes, typechecks in nightly-2018-04-06.</p>",
        "id": 125653432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524625941
    },
    {
        "content": "<p>It was not a huge problem as far as updating mathlib, it only affected two proofs in mathlib relating to <code>finset.pi</code> which I just rewrote to be shorter anyway :) but it's still a mystery why this broke since there is nothing obviously related to this in the intervening commits</p>",
        "id": 125653489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524626053
    },
    {
        "content": "<p>Here is the pp all error output:</p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, did not find instance of the pattern in the target expression\n  @has_mem.mem.{?l_1 ?l_1} ?m_2 (X.{?l_1} ?m_2) (@X.has_mem.{?l_1} ?m_2) ?m_3\n    (@ID.{?l_1} ?m_2 (λ (a b : ?m_2), ?m_4 a b) ?m_5)\nstate:\nα : Type u,\ns : X.{u} α,\nf : @T.{u} α s,\nm : X.{u} (@T.{u} α s)\n⊢ iff\n    (@has_mem.mem.{u u} (@T.{u} α s) (X.{u} (@T.{u} α (@id.{u+1} (X.{u} α) s)))\n       (@X.has_mem.{u} (@T.{u} α (@id.{u+1} (X.{u} α) s)))\n       f\n       (@ID.{u} (@T.{u} α (@id.{u+1} (X.{u} α) s))\n          (λ (a b : @T.{u} α (@id.{u+1} (X.{u} α) s)), @decidable_eq_T.{u} α (@id.{u+1} (X.{u} α) s) a b)\n          (@F.{u} α (@id.{u+1} (X.{u} α) s))))\n    (@has_mem.mem.{u u} (@T.{u} α s) (X.{u} (@T.{u} α (@id.{u+1} (X.{u} α) s)))\n       (@X.has_mem.{u} (@T.{u} α (@id.{u+1} (X.{u} α) s)))\n       f\n       (@F.{u} α (@id.{u+1} (X.{u} α) s)))\n</pre></div>\n\n\n<p>The <code>decidable_eq</code> argument seems important, and the <code>id s</code> can be any composite term</p>",
        "id": 125653560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524626264
    },
    {
        "content": "<p>oh, I just noticed that <code>f</code> has the wrong type; if it has type <code>T (id s)</code> instead of <code>T s</code> it works. Maybe I minimized too much...</p>",
        "id": 125653656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524626422
    },
    {
        "content": "<p>No, that's exactly the issue. The pattern involves two occurrences of <code>?m_2</code> in types, which are defeq but not syntactically equal in the target</p>",
        "id": 125653815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524626785
    }
]