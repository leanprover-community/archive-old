[
    {
        "content": "<p>I can define a custom induction principle with a major premise of type <code>ℕ</code> (or any other “normal” type) just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">silly_nat_ind</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">silly_nat_ind</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But if I try to do the same with a major premise of type <code>Type</code>, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">silly_type_ind</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">silly_type_ind</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the <code>induction</code> tactic complains with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">user</span> <span class=\"n\">defined</span> <span class=\"n\">recursor</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">major</span> <span class=\"n\">premise</span> <span class=\"sc\">'a'</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">...</span><span class=\"o\">),</span> <span class=\"n\">where</span> <span class=\"n\">I</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n</code></pre></div>\n<p>Is <code>Type</code> not a constant? <br>\nIs there a deep reason why this can’t work, or is there just a check in the <code>induction</code> premise too strict?</p>\n<p>This may not be too relevant in practice because usually the major premise is not just a <code>Type</code>, but also a predicate on <code>Type</code> such as <code>fintype</code> or <code>is_nilpotent</code>, and then the induction proceeds on that, and that works, so I am mostly curious.</p>",
        "id": 270168154,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643704077
    },
    {
        "content": "<p>Yeah, that may very well be an implementation limitation. \"Constants\" are declarations in the environment referenced with the <code>Expr.const</code> constructor, while <code>Type</code> is a primitive <code>Expr.sort</code> application <a href=\"https://github.com/leanprover/lean4/blob/3dfd14dfffaaa7e5479e2c40c10ff94848681d93/src/Lean/Expr.lean#L205-L206\">https://github.com/leanprover/lean4/blob/3dfd14dfffaaa7e5479e2c40c10ff94848681d93/src/Lean/Expr.lean#L205-L206</a> (referencing Lean 4 because I'm lazy).</p>",
        "id": 270168838,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643704499
    },
    {
        "content": "<p>I guess <code>Type</code> doesn't count as a constant. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"kt\">Type</span><span class=\"bp\">'</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">silly_type_ind</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">'</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">silly_type_ind</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270168857,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643704507
    },
    {
        "content": "<p>(the <code>unfreezingI</code> is to deal with the <code>fintype</code> hypothesis.)</p>",
        "id": 270168906,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643704528
    },
    {
        "content": "<p>I don't recall the two ever being unified into a common concept anywhere in the codebase, so it looks like this need doesn't really come up that often.</p>",
        "id": 270169060,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643704571
    },
    {
        "content": "<p>Ah, TIL. I thought I only need to <code>unfreezeI</code> stuff that is in <code>[ … ]</code></p>",
        "id": 270169114,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643704593
    },
    {
        "content": "<p>And neat trick with <code>def Type' = Type</code>. So if this trick works, it means that the implementation limitation is not fundamental, and could (if this becomes relevant in practice) be relaxed?</p>",
        "id": 270169544,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643704758
    },
    {
        "content": "<p>Related to that: I assume there is no way to have conditional induction lemmas like the following in a way (with extra assumptions)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">silly_nat_ind</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>that still allow me to write  <code>induction n</code> (rather than <code>induction h</code>)? (I believe Isabelle’s <code>induction</code> tactic could handle this).</p>\n<p>Right now I (think I) have to make the <code>P</code> dependent on <code>a &gt; 0</code> and then <code>a &gt; 0</code> becomes the major premise. But this means <code>a</code> is not generalized, and _other_ assumptions about <code>a</code> are not threaded through the induction properly  if I don’t manually <code>revert</code> them.</p>",
        "id": 270170143,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643705108
    },
    {
        "content": "<p>Remind me again how the assumptions are discharged in Isabelle, from the proof context? And/or a dedicated case?</p>",
        "id": 270173731,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643706713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> in the Lean Zulip chat, 42 is 37.</p>",
        "id": 270174022,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643706856
    },
    {
        "content": "<p>There is <code>induction e using r</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.induction\">docs#tactic.interactive.induction</a>. Not sure off the top of my mind what it will do with your induction principle.</p>",
        "id": 270174344,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643707063
    },
    {
        "content": "<p>My first docs link, yay...</p>",
        "id": 270174362,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643707075
    },
    {
        "content": "<p>Here is an example of an induction lemma with assumptions from Isabelle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dec_induct</span> <span class=\"o\">[</span><span class=\"n\">consumes</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">case_names</span> <span class=\"n\">base</span> <span class=\"n\">step</span><span class=\"o\">]:</span>\n  <span class=\"s2\">\"i ≤ j ⟹ P i ⟹ (⋀n. i ≤ n ⟹ n &lt; j ⟹ P n ⟹ P (Suc n)) ⟹ P j\"</span>\n</code></pre></div>\n<p>I think the <code>consumes 1</code> is a hint to the tactic that there is an assumption to discharge.</p>\n<p>It then takes these from the “current facts”, which corresponds to the hyps of Lean’s goal state, I think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">transitive_stepwise_le</span><span class=\"o\">:</span>\n  <span class=\"n\">assumes</span> <span class=\"s2\">\"m ≤ n\"</span> <span class=\"s2\">\"⋀x. R x x\"</span> <span class=\"s2\">\"⋀x y z. R x y ⟹ R y z ⟹ R x z\"</span> <span class=\"n\">and</span> <span class=\"s2\">\"⋀n. R n (Suc n)\"</span>\n  <span class=\"n\">shows</span> <span class=\"s2\">\"R m n\"</span>\n<span class=\"n\">using</span> <span class=\"o\">‹</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">›</span>\n  <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">dec_induct</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"n\">assms</span> <span class=\"k\">in</span> <span class=\"n\">blast</span><span class=\"o\">)</span><span class=\"bp\">+</span>\n</code></pre></div>",
        "id": 270221715,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643726719
    },
    {
        "content": "<p>Since the \"current facts\" are ordered (right?), I'd say the corresponding solution would be to make <code>induction</code> accept an arbitrary term after <code>using</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">using</span> <span class=\"n\">dec_induct</span> <span class=\"o\">‹</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">›</span>\n</code></pre></div>\n<p>Currently it does not (and also expects at least one term after <code>induction</code>).</p>",
        "id": 270224663,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643727753
    },
    {
        "content": "<p>With hidden arguments resolved automatically, like with <code>apply</code>? That might work, but I am not sure :)</p>",
        "id": 270225101,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643727927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/induction.20on.20Type/near/270174022\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> in the Lean Zulip chat, 42 is 37.</p>\n</blockquote>\n<p>And <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> is <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span>, right? But why 37?</p>",
        "id": 270227766,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643728774
    },
    {
        "content": "<p>Because Kevin</p>",
        "id": 270228542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643729017
    },
    {
        "content": "<p>And foo/bar is fish/banana (since recently).</p>",
        "id": 270229708,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643729450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/induction.20on.20Type/near/270227766\">said</a>:</p>\n<blockquote>\n<p>And <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> is <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span>, right? But why 37?</p>\n</blockquote>\n<p>I think <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> plays the role of <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>, the octopus is performing a victory dance <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> But of course this is all a subjective matter of taste.</p>\n<p>Kevin is the authority on why 37 is his favourite number. But <code>src/algebraic_geometry/EllipticCurve.lean</code> might contain a hint. And <a href=\"https://en.wikipedia.org/wiki/37_(number)#In_mathematics\">https://en.wikipedia.org/wiki/37_(number)#In_mathematics</a> might contain a few more.</p>",
        "id": 270233390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643730654
    },
    {
        "content": "<p>There's also <a href=\"https://en.wikipedia.org/wiki/List_of_numbers_better_than_37\">https://en.wikipedia.org/wiki/List_of_numbers_better_than_37</a></p>",
        "id": 270237609,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643731994
    },
    {
        "content": "<p>I'm late here, but regarding the <code>h : a &gt; 0</code> question, the solution is often to replace <code>P a</code> with <code>P a h</code> - you did this before in a previous thread / PR</p>",
        "id": 270241883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643733496
    },
    {
        "content": "<p>Apparently if you ask people to choose a random number between 1 and 50, the chances they choose 37 are way way over 1/50. It's the most popular random number.</p>",
        "id": 270291517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643751457
    },
    {
        "content": "<p>I think you might be experiencing selection bias <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 270292157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643751700
    },
    {
        "content": "<blockquote>\n<p>I'm late here, but regarding the h : a &gt; 0 question, the solution is often to replace P a with P a h - you did this before in a previous thread / PR</p>\n</blockquote>\n<p>Right, and thanks for that, that’s what I am using now. But I'd say that’s a work around because</p>\n<ul>\n<li>it only works if that assumption is also to be passed to all the cases, which may not always be true</li>\n<li>I find it unnatural to say <code>induction h</code> when my conceptual model is that it’s an induction over , say <code>n</code></li>\n<li>It doesn’t nicely and conveniently revert the actual object of interest, and doesn't automatically thread other assumptions about it through (as it does with <code>induction n</code>)</li>\n<li>Is annoying if the <code>h</code> is a class that otherwise could just stay be unnamed.</li>\n</ul>\n<p>Of course ¾ of these are mostly subjective points, and so not a big deal</p>",
        "id": 270292955,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643752024
    },
    {
        "content": "<p>(This Dilbert comic that I totally didn't edit in any way agrees with Kevin:</p>\n<p><a href=\"/user_uploads/3121/4-f3Q9gu_jWJVdhKwHonuBGk/dilbert-10-25-01.png\">dilbert-10-25-01.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4-f3Q9gu_jWJVdhKwHonuBGk/dilbert-10-25-01.png\" title=\"dilbert-10-25-01.png\"><img src=\"/user_uploads/3121/4-f3Q9gu_jWJVdhKwHonuBGk/dilbert-10-25-01.png\"></a></div><p>37 as a random number was actually new to me when I joined this Zulip. I'd heard about 17, but that was for 1-100, so maybe that's the difference.)</p>",
        "id": 270293621,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643752307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Does the <code>generalizing</code> feature of <code>induction</code> help with reverting things for you? <code>induction h generalizing n</code>?</p>",
        "id": 270293807,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643752379
    },
    {
        "content": "<p>Note that when the goal really is of the form <code>P a h</code> (ie, depends on h), it's usually very annoying to use an induction principle of the form <code>P a</code>, and <code>induction</code> makes a mess.</p>",
        "id": 270294750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643752704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/induction.20on.20Type/near/270293807\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> Does the <code>generalizing</code> feature of <code>induction</code> help with reverting things for you? <code>induction h generalizing n</code>?</p>\n</blockquote>\n<p>No, that doesn't work; generalizing effectively just reverts <code>n</code>, and then <code>h</code>is out of scope</p>",
        "id": 270347270,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643789333
    },
    {
        "content": "<p>Is <code>n</code> the <code>a</code> in <code>h : 0 &lt; a</code>?</p>",
        "id": 270470226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643841495
    },
    {
        "content": "<p>Yes</p>",
        "id": 270540219,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643891275
    },
    {
        "content": "<p>It should generalize automatically - you might need to put <code>a</code> later in the argument list</p>",
        "id": 270542000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643892275
    }
]