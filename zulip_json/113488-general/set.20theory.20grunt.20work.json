[
    {
        "content": "<p>I need to prove the following (hoping I didn't mess up my lemma extraction):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">U₁</span> <span class=\"n\">V₁</span> <span class=\"n\">U₂</span> <span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₁</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span> <span class=\"err\">⊆</span> <span class=\"n\">U₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₂</span> <span class=\"o\">:</span> <span class=\"n\">V₂</span> <span class=\"err\">⊆</span> <span class=\"n\">U₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u_in</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">V₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v_in</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">V₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">huw</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">U₂</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∩</span> <span class=\"n\">V₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">$</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∩</span> <span class=\"n\">V₂</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">hwv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">U₂</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∩</span> <span class=\"n\">V₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">$</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∩</span> <span class=\"n\">V₂</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Is there anything smart I could do here (besides taking an intern to prove it)?</p>",
        "id": 202020847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593117025
    },
    {
        "content": "<p>The real world proof is to draw four circles on a piece of paper.</p>",
        "id": 202020929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593117076
    },
    {
        "content": "<p>Or, if you have strong opinion about pictures like Bourbaki, not doing anything.</p>",
        "id": 202020981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593117106
    },
    {
        "content": "<p>I didn't even try to process what this is saying, but are you sure it's stated right? <code>simp [set.prod] at *, tauto!</code> reduces it to something unprovable.</p>",
        "id": 202021751,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593117530
    },
    {
        "content": "<p><code>tauto</code> being the usual go-to for set theory grunt work.</p>",
        "id": 202021845,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593117594
    },
    {
        "content": "<p>Yes, it's correct, although I forgot to remove that last assumption which is useless (it's used for the variant you have to prove next).</p>",
        "id": 202022029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593117688
    },
    {
        "content": "<p>Because V1 is disjoint from U2 and U3.</p>",
        "id": 202022147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593117731
    },
    {
        "content": "<p>Oh, sorry, the result of <code>tauto</code> is provable (there's a contradiction in the hypotheses).</p>",
        "id": 202022291,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593117793
    },
    {
        "content": "<p>Indeed.</p>",
        "id": 202022444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593117851
    },
    {
        "content": "<p>What's <code>U\\3</code>? I don't see it</p>",
        "id": 202024433,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1593118889
    },
    {
        "content": "<p>Sorry, U3 is <code>-(V₁ ∩ V₂)</code></p>",
        "id": 202025098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593119247
    },
    {
        "content": "<p>Wait, I messed up something.</p>",
        "id": 202025132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593119267
    },
    {
        "content": "<p>I meant union of V1 and V2, not intersection.</p>",
        "id": 202025277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593119332
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">U₁</span> <span class=\"n\">V₁</span> <span class=\"n\">U₂</span> <span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₁</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span> <span class=\"err\">⊆</span> <span class=\"n\">U₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₂</span> <span class=\"o\">:</span> <span class=\"n\">V₂</span> <span class=\"err\">⊆</span> <span class=\"n\">U₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u_in</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">V₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v_in</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">V₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">huw</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">U₂</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∩</span> <span class=\"n\">V₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">$</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∩</span> <span class=\"n\">V₂</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">hwv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">U₂</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∩</span> <span class=\"n\">V₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">$</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∩</span> <span class=\"n\">V₂</span><span class=\"o\">))),</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">bool</span> <span class=\"o\">{</span><span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">])</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202025353,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593119388
    },
    {
        "content": "<p>It's false</p>",
        "id": 202025363,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593119394
    },
    {
        "content": "<p>Yes, I messed up the statement, as I wrote above.</p>",
        "id": 202025423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593119414
    },
    {
        "content": "<p>Sorry about that.</p>",
        "id": 202025433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593119417
    },
    {
        "content": "<p>It's too hot here.</p>",
        "id": 202025443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593119426
    },
    {
        "content": "<p>In that case <code>finish [set.ext_iff, set.subset_def]</code> works</p>",
        "id": 202025533,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593119496
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 202025564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593119522
    },
    {
        "content": "<p>My computer is stupid, but fortunately Chris isn't.</p>",
        "id": 202025817,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593119646
    },
    {
        "content": "<p>(But Kenny will hate you for that)</p>",
        "id": 202026129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593119826
    },
    {
        "content": "<p>if you post the correct statement i'll look for something faster than finish</p>",
        "id": 202026637,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593120106
    },
    {
        "content": "<p>The correct statement is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">U₁</span> <span class=\"n\">V₁</span> <span class=\"n\">U₂</span> <span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₁</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span> <span class=\"err\">⊆</span> <span class=\"n\">U₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₂</span> <span class=\"o\">:</span> <span class=\"n\">V₂</span> <span class=\"err\">⊆</span> <span class=\"n\">U₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u_in</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">V₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v_in</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">V₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">huw</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">U₂</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∪</span> <span class=\"n\">V₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">$</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∪</span> <span class=\"n\">V₂</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 202026806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593120182
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_prod</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">((</span><span class=\"n\">huw</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">u_in</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">⟨</span><span class=\"n\">VU₁</span> <span class=\"n\">u_in</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 202027510,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593120536
    },
    {
        "content": "<p>I knew the smart thing do to was to take an intern.</p>",
        "id": 202027608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593120597
    },
    {
        "content": "<p>It's still a bit sad. Let's say <code>finish</code> will be fast in Lean 4.</p>",
        "id": 202027664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593120615
    },
    {
        "content": "<p>Thank you very much Chris!</p>",
        "id": 202027676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593120625
    },
    {
        "content": "<p>fwiw here's what I ended up with; i am a worse intern than chris</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">U₁</span> <span class=\"n\">V₁</span> <span class=\"n\">U₂</span> <span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₁</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span> <span class=\"err\">⊆</span> <span class=\"n\">U₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₂</span> <span class=\"o\">:</span> <span class=\"n\">V₂</span> <span class=\"err\">⊆</span> <span class=\"n\">U₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u_in</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">V₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v_in</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">V₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">huw</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">U₂</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∪</span> <span class=\"n\">V₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">$</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∪</span> <span class=\"n\">V₂</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_empty_eq</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl_union</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_union_eq</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span> <span class=\"n\">iff_false</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202027903,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593120774
    },
    {
        "content": "<p>Thanks anyway. <code>tauto</code> is way faster than <code>finish</code></p>",
        "id": 202028142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593120926
    },
    {
        "content": "<p>And I wouldn't be worried to be a worse intern that Chris...</p>",
        "id": 202028195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593120956
    },
    {
        "content": "<p>Working through this was kind of relaxing...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">U₁</span> <span class=\"n\">V₁</span> <span class=\"n\">U₂</span> <span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₁</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span> <span class=\"err\">⊆</span> <span class=\"n\">U₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">VU₂</span> <span class=\"o\">:</span> <span class=\"n\">V₂</span> <span class=\"err\">⊆</span> <span class=\"n\">U₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span> <span class=\"err\">∩</span> <span class=\"n\">U₂</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u_in</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">V₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v_in</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">V₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">huw</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">U₂</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∪</span> <span class=\"n\">V₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">$</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"err\">∪</span> <span class=\"n\">V₂</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U₁</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_empty_eq</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl_union</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_union_eq</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span> <span class=\"n\">iff_false</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">huw</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">assumption&#39;</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">VU₁</span> <span class=\"n\">u</span> <span class=\"n\">u_in</span><span class=\"o\">),</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202029255,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593121529
    },
    {
        "content": "<p>We should collaborate more, we have very complementary ways of relaxing.</p>",
        "id": 202029366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593121585
    },
    {
        "content": "<p>I have another one: what is the automated procedure that should have avoided proving by hand:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">chore</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">S</span> <span class=\"err\">∩</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">S</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"err\">∩</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inter_right_comm</span><span class=\"o\">,</span> <span class=\"n\">inter_right_comm</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">union_inter_distrib_right</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 202370952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593466504
    },
    {
        "content": "<p><code>by { ext, simp, tauto! }</code></p>",
        "id": 202371370,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593466744
    },
    {
        "content": "<p>Thanks! I didn't try the right combination. I still wish it could be only one tactic.</p>",
        "id": 202375028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593469299
    },
    {
        "content": "<p>you could have <code>meta def set_theory := `[ext; simp; tauto!]</code>. It's a pretty flexible approach</p>",
        "id": 202375181,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593469373
    }
]