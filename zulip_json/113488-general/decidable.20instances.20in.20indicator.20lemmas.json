[
    {
        "content": "<p>I just saw <a href=\"https://github.com/leanprover-community/mathlib/pull/13834\">#13834</a> by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and I'm curious why we are doing this. <br>\nWe rarely have <code>[decidable (a ∈ s)]</code>, I guess the main examples are (co)finite sets on types with decidable equality.<br>\nThe PR shows that this leads to quite some cases where you have to add an extra <code>classical</code> to the argument. And we've had some times-outs when checking <code>decidable</code> (but maybe that was only for decidable equality?)<br>\nIn a few cases, you might actually be able to have a decidable instance, but there are many ways you can still solve your goal (<code>congr</code>, <code>convert</code>, <code>simp</code>, <code>simp_rw</code>, <code>split_ifs</code>, ...). Sure, it is confusing, but I think it will be confusing more often when you're missing a <code>classical</code> in your environment (and note that we're almost always rewriting from left-to-right with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator_apply\">docs#set.indicator_apply</a>, so there usually won't be any trouble unifying the LHS with your expression).</p>\n<p>Similar remarks apply to <a href=\"https://github.com/leanprover-community/mathlib/pull/11708\">#11708</a>. I was helping <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> yesterday adopting the suggested comments, and it seems weird to me to consider whether <code>decidable (a ∈ U)</code> when <code>U</code> is a clopen set in a topological space. Sure, it might happen a couple of times, but it will not be relevant the vast majority of times. I thought we were moving away from such \"constructive\" considerations?</p>",
        "id": 282076852,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652345822
    },
    {
        "content": "<p>This was following what I've seen called \"Yury's rule\", which essentially states \"never write a lemma that mentions a specific decidable instance when you could mention a generic one\"</p>",
        "id": 282080834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652348355
    },
    {
        "content": "<p>(That rule applies to any class living in Type, in particular <code>fintype</code>.)</p>",
        "id": 282082703,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652349459
    },
    {
        "content": "<p>I agree that rule is generally good to follow.<br>\nDo we want to follow this rule this strictly?<br>\nIn this case we rarely have a decidable instance and the decidable instance only occurs in the RHS of a lemma that you'll almost always use to rewrite left-to-right. <br>\nBut maybe always following the rule  is easier.<br>\n (cc <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>)</p>",
        "id": 282083805,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652350051
    },
    {
        "content": "<p>In any case, I don't understand why do we need all these <code>letI</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/13834\">#13834</a>. What's wrong with <code>open_locale classical</code>? You can still add <code>[decidable _]</code> arguments when you need them.</p>",
        "id": 282119899,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652367926
    },
    {
        "content": "<p>E.g., <code>rw [indicator]</code> should work without <code>classical</code>.</p>",
        "id": 282120153,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652368022
    },
    {
        "content": "<p>Same question about the code using <code>indicator</code>: why not <code>open_locale classical</code>?</p>",
        "id": 282120376,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652368106
    },
    {
        "content": "<p>The danger with <code>open_locale classical</code> is that it encoruages you to forget to write your lemmas with the appropriate decidable assumptions</p>",
        "id": 282138736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652375110
    },
    {
        "content": "<p>If I finished my linter for that then I guess it wouldn't matter</p>",
        "id": 282138767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652375120
    },
    {
        "content": "<blockquote>\n<p>but there are many ways you can still solve your goal ([...] simp, simp_rw, [...])</p>\n</blockquote>\n<p>I just want to point out that <code>simp</code> and <code>simp_rw</code> (in general) <em>don't</em> solve goals with different (non-canonical) decidable instances.  Think for example about <code>ite p 0 1 = ite p 0 1</code>, <code>simp</code> won't solve this, and <code>simp_rw [eq_self_iff_true]</code> won't crack it either.</p>",
        "id": 282147450,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652378395
    },
    {
        "content": "<p>I thought this was the point of your new <code>congr</code> changes for <code>simp</code> recently?</p>",
        "id": 282147619,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652378430
    },
    {
        "content": "<p>Before the congruence lemma change, <code>simp</code> would introduce non-canonical decidable instances.  (So it was impossible to avoid them.)  But the change won't help if there are already non-canonical decidable instances in the input formula (or in the rhs of a simp lemma).</p>",
        "id": 282147803,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652378511
    },
    {
        "content": "<p>Oh, good to know. Thanks for the correction!</p>",
        "id": 282151798,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652380217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/decidable.20instances.20in.20indicator.20lemmas/near/282138736\">said</a>:</p>\n<blockquote>\n<p>The danger with <code>open_locale classical</code> is that it encoruages you to forget to write your lemmas with the appropriate decidable assumptions</p>\n</blockquote>\n<p>AFAIR, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> suggested the following trick:</p>\n<ol>\n<li>Disable <code>open_locale classical</code>.</li>\n<li>Add <code>[decidable*]</code> assumptions to all lemmas that have errors in their <em>statements</em> (not proofs).</li>\n<li>Restore <code>open_locale classical</code>.</li>\n<li>Fix any proofs, if needed.</li>\n</ol>",
        "id": 282158003,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652383256
    },
    {
        "content": "<p>Yes, that works as a way to fix things but doesn't really help prevent new mistakes being introduced</p>",
        "id": 282166590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652387128
    },
    {
        "content": "<p>Can we hack something so that <code>begin ... end</code> opens <code>classical</code>, so that it would be available in the proofs (at least tactic proofs) but not in statements? On second thought, it's probably way too hacky though.</p>",
        "id": 282173947,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1652390919
    },
    {
        "content": "<p>This is bad still, because <code>classical</code> in proofs can introduce bad decidable instances.</p>",
        "id": 282175325,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652391773
    },
    {
        "content": "<p>I think the problem with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#classical\">tactic#classical</a> is it introduces the instance with too high a priority</p>",
        "id": 282175688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652391975
    },
    {
        "content": "<p>It already happened to me that I had to replace <code>classical</code> why <code>haveI := classical.dec_eq α</code> to avoid poisoning other types with conflicting decidability instances.</p>",
        "id": 282175717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652391996
    },
    {
        "content": "<p>Yeah everything would work better if <code>classical</code> and <code>open_locale classical</code> weren't synonyms for \"Poison me now\".</p>",
        "id": 282175780,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652392033
    },
    {
        "content": "<p>The former is \"poison my proof\", the latter is \"poison my statement but make my proof easier\"</p>",
        "id": 282175835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652392079
    },
    {
        "content": "<p>We need something in between</p>",
        "id": 282175877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652392087
    },
    {
        "content": "<p>The second can <em>also</em> poison your proof.</p>",
        "id": 282175922,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652392118
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 282175949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652392139
    },
    {
        "content": "<p>Regarding \"the priority is too strong\"; can <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.set_basic_attribute\">docs#tactic.set_basic_attribute</a> be used to locally enable an instance?</p>",
        "id": 282176313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652392355
    },
    {
        "content": "<p>I've definitely found many proofs where I had to replace <code>classical</code>with <code>letI := classical.dec_eq X</code></p>",
        "id": 282177837,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652393250
    },
    {
        "content": "<p>Also, this hack wouldn't work for lean4 as there's no begin/end</p>",
        "id": 282177854,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652393263
    },
    {
        "content": "<p>What does lean4 use as a marker to enter tactic mode?</p>",
        "id": 282180283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652394773
    },
    {
        "content": "<p>I read the <code>begin / end</code> comment as \"when in tactic mode\", which should work just fine in lean 4</p>",
        "id": 282180408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652394843
    },
    {
        "content": "<p>It's just <code>by</code>, iirc. I think a beginc/byc may be nice though.</p>",
        "id": 282180591,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652395001
    },
    {
        "content": "<p>I think if we can fix the bad behavior of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.classical\">docs#tactic.classical</a> tactic this mostly becomes moot</p>",
        "id": 282180762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652395107
    },
    {
        "content": "<p>I mean, golfing is always nice :)</p>",
        "id": 282180971,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652395227
    },
    {
        "content": "<p>more mathematician-mode is always good</p>",
        "id": 282180983,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652395238
    },
    {
        "content": "<p>re: lean4, why isn't <code>by classical; ...</code> sufficient?</p>",
        "id": 282184253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652397602
    },
    {
        "content": "<p>How can a proof be poisoned?</p>",
        "id": 282188203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652400997
    },
    {
        "content": "<p>It can if you're constructing an object internal to the proof.</p>",
        "id": 282188223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652401033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/decidable.20instances.20in.20indicator.20lemmas/near/282176313\">said</a>:</p>\n<blockquote>\n<p>Regarding \"the priority is too strong\"; can <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.set_basic_attribute\">docs#tactic.set_basic_attribute</a> be used to locally enable an instance?</p>\n</blockquote>\n<p>Let's see if this works: <a href=\"https://github.com/leanprover-community/mathlib/pull/14122\">#14122</a></p>",
        "id": 282241838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652446536
    },
    {
        "content": "<p>CI seems to pass locally, and this tidies up a handful of weird <code>congr</code>s in proofs</p>",
        "id": 282400471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652607793
    },
    {
        "content": "<p>Interestingly a bunch of uses of <code>classical</code> really just meant <code>resetI</code></p>",
        "id": 282401240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652608993
    }
]