[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/tree/bicategory-simp-normal-form\">branch#bicategory-simp-normal-form</a>, I found that the rewriting involving associators and unitors can be much easier by rechoosing the simp lemmas. The <a href=\"https://github.com/leanprover-community/mathlib/blob/6de3506c2c7993182559f686ca0aaedc8d80b3e2/src/category_theory/bicategory/basic.lean#L270\">new simp policy</a> works well in general bicategories, and is especially useful in the rewriting in strict bicategories. For example, we can give the following \"associator-free\" proof for the composition of oplax natural transormations, which was originally proved by the <a href=\"https://github.com/leanprover-community/mathlib/blob/2c6df07f0a1e72818a3a690f1307a399ba236786/src/category_theory/bicategory/natural_transformation.lean#L132\">cumbersome rewriting</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.bicategory.strict</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.bicategory.natural_transformation</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">bicategory</span> <span class=\"kn\">open</span> <span class=\"n\">bicategory</span>\n<span class=\"kd\">universes</span> <span class=\"n\">w‚ÇÅ</span> <span class=\"n\">w‚ÇÇ</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bicategory.</span><span class=\"o\">{</span><span class=\"n\">w‚ÇÅ</span> <span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bicategory.</span><span class=\"o\">{</span><span class=\"n\">w‚ÇÇ</span> <span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">strict</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">oplax_functor</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">oplax_nat_trans</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">strict</span>\n\n<span class=\"c1\">-- We need strict version of simp lemmas if associators or unitors appear in the LHS.</span>\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">whisker_right_naturality_comp</span> <span class=\"o\">(</span><span class=\"n\">Œ∑</span> <span class=\"o\">:</span> <span class=\"n\">oplax_nat_trans</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G.obj</span> <span class=\"n\">c</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Œ∑.naturality</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ∑.app</span> <span class=\"n\">a</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">G.map_comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">h</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F.map_comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">Œ∑.app</span> <span class=\"n\">c</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span>\n      <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∑.naturality</span> <span class=\"n\">g</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span>\n        <span class=\"n\">Œ∑.naturality</span> <span class=\"n\">f</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">G.map</span> <span class=\"n\">g</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">whisker_right_naturality_comp</span> <span class=\"n\">Œ∑</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">whisker_right_naturality_id</span> <span class=\"o\">(</span><span class=\"n\">Œ∑</span> <span class=\"o\">:</span> <span class=\"n\">oplax_nat_trans</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G.obj</span> <span class=\"n\">a</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Œ∑.naturality</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ∑.app</span> <span class=\"n\">a</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">G.map_id</span> <span class=\"n\">a</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F.map_id</span> <span class=\"n\">a</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">Œ∑.app</span> <span class=\"n\">a</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">whisker_right_naturality_id</span> <span class=\"n\">Œ∑</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- Vertical composition of oplax natural transformations. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">vcomp</span> <span class=\"o\">(</span><span class=\"n\">Œ∑</span> <span class=\"o\">:</span> <span class=\"n\">oplax_nat_trans</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ∏</span> <span class=\"o\">:</span> <span class=\"n\">oplax_nat_trans</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">oplax_nat_trans</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Œ∑.app</span> <span class=\"n\">a</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ∏.app</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ∑.naturality</span> <span class=\"n\">f</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">Œ∏.app</span> <span class=\"n\">b</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span>\n      <span class=\"n\">Œ∑.app</span> <span class=\"n\">a</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∏.naturality</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality_naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span>\n    <span class=\"n\">F.map_comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">_</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span>\n      <span class=\"n\">_</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∑.naturality</span> <span class=\"n\">g</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span>\n        <span class=\"n\">_</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∏.naturality</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span>\n          <span class=\"n\">Œ∑.naturality</span> <span class=\"n\">f</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span>\n            <span class=\"n\">_</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∏.naturality</span> <span class=\"n\">f</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">_</span>  <span class=\"o\">:</span> <span class=\"n\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span>  <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n      <span class=\"c1\">-- fill underlines in `eq_to_hom _'</span>\n      <span class=\"n\">solve1</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category.assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"c1\">-- apply exchange law of whiskering</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">whisker_exchange_assoc</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"c1\">-- simplify</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">strict</span>\n<span class=\"kd\">end</span> <span class=\"n\">oplax_nat_trans</span>\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 276774579,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1648368726
    },
    {
        "content": "<p>The proof for a non-strict bicategory based on the new simp policy is as follows: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.bicategory.natural_transformation</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">bicategory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">bicategory</span>\n<span class=\"kd\">universes</span> <span class=\"n\">w‚ÇÅ</span> <span class=\"n\">w‚ÇÇ</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bicategory.</span><span class=\"o\">{</span><span class=\"n\">w‚ÇÅ</span> <span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bicategory.</span><span class=\"o\">{</span><span class=\"n\">w‚ÇÇ</span> <span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">oplax_functor</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">oplax_nat_trans</span>\n\n<span class=\"sd\">/-- Vertical composition of oplax natural transformations. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">vcomp'</span> <span class=\"o\">(</span><span class=\"n\">Œ∑</span> <span class=\"o\">:</span> <span class=\"n\">oplax_nat_trans</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ∏</span> <span class=\"o\">:</span> <span class=\"n\">oplax_nat_trans</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">oplax_nat_trans</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Œ∑.app</span> <span class=\"n\">a</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ∏.app</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ∑.naturality</span> <span class=\"n\">f</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">Œ∏.app</span> <span class=\"n\">b</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span>\n      <span class=\"n\">Œ∑.app</span> <span class=\"n\">a</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∏.naturality</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality_naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">=</span>  <span class=\"n\">_</span> <span class=\"bp\">‚â´</span>\n    <span class=\"n\">F.map_comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">Œ∑.app</span> <span class=\"n\">c</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">Œ∏.app</span> <span class=\"n\">c</span> <span class=\"bp\">‚â´</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span>\n      <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∑.naturality</span> <span class=\"n\">g</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">Œ∏.app</span> <span class=\"n\">c</span> <span class=\"bp\">‚â´</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span>\n        <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ∑.app</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∏.naturality</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span>\n          <span class=\"n\">Œ∑.naturality</span> <span class=\"n\">f</span> <span class=\"bp\">‚ñ∑</span> <span class=\"o\">(</span><span class=\"n\">Œ∏.app</span> <span class=\"n\">b</span> <span class=\"bp\">‚â´</span> <span class=\"n\">H.map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span>\n            <span class=\"n\">Œ∑.app</span> <span class=\"n\">a</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∏.naturality</span> <span class=\"n\">f</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">H.map</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">_</span>  <span class=\"o\">:</span> <span class=\"n\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span>  <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">_</span> <span class=\"bp\">‚óÅ</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">_</span> <span class=\"bp\">‚óÅ</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">_</span> <span class=\"bp\">‚óÅ</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">Œ±_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">whisker_exchange_assoc</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">oplax_nat_trans</span>\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 276774600,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1648368759
    },
    {
        "content": "<p>The new policy is also useful in monoidal categories, although more refactors are needed.</p>",
        "id": 276774626,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1648368798
    },
    {
        "content": "<p>I have two ideas for giving an associator-free proof in general bicategories.</p>\n<ol>\n<li>Prove that equalities in bicategories can be reduced to those in strict bicategories, and write an associator-free proof in a strict bicategory.</li>\n<li>Develop a tactic that automatically fills lines such as <code>exact (Œ± _ _ _ _) .hom ‚ñ∑ _ ‚â´ (Œ± _ _ _ _) .hom</code> in the previous example. The coherence theorem guarantees that the proof works regardless of how it is filled.</li>\n</ol>\n<p>Which do you think works better?</p>",
        "id": 276774690,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1648368863
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, we talked about this a bit for monoidal categories and I think the same ideas apply directly</p>",
        "id": 276805207,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1648411656
    }
]