[
    {
        "content": "<p>What is the simplest exact proof term that proves ~0=1 (not zero equals one)?</p>",
        "id": 133955902,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1536935074
    },
    {
        "content": "<p>I.e., without tactics complete this: theorem zneqo: not 0 = 1 := _</p>",
        "id": 133956061,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1536935200
    },
    {
        "content": "<p><code>zero_ne_one</code></p>",
        "id": 133956252,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536935388
    },
    {
        "content": "<p>Oh, wait, there's a better one, although it may not count depending on what you call an \"exact proof term.\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zneqo</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">zneqo</span>\n</pre></div>",
        "id": 133956802,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536935803
    },
    {
        "content": "<p>dec_trivial</p>",
        "id": 133956828,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536935826
    },
    {
        "content": "<p><code>dec_trivial</code> is notation for a tactic though.</p>",
        "id": 133957509,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536936474
    },
    {
        "content": "<p>dec_trivial isn't a tactic</p>",
        "id": 133957581,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536936512
    },
    {
        "content": "<p>It's notation for <code>of_as_true (by tactic.triv)</code></p>",
        "id": 133957629,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536936559
    },
    {
        "content": "<p>heh...</p>",
        "id": 133958450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536937264
    },
    {
        "content": "<p>Right. I'm really looking for the proof term that I'd write to fill in the _. It'd presumably say something about injectivity of constructors.</p>",
        "id": 133958695,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1536937446
    },
    {
        "content": "<p>That's what the <code>.</code> proof is doing under the hood. Look at the proof term it generates.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zneqo</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">zneqo</span>\n</pre></div>",
        "id": 133958745,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536937506
    },
    {
        "content": "<blockquote>\n<p>Oh, wait, there's a better one, although it may not count depending on what you call an \"exact proof term.\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zneqo</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">zneqo</span>\n</pre></div>\n\n\n</blockquote>\n<p>Right, I'm really looking for the proof term that I'd use to fill in the _. Presumably something about injectivity of constructors. Also, where is it documented that and how Lean accepts your version?</p>",
        "id": 133958775,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1536937535
    },
    {
        "content": "<p>This is the <code>no_confusion</code> stuff right?</p>",
        "id": 133958894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536937618
    },
    {
        "content": "<p>The strategy is: you can define a function <code>t : nat \\to Prop</code> which sends <code>nat.zero</code> to <code>false</code> and <code>nat.succ _</code> to <code>true</code> (using <code>nat.cases</code>). Then if you had an equality <code>nat.zero = nat.succ x</code>, you could use it to transport <code>trivial : true</code> to a proof of <code>false</code></p>",
        "id": 133959044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536937708
    },
    {
        "content": "<p>It's an empty pattern match. I guess it's documented somewhere in TPiL, but I couldn't tell you where. The only proof that <code>0 = 1</code> is by <code>rfl</code>, but this is structurally impossible, and the equation compiler fills in the <code>no_confusion</code> proof automatically.</p>",
        "id": 133959061,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536937724
    },
    {
        "content": "<p>I think if you look for <code>no_confusion</code> in TPiL you might be able to find it</p>",
        "id": 133959100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536937754
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">prelude</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">strange_prop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">strange_prop</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133959429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536937980
    },
    {
        "content": "<p>also see <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">this</a> blogpost by kevin</p>",
        "id": 133959494,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536938028
    },
    {
        "content": "<p>(I followed Reid Barton's idea)</p>",
        "id": 133959561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536938050
    },
    {
        "content": "<blockquote>\n<p>That's what the <code>.</code> proof is doing under the hood. Look at the proof term it generates.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zneqo</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">zneqo</span>\n</pre></div>\n\n\n</blockquote>\n<p>Sorry, here's a better response.</p>\n<p>First, the proof term is: λ (a : 0 = 1), eq.dcases_on a (λ (a_1 : 1 = 0), nat.no_confusion a_1) (eq.refl 1) (heq.refl a)</p>\n<p>However, when I copy and paste it in place of the underscore, after the :=, I get the following error. Still not sure exactly what I need to type after the := as an exact proof term.</p>\n<p>[Lean]<br>\n\"eliminator\" elaborator type mismatch, term<br>\n  λ (a_1 : 1 = 0), nat.no_confusion a_1<br>\nhas type<br>\n  1 = 0 → nat.no_confusion_type (_ == _ → false) 1 0<br>\nbut is expected to have type<br>\n  0 = 0 → _ == _ → false<br>\nAdditional information:<br>\n/Users/sullivan/teaching/2102f18/cs-dm.sullivan/06_Negation/00_intro.lean:60:40: context: the inferred motive for the eliminator-like application is<br>\n  λ (_x : ℕ) (_x_1 : 0 = _x), _x = _x → _x_1 == _x_1 → false<br>\neq.dcases_on : ∀ {α : Type} {a : α} {C : Π (a_1 : α), a = a_1 → Prop} {a_1 : α} (n : a = a_1), C a _ → C a_1 n</p>",
        "id": 133993284,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1536980618
    },
    {
        "content": "<p><code>example : 0 ≠ 1 := λ h, nat.no_confusion h</code></p>",
        "id": 133998674,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1536991399
    },
    {
        "content": "<blockquote>\n<p><code>example : 0 ≠ 1 := λ h, nat.no_confusion h</code></p>\n</blockquote>\n<p>Thank you. That got me where I needed to go.</p>",
        "id": 134026746,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1537046722
    }
]