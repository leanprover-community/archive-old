[
    {
        "content": "<p>I've found a nice new trick to write obfuscated^W concise code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">chart_chart_inv</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">chart</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">y_in</span><span class=\"o\">,</span> <span class=\"n\">φ_y</span><span class=\"bp\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inv_fun_on_eq</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">y_in</span><span class=\"o\">,</span> <span class=\"n\">φ_y</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 129102181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530734631
    },
    {
        "content": "<p>Why not writing <code>assume H, inv_fun_on_eq H</code>? Well, the sequences of pointy brackets in the pattern matching and body don't represent the same (anonymized) constructor.</p>",
        "id": 129102241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530734708
    },
    {
        "content": "<p>Would it make you happy if Lean gave you a warning about using the anonymous constructors in disjoint expressions to build expressions of different types?</p>",
        "id": 129102445,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530734933
    },
    {
        "content": "<p>I don't know.</p>",
        "id": 129102464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530734960
    },
    {
        "content": "<p>I'm not complaining about anything.</p>",
        "id": 129102472,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530734982
    },
    {
        "content": "<p>I do think that if I read this code later than a few days away from now, I'll be thinking WTF?</p>",
        "id": 129102520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530735011
    },
    {
        "content": "<p>Sorry, I'm highjacking your conversation. I've been saying for a while that we need a linter tool to find dubious code</p>",
        "id": 129102522,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530735024
    },
    {
        "content": "<p>And I'm wondering how to define \"dubious code\"</p>",
        "id": 129102528,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530735047
    },
    {
        "content": "<p>Maybe the type of the two <code>⟨y, ⟨y_in, φ_y⟩⟩</code>s is different.</p>",
        "id": 129102619,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530735153
    },
    {
        "content": "<p>Yes, that's what Patrick was pointing out</p>",
        "id": 129102865,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530735538
    },
    {
        "content": "<p>Here is a minimized example for the curious readers:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">a</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- rw mem_image, exact h,</span>\n  <span class=\"c1\">-- rw mem_image_eq, exact h,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The two commented out lines are nice tries that don't work.</p>",
        "id": 129103273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530736084
    },
    {
        "content": "<p>And it's in tactic mode so you can see everything</p>",
        "id": 129103278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530736097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is there a variation on <code>mem_image</code> that I'm missing here?</p>",
        "id": 129103357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530736203
    },
    {
        "content": "<p>I see nothing wrong with <code>chart_inv_inv</code></p>",
        "id": 129104411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530737707
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (α β : Type) (s : set α) (f : α → β) (b) (h : ∃a∈s, f a = b) : b ∈ f &#39;&#39; s  :=\nby simpa using h\n</pre></div>",
        "id": 129104523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530737915
    },
    {
        "content": "<p>How does this work? What is <code>simpa</code> magically doing here? I know <code>mem_image</code> is a simp lemma. And then?</p>",
        "id": 129104604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530738026
    },
    {
        "content": "<p><code>∃ (H : a ∈ s), f a = b ==&gt; a ∈ s ∧ f a = b</code> <code> exists_prop</code></p>",
        "id": 129104678,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530738140
    }
]