[
    {
        "content": "<p>The history of this question is the following: I had a complicated goal which could be reduced using a definitional unfolding which for some reason wasn't happening -- \"unfold\" wouldn't work</p>",
        "id": 127246965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593778
    },
    {
        "content": "<p>I wanted to do the unfold manually with a rw so I asked the name of the theorem that <code>{a := x, b := y}.a = x</code></p>",
        "id": 127246970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593814
    },
    {
        "content": "<p>and I was told that this theorem had no name</p>",
        "id": 127246972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593823
    },
    {
        "content": "<p>because it was true by refl</p>",
        "id": 127246978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593838
    },
    {
        "content": "<p>On the other hand, browsing through the library I see a bunch of things with names whose proof is rfl</p>",
        "id": 127246982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593854
    },
    {
        "content": "<p>All the other suggestions for what to do were not good for me.</p>",
        "id": 127247027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593883
    },
    {
        "content": "<p>\"Change it yourself with show\" -- yeah but this is a PITA because my structure is a very complicated structure with a very long name and it is being constructed using very long terms</p>",
        "id": 127247039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593908
    },
    {
        "content": "<p>and I know <em>precisely</em> how I want <em>this precise term</em> to unfold and I don't want to do anything else to the goal</p>",
        "id": 127247045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593928
    },
    {
        "content": "<p>If I change it myself with show then I have to work out what I want the goal to be using pencil and paper! It's 2018!</p>",
        "id": 127247059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593957
    },
    {
        "content": "<p>I _need_ to change it because rw is really fussy, it won't rw something defeq to what you want sometimes -- it sometimes needs help</p>",
        "id": 127247065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593988
    },
    {
        "content": "<p>and the line after my show line was a complicated rw</p>",
        "id": 127247067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593996
    },
    {
        "content": "<p>Here's what I want to do</p>",
        "id": 127247110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594006
    },
    {
        "content": "<p>I want to zoom in to the area I am interested in using conv</p>",
        "id": 127247115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594015
    },
    {
        "content": "<p>and I want to run dsimp or some such thing just on that one term</p>",
        "id": 127247120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594026
    },
    {
        "content": "<p>Is this possible?</p>",
        "id": 127247121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594034
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 127247122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594035
    },
    {
        "content": "<p>conv offers me exciting commands such as \"to_lhs\"</p>",
        "id": 127247125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594049
    },
    {
        "content": "<p>what about \"to 3rd input of this function\"?</p>",
        "id": 127247130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594060
    },
    {
        "content": "<p>Can conv do that?</p>",
        "id": 127247136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594063
    },
    {
        "content": "<p>Can I do dsimp in conv?</p>",
        "id": 127247142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594067
    },
    {
        "content": "<p>I use tactic mode precisely because I like the precise control I have over what is going on</p>",
        "id": 127247151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594089
    },
    {
        "content": "<p>but as I get older and wiser and understand more about what is happening, I want more precise tools</p>",
        "id": 127247154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594100
    },
    {
        "content": "<p>I can do dsimp in conv mode :-)</p>",
        "id": 127247202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594146
    },
    {
        "content": "<p>so my question becomes how to access the 3rd input to a function</p>",
        "id": 127247203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594161
    },
    {
        "content": "<p>goal is <code>f x y = g z</code></p>",
        "id": 127247207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594177
    },
    {
        "content": "<p>and I want to run dsimp on y only</p>",
        "id": 127247212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594184
    },
    {
        "content": "<p>how do I do that?</p>",
        "id": 127247213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594187
    },
    {
        "content": "<p>Ok I just thought of a solution which again will work in many cases</p>",
        "id": 127247218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594208
    },
    {
        "content": "<p>just define exactly the rewrite I want, call it H, and rw H</p>",
        "id": 127247222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594222
    },
    {
        "content": "<p>This gets me back to the original problem though</p>",
        "id": 127247224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594231
    },
    {
        "content": "<p>I do not want to run dsimp in my head</p>",
        "id": 127247226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594235
    },
    {
        "content": "<p>I am too lazy</p>",
        "id": 127247229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594237
    },
    {
        "content": "<p>I am a big boy now</p>",
        "id": 127247271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594259
    },
    {
        "content": "<p>what's wrong with <code>dsimp</code>?</p>",
        "id": 127247273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527594261
    },
    {
        "content": "<p>simplifies too much</p>",
        "id": 127247277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594268
    },
    {
        "content": "<p>that's the wrong question</p>",
        "id": 127247279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594277
    },
    {
        "content": "<p>no, that's the standard solution</p>",
        "id": 127247281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527594287
    },
    {
        "content": "<p>unless you are genuinely convinced that I really never want to run dsimp on just a subterm</p>",
        "id": 127247284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594295
    },
    {
        "content": "<p>Let me go back to my usage case</p>",
        "id": 127247288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527594305
    },
    {
        "content": "<p>you can use <code>dsimp only</code> or other such tricks to limit the unnecessary simping</p>",
        "id": 127247296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527594337
    },
    {
        "content": "<p><code>unfold structure.a</code> sometimes works for me in these situations.</p>",
        "id": 127257747,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527608146
    },
    {
        "content": "<p>In my usage case, dsimp doesn't do anything at all</p>",
        "id": 127266078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618586
    },
    {
        "content": "<p>the goal is (function x y z).F H -&gt; Z`</p>",
        "id": 127266492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619045
    },
    {
        "content": "<p>and <code>function x y z</code> creates a structure</p>",
        "id": 127266501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619056
    },
    {
        "content": "<p>by saying what all the bits and pieces are</p>",
        "id": 127266505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619061
    },
    {
        "content": "<p>including F</p>",
        "id": 127266508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619063
    },
    {
        "content": "<p>dsimp does nothing</p>",
        "id": 127266511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619074
    },
    {
        "content": "<p>I can't get conv to get to it</p>",
        "id": 127266515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619080
    },
    {
        "content": "<p>is it because it's a pi type?</p>",
        "id": 127266577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619091
    },
    {
        "content": "<p>In the end I copied the context, scrolled to the end of the proof, pasted it, changed <code>X : y,</code> to <code>(X : y)</code> about ten times and made them all variables, and then used <code>#reduce</code> and then cut and pasted the answer back in the proof and wrote \"show\" in front of it, and then farted around with some pp.proof on to get it to work and I was done</p>",
        "id": 127266622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619188
    },
    {
        "content": "<p>That can't be the best way</p>",
        "id": 127266624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619194
    },
    {
        "content": "<p>that's not even true</p>",
        "id": 127266676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619220
    },
    {
        "content": "<p>#reduce didn't do it</p>",
        "id": 127266680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619224
    },
    {
        "content": "<p>no wait</p>",
        "id": 127266684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619230
    },
    {
        "content": "<p>it half did it</p>",
        "id": 127266686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619232
    },
    {
        "content": "<p>it did enough of it</p>",
        "id": 127266689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619235
    },
    {
        "content": "<p>it unfolded (function x y z).F into (some function of x y and z)</p>",
        "id": 127266699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619249
    },
    {
        "content": "<p>Why did this cause me such pain? What did I miss?</p>",
        "id": 127266711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619269
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"n\">scheme</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">proofs</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">presheaves_iso</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf_of_types</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">are_isomorphic_presheaves_of_types</span>\n    <span class=\"o\">(</span><span class=\"n\">presheaf_of_types_pullback_under_open_immersion</span> <span class=\"n\">F</span> <span class=\"n\">id</span>\n      <span class=\"o\">(</span><span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">open_immersion_id</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n    <span class=\"n\">F</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">constructor</span><span class=\"o\">,</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">HU</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">Hid</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">open_immersion_id</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- goal now</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">presheaf_of_types_pullback_under_open_immersion</span> <span class=\"n\">F</span> <span class=\"n\">id</span> <span class=\"n\">Hid</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">HU</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">HU</span><span class=\"o\">,</span>\n      <span class=\"c1\">--unfold presheaf_of_types_pullback_under_open_immersion, -- fails</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">Hid</span><span class=\"bp\">.</span><span class=\"n\">fopens</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">HU</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">HU</span><span class=\"o\">,</span> <span class=\"c1\">-- obtained by &quot;#reduce&quot; calculation below</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">HU</span><span class=\"o\">),</span> <span class=\"c1\">-- obtained by more out-of-proof unravelling</span>\n\n      <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span><span class=\"n\">sorry</span><span class=\"o\">,</span>\n\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">variables</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf_of_types</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">HU</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"n\">H</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hid</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">open_immersion</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">presheaf_of_types_pullback_under_open_immersion</span> <span class=\"n\">F</span> <span class=\"n\">id</span> <span class=\"n\">Hid</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">F</span>\n<span class=\"c1\">-- λ (U : X → Prop) (HU : topological_space.is_open H U), F.F ((Hid.fopens U).mp HU)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">Hid</span><span class=\"bp\">.</span><span class=\"n\">fopens</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"c1\">-- is_open U → is_open (id &#39;&#39; U)</span>\n\n\n<span class=\"bp\">#</span><span class=\"kn\">exit</span>\n</pre></div>",
        "id": 127267136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619805
    },
    {
        "content": "<p>What my code looks like</p>",
        "id": 127267142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527619811
    },
    {
        "content": "<p>It doesn't run for people who don't have my repo because it needs scheme.lean but I hope it explicitly shows the problem. I don't know how to get Lean to unfold <code>(presheaf_of_types_pullback_under_open_immersion F id Hid).F</code>, possibily because it's in a lambda, but it is defeq to something much simpler which I work out outside the proof after some copying of context (IRL the context was huge and I just did the unravelling using cut and paste)</p>",
        "id": 127267540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527620287
    },
    {
        "content": "<p>You should have a simp lemma for the value of <code>.F</code></p>",
        "id": 127267590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527620381
    },
    {
        "content": "<p>alternatively, you can <code>dsimp [function]</code> to unfold it</p>",
        "id": 127267671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527620439
    },
    {
        "content": "<blockquote>\n<p>You should have a simp lemma for the value of <code>.F</code></p>\n</blockquote>\n<p>Talking through pnat was very instructional. I realise that I have a very poor feeling about what should be a simp lemma. I made that structure though -- these lemmas aren't automatically added when I make the structure? What is added to the simp machine?</p>",
        "id": 127278172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527633457
    },
    {
        "content": "<blockquote>\n<p>alternatively, you can <code>dsimp [function]</code> to unfold it</p>\n</blockquote>\n<p>This is what I needed to know :-) Thanks!</p>",
        "id": 127278180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527633478
    },
    {
        "content": "<p>Even though my function isn't a simp lemma :-)</p>",
        "id": 127278221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527633492
    },
    {
        "content": "<p><code>simp</code>  will reduce terms that look like <code>&lt;a, b, c&gt;.2</code></p>",
        "id": 127278222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527633504
    },
    {
        "content": "<p>where <code>&lt;&gt;</code> is the builtin structure constructor and <code>.2</code> is a builtin projection</p>",
        "id": 127278229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527633531
    },
    {
        "content": "<p>If there are any definitions shielding the redex from looking like that, simp won't find it</p>",
        "id": 127278241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527633550
    },
    {
        "content": "<p>like <code>(f x y z).F</code></p>",
        "id": 127278246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527633565
    },
    {
        "content": "<p>right</p>",
        "id": 127278247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527633569
    }
]