[
    {
        "content": "<p>What is the idiomatic way to complete</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fintype_sum_id_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"err\">$</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200247802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591717119
    },
    {
        "content": "<p>I mean each component can't exceed <code>n</code></p>",
        "id": 200248675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591717461
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_of_le</span> <span class=\"err\">$</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- motive incorrect</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">aux_injective</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">σ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">d₁</span> <span class=\"n\">d₂</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">convert</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">veq_of_eq</span> <span class=\"n\">this</span> <span class=\"c1\">-- elaboration issues</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">fintype_sum_id_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_injective</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">σ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aux_injective</span> <span class=\"n\">σ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 200251447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591718484
    },
    {
        "content": "<p>Lean doesn't like me</p>",
        "id": 200251460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591718489
    },
    {
        "content": "<p>Lean also doesn't like me.</p>",
        "id": 200257505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591720834
    },
    {
        "content": "<p>I think we are missing some \"machinery/API\" here. This fact is \"obvious\". But not to lean.</p>",
        "id": 200257589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591720865
    },
    {
        "content": "<p>There is <code>finsupp.lt_wf</code>, but I don't think it is of any use here.</p>",
        "id": 200260366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591722186
    },
    {
        "content": "<p>With <a href=\"https://github.com/leanprover-community/mathlib/issues/3029\">#3029</a> it should be easy.</p>",
        "id": 200546327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591883360
    }
]