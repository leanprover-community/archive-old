[
    {
        "content": "<p>This seems like a silly question but I've scoured mathlib and init for this lemma and I can't find it: <code>∀ {n m : ℕ} (h : n ≤ m) {k}, n/k ≤ m/k</code><br>\nI don't think it can be derived from <code>div_le_of_le_mul</code> since <code>k*(n/k) = n</code> does not necessarily hold (only if <code>k | n</code>)<br>\na version for multiplication would be nice too<br>\ndoes this exist? is there a nice way to prove it?</p>",
        "id": 124631308,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1522860044
    },
    {
        "content": "<p>I think <code>le_div_iff_mul_le</code>with <code>div_mul_le_self</code> should allow you to prove that</p>",
        "id": 124631526,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522860387
    },
    {
        "content": "<p>It doesn't. Applying <code>le_div_of_mul_le</code> gives you something false to prove, if say <code>n=4</code>, <code>m=5</code>, <code>k=3</code></p>",
        "id": 124632258,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522861623
    },
    {
        "content": "<p>Don't use <code>le_div_of_mul_le</code>; use <code>le_div_iff_mul_le</code> instead</p>",
        "id": 124632310,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522861683
    },
    {
        "content": "<p>Sorry, I was talking about a  <code>div_le</code> not <code>le_div</code></p>",
        "id": 124632336,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522861776
    },
    {
        "content": "<p>Thanks for the tip! <span class=\"emoji emoji-1f647\" title=\"bow\">:bow:</span> I think I got it working now:</p>\n<div class=\"codehilite\"><pre><span></span>lemma nat.le_mul {n m : ℕ} (h : n ≤ m) {k} : n*k ≤ m*k\n:= begin\n  cases k with k, rw [nat.mul_zero, nat.mul_zero],\n  apply (nat.le_div_iff_mul_le n (m*nat.succ k) (nat.zero_lt_succ k)).1,\n  rw [nat.mul_div_left],\n  exact h,\n  apply nat.zero_lt_succ,\nend\n\nlemma nat.le_div {n m : ℕ} (h : n ≤ m) {k} : n/k ≤ m/k\n:= begin\n  cases k with k, rw [nat.div_zero, nat.div_zero],\n  apply (nat.le_div_iff_mul_le (n/nat.succ k) (m) (nat.zero_lt_succ k)).2,\n  transitivity,\n  apply nat.div_mul_le_self,\n  exact h,\nend\n</pre></div>",
        "id": 124632408,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1522861868
    },
    {
        "content": "<p>A a matter of style, you may prefer <code>cases lt_or_eq_of_le (zero_le k) with hk hk</code> instead of <code>cases k with k</code></p>",
        "id": 124632672,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522862310
    },
    {
        "content": "<p>peanut gallery question, but how long does that take to run</p>",
        "id": 124632693,
        "sender_full_name": "Matt Wilson",
        "timestamp": 1522862382
    },
    {
        "content": "<p>About 51ms on my system</p>",
        "id": 124632760,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522862471
    },
    {
        "content": "<p>Sorry, wrong proof. <span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> 's proof takes 6ms</p>",
        "id": 124632821,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522862579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span> Feel free to send a pull request of that theorem to mathlib. You should call it <code>nat.div_le_div</code>.</p>",
        "id": 124637611,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522869744
    },
    {
        "content": "<p><code> nat.mul_le_mul_right : ∀ {n m : ℕ} (k : ℕ), n ≤ m → n * k ≤ m * k </code> is already there</p>",
        "id": 124645163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522881572
    },
    {
        "content": "<p>but I haven't seen the div version before</p>",
        "id": 124645166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522881585
    },
    {
        "content": "<p>I'm also surprised to find this is missing. I will add it to mathlib, by the name <code>nat.div_le_div_right</code></p>",
        "id": 124650222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522891234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  How about this? <a href=\"https://github.com/MonoidMusician/mathlib/pull/1\" target=\"_blank\" title=\"https://github.com/MonoidMusician/mathlib/pull/1\">https://github.com/MonoidMusician/mathlib/pull/1</a> ;)</p>",
        "id": 124650281,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1522891433
    },
    {
        "content": "<p>I'm also going to rewrite the proof, since it's a one-liner. I think Simon gave a hint earlier about this, see if you can shorten your proof</p>",
        "id": 124650329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522891520
    },
    {
        "content": "<p>hmm okay, I don’t know enough to see how to shorten it like that and I’ve run out of time tonight, feel free to pick it up if you want <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 124650541,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1522891959
    },
    {
        "content": "<p>oh, actually I forgot about the zero case. Anyway here's my attempt at shortening it:</p>\n<div class=\"codehilite\"><pre><span></span>protected theorem div_le_div {n m : ℕ} (h : n ≤ m) {k : ℕ} : n / k ≤ m / k :=\n(nat.eq_zero_or_pos k).elim (λ k0, by simp [k0]) $ λ hk,\n(nat.le_div_iff_mul_le _ _ hk).2 $ le_trans (nat.div_mul_le_self _ _) h\n</pre></div>",
        "id": 124650589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522892091
    },
    {
        "content": "<p>(whoops didn’t realize that I PRed my own repo)</p>",
        "id": 124650592,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1522892104
    },
    {
        "content": "<p>looking at the differences, I guess I didn't do much besides compactify the same steps, more or less</p>",
        "id": 124650653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522892269
    }
]