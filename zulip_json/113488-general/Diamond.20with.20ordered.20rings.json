[
    {
        "content": "<p>I'm getting something that looks quite a lot like a diamond when trying to prove something on a type that is both a <code>conditionally_complete_linear_order</code> and a <code>linear_ordered_ring</code>.</p>\n<p>In particular, it looks as though I am getting these two instances of has_le:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"n\">α</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semilattice_inf.to_partial_order</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lattice.to_semilattice_inf</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_lattice.to_lattice</span> <span class=\"n\">α</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_linear_order.to_conditionally_complete_lattice</span> <span class=\"n\">α</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))))</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"n\">α</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_partial_order</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_ring.to_ordered_add_comm_group</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_ring.to_ordered_ring</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>And these are not, it seems, defeq. How can I avoid this problem: what is the right typeclass to use?</p>",
        "id": 296850897,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662134739
    },
    {
        "content": "<p>they both provide different <code>le</code>s; you'd need to make a super-class that encompasses both</p>",
        "id": 296851648,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662134964
    },
    {
        "content": "<p>Pfeh!</p>",
        "id": 296852819,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662135394
    },
    {
        "content": "<p>So we don't have any way to talk about completeness properties of orders alongside orders on rings? (For context: was wanting to try and prove something like infi (fun x =&gt; floor (f x)) = floor (infi f).</p>",
        "id": 296853132,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662135536
    },
    {
        "content": "<p>You could mimic how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_ordered_field/src\">src#conditionally_complete_linear_ordered_field</a> is done.</p>",
        "id": 296858014,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662137339
    },
    {
        "content": "<p>Aren't all conditionally complete linear ordered rings actually fields?</p>",
        "id": 296902310,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662156305
    },
    {
        "content": "<p>Set <code>a^-1 := infi (\\la b, 1 &lt;= a * b)</code> for positive <code>a</code>.</p>",
        "id": 296902446,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662156366
    },
    {
        "content": "<p>Isn't the integers a counterexample?</p>",
        "id": 296902483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662156383
    },
    {
        "content": "<p>Maybe some natural additional axiom is needed. A guess: add the condition that for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a &lt; b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> there exists some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>c</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a &lt; c &lt; b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></p>",
        "id": 296903256,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662156749
    },
    {
        "content": "<p>One might call that condition \"non-locally-discrete\" or something</p>",
        "id": 296903369,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662156820
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/densely_ordered\">docs#densely_ordered</a></p>",
        "id": 296903395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662156838
    },
    {
        "content": "<p>:)</p>",
        "id": 296903448,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662156850
    },
    {
        "content": "<p>you order theorists named everything</p>",
        "id": 296903460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662156864
    },
    {
        "content": "<p>Eheheh</p>",
        "id": 296903480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662156887
    },
    {
        "content": "<p>How about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\Z[\\sqrt{2}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> then?</p>",
        "id": 296903721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662157020
    },
    {
        "content": "<p>Is that really conditionally complete?</p>",
        "id": 296904014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662157163
    },
    {
        "content": "<p>Oh good point! I doubt it. So maybe you're right.</p>",
        "id": 296904117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662157204
    },
    {
        "content": "<p>I'm still a bit worried about stuff like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><mi>ϵ</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\R[\\epsilon]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mclose\">]</span></span></span></span> (a polynomial ring) with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span> infinitely small but positive.</p>",
        "id": 296904311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662157316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Diamond.20with.20ordered.20rings/near/296902446\">said</a>:</p>\n<blockquote>\n<p>Set <code>a^-1 := infi (\\la b, 1 &lt;= a * b)</code> for positive <code>a</code>.</p>\n</blockquote>\n<p>What if there is no such b?</p>",
        "id": 297225020,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662383697
    }
]