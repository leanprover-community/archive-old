[
    {
        "content": "<p>this exists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"o\">[</span><span class=\"n\">whnf</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"c1\">-- (1.add 0).succ</span>\n</code></pre></div>",
        "id": 242437989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623488180
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infix</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">infix</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">+</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">+</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"c1\">-- parse fail</span>\n</code></pre></div>",
        "id": 242704115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623746882
    },
    {
        "content": "<p>Oh boy, notations have a lot of easter eggs. This exists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">prev</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- `foo`:50 _:50 := #0</span>\n</code></pre></div>\n<p>I guess it's useful?</p>",
        "id": 242705363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623747713
    },
    {
        "content": "<p>Whaaat?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"k\">#eval</span> <span class=\"k\">if</span> <span class=\"mi\">42</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 242706085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623748137
    },
    {
        "content": "<p>Oh, a segfault. Haven't seen one of those in a while.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`</span> <span class=\"n\">binders</span><span class=\"o\">:</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">F</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(note: I have no idea what I'm doing here)</p>",
        "id": 242710576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623750631
    },
    {
        "content": "<p>well this is fun:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`Λ`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">scoped</span> <span class=\"bp\">`</span> <span class=\"o\">:</span><span class=\"bp\">Λ`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">scoped</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:</span><span class=\"bp\">Λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- Λ (x y : ℕ), x &lt; 2 :Λ (x y : ℕ), y &lt; 2 : Prop</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:</span><span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- Λ (x y x y : ℕ), x &lt; 2 :Λ (x y x y : ℕ), y &lt; 2 : Prop</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:</span><span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- Λ (x y x y x y x y : ℕ), x &lt; 2 :Λ (x y x y x y x y : ℕ), y &lt; 2 : Prop</span>\n</code></pre></div>",
        "id": 242819814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623806455
    },
    {
        "content": "<p>pretty sure this is a bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"kd\">def</span> <span class=\"n\">unit.bla</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo.bla.bla.bla.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">42</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 242823358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623810456
    },
    {
        "content": "<p>I can't make sense of any of this</p>",
        "id": 242829844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623818944
    },
    {
        "content": "<p>This is all white box testing BTW. I've been reading the parser code and every time I see something odd I try to make a test case. In this case, the problem is that lean has a fallback approach to disambiguating a namespaced name like <code>nat.add</code> from a projection on a constant like <code>list.nil.tail</code>, and every time the fallback is called it parses a level list, possibly discarding the one from the previous iteration. As a result, you can get this weird behavior where you can stick multiple level lists on a multi-fallback name expression, and they will be parsed but the level list itself is discarded</p>",
        "id": 242830223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623819402
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Apparently long form attributes accept multiple bracket lists...</p>",
        "id": 243110356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623983639
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>...or no bracket lists</p>",
        "id": 243110403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623983685
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>apparently <code>local attribute</code> can have modifiers, and can also be a modifier on another declaration. So you can use this to make otherwise impossible definitions like a <code>private protected def</code>, which amusingly can't be referred to because it has a crazy namespace and also can't be referenced except through that namespace</p>",
        "id": 243114493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623989389
    },
    {
        "content": "<p>\"i have discovered a truly marvelous proof of this, which, however, is a <code>private local attribute protected theorem</code>\"</p>",
        "id": 243123024,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1623999676
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"kd\">extends</span> <span class=\"kn\">private</span> <span class=\"n\">to_bar'</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"kn\">renaming</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't think all of these features are simultaneously useful, but <code>extends</code> has a few seldom used knobs:</p>\n<ul>\n<li>For a <code>class</code>, the parent coercion will be marked <code>@[instance]</code>, unless <code>private</code> is set</li>\n<li><code>to_bar' : bar</code> instead of just <code>bar</code> allows you to change the name of the parent coercion field. It seems to be ignored if <code>old_structure_cmd</code> is set</li>\n<li><code>renaming x -&gt; y</code> lets you rename fields that are being splatted into the structure when <code>old_structure_cmd</code> is set</li>\n</ul>",
        "id": 243192625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624039610
    },
    {
        "content": "<p>That <code>private</code> sounds like it might be useful for making the canonical parent projection be <code>coe</code> by hiding the real one completely</p>",
        "id": 243193756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624040338
    },
    {
        "content": "<p>Despite the name, it doesn't actually make anything <code>private</code> in the sense of a <code>private def</code>. It only removes the <code>@[instance]</code> attribute on the parent projection</p>",
        "id": 243194244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624040693
    },
    {
        "content": "<p>You might know that <code>structure</code> allows defining local notations as additional fields, which can be used in later fields. But did you know that <code>inductive</code> <em>also</em> supports local notations? Here is the syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">prov</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`⊢`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">prov</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">⊢</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">prov'</span><span class=\"o\">,</span> <span class=\"n\">defeq</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`⊢`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">prov'</span>\n\n<span class=\"k\">with</span> <span class=\"n\">prov'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">⊢</span> <span class=\"n\">b</span>\n\n<span class=\"k\">with</span> <span class=\"n\">defeq</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">defeq</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Unfortunately, it only supports one notation command, so make it count.</p>",
        "id": 243196476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624042202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mysteries.20of.20the.20lean.203.20parser/near/243196476\">said</a>:</p>\n<blockquote>\n<p>You might know that <code>structure</code> allows defining local notations as additional fields, which can be used in later fields. But did you know that <code>inductive</code> <em>also</em> supports local notations? Here is the syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">prov</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`⊢`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">prov</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">⊢</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">prov'</span><span class=\"o\">,</span> <span class=\"n\">defeq</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`⊢`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">prov'</span>\n\n<span class=\"k\">with</span> <span class=\"n\">prov'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">⊢</span> <span class=\"n\">b</span>\n\n<span class=\"k\">with</span> <span class=\"n\">defeq</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">defeq</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Unfortunately, it only supports one notation command, so make it count.</p>\n</blockquote>\n<p>I used this for my BSc thesis. Very handy when defining large inductives :)</p>",
        "id": 243196800,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1624042401
    },
    {
        "content": "<p>Inductive constructors accept doc strings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- This documents foo -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"sd\">/-- This documents foo.zero -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span>\n<span class=\"sd\">/-- This documents foo.one -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 243197048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624042583
    },
    {
        "content": "<p>We actually get doc blames in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/nolints.txt\">nolint.txt</a> for not providing those!</p>",
        "id": 243197647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624042976
    },
    {
        "content": "<p>Do structure fields accept them?</p>",
        "id": 243197900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624043157
    },
    {
        "content": "<p>nope</p>",
        "id": 243197983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624043202
    },
    {
        "content": "<p>I'm not sure if this counts as the same sort of lean 3 parser mystery, but I came across:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">foo.bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">X.bar</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">X.bar</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>which surprised me: it means we can't do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">X.bar</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>as well</p>",
        "id": 243263902,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624129002
    },
    {
        "content": "<p>oh, good catch, I didn't notice that when looking at the code</p>",
        "id": 243264066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624129240
    },
    {
        "content": "<p>looking at it now that still seems like it should work</p>",
        "id": 243264075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624129253
    },
    {
        "content": "<p>Oh, I see, it parses <code>X.bar</code> as a name, sees a <code>]</code> and decides this must be a variable binder update even though it hasn't resolved the variable yet</p>",
        "id": 243264176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624129394
    },
    {
        "content": "<p>The <code>variable</code> command has an exception for this because it came up in the past wrt <code>variable [io.interface]</code>, but the fix was not propagated to <code>variables</code> as well</p>",
        "id": 243264241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624129483
    },
    {
        "content": "<p><code>(::)</code> is a token, probably because of the <code>(: ... :)</code> pattern notation, even though it doesn't have any special meaning beyond the usual interpretation as a section of the <code>list.cons</code> function. However the implementation is a bit different, and so adding whitespace to break the token changes the result slightly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span> <span class=\"bp\">&lt;</span> <span class=\"o\">)</span>  <span class=\"c1\">-- has_lt.lt : ?M_1 → ?M_1 → Prop</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>    <span class=\"c1\">-- has_lt.lt : ?M_1 → ?M_1 → Prop</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span> <span class=\"o\">::</span> <span class=\"o\">)</span> <span class=\"c1\">-- list.cons : ?M_1 → list ?M_1 → list ?M_1</span>\n<span class=\"k\">#check</span> <span class=\"o\">(::)</span>   <span class=\"c1\">-- λ (_x : ?M_1) (_y : list ?M_1), _x :: _y : ?M_1 → list ?M_1 → list ?M_1</span>\n</code></pre></div>",
        "id": 243377776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624280344
    },
    {
        "content": "<p>However, because this override is specific to <code>::</code>, other notations beginning with <code>:</code> don't get the same treatment, and the <code>(:</code> can end up breaking them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">nat.lt</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"bp\">&gt;`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span> <span class=\"o\">:</span><span class=\"bp\">&gt;</span> <span class=\"o\">)</span> <span class=\"c1\">-- foo : ℕ → ℕ → Prop</span>\n<span class=\"k\">#check</span> <span class=\"o\">(:</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"c1\">-- invalid expression</span>\n</code></pre></div>",
        "id": 243378096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624280499
    },
    {
        "content": "<p>Apparently you can write set comprehensions using either <code>∈</code> or <code>in</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">}</span>\n<span class=\"c1\">-- {x ∈ ∅ | true} : set ℕ</span>\n</code></pre></div>",
        "id": 243400533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624289694
    },
    {
        "content": "<p>You might know that you can change tactic classes using <code>begin [class] tacs, ... end</code>. But this also works in the middle of a tactic proof, if you put the class after a <code>{ ... }</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"c1\">-- this is a tactic</span>\n  <span class=\"o\">{</span> <span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"o\">]</span>\n    <span class=\"n\">eblast</span> <span class=\"o\">},</span> <span class=\"c1\">-- this is a smt_tactic</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243412338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624295077
    },
    {
        "content": "<p>It turns out <code>#print</code> is a bit more featureful than you might be aware. Also <code>#help</code> exists</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"s2\">\"hello world\"</span> <span class=\"c1\">-- prints \"hello world\"; only works with string literals</span>\n<span class=\"k\">#print</span> <span class=\"n\">raw</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"kd\">by</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"c1\">-- prints pexprs without elaboration</span>\n<span class=\"k\">#print</span> <span class=\"n\">options</span> <span class=\"c1\">-- print lean command line options</span>\n<span class=\"k\">#print</span> <span class=\"n\">trust</span> <span class=\"c1\">-- print trust level (0 = most paranoid)</span>\n<span class=\"c1\">-- #print key_equivalences -- crash lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">nat.add</span> <span class=\"c1\">-- prints the definition of nat.add</span>\n<span class=\"k\">#print</span> <span class=\"kd\">definition</span> <span class=\"n\">nat.add</span> <span class=\"c1\">-- prints nat.add for people who like to spell out \"definition\"</span>\n<span class=\"k\">#print</span> <span class=\"n\">instances</span> <span class=\"n\">inhabited</span> <span class=\"c1\">-- prints all instances of inhabited typeclass</span>\n<span class=\"k\">#print</span> <span class=\"n\">classes</span> <span class=\"c1\">-- prints all typeclasses</span>\n<span class=\"k\">#print</span> <span class=\"n\">attributes</span> <span class=\"c1\">-- prints all attributes</span>\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">nat.add</span> <span class=\"c1\">-- prints all definitions starting with nat.add</span>\n<span class=\"k\">#print</span> <span class=\"n\">aliases</span> <span class=\"c1\">-- prints all aliases, created by \"export\" command</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"c1\">-- prints all axioms in the current environment (there are more than 3 things in this list)</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">classical.em</span> <span class=\"c1\">-- prints all axioms used by a given theorem</span>\n<span class=\"k\">#print</span> <span class=\"n\">fields</span> <span class=\"n\">group</span> <span class=\"c1\">-- prints all fields in a structure</span>\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"c1\">-- prints all notation</span>\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"o\">,</span> <span class=\"bp\">-&gt;</span> <span class=\"c1\">-- prints all notation using the tokens `,` or `-&gt;`</span>\n<span class=\"k\">#print</span> <span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"c1\">-- same as `#print nat` but only works for inductives</span>\n<span class=\"k\">#print</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"c1\">-- print all declarations marked `@[ext]`</span>\n<span class=\"k\">#print</span> <span class=\"o\">[</span><span class=\"n\">recursor</span><span class=\"o\">]</span> <span class=\"n\">nat.rec</span> <span class=\"c1\">-- print diagnostics for a recursor</span>\n<span class=\"k\">#print</span> <span class=\"o\">[</span><span class=\"n\">unify</span><span class=\"o\">]</span> <span class=\"c1\">-- print all unification hints</span>\n<span class=\"k\">#print</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">functor_norm</span> <span class=\"c1\">-- print all simp lemmas in the functor_norm simp set? it doesn't work</span>\n<span class=\"k\">#print</span> <span class=\"o\">[</span><span class=\"n\">congr</span><span class=\"o\">]</span> <span class=\"n\">functor_norm</span> <span class=\"c1\">-- congr lemmas are apparently also related to the simp sets; also doesn't work</span>\n<span class=\"k\">#print</span> <span class=\"bp\">&lt;</span> <span class=\"c1\">-- Same as `#print notation &lt;`</span>\n\n<span class=\"k\">#help</span> <span class=\"c1\">-- help help</span>\n<span class=\"k\">#help</span> <span class=\"n\">options</span> <span class=\"c1\">-- print `set_option` options and descriptions</span>\n<span class=\"k\">#help</span> <span class=\"n\">commands</span> <span class=\"c1\">-- print all commands</span>\n</code></pre></div>",
        "id": 243448251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624312415
    },
    {
        "content": "<p>I think that long ago, I knew about <code>#help</code>.</p>",
        "id": 243472116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624337392
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"sd\">/--'`x := 55 * x</span>\n\n<span class=\"sd\">example : (110:ℕ) = /--'2 := rfl</span>\n\n<span class=\"sd\">/--' testing -/</span>\n</code></pre></div>\n<p>so as it turns out you can override comment notation... the <code>example</code> complies, the block comment there doesn't work</p>",
        "id": 244982361,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625528926
    },
    {
        "content": "<p>even more amazlingly, you can do it with the close-comment block and seemingly get no issues:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`-/`</span> <span class=\"o\">:=</span> <span class=\"mi\">55</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">55</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-/</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> testing -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>the syntax highlighter even deals with it (!)</p>",
        "id": 244982552,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625529206
    },
    {
        "content": "<p>Apparently you can put negative attributes on a definition, although it's hard to come up with an example where this makes a difference.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- cannot remove attribute [simp]: no prior declaration on foo</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#print</span> <span class=\"n\">bar</span> <span class=\"c1\">-- @[_simp_cache, simp] def bar : ℕ := 1</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#print</span> <span class=\"n\">baz</span> <span class=\"c1\">-- @[_simp_cache] def baz : ℕ := 1</span>\n</code></pre></div>",
        "id": 245129773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625634467
    },
    {
        "content": "<p>So that last example adds <code>baz</code> to the simp cache but doesn't mark it as simp? Does this relate to the C++ implementation of simp?</p>",
        "id": 245194495,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625670117
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"c1\">-- fails because the first lambda looks 0-ary to lean</span>\n</code></pre></div>",
        "id": 245397458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625802368
    },
    {
        "content": "<p>Having observed that the lean grammar can contain commands inside string literals inside expressions inside commands, I had to play with that, and it turns out that things are a little weirder than you might expect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.emit_code</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">interactive.parse</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">lean.parser.pexpr</span><span class=\"o\">,</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.eval_expr</span> <span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">lean.parser.emit_code_here</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.triv</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">emit_code</span> <span class=\"s2\">\"</span>\n<span class=\"s2\">  #where -- we are in namespace foo</span>\n\n<span class=\"s2\">  -- example foo : true := trivial  -- fails</span>\n<span class=\"s2\">  example := by triv                -- this works though</span>\n<span class=\"s2\">  #check true                       -- true : _</span>\n<span class=\"s2\">  #check by exact true              -- true : Prop</span>\n\n<span class=\"s2\">  example := by emit_code </span><span class=\"se\">\\\"</span><span class=\"s2\"></span>\n<span class=\"s2\">    #print </span><span class=\"se\">\\\\\\\"</span><span class=\"s2\">inception</span><span class=\"se\">\\\\\\\"</span><span class=\"s2\"></span>\n<span class=\"s2\">    -- end foo -- uncomment this to get a segfault</span>\n<span class=\"s2\">  </span><span class=\"se\">\\\"</span><span class=\"s2\"></span>\n\n<span class=\"s2\">  end foo</span>\n<span class=\"s2\">\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span> <span class=\"c1\">-- fails, closed namespace foo already</span>\n</code></pre></div>",
        "id": 246666158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626826734
    },
    {
        "content": "<p>here's another fun variation, a command parsing quine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"example := by emit_code foo\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">emit_code</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 246670680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626831622
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">),</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>local notations where you least expect them</p>",
        "id": 247017294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627066340
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This one is probably a bit misleading...</p>",
        "id": 247017710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627066566
    },
    {
        "content": "<p>bound variable capture in binder collections:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">_x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 247656904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627603484
    },
    {
        "content": "<p>I'm more surprised that <code>x y &lt; 5</code> bounds <em>both</em> <code>x</code> and <code>y</code>.  Why do we learn about all these cool features only now?</p>",
        "id": 247679611,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1627631681
    },
    {
        "content": "<p>I thought this was already used in mathlib, especially with set membership (in fact I thought I saw code from you yourself Gabriel using this feature!)</p>",
        "id": 247708250,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1627652043
    },
    {
        "content": "<p>Notation captures field notation without resolving it to a symbol name until the notation is used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`+'`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a.foo</span> <span class=\"bp\">+</span> <span class=\"n\">b.foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X.foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">Y.foo</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">+'</span> <span class=\"n\">x</span>  <span class=\"c1\">-- int</span>\n<span class=\"k\">#check</span> <span class=\"n\">y</span> <span class=\"bp\">+'</span> <span class=\"n\">y</span>  <span class=\"c1\">-- nat</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+'</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"c1\">-- cannot evaluate function: 0 arguments given but expected 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+'</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"c1\">-- cannot evaluate function: 0 arguments given but expected 1</span>\n</code></pre></div>",
        "id": 248210781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627991654
    },
    {
        "content": "<p>(the <code>#eval</code> failure is reposted <a href=\"#narrow/stream/113488-general/topic/.23eval.20gets.20stuck.20on.20dot.20notation\">here</a>)</p>",
        "id": 248210804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627991667
    }
]