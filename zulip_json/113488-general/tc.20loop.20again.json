[
    {
        "content": "<p>I tried to define norms on indexed product, but it seems I have a type class loop again. It's dinner time here, but if someone wants to have a look at why <a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/norms.lean#L319\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/norms.lean#L319\">https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/norms.lean#L319</a> fails I'd be very grateful</p>",
        "id": 127213712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527526927
    },
    {
        "content": "<p>does <code>begin admit end</code> act any differently?</p>",
        "id": 127213727,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527527040
    },
    {
        "content": "<p>No. I can replace the infinite loop by weirder error messages using <code>refine</code> but that's all I can get</p>",
        "id": 127220182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527539261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you have a look at this issue if you have some time please? This only other it depends on is Johannes' <a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/metric_space_fintype_pi.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/metric_space_fintype_pi.lean\">https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/metric_space_fintype_pi.lean</a></p>",
        "id": 127271172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527624347
    },
    {
        "content": "<p>This would be so much easier to do if you could minimise</p>",
        "id": 127277524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527632481
    },
    {
        "content": "<p>cutting and pasting one file works</p>",
        "id": 127277533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527632510
    },
    {
        "content": "<p>even cutting and pasting the file you import would be better than this</p>",
        "id": 127277569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527632523
    },
    {
        "content": "<p>I don't want to dump Johannes' file into the project I have open</p>",
        "id": 127277583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527632532
    },
    {
        "content": "<p>if I put it in scratch then I don't know how to import it</p>",
        "id": 127277586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527632540
    },
    {
        "content": "<p>I mean -- even if it's a huge gist -- for <em>me</em> at least, one file is a whole lot easier than two</p>",
        "id": 127277604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527632582
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/e8c1b1ac3d50795b1bdf3094bc823de6\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/e8c1b1ac3d50795b1bdf3094bc823de6\">https://gist.github.com/kbuzzard/e8c1b1ac3d50795b1bdf3094bc823de6</a></p>",
        "id": 127279386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527635377
    },
    {
        "content": "<p>there's the error</p>",
        "id": 127279387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527635382
    },
    {
        "content": "<p>so you made all these instances in this file and they are all those terrifying things like normed space to normed group, and then product of normed spaces is a normed space and product of normed groups is a normed group. Are all these safe? Is this unrelated to your problem?</p>",
        "id": 127279694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527635888
    },
    {
        "content": "<p>Patrick I wrote the error to a file, and then deleted all the lines with failed is_def_eq underneath and now it looks like this:</p>",
        "id": 127279851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636171
    },
    {
        "content": "<p>The problem is in the very first few lines. </p>\n<div class=\"codehilite\"><pre><span></span>[class_instances] (0) ?x_2 : @module ?x_0 (Π (i : ι), E i) ?x_1 := @pi.module ?x_3 ?x_4 ?x_5 ?x_6 ?x_7\n[class_instances] (1) ?x_6 : ring ?x_5 := @prod.ring ?x_8 ?x_9 ?x_10 ?x_11\nfailed is_def_eq\n</pre></div>\n\n\n<p>After matching <code>pi.module</code> for the typeclass, it immediately attempts to resolve <code>?x_6</code>, which is the <code>[ring A]</code> argument</p>",
        "id": 127279854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636174
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances] (8) ?x_70 : @is_absolute_value ℝ real.discrete_linear_ordered_field α\n  (@normed_ring.to_ring α (@normed_field.to_normed_ring α _inst_1))\n[class_instances] (8) ?x_68 : ring ?x_67 := @cau_seq.ring ?x_74 ?x_75 ?x_76 ?x_77 ?x_78 ?x_79\n[class_instances] (9) ?x_75 : discrete_linear_ordered_field ?x_74 := real.discrete_linear_ordered_field\n[class_instances] (9) ?x_77 : ring ?x_76 := @normed_ring.to_ring ?x_84 ?x_85\n[class_instances] (10) ?x_85 : normed_ring ?x_84 := @normed_field.to_normed_ring ?x_86 ?x_87\n[class_instances] (11) ?x_87 : normed_field ?x_86 := _inst_1\n[class_instances] (9) ?x_79 : @is_absolute_value ℝ real.discrete_linear_ordered_field α\n</pre></div>",
        "id": 127279863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636205
    },
    {
        "content": "<p>that's the period</p>",
        "id": 127279864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636208
    },
    {
        "content": "<p>with the number going up each time</p>",
        "id": 127279867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636214
    },
    {
        "content": "<p>but since it hasn't figured out <code>?x_5</code> yet, it's on a wild goose chase to come up with a ring, any ring, and it gets caught up in a loop somewhere with some iterating ring construction</p>",
        "id": 127279909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636249
    },
    {
        "content": "<p>So the red flag for you is the attempt to prove <code>ring ?x_5</code></p>",
        "id": 127279918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636296
    },
    {
        "content": "<p>right</p>",
        "id": 127279923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636305
    },
    {
        "content": "<p>you can see that also in the period; the number is the stack depth, so you can see it's recursing each time on a <code>ring ?</code> goal</p>",
        "id": 127279936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances] (1) ?x_6 : ring ?x_5 := @prod.ring ?x_8 ?x_9 ?x_10 ?x_11\nfailed is_def_eq\n[class_instances] (1) ?x_6 : ring ?x_5 := @normed_ring.to_ring ?x_12 ?x_13\n[class_instances] (2) ?x_13 : normed_ring ?x_12 := @normed_field.to_normed_ring ?x_14 ?x_15\n[class_instances] (3) ?x_15 : normed_field ?x_14 := _inst_1\n</pre></div>",
        "id": 127279984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636417
    },
    {
        "content": "<p>It looks like it solves it there</p>",
        "id": 127279988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636427
    },
    {
        "content": "<p>it can prove it's a ring if it proves it's a normed ring</p>",
        "id": 127279992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636440
    },
    {
        "content": "<p>or a normed field</p>",
        "id": 127279993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636443
    },
    {
        "content": "<p>and something was a normed field at the time</p>",
        "id": 127279994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636450
    },
    {
        "content": "<p>it solves a subgoal, but it hasn't solved the main goal</p>",
        "id": 127279996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636456
    },
    {
        "content": "<p>has it solved ring ?x_5?</p>",
        "id": 127279997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636473
    },
    {
        "content": "<p>no, the last (1) line is line 27 which is a <code>ring ?x_5</code> goal</p>",
        "id": 127280041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636537
    },
    {
        "content": "<p>the line after I quoted</p>",
        "id": 127280053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636572
    },
    {
        "content": "<p><code>[class_instances] (1) ?x_6 : ring ?x_5 := @cau_seq.ring ?x_11 ?x_12 ?x_13 ?x_14 ?x_15 ?x_16</code><br>\n`</p>",
        "id": 127280104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636609
    },
    {
        "content": "<p>The role of <code>cau_seq.ring</code> here is that it produces a ring from a ring</p>",
        "id": 127280109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636616
    },
    {
        "content": "<p>I thought I'd seen the last of it</p>",
        "id": 127280110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636616
    },
    {
        "content": "<p>so it's building a ring of the form <code>(cau_seq (cau_seq (cau_seq ? ?) ?) ?)</code></p>",
        "id": 127280117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636642
    },
    {
        "content": "<p>the fault isn't <code>cau_seq</code> though, that was just the first recursing construction it fell upon</p>",
        "id": 127280136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636685
    },
    {
        "content": "<p><code>[class_instances] (9) ?x_77 : ring ?x_76 := @cau_seq.ring ?x_83 ?x_84 ?x_85 ?x_86 ?x_87 ?x_88</code></p>",
        "id": 127280137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636687
    },
    {
        "content": "<p>There's the last <code>(9)</code></p>",
        "id": 127280139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636693
    },
    {
        "content": "<p>The real problem is that it's solving <code>ring ?</code></p>",
        "id": 127280184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636732
    },
    {
        "content": "<p><code>cau_seq.ring :\n  Π {α : Type u_3} [_inst_1 : discrete_linear_ordered_field α] {β : Type u_4} [_inst_2 : ring β] {abv : β → α}\n  [_inst_3 : is_absolute_value abv], ring (cau_seq β abv)</code></p>",
        "id": 127280192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636755
    },
    {
        "content": "<p>\"you give me a ring, I'll give you another ring\"</p>",
        "id": 127280198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527636764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Why don't out_params work here? Adding <code>out_param</code> to <code>pi.module</code> does not change the order of inference for the arguments</p>",
        "id": 127280268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636894
    },
    {
        "content": "<p>maybe it has to do with the fact that the <code>module</code> argument is in a pi?</p>",
        "id": 127280339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527636981
    },
    {
        "content": "<p>It's funny that <code>instance product_normed_space : normed_space α (E × F) </code> works</p>",
        "id": 127280417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527637151
    },
    {
        "content": "<p>but then <code>instance fintype.normed_space {ι : Type*} {E : ι → Type*} [fintype ι] [∀i, normed_space α (E i)]</code> gives him trouble</p>",
        "id": 127280422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527637168
    },
    {
        "content": "<p>Here's a minimized version:</p>\n<div class=\"codehilite\"><pre><span></span>class ring&#39; (α : Type*).\n\nclass module&#39; (α : out_param $ Type*) (β : Type*) [out_param $ ring&#39; α].\n\nclass normed_field&#39; (α : Type*) extends ring&#39; α.\n\nclass normed_space&#39; (α : out_param $ Type*) (β : Type*) [out_param $ normed_field&#39; α] extends module&#39; α β.\n\ninstance pi.module&#39; {I : Type*} {f : I → Type*}\n {α : out_param Type*} [out_param $ ring&#39; α] [∀ i, module&#39; α $ f i] : module&#39; α (Π i : I, f i) :=\nsorry\n\ninstance loop (α) [ring&#39; α] : ring&#39; (option α) := sorry\n\nset_option trace.class_instances true\n\ninstance fintype.normed_space&#39; {α} [normed_field&#39; α]\n  {ι : Type*} {E : ι → Type*} [∀i, normed_space&#39; α (E i)] :\n  normed_space&#39; α (Πi, E i) :=\n⟨_, _⟩\n</pre></div>",
        "id": 127280915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527637978
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_2 : @module&#39; ?x_0 (Π (i : ι), E i) ?x_1 := @pi.module&#39; ?x_3 ?x_4 ?x_5 ?x_6 ?x_7\n[class_instances] (1) ?x_6 : out_param (ring&#39; ?x_5) := @loop ?x_8 ?x_9\n[class_instances] (2) ?x_9 : ring&#39; ?x_8 := @loop ?x_10 ?x_11\n[class_instances] (3) ?x_11 : ring&#39; ?x_10 := @loop ?x_12 ?x_13\n[class_instances] (4) ?x_13 : ring&#39; ?x_12 := @loop ?x_14 ?x_15\n...\n</pre></div>",
        "id": 127280979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527638044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I think we should just abandon the <code>out_param</code> in module and live with having to give the type explicitly in scalar multiplication. It's too brittle and there is very little I can do about these issues without modifying lean.</p>",
        "id": 127286141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527647938
    },
    {
        "content": "<p>Thank you very much Mario and Kevin. I understood what was happening, the question is how to solve this (and I also wanted to point out to Sebastian that out_param stuff maybe requires more thinking in Lean 4, I don't know).</p>",
        "id": 127293689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527663414
    },
    {
        "content": "<p>What confuses me is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">vector_space</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">vector_space</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>works fine</p>",
        "id": 127293699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527663443
    },
    {
        "content": "<p>But the type class mechanism doesn't search for this. Why?</p>",
        "id": 127293706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527663474
    },
    {
        "content": "<p>Is there any way I could help the type class search here?</p>",
        "id": 127293750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527663512
    },
    {
        "content": "<p><code>vector_space</code> is very closely related to <code>module</code>, the full definition is simply <code>class vector_space (α : out_param $ Type u) (β : Type v) [field α] extends module α β</code></p>",
        "id": 127293764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527663567
    },
    {
        "content": "<p>but I would still naively expect the search that is currently failing to start by looking for some <code>vector_space α (Πi, E i)</code> rather than <code>@module ?x_0 (Π (i : ι), E i) ?x_1</code></p>",
        "id": 127293839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527663706
    },
    {
        "content": "<p>Note that the working instance here is <code>pi.vector_space</code> whose definition is literally: <code>instance vector_space (α : Type*) [field α] [∀ i, vector_space α $ f i] : vector_space α (Π i : I, f i) :=\n{ ..pi.module }</code></p>",
        "id": 127293945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527663879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you want</p>\n<div class=\"codehilite\"><pre><span></span>instance pi.module&#39; {I : Type*} {f : I → Type*}\n {α : Type*} {r : ring&#39; α} [∀ i, module&#39; α (f i)] : module&#39; α (Π i : I, f i) :=\n</pre></div>\n\n\n<p>?</p>",
        "id": 127294838,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1527665584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> this still loops. One problem is that it looks for <code>@module' ?x_0 (Π (i : ι), E i) ?x_1</code> instead of<code>@module' α (Π (i : ι), E i) ?x_1</code> . Then the type class inference loops by making <code>loop</code> steps.</p>",
        "id": 127298089,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527671146
    },
    {
        "content": "<p>It doesn't loop in Mario's example</p>",
        "id": 127298146,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1527671248
    },
    {
        "content": "<p>Ah, sorry, I didn't see that you also changed <code>[ring' α]</code> to <code>{r : ring' α}</code>.</p>",
        "id": 127298202,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527671345
    },
    {
        "content": "<p>Yes, that's the important part :) . <code>instance</code> doesn't do anything special with <code>out_param</code>.</p>",
        "id": 127298212,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1527671382
    },
    {
        "content": "<p>The intended meaning behind making it implicit is \"don't try to infer an instance at this point, we don't even know α yet\".</p>",
        "id": 127298320,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1527671528
    },
    {
        "content": "<p>Thanks, this is a good explanation. It doesn't work now, but it seams to be a problem that the pi instance can not be applied.</p>",
        "id": 127298985,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527672679
    },
    {
        "content": "<p>So, do we have a solution?</p>",
        "id": 127349063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527750532
    }
]