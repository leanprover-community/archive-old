[
    {
        "content": "<p>I'm currently using <code>case</code> after a <code>cases</code> call. I get an error because it's trying to rename a hypothesis whose name is <code>[anonymous]</code>. Why would such a hypothesis make it into my rename list? Especially because none of my hypotheses is <code>[anonymous]</code></p>",
        "id": 203311839,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594236754
    },
    {
        "content": "<p>can you replicate?</p>",
        "id": 203311899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594236780
    },
    {
        "content": "<p>that's probably a bug in one or the other tactic, <code>[anonymous]</code> is not a valid variable name</p>",
        "id": 203311971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594236824
    },
    {
        "content": "<p>Ok, I'll try to disentangle it from my development</p>",
        "id": 203313565,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594237664
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span>\n  <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">relation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">relation</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">trans_gen</span> <span class=\"o\">(</span><span class=\"n\">curry</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">trans_gen</span><span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">{</span> <span class=\"n\">admit</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203319847,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594240726
    },
    {
        "content": "<p>This looks like a job for <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> , who wrote the new <code>case</code> tactic. I'm not sure exactly what is supposed to happen, but these calls look bad:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_tactic_format</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tag</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">has_to_tactic_format</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">trans_gen</span> <span class=\"o\">(</span><span class=\"n\">curry</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n    <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">get_tag</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- [_case.hyps, 0._fresh.2815.6053._arg, _arg, 0._fresh.2815.6055._arg, 0._fresh.2815.6093._arg, relation.trans_gen.tail]</span>\n    <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">case_tag</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- (some (hyps [relation.trans_gen.tail] [0._fresh.2815.6053, [anonymous], 0._fresh.2815.6055, 0._fresh.2815.6093]))</span>\n    <span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Note that the second argument in the case tag is just <code>_arg</code>, which after getting parsed into a <code>case_tag</code> becomes just <code>[anonymous]</code></p>",
        "id": 203322131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594241877
    },
    {
        "content": "<p>Ok, I just had a closer look at what you posted. Does this mean that <code>cases</code> is producing wrong tags?</p>",
        "id": 203332853,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594248316
    },
    {
        "content": "<p>Not sure, because I don't know what the intended behavior is</p>",
        "id": 203333974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594249086
    },
    {
        "content": "<p>oh, the tag setting is also in lean</p>",
        "id": 203334092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594249178
    },
    {
        "content": "<p>Interesting! One possible fix is to drop the <code>_arg</code> names (when there's no prefix). I just did a quick test and it works with this version of </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">parse_arguments</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">name</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">[],</span> <span class=\"o\">[]</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;_arg&quot;</span> <span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">parse_arguments</span> <span class=\"n\">ns</span> <span class=\"k\">in</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">anonymous</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"bp\">⟩</span>\n  <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">[],</span> <span class=\"n\">ns</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 203334748,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594249666
    },
    {
        "content": "<p>(<code>import_private</code> is very useful in these situations)</p>",
        "id": 203334760,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594249679
    },
    {
        "content": "<p>what's <code>import_private</code>?</p>",
        "id": 203335552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594250303
    },
    {
        "content": "<p>I suppose I can guess, I had to do a big copy paste fix imports job to test changes</p>",
        "id": 203335594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594250338
    },
    {
        "content": "<p>can we remove all those <code>private</code> markings from things in core?</p>",
        "id": 203335608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594250356
    },
    {
        "content": "<p><code>import_private parse_arguments</code> outside the module that defined it allows you to call</p>",
        "id": 203335612,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594250361
    },
    {
        "content": "<p>wait, without any indication of where it came from?</p>",
        "id": 203335635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594250394
    },
    {
        "content": "<p>I'm in favor of that. I feel like <code>private</code> is a misfeature</p>",
        "id": 203335637,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594250398
    },
    {
        "content": "<p>Do you just scour everything in the <code>_private</code> namespace?</p>",
        "id": 203335679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594250412
    },
    {
        "content": "<p>I think the bug is in <code>set_cases_tags</code></p>",
        "id": 203335740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594250472
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- `import_private foo from bar` finds a private declaration `foo` in the same file as `bar`</span>\n<span class=\"cm\">and creates a local notation to refer to it.</span>\n\n<span class=\"cm\">`import_private foo` looks for `foo` in all imported files.</span>\n\n<span class=\"cm\">When possible, make `foo` non-private rather than using this feature.</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>",
        "id": 203335856,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594250568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60cases.60.20.2F.20.60case.20.7B.20.7D.60/near/203335740\">said</a>:</p>\n<blockquote>\n<p>I think the bug is in <code>set_cases_tags</code></p>\n</blockquote>\n<p>What is it doing wrong?</p>",
        "id": 203335965,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594250672
    },
    {
        "content": "<p>This seems a bit odd:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">rs</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">[],</span>\n    <span class=\"n\">trace</span> <span class=\"n\">rs</span>\n    <span class=\"c1\">-- [(relation.trans_gen.single, [x.snd, h_a]), (relation.trans_gen.tail, [h_b, x.snd, h_a, h_a_1])]</span>\n  <span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203336500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594251092
    },
    {
        "content": "<p>why is <code>x.snd</code> being listed as a hypothesis name?</p>",
        "id": 203336517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594251108
    },
    {
        "content": "<p>That's literally <code>@prod.snd.{0 0} α α x</code>, not a local constant named <code>x.snd</code></p>",
        "id": 203336622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594251179
    },
    {
        "content": "<p><code>set_cases_tags</code> is clearly not expecting something other than a local constant in that list, and for good reason:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Apply `cases_on` recursor, names for the new hypotheses are retrieved from `ns`.</span>\n<span class=\"cm\">   `h` must be a local constant. It returns for each new goal the name of the constructor, a list of new hypotheses, and a list of</span>\n<span class=\"cm\">   substitutions for hypotheses depending on `h`. The number of new goals may be smaller than the</span>\n<span class=\"cm\">   number of constructors. Some goals may be discarded when the indices to not match.</span>\n<span class=\"cm\">   See `induction` for information on the list of substitutions.</span>\n\n<span class=\"cm\">   The `cases` tactic is implemented using this one, and it relaxes the restriction of `h`. -/</span>\n<span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">cases_core</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">semireducible</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>the list in question is described as \"a list of new hypotheses\"</p>",
        "id": 203336779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594251320
    },
    {
        "content": "<p>Is it using the list of new assumptions or the substitution?</p>",
        "id": 203336916,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594251457
    },
    {
        "content": "<p>the second part of the triple</p>",
        "id": 203337501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594252012
    },
    {
        "content": "<p><code>tactic.cases</code> drops the third part of the triple (the substitution)</p>",
        "id": 203337515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594252028
    },
    {
        "content": "<p>So, for some reason, the name of some new assumptions is a projection expression :/</p>",
        "id": 203337609,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594252093
    },
    {
        "content": "<p>That sounds like a problem on the C++ side</p>",
        "id": 203337961,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594252483
    },
    {
        "content": "<p>This seems to be <a href=\"https://github.com/leanprover-community/mathlib/issues/345\">#345</a>, where indeed <code>cases_core</code> returns exprs that aren't local constants. If anyone wants to fix the C++ that'd be great, but we can also easily work around this issue in core. (I wanted to do this but forgot. Sorry you had to debug this stuff again.)</p>",
        "id": 203400841,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1594308644
    },
    {
        "content": "<p>fixed: <a href=\"https://github.com/leanprover-community/lean/issues/390\">lean#390</a></p>",
        "id": 203709316,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1594643943
    },
    {
        "content": "<p>Wonderful! Thank you so much!</p>",
        "id": 203711769,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594645412
    }
]