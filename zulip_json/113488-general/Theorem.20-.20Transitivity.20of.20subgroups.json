[
    {
        "content": "<p>I don't know how to write the following theorems in lean:</p>\n<p>If <code>H</code> is a subgroup of <code>G</code> and <code>K</code> is a subgroup of <code>H</code>, then <code>K</code> is a subgroup of <code>H</code>.</p>",
        "id": 284837692,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654233635
    },
    {
        "content": "<p>If you have <code>A B C : subgroup G</code> and <code>h1 : A ≤ B</code> and <code>h2 : B ≤ C</code> then <code>h1.trans h2</code> will be a term of <code>A ≤ C</code>.<br>\nIf you have <code>H : subgroup G</code> and <code>K : subgroup H</code>, then <code>K : subgroup G</code> does not type check. You will have to apply <code>subgroup.map</code> to the canonical group hom from <code>H</code> to <code>G</code>.</p>",
        "id": 284838251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654234387
    },
    {
        "content": "<p>I'm using mathlib's subgroup def. But this seems not valid code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span> <span class=\"c1\">-- import Lean's subgroups</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subgroup_trans</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>   <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/BCLG73CI80xyKvKiGwF0Kons/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BCLG73CI80xyKvKiGwF0Kons/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/BCLG73CI80xyKvKiGwF0Kons/image.png\"></a></div>",
        "id": 284838543,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654234772
    },
    {
        "content": "<p>Indeed, that doesn't type check.<br>\nIf <code>K</code> has type <code>subgroup H</code>, it can not also have type <code>subgoup G</code>.</p>",
        "id": 284838688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654234934
    },
    {
        "content": "<p>You could argue that there should be a coercion from <code>subgroup H</code> to <code>subgroup G</code>, but mathlib doesn't have that.</p>",
        "id": 284838704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654234974
    },
    {
        "content": "<p>So you need to use <code>subgroup.map</code>.</p>",
        "id": 284838714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654234996
    },
    {
        "content": "<p>Let me have a try</p>",
        "id": 284838716,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654234999
    },
    {
        "content": "<p>Is there any function to make a coercion from <code>subgroup H</code> to <code>subgroup G</code> without writing monoid_hom by my self?</p>",
        "id": 284839204,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654235648
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.map\">docs#subgroup.map</a></p>",
        "id": 284839298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654235767
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subgroup.map</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>I need to provide <code>(f : G →* N)</code>. That means I need to provide a instance of <code>monoid_hom</code>.</p>\n<p>Is there any helper function help me to provide this?</p>",
        "id": 284839393,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654235911
    },
    {
        "content": "<p>I guess <code>H.subtype</code> is that map</p>",
        "id": 284840501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654237309
    },
    {
        "content": "<p>You could try filling it in <code>by library_search</code></p>",
        "id": 284840554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654237333
    },
    {
        "content": "<p><code>subgroup.map (by library_search) K</code></p>",
        "id": 284840576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654237354
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span> <span class=\"c1\">-- import Lean's subgroups</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subgroup_trans</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup.map</span> <span class=\"n\">H.subtype</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/kcNRZ90Dnmt3ZbkYYq_dyYoi/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kcNRZ90Dnmt3ZbkYYq_dyYoi/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kcNRZ90Dnmt3ZbkYYq_dyYoi/image.png\"></a></div>",
        "id": 284840684,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654237466
    },
    {
        "content": "<p>That's not a lemma.</p>",
        "id": 284840759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654237554
    },
    {
        "content": "<p><code>subgroup.map H.subtype K</code> is a subgroup of <code>G</code>.</p>",
        "id": 284840815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654237578
    },
    {
        "content": "<p>Thank you very much for your patient answer. <span aria-label=\"heart kiss\" class=\"emoji emoji-1f618\" role=\"img\" title=\"heart kiss\">:heart_kiss:</span><br>\nI have another question.<br>\nSo how do I state that K is a subgroup of G ? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 284840957,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654237759
    },
    {
        "content": "<p>It is not.</p>",
        "id": 284841058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654237896
    },
    {
        "content": "<blockquote>\n<p>I don't know how to write the following theorems in lean: If <code>H</code> is a subgroup of <code>G</code> and <code>K</code> is a subgroup of <code>H</code>, then <code>K</code> is a subgroup of <code>H</code>.</p>\n</blockquote>\n<p>That is not a \"theorem\" in Lean. It is a construction, so it is a definition.</p>",
        "id": 284841165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654237999
    },
    {
        "content": "<p>I know it's not type-theoretically correct. But in textbooks written in set theory, there is such a proposition:</p>\n<blockquote>\n<p>If H is a subgroup of G and K is a subgroup of H, then K is a subgroup of H.</p>\n</blockquote>\n<p>I want to formalize it with lean .</p>",
        "id": 284841172,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654238005
    },
    {
        "content": "<p>Oh, I know, it is a definition. So I need't prove this.</p>",
        "id": 284841238,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654238084
    },
    {
        "content": "<p>The textbooks also talk about things like \"the first isomorphism theorem\" which is also a definition. I'm just pointing out that if you are not precise with language then it can lead you to ask informal questions about a system where it is not clear what you are actually asking. You ask \"So how do I state that K is a subgroup of G ?\" A better question on this chat is \"here is some code, how do I fill in the sorry\"? It is very hard to answer a question of the form \"So how do I state that K is a subgroup of G ?\" because you have not precisely stated the types of everything in the question. You might have one mental model of <code>K</code> but when you formalise you might find that there are several ways to represent the idea in type theory, and your mental model of K might correspond to several different things at the same time.</p>",
        "id": 284841273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654238156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329691\">ZHAO Jinxiang</span> <a href=\"#narrow/stream/113488-general/topic/Theorem.20-.20Transitivity.20of.20subgroups/near/284841172\">said</a>:</p>\n<blockquote>\n<p>I know it's not type-theoretically correct. But in textbooks written in set theory, there is such a proposition:</p>\n<blockquote>\n<p>If H is a subgroup of G and K is a subgroup of H, then K is a subgroup of H.</p>\n</blockquote>\n<p>I want to formalize it with lean .</p>\n</blockquote>\n<p>The problem with this is that the predicate <code>is a subgroup</code>doesn't exist in lean, so you shouldn't think it about that way. Instead, you can ask \"Given two pieces of data, i.e. a subgroup H of G and a subgroup K of H, construct the subgroup of G that naturally identifies with K.\"</p>",
        "id": 284841458,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1654238332
    },
    {
        "content": "<p>A formal and unhelpful answer to your question would be something like: <code>subgroup G</code> is the type of subgroups of <code>G</code>. If you have a term <code>K</code> whose type is <code>subgroup G</code> then it is a subgroup of <code>G</code> by definition. If it does not have type <code>subgroup G</code> then it is not a subgroup of G, by definition (e.g. it might be a subset of G), so you can't prove it's a subgroup of G. One thing which helped me when I was trying to learn this stuff is that groups and subgroups are defined in an asymmetric way in Lean: a group is a type, and a subgroup is a term. In particular \"a subgroup is a group\" when written naively in Lean does not even make sense on a syntactic level. This is why precision is important when formalising.</p>",
        "id": 284841464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654238336
    },
    {
        "content": "<p>Thank you very much for your patient answers. <span aria-label=\"heart kiss\" class=\"emoji emoji-1f618\" role=\"img\" title=\"heart kiss\">:heart_kiss:</span> I learned a lot from the discussions here.</p>\n<p>Today is the Chinese Dragon Boat Festival. I wish you a happy day.</p>",
        "id": 284841841,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654238717
    }
]