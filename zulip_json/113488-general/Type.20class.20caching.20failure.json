[
    {
        "content": "<p>This code is producing a type class resolution trace I don't remember ever seeing: it repeats the same \"cached failure for ...\" message without doing any work in between. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.witt_vector.frobenius</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`ùïé`</span> <span class=\"o\">:=</span> <span class=\"n\">witt_vector</span> <span class=\"n\">p</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">K</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">fraction_ring</span> <span class=\"o\">(</span><span class=\"bp\">ùïé</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- example : module K K := by try_for 10000 {apply_instance }-- times out</span>\n<span class=\"c1\">-- example : module K K := semiring.to_module -- works</span>\n</code></pre></div>\n<p>At some point, it ends up in a loop of printing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">cached</span> <span class=\"n\">failure</span> <span class=\"n\">for</span> <span class=\"bp\">@</span><span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fraction_ring</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">witt_vector.comm_ring</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fraction_ring</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">witt_vector.comm_ring</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">localization.comm_ring</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">witt_vector.comm_ring</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_zero_divisors</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">witt_vector.comm_ring</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">witt_vector</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">witt_vector.comm_ring</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>with nothing in between.</p>\n<p>I'll try to minimize the example, but in the meantime, has anyone seen this before? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> any guesses?</p>",
        "id": 267735654,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641999499
    },
    {
        "content": "<p>I feel like this reminds me of what I ran into on <code>flt_regular</code>: <a href=\"#narrow/stream/113488-general/topic/TC.20hell.20in.20FLT-regular\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/TC.20hell.20in.20FLT-regular</a></p>",
        "id": 267736904,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642000051
    },
    {
        "content": "<p>Yes, I saw this recently in <a href=\"#narrow/stream/113488-general/topic/infinite.20cached.20failure.20for.20comm_semiring.20S/near/267181466\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/infinite.20cached.20failure.20for.20comm_semiring.20S/near/267181466</a></p>",
        "id": 267737408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642000264
    },
    {
        "content": "<p>If you ask for more diagnostics, it looks less repetitive</p>",
        "id": 267737831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642000451
    },
    {
        "content": "<p>The standard answer is that this is probably due to nested type-class resolution problems.</p>",
        "id": 267743097,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642002615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Type.20class.20caching.20failure/near/267737831\">said</a>:</p>\n<blockquote>\n<p>If you ask for more diagnostics, it looks less repetitive</p>\n</blockquote>\n<p>Ah, yep. This seems to be the same idea as <a href=\"#narrow/stream/113488-general/topic/Why.20is.20.60int.2Ecast_abs.60.20so.20slow.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Why.20is.20.60int.2Ecast_abs.60.20so.20slow.3F</a> (although I hvaen't figured out what defeq check kicks it off)</p>",
        "id": 267743269,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642002693
    },
    {
        "content": "<p>We don't have a good workaround for this yet, besides \"wait for Lean 4,\" is that right?</p>",
        "id": 267743321,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642002714
    },
    {
        "content": "<blockquote>\n<p>wait for Lean 4</p>\n</blockquote>\n<p>It's rather \"check if it's got any better\".  Lean 4 still has nested TC problems, and (particularly failing) TC queries can still time out.  It might be worth trying out the example in mathlib3port.</p>",
        "id": 267745013,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642003396
    },
    {
        "content": "<p>Sometimes I wonder if it would be better to assign type class meta variables like <code>?m_1 := { add := ?m_2, add_comm := ?m_3, ... }</code> instead of doing nested TC synthesis.</p>",
        "id": 267745641,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642003653
    }
]