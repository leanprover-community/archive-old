[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.lattice_intervals</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hak</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">bounded_lattice</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set.Icc.bounded_lattice</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hak</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hak</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hak</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have a local instance that requires a hypothesis. <br>\nAfter I introduce it with <code>haveI</code>, it seems to \"work\" since <code>\\top</code> (from <code>order_top</code> inferred from <code>bounded_lattice</code>) is acknowledged on the next line.<br>\nNow I want to prove the simple goal, which is trivial since <code>\\top</code> in this bounded lattice is exactly <code>k</code> (or, <code>⟨k, whatever⟩</code>). I feel like <code>exact hak</code> should close the goal but it doesn't work.<br>\nDrilling down with things like <code>rw ←subtype.coe_lt_coe, simp</code> gets down to <code>a &lt; ↑⊤</code>, so it seems that it can't figure out what <code>↑⊤</code> is, even though it \"should know\". Am I missing something about how to work with local instances like this?</p>",
        "id": 225126796,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1612423654
    },
    {
        "content": "<p>You need to use <code>letI</code> instead of <code>haveI</code>.</p>",
        "id": 225126993,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612423830
    },
    {
        "content": "<p>Otherwise, Lean records that there is an instance, but forgets the details of its definition.</p>",
        "id": 225127007,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612423850
    },
    {
        "content": "<p>Oh. Sure enough, that works!<br>\nWhat's the use of <code>haveI</code> then?</p>",
        "id": 225127108,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1612423933
    },
    {
        "content": "<p>for propositions</p>",
        "id": 225127114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612423946
    },
    {
        "content": "<p>Oh, I think I understand. Since you'd use <code>have</code> and <code>let</code> for propositions and data, respectively, it's the same here.</p>",
        "id": 225127171,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1612424008
    }
]