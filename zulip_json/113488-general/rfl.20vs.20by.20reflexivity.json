[
    {
        "content": "<p>Sometimes <code>by reflexivity</code> does the job, whereas <code>rfl</code> isn't accepted. Can anyone tell the difference between the two?</p>",
        "id": 197804638,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589648334
    },
    {
        "content": "<p>The reflexivity tactic will close any goal of the form <code>R a a</code> where <code>R</code> is a relation tagged with the <code>[refl]</code> attribute</p>",
        "id": 197804654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589648379
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#refl%20/%20reflexivity\">https://leanprover-community.github.io/mathlib_docs/tactics.html#refl%20/%20reflexivity</a></p>",
        "id": 197804657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589648386
    },
    {
        "content": "<p>I think the difference you're observing is based on the relation in question - <code>rfl</code> will prove anything like <code>a = a</code> but <code>reflexivity</code> will work for any reflexive relation, not just equality</p>",
        "id": 197804703,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589648411
    },
    {
        "content": "<p>It's all in the doc.</p>",
        "id": 197804709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589648444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/rfl.20vs.20by.20reflexivity/near/197804654\">said</a>:</p>\n<blockquote>\n<p>The reflexivity tactic will close any goal of the form <code>R a a</code> where <code>R</code> is a relation tagged with the <code>[refl]</code> attribute</p>\n</blockquote>\n<p>But they even seem to differ when you're doing ordinary equational reasoning. I'm not working with more general relations at the moment.</p>",
        "id": 197804714,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589648463
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> ?</p>",
        "id": 197804889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589648734
    },
    {
        "content": "<p>Here is my <a href=\"/user_uploads/3121/WjVXUD4SSdo-2qJujDF9mn5k/mwe.lean\">mwe</a></p>",
        "id": 197805073,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589648967
    },
    {
        "content": "<p>At the end there is an application of <code>by reflexivity</code> which can't be replaced by <code>rfl</code></p>",
        "id": 197805127,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649007
    },
    {
        "content": "<p>PS, I'm still on 3.11 because I don't know how to update with elan. The install guide only told me how to install it, but not how to keep it up to date :P</p>",
        "id": 197805155,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649108
    },
    {
        "content": "<p>Seems like an elaboration order issue. It works with <code>by exact rfl</code></p>",
        "id": 197805218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649193
    },
    {
        "content": "<p>And replacing the whole calc by rfl works</p>",
        "id": 197805243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649235
    },
    {
        "content": "<p>Ah that simplifies things :)</p>",
        "id": 197805291,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649265
    },
    {
        "content": "<p>About your updating question, I need more context. Did you create a Lean project using <code>leanproject</code>?</p>",
        "id": 197805293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649269
    },
    {
        "content": "<p>Yes, using <code>leanproject new ...</code></p>",
        "id": 197805316,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649325
    },
    {
        "content": "<p>And you want to upgrade to the latest shiny Lean+mathlib?</p>",
        "id": 197805325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649347
    },
    {
        "content": "<p>Of course!</p>",
        "id": 197805329,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649357
    },
    {
        "content": "<p><code>leanproject upgrade</code> will do that</p>",
        "id": 197805374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649369
    },
    {
        "content": "<p>Great!</p>",
        "id": 197805376,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649381
    },
    {
        "content": "<p>That's easy:)</p>",
        "id": 197805379,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649387
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 197805381,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649392
    },
    {
        "content": "<p>Not just <code>up</code>?</p>",
        "id": 197805385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589649402
    },
    {
        "content": "<p>That's when I'll get so addicted to it that he'll want to do it several times a day</p>",
        "id": 197805395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649425
    },
    {
        "content": "<p>like you do</p>",
        "id": 197805410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649442
    },
    {
        "content": "<p>Actually, <code>leanproject upgrade</code> was countered by <code>no such command exists</code>. But <code>leanproject up</code> works, so I guess I might as well be an addict XD</p>",
        "id": 197805473,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649510
    },
    {
        "content": "<p>Oh sorry, it's <code>upgrade-mathlib</code></p>",
        "id": 197805497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649573
    },
    {
        "content": "<p>I've been addicted for too long, I forgot the long version</p>",
        "id": 197805500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649586
    },
    {
        "content": "<p>I need to add more synonyms. I already have <code>upgrade-mathlib</code>, <code>update-mathlib</code> and <code>up</code></p>",
        "id": 197805550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649620
    },
    {
        "content": "<p>(because nobody can remember whether it's update or upgrade)</p>",
        "id": 197805554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649638
    },
    {
        "content": "<p>Another trick: <code>leanproject --help</code> can help.</p>",
        "id": 197805572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649671
    },
    {
        "content": "<p>Do I need to restart vscode when I've upgraded lean, or is that not necessary?</p>",
        "id": 197805648,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649772
    },
    {
        "content": "<p>I think the extension detects it and restarts lean</p>",
        "id": 197805659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649803
    },
    {
        "content": "<p>Great!</p>",
        "id": 197805662,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649816
    },
    {
        "content": "<p>(but restarting VScode just in case would have been faster than typing the question)</p>",
        "id": 197805669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589649839
    },
    {
        "content": "<p>Ok thanks for your help:)</p>",
        "id": 197805719,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589649867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253568\">Egbert Rijke</span> <a href=\"#narrow/stream/113488-general/topic/rfl.20vs.20by.20reflexivity/near/197805073\">said</a>:</p>\n<blockquote>\n<p>Here is my <a href=\"/user_uploads/3121/WjVXUD4SSdo-2qJujDF9mn5k/mwe.lean\">mwe</a></p>\n</blockquote>\n<p>Why upload a file instead of copy-pasting the text? The latter should be easier for both you and the people who want to read your example?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">mwe</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list_of_length</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list_of_length</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list_of_length</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">list_of_length</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list_of_length</span>\n\n<span class=\"n\">def</span> <span class=\"n\">head</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">list_of_length</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n&#39;</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tail</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">list_of_length</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list_of_length</span> <span class=\"n\">A</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n&#39;</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">list_of_length</span> <span class=\"o\">(</span><span class=\"n\">list_of_length</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n\n<span class=\"n\">def</span> <span class=\"n\">top_row</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list_of_length</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">head</span> <span class=\"n\">m</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tail_rows</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">tail</span> <span class=\"n\">m</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cons_horizontal</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">list_of_length</span> <span class=\"n\">A</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"n\">nil</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m&#39;</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n    <span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">top_row</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cons_horizontal</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">tail_rows</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">top_row_cons_horizontal</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list_of_length</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"n\">top_row</span> <span class=\"o\">(</span><span class=\"n\">cons_horizontal</span> <span class=\"n\">x</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">top_row</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m&#39;</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m&#39;&#39;</span> <span class=\"n\">y</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">top_row</span> <span class=\"o\">(</span><span class=\"n\">cons_horizontal</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m&#39;</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m&#39;&#39;</span> <span class=\"n\">y</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n        <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m&#39;</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">top_row</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m&#39;&#39;</span> <span class=\"n\">y</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">reflexivity</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list_of_length</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mwe</span>\n</code></pre></div>",
        "id": 197806548,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589651067
    },
    {
        "content": "<p>Ok, I'll do that next time. Thanks!</p>",
        "id": 197807014,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589651700
    },
    {
        "content": "<p>You can also restart Lean without restarting VS Code by hitting ctrl+P and typing \"Lean restart\" into the command palette. You can assign a keybind to it by searching for the same thing in the VS Code keybinds.</p>",
        "id": 197809629,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589655705
    }
]