[
    {
        "content": "<p>My newest linter tells me that this lemma is bad:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">filter_congr_decidable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">inst</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">congr</span>\n</pre></div>\n\n\n<p>I would have expected that this lemma would cause nontermination, since the left-hand side matches the right-hand side.  But it doesn't.  git blames <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>: how does this work?  Bonus question: if I change <code>λ a, _inst a</code> to <code>_inst</code>, then it doesn't rewrite at all. Why?!</p>",
        "id": 188831461,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582402363
    },
    {
        "content": "<p>Ah, found the explanation: <a href=\"https://github.com/leanprover-community/mathlib/pull/1477#discussion_r327315504\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1477#discussion_r327315504\">https://github.com/leanprover-community/mathlib/pull/1477#discussion_r327315504</a></p>",
        "id": 188831621,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582402583
    },
    {
        "content": "<p>Does it mean the linter should change?</p>",
        "id": 188832335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582403959
    },
    {
        "content": "<p>Yeah, when I added this, it looked pretty dangerous, but after some experiments, Lean seems to handle simp-lemmas like these well, and only applies them when they actually change something in the goal. Ideally the linter should be fine with simp-lemmas like these. We could add simp-lemmas like these for other cases where we might find the \"wrong\" instance of a type-class  (if the typeclass is a subsingleton).</p>",
        "id": 188951986,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582568810
    },
    {
        "content": "<p>The linter (<a href=\"https://github.com/leanprover-community/mathlib/issues/2045\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2045\">#2045</a>) now handles this trick correctly, I've even added a test for it: <a href=\"https://github.com/leanprover-community/mathlib/commit/76f6cba857e893a49c5dc0880fe97d6ec3bf3c29#diff-931415e3cdd2239495b8753332fb7fefR21-R43\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/76f6cba857e893a49c5dc0880fe97d6ec3bf3c29#diff-931415e3cdd2239495b8753332fb7fefR21-R43\">https://github.com/leanprover-community/mathlib/commit/76f6cba857e893a49c5dc0880fe97d6ec3bf3c29#diff-931415e3cdd2239495b8753332fb7fefR21-R43</a></p>",
        "id": 188961535,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582575238
    }
]