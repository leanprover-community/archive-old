[
    {
        "content": "<p>Why?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">structure</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">domain</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">foos</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"err\">∈</span><span class=\"w\"> </span><span class=\"n\">foos</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">set.range</span><span class=\"w\"> </span><span class=\"n\">f.map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">univ</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">foos</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"err\">∈</span><span class=\"w\"> </span><span class=\"n\">foos</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">set.range</span><span class=\"w\"> </span><span class=\"n\">f.map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">univ</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"n\">notation</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">...)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\">  </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\">  </span><span class=\"n\">?m_1</span><span class=\"w\"></span>\n</pre></div>",
        "id": 128672482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530038725
    },
    {
        "content": "<p>I think that's because the type of <code>f</code> is not fully elaborated by the time <code>f.map</code> is parsed. If you wrote:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">foos</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I think that should work</p>",
        "id": 128672828,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530039117
    },
    {
        "content": "<p>I guessed the issue comes from elaboration but couldn't see the fix</p>",
        "id": 128672972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530039254
    },
    {
        "content": "<p>This fix indeed works</p>",
        "id": 128672977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530039261
    },
    {
        "content": "<p>In the mean time I also realize that defining an auxiliary function from <code>foo X</code> to <code>Prop</code> also works</p>",
        "id": 128673023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530039343
    },
    {
        "content": "<p>Thanks</p>",
        "id": 128673026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530039346
    },
    {
        "content": "<p>Also <code>has_mem</code> has two type parameters so the type of <code>∈</code> is not enough to impose a type on <code>f</code> until type class resolution</p>",
        "id": 128673104,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530039443
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 128673109,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530039449
    },
    {
        "content": "<p>hum</p>",
        "id": 128673162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530039483
    },
    {
        "content": "<p>Can I clarify something?</p>",
        "id": 128673304,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530039611
    },
    {
        "content": "<p>I think I sort of see</p>",
        "id": 128673320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530039626
    },
    {
        "content": "<p>Does elaboration always happen before type class resolution?</p>",
        "id": 128673587,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530039897
    },
    {
        "content": "<p>I'm unsure whether elaboration is completed before type class resolution begins but most of it is done before type class resolution</p>",
        "id": 128673704,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530040039
    }
]