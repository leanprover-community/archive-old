[
    {
        "content": "<p>I am trying to define a function <code>multiset nat -&gt; multiset nat -&gt; nat</code>, by induction. If I have two multisets <code>C</code> and <code>L</code> and if I know the value of the function on all the pairs <code>(C-{x},L)</code>(with <code>x</code> in <code>C</code>)  and <code>(C,L-{y})</code> (with <code>y</code> in <code>L</code>) then I have a formula which will give me the value at <code>(C,L)</code>. The formula is not symmetric in <code>C</code> and <code>L</code>. The tool which the API gives me is</p>\n<div class=\"codehilite\"><pre><span></span>multiset.strong_induction_on :\n  Π {α : Type u_1} {p : multiset α → Sort u_2} (s : multiset α),\n    (Π (s : multiset α), (Π (t : multiset α), t &lt; s → p t) → p s) → p s\n</pre></div>\n\n\n<p>but I can't figure out how to use this directly.</p>",
        "id": 129456296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531293918
    },
    {
        "content": "<p>You can do this by a nested induction using that function</p>",
        "id": 129456360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294046
    },
    {
        "content": "<p>So I tried this</p>",
        "id": 129456361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294057
    },
    {
        "content": "<p>but my interpretation of what you're saying is \"define <code>f(C,L)</code> for <code>L</code> constant and <code>C</code> varying, by induction on <code>C</code>\" and the problem is that the definition needs both <code>C</code> and <code>L</code> to move. What am I missing?</p>",
        "id": 129456408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294143
    },
    {
        "content": "<p>Define <code>f C L</code> for all <code>L</code> and fixed <code>C</code>, by induction on <code>C</code></p>",
        "id": 129456416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294191
    },
    {
        "content": "<p>In the IH we know <code>f (C-{x}) L'</code> for all <code>L'</code> and need to define <code>f C L</code></p>",
        "id": 129456461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294222
    },
    {
        "content": "<p>To define <code>f C L</code> I need more</p>",
        "id": 129456465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294245
    },
    {
        "content": "<p>I need <code>f C L'</code> for all <code>L'</code> smaller than <code>L</code></p>",
        "id": 129456466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294253
    },
    {
        "content": "<p>we do so by induction on <code>L</code>. Now the induction hypothesis gives us <code>f C (L-{y})</code> and we must define <code>f C L</code></p>",
        "id": 129456475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294267
    },
    {
        "content": "<p>OK I'll take it from here.</p>",
        "id": 129456479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294278
    },
    {
        "content": "<p>The reason I asked was that I was not 100% sure that the tools I had were enough. If you're confident that they are then I just need to work harder. Thanks for the tips.</p>",
        "id": 129456481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294299
    },
    {
        "content": "<p>it is two inductions</p>",
        "id": 129456486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294311
    },
    {
        "content": "<p>one inside the other</p>",
        "id": 129456488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294316
    },
    {
        "content": "<p>Right.</p>",
        "id": 129456489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294318
    },
    {
        "content": "<p>I'm a mathematician. I don't understand induction properly :-)</p>",
        "id": 129456529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294342
    },
    {
        "content": "<p>We only do induction on nat in maths.</p>",
        "id": 129456530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294349
    },
    {
        "content": "<p>This can also be viewed as a well founded induction in lex order, first by <code>C</code> then <code>L</code></p>",
        "id": 129456532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294358
    },
    {
        "content": "<p>This I know.</p>",
        "id": 129456533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294364
    },
    {
        "content": "<p>But the only way I know to do a well-founded induction is on an inductive type.</p>",
        "id": 129456535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294375
    },
    {
        "content": "<p>and since <code>(C-{x},L)</code> and <code>(C,L-{y})</code> are both less in this order, this method should work</p>",
        "id": 129456542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294394
    },
    {
        "content": "<p>I guess an alternative to the <code>multiset.strong_induction_on</code> API is just to provide a proof that multiset <code>&lt;</code> is well founded and let you use the tools from the <code>well_founded</code> namespace</p>",
        "id": 129456589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294480
    },
    {
        "content": "<p>I didn't even know that namespace existed!</p>",
        "id": 129456591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294500
    },
    {
        "content": "<p>That's what powers the <code>using_well_founded</code> equation compiler stuff</p>",
        "id": 129456606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294530
    },
    {
        "content": "<p>The only time I've used well-founded stuff is when trying to persuade the equation compiler that my definition is sound.</p>",
        "id": 129456609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294534
    },
    {
        "content": "<p>i.e. indirectly</p>",
        "id": 129456611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531294551
    },
    {
        "content": "<p>Back in the old days we used <code>well_founded.fix</code> when we wanted to write a wf definition</p>",
        "id": 129456615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294559
    },
    {
        "content": "<p>and it requires a proof that the relation du jour is well founded</p>",
        "id": 129456660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531294597
    },
    {
        "content": "<p>I didn't get the memo that this method was passe</p>",
        "id": 129473610,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1531319133
    },
    {
        "content": "<p>Probably I need to get with the times :)</p>",
        "id": 129473764,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1531319278
    }
]