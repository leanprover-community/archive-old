[
    {
        "content": "<p>Is there a nicer way to state \"the value returned by a monad satisfies this property\"? My attempt was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">control.random</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Chooses a random element from a list. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list.random</span> <span class=\"o\">[</span><span class=\"n\">random_gen</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">rand_g</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">ulift.up</span> <span class=\"n\">i</span> <span class=\"bp\">←</span> <span class=\"n\">uliftable.up</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">rand.random</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">t.length.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rand_g</span> <span class=\"n\">g</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.prop</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- When choosing a random element, the result is in the list. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">list.run_random_mem</span> <span class=\"o\">[</span><span class=\"n\">random_gen</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gen</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">l.random</span> <span class=\"o\">:</span> <span class=\"n\">rand_g</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">⟨</span><span class=\"n\">gen</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">fst.elim</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">list.nth_le_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but this lemma feels impossible to actually use in any meaninful way</p>",
        "id": 319573258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672921227
    },
    {
        "content": "<p>In this case, returning a subtype in the first place seems like the obvious approach</p>",
        "id": 319574973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672921782
    },
    {
        "content": "<p>That only works if you put every property you could possibly care about in the subtype though, right?</p>",
        "id": 319575080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672921811
    },
    {
        "content": "<p>Yes but in this case, there is only one such possible property.</p>",
        "id": 319575300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672921884
    },
    {
        "content": "<p>Indeed; but presumably there are cases where this is not so</p>",
        "id": 319575385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672921913
    },
    {
        "content": "<p>It could also work more generally; try to write a refined version of the action that returns whatever subtype you're interested in at the moment</p>",
        "id": 319575640,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672921995
    },
    {
        "content": "<p>I think this is effectively what you have to do in any case, since your goal is that you have some code like <code>m &gt;&gt;= fun a =&gt; f a</code> and you want, in the context of <code>f</code>, to also have some <code>h : p a</code></p>",
        "id": 319576046,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672922123
    },
    {
        "content": "<p>so you could try to rewrite this to <code>m' &gt;&gt;= fun a =&gt; f a.val</code></p>",
        "id": 319576158,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672922164
    }
]