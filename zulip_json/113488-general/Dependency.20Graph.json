[
    {
        "content": "<p>Is there a way to extract a dependency graph of all lemmas in some folder? (like this: <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html\">https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html</a>) It should consider @[simp] lemmatas.<br>\nWould love to integrate such a dependency graph into VS Code (like the info view) where you can click on lemmas to jump to their definition.</p>",
        "id": 221507188,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609755207
    },
    {
        "content": "<p>Do you care about dependent tactics too?</p>",
        "id": 221508572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609756290
    },
    {
        "content": "<p>For lemmas, presumably you could \"just\" look at the term-mode proof for the lemma, and extract all the symbol names</p>",
        "id": 221508604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609756319
    },
    {
        "content": "<p>The sphere eversion dependency graph is not generated by Lean (it couldn't be since it most of the project is not yet in Lean). It's generated by plasTeX.</p>",
        "id": 221508687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609756356
    },
    {
        "content": "<p>What you want is closer to what leancrawler is doing. It generated the graph on the <a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\">perfectoid home page</a> for instance.</p>",
        "id": 221508746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609756400
    },
    {
        "content": "<blockquote>\n<p>Do you care about dependent tactics too?</p>\n</blockquote>\n<p>I'm fine with just the lemmas ;)</p>",
        "id": 221508990,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609756599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Dependency.20Graph/near/221508604\">said</a>:</p>\n<blockquote>\n<p>For lemmas, presumably you could \"just\" look at the term-mode proof for the lemma, and extract all the symbol names</p>\n</blockquote>\n<p>Is there some lean command that does this? Should I use the lean CLI + a custom tool that parses the output?</p>",
        "id": 221509053,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609756681
    },
    {
        "content": "<p>Again, <a href=\"https://github.com/leanprover-community/leancrawler\">leancrawler</a> does that.</p>",
        "id": 221509115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609756704
    },
    {
        "content": "<p>The Lean side is <a href=\"https://github.com/leanprover-community/leancrawler/blob/master/src/leancrawler/deps.lean\">https://github.com/leanprover-community/leancrawler/blob/master/src/leancrawler/deps.lean</a></p>",
        "id": 221509148,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609756738
    },
    {
        "content": "<p>The python code is basically <a href=\"https://github.com/leanprover-community/leancrawler/blob/master/src/leancrawler/crawler.py\">this</a>, right?</p>",
        "id": 221509207,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609756787
    },
    {
        "content": "<p>Yes. It parses a YAML file created by the Lean side.</p>",
        "id": 221509284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609756819
    },
    {
        "content": "<p>To be honest I don't really remember the current state of this project, but I know Daniel Selsam used it more recently than I did.</p>",
        "id": 221509299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609756847
    },
    {
        "content": "<p>Sadly, I don't know any python. Also, I think for integration into vscode, a typescript implementation might be more suited since vscode ships nodejs. Given the current size of the python codebase in lean-crawler, what do you think of a rewrite in typescript?  I guess it shouldn't take longer than an evening.</p>",
        "id": 221509509,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609757007
    },
    {
        "content": "<p>Sure, this is a very simple project, and the python code gather statistics you don't care about in your project. However I should warn you that those graphs grow very fast. I'm afraid you won't have anything readable except in the simplest examples. You can watch the first part of my <a href=\"https://www.youtube.com/watch?v=ZVDBqLebHXo&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=9\">Pittsburgh talk</a> last year for comments about that.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ZVDBqLebHXo\" href=\"https://www.youtube.com/watch?v=ZVDBqLebHXo&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=9\"><img src=\"https://i.ytimg.com/vi/ZVDBqLebHXo/default.jpg\"></a></div>",
        "id": 221509742,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609757157
    },
    {
        "content": "<p>I'd be slightly tempted to integrate <code>leancrawler</code> into doc-gen, which is an argument for it remaining in python</p>",
        "id": 221509791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609757169
    },
    {
        "content": "<p>But not an argument against building another tool in Typescript</p>",
        "id": 221509817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609757183
    },
    {
        "content": "<p>I guess it also reports all definitios/lemmas inside of mathlib? Maybe some heavy filter could reduce the size. I don't know what a typical lean project looks like though.</p>",
        "id": 221509900,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609757260
    },
    {
        "content": "<p>I'm currently at about 120 lemmas and theorems for my program verification proof - I think it could be insightful to see their dependencies live in vscode. I guess this size is still very manageable.</p>",
        "id": 221510199,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609757490
    },
    {
        "content": "<p>Something in vscode that shows dependencies between lemmas even within the current file seems pretty useful.</p>",
        "id": 221510234,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609757521
    },
    {
        "content": "<p>It should be possible to make something useful with the Lean 3 <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/widget_server.md\">widget framework</a> and the Lean code in <code>leancrawler</code>. Making a nice-looking graph will probably be a pain since widgets can't currently call external JS libraries, though.</p>",
        "id": 221510720,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609757843
    },
    {
        "content": "<p>I already had a quick look at the widget framework. I would like the dependency view to be non-invasive and asynchronous though (i.e. I don't want the graph export to affect the proof checking and vice versa). The graph also shouldn't be rendered inside the info view but rather in its own view. I guess this makes it somewhat unsuitable for the widget framework?</p>",
        "id": 221511119,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609758087
    },
    {
        "content": "<p>Yeah that's right Henning. Async rendering and having custom windows  is currently still 'future work'.</p>",
        "id": 221511220,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1609758139
    },
    {
        "content": "<p>Another dream is to have access to graph libraries like D3</p>",
        "id": 221511340,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1609758216
    }
]