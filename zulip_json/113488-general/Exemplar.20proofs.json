[
    {
        "content": "<p>I'd like to have a look at some largeish proofs in Lean so that I can get a sense of how such things are done. I'm guessing mathlib is a good place to look. Any particular proofs there that would be instructive to look over? Also I've not looked through that much of the Xena project archives. Are there examples of larger proofs there that I could look at?</p>",
        "id": 160108345,
        "sender_full_name": "Plam",
        "timestamp": 1551888163
    },
    {
        "content": "<p>There are different styles of proof, depending on the author but also the intent. Which kind of proof do you want to see?</p>",
        "id": 160108980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551888581
    },
    {
        "content": "<p>There are also different topics of course, are you looking for CS or maths?</p>",
        "id": 160109102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551888640
    },
    {
        "content": "<p>CS would be preferable, but I'm happy to look at maths. Could you say more about the styles of proof?</p>",
        "id": 160109369,
        "sender_full_name": "Plam",
        "timestamp": 1551888822
    },
    {
        "content": "<p>First you can use direct proof terms, or use tactics, or combine both</p>",
        "id": 160109825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551889052
    },
    {
        "content": "<p>You can aim for a concise proof or a pedagogical proof</p>",
        "id": 160109851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551889066
    },
    {
        "content": "<p>I'd prefer to err towards terms rather than tactics. I'm more neutral on pedagogy vs concision, but a slight preference for pedagogy</p>",
        "id": 160110093,
        "sender_full_name": "Plam",
        "timestamp": 1551889200
    },
    {
        "content": "<p>Did you have  a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/basic.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/list/basic.lean</a>?</p>",
        "id": 160110731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551889583
    },
    {
        "content": "<p>If you want theoretical CS you can look at <a href=\"https://arxiv.org/abs/1810.08380\" target=\"_blank\" title=\"https://arxiv.org/abs/1810.08380\">https://arxiv.org/abs/1810.08380</a> and the corresponding code in <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/computability\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/master/src/computability\">https://github.com/leanprover-community/mathlib/tree/master/src/computability</a></p>",
        "id": 160110793,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551889652
    },
    {
        "content": "<p>Remember you can download a compiled mathlib at <a href=\"https://github.com/leanprover-community/mathlib-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nightly/releases\">https://github.com/leanprover-community/mathlib-nightly/releases</a></p>",
        "id": 160110960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551889775
    },
    {
        "content": "<p>Hadn't looked at list.basic yet, thanks! And the paper looks excellent</p>",
        "id": 160111073,
        "sender_full_name": "Plam",
        "timestamp": 1551889831
    },
    {
        "content": "<p>I wouldn't look at the xena project. Most of the stuff there was written by amateurs, in fact most was written by me when I knew very little about how to write Lean code.</p>",
        "id": 160112243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551890737
    },
    {
        "content": "<p>In Xena you will see me struggling trying to do basic stuff, and often missing tricks and taking far too long. In mathlib you will see experts writing complex code with very little documentation. My gut feeling is that you want something in between. However it depends on your goals. The reason I am motivated to learn how to write proofs the way the mathlib team write them is so that I can contribute to mathlib. However more recent stuff I've committed to xena is typically attempts to teach undergraduate mathematicians how to write proofs in Lean, and again this might not be what you want. When I was a learner I found data.rat.basic hard going (or data.rat, whatever it's called, I mean the rational numbers). Maybe Patrick's idea is the best -- look at how people built lists from scratch and proved a bunch of basic stuff about them. Many proofs will be short, but the cumulative total is long and some proofs will rely on many many others. I guess in some sense one tries to avoid writing large proofs; one tries to split off as many lemmas as possible.</p>",
        "id": 160112675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551891024
    }
]