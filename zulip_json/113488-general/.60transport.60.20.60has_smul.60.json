[
    {
        "content": "<p>How can I use the tactic <code>transport</code> to transport <code>has_smul</code>?<br>\nIn my case, it can transport <code>has_add</code> but cannot transport <code>has_smul</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.transport</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">struct</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">struct_equiv</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃</span> <span class=\"n\">struct</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.a</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">struct</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">transport</span> <span class=\"o\">(</span><span class=\"n\">has_add</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">struct_equiv</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">ℝ</span> <span class=\"n\">struct</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">transport</span> <span class=\"o\">(</span><span class=\"n\">has_smul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">struct_equiv</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">tactic failed, there are unsolved goals</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">case has_smul, smul</span>\n<span class=\"cm\">⊢ ℝ → struct → struct</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 303223400,
        "sender_full_name": "Youjack",
        "timestamp": 1665393064
    },
    {
        "content": "<p>If you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.equiv.transfer_instance</span>\n</code></pre></div>\n<p>then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">ℝ</span> <span class=\"n\">struct</span> <span class=\"o\">:=</span> <span class=\"n\">struct_equiv.symm.has_smul</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>works. I'm not sure why <code>transport</code> doesn't work because I thought it uses transfer_instances ...</p>",
        "id": 303291957,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665419770
    }
]