[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 0026</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">mul_eq_zero.mp</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"c1\">-- this step errors out</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">253</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">253</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 307881118,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667535213
    },
    {
        "content": "<p>It's from the tutorial of mathlib, exercise 3. where mul_eq_zero is from mathlib, saying that <code>a * b = 0 ↔ a = 0 ∨ b = 0</code>. Why can't I obtain <code>this: x + y - 0 ∨  x - y = 0</code> here?</p>",
        "id": 307881430,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667535436
    },
    {
        "content": "<p>I just checked the solution, <code>rw mul_eq_zero at a</code> works but I still don't understand why I cant do the <code>have</code></p>",
        "id": 307881846,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667535788
    },
    {
        "content": "<p>You mean <code>have := mul_eq_zero.mp a,</code></p>",
        "id": 307882172,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667536018
    },
    {
        "content": "<p>(note the <code>:=</code> not <code>:</code>)</p>",
        "id": 307882183,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667536027
    },
    {
        "content": "<p>your first <code>have</code> you wrote the statement you wanted to prove then proved it with <code>linarith</code></p>",
        "id": 307882211,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667536059
    },
    {
        "content": "<p>Your second one you're not writing the proof, you have the thing you want already, it's <code>mul_eq_zero.mp a</code></p>",
        "id": 307882272,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667536094
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/term.20has.20type.20.2E.2E.2E.20.3A.20Prop.20but.20is.20expected.20to.20have.20type.20Sort.20.3F\">#general &gt; term has type ... : Prop but is expected to have type Sort ?</a> by <span class=\"user-mention silent\" data-user-id=\"476897\">Siyuan Yan</span>.</p>",
        "id": 307882458,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667536249
    }
]