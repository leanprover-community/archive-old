[
    {
        "content": "<p>I'd like to show the following lemma:</p>\n<div class=\"codehilite\"><pre><span></span>def  big_not_zero (a : nat) (P : 1  &lt; a) : a ≠  0  :=\nλ Pp : a =  0, have olt0 : 1  &lt;  0, from eq.subst Pp P,\nfalse.elim (nat.decidable_lt 1  0)\n</pre></div>\n\n\n<p>Concretely, I'd like to get a proof of false from <code>nat.decidable_lt 1 0</code>. But I don't understand how to use decidabilty in lean.</p>",
        "id": 124661129,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522915462
    },
    {
        "content": "<p><code>example : 1  &lt;  0  → false := dec_trivial</code></p>",
        "id": 124661254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522915709
    },
    {
        "content": "<p>I'm not saying these things are easy to use though :-)</p>",
        "id": 124661257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522915741
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def  big_not_zero (a : nat) (P : 1  &lt; a) : a ≠  0  :=\nλ Pp : a =  0, have olt0 : 1  &lt;  0, from eq.subst Pp P,\n(show  1  &lt;  0  → false, by exact dec_trivial) olt0\n</pre></div>",
        "id": 124661312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522915853
    },
    {
        "content": "<p>and as you can see, I'm certainly no master of them myself.</p>",
        "id": 124661314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522915859
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def big_not_zero (a : nat) (P : 1 &lt; a) : a ≠ 0 :=\nλ h, nat.not_lt_zero 1 $ h ▸ P\n</pre></div>",
        "id": 124661362,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522915960
    },
    {
        "content": "<p>\\&gt; implying I'm a master of them</p>",
        "id": 124661363,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522915968
    },
    {
        "content": "<p>:-)</p>",
        "id": 124661364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522915972
    },
    {
        "content": "<p>Thank you! What is <code>exact</code>?</p>",
        "id": 124661365,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522915972
    },
    {
        "content": "<p><code>by</code> puts me into tactic mode</p>",
        "id": 124661370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522915985
    },
    {
        "content": "<p><code>exact</code> is a tactic</p>",
        "id": 124661371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111040\">@Adam Kurkiewicz</span> just do <code>from dec_trivial</code> instead of <code>by exact dec_trivial</code></p>",
        "id": 124661372,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916007
    },
    {
        "content": "<p>there's no need to go into tactic mode</p>",
        "id": 124661373,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916027
    },
    {
        "content": "<p>I have trouble getting out of tactic mode</p>",
        "id": 124661374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> not working <code> exact tactic failed, type mismatch, given expression has type </code></p>",
        "id": 124661415,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522916055
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def  big_not_zero (a : nat) (P : 1  &lt; a) : a ≠  0  :=\nλ Pp : a =  0, have olt0 : 1  &lt;  0, from eq.subst Pp P,\n(show  1  &lt;  0  → false, from dec_trivial) olt0\n</pre></div>",
        "id": 124661418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916073
    },
    {
        "content": "<p>works for me</p>",
        "id": 124661421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916077
    },
    {
        "content": "<p>nevermind, that works.</p>",
        "id": 124661422,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522916086
    },
    {
        "content": "<p>I'm surprised this is not working</p>\n<div class=\"codehilite\"><pre><span></span>def  big_not_zero (a : nat) (P : 1  &lt; a) : a ≠  0  :=\nλ Pp : a =  0, have olt0 : 1  &lt;  0, from eq.subst Pp P,\ndec_trivial olt0\n</pre></div>",
        "id": 124661436,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522916138
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def  big_not_zero (a : nat) (P : 1  &lt; a) : a ≠  0  :=\nbegin\nintro H,\nrw H at P,\nrevert P,\nexact dec_trivial\nend\n</pre></div>",
        "id": 124661438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916153
    },
    {
        "content": "<p>aah</p>",
        "id": 124661439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916159
    },
    {
        "content": "<p>tactic mode</p>",
        "id": 124661441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916160
    },
    {
        "content": "<p>makes it all look so easy</p>",
        "id": 124661481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916164
    },
    {
        "content": "<blockquote>\n<p>I'm surprised this is not working</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>def  big_not_zero (a : nat) (P : 1  &lt; a) : a ≠  0  :=\nλ Pp : a =  0, have olt0 : 1  &lt;  0, from eq.subst Pp P,\ndec_trivial olt0\n</pre></div>\n\n\n<p><code>dec_trivial</code> takes no argument</p>",
        "id": 124661486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Where did you learn tactic mode from? last few chapters of lean tutorial?</p>",
        "id": 124661492,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522916208
    },
    {
        "content": "<p>Tactic mode chapter</p>",
        "id": 124661494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916221
    },
    {
        "content": "<p>I have no idea why TPIL spends so long teaching people term mode</p>",
        "id": 124661499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916248
    },
    {
        "content": "<p>Fair enough, I didn't last that long :D</p>",
        "id": 124661500,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522916256
    },
    {
        "content": "<p>For a beginner tactic mode is the bomb</p>",
        "id": 124661501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916258
    },
    {
        "content": "<p>you can see what you're doing at all times</p>",
        "id": 124661504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916279
    },
    {
        "content": "<p>what the goal is, what the hypotheses are</p>",
        "id": 124661544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916285
    },
    {
        "content": "<p>and you can try simp on every line in case it does the job</p>",
        "id": 124661547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916300
    },
    {
        "content": "<p>I like term mode, at least I have an illusion I understand what's going on :)</p>",
        "id": 124661550,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522916306
    },
    {
        "content": "<p>you have far more powerful tools available to you in tactic mode</p>",
        "id": 124661553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916328
    },
    {
        "content": "<p>and then later on you can start figuring out what the tools are doing</p>",
        "id": 124661555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916339
    },
    {
        "content": "<p>and how they're doing it</p>",
        "id": 124661556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916341
    },
    {
        "content": "<p>You say \"I don't understand decidability or how to use it\"</p>",
        "id": 124661564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916366
    },
    {
        "content": "<p>I say \"dec_trivial invokes a great tactic\"</p>",
        "id": 124661565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916384
    },
    {
        "content": "<p>so your problems are solved in the short term</p>",
        "id": 124661605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916404
    },
    {
        "content": "<p>and then in the longer term you can start wondering about what it's doing and how it's doing it</p>",
        "id": 124661612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916419
    },
    {
        "content": "<p>My method is more robust than Kenny's</p>",
        "id": 124661619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916451
    },
    {
        "content": "<blockquote>\n<p>My method is more robust than Kenny's</p>\n</blockquote>\n<p>yeah right</p>",
        "id": 124661621,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916461
    },
    {
        "content": "<p>because his solution relies on you knowing that there's a theorem in the library</p>",
        "id": 124661626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916467
    },
    {
        "content": "<p>called <code> nat.not_lt_zero </code></p>",
        "id": 124661629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916482
    },
    {
        "content": "<p>implying one shouldn't know about theorems in the library</p>",
        "id": 124661632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916495
    },
    {
        "content": "<p>whereas mine just relies on you being aware that stuff like this is decidable and there's a tactic which does it</p>",
        "id": 124661634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916499
    },
    {
        "content": "<p>I am saying mine is more robust.</p>",
        "id": 124661636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916513
    },
    {
        "content": "<p>I am not saying anything about whether it's a good idea to know the library</p>",
        "id": 124661639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916521
    },
    {
        "content": "<p>What if tomorrow Adam wants to prove <code>2&lt;1-&gt;false</code>?</p>",
        "id": 124661680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916554
    },
    {
        "content": "<p>We all know it's decidable</p>",
        "id": 124661689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916587
    },
    {
        "content": "<p>and you and I know we can use no_confusion or all sorts of other tricks</p>",
        "id": 124661695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916606
    },
    {
        "content": "<p>but <code>dec_trivial</code> just does the job</p>",
        "id": 124661698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916614
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def big_not_zero&#39; (a : nat) (P : 1 &lt; a) : a ≠ 0 :=\nλ h, (show ¬1 &lt; 0, from dec_trivial) (h ▸ P)\n</pre></div>",
        "id": 124661700,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916623
    },
    {
        "content": "<p>satisfied?</p>",
        "id": 124661701,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916624
    },
    {
        "content": "<p>It's good advice Kevin, I'll learn the tactic mode.</p>",
        "id": 124661745,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522916653
    },
    {
        "content": "<p>alright</p>",
        "id": 124661748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916660
    },
    {
        "content": "<p>I think you should start with tactic mode and move on to term mode later.</p>",
        "id": 124661753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916675
    },
    {
        "content": "<p>It's what they do in Software Foundations</p>",
        "id": 124661754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916679
    },
    {
        "content": "<p>and it's what I'm doing in the book I'm writing on doing maths in Lean</p>",
        "id": 124661757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916689
    },
    {
        "content": "<p>but this is because my book is targetting mathematicians who have no idea what this lambda business is all about</p>",
        "id": 124661765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916720
    },
    {
        "content": "<p>because typically they will know no functional programming</p>",
        "id": 124661766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916728
    },
    {
        "content": "<p>let's replace matlab with haskell</p>",
        "id": 124661767,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916739
    },
    {
        "content": "<p>They do that next door</p>",
        "id": 124661768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916748
    },
    {
        "content": "<p>in the computing department</p>",
        "id": 124661770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916751
    },
    {
        "content": "<p>great</p>",
        "id": 124661771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916756
    },
    {
        "content": "<p>see you</p>",
        "id": 124661772,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916759
    },
    {
        "content": "<p>:P</p>",
        "id": 124661773,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916761
    },
    {
        "content": "<p>in the computing department?</p>",
        "id": 124661812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916765
    },
    {
        "content": "<p>right</p>",
        "id": 124661813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916769
    },
    {
        "content": "<p>Remember I'm on the curriculum review committee!</p>",
        "id": 124661814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916774
    },
    {
        "content": "<p>But I don't think I can push for Haskell for mathematicians</p>",
        "id": 124661815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916789
    },
    {
        "content": "<p>I am currently pushing for Python</p>",
        "id": 124661819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916800
    },
    {
        "content": "<p>i'm just kidding</p>",
        "id": 124661820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916802
    },
    {
        "content": "<p>but python is already there</p>",
        "id": 124661822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916807
    },
    {
        "content": "<p>but not maths in python</p>",
        "id": 124661823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916809
    },
    {
        "content": "<p>just general python</p>",
        "id": 124661825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916812
    },
    {
        "content": "<p>i.e. teach them classes etc</p>",
        "id": 124661828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916818
    },
    {
        "content": "<p>OOP python is the worst lol</p>",
        "id": 124661833,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916825
    },
    {
        "content": "<p>oh</p>",
        "id": 124661834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916829
    },
    {
        "content": "<p>use java for OOP</p>",
        "id": 124661835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916836
    },
    {
        "content": "<p>oh</p>",
        "id": 124661837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916840
    },
    {
        "content": "<p>oh</p>",
        "id": 124661840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916842
    },
    {
        "content": "<p>pee</p>",
        "id": 124661841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916844
    },
    {
        "content": "<p>Should I push for java?</p>",
        "id": 124661843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916854
    },
    {
        "content": "<p>Why would a mathematician want to learn java?</p>",
        "id": 124661848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916865
    },
    {
        "content": "<p>heh</p>",
        "id": 124661849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916865
    },
    {
        "content": "<p>I think we should just teach them tactic mode ;-)</p>",
        "id": 124661850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916874
    },
    {
        "content": "<p>push for lean</p>",
        "id": 124661851,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916879
    },
    {
        "content": "<p>problem solved</p>",
        "id": 124661890,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916883
    },
    {
        "content": "<p>I think that some of them might want to compute something at some point</p>",
        "id": 124661891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916900
    },
    {
        "content": "<p>maybe they do that in the applied maths parts or something</p>",
        "id": 124661892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916913
    },
    {
        "content": "<p>I have no idea what they do there</p>",
        "id": 124661893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916920
    },
    {
        "content": "<p>but I don't think it's theorems</p>",
        "id": 124661895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916923
    },
    {
        "content": "<p>Of couse</p>",
        "id": 124661899,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522916933
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 124661905,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522916959
    },
    {
        "content": "<p>I think they figure out what f(10) is if they know some differential equation satisfied by f, and also they know f(0)</p>",
        "id": 124661906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522916962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> wrong chat</p>",
        "id": 124661907,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522916969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'd say teaching OOP is a bad idea. OOP is kind of dying at the moment anyway -- very few new languages actually have rich OOP features (rust, golang), and even in python very little new stuff gets written using OOP.</p>\n<p>We've got a great new guy at Glasgow, who's teaching first year programming in python. He uses jupyter notebooks and shows applications of computation to multiple different problems (simulating fireworks, solving Travelling Salesman, etc.). I've done a guest lecture on Nim this year (<a href=\"https://github.com/picrin/nim_game/tree/master/lab_material/lab17_student_material\" target=\"_blank\" title=\"https://github.com/picrin/nim_game/tree/master/lab_material/lab17_student_material\">https://github.com/picrin/nim_game/tree/master/lab_material/lab17_student_material</a>).</p>\n<p>I think that's a more productive use of student's time than teaching them OOP.</p>",
        "id": 124662069,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522917281
    },
    {
        "content": "<p>I insisted to not use jupyter</p>",
        "id": 124662070,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522917301
    },
    {
        "content": "<p>even in the exam :P</p>",
        "id": 124662074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522917304
    },
    {
        "content": "<p><code>python -m pip install numpy</code></p>",
        "id": 124662077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522917319
    },
    {
        "content": "<p>So I am in the maths department at Imperial College London and we're having a top-to-bottom curriculum review, and amongst the things that can change is that we can completely rethink what we teach to the undergraduates in terms of programming.</p>",
        "id": 124662120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522917383
    },
    {
        "content": "<p>So I am definitely genuinely interested in hearing people's opinions.</p>",
        "id": 124662121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522917394
    },
    {
        "content": "<p>However we are definitely focussed on what mathematicians should need to know</p>",
        "id": 124662123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522917416
    },
    {
        "content": "<p>in the sense of \"what people who employ mathematicians want them to know\"</p>",
        "id": 124662131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522917428
    },
    {
        "content": "<p>You'd obviously want to modify the content a little bit to make it more mathsy,  but I think coding up an optimal algorithm to play Nim is definitely a worthy thing to teach first year mathematicians.</p>",
        "id": 124662133,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522917430
    },
    {
        "content": "<p>Your link doesn't work btw</p>",
        "id": 124662136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522917443
    },
    {
        "content": "<p>Ah, it's hidden from students cause it has solutions :D. one moment</p>",
        "id": 124662189,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522917548
    },
    {
        "content": "<p>don't worry</p>",
        "id": 124662191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522917562
    },
    {
        "content": "<p>I don't want to disrupt</p>",
        "id": 124662192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522917567
    },
    {
        "content": "<p>That's the task statement: <a href=\"/user_uploads/3121/US_PO9-qzNBOQE1P_W4cNQ1C/lab17-3.html\" target=\"_blank\" title=\"lab17-3.html\">lab17-3.html</a> </p>\n<p>There are ~7 specific python template files, which walk them through a solution, and they have to implement each one.</p>\n<p>Each file gets automatically checked using something called \"CMS\", I believe stands  for \"Contest Management System\". Checking uses a regular test suite.</p>",
        "id": 124662360,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522917891
    },
    {
        "content": "<p>Happy to share everything if you'd like, but at the moment I'm tethering and the internet is a bit slow.</p>",
        "id": 124662415,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522917966
    },
    {
        "content": "<p>honestly don't worry</p>",
        "id": 124662419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918012
    },
    {
        "content": "<p>I can imagine what is there</p>",
        "id": 124662424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918023
    },
    {
        "content": "<p>I always imagine stuff like nim as being in the <code>recreational mathematics</code> box</p>",
        "id": 124662429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918074
    },
    {
        "content": "<p>i.e. stuff they do outside of regular maths</p>",
        "id": 124662430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918080
    },
    {
        "content": "<p>but I am not 100% sure whether I have this in the right box</p>",
        "id": 124662469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918092
    },
    {
        "content": "<p>python has <code>^</code> -- do you let them use this or force them to code their own?</p>",
        "id": 124662479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918158
    },
    {
        "content": "<p>I let them use that after they've learned how it works.</p>",
        "id": 124662645,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522918458
    },
    {
        "content": "<p>Just the opposite of what I did with my kids</p>",
        "id": 124662704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918569
    },
    {
        "content": "<p>I asked them how to compute powers in python and let them be completely confused for 15 minutes</p>",
        "id": 124662708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918588
    },
    {
        "content": "<p>it's generally a problem with teaching python, it has everything and students sometimes just solve things with one-liners, without ever understanding it.</p>",
        "id": 124662709,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522918606
    },
    {
        "content": "<p>just like tactic mode ;-)</p>",
        "id": 124662713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918618
    },
    {
        "content": "<p>I don't normally use <code>numpy</code> and <code>sympy</code> :P</p>",
        "id": 124662721,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522918637
    },
    {
        "content": "<p>Kenny, what do we teach the 1st years?</p>",
        "id": 124662725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918658
    },
    {
        "content": "<p>Currently</p>",
        "id": 124662726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918663
    },
    {
        "content": "<p>Do they import a lot of libraries?</p>",
        "id": 124662729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918669
    },
    {
        "content": "<p><code>scipy</code>?</p>",
        "id": 124662731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918677
    },
    {
        "content": "<p><code>numpy</code> and <code>sympy</code></p>",
        "id": 124662770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522918694
    },
    {
        "content": "<p>I thought you're the head of curiculum reform</p>",
        "id": 124662771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522918701
    },
    {
        "content": "<p>curriculum</p>",
        "id": 124662775,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522918710
    },
    {
        "content": "<p>words</p>",
        "id": 124662776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522918712
    },
    {
        "content": "<p>I'm just on the committee</p>",
        "id": 124662841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918821
    },
    {
        "content": "<p>my job is to decide what to do in the future</p>",
        "id": 124662843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918839
    },
    {
        "content": "<p>well you're the acting head of the department</p>",
        "id": 124662844,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522918844
    },
    {
        "content": "<p>I don't want to pollute my understanding by knowing what we currently do</p>",
        "id": 124662846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918859
    },
    {
        "content": "<p>Maybe I should go and fill in forms :-/</p>",
        "id": 124662857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918891
    },
    {
        "content": "<p>how many goddam forms do you have</p>",
        "id": 124662900,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522918944
    },
    {
        "content": "<p>they come in at a rate faster than I can fill them in</p>",
        "id": 124662901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522918959
    },
    {
        "content": "<p>what are those forms</p>",
        "id": 124662903,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522918966
    },
    {
        "content": "<p>I had to do a risk assessment form for Ana because she's pregnant. 6 pages of questions such as how much radioactive material there was in the department etc. Life is great when you're a manager.</p>",
        "id": 124662912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522919034
    },
    {
        "content": "<p>OK I'm going to fill in more right now</p>",
        "id": 124662949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522919043
    },
    {
        "content": "<p>life is always great</p>",
        "id": 124662952,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522919047
    },
    {
        "content": "<p>I think between python, R, and Matlab, that's quite enough for a maths student... in a way I'm a little sad you can't get by without just pen, paper, and coffee pot</p>",
        "id": 124664028,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522921419
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'd say teaching OOP is a bad idea. OOP is kind of dying at the moment anyway -- very few new languages actually have rich OOP features (rust, golang), and even in python very little new stuff gets written using OOP.</p>\n<p>We've got a great new guy at Glasgow, who's teaching first year programming in python. He uses jupyter notebooks and shows applications of computation to multiple different problems (simulating fireworks, solving Travelling Salesman, etc.). I've done a guest lecture on Nim this year (<a href=\"https://github.com/picrin/nim_game/tree/master/lab_material/lab17_student_material\" target=\"_blank\" title=\"https://github.com/picrin/nim_game/tree/master/lab_material/lab17_student_material\">https://github.com/picrin/nim_game/tree/master/lab_material/lab17_student_material</a>).</p>\n<p>I think that's a more productive use of student's time than teaching them OOP.</p>\n</blockquote>\n<p>What is this crazyness? Where did you see OOP dying?</p>",
        "id": 124686378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522957354
    },
    {
        "content": "<p>I guess  this is what Haskell people say?</p>",
        "id": 124686392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522957379
    },
    {
        "content": "<p>But what about the real world?</p>",
        "id": 124686402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522957391
    },
    {
        "content": "<p>OOP is definitely not dying in the industry.</p>",
        "id": 124686651,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1522957772
    },
    {
        "content": "<p>Yes, this very much sounds like functional programming academic fantasy</p>",
        "id": 124686878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522958092
    },
    {
        "content": "<p>To say that OOP is dying is certainly hyperbole, but none of the languages mentioned are particularly functional...</p>",
        "id": 124686972,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522958195
    },
    {
        "content": "<p>Go doesn't even have generics, speaking of modern design...</p>",
        "id": 124687127,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1522958457
    },
    {
        "content": "<p>Go certainly looks awful</p>",
        "id": 124687187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522958526
    },
    {
        "content": "<p>I never saw Rust but the wikipedia page features quite a occurrences of Haskell and ML</p>",
        "id": 124687309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522958689
    },
    {
        "content": "<p>Let's discuss something more productive: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> am I correct in thinking that the nightly download link on  <a href=\"https://leanprover.github.io/download/\" target=\"_blank\" title=\"https://leanprover.github.io/download/\">https://leanprover.github.io/download/</a> is no longer relevant and should not be used anymore?</p>",
        "id": 124687600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522959046
    },
    {
        "content": "<blockquote>\n<p>Let's discuss something more productive: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> am I correct in thinking that the nightly download link on  <a href=\"https://leanprover.github.io/download/\" target=\"_blank\" title=\"https://leanprover.github.io/download/\">https://leanprover.github.io/download/</a> is no longer relevant and should not be used anymore?</p>\n</blockquote>\n<p>Is there a new download link. It took me ages to update lean today, because MSYS didn't know where my c compiler was, and neither did I.</p>",
        "id": 124687691,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522959191
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover/lean-nightly/releases\">https://github.com/leanprover/lean-nightly/releases</a></p>",
        "id": 124687706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522959220
    },
    {
        "content": "<p>You need to compare with <a href=\"https://github.com/leanprover/mathlib/blob/master/leanpkg.toml#L4\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/leanpkg.toml#L4\">https://github.com/leanprover/mathlib/blob/master/leanpkg.toml#L4</a></p>",
        "id": 124687752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522959249
    },
    {
        "content": "<p>(my understanding is it's not yet more automatic, but this is already great progress)</p>",
        "id": 124687757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522959272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Correct. We're still waiting on AppVeyor enabling cron builds for us before we can make it official</p>",
        "id": 124687777,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522959357
    },
    {
        "content": "<p>Thanks</p>",
        "id": 124687820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522959375
    }
]