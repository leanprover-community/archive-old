[
    {
        "content": "<p>If Lean 4 is a programming language how can I understand the how and why of it's ability to create a DSL? The thought intrigues me but I have no idea what it is or where to go.</p>",
        "id": 260329244,
        "sender_full_name": "Andre",
        "timestamp": 1636057447
    },
    {
        "content": "<p>Are you aware of what a DSL is?</p>",
        "id": 260332993,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1636059189
    },
    {
        "content": "<p>Sort of. I know HTML is a type of DSL. Trying to understand it and organize it is currently the problem.</p>",
        "id": 260333420,
        "sender_full_name": "Andre",
        "timestamp": 1636059386
    },
    {
        "content": "<p>What's leading you to ask the question (what's your goal in learning about them)? HTML is a DSL in the \"true\" sense of what DSL means, but not in what people normally mean when they talk about DSLs conversationally I think, especially not in the context of a language being able to make DSLs.</p>",
        "id": 260337231,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636061231
    },
    {
        "content": "<p>A DSL is well, what it stands for -- a Domain Specific Language -- so a kind of language invented suitable for a specific (sub)-domain -- HTML for <em>marking up</em> hypertext (in short for laying out web pages more or less)</p>",
        "id": 260337323,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636061281
    },
    {
        "content": "<p>But usually what people mean when they talk about a language, say Lean 4, being suitable for DSLs is whether you can use the constructs in the language (often things like parentheses-less function calling, macros, and little required syntax or boilerplate) to create other languages \"embedded\" inside valid lean 4 code</p>",
        "id": 260337452,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636061337
    },
    {
        "content": "<p>I suppose I'm curious if I can write my own DSL. I've come across Enso which is a visual interactive way to program. </p>\n<p><a href=\"https://github.com/enso-org/enso\">https://github.com/enso-org/enso</a></p>\n<p>My mind is kinda blown away that I can visually reason about the program and it can check if it's logically sound. I've then found out about:</p>\n<p><a href=\"https://enso-lang.org/\">https://enso-lang.org/</a></p>\n<p>And now I'm trying to understand how this works because I want to create designs that are programmable.</p>",
        "id": 260339163,
        "sender_full_name": "Andre",
        "timestamp": 1636062344
    },
    {
        "content": "<p>embedded DSLs in lean remain textual, though. One thing I did a while back, was use mini-parser to write things that closely resembled JSON objects.</p>\n<p>This was done, so that I can test a code generation for JSON, so the test looked a lot like the kind of string it was meant to parse.</p>",
        "id": 260376966,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1636100932
    },
    {
        "content": "<p>I'm curious to know how you did that (assuming Lean 3); did you need <code>user_notation</code>?</p>",
        "id": 260377545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636101423
    },
    {
        "content": "<p>I'm pretty sure Daniel is talking about Lean 4.</p>",
        "id": 260381505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636104185
    },
    {
        "content": "<p>Correct: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/toFromJson.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/toFromJson.lean</a></p>",
        "id": 260383225,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636105285
    },
    {
        "content": "<p>It's more of an elaborator than a parser. The parsing is done by Lean 4.</p>",
        "id": 260383339,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636105338
    }
]