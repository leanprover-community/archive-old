[
    {
        "content": "<p>Can this be used to prove false?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"n\">json.object</span> <span class=\"o\">[]</span>  <span class=\"c1\">-- null</span>\n<span class=\"k\">#eval</span> <span class=\"n\">json.object</span> <span class=\"o\">[]</span>  <span class=\"c1\">-- json.object list.nil</span>\n</code></pre></div>",
        "id": 226969950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613744864
    },
    {
        "content": "<p>Nevermind, this is just a bug in <code>has_repr</code></p>",
        "id": 226971351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613745396
    },
    {
        "content": "<p>I don't think <code>#eval</code> can be used to prove anything.</p>",
        "id": 226978322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613748322
    },
    {
        "content": "<p>Wasn't there a lean4 bug where the vm implementation of a nat operation diverged from the non vm-one, and it caused a proof of false?</p>",
        "id": 226983088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613750134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.23eval.20and.20.23reduce.20give.20contradictory.20results/near/226983088\">said</a>:</p>\n<blockquote>\n<p>Wasn't there a lean4 bug where the vm implementation of a nat operation diverged from the non vm-one, and it caused a proof of false?</p>\n</blockquote>\n<p><a href=\"#narrow/stream/270676-lean4/topic/Contradiction.3F/near/224625352\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Contradiction.3F/near/224625352</a></p>\n<p>You can (or eventually you'll be able to) opt out of the native nat/bool reduction thing. I'm not sure if the people in the thread figured out the trust-level invocation, but third party checkers presumably would have caught this since they don't implement that feature. It would be neat if big libraries set up their CI so that external checkers take a look once in a while.</p>",
        "id": 226991985,
        "sender_full_name": "Chris B",
        "timestamp": 1613753216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.23eval.20and.20.23reduce.20give.20contradictory.20results/near/226983088\">said</a>:</p>\n<blockquote>\n<p>Wasn't there a lean4 bug where the vm implementation of a nat operation diverged from the non vm-one, and it caused a proof of false?</p>\n</blockquote>\n<p>Efficient nat reduction of closed terms is part of the kernel in Lean 4, so there was a mismatch between <code>rfl</code>and whatever the Lean definition of <code>mod</code> over <code>Nat</code> is. With this, both GMP and the glue code between Lean and GMP become part of the trusted codebase, and the bug in question occured in the edge case handling in the glue code.</p>",
        "id": 226992621,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1613753517
    },
    {
        "content": "<p>I guess in lean3 it's not part of the kernel, so couldn't cause a problem?</p>",
        "id": 226993100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613753724
    },
    {
        "content": "<p>Yeah, those native reduction functions aren't in the lean3 kernel.</p>",
        "id": 226993603,
        "sender_full_name": "Chris B",
        "timestamp": 1613753895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113488-general/topic/.23eval.20and.20.23reduce.20give.20contradictory.20results/near/226991985\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.23eval.20and.20.23reduce.20give.20contradictory.20results/near/226983088\">said</a>:</p>\n<blockquote>\n<p>Wasn't there a lean4 bug where the vm implementation of a nat operation diverged from the non vm-one, and it caused a proof of false?</p>\n</blockquote>\n<p><a href=\"#narrow/stream/270676-lean4/topic/Contradiction.3F/near/224625352\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Contradiction.3F/near/224625352</a></p>\n<p>You can (or eventually you'll be able to) opt out of the native nat/bool reduction thing. I'm not sure if the people in the thread figured out the trust-level invocation, but third party checkers presumably would have caught this since they don't implement that feature. It would be neat if big libraries set up their CI so that external checkers take a look once in a while.</p>\n</blockquote>\n<p>If the code in question relies on the reduction being fast, won't external checkers just get stuck reducing?</p>",
        "id": 226993760,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1613753978
    },
    {
        "content": "<p>(For the record: I think that this feature is very useful for verifying Lean 4 programs, where you already trust the unsafe implementations since that is what you will run your code with :))</p>",
        "id": 226994304,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1613754159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> </p>\n<p>The bad proof found in the other thread was <code>1 != 0</code> so that one's safe, but yeah if you're using really large numbers you can choke verifiers using a naive reduction strategy. I haven't looked at the numbers in a while, but IIRC there were some large-ish closed terms in mathlib when I was doing more testing and they work ok.</p>",
        "id": 226995483,
        "sender_full_name": "Chris B",
        "timestamp": 1613754597
    },
    {
        "content": "<p>IIRC these are numerical proofs, but I don't know what they look like inside. They take a few hundred milliseconds in the rust verifier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">346</span> <span class=\"o\">:</span> <span class=\"n\">real.pi_lt_3141593</span>\n<span class=\"mi\">233</span> <span class=\"o\">:</span> <span class=\"n\">real.pi_gt_3141592</span>\n<span class=\"mi\">213</span> <span class=\"o\">:</span> <span class=\"n\">real.pi_lt_31416</span>\n</code></pre></div>",
        "id": 226996602,
        "sender_full_name": "Chris B",
        "timestamp": 1613755028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113488-general/topic/.23eval.20and.20.23reduce.20give.20contradictory.20results/near/226991985\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if the people in the thread figured out the trust-level invocation, </p>\n</blockquote>\n<p>For the record, I'm pretty sure that <code>-t 0</code> is the correct way to set trust level in lean 4 (I checked the source), it was just that the bug was also present at trust 0 in that case because it was in the kernel code</p>",
        "id": 227051614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613781625
    },
    {
        "content": "<p>BTW here's another <code>#eval</code>/<code>#reduce</code> mismatch that has been unresolved for many years:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">is_max</span> <span class=\"o\">:</span> <span class=\"n\">level</span> <span class=\"bp\">â†’</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">level.max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">is_max</span> <span class=\"o\">(</span><span class=\"n\">level.max</span> <span class=\"n\">level.zero</span> <span class=\"n\">level.zero</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n<span class=\"k\">#eval</span> <span class=\"n\">is_max</span> <span class=\"o\">(</span><span class=\"n\">level.max</span> <span class=\"n\">level.zero</span> <span class=\"n\">level.zero</span><span class=\"o\">)</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 227052320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613782180
    },
    {
        "content": "<p>I think part of the rationale here is that since these are <code>meta inductive</code>s they don't promise correctness, but I think this could be handled better</p>",
        "id": 227052400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613782225
    }
]