[
    {
        "content": "<p>I want to make finsupp dependent, and then build the current finsupp as a special case. Is this a good idea?</p>",
        "id": 133297941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536049022
    },
    {
        "content": "<p>I thought to suggest this as part of the direct sum PR :-)</p>",
        "id": 133298356,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536049638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I'm not sure what to do with this. finsupp is widely used. should I make a separate file?</p>",
        "id": 133304404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536059054
    },
    {
        "content": "<p>Yes. Start with a separate file where you generalize from direct sum to <code>dfinsupp</code>, i.e. from <code>[Π i, module R (β i)]</code> to <code>[Π i, has_zero (β i)]</code>.</p>",
        "id": 133304601,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536059378
    },
    {
        "content": "<p>problem. the simp lemmas now require higher order unification, rendering them useless</p>",
        "id": 133329943,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536087894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> should I make finsupp dependent on dfinsupp?</p>",
        "id": 133375942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536154631
    },
    {
        "content": "<p>Yes, I think so. But let's first add <code>dfinsupp</code> and then see.</p>",
        "id": 133376017,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536154705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  there's one thing though. now for finsupp from A to B, we need decidable equality on B</p>",
        "id": 133376899,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536155563
    },
    {
        "content": "<p>I suspect that if we define finsupp differently, then we won't need decidbale equlaity on B</p>",
        "id": 133376909,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536155579
    },
    {
        "content": "<p>should I work on that?</p>",
        "id": 133376917,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536155584
    },
    {
        "content": "<p>I guess this is your quotient construction, the one you use in your direct sums construction? If you want to use it, that's fine for me.</p>",
        "id": 133377009,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536155646
    },
    {
        "content": "<p>yes, ok, thanks</p>",
        "id": 133377042,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536155677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I'm in a dilemma: I can either define dfinsupp.sum with the same arguments, but it would require decidable equality on the codomains; or I can define dfinsupp.sum without decidable equality on the codomains, but it would require me to provide an extra argument that the input function maps 0 to 0.</p>",
        "id": 133458668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536256823
    },
    {
        "content": "<p>I would go for the latter.</p>",
        "id": 133459061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536257190
    },
    {
        "content": "<p>Alternatively, provide both...</p>",
        "id": 133459113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536257241
    },
    {
        "content": "<p>What's your motivation for defining dfinsupp? Is there some application you have in mind?</p>",
        "id": 133459118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536257251
    },
    {
        "content": "<p>Constructive direct sums, I think</p>",
        "id": 133459150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536257280
    },
    {
        "content": "<p>oh that would make sense, Kenny was talking to me about direct sums recently.</p>",
        "id": 133459219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536257312
    },
    {
        "content": "<p>Since the types are usually fixed and it's super annoying to always attach the <code>f 0 = 0</code> proof: assume decidability of the codomain for <code>sum</code>.</p>",
        "id": 133463204,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536261576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> sometimes we don't actually need decidable equality in general, we just need to determine if something is zero. What should I do in that case?</p>",
        "id": 133493682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303403
    },
    {
        "content": "<p>you can say that <code>(x = 0)</code> and <code>(0 = x)</code> are decidable.</p>",
        "id": 133493759,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536303511
    },
    {
        "content": "<p>Should I make a new typeclass for that? decidable_zero</p>",
        "id": 133493777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303548
    },
    {
        "content": "<p><code>decidable_pred (eq 0)</code> works</p>",
        "id": 133493786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536303578
    },
    {
        "content": "<p>if I prove that <code>decidable_eq \\to decidable_pred (eq 0)</code>, will Lean be able to use it?</p>",
        "id": 133493839,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303621
    },
    {
        "content": "<p>If you look at <code>decidable_eq</code>, <code>decidable_pred</code> and <code>decidable_rel</code>, they are simply definitions on top of <code>decidable</code>. You only need to do the same for <code>0</code> if it's pervasive enough</p>",
        "id": 133493844,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536303641
    },
    {
        "content": "<p>well, <code>option</code> has decidable \"none\"</p>",
        "id": 133493849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303661
    },
    {
        "content": "<p><code>with_zero</code> has decidable <code>zero</code></p>",
        "id": 133493859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303673
    },
    {
        "content": "<blockquote>\n<p>if I prove that <code>decidable_eq \\to decidable_pred (eq 0)</code>, will Lean be able to use it?</p>\n</blockquote>\n<p>I think so</p>",
        "id": 133493863,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536303691
    },
    {
        "content": "<p>oh I don't even need to prove it!</p>",
        "id": 133493928,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303793
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 133493931,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303801
    },
    {
        "content": "<p>Lean is smart</p>",
        "id": 133493932,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303803
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">))]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 133493936,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303841
    },
    {
        "content": "<p>I can't believe this, something must be wrong</p>",
        "id": 133493974,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303845
    },
    {
        "content": "<p><code>eq 0</code> is <code>\\lam x, eq 0 x</code> which is <code>\\lam x, 0 = x</code></p>",
        "id": 133493983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536303867
    },
    {
        "content": "<p>the other one is <code>(= 0)</code> which is <code>\\lam x, x = 0</code></p>",
        "id": 133493985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536303879
    },
    {
        "content": "<p>yeah the second one is wrong</p>",
        "id": 133493992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303920
    },
    {
        "content": "<p>Lean interpreted <code>0</code> as natural</p>",
        "id": 133493996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536303927
    },
    {
        "content": "<p>So how does Lean prove the instances for you?</p>",
        "id": 133494118,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536304102
    },
    {
        "content": "<p>I proved the second one now</p>",
        "id": 133494220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536304292
    },
    {
        "content": "<p>the first one is just solve by elim</p>",
        "id": 133494222,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536304303
    },
    {
        "content": "<p>Why does that work?</p>",
        "id": 133494272,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536304353
    },
    {
        "content": "<p>Oh, ok, it's proving less than I thought</p>",
        "id": 133494274,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536304379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> commited to the <a href=\"https://github.com/leanprover/mathlib/pull/311\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/311\">PR</a></p>",
        "id": 133585305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536447856
    },
    {
        "content": "<p>What is preventing this <a href=\"https://github.com/leanprover/mathlib/pull/311\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/311\">22-day-old pull request</a> from being merged?</p>",
        "id": 135325125,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538858826
    },
    {
        "content": "<p>People being busy?</p>",
        "id": 135325331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538859125
    },
    {
        "content": "<p>You'll understand, one day :-)</p>",
        "id": 135325334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538859132
    },
    {
        "content": "<p>Are there any problems with my PR? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 135325996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538860451
    },
    {
        "content": "<p>It conflicts with the module refactor, so don't expect this to be merged until after that</p>",
        "id": 135329645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538868479
    },
    {
        "content": "<p>But after the module refactor Kenny will be too busy working on algebraic closure to be able to fix up this PR.</p>",
        "id": 135329897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538868904
    },
    {
        "content": "<p>ok no problem</p>",
        "id": 135343213,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538899067
    }
]