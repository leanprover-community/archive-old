[
    {
        "content": "<p>Can anyone help me prove this lemma? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">giry_monad</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inl_measurable_bind_ret</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">bind</span> <span class=\"n\">ν</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measurable_of_measurable_coe</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I have proven that <code>λ y, dirac (x,y)</code> is measurable for all <code>x</code> and also have that <code>bind</code> followed by <code>dirac</code> is <code>map</code>. But at this point, I am stuck...any suggestions?</p>",
        "id": 169063487,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561572128
    },
    {
        "content": "<p>I had a go. No idea if the sorry if even true or not, but I look like I made progress.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">inl_measurable_bind_ret&#39;</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">bind</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">measurable_prod_mk</span> <span class=\"n\">measurable_const</span> <span class=\"n\">measurable_id</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"o\">],</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">map_map</span> <span class=\"n\">measurable_dirac</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">measurable_join</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">measurable_map</span> <span class=\"bp\">_</span> <span class=\"n\">measurable_dirac</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169071696,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561576958
    },
    {
        "content": "<p>this is progress, but I'm not able to fill in the sorry either.</p>",
        "id": 169075961,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561580102
    },
    {
        "content": "<p>Is it true?</p>",
        "id": 169076041,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561580162
    },
    {
        "content": "<p>i'm about 70% sure</p>",
        "id": 169077299,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561581140
    },
    {
        "content": "<p>Dumb question:  as far as whether or not this is true, what is the implicit sigma algebra on the codomain of the map you are trying to prove is measurable?</p>",
        "id": 169082625,
        "sender_full_name": "Jason Rute",
        "timestamp": 1561584959
    },
    {
        "content": "<p>For Chris' <code>sorry</code>, the codomain is <code>ennreal</code>. So it is the Borel sigma algebra</p>",
        "id": 169083059,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561585311
    },
    {
        "content": "<p>after a long while I've reduced the statement to proving this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n<span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span>\n<span class=\"err\">⊢</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">ν</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">})</span>\n</pre></div>",
        "id": 169083921,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561585927
    },
    {
        "content": "<p>Yeah this is where I am stuck as well. :(</p>",
        "id": 169084199,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561586221
    },
    {
        "content": "<p>is this even true</p>",
        "id": 169084253,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561586279
    },
    {
        "content": "<p>this is demonstrably false if one uses Lebesgue measurable sets for R and R^2</p>",
        "id": 169084343,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561586333
    },
    {
        "content": "<p>but the Lebesgue sigma-algebra for R^2 isn't the product of the Lebesgue sigma algebra for R right</p>",
        "id": 169084361,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561586352
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">β</span>\n<span class=\"err\">⊢</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">ν</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169086562,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561588281
    },
    {
        "content": "<p>this looks neater</p>",
        "id": 169086565,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561588284
    },
    {
        "content": "<p>surely all neat propositions are true</p>",
        "id": 169086576,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561588298
    },
    {
        "content": "<p>this looks like some sort of fubini theorem</p>",
        "id": 169087542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561589150
    },
    {
        "content": "<p>let's extract a proof from Billingsley Ch.18</p>",
        "id": 169088060,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561589674
    },
    {
        "content": "<p>which assumes sigma-finiteness of alpha and beta</p>",
        "id": 169088795,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561590326
    },
    {
        "content": "<p>Yep, this only works for sigma-finite measures. In Isabelle, we first prove that the product measure is measurable: <code>(λx. f x ⨂⇩M g x) ∈ measurable M (subprob_algebra (N ⨂⇩M L))</code> <a href=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Probability/Giry_Monad.html\" target=\"_blank\" title=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Probability/Giry_Monad.html\">http://isabelle.in.tum.de/dist/library/HOL/HOL-Probability/Giry_Monad.html</a> (lemma measurable_pair_measure). The proof can be generalized from subprobabilities to sigma-finite measures, it is even enough if one factor of the product is sigma-finite.</p>",
        "id": 169088798,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1561590335
    },
    {
        "content": "<p>does every measurable space have a sigma-finite measure?</p>",
        "id": 169088861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561590372
    },
    {
        "content": "<p>and is there a counter-example to the claim <code>measurable (λ (x : α), map (prod.mk x) ν)</code>?</p>",
        "id": 169088869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561590391
    },
    {
        "content": "<p>it should boil down to the fact that <code>P s := measurable (fun x. (f x &lt;*&gt; g x) s)</code> (where <code>&lt;*&gt;</code> is the product of measures)  is closed under complement, i.e. <code>P s --&gt; P (set.univ - s)</code>. Now, when the product is finite it translates to <code>measurable (fun x. (f x) univ * (g x) univ - (f x &lt;*&gt; g x) s)</code></p>",
        "id": 169089269,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1561590838
    },
    {
        "content": "<p>We can cover a sigma-finite measure with finite measures, so this works out if both sides of the product are sigma-finite.</p>",
        "id": 169089369,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1561590928
    },
    {
        "content": "<p>I thought there was a trick where it is enough that one side is sigma-finite, but I don't remember it.</p>",
        "id": 169089427,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1561590972
    },
    {
        "content": "<p>every measurable space has a trivial sigma-finite measure (the null-measure). but we don't talk about measurable spaces, but measurable functions <code>A -&gt; measure B</code> (I guess one can call them Kleisli arrows in the Giry Monad?!)</p>",
        "id": 169089617,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1561591190
    },
    {
        "content": "<p>but in the claim above, alpha doesn't have a measure yet</p>",
        "id": 169089681,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591206
    },
    {
        "content": "<p>But there is <code>ν</code></p>",
        "id": 169089723,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1561591269
    },
    {
        "content": "<p>but that's just a measure on beta</p>",
        "id": 169089736,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591302
    },
    {
        "content": "<p>if every measurable space has a sigma-finite measure then you can use the trick you forgot</p>",
        "id": 169089782,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591323
    },
    {
        "content": "<p>by cooking up a sigma-finite measure on alpha, then let that \"one side\" be alpha</p>",
        "id": 169089793,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591341
    },
    {
        "content": "<p>but since every set has measure zero I dont see how your trick works</p>",
        "id": 169089812,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591374
    },
    {
        "content": "<p>maybe you need a non-zero measure</p>",
        "id": 169089815,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591378
    },
    {
        "content": "<p>how is this not trivial</p>",
        "id": 169089965,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591556
    },
    {
        "content": "<p>Maybe a finite counterexample works: Let's assume in <code>A</code> is everything  measurable (top) and B is bottom (only univ and empty). And both are isomorphic to bool. Now <code>ν</code> maps each non-empty map to infinity. I'm too tired to figure out what the measurable set is, but I something like this might result in a counter example.</p>",
        "id": 169090131,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1561591723
    },
    {
        "content": "<p>well there are only 4 measurable sets</p>",
        "id": 169090268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591889
    },
    {
        "content": "<p>and I'm sure none of them works</p>",
        "id": 169090274,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591901
    },
    {
        "content": "<p>since in A everything is measurable</p>",
        "id": 169090281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591916
    },
    {
        "content": "<p>every function from A is automatically measurable</p>",
        "id": 169090322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591925
    },
    {
        "content": "<p>(and if you swap A and B, still there are only 4 measurable sets and none of them works)</p>",
        "id": 169090331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591952
    },
    {
        "content": "<p>also I'm quite sure there is no finite counter-example, since you can decompose each finite sigma algebra into a disjoint union of tops</p>",
        "id": 169090345,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561591975
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n<span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ennreal</span><span class=\"o\">,</span>\n<span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ennreal</span> <span class=\"bp\">|</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n<span class=\"err\">⊢</span> <span class=\"n\">is_measurable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">ν</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 169090643,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561592286
    },
    {
        "content": "<p>(clearing my sandbox) here's my current status:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">giry_monad</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bind</span> <span class=\"n\">ν</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ν</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)),</span>\n<span class=\"k\">from</span> <span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">measurable_prod_mk</span> <span class=\"n\">measurable_const</span> <span class=\"n\">measurable_id</span><span class=\"o\">)</span> <span class=\"n\">measurable_dirac</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_preimage_eq</span><span class=\"o\">,</span> <span class=\"n\">dirac_apply</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">supr_eq_if</span><span class=\"o\">,</span> <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">bot_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">iff_of_false</span> <span class=\"n\">one_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">not_not_intro</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_preimage_eq</span><span class=\"o\">,</span> <span class=\"n\">dirac_apply</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">supr_eq_if</span><span class=\"o\">,</span> <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">bot_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">iff_of_false</span> <span class=\"n\">zero_ne_one</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ennreal</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">hr0</span> <span class=\"n\">hr1</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_preimage_eq</span><span class=\"o\">,</span> <span class=\"n\">dirac_apply</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">supr_eq_if</span><span class=\"o\">,</span> <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">bot_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_empty_eq</span><span class=\"o\">,</span> <span class=\"n\">iff_false</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hr1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hr0</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"o\">{</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">},</span>\n<span class=\"k\">from</span> <span class=\"n\">measurable_prod_mk</span> <span class=\"n\">measurable_const</span> <span class=\"n\">measurable_id</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">sf</span> <span class=\"o\">:</span> <span class=\"n\">simple_func</span> <span class=\"n\">β</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">measurable_sn</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">hr0</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">hr0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_measurable</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">h5</span> <span class=\"o\">},</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hr1</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">hr1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h5</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h4</span> <span class=\"n\">r</span> <span class=\"n\">hr0</span> <span class=\"n\">hr1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">is_measurable</span><span class=\"bp\">.</span><span class=\"n\">empty</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">finite</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_insert</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_insert</span> <span class=\"bp\">_</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_empty</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ennreal</span><span class=\"o\">))</span> <span class=\"err\">$</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">r</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dirac_apply</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">supr_eq_if</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"bp\">_</span><span class=\"o\">)]</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">sf</span> <span class=\"bp\">=</span> <span class=\"n\">simple_func</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"o\">(</span><span class=\"n\">simple_func</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">β</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">},</span>\n<span class=\"k\">from</span> <span class=\"n\">simple_func</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">simple_func</span><span class=\"bp\">.</span><span class=\"n\">restrict_apply</span> <span class=\"bp\">_</span> <span class=\"n\">h5</span><span class=\"o\">,</span> <span class=\"n\">simple_func</span><span class=\"bp\">.</span><span class=\"n\">const_apply</span><span class=\"o\">,</span> <span class=\"n\">dirac_apply</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">supr_eq_if</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">bot_eq_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bind_apply</span> <span class=\"n\">hs</span> <span class=\"n\">h1</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">map_apply</span> <span class=\"o\">(</span><span class=\"n\">measurable_prod_mk</span> <span class=\"n\">measurable_const</span> <span class=\"n\">measurable_id</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">integral</span> <span class=\"n\">ν</span> <span class=\"n\">sf</span> <span class=\"bp\">=</span> <span class=\"n\">ν</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral</span><span class=\"o\">,</span> <span class=\"n\">simple_func</span><span class=\"bp\">.</span><span class=\"n\">lintegral_eq_integral</span><span class=\"o\">,</span> <span class=\"n\">h6</span><span class=\"o\">,</span> <span class=\"n\">simple_func</span><span class=\"bp\">.</span><span class=\"n\">restrict_const_integral</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h5</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- set_option pp.implicit true</span>\n<span class=\"c1\">-- set_option pp.notation false</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inl_measurable_bind_ret</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">bind</span> <span class=\"n\">ν</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dirac</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- measurable_of_measurable_coe _ $ λ s hs,</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"n\">measurable_of_measurable_coe</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">measurable_generate_from</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">preimage</span><span class=\"o\">]</span>\n<span class=\"c1\">-- λ s hs, by dsimp only [measure.measurable_space, lattice.supr, lattice.Sup, lattice.has_Sup.Sup, lattice.conditionally_complete_lattice.Sup,</span>\n<span class=\"c1\">-- lattice.complete_lattice.Sup, measurable_space.lattice.complete_lattice, galois_insertion.lift_complete_lattice] at hs</span>\n<span class=\"c1\">-- begin</span>\n<span class=\"c1\">--   -- apply measurable_of_measurable_coe,</span>\n<span class=\"c1\">--   -- intros s hs,</span>\n<span class=\"c1\">--   -- dsimp only [measure_theory.measure.bind, join, of_measurable]</span>\n<span class=\"c1\">--   -- intros s hs, dsimp only [measurable_space.map, measure_theory.measure.bind, join, of_measurable, dirac]</span>\n<span class=\"c1\">-- end</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">false</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">bind</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">outer_measure</span><span class=\"bp\">.</span><span class=\"n\">dirac</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">measurable_space</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">measurable_space</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"n\">gi_generate_from</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">bind_apply</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">integral</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">measurable_integral</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">integral_dirac</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">simple_func</span><span class=\"bp\">.</span><span class=\"n\">lintegral_eq_integral</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">simple_func</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">measurable_dirac</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">measurable_prod_mk</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">simple_func</span><span class=\"bp\">.</span><span class=\"n\">restrict_const_integral</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">measurable</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">measurable_generate_from</span>\n</pre></div>",
        "id": 169140737,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561646364
    },
    {
        "content": "<p>Doesn't <code>aux</code> follow from <code>bind_dirac</code>?</p>",
        "id": 169141130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561646665
    },
    {
        "content": "<p>I don't know</p>",
        "id": 169141157,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561646688
    },
    {
        "content": "<p>Er, I mean this one <a href=\"#narrow/stream/113488-general/topic/Integral.20of.20a.20constant/near/165952054\" title=\"#narrow/stream/113488-general/topic/Integral.20of.20a.20constant/near/165952054\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Integral.20of.20a.20constant/near/165952054</a></p>",
        "id": 169141517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561646909
    },
    {
        "content": "<p>I thought it got PRd but maybe not</p>",
        "id": 169141600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561646968
    },
    {
        "content": "<p>that's like 10 times shorter than my proof lol</p>",
        "id": 169141950,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561647193
    },
    {
        "content": "<p>sorry i missed this discussion last night. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , are you assuming sigma-finiteness?</p>",
        "id": 169142158,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561647321
    },
    {
        "content": "<blockquote>\n<p>Er, I mean this one <a href=\"#narrow/stream/113488-general/topic/Integral.20of.20a.20constant/near/165952054\" title=\"#narrow/stream/113488-general/topic/Integral.20of.20a.20constant/near/165952054\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Integral.20of.20a.20constant/near/165952054</a></p>\n</blockquote>\n<p>yes this was never PR'd</p>",
        "id": 169142188,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561647353
    },
    {
        "content": "<blockquote>\n<p>sorry i missed this discussion last night. <span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> , are you assuming sigma-finiteness?</p>\n</blockquote>\n<p>I only know that I need to prove or disprove this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n<span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span>\n<span class=\"err\">⊢</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">ν</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">})</span>\n</pre></div>",
        "id": 169142310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561647420
    },
    {
        "content": "<p>What's the status on PRing your stuff <span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> ? Remember not to build up too much stuff and PR some giant thing. A good strategy is to PR all the stuff that's not actually part of your main work but is missing from other parts of the library</p>",
        "id": 169142463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561647528
    },
    {
        "content": "<p>yes I've been putting it off to make it mathlib-ready. i'll get to it soon and yes, will make small PR chunks.</p>",
        "id": 169142535,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561647593
    },
    {
        "content": "<p>aka your <code>to_mathlib</code> collection</p>",
        "id": 169142546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561647601
    },
    {
        "content": "<p>actually the stuff I need is a little specialized so its not general enough. but i'll PR it anyway so the maintainers can decide</p>",
        "id": 169142633,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561647634
    },
    {
        "content": "<p>You can also make a [WIP] PR if you want to expose your current design decisions without making everything ready for merge</p>",
        "id": 169142840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561647764
    },
    {
        "content": "<p>Probably putting this question in context will help: I ran into this when I was trying to finish proving that the product measure as returned by the Giry monad has it's expected property: <code>(⇑doₐ (x : α) ←ₐ μ ; doₐ (y : β) ←ₐ ν ; ret (x, y)) (set.prod A B) = ⇑μ A * ⇑ν B</code> <br>\nI start off this proof by using a <code>bind_apply</code>. <br>\nWhich reduces the goal to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">B</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"err\">∫</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">doₐ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"err\">←ₐ</span> <span class=\"n\">ν</span> <span class=\"bp\">;</span> <span class=\"n\">ret</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"err\">ð</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⇑</span><span class=\"n\">μ</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"err\">⇑</span><span class=\"n\">ν</span> <span class=\"n\">B</span>\n</pre></div>\n\n\n<p>But with the additional goal that <code>⊢ measurable (λ (x : α), doₐ (y : β) ←ₐ ν ; ret (x, y))</code></p>",
        "id": 169145159,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561649303
    },
    {
        "content": "<p>I was able to finish everything except for this final goal.</p>",
        "id": 169145200,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561649345
    },
    {
        "content": "<p>I guess in hindsight sigma-finiteness <em>is</em> needed to prove this, but I'm not sure how exactly.</p>",
        "id": 169145350,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561649436
    }
]