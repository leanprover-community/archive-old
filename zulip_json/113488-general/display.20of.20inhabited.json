[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">inhabited</span> <span class=\"n\">ℕ</span>\n<span class=\"k\">#eval</span> <span class=\"n\">inhabited</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n<span class=\"k\">#eval</span> <span class=\"n\">nat.add</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inhabited</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I found all of these are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">an</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"bp\">'</span><span class=\"n\">has_repr'</span><span class=\"o\">,</span> <span class=\"n\">dumping</span> <span class=\"n\">internal</span> <span class=\"n\">representation</span>\n<span class=\"bp\">#</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>Is there any way to display it?</p>",
        "id": 293934071,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660754484
    },
    {
        "content": "<p>What do you want it to display?</p>",
        "id": 293934267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660754543
    },
    {
        "content": "<p>What should <code>#eval inhabited empty</code> display?</p>",
        "id": 293934337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660754567
    },
    {
        "content": "<p>I want to know what will happen if I calculate it.</p>",
        "id": 293934473,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660754617
    },
    {
        "content": "<p>What do you mean by \"calculate\"? What does <code>#eval ℕ</code> mean to you, and what does it calculate?</p>",
        "id": 293934615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660754663
    },
    {
        "content": "<p>(I think the real answer here is that you meant to write <code>#eval (default : ℕ)</code>)</p>",
        "id": 293934691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660754690
    },
    {
        "content": "<p>Yes, <code>default</code> is what I need.</p>",
        "id": 293935334,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660754926
    },
    {
        "content": "<p>What's the meaning of <code>#eval (default : Type*)</code>.<br>\nI think this is the terminal object of <a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/types.html#category_theory.types\">category_theory.types</a></p>\n<p>So I think this is <a href=\"https://leanprover-community.github.io/mathlib_docs/init/core.html#punit\">unit</a></p>\n<hr>\n<p>Oh, the display of <code>#eval ℕ</code> is also <code>#0</code></p>",
        "id": 293935506,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660754994
    },
    {
        "content": "<p>Oh, I find it works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">unit.star</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 293937766,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660755682
    },
    {
        "content": "<p>Is there other way to check <code>default : Type*</code> is unit?</p>",
        "id": 293938150,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660755805
    },
    {
        "content": "<p>You'll have better luck with <code>#reduce</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"c1\">-- punit</span>\n</code></pre></div>",
        "id": 293938166,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1660755812
    },
    {
        "content": "<p><code>#eval</code> uses the VM compiler and evaluation, but <code>#reduce</code> uses term reduction</p>",
        "id": 293938218,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1660755832
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 293938271,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660755842
    },
    {
        "content": "<p>Another question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">category_theory.with_terminal.inhabited</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">category_theory.with_initial.inhabited</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">category_theory.with_terminal.inhabited</span> <span class=\"n\">Group</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">category_theory.with_initial.inhabited</span> <span class=\"n\">Group</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n</code></pre></div>\n<p>Why both initial object and terminal object of  <a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/types.html#category_theory.types\">category_theory.types</a> is punit?</p>",
        "id": 293945873,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660758422
    },
    {
        "content": "<p>In the category of sets, the initial object is the empty set.<br>\nWhy in category of type, the initial object is not pempty?</p>",
        "id": 293947886,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660759133
    },
    {
        "content": "<p>pempty is an initial object. There is no \"the\" initial object.</p>",
        "id": 293948525,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660759333
    },
    {
        "content": "<p>punit is not an initial object in <code>Type*</code></p>",
        "id": 293948688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660759388
    },
    {
        "content": "<p><code>with_initial</code> formally adds an initial object. I think that's the source of your confusion.</p>",
        "id": 293948832,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660759442
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">category_theory.with_initial.inhabited</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n<span class=\"c1\">-- with_initial.of punit</span>\n</code></pre></div>",
        "id": 293949054,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660759514
    },
    {
        "content": "<p>And?</p>",
        "id": 293949082,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660759532
    },
    {
        "content": "<p>I don't understand the result of it.</p>",
        "id": 293949106,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660759544
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.with_initial\">docs#category_theory.with_initial</a></p>",
        "id": 293949187,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660759569
    },
    {
        "content": "<p>As I said, that construction formally adds an initial object. It has an inhabited instance, and the default elemt happens to be <code>punit.star</code></p>",
        "id": 293949271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660759618
    },
    {
        "content": "<p>Oh, I see. Thank you.</p>",
        "id": 293949423,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660759688
    },
    {
        "content": "<p>Is there any lemma told me that pempty is an initial object for type category.</p>",
        "id": 293949480,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660759737
    },
    {
        "content": "<p>Existence of initial and terminal objects is handled by the typeclass system. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.initial\">docs#category_theory.limits.initial</a></p>",
        "id": 293949487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660759741
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.type.is_initial_pempty\">docs#category_theory.type.is_initial_pempty</a> perhaps?</p>",
        "id": 293949614,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660759798
    },
    {
        "content": "<p>Hmmm... sorry I'm on mobile right now so I can't help much.</p>",
        "id": 293949726,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660759826
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/limits/shapes/types.html#category_theory.limits.types.initial_iso\">category_theory.limits.types.initial_iso</a></p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/limits/shapes/types.html#category_theory.limits.types.terminal_iso\">category_theory.limits.types.terminal_iso</a></p>",
        "id": 293950084,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1660759980
    }
]