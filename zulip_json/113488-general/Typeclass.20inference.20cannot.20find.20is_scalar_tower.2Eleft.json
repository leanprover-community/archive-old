[
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">mul_action.is_scalar_tower.left</span> <span class=\"n\">_</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">instance</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.is_scalar_tower.left\">docs#mul_action.is_scalar_tower.left</a> is an instance, so why can't lean find it for me?</p>",
        "id": 220110097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608122349
    },
    {
        "content": "<p>Maybe this is because <code>is_scalar_tower.left</code> depends on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.regular\">docs#mul_action.regular</a> which isn't registered as an instance by default</p>",
        "id": 220112234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608123779
    },
    {
        "content": "<p>What is the error?</p>",
        "id": 220115504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608125804
    },
    {
        "content": "<p>Is it because <code>infer_instance</code> doesn't work for <code>Prop</code></p>",
        "id": 220115525,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608125821
    },
    {
        "content": "<p><code>by apply_instance</code> works</p>",
        "id": 220115778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608126002
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>indeed <code>Type u</code> not <code>Sort u</code>, for some reason.</p>",
        "id": 220115881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608126057
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infer_instance\">docs#infer_instance</a> part of core?</p>",
        "id": 220116648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608126487
    },
    {
        "content": "<p>Added in <a href=\"https://github.com/leanprover-community/lean/commit/f487989470d9e0c116a213a11c0f2ccc102c66fc\">https://github.com/leanprover-community/lean/commit/f487989470d9e0c116a213a11c0f2ccc102c66fc</a></p>",
        "id": 220116818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608126578
    },
    {
        "content": "<p>let's find out if there is a reason: <a href=\"https://github.com/leanprover-community/lean/issues/506\">leanprover-community/lean#506</a></p>",
        "id": 220116979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608126660
    }
]