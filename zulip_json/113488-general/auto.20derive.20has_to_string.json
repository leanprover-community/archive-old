[
    {
        "content": "<p>RT, something like this in lean?</p>",
        "id": 130069413,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532206147
    },
    {
        "content": "<p>No, I don't think this one has a derive handler, although you could totally write one</p>",
        "id": 130069676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532206585
    },
    {
        "content": "<p>If you don't mind going into <code>meta</code>-land, you can derive <code>has_reflect</code> for your type and use the following to just pretty-print the Lean expression that corresponds to a value of your type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">to_string&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fmt</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_string</span>\n</pre></div>",
        "id": 130069770,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532206789
    },
    {
        "content": "<p><code>has_reflect</code> asks me to provide a <code>expr</code> for every value? Not sure how to do it for my type.</p>",
        "id": 130070006,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532207087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> yeah, it's just a very long type.</p>",
        "id": 130070023,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532207134
    },
    {
        "content": "<p>You write <code>@[derive has_reflect]</code> above your type definition</p>",
        "id": 130070026,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532207153
    },
    {
        "content": "<p>I meant write a derive handler</p>",
        "id": 130070074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532207172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> very cool, thanks.</p>",
        "id": 130070106,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532207276
    },
    {
        "content": "<p>You're welcome</p>",
        "id": 130070171,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532207363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Such a derive handler seems like a lot of work but I'm wondering if piggy backing on top of <code>has_reflect</code> might help us be extra lazy</p>",
        "id": 130070237,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532207451
    }
]