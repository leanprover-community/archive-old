[
    {
        "content": "<p>How come has_continuous_mul does not extend has_mul?</p>",
        "id": 265747727,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640129680
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_continuous_mul\">docs#has_continuous_mul</a></p>",
        "id": 265748154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640130042
    },
    {
        "content": "<p>it does?</p>",
        "id": 265748171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640130061
    },
    {
        "content": "<p>I mean, it doesn't extend it, but it asks for <code>has_mul M</code> which is the same thing modulo technical details about maps between classes</p>",
        "id": 265748196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640130097
    },
    {
        "content": "<p>Search zulip for the word <code>mixin</code> for more about this design choice.</p>",
        "id": 265748282,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640130156
    },
    {
        "content": "<p><code>class has_continuous_mul extends has_mul X</code> would mean <em>\"if you write <code>has_continuous_mul X</code>, you get a new multiplication on <code>X</code>\"</em>. This means if you write <code>[ring X] [has_continuous_mul X]</code> you just got two different multiplication operators, which is unlikely what you wanted to express.</p>",
        "id": 265748301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640130172
    },
    {
        "content": "<p><code>class has_continuous_mul [has_mul X]</code> means <em>\"you can't use <code>has_continuous_mul X</code> unless you have a multiplication already\"</em>.</p>",
        "id": 265748360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640130231
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 265748835,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640130653
    },
    {
        "content": "<p>I am having trouble getting the following to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">continuous</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">filter_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ℱ</span><span class=\"o\">},</span> <span class=\"n\">p.converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q.converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">ℱ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_continuous_mul</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_mul</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_continuous_smul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_smul</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">•</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_continuous_mul</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_inv</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">has_inv.inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">partial_group_action</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">option</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">partial_group_action</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">continuous_partial_group_action</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_group_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuity</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- COMPLAINS that it can't find instance of convergence_space G</span>\n</code></pre></div>",
        "id": 265750472,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640131673
    },
    {
        "content": "<p>That's precisely because your <code>convergence_group</code> is a mixin.....</p>",
        "id": 265750725,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640131766
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">continuous</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">filter_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ℱ</span><span class=\"o\">},</span> <span class=\"n\">p.converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q.converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">ℱ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_continuous_mul</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_mul</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_continuous_smul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_smul</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">•</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_continuous_mul</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_inv</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">has_inv.inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">partial_group_action</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">option</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">partial_group_action</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">continuous_partial_group_action</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">convergence_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_group_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuity</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">partial_group_action.α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"c1\">-- COMPLAINS that it can't find instance of convergence_space G</span>\n</code></pre></div>",
        "id": 265750903,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640131820
    },
    {
        "content": "<p>You should also fix your <code>partial_group_action</code> class, so that you can actually use <code>\\alpha</code> instead of giving the type signature..</p>",
        "id": 265750933,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640131852
    },
    {
        "content": "<p>So you're saying that I should NOT make <code>convergence_group</code> a mixin? I was copying what <code>topological_group</code> does.</p>",
        "id": 265751209,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132101
    },
    {
        "content": "<p>No, I'm saying that you were missing some assumptions</p>",
        "id": 265751232,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132119
    },
    {
        "content": "<p>BTW, why are you defining a <code>partial_group_action</code> class? Can't you just use <code>mul_action G (option X)</code>?</p>",
        "id": 265751255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132147
    },
    {
        "content": "<p>Ah, so those assumptions are not \"brought into scope\" from using <code>convergence_group G</code>?</p>",
        "id": 265751267,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132156
    },
    {
        "content": "<p>Exactly, this is the main distinction when compared with <code>class ..... extends ...</code></p>",
        "id": 265751327,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132178
    },
    {
        "content": "<p>Like Eric said above, if you want to have a ring with a continuous multiplication, you would need to write <code>[ring A] [has_continuous_mul A]</code>.</p>",
        "id": 265751364,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/has_continuous_mul.20.20extends.20has_mul.3F/near/265751255\">said</a>:</p>\n<blockquote>\n<p>BTW, why are you defining a <code>partial_group_action</code> class? Can't you just use <code>mul_action G (option X)</code>?</p>\n</blockquote>\n<p>I still need the class for extra properties not shown in the toy code here. I guess I could extend it?</p>",
        "id": 265751398,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132261
    },
    {
        "content": "<p>If <code>[has_continuous_mul A]</code> gave you a <code>has_mul</code> instance, then you would have two competing multiplciations, one from the continuous mul and one from the ring, and that's not what you want.</p>",
        "id": 265751407,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132281
    },
    {
        "content": "<p>Yep.</p>",
        "id": 265751462,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132305
    },
    {
        "content": "<p>Isn't a partial group action just an action of <code>G</code> on <code>option X</code>, or is that not what you are claiming?</p>",
        "id": 265751465,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132309
    },
    {
        "content": "<p>Well, there's more to it. For example, forall g, alpha(g, nothing) = nothing.</p>",
        "id": 265751528,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132383
    },
    {
        "content": "<p>oh right..</p>",
        "id": 265751538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132396
    },
    {
        "content": "<p>Thanks again.</p>",
        "id": 265751604,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132422
    },
    {
        "content": "<p>hmm... maybe there is a way to avoid making a new definition for this...</p>",
        "id": 265751613,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132430
    },
    {
        "content": "<p>Do we have a typeclass for a multiplicative action on a pointed type which respects the distinguished point <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?</p>",
        "id": 265751651,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/has_continuous_mul.20.20extends.20has_mul.3F/near/265750933\">said</a>:</p>\n<blockquote>\n<p>You should also fix your <code>partial_group_action</code> class, so that you can actually use <code>\\alpha</code> instead of giving the type signature..</p>\n</blockquote>\n<p>Why does this cause problems?</p>",
        "id": 265751736,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132551
    },
    {
        "content": "<p>It doesn't cause problems per se, but why should you make a new definition with all the associated API if you can just use something off the shelf?</p>",
        "id": 265751753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132584
    },
    {
        "content": "<p>No, I meant this fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">continuity</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">partial_group_action.α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 265751772,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132615
    },
    {
        "content": "<p>Oh I see....</p>",
        "id": 265751782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132623
    },
    {
        "content": "<p>Why can't I just write <code>continuous alpha</code>?</p>",
        "id": 265751788,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/has_continuous_mul.20.20extends.20has_mul.3F/near/265751651\">said</a>:</p>\n<blockquote>\n<p>Do we have a typeclass for a multiplicative action on a pointed type which respects the distinguished point <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> ?</p>\n</blockquote>\n<p>Sounds like (half of) a <code>monoid_with_zero_action</code>, if that exists?</p>",
        "id": 265751834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640132648
    },
    {
        "content": "<p>Again, this is because you're using the field from a class -- we had a similar discussion about your <code>convergence_space.converges</code>, remember?</p>",
        "id": 265751841,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132657
    },
    {
        "content": "<p>Yeah, but I made it a <code>class</code>, not a <code>structure</code>.</p>",
        "id": 265751868,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132683
    },
    {
        "content": "<p>A <code>class</code> is a <code>structure</code>!</p>",
        "id": 265751889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640132701
    },
    {
        "content": "<p>True, but there's a difference between making a structure and then adding the class attribute to it and just using <code>class</code>.</p>",
        "id": 265751919,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132739
    },
    {
        "content": "<p>I think the only difference is the implicitness of field arguments.</p>",
        "id": 265751977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640132776
    },
    {
        "content": "<p>If I use <code>[act : partial_group_action G X]</code> and then write <code>act.α</code>, it works.</p>",
        "id": 265752007,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132810
    },
    {
        "content": "<p>It's as if Lean can't figure out where alpha is coming from.</p>",
        "id": 265752036,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132837
    },
    {
        "content": "<p>But this is the same issue as writing <code>p.converges</code> for <code>[p : convergence_space X]</code>.</p>",
        "id": 265752044,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132855
    },
    {
        "content": "<p>Again, this is like writing <code>g.to_has_mul.mul x y</code> instead of <code>x * y</code> when <code>[g : group G]</code>.</p>",
        "id": 265752122,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640132911
    },
    {
        "content": "<p>To your discharge, understanding how to pass around arguments idiomatically is pretty hard. Welcome to the steep learning curve <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 265752154,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640132930
    },
    {
        "content": "<p>Well, there seems to be some confusion on my part as to when instance arguments require something to the left of : and when not.</p>",
        "id": 265752228,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640132984
    },
    {
        "content": "<p>They should almost never. But I think you're hitting the \"almost\" with your instances on your structures.</p>",
        "id": 265752406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640133073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/has_continuous_mul.20.20extends.20has_mul.3F/near/265751651\">said</a>:</p>\n<blockquote>\n<p>Do we have a typeclass for a multiplicative action on a pointed type which respects the distinguished point <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> ?</p>\n</blockquote>\n<p>I'm afraid I can't decode this meaningully!</p>",
        "id": 265752415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640133076
    },
    {
        "content": "<p>If <code>M</code> is a monoid and <code>X</code> is a pointed type with distinguished point <code>* : X</code>, (which might be called <code>0</code> ;)), do we have a typeclass for an action of <code>M</code> on <code>X</code> such that <code>m \\bu * = *</code> for all <code>m</code>?</p>",
        "id": 265752548,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/has_continuous_mul.20.20extends.20has_mul.3F/near/265752406\">said</a>:</p>\n<blockquote>\n<p>They should almost never. But I think you're hitting the \"almost\" with your instances on your structures.</p>\n</blockquote>\n<p>So you're saying that the confusion Lean has regarding <code>continuous α</code> has to do with the fact that I defined <code>convergence_space</code> as a structure with a class attribute afterwards?</p>",
        "id": 265752596,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640133182
    },
    {
        "content": "<p>Probably, we can restrict to <code>X := option α</code> or <code>with_zero α</code> for now.</p>",
        "id": 265752606,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640133186
    },
    {
        "content": "<p>No, I meant that you're doing the rare bit of the API where you need to dig the structures ugly.</p>",
        "id": 265752662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640133230
    },
    {
        "content": "<p>So a typeclass with only <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_zero\">docs#smul_zero</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_zero'\">docs#smul_zero'</a>?</p>",
        "id": 265752792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640133295
    },
    {
        "content": "<p>yeah</p>",
        "id": 265752807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133306
    },
    {
        "content": "<p>The fact that I have two links for the same statement there indicates we do not have that generalization</p>",
        "id": 265752828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640133318
    },
    {
        "content": "<p>Either you also need to assume <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zero_smul\">docs#zero_smul</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_add\">docs#smul_add</a> alongside <code>smul_zero</code></p>",
        "id": 265752859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640133339
    },
    {
        "content": "<p>Ah, so you could take a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_with_zero\">docs#smul_with_zero</a> of <code>with_zero M</code> on <code>X</code></p>",
        "id": 265752962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133389
    },
    {
        "content": "<p>Consider this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">partial_group_action</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">option</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">partial_group_action</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_group_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not doing anything fancy here, yet it still complains.</p>",
        "id": 265752968,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640133392
    },
    {
        "content": "<p>Oops. Nevermind.</p>",
        "id": 265752999,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640133439
    },
    {
        "content": "<p>Forgot the <code>option</code> part. But that works without a problem regarding α.</p>",
        "id": 265753019,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640133460
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">partial_group_action</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">option</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">partial_group_action</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_group_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265753072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133486
    },
    {
        "content": "<p>Yep. And I didn't have to qualify where alpha came from in this example.</p>",
        "id": 265753092,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640133519
    },
    {
        "content": "<p>Ok</p>",
        "id": 265753112,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133536
    },
    {
        "content": "<p>That's because you gave it an input of <code>(g, some x)</code>, so lean then knows that it's supposed to look for an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> which takes an input of type <code>G \\x option X</code>, and it is then able to find the typclass instance.</p>",
        "id": 265753166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133590
    },
    {
        "content": "<p>So you're saying if I just use a naked alpha (i.e. with no arguments), it can't figure out which instance to use?</p>",
        "id": 265753284,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640133690
    },
    {
        "content": "<p>Yeah, exactly.</p>",
        "id": 265753298,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133713
    },
    {
        "content": "<p>Because there could a priori be <code>partial_group_action</code>s for many different types.</p>",
        "id": 265753342,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133732
    },
    {
        "content": "<p>I see. I guess I was hoping it would use the \"obvious to me\" one.</p>",
        "id": 265753359,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640133762
    },
    {
        "content": "<p>It's like writing <code>(*)</code>. This is the function <code>has_mul.mul</code>, but lean has no way of knowing what type this multiplciation is defined on withyout further hints.</p>",
        "id": 265753363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133766
    },
    {
        "content": "<p>That settles that matter. Thanks a bunch.</p>",
        "id": 265753414,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640133811
    },
    {
        "content": "<p>No worries. Typeclasses take some time to get used to.</p>",
        "id": 265753443,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640133833
    },
    {
        "content": "<p>I'm used to type classes in Haskell and Agda. Lean seems to have more gotchas than I expected.</p>",
        "id": 265753500,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640133867
    }
]