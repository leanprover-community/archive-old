[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> <br>\nThe following code, from Chapter 8 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>, gives 4 error messages in Lean 3.30. It works fine in (e.g.) Lean 3.23. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">px</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">px</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">qx</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">qx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error message on the first line is <code>equation compiler failed (use 'set_option trace.eqn_compiler.elim_match true' for additional details)</code>. </p>\n<p>The two messages on the third line are <code>invalid function application in pattern, it cannot be reduced to a constructor (possible solution, mark term as inaccessible using '.( )')  exists.intro x (or.inl px)</code> and a similar message with <code>qx</code> in place of <code>px</code>.</p>\n<p>The error message on the final line is <code>don't know how to synthesize placeholder (x)</code></p>\n<p>The trace output is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">eqn_compiler.elim_match</span><span class=\"o\">]</span> <span class=\"n\">depth</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">match</span> <span class=\"n\">_example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">ᾰ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"bp\">⁇</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"bp\">⁇</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"bp\">⁇</span> <span class=\"bp\">⁇</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"bp\">⁇</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"bp\">⁇</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"bp\">⁇</span> <span class=\"bp\">⁇</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">eqn_compiler.elim_match</span><span class=\"o\">]</span> <span class=\"n\">compilation</span> <span class=\"n\">failed</span> <span class=\"n\">at</span>\n<span class=\"k\">match</span> <span class=\"n\">_example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">ᾰ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"bp\">⁇</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"bp\">⁇</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"bp\">⁇</span> <span class=\"bp\">⁇</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"bp\">⁇</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"bp\">⁇</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"bp\">⁇</span> <span class=\"bp\">⁇</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 240824463,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622462370
    },
    {
        "content": "<p><code>Exists.intro</code> works, the type is now callled <code>Exists</code> but there's still some abbreviations to the old one</p>",
        "id": 240825338,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622462891
    },
    {
        "content": "<p><code>exists.intro</code> has <code>@[pattern]</code>, though, which I think should make it work</p>",
        "id": 240825362,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622462921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> brilliant! A suggestion: the introduction to <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> states, \"This tutorial describes the current version of Lean, known as Lean 3\". Is is worth being more precise about the Lean version against which <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> has been tested?</p>",
        "id": 240826700,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622463743
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 240826746,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622463772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> I note that the type was called <code>Exists</code> in Lean 3.23 too.  The difference I see is that Lean 3.33 has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[pattern]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">exists.intro</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>in <code>logic.lean</code> whereas Lean 3.23 has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[pattern]</span>\n<span class=\"kd\">def</span> <span class=\"n\">exists.intro</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Exists.intro</span>\n</code></pre></div>\n<p>I think this is another example of the dreaded <code>lemma</code> vs <code>def</code> issue I asked about recently! <del>I'll PR.</del></p>\n<p>Sorry, I can't PR as this is core Lean!</p>",
        "id": 240828221,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622464591
    },
    {
        "content": "<p>It looks like <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> made the change in <a href=\"https://github.com/leanprover-community/lean/issues/545\">lean#545</a> to fix a linting issue. I don't know if the breakage you're seeing is intentional though.</p>",
        "id": 240828978,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622464993
    },
    {
        "content": "<p>Note that <code>def</code> is sometimes used to make aliases like this without having to state the type. In mathlib we can use <code>alias</code> instead, which gets lemma/def right, but it's not available in core</p>",
        "id": 240829834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622465514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> <span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> Thanks for catching this mistake and debugging. I'll fix it. Give me a few days to get to it -- I'll update to the latest version of Lean and re-check all the code. </p>\n<p>The title page of the PDF documentation indicates the version of Lean. (It's set in a config file, so it's only correct if I remember to update it when I bump and retest.) I don't think we need to emphasize it in the text -- we should just aim to describe the current version.</p>",
        "id": 240831672,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1622466597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> thanks. But is this an issue with <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> or with the new definition of <code>exists.intro</code> in core Lean? Is the behaviour exhibited by the new definition what one would expect?</p>",
        "id": 240832204,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622466913
    },
    {
        "content": "<p>Good question. It would be best if <code>exists.intro</code> could be made to work... If not, I don't know the best workaround. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, what do you think?</p>",
        "id": 240832926,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1622467304
    },
    {
        "content": "<p>(I wouldn't mind simply deleting the example, or using <code>Exists.intro</code> and explaining that we had to use the capital \"E\" to make the pattern matching work.)</p>",
        "id": 240834341,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1622468153
    },
    {
        "content": "<p>I think we can go back and make <code>exists.intro</code> a <code>def</code>. I'm happy to add the exception \"<code>Prop</code> sorted declarations are allowed to be <code>def</code> if they have the <code>@[pattern]</code> attribute\" to the linter.</p>",
        "id": 240971306,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622566393
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/582\">lean#582</a> &amp; <a href=\"https://github.com/leanprover-community/mathlib/issues/7785\">#7785</a></p>",
        "id": 240978147,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622569421
    }
]