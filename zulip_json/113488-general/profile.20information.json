[
    {
        "content": "<p>Hi, <code>lean --profile</code> reports several \"took ...\" for each declaration: \"type checking\", \"compilation\", \"decl post-processing\", \"elaboration\". What does each step mean?</p>",
        "id": 184108118,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577111539
    },
    {
        "content": "<ul>\n<li>\n<p>Elaboration is the step that runs your tactic but it also \"guesses\" all the type error that you don't provide. In other functional languages, we could call that type inference. </p>\n</li>\n<li>\n<p>Type checking is when all the type information is all provided, how long does it take to check all the types. This includes checking that the proof tree that you provide forms a valid proof. This step can sometimes be slow because of all the (sometimes recursive) definitions that it has to unfold to check definitional equality. </p>\n</li>\n<li>\n<p>Compilation is the step takes a Lean definition and translates it into something that can be executed efficiently. It is especially relevant for tactics as they are not executed in the kernel (i.e. unfolded during type checking). Any definition that those use (e.g. <code>list.map</code>) also have to be compiled.</p>\n</li>\n</ul>\n<p>I'm not sure about \"decl post-processing\". It might have to do with equation compilation</p>",
        "id": 184121110,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577123849
    },
    {
        "content": "<p>Thanks Simon. I'm using the profiler a lot at the minute because my category theory code is slow</p>",
        "id": 184121369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577124066
    },
    {
        "content": "<p>Note that some of the info may be inaccurate, see this issue by <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>:  <a href=\"https://github.com/leanprover-community/lean/issues/58\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/58\">https://github.com/leanprover-community/lean/issues/58</a></p>\n<p>Somewhat relatedly, it'd be nice if someone with more knowledge of the C++ could help improve the profiler output. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has a script that's generating a lot of profiler output <a href=\"#narrow/stream/113538-travis/topic/build.20time.20bot\" title=\"#narrow/stream/113538-travis/topic/build.20time.20bot\">here</a>. I attempted to make sense of it (with the aim of visualizing the fast / slow parts of mathlib over time) but it's a bit too hard for me to figure out which profiler lines correspond to which statement / file. I don't know how big of a task this would be; it might be more trouble than it's worth.</p>",
        "id": 184121967,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577124688
    },
    {
        "content": "<p>I run <code>lean --profile --json</code>, and it has all the file/line info</p>",
        "id": 184122465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577125248
    },
    {
        "content": "<p>Cumulative profiling times say elaboration 1.2e+04s, tactic execution 9.86e+03s. I wonder why this is more than the total running time of 1h.</p>",
        "id": 184125879,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577128417
    },
    {
        "content": "<p>That's probably because of parallel processing</p>",
        "id": 184125990,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577128527
    },
    {
        "content": "<p>I'll try with <code>-j1</code></p>",
        "id": 184127413,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577129904
    }
]