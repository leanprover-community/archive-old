[
    {
        "content": "<p>The following example is minimized fron trying to parametrize <code>semilinear_map_class</code> over an <code>out_param (R →+* S)</code>. I expect both <code>B.b</code> and <code>B.b'</code> to work, but the second fails for some reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">iA</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oA</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iB</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oB</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">iA</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oA</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">iA</span> <span class=\"bp\">→</span> <span class=\"n\">oA</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">iB</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oB</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iA</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oA</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">iA</span> <span class=\"n\">oA</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">iB</span> <span class=\"bp\">→</span> <span class=\"n\">iA</span> <span class=\"bp\">→</span> <span class=\"n\">oB</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">iB</span> <span class=\"bp\">→</span> <span class=\"n\">oA</span> <span class=\"bp\">→</span> <span class=\"n\">oB</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">iA</span> <span class=\"n\">oA</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">iB</span> <span class=\"n\">oB</span> <span class=\"n\">iA</span> <span class=\"n\">oA</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">iB</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">iA</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">oB</span> <span class=\"o\">:=</span> <span class=\"n\">B.b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">iA</span> <span class=\"n\">oA</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">iB</span> <span class=\"n\">oB</span> <span class=\"n\">iA</span> <span class=\"n\">oA</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">iB</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">oA</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">oB</span> <span class=\"o\">:=</span> <span class=\"n\">B.b'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"c1\">-- fails: don't know how to synthesize placeholder</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">iA</span> <span class=\"n\">oA</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">iB</span> <span class=\"n\">oB</span> <span class=\"n\">iA</span> <span class=\"n\">oA</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">iB</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">oA</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">oB</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">B.b'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">iA</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 265561895,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640006883
    },
    {
        "content": "<p>Is the <code>[A iA oA]</code> tripping it up?</p>",
        "id": 265562557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640007228
    },
    {
        "content": "<p>I think so. Making the instance an <code>out_param</code> too makes everything work.</p>",
        "id": 265562746,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640007298
    },
    {
        "content": "<p>Here's another mysterious failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ring_hom</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semilinear_map_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">ring_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"c\">/-</span><span class=\"cm\"> `rw` fails if `[module S N]` is not an `out_param` -/</span>\n  <span class=\"o\">[</span><span class=\"n\">to_fun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">to_fun.coe</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">module.op</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">module.op</span> <span class=\"o\">((</span><span class=\"n\">ring_hom.coe</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">to_fun.coe</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">semilinear_map_class.map_smul</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">to_fun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">semilinear_map_class</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module.op</span> <span class=\"o\">((</span><span class=\"n\">ring_hom.coe</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">c'</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">to_fun.coe</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">to_fun.coe</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">module.op</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">semilinear_map_class.map_smul</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module.op</span> <span class=\"o\">((</span><span class=\"n\">ring_hom.coe</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">c'</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">to_fun.coe</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">to_fun.coe</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">module.op</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">semilinear_map_class.map_smul</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [simplify.failure] fail to instantiate emetas: 'semilinear_map_class.map_smul' at</span>\n<span class=\"c1\">-- @to_fun.coe F (M → N) _inst_3 f (@module.op R M _inst_1 (h' c') x)</span>\n<span class=\"c1\">-- partially instantiated lemma: @semilinear_map_class.map_smul F R ?x_2 ?x_3 M N _inst_1 ?x_7 _inst_3 ?x_9 f (h' c') x</span>\n</code></pre></div>",
        "id": 265587907,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640018955
    },
    {
        "content": "<p>According to the debugger, the error is that on the third emeta (not sure what this is) the function <code>has_idx_metavar</code> (don't know what that is) returns true.</p>",
        "id": 265588192,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640019097
    },
    {
        "content": "<p>Sorry, that was with universe variables. Without universe variables, the error is \"failed to assign\" instead, also on the third emeta.</p>",
        "id": 265589401,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640019648
    },
    {
        "content": "<p>Minified further:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">class</span> <span class=\"n\">broken₁</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">broken₁</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">broken₂</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">broken₁</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">broken₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">broken₁</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">broken₂</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_eq</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">broken₁</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">broken₂</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f_eq</span><span class=\"o\">]</span> <span class=\"c1\">-- fail to instantiate emetas</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265591129,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640020559
    },
    {
        "content": "<p>So the specific error is: <code>simp</code> can't instantiate <code>out_param</code>s of a class appearing in a <code>simp</code> lemma, if that class doesn't appear in the LHS of the lemma.</p>",
        "id": 265591225,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640020602
    },
    {
        "content": "<p>This also happens for bundled classes, but you have to use explicit instances to find the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">broken₁</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">broken₁</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">broken₂</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">broken₁</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">broken₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">broken₂</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_eq</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">broken₂</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f_eq</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n\n<span class=\"c1\">-- This makes `f (x : ℕ)` parse as `@@broken₁.f nat.broken₁ x`</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat.broken₁</span> <span class=\"o\">:</span> <span class=\"n\">broken₁</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nat.broken₂</span> <span class=\"o\">:</span> <span class=\"n\">broken₂</span> <span class=\"n\">ℕ</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">f_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f_eq</span><span class=\"o\">]</span> <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>",
        "id": 265593272,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640021607
    },
    {
        "content": "<p>The \"out_param instance parameter\" issue is fixed in <a href=\"https://github.com/leanprover-community/lean/pull/657\">lean#657</a>, and the \"simp can't fill out_params\" issue is fixed in <a href=\"https://github.com/leanprover-community/lean/pull/659\">lean#659</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 266819705,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641309322
    },
    {
        "content": "<p>Will we have two Lean releases on one day?</p>",
        "id": 266821244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641310111
    },
    {
        "content": "<p>oh man, I was already so excited for 3.36.0 that I started updating mathlib already ^^ this is amazing!</p>",
        "id": 266821479,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641310231
    },
    {
        "content": "<p>Let's hope there are no more bugs to be discovered through further <code>out_param</code> (ab)use :P</p>",
        "id": 266822041,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641310523
    }
]