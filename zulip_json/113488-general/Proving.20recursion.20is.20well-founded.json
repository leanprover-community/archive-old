[
    {
        "content": "<p>Hey All,</p>\n<p>I am trying to define the semantics of a programming language in Lean. To do so, I have a bunch of mutually inductive types defining the different term types of the language:<br>\nmutual inductive CBlockList, Block, SwitchBody, CExpr, CStatement<br>\nwith CBlockList : FTContext → set Identifier -&gt; set Identifier -&gt; Type<br>\n....<br>\nwith Block : FTContext → set Identifier → Type<br>\n...<br>\nwith SwitchBody : FTContext → set Identifier → Type<br>\n...<br>\nwith CExpr : FTContext → set Identifier → ℕ → Type<br>\n...<br>\nwith CStatement : FTContext → set Identifier → set Identifier → Type<br>\n...</p>\n<p>Note that in particular, the different term types take a function typing context and a set of identifier in scope as arguments. Terms that can introduce new variables into scope have a second such argument, defining the set of arguments after the term is evaluated.</p>\n<p>However, when defining mutually recursive functions over this mutually recursive data type, lean complains that for some of the recursive calls, it is unable to infer well-foundedness. This occurs in particular when there are calls between functions with different numbers of arguments (because of the different number of arguments of the associated types). Lean seems to try to define the well-founded order over the sum of the dependent product of each function's arguments, but when they have different number of arguments, it, I assume, does not give any order to these elements of the set, hence the problem I have encountered.</p>\n<p>I have tried to define a mutually recursive depth function that traverse the mutually inductive data types and returns a limit to the possible depth of recursion to be able to prove well-foundedness myself, however, this function definition runs into the same problem. It seems I'm stuck in a catch-22.</p>\n<p>How would I go about solving such a problem?</p>\n<p>Thanks in advance!</p>",
        "id": 262810942,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1637941667
    },
    {
        "content": "<p>this question is quite interesting... but first could you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 262858006,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1637995317
    },
    {
        "content": "<p>the way you define the language matters a lot, you should post the whole semantics</p>",
        "id": 262858057,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1637995395
    },
    {
        "content": "<p>the way you define the language matters a lot, you should post the whole semantics</p>",
        "id": 262858058,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1637995396
    },
    {
        "content": "<p>Mutual inductives are very broken in Lean 3. You can try to define your depth function or wf relation directly via the recursors, e.g. <code>CBlockList.rec</code>. I think those might be strong enough. Coq and Agda are better at this.</p>",
        "id": 262990732,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1638182156
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 262996709,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638185880
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 262996801,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638185925
    }
]