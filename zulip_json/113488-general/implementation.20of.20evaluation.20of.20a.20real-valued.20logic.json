[
    {
        "content": "<p>I am trying to implement a real-valued logic starting from the definition of the language and a simple <code>eval</code> function. Formulas are propositional logic formulas. Propositions are interpreted into interval of real values.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">interval</span> <span class=\"o\">:=</span>\n <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">interval</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span>  <span class=\"n\">or</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Expr</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">interval</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">interval</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">i</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">interval.mk</span> <span class=\"o\">((</span><span class=\"n\">eval</span> <span class=\"n\">e1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">e2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">eval</span> <span class=\"n\">e1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">e2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">l</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">interval.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">interval.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">e1</span> <span class=\"n\">e1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I got a <code>timeout</code> in the reduce! Why?</p>",
        "id": 220300415,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1608238210
    },
    {
        "content": "<p>The eval of and is not final, just testing the ideas.</p>",
        "id": 220300549,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1608238275
    },
    {
        "content": "<p>If you try #eval instead of #reduce you'll see why you're getting a timeout!</p>",
        "id": 220303400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608239614
    },
    {
        "content": "<p>Even <code>#reduce (0 : ℝ)</code> times out.</p>",
        "id": 220303675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608239746
    },
    {
        "content": "<p>Hum, so  cant I play with reals in Lean?</p>",
        "id": 220303812,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1608239798
    },
    {
        "content": "<p>We play with them all the time! We just don't try to evaluate them :-)</p>",
        "id": 220303854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608239822
    },
    {
        "content": "<p>Here's how I would do this, using <code>rat</code> and <code>#eval</code> instead of <code>real</code> and <code>#reduce</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">interval</span> <span class=\"o\">:=</span>\n <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">interval</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sformat</span><span class=\"bp\">!</span><span class=\"s2\">\"⟨{l}, {h}⟩\"</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">interval</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span>  <span class=\"n\">or</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Expr</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">interval</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">interval</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">i</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">interval.mk</span> <span class=\"o\">((</span><span class=\"n\">eval</span> <span class=\"n\">e1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">e2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">eval</span> <span class=\"n\">e1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">e2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">l</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">interval.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">interval.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">e1</span> <span class=\"n\">e1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 220305583,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608240623
    },
    {
        "content": "<p>Unfortunately, for continuous logic the quantifiers are inf and sup, so one must really use real numbers :)<br>\nI should add that I think it would be VERY interesting to formalize stuff around continuous logic!</p>",
        "id": 220306179,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608240896
    },
    {
        "content": "<p>A stupid question: what is the problema with reals? Why can't we evaluate them? does Lean 4 will solve this limitation?</p>",
        "id": 220319893,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1608249238
    },
    {
        "content": "<p>Well they do go on forever</p>",
        "id": 220320441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608249607
    }
]