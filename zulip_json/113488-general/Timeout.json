[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8644\">#8644</a> just got a random timeout in <code>category_theory.grothendieck</code>. Don't know what you can do with that, but I thought I should tell you.</p>",
        "id": 249444127,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628921826
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/9524/checks?check_run_id=3808477953\">Random timeout in <code>linear_algebra.quadratic_form</code></a> if people want to speed it up.</p>",
        "id": 256363949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633501923
    },
    {
        "content": "<p>Is this not fixed by yesterdays<br>\n<span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/256296996\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/7455f47c7037681073655ff0716f7ce09b766c2a\">chore(linear_algebra/quadratic_form): speed up quadratic_form.lin_mul…</a></strong><br>\nchore(linear_algebra/quadratic_form): speed up quadratic_form.lin_mul_lin (<a href=\"https://github.com/leanprover-community/mathlib/issues/9567\">#9567</a>)</p>\n<p>In my single profiler run, this reduced elaboration time from 20s to 1.5s.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/7455f47c7037681073655ff0716f7ce09b766c2a\">https://github.com/leanprover-community/mathlib/commit/7455f47c7037681073655ff0716f7ce09b766c2a</a></p>\n</blockquote>",
        "id": 256364040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633502009
    },
    {
        "content": "<p>I think we just need a bunch of people to merge master.</p>",
        "id": 256364204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633502135
    },
    {
        "content": "<p>Oh! Thank you for the pointer, will merge.</p>",
        "id": 256365156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633502825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> I just hit <a href=\"https://github.com/leanprover-community/mathlib/runs/5281918834?check_suite_focus=true\">a timeout</a> in <code>algebra.lie.engel</code>.</p>",
        "id": 272777967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645521969
    },
    {
        "content": "<p>I'll take a look now.</p>",
        "id": 272778032,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645522012
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 272778072,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645522031
    },
    {
        "content": "<p>It's <a href=\"https://github.com/leanprover-community/mathlib/tree/sup_bot_hom\">branch#sup_bot_hom</a>, right?</p>",
        "id": 272778433,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645522225
    },
    {
        "content": "<p>I cannot reproduce this locally with my timeout set to 100000.</p>",
        "id": 272778683,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645522390
    },
    {
        "content": "<p>I've literally just checked out <a href=\"https://github.com/leanprover-community/mathlib/tree/sup_bot_hom\">branch#sup_bot_hom</a>, grabbed a cache, and tried in VS Code and also <code>lean --make src/algebra/lie/engel.lean</code> at the command line and they both work fine.</p>",
        "id": 272778848,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645522469
    },
    {
        "content": "<p>I'll look for a way to speed up that proof anyway but I'd like to understand why I cannot reproduce this.</p>",
        "id": 272778897,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645522512
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12193\">#12193</a> is also hitting a timeout that seems unrelated in <code>geometry/euclidean/oriented_angle.lean:638</code></p>",
        "id": 272779730,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645522965
    },
    {
        "content": "<p>The code suggests at a first glance it is related to Yaël's timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">oangle_conj_lie</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">hb.oangle</span> <span class=\"o\">(</span><span class=\"n\">hb.conj_lie</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb.conj_lie</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">hb.oangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">conj_lie</span><span class=\"o\">,</span> <span class=\"n\">oangle</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">star_ring_end</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_div</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 272779785,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645523013
    },
    {
        "content": "<p>Ha, I think the <code>lie</code> there is short for \"Linear Isometric Equivalence\" and nothing to do with the famous Norwegian!</p>",
        "id": 272779935,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645523094
    },
    {
        "content": "<p>This makes some improvement anyway: <a href=\"https://github.com/leanprover-community/mathlib/pull/12205\">#12205</a></p>",
        "id": 272781350,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645523964
    },
    {
        "content": "<p>I couldn't reproduce it locally either <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 272783175,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645524987
    },
    {
        "content": "<p>The timeout in <code>oriented_angle</code> has been fixed yesterday by Rob.</p>",
        "id": 272783216,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645525010
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13242\">#13242</a> is hitting <a href=\"https://github.com/leanprover-community/mathlib/runs/5957239530?check_suite_focus=true\">a (definitely unrelated) timeou</a>t in <code>category_theory.fin_category</code>. Anyone to issue a speedup?</p>",
        "id": 278432065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649539982
    },
    {
        "content": "<p>Update: <a href=\"https://github.com/leanprover-community/mathlib/pull/13194\">#13194</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/13197\">#13197</a> too <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 278432601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649540770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>, you're the one to gitblame.</p>",
        "id": 278433646,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649542286
    },
    {
        "content": "<p>Bors seems to have to different issues: the <code>category_theory.fin_category</code> and name collisions in <code>topology/algebra/group</code> for <code>filter.inv_mem_inv</code> and <code>set.inv_mem_inv</code>.</p>",
        "id": 278433697,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1649542339
    },
    {
        "content": "<p>Argh, those latter ones are mine. I did fix everything as it came but it's an uphill battle.</p>",
        "id": 278433728,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649542396
    },
    {
        "content": "<p>Can a <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> pull <a href=\"https://github.com/leanprover-community/mathlib/pull/13170\">#13170</a> off the queue then?</p>",
        "id": 278433785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649542444
    },
    {
        "content": "<p>I will merge master tomorrow when <a href=\"https://app.bors.tech/repositories/24316\">#bors</a> is less busy</p>",
        "id": 278433794,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649542465
    },
    {
        "content": "<p>Does <code>bors cancel</code> work? Or is it reserved for maintainers?</p>",
        "id": 278434264,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649543265
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.fin_category.obj_as_type_equiv_as_type\">docs#category_theory.fin_category.obj_as_type_equiv_as_type</a> takes 41s to compile locally. I'm taking a stab at making it faster.</p>",
        "id": 278458946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649584190
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13298\">#13298</a></p>",
        "id": 278460591,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649586634
    },
    {
        "content": "<p>Bors still has some timeout issues and again category theory is to blame, but this time it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.groupoid_of_elements\">docs#category_theory.groupoid_of_elements</a> and it seems that <a href=\"https://github.com/leanprover-community/mathlib/pull/13125\">#13125</a> is failing repeatedly</p>",
        "id": 278474854,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1649605785
    },
    {
        "content": "<p>Looks like batches are now also timing out on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.finite_spanning_sets_in.prod\">docs#measure_theory.measure.finite_spanning_sets_in.prod</a> : <a href=\"https://github.com/leanprover-community/mathlib/runs/5962695533?check_suite_focus=true\">https://github.com/leanprover-community/mathlib/runs/5962695533?check_suite_focus=true</a> <a href=\"https://github.com/leanprover-community/mathlib/runs/5963011819?check_suite_focus=true\">https://github.com/leanprover-community/mathlib/runs/5963011819?check_suite_focus=true</a></p>",
        "id": 278484476,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1649617723
    },
    {
        "content": "<p>Is my speedup timing out on those? <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 278484520,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649617777
    },
    {
        "content": "<p>It seems so, unfortunately.</p>",
        "id": 278484581,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1649617839
    },
    {
        "content": "<p>Do you want me to fix them in <a href=\"https://github.com/leanprover-community/mathlib/pull/13298\">#13298</a> then?</p>",
        "id": 278484606,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649617898
    },
    {
        "content": "<p>Having separate PRs for each fix would be cleaner, but I won't insist. (I have to go AFK for a bit, so if fix(es) appear, hopefully another maintainer can put them on the top of the queue with <code>bors r+ p=1000</code> .)</p>",
        "id": 278484865,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1649618172
    },
    {
        "content": "<p>Yes, but doesn't that risk bors not batching them together?</p>",
        "id": 278484897,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649618269
    },
    {
        "content": "<p>This is really puzzling. <code>finite_spanning_sets_in (μ.prod ν)</code> alone takes 10-20s to compile. No matter how many type coercions or explicit instances I put in, it still takes as long.</p>",
        "id": 278494218,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649631564
    },
    {
        "content": "<p>What about adding explicit universes?</p>",
        "id": 278494495,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649631897
    },
    {
        "content": "<p>Oh I didn't try! I'm onto fixing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.groupoid_of_elements\">docs#category_theory.groupoid_of_elements</a> now</p>",
        "id": 278494510,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649631935
    },
    {
        "content": "<p>Oh miracle! <a href=\"https://github.com/leanprover-community/mathlib/pull/13298\">#13298</a> did go through in the end</p>",
        "id": 278494636,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649632087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Timeout/near/278494218\">said</a>:</p>\n<blockquote>\n<p>This is really puzzling. <code>finite_spanning_sets_in (μ.prod ν)</code> alone takes 10-20s to compile. No matter how many type coercions or explicit instances I put in, it still takes as long.</p>\n</blockquote>\n<p>Is this the definition of <code>finite_spanning_sets_in.prod</code> that you're looking at? I'm curious: what does putting <code>noncomputable!</code> out front do to compilation time? (It seems to be significantly faster on my computer, but I'm not completely sure...)</p>",
        "id": 278494746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649632284
    },
    {
        "content": "<p>Oh wow you are right on spot, Kyle. Went down from 20s to milliseconds using <code>noncomputable!</code>.</p>",
        "id": 278494944,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649632613
    },
    {
        "content": "<p>Does <code>noncomputable!</code> apply hereditarily or do we need to mark <code>noncomputable</code> stuff that uses <code>noncomputable!</code> stuff?</p>",
        "id": 278494957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649632669
    },
    {
        "content": "<p>Over those 20s, the compiler's spending a whole lot of time calculating that it basically doesn't need to calculate anything. (The structure it constructs has no computationally relevant fields.)</p>",
        "id": 278495016,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649632733
    },
    {
        "content": "<p>Since this module is using <code>noncomputable theory</code>, what will happen is that every definition in this file that uses this one will be <code>noncomputable</code> automatically (as necessary).</p>",
        "id": 278495029,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649632769
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13325\">#13325</a></p>",
        "id": 278495146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649632946
    },
    {
        "content": "<p>By the way, this is what the compiler compiles it down to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">compiler.optimize_bytecode</span><span class=\"o\">]</span>  <span class=\"n\">measure_theory.measure.finite_spanning_sets_in.prod</span> <span class=\"mi\">10</span>\n<span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">scnstr</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n<span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ret</span>\n</code></pre></div>\n<p>That means \"create a value using constructor number 0 (with no arguments) and return it.\"</p>",
        "id": 278495164,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649633001
    },
    {
        "content": "<p>Heading off for today. I will leave <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.groupoid_of_elements\">docs#category_theory.groupoid_of_elements</a> now for someone else to fix.</p>",
        "id": 278495214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649633062
    },
    {
        "content": "<p>Thanks so much Yael!</p>",
        "id": 278495217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649633073
    },
    {
        "content": "<p>Seeing bors failing hurts!</p>",
        "id": 278495238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649633124
    },
    {
        "content": "<p>I need to add <code>noncomputable!</code> to my list of things to try when something takes an absurdly long amount of time</p>",
        "id": 278495291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649633169
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span>  (sorry, I have been pinging you a lot this week end <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>), could <a href=\"https://github.com/leanprover-community/mathlib/pull/13372\">#13372</a> be merged quickly?</p>",
        "id": 278626028,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649716503
    },
    {
        "content": "<p>Could someone put <a href=\"https://github.com/leanprover-community/mathlib/pull/13170\">#13170</a> back on the queue now that it's quieter?</p>",
        "id": 278663277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649752812
    },
    {
        "content": "<p>done</p>",
        "id": 278664584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649753591
    },
    {
        "content": "<p>Yet <a href=\"https://github.com/leanprover-community/mathlib/runs/5986616611?check_suite_focus=true\">another timeout in <code>category_theory.preadditive.biproducts</code></a> <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 278675025,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649760140
    },
    {
        "content": "<p>Is this how mathlib is gonna die? crippled by category theory timeouts?</p>",
        "id": 278675036,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649760158
    },
    {
        "content": "<p>Ouch...</p>",
        "id": 278675343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649760428
    },
    {
        "content": "<p>Assuming timeouts are deterministic, it would be great to have a table of how many heartbeats each def/lemma takes at the moment so people can work on optimizing them before disaster strikes.</p>",
        "id": 278675472,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1649760534
    },
    {
        "content": "<p>\"Deterministic\" timeouts are unfortunately rarely deterministic...</p>",
        "id": 278675524,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649760588
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.biprod.column_nonzero_of_iso\">docs#category_theory.biprod.column_nonzero_of_iso</a> indeed takes a whopping 76s to elaborate.</p>",
        "id": 278675630,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649760664
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13383\">#13383</a>. Once again it's a decidability issue.</p>",
        "id": 278676118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649761015
    },
    {
        "content": "<p>We're also exceeding the API rate <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 278676282,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649761101
    },
    {
        "content": "<p><code>by_contradiction</code> is a huge gotcha. I often just stick <code>classical</code> in front of it before using it.</p>",
        "id": 278676902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649761499
    },
    {
        "content": "<p><code>by_contra'</code> avoids the decidability check entirely, right?</p>",
        "id": 278676939,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649761533
    },
    {
        "content": "<p>If the proof now takes 2 seconds instead of 76 then it must be doing _something_ differently but I don't know what.</p>",
        "id": 278677278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649761702
    },
    {
        "content": "<p>I'm hitting <a href=\"https://github.com/leanprover-community/mathlib/runs/6249399845?check_suite_focus=true\">a timeout</a> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/AffineScheme.Spec\">docs#AffineScheme.Spec</a> (38.5s of decl post-processing) and I don't know how to fix it. Could anyone take a look? Is decl post-processing the attribute applications? <code>Spec</code> is tagged with <code>@[derive [full, faithful, ess_surj], simps]</code>.</p>",
        "id": 280817029,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651443363
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span></p>",
        "id": 280817036,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651443372
    },
    {
        "content": "<p>Okay it's clearly <code>simps</code> going mad.</p>",
        "id": 280817119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651443506
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13866\">#13866</a></p>",
        "id": 280817446,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651444076
    },
    {
        "content": "<p>Note that <code>@[simps]</code> calls <code>simp</code> on the right-hand side in the case that the right-hand side is not a construction application (to figure out what the definition should reduce to). In cases where <code>simp</code> is slow, this means that adding the <code>@[simps]</code> attribute is also slow.</p>",
        "id": 280862617,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651491727
    },
    {
        "content": "<p>I'm wondering how much compile time goes into those slow declarations. If each of them takes 30s, it would add up quick...</p>",
        "id": 280863454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651492295
    },
    {
        "content": "<p>Yeah, that might be worth investigating. <code>@[simps]</code> should not be automatically added to all declarations that are not constructor applications, since I think that in many cases you won't use those simp lemmas much.</p>",
        "id": 280864539,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651492885
    }
]