[
    {
        "content": "<p>Here's a minimal working error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fri_poly</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fri_poly</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>equation compiler failed to generate bytecode for 'fri_poly._main' nested exception message: code generation failed, VM does not have code for 'classical.choice'</code></p>\n<p>How exactly does this definition depend on choice?</p>",
        "id": 290792000,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1658770012
    },
    {
        "content": "<p>Probably to add polynomials</p>",
        "id": 290792191,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658770108
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fri_poly</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fri_poly</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fri_poly</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>still fails thoguh</p>",
        "id": 290792452,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658770243
    },
    {
        "content": "<p>Well ℕ is not a field</p>",
        "id": 290793207,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1658770663
    },
    {
        "content": "<p>I assume that one is due to the coercion (it probably wants to determine whether the coefficient is nonzero)</p>",
        "id": 290794836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658771480
    },
    {
        "content": "<p>Fails in what way <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>?</p>",
        "id": 290796059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658772134
    },
    {
        "content": "<p><code>#eval fri_poly 1 (1 : polynomial ℚ) /- code generation failed, VM does not have code for 'classical.choice' -/</code><br>\n<code>#eval fri_poly 1 (0 : polynomial ℚ) /- result type does not have an instance of type class 'has_repr', dumping internal representation   (fri_poly._main (#0 #0 (_main._lambda_1)) (#0 (rat.add._main) (#0 ... (omitted) -/</code><br>\nI think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.has_one\">docs#polynomial.has_one</a> uses the classical decidability instance (via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.single\">docs#finsupp.single</a>) while <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.has_zero\">docs#polynomial.has_zero</a> doesn't.</p>",
        "id": 290799626,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658773703
    },
    {
        "content": "<p><code>code generation failed</code> is an internal error, suggesting that the noncomputability checker is not working correctly for this example. It has to do with the equation compiler creating an auxiliary definition that needs to be compiled.</p>\n<p>The easy short-term fix is to put <code>noncomputable!</code> on the definition to force everything to be noncomputable, which should hopefully work here.</p>",
        "id": 290808962,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658778292
    },
    {
        "content": "<p>The reason for choice here is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.has_one\">docs#polynomial.has_one</a> is noncomputable</p>",
        "id": 290811496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658779626
    }
]