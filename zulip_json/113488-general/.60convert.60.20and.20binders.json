[
    {
        "content": "<p>Preparing teaching. What's a good way to kill this goal? Do I have to use <code>simp_rw</code> to rewrite under binders? That's not very beginner-friendly :-/ Why doesn't <code>convert</code> get to the heart of the matter? I have a vague memory of asking the same question this time last year...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_neg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n       <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- expecting goals `⊢ a n = -a n` and `⊢ t = -t`, and then `convert ha using 3` or whatever</span>\n  <span class=\"c1\">-- would be `|a n - t| = |-a n - -t|`</span>\n  <span class=\"c1\">-- Instead, get</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  (∀ (ε : ℝ), 0 &lt; ε → (∃ (B : ℕ), ∀ (n : ℕ), B ≤ n → |-a n - -t| &lt; ε)) =</span>\n<span class=\"cm\">   ∀ (ε : ℝ), 0 &lt; ε → (∃ (B : ℕ), ∀ (n : ℕ), B ≤ n → |a n - t| &lt; ε)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319963580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673100573
    },
    {
        "content": "<p>I'm guessing that was <a href=\"#narrow/stream/113488-general/topic/beefing.20up.20.60convert.60\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/beefing.20up.20.60convert.60</a></p>",
        "id": 319972197,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673104092
    },
    {
        "content": "<p>You're early this year :)</p>",
        "id": 319972305,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673104147
    },
    {
        "content": "<p>But nobody PRed the tactic :-(</p>",
        "id": 319973414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673104578
    },
    {
        "content": "<p>Not entirely there, but you can follow <code>convert</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/congrm\">docs#congrm</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.congrm</span>  <span class=\"c1\">-- &lt;--  new import!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_neg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n       <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- expecting goals `⊢ a n = -a n` and `⊢ t = -t`, and then `convert ha using 3` or whatever</span>\n  <span class=\"c1\">-- would be `|a n - t| = |-a n - -t|`</span>\n  <span class=\"c1\">-- Instead, get</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  (∀ (ε : ℝ), 0 &lt; ε → (∃ (B : ℕ), ∀ (n : ℕ), B ≤ n → |-a n - -t| &lt; ε)) =</span>\n<span class=\"cm\">   ∀ (ε : ℝ), 0 &lt; ε → (∃ (B : ℕ), ∀ (n : ℕ), B ≤ n → |a n - t| &lt; ε)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">congrm</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span>\n<span class=\"c1\">-- ⊢ |-a n - -t| = |a n - t|</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320132585,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673224100
    },
    {
        "content": "<p>It'd be nice to have a syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">convertm</span> <span class=\"n\">ha</span> <span class=\"n\">using</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 320143731,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673234209
    },
    {
        "content": "<p>Heather, this would probably be easy to implement.</p>\n<p>I wonder whether it would be possible to also avoid having to rewrite all the common parts of the two expressions, although there should be a mechanism to prevent lean from also entering the <code>| |</code>...</p>",
        "id": 320154946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673244995
    }
]