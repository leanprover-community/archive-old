[
    {
        "content": "<p>Would it be evil to teach <code>rw</code> about <code>ne.def</code>? I find it quite frustrating that <code>rw</code> fails because I have <code>\\ne</code> instead of a <code>\\not _ = _</code> or vice versa.</p>",
        "id": 209591927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599707468
    },
    {
        "content": "<p>I guess to combat the evilness we want a story for how to avoid scope creep that turns <code>rw</code> into <code>simp_rw</code> or something else it's not supposed to be. Maybe something like \"we teach it only about 'basic logic synonyms'\"?</p>",
        "id": 209625901,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1599737916
    },
    {
        "content": "<p>What's an example where this is an issue? As far as I can tell <code>ne</code> is reducible and <code>rw</code> should already look through reducible things.</p>",
        "id": 209627006,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599738631
    },
    {
        "content": "<p>If you have <code>\\not n = 0</code>, and you want to <code>rw \\l nat.pos_iff_ne_zero</code>, that seems to fail. Let me build a mwe</p>",
        "id": 209627089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599738700
    },
    {
        "content": "<p>I guess there are two possible cases: the goal contains <code>a \\ne b</code> but you want to rewrite using a lemma that says <code>a = b \\iff ...</code>; or the goal contains <code>\\not (a = b)</code> but you want to rewrite using a lemma that says <code>a \\ne b \\iff</code></p>",
        "id": 209627106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599738719
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.nat.basic%0A%0Aexample%20%28n%20%3A%20%E2%84%95%29%20%28h%20%3A%20%C2%AC%20n%20%3D%200%29%20%3A%20n%20%3E%200%20%3A%3D%0Abegin%0A%20%20rw%20%E2%86%90%20nat.pos_iff_ne_zero%20at%20h%2C%0Aend\">https://leanprover-community.github.io/lean-web-editor/#code=import%20data.nat.basic%0A%0Aexample%20%28n%20%3A%20%E2%84%95%29%20%28h%20%3A%20%C2%AC%20n%20%3D%200%29%20%3A%20n%20%3E%200%20%3A%3D%0Abegin%0A%20%20rw%20%E2%86%90%20nat.pos_iff_ne_zero%20at%20h%2C%0Aend</a></p>",
        "id": 209627231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599738812
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">ne1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">ne2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ne2</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ne1</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>They're both failing for me.</p>",
        "id": 209627335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599738879
    },
    {
        "content": "<p>I wonder what <code>md := reducible</code> in <code>rewrite_cfg</code> does then</p>",
        "id": 209627407,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599738927
    },
    {
        "content": "<p>actually even <code>erw</code> fails, and even if you tell it <code>n</code></p>",
        "id": 209627496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599738980
    },
    {
        "content": "<p>Has this always been the case?</p>",
        "id": 209638698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599744484
    }
]