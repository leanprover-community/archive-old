[
    {
        "content": "<p>What's going on with this diamond, and why is <code>dunfold</code> enough to solve it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.type_tags</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">multiplicative.mul_one_class</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">multiplicative.mul_one_class</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">has_one.one</span> <span class=\"n\">multiplicative.mul_one_class</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>  <span class=\"c1\">-- ok</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266824443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641311652
    },
    {
        "content": "<p>Could you post a <code>trace.type_context.is_def_eq_detail</code> trace? I assume it's either something irreducible blocking unification, or <code>is_def_eq</code> going down the wrong path and committing to it.</p>",
        "id": 266824568,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641311741
    },
    {
        "content": "<p>Sure:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>[type_context.is_def_eq_detail] process_assignment ?m_1 := ℕ\n[type_context.is_def_eq_detail] assign: ?m_1 := ℕ\n[type_context.is_def_eq_detail] [1]: monoid (multiplicative ℕ) =?= monoid ?m_1\n[type_context.is_def_eq_detail] [2]: monoid =?= monoid\n[type_context.is_def_eq_detail] process_assignment ?m_1 := multiplicative ℕ\n[type_context.is_def_eq_detail] assign: ?m_1 := multiplicative ℕ\n[type_context.is_def_eq_detail] process_assignment ?m_1 := multiplicative ℕ\n[type_context.is_def_eq_detail] assign: ?m_1 := multiplicative ℕ\n[type_context.is_def_eq_detail] process_assignment ?m_1 := multiplicative.comm_monoid\n[type_context.is_def_eq_detail] [1]: comm_monoid ?m_1 =?= comm_monoid (multiplicative ℕ)\n[type_context.is_def_eq_detail] [2]: comm_monoid =?= comm_monoid\n[type_context.is_def_eq_detail] assign: ?m_1 := multiplicative.comm_monoid\n[type_context.is_def_eq_detail] [1]: monoid ?m_1 =?= monoid (multiplicative ℕ)\n[type_context.is_def_eq_detail] [2]: monoid =?= monoid\n[type_context.is_def_eq_detail] [2]: multiplicative ℕ =?= multiplicative ℕ\n[type_context.is_def_eq_detail] process_assignment ?m_1 := mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] assign: ?m_1 := mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] [1]: mul_one_class (multiplicative ℕ) =?= mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] [2]: mul_one_class =?= mul_one_class\n[type_context.is_def_eq_detail] [2]: multiplicative ℕ =?= multiplicative ℕ\n[type_context.is_def_eq_detail] process_assignment ?m_1 := monoid.to_mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] assign: ?m_1 := monoid.to_mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] [1]: mul_one_class (multiplicative ℕ) =?= mul_one_class (multiplicative ?m_1)\n[type_context.is_def_eq_detail] [2]: mul_one_class =?= mul_one_class\n[type_context.is_def_eq_detail] [2]: multiplicative ℕ =?= multiplicative ?m_1\n[type_context.is_def_eq_detail] process_assignment ?m_1 := ℕ\n[type_context.is_def_eq_detail] assign: ?m_1 := ℕ\n[type_context.is_def_eq_detail] process_assignment ?m_1 := add_monoid.to_add_zero_class ℕ\n[type_context.is_def_eq_detail] [1]: add_zero_class ?m_1 =?= add_zero_class ℕ\n[type_context.is_def_eq_detail] [2]: add_zero_class =?= add_zero_class\n[type_context.is_def_eq_detail] assign: ?m_1 := add_monoid.to_add_zero_class ℕ\n[type_context.is_def_eq_detail] [1]: mul_one_class (multiplicative ?m_1) =?= mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] [2]: mul_one_class =?= mul_one_class\n[type_context.is_def_eq_detail] [2]: multiplicative ?m_1 =?= multiplicative ℕ\n[type_context.is_def_eq_detail] process_assignment ?m_1 := multiplicative.mul_one_class\n[type_context.is_def_eq_detail] assign: ?m_1 := multiplicative.mul_one_class\n[type_context.is_def_eq_detail] [1]: monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class =?= ?m_7 = ?m_7\n[type_context.is_def_eq_detail] [2]: eq =?= eq\n[type_context.is_def_eq_detail] process_assignment ?m_1 := mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] assign: ?m_1 := mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] process_assignment ?m_1 := monoid.to_mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] assign: ?m_1 := monoid.to_mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] [2]: multiplicative.mul_one_class =?= monoid.to_mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] [3]: {one := 1, mul := has_mul.mul multiplicative.has_mul, one_mul := _, mul_one := _} =?= {one := monoid.one (comm_monoid.to_monoid (multiplicative ℕ)),\n mul := monoid.mul (comm_monoid.to_monoid (multiplicative ℕ)),\n one_mul := _,\n mul_one := _}\n[type_context.is_def_eq_detail] [4]: mul_one_class.mk =?= mul_one_class.mk\n[type_context.is_def_eq_detail] [4]: 1 =?= monoid.one\n[type_context.is_def_eq_detail] [5]: ⇑multiplicative.of_add 0 =?= comm_monoid.one\n[type_context.is_def_eq_detail] unfold left: coe_fn\n[type_context.is_def_eq_detail] [6]: has_coe_to_fun.coe multiplicative.of_add 0 =?= comm_monoid.one\n[type_context.is_def_eq_detail] [7]: multiplicative.of_add.to_fun 0 =?= monoid.one\n[type_context.is_def_eq_detail] [8]: (λ (x : ?m_1), x) 0 =?= 1\n[type_context.is_def_eq_detail] after whnf_core: 0 =?= 1\n[type_context.is_def_eq_detail] on failure: {one := 1, mul := has_mul.mul multiplicative.has_mul, one_mul := _, mul_one := _} =?= {one := monoid.one (comm_monoid.to_monoid (multiplicative ℕ)),\n mul := monoid.mul (comm_monoid.to_monoid (multiplicative ℕ)),\n one_mul := _,\n mul_one := _}\n[type_context.is_def_eq_detail] on failure: monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class =?= ?m_7 = ?m_7\n[type_context.is_def_eq_detail] [1]: ?m_2 = ?m_2 =?= monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class\n[type_context.is_def_eq_detail] [2]: eq =?= eq\n[type_context.is_def_eq_detail] process_assignment ?m_1 := mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] assign: ?m_1 := mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] process_assignment ?m_1 := monoid.to_mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] assign: ?m_1 := monoid.to_mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] [2]: monoid.to_mul_one_class (multiplicative ℕ) =?= multiplicative.mul_one_class\n[type_context.is_def_eq_detail] [3]: {one := monoid.one (comm_monoid.to_monoid (multiplicative ℕ)),\n mul := monoid.mul (comm_monoid.to_monoid (multiplicative ℕ)),\n one_mul := _,\n mul_one := _} =?= {one := 1, mul := has_mul.mul multiplicative.has_mul, one_mul := _, mul_one := _}\n[type_context.is_def_eq_detail] [4]: mul_one_class.mk =?= mul_one_class.mk\n[type_context.is_def_eq_detail] [4]: monoid.one =?= 1\n[type_context.is_def_eq_detail] [5]: comm_monoid.one =?= ⇑multiplicative.of_add 0\n[type_context.is_def_eq_detail] unfold right: coe_fn\n[type_context.is_def_eq_detail] [6]: comm_monoid.one =?= has_coe_to_fun.coe multiplicative.of_add 0\n[type_context.is_def_eq_detail] [7]: monoid.one =?= multiplicative.of_add.to_fun 0\n[type_context.is_def_eq_detail] [8]: 1 =?= (λ (x : ?m_1), x) 0\n[type_context.is_def_eq_detail] after whnf_core: 1 =?= 0\n[type_context.is_def_eq_detail] on failure: {one := monoid.one (comm_monoid.to_monoid (multiplicative ℕ)),\n mul := monoid.mul (comm_monoid.to_monoid (multiplicative ℕ)),\n one_mul := _,\n mul_one := _} =?= {one := 1, mul := has_mul.mul multiplicative.has_mul, one_mul := _, mul_one := _}\n[type_context.is_def_eq_detail] on failure: ?m_2 = ?m_2 =?= monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class\n[type_context.is_def_eq_detail] process_assignment ?x_1 := monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class\n[type_context.is_def_eq_detail] assign: ?x_1 := monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class\n[type_context.is_def_eq_detail] process_assignment ?x_0 := ?m_2 = ?m_2\n[type_context.is_def_eq_detail] assign: ?x_0 := ?m_2 = ?m_2\n[type_context.is_def_eq_detail] [1]: ?m_2 = ?m_2 =?= monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class\n[type_context.is_def_eq_detail] [2]: eq =?= eq\n[type_context.is_def_eq_detail] process_assignment ?m_1 := mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] assign: ?m_1 := mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] process_assignment ?m_1 := monoid.to_mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] assign: ?m_1 := monoid.to_mul_one_class (multiplicative ℕ)\n[type_context.is_def_eq_detail] [2]: monoid.to_mul_one_class (multiplicative ℕ) =?= multiplicative.mul_one_class\n[type_context.is_def_eq_detail] [3]: {one := monoid.one (comm_monoid.to_monoid (multiplicative ℕ)),\n mul := monoid.mul (comm_monoid.to_monoid (multiplicative ℕ)),\n one_mul := _,\n mul_one := _} =?= {one := 1, mul := has_mul.mul multiplicative.has_mul, one_mul := _, mul_one := _}\n[type_context.is_def_eq_detail] [4]: mul_one_class.mk =?= mul_one_class.mk\n[type_context.is_def_eq_detail] [4]: monoid.one =?= 1\n[type_context.is_def_eq_detail] [5]: comm_monoid.one =?= ⇑multiplicative.of_add 0\n[type_context.is_def_eq_detail] unfold right: coe_fn\n[type_context.is_def_eq_detail] [6]: comm_monoid.one =?= has_coe_to_fun.coe multiplicative.of_add 0\n[type_context.is_def_eq_detail] [7]: monoid.one =?= multiplicative.of_add.to_fun 0\n[type_context.is_def_eq_detail] [8]: 1 =?= (λ (x : ?m_1), x) 0\n[type_context.is_def_eq_detail] after whnf_core: 1 =?= 0\n[type_context.is_def_eq_detail] on failure: {one := monoid.one (comm_monoid.to_monoid (multiplicative ℕ)),\n mul := monoid.mul (comm_monoid.to_monoid (multiplicative ℕ)),\n one_mul := _,\n mul_one := _} =?= {one := 1, mul := has_mul.mul multiplicative.has_mul, one_mul := _, mul_one := _}\n[type_context.is_def_eq_detail] on failure: ?m_2 = ?m_2 =?= monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class\n[type_context.is_def_eq_detail] process_assignment ?x_1 := monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class\n[type_context.is_def_eq_detail] assign: ?x_1 := monoid.to_mul_one_class (multiplicative ℕ) = multiplicative.mul_one_class\n[type_context.is_def_eq_detail] process_assignment ?x_0 := ?m_2 = ?m_2\n[type_context.is_def_eq_detail] assign: ?x_0 := ?m_2 = ?m_2\n</code></pre></div>\n</div></div>",
        "id": 266824680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641311788
    },
    {
        "content": "<p>Interestingly I can fix it by adding <code>one := 1</code> in a few places, but then the <code>dunfold</code> version breaks instead!</p>",
        "id": 266825856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641312248
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicative\">docs#multiplicative</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicative.comm_monoid\">docs#multiplicative.comm_monoid</a></p>",
        "id": 266825956,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641312302
    },
    {
        "content": "<p>It's a bit weird that it gives up on <code>1 =?= 0</code> without delta-reducing, since both sides should be projections out of a known structure.</p>",
        "id": 266826380,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641312487
    },
    {
        "content": "<p>Yeah, it's very weird</p>",
        "id": 266826907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641312744
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/mathlib/pull/11240\">#11240</a> to try out a fix, but maybe it's worth fixing a deeper problem here</p>",
        "id": 266826978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641312763
    },
    {
        "content": "<p>More minimized version, using the expression where whnf got stuck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.type_tags</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.type_context.is_def_eq_detail</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">multiplicative.has_one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.add_comm_monoid</span><span class=\"o\">))))</span>\n     <span class=\"bp\">=</span> <span class=\"n\">nat.zero</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I can't see any irreducibility setting which would interfere with reducing the left hand side, so it looks like an elaborator bug. The left hand side does <code>#reduce</code> to <code>nat.zero</code>.</p>",
        "id": 266830698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641313859
    }
]