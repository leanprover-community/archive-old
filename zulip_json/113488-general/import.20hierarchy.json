[
    {
        "content": "<p>Suppose I want to state the lemma that if <code>A</code> is nonempty and <code>R</code> is a ring of char p then <code>A -&gt; R</code> is a ring of char p.</p>",
        "id": 213647577,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602934035
    },
    {
        "content": "<p>The \"char p\" involves the file <code>algebra.char_p</code> and the <code>A -&gt; R</code> involves the file <code>algebra.ring.pi</code></p>",
        "id": 213647586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602934054
    },
    {
        "content": "<p>currently I believe the two files do not import each other</p>",
        "id": 213647631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602934089
    },
    {
        "content": "<p>so is there a way to put this lemma in mathlib without messing up the import hierarchy? or does this not matter at all?</p>",
        "id": 213647639,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602934111
    },
    {
        "content": "<p>My impression is that the way this sort of thing is handled is you just make a new file and import them both, or dump it in a file which imports both.</p>",
        "id": 213648411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602935484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I think in this case it's ok to import <code>alg.ring.pi</code> in <code>alg.char_p</code></p>",
        "id": 213652297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602941803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> then we're making <code>alg.char_p</code> depend on more files</p>",
        "id": 213652433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602942008
    },
    {
        "content": "<p>I think this is a bigger problem than we think, in the sense that we might need an entirely new approach to dealing with hierarchy</p>",
        "id": 213652616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602942278
    },
    {
        "content": "<p>I'm sure issues like this is hidden everywhere in mathlib</p>",
        "id": 213652619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602942287
    },
    {
        "content": "<p>Maybe more segmentation (dividing files into multiple files) is the solution</p>",
        "id": 213652627,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602942303
    },
    {
        "content": "<p>content addressable declarations</p>",
        "id": 213652631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602942305
    },
    {
        "content": "<p>For example, <a href=\"https://github.com/leanprover-community/mathlib/blob/ca2e6f4262e9d0192a562f050e643f4ba1513a17/src/ring_theory/principal_ideal_domain.lean\"><code>ring_theory.principal_ideal_domain</code></a> imports <code>ring_theory.noetherian</code> and <code>ring_theory.unique_factorization_domain</code></p>",
        "id": 213652810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602942576
    },
    {
        "content": "<p>I'm pretty sure you don't need those imports to define PID</p>",
        "id": 213652813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602942589
    },
    {
        "content": "<p>what about smaller files, more directories, and more default.lean files?</p>",
        "id": 213653227,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602943179
    },
    {
        "content": "<p>Sounds like a good idea to me</p>",
        "id": 213653800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602943933
    },
    {
        "content": "<p>This way you could have the option to import giant things (by importing the default file), or little things by importing individual files</p>",
        "id": 213653893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602944101
    },
    {
        "content": "<p>I would still love to see a version of Lean that is similar to <a href=\"http://unisonweb.org\">unisonweb.org</a><br>\nEvery declaration is hashed, and the hash is its stable name. (Before hashing, you also replace all names in the declaration by the hashes that they point to.)</p>",
        "id": 213654101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602944379
    },
    {
        "content": "<p>You dump everything into a database, and you no longer really have directories or files.</p>",
        "id": 213654172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602944425
    },
    {
        "content": "<p>Says the nixos user <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 213654177,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602944437
    },
    {
        "content": "<p>But they do have tooling to \"extract files\" that you can then edit, and push back to the db</p>",
        "id": 213654183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602944446
    },
    {
        "content": "<p>The reason this might be tricky for Lean / mathlib is that we have proof search going on. If all <code>simp</code> and <code>tidy</code> proofs would be replaced by the stable output of <code>squeeze_simp</code> and <code>tidy?</code>, then we might be a lot closer to making this work.</p>",
        "id": 213654219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602944506
    },
    {
        "content": "<p>But then we would get really long and ugly proofs (e.g. in category theory). So I feel like maybe you would need to store multiple layers of proofs.</p>",
        "id": 213654277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602944539
    },
    {
        "content": "<p>And then you quickly go down a rabbit hole of open problems and cute dreams. But nothing that we can actually realise in a short amount of time.</p>",
        "id": 213654288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602944569
    },
    {
        "content": "<p>So probably the more pragmatic solution is what Adam said above: more dirs, more files, more default.lean</p>",
        "id": 213654304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602944591
    },
    {
        "content": "<p>The other pragmatic solution is to ask Mario to make us a Lean layer on top of MM0 so that we have an ITP that compiles mathlib in &lt; 5s, and then we can just dump everything into one file, like <a href=\"http://set.mm\">set.mm</a>.</p>",
        "id": 213654577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602944944
    },
    {
        "content": "<p>Unison sounds really cool BTW</p>",
        "id": 213655211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602945889
    },
    {
        "content": "<p>Just thinking out loud.... How would this hashing AST a la unison work with typeclasses? E.g. how would I define two different category instances on the same type? Right now I would make an alias, and define a new instance on the alias.</p>",
        "id": 213655585,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602946453
    },
    {
        "content": "<p>I think you can make that work, if you have some special <code>type_alias</code> constructor in the language</p>",
        "id": 213655725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602946713
    }
]