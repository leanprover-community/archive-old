[
    {
        "content": "<p>I'm looking to define ⋆-preserving maps (<code>star_hom</code>s), of various flavors. So, I naturally tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">star_hom</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_involutive_star</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_involutive_star</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_star'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[ancestor monoid_hom star_hom]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">star_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_monoid</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">star_hom</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">E</span> <span class=\"n\">F</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> invalid 'structure' header, field 'to_fun' from 'monoid_hom' has already been declared -/</span>\n</code></pre></div>\n<p>I don't understand why the above doesn't work, but in <code>algebra/group/hom</code>, the following (particularly <code>monoid_hom</code>) works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Homomorphism that preserves one -/</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">one_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one'</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Homomorphism that preserves multiplication -/</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mul_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Bundled monoid homomorphisms; use this for bundled group homomorphisms too. -/</span>\n<span class=\"kd\">@[ancestor one_hom mul_hom, to_additive]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">one_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 264416899,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639125969
    },
    {
        "content": "<p>You need <code>set_option old_structure_cmd true</code></p>",
        "id": 264417369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639126243
    },
    {
        "content": "<p>BTW, you might want to check out <a href=\"https://github.com/leanprover-community/mathlib/issues/9888\">#9888</a> (being merged right now) which will change the way the API for morphisms is structured. It'll probably save you a lot of time!</p>",
        "id": 264459470,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1639148691
    },
    {
        "content": "<p>Thanks! Yes, I just saw this. Seems like a fantastic improvement to the API.</p>",
        "id": 264522638,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639178370
    }
]