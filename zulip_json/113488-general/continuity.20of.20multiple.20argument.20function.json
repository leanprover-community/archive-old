[
    {
        "content": "<p>Say I have a function <code>f : a -&gt; a -&gt; a -&gt; a</code> where <code>a</code> is a topological space. How do you prove that it is continuous? Do I have to uncurry it and prove that the uncurried version is continuous on the product space? Given that the category of topological spaces is not cartesian closed, I can't always do this.</p>",
        "id": 264826989,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639471908
    },
    {
        "content": "<p>I suspect you probably want to talk about continuity of the uncurried function.</p>",
        "id": 264833414,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639475585
    },
    {
        "content": "<p>Recall that a function <code>f : α → β → γ</code> (for types <code>α</code>, <code>β</code>, <code>γ</code>) is really a function from <code>α</code> to the type of functions <code>β → γ</code>.</p>",
        "id": 264833494,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639475643
    },
    {
        "content": "<p>Spaces of functions do carry natural topologies and in the locally compact case, the two possible notions will agree. Furthermore Mathlib knows this see: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph.curry\">docs#homeomorph.curry</a></p>",
        "id": 264833590,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639475714
    },
    {
        "content": "<p>I will work in the more general setting of convergence spaces, so I won't need to deal with local compactness. But thanks for that link. That helps. Are you familiar with how mathlib proves continuity of group operations in the case of topological groups?</p>",
        "id": 264834715,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639476384
    },
    {
        "content": "<blockquote>\n<p>Are you familiar with how mathlib proves continuity of group operations in the case of topological groups?</p>\n</blockquote>\n<p>I'm not sure you really mean to ask this question. The proof of continuity of group operations depends on the group so there is no single answer to how Mathlib does this.</p>",
        "id": 264835558,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639476957
    },
    {
        "content": "<p>I suspect you may mean to ask how Mathlib defines topological groups. For this see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_group\">docs#topological_group</a></p>",
        "id": 264835624,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639476984
    },
    {
        "content": "<p>There are two options to express continuity of a function with two (or more) arguments. Either you use the product space:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/monoid.html#continuous_mul\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/monoid.html#continuous_mul</a><br>\nOr you use continuous maps from another arbitrary space:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/monoid.html#continuous.mul\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/monoid.html#continuous.mul</a><br>\nMaybe this latter option is what you are looking for?</p>",
        "id": 264836162,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1639477309
    },
    {
        "content": "<p>Aha, so <code>has_continuous_mul</code> is basically doing it on the product space. I see. That's what I was looking for.</p>",
        "id": 264838050,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639478369
    },
    {
        "content": "<p>So I guess I can't avoid the curry/uncurry friction.</p>",
        "id": 264838191,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639478436
    },
    {
        "content": "<p>Well, you can formulate it as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.mul\">docs#continuous.mul</a>. That avoids the uncurrying.</p>",
        "id": 264839876,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1639479415
    },
    {
        "content": "<p>Alright. Thanks a lot.</p>",
        "id": 264841807,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639480450
    }
]