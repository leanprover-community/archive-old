[
    {
        "content": "<p>Ok this situation is quite complicated here and I'm not sure I understand the whole situation (an import graph would be quite beneficial).</p>\n<p>So I look at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/gcd_domain.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/gcd_domain.lean\">algebra/gcd_domain.lean</a> and think to myself: I should define <code>normalize x</code> to replace <code>x * norm_unit x</code> since that expression is used a lot and should have a name and is actually the whole point of <code>normalization_domain</code> (we don't really care about the unit it multiplies by, right?).</p>\n<p>But this would require lemmas from <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/associated.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/associated.lean\">ring_theory/associated.lean</a> about units and dvd.</p>\n<p>Unfortunately, it imports <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/int/gcd.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/int/gcd.lean\">data/int/gcd.lean</a> which imports algebra.gcd_domain, and this is an essential import in the sense that a majority of the file is based on this import.</p>\n<p>However, <code>data/int/gcd.lean</code> is not an essential import of <code>ring_theory/associated.lean</code>, in the sense that &lt; 10% of the file breaks when I remove that import. Things that break include three theorems which is essentially examples about int and nat, and also a section below about normalization domain.</p>",
        "id": 157348940,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549023697
    },
    {
        "content": "<p>So my proposal is:</p>\n<p>1. remove the import <code>data/int/gcd.lean</code> from <code>ring_theory/associated.lean</code><br>\n2. move <code>ring_theory/associated.lean</code> to <code>algebra/associated.lean</code><br>\n3. add the import <code>algebra/associated.lean</code> to <code>algebra/gcd_domain.lean</code><br>\n4. add <code>normalize</code> in <code>algebra/gcd_domain.lean</code><br>\n5. move the three theorems that break to <code>data/int/gcd.lean</code><br>\n6. move the section that breaks to <code>algebra/gcd_domain.lean</code></p>",
        "id": 157348941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549023700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  do you think this is a good idea? did I miss anything?</p>",
        "id": 157348944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549023707
    },
    {
        "content": "<p>why does <code>int.gcd</code> use <code>algebra.normalization_domain</code>?</p>",
        "id": 157349041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549023831
    },
    {
        "content": "<p>There is no <code>algebra.normalization_domain</code>: it is just <code>algebra.gcd_domain</code>.</p>",
        "id": 157349099,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549023864
    },
    {
        "content": "<p>And that uses that because the whole file is about gcd</p>",
        "id": 157349103,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549023872
    },
    {
        "content": "<p><code>nat.gcd</code> doesn't</p>",
        "id": 157349107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549023883
    },
    {
        "content": "<p>because <code>nat</code> isn't a <code>gcd_domain</code></p>",
        "id": 157349109,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549023897
    },
    {
        "content": "<p>I suppose we can remove the <code>normalization_domain</code> and <code>gcd_domain</code> sections of <code>data/int/gcd.lean</code> and move them to <code>algebra/gcd_domain.lean</code>?</p>",
        "id": 157349239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549024025
    },
    {
        "content": "<p>What do you think?</p>",
        "id": 157349245,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549024032
    },
    {
        "content": "<p>afterall there's a proof that <code>int</code> is <code>euclidean_domain</code> in <code>algebra/euclidean_domain.lean</code> anyway, so this wouldn't be unprecedented</p>",
        "id": 157349263,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549024061
    },
    {
        "content": "<p>my guess is that you can do integer gcd by reference to nat gcd, without bringing in the abstract algebra. But setting that aside, I think that moving  <code>ring_theory.associated</code> to <code>algebra</code> is okay for much of it, but not all; you will probably need to split the file</p>",
        "id": 157349345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549024127
    },
    {
        "content": "<p>Ok I'll experiment on a branch</p>",
        "id": 157349369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549024162
    },
    {
        "content": "<p>I think that <code>data.int.gcd</code> shouldn't bring in anything from <code>ring_theory</code></p>",
        "id": 157349426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549024209
    },
    {
        "content": "<p>I agree</p>",
        "id": 157349455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549024280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> so where should these theorems go?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">irreducible_iff_nat_prime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">a</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime_iff_prime</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"bp\">↔</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime_iff_prime_int</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"bp\">↔</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">def</span> <span class=\"n\">associates_int_equiv_nat</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">associates</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 157351447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549026521
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/normalize/src/pending/default.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/normalize/src/pending/default.lean\">https://github.com/leanprover-community/mathlib/blob/normalize/src/pending/default.lean</a></p>",
        "id": 157351639,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549026724
    },
    {
        "content": "<p>Can one break up file <code>X.lean</code> into <code>X_part_1.lean</code> and <code>X_part_2.lean</code> and then just change <code>X.lean</code> into <code>import X_part_1.lean import X_part_2.lean</code>, and then you have more breathing space to fiddle with imports?</p>",
        "id": 157358389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549033183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what do you think about <a href=\"https://github.com/leanprover/mathlib/issues/668\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/668\">#668</a>?</p>",
        "id": 157947258,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549749353
    },
    {
        "content": "<p>what chris said - summary?</p>",
        "id": 157947328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549749438
    },
    {
        "content": "<p>it's in this zulip thread</p>",
        "id": 157947511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549749727
    },
    {
        "content": "<p>some definitions changed?</p>",
        "id": 157947534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549749839
    },
    {
        "content": "<p>I would chime in and say a Zulip thread is not a summary. It's useful for reference but you should be able to get the gist of the PR without looking at Zulip</p>",
        "id": 157947953,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549750648
    },
    {
        "content": "<p>done <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 157947955,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549750656
    },
    {
        "content": "<p>I think a good rule in future might be that moving stuff around should be in a separate PR from adding any new code, to make review easier.</p>",
        "id": 157948902,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549752393
    },
    {
        "content": "<p>agreed</p>",
        "id": 157948911,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549752454
    },
    {
        "content": "<p>I'll be careful about that in the future</p>",
        "id": 157948914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549752461
    }
]