[
    {
        "content": "<p>Hey,</p>\n<p>I've seen a few people have started working on geometric group theory (mostly Cayley graphs, the word metric, Švarc–Milnor and some coarse geometry afaik). Earlier this year, I tried attacking this without much success and am now getting back to it. I would very much like to start working in a synchronized way with people tackling the same subject, and thus propose to set up some kind of coordination.</p>\n<p>Ideally, we'd have a sort of clear roadmap of what comes before what and what level of generality should be aimed for in each case, but maybe that's too early planning. A typical example of questions which I got bogged down on is: In what setting should the end space of a group be defined. In a sense, graphs are maybe not the most natural/ideal setting to define that, because the \"coarse metric\" aspect gets lost in translation, but then what is? Similar questions got in my way for Cayley graphs (e.g. don't we want to have an <code>emetric</code> space to keep things as general as possible?)<br>\nAnyway, my plans now would be to try to deal with Bass-Serre theory, since it's much more algebraic, and thus probably less prone to this problem of not knowing how to set things down.</p>\n<p>What do you think?</p>",
        "id": 290098362,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1658237317
    },
    {
        "content": "<p>Easy answer for the space of ends: this should first be defined for any topological space. Then given a generating set you get the space of ends of the corresponding Cayley graph (with edges added), and then you have to check that it does not depend on the choice of the generating set. But doing it for any topological space first is important, as this notion also shows up in the classification theorem of surfaces, for instance.</p>",
        "id": 290106561,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658240882
    },
    {
        "content": "<p>That makes sense, though I sort of still have a problem with that, in that I have a feeling getting topology into play when talking about coarse geometry is kind of a wrong direction. As I see it, you can define a topological notion of ends, and a “graphical” one, and they agree when realizing certain well-behaved enough graphs as topological spaces, but does that mean the topological notion really is the most natural one ? Going further in this direction: When talking about ends of a group, I feel like it would be best to have a notion which is more naturally quasi-isometry invariant, or more generally, a coarser notion. Do we really need to do the topological détour, when topology really hasn't much to do with coarse geometry ? We care about large scale stuff, and topology is made for small-scale stuff, no?</p>\n<p>I know there exists a notion of “binary Higson Corona” for coarse structures that, I believe, strictly generalize that of ends of graphs. <br>\nA strategy I had in mind was then to define ends in two ways: a very general one for coarse spaces, and a very restricted one for graphs, and prove that they agree when your graph has the path metric. This would get QI-invariance for free I believe.<br>\nThis strategy brings up the question/problem of maybe directly defining a coarse structure on finitely generated groups, without the metric intermediate representation. And that's where I start to see the analysis paralysis getting closer!</p>",
        "id": 290110131,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1658242293
    },
    {
        "content": "<p>Independent question: maybe GGT people can comment on whether you want noncommutative linearly ordered groups? <a href=\"#narrow/stream/113488-general/topic/Why.20linear_ordered_ring\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Why.20linear_ordered_ring</a></p>",
        "id": 290111382,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658242768
    },
    {
        "content": "<p>It would be super cool indeed to have some Bass-Serre theory <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 290120565,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1658246288
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"466727\">@Jim Fowler</span></p>",
        "id": 290121212,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1658246496
    },
    {
        "content": "<p>I'd love to see Bass-Serre theory.</p>",
        "id": 290124595,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1658247781
    },
    {
        "content": "<p>I guess one can consider <code>mul_action</code>s on graphs which are trees?</p>",
        "id": 290125037,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1658247975
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span></p>",
        "id": 290125957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658248364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466727\">Jim Fowler</span> <a href=\"#narrow/stream/113488-general/topic/Geometric.20Group.20Theory.20coordination.20.3F/near/290125037\">said</a>:</p>\n<blockquote>\n<p>I guess one can consider <code>mul_action</code>s on graphs which are trees?</p>\n</blockquote>\n<p>I think a group action on a graph should be expressed as a <code>mul_action</code> on vertices + a <code>mul_action</code> on edges + the compatibility condition between those two.</p>",
        "id": 290126599,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1658248649
    },
    {
        "content": "<p>For a lot of stuff (e.g. as defined in Lyndon-Schupp) we do not need topology associated to a graph. This matters more to me because I use lean 4 which does not yet have topology, but the principle of keeping things lighter is reasonable anyway.</p>\n<p>For example, one can define graphs and 2-complexes prove stuff like Fenchel-Nielsen theorem and even (with some work) Stalling's topological proof of Grushko's theorem defining fundamental groups and coverings in the category of combinatorial 2-complexes. Serre-Bass also fits in well here, as does ends of groups.</p>",
        "id": 290126617,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658248655
    },
    {
        "content": "<p>The relation to topological spaces is important but parallel to GGT and \"topological methods in group theory\"</p>",
        "id": 290127029,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658248824
    },
    {
        "content": "<p>I also think that this stuff would be more easily expressed with Serre's definition of a (multi)graph rather than the current <code>simple_graph</code>. This has been discussed <a href=\"#narrow/stream/252551-graph-theory/topic/multigraph.20definition/near/222015077\">here</a> but I don't know what this discussion became.</p>",
        "id": 290127394,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1658248966
    },
    {
        "content": "<p>To be totally honest, I planned on getting acquainted with Bass-Serre in parallel to the formalization process, and working with an ad-hoc definition of graphs (Serre's definition with sets E, V, two functions E -&gt; V and an involution on E) before trying to use most of mathlib. In a sense, stay as close to the presentation at hand. Open to changing the plan though.</p>",
        "id": 290127796,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1658249118
    },
    {
        "content": "<p>Let me plug <a href=\"https://github.com/leanprover-community/mathlib/pull/11000\">#11000</a></p>",
        "id": 290173785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658272787
    },
    {
        "content": "<p>I also pushed some code to <code>properties.lean</code> on the geometric-group-theory branch to (badly) define things like <code>residually</code> and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">virtually</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">group_property</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">H.index</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">property</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>It would be nice to be able to say things like <code>virtually is_free_group</code> but <code>is_free_group</code> isn't a <code>Prop</code>.  Are there other instances in mathlib where structure or properties are transformed with adverbs like virtually, residually, etc.?</p>",
        "id": 290192159,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1658290907
    },
    {
        "content": "<p>You can say <code>virtually (λ G, nonempty (is_free_group G))</code> or similar</p>",
        "id": 290198963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658299098
    },
    {
        "content": "<p>By the way, is it better to stick everything to a single <code>group_theory/geometric</code> folder, or should we allow messing with the hierarchy more freely? Say, defining the ends of a graph maybe should still live in <code>combinatorics/graph_theory</code>?</p>",
        "id": 290224947,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1658318172
    },
    {
        "content": "<p>For the purpose of writing stuff, I highly suggest sticking to a single place. You can then put the files in the right place when PRing.</p>",
        "id": 290225141,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658318309
    },
    {
        "content": "<p>I added some code to <code>properties.lean</code> at <a href=\"https://github.com/leanprover-community/mathlib/blob/geometric-group-theory/src/group_theory/geometric/properties.lean#L11-L13\">https://github.com/leanprover-community/mathlib/blob/geometric-group-theory/src/group_theory/geometric/properties.lean#L11-L13</a> which includes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">mul_equiv_respects</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">group_property</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">eq_preserves</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">],</span>\n<span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>since I don't see any other way to ensure that a \"property of a group\" is actually a property of a group up to equivalence of groups.  I'm not super clear how lean and mathlib handle transporting things like <code>Prop</code>s across <code>equiv</code>s.  I still feel like I'm fighting against typeclass inference with the definition of <code>residually</code>.</p>",
        "id": 290269550,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1658338481
    },
    {
        "content": "<p>The philosophy that mathlib adopts is that &lt;some object&gt; properties usually transfer along maps weaker than &lt;some object&gt; isomorphisms. Hence we basically never write down the iso version of the transfer, but rather the weaker one. This means that your <code>mul_equiv_respects</code> is most likely useless, as in practice you won't always have a group isomorphism at hand. Furthermore, your approach is more metatheoretical than it needs to be. Rather than reasoning about properties that transfer, you directly transfer the properties. This is justified because:</p>\n<ul>\n<li>You never talk about properties that <em>don't</em> transfer</li>\n<li>The amount of reasoning done at that level of generality is minimal, so it's innocuous redoing it in each concrete situation.</li>\n</ul>",
        "id": 290312126,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658358746
    },
    {
        "content": "<p>But this last point might be wrong in your case. Maybe you do carry enough reasoning at the metatheoretical level that you wouldn't want to do it for each concrete property.</p>",
        "id": 290312190,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658358817
    },
    {
        "content": "<p>When I started with lean I was utterly convinced that this mul_equiv_respects thing would be crucial in algebra and algebraic geometry, but I was very surprised to find that it didn't seem to be at all.</p>",
        "id": 290318330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658363643
    },
    {
        "content": "<p>Respecting isomorphisms isn't that interesting a predicate on properties, but there are other predicates that are useful in AG, and we are recently seeing <a href=\"https://github.com/leanprover-community/mathlib/pull/14944\">#14944</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/14966\">#14966</a>, and <a href=\"https://github.com/leanprover-community/mathlib/pull/15452\">#15452</a> (these involve properties of morphisms not objects though). It appears that the predicates aren't made into classes yet, and in the case of the last PR the predicate doesn't get a separate definition.</p>",
        "id": 290332268,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658377831
    },
    {
        "content": "<p>I am implementing the type synonyms approach now.</p>",
        "id": 290359003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658399989
    }
]