[
    {
        "content": "<p>Hey! I formulated regular languages and proved the Myhill-Nerode theorem in Lean. The code is right here:<br>\n<a href=\"https://github.com/atarnoam/lean-automata\">https://github.com/atarnoam/lean-automata</a></p>\n<p>If you want to read it and have suggestions, I'd love to hear them!<br>\nI'd also like to upload this to mathlib. Can I have permissions to do pull requests to mathlib? (My github username is atarnoam)</p>",
        "id": 229028678,
        "sender_full_name": "Noam Atar",
        "timestamp": 1614980125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251122\">@Noam Atar</span> Invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>\n<p>I haven't looked at your code yet, but there's a PR in progress on regular languages by <span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span> at <a href=\"https://github.com/leanprover-community/mathlib/issues/6225\">#6225</a>.</p>",
        "id": 229030326,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614981004
    },
    {
        "content": "<p>Oh, interesting! I see he decided to wait for the definition of regularity. I'll wait too then</p>",
        "id": 229031992,
        "sender_full_name": "Noam Atar",
        "timestamp": 1614981806
    },
    {
        "content": "<p>I don't know of anyone other than Fox that is working on regular automata and languages for mathlib right now (please correct me if I'm wrong!), so it would probably make sense for you two to coordinate your efforts.</p>",
        "id": 229032886,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614982224
    },
    {
        "content": "<p>Yes sorry I forgot to close that PR, I think it makes more sence to state regular languages in terms of regular expressions, once we have this then we can state things like M-N and the pumping lemma with it but for now I'd say to get it into mathlib without the <code>is_regular</code></p>",
        "id": 229090387,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1615030184
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"251122\">@Noam Atar</span>, nice work, do you have any documentation or paper explaining details? I would be very interested in the learnings during the experiment. For instance, when I see <a href=\"https://github.com/atarnoam/lean-automata/blob/main/src/regular_languages.lean#L124-L140\">https://github.com/atarnoam/lean-automata/blob/main/src/regular_languages.lean#L124-L140</a> I am puzzled if that was the only way to make it. Yes, I know <a href=\"https://en.wikipedia.org/wiki/Curry–Howard_correspondence\">https://en.wikipedia.org/wiki/Curry–Howard_correspondence</a>, but yet, some decisions probably have reasons behind them.</p>",
        "id": 229104596,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1615043270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span> What part do you mean?</p>",
        "id": 229105274,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615043866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> Hey, I just wrote it for fun and to learn lean. What you asked about is the standard way to build a DFA out of a regular language, as in the proof of M.N. You can read about it here: <a href=\"https://en.wikipedia.org/wiki/Myhill%E2%80%93Nerode_theorem\">https://en.wikipedia.org/wiki/Myhill%E2%80%93Nerode_theorem</a></p>",
        "id": 229105679,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615044156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251122\">@Noam Atar</span> Stating things like <code>instance fintype_language_space_of_regular (l : language α) (M : DFA α σ) [fintype σ] (h : M.accepts = l)  : fintype (space l)</code> which should be easily refactorable when we have a flexible <code>is_regular</code></p>",
        "id": 229111825,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1615049452
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"251122\">@Noam Atar</span>, what is unusual for me is the definition with a tactic mode proof.</p>",
        "id": 229654016,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1615381782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> tactic mode is just a nice way to work to get a term of some type. It doesn't care if that term is a definition or a proof!</p>",
        "id": 229990775,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615536549
    },
    {
        "content": "<p>It matters if you make a definition using a complicated tactic and it turns out to be a completely unwieldy term that you can't reason about easily</p>",
        "id": 229996519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615540051
    },
    {
        "content": "<p>Of course</p>",
        "id": 230169959,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615649954
    },
    {
        "content": "<p>It's a bit awkward how <code>list</code>s are (by their inductive definition) extended on the left and consequently DFAs work that way too. So a word like <code>lean</code> is processed by the DFA in the order <code>n,a,e,l</code>. Any easy way around that?</p>",
        "id": 288993617,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657314563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span>  you could redefine what \"process\" means to process the characters from the front and work your way down the list; this makes more sense to me anyway</p>",
        "id": 289086053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657435206
    },
    {
        "content": "<p>i.e. a DFA processes <code>a :: l</code> if <code>s</code> steps via <code>a</code> to <code>s'</code> and <code>s'</code> processes <code>l</code></p>",
        "id": 289086059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657435254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> well, it's just the opposite convention from most treatments of automata. But yeah, in a way it doesn't matter.</p>",
        "id": 289118267,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657479091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span> I think you misunderstood me. I mean that \"lean\" should be written as <code>[l, e, a, n]</code> and it should be processed in the order <code>l,e,a,n</code></p>",
        "id": 289135557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657505689
    },
    {
        "content": "<p>and this should be ensured by writing the \"DFA processes <code>l</code>\" definition so that elements are pulled from the front of the list instead of the back</p>",
        "id": 289135575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657505750
    },
    {
        "content": "<p>since <code>DFA.eval_from</code> uses <code>foldl</code>, isn't it already pulling elements from the \"front\"?</p>",
        "id": 289136937,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657507547
    },
    {
        "content": "<p>oh I guess you mean that the input list has to be constructed via prepends... but the folding itself works left-to-right</p>",
        "id": 289136991,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657507617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> Anyway there is <a href=\"https://github.com/leanprover-community/mathlib/blob/00dbc7b27bf4a4d2b0990d95e555de0bf23dce8a/src/computability/NFA.lean#L55\">eval_from_append_singleton</a> which lets you work in the expected direction</p>",
        "id": 289491221,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657732329
    }
]