[
    {
        "content": "<p>It is my great pleasure to announce the <em>crowning</em> pinnacle of the latest release cycle of the Lean community fork, Lean 3.7.0.  This release focused on bringing new and exciting features to the C++ codebase, including:</p>\n<ul>\n<li>simp can now rewrite in subsingletons (<span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>)</li>\n<li><code>(+)</code> now unifies with <code>(λ x y, x + y)</code> (<span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>)</li>\n<li>the <code>apply</code> tactic now synthesizes type class arguments in the right order (<span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>)</li>\n<li><code>touch **/*.olean</code> is finally a thing of the past (<span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>)</li>\n<li>metaprogramming API for <code>protected</code> definitions (<span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>)</li>\n<li>metaprogramming API for persistent attributes (<span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>)</li>\n<li>fixed coercion from <code>parser</code> to <code>tactic</code>(original PR from <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>)</li>\n<li>typeclass arguments for instances are resolved right-to-left (like in Lean 4)</li>\n<li>typeclass resolution skips instances that have already been assigned via unification</li>\n<li><code>simp</code> no longer fails if an exception occurs during type class resolution</li>\n</ul>",
        "id": 190534276,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584121677
    },
    {
        "content": "<p>The accompanying mathlib PR is also ready: <a href=\"https://github.com/leanprover-community/mathlib/issues/2106\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2106\">#2106</a></p>",
        "id": 190534427,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584121727
    },
    {
        "content": "<p>Thanks for all your work on this!</p>",
        "id": 190534431,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584121729
    },
    {
        "content": "<p>Congratulations! What is the parser to tactic thing?</p>",
        "id": 190534614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584121802
    },
    {
        "content": "<p>Lean tactics can specify a parser for their arguments (this is how the left-arrows etc. work).  Inside a parser, you can call a tactic.  Previously you would get a VM exception if this tactic failed.  So mathlib included a <code>parser.of_tactic'</code> function as a workaround.  Now this workaround is no longer necessary (and removed in <a href=\"https://github.com/leanprover-community/mathlib/issues/2106\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2106\">#2106</a>).</p>",
        "id": 190534961,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584121954
    },
    {
        "content": "<p>The typeclass changes look very interesting.</p>",
        "id": 190536082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584122569
    },
    {
        "content": "<p>Does it mean we should revert <a href=\"https://github.com/leanprover-community/mathlib/issues/877\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/877\">#877</a>?</p>",
        "id": 190536403,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1584122735
    },
    {
        "content": "<p>I'm not sure if they are a completely positive change, the mathlib build time has increased by a few minutes with the change to 3.7.0 (but this might also be to the other changes).  But they fix some real issues: for example issue <a href=\"https://github.com/leanprover-community/mathlib/issues/1561\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1561\">#1561</a> about the <code>has_scalar ℝ (ℝ → ℝ)</code> instance now works as expected after the change.</p>",
        "id": 190536423,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584122746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/Lean.203.2E7.2E0.20released!/near/190536403\" title=\"#narrow/stream/113488-general/topic/Lean.203.2E7.2E0.20released!/near/190536403\">said</a>:</p>\n<blockquote>\n<p>Does it mean we should revert <a href=\"https://github.com/leanprover-community/mathlib/issues/877\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/877\">#877</a>?</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 190536509,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584122785
    },
    {
        "content": "<p>But the underlying issue is exactly the same as before: the instances need to be in the right order.  In Lean &lt;=3.6, this meant that the most specific instance should come first.  In Lean &gt;=3.7, the most specific instance should come last.</p>",
        "id": 190536581,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584122836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> After <a href=\"https://github.com/leanprover-community/lean/pull/140\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/140\">https://github.com/leanprover-community/lean/pull/140</a> does Lean now require the .lean files to be around in addition to the .olean files for imports to work?</p>",
        "id": 190659957,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584296460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> and I have been trying to get to the bottom of some issues with the web editor with Lean 3.7.0 and we're running into some trouble which I think is related to that PR. After we add the .lean files to the library.zip bundle, the Lean server seems to work on the first run, but making edits or hovering leads to a bunch of errors (like <code>\"Error: ENOENT: No such file or directory., '/init.lean'\"</code>).</p>\n<p>I take it Lean 3.7.0 has been working fine in VS Code? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 190661913,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584298865
    },
    {
        "content": "<p>Well, yes, that's how I ported mathlib.  I didn't check, but your suspicion seems plausible.  What happens if you include the <code>*.lean</code> files in <code>library.zip</code>?</p>",
        "id": 190662027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584299002
    },
    {
        "content": "<p>We did include the .lean files in library.zip, but then we ran into this other error (where it tries to look for <code>/init.lean</code>).</p>",
        "id": 190662041,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584299037
    },
    {
        "content": "<p>Ah I missed that, sorry.</p>",
        "id": 190662129,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584299137
    },
    {
        "content": "<p>If you clone <a href=\"https://github.com/bryangingechen/lean-web-editor\" target=\"_blank\" title=\"https://github.com/bryangingechen/lean-web-editor\">https://github.com/bryangingechen/lean-web-editor</a>, run </p>\n<div class=\"codehilite\"><pre><span></span>npm install\n./node_modules/.bin/webpack-dev-server\n</pre></div>\n\n\n<p>and then unzip <a href=\"/user_uploads/3121/6qoRbLWkMtKe0NBpDP20xUFo/dist.zip\" target=\"_blank\" title=\"dist.zip\">dist.zip</a> into the <code>dist/</code> folder before opening <code>localhost:8080</code> you should be able to reproduce what we've been seeing.</p>",
        "id": 190662291,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584299335
    },
    {
        "content": "<p>I'll leave this to <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>.</p>",
        "id": 190662442,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584299538
    },
    {
        "content": "<p>Hold fire with this. I think it's more likely I didn't build the wasm properly.</p>",
        "id": 190669336,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1584310057
    },
    {
        "content": "<p>I did absolutely assume .lean files would exist when making that change - I'll fix this ASAP, sorry! However, it's not currently clear to me why it would fail even if they <em>are</em> present. I'll try to always test changes with the web editor as well from now on, since the CI doesn't cover it (could it?).</p>",
        "id": 190679260,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1584326634
    },
    {
        "content": "<p>Yeah, I'm not sure what happened when we included the .lean files and I haven't yet tried using the official 3.7.0 browser builds, so it's possible that it's due to some issue with Ed's build.</p>",
        "id": 190679465,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584327016
    },
    {
        "content": "<p>OK, I just tried out the browser build of Lean 3.7.0c from the <a href=\"https://github.com/leanprover-community/lean/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/releases\">releases page</a> with the Lean web editor and it works, provided I include the .lean files in the library.zip. If I don't include the .lean files then it fails to import <code>init</code>.</p>",
        "id": 190680172,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584327843
    },
    {
        "content": "<p>Okay! I'll PR a fix to read .oleans even if no source files are present, so that they don't have to exist in the web bundle.</p>",
        "id": 190680600,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1584328400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Just tried the browser build of Lean 3.7.1c and it works perfectly without .lean files in the ZIP! Thanks so much for the quick fix!</p>",
        "id": 190790729,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584399757
    },
    {
        "content": "<p>Great! np</p>",
        "id": 190794725,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1584403168
    }
]