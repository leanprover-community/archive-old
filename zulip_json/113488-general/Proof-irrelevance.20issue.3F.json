[
    {
        "content": "<p>Hi,</p>\n<p>I am a bit confused by Lean's behavior here. I have a theorem:</p>\n<p>`<br>\nvariables p q : Prop</p>\n<p>theorem mytheorem (hp : p) (hq : q) : p ∧ q ∧ p :=<br>\nbegin<br>\n  apply and.intro,<br>\n  exact hp,<br>\n  apply and.intro,<br>\n  exact hq,<br>\n  exact hp<br>\nend<br>\n`</p>\n<p>It can also be built in forward, like this:</p>\n<p>`<br>\nvariables p q : Prop</p>\n<p>theorem mytheorem_fwd (hp : p) (hq : q) : p → q ∧ p → p ∧ q ∧ p := @and.intro p (and q p)<br>\n`</p>\n<p>but if I want to create a lemma whose proof term is <code>and q p</code> and replace it in the my_theorem proof term, it is not working:</p>\n<p>`<br>\nvariables p q : Prop</p>\n<p>lemma lem : Prop → Prop → Prop := and<br>\nlemma failed_mytheorem : p → q ∧ p → p ∧ q ∧ p := @and.intro p (lem q p)<br>\n`</p>\n<p>The following message is displayed:</p>\n<p><code>\ntype mismatch, term\n  and.intro\nhas type\n  p → lem q p → p ∧ lem q p\nbut is expected to have type\n  p → q ∧ p → p ∧ q ∧ p\n</code></p>\n<p>I suspect that the fact that the type <code>q ∧ p</code> is different from <code>lem</code> (while having the exact same proof terms!) is related to proof irrelevance.<br>\nAm I missing something? Is there a way to create lemmas in the <code>Sort</code> universe without creating new types?</p>",
        "id": 262717007,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1637853076
    },
    {
        "content": "<p>Hint: if you put triple <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> around the lines containing code, it will appear nicely formatted. (Single backticks work for inline text.)</p>",
        "id": 262717497,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637853352
    },
    {
        "content": "<p>Probably the issue is that you define <code>lem</code> as <code>lemma lem</code> instead of <code>def lem</code>: <code>lemma</code> instructs Lean to forget the details of the definition, and only remember the type.</p>",
        "id": 262717613,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637853411
    },
    {
        "content": "<p>This is not quite the same as proof irrelevance: <code>q ∧ p</code> and <code>lem q p</code> are elements of <code>Prop</code>, which is a <code>Type</code>, so they are not considered irrelevant. The <em>elements</em> of <code>q ∧ p</code> and <code>lem q p</code> are all considered equivalent though.</p>",
        "id": 262717774,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637853491
    },
    {
        "content": "<p>In other words, proof irrelevance states if <code>x y : p</code> and <code>p : Prop</code>, then <code>x = y</code>. This is different from the rule if <code>p q : Prop</code> then <code>p = q</code> (which would be contradictory!).</p>",
        "id": 262717882,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637853574
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  ! indeed it is due to <code>def lem</code> vs <code>lemma lem</code><br>\nAnd thanks for the explanation :)</p>",
        "id": 262720744,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1637855239
    }
]