[
    {
        "content": "<p>I saw that <code>squeeze_simp</code> now has a hole command that allows you to replace it with its output. Could we also add a hole command to regular <code>simp</code> that will say \"replace me by <code>squeeze_simp</code>, and after that by the output of <code>squeeze_simp</code>\"?</p>",
        "id": 196054090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588429516
    },
    {
        "content": "<p>Do you mean \"code action\" by \"hole command\"?  (Hole commands are <code>{!!}</code>.)</p>",
        "id": 196054900,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588430829
    },
    {
        "content": "<p>I guess I mean \"code action\". The thing that gives you a <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> in VScode</p>",
        "id": 196055331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588431557
    },
    {
        "content": "<p>I guess hole commands are a special case?</p>",
        "id": 196055336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588431568
    },
    {
        "content": "<p>Or one is implemented via the other?</p>",
        "id": 196055340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588431575
    },
    {
        "content": "<p>There is a code action for hole commands (<code>{!!}</code>).</p>",
        "id": 196055559,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588431881
    },
    {
        "content": "<p>You could add a code action that checks if the word <code>simp</code> is under the cursor and then prompts to prepend <code>squeeze_</code>.</p>",
        "id": 196055593,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588431908
    },
    {
        "content": "<p>But could it do both in one go?</p>",
        "id": 196055657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588431979
    },
    {
        "content": "<p>If you're good with javascript, sure.</p>",
        "id": 196056283,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588432905
    },
    {
        "content": "<p>thats me</p>",
        "id": 196067355,
        "sender_full_name": "Steffan",
        "timestamp": 1588449189
    },
    {
        "content": "<p>why do you need JS for that tho?<br>\nmore like, you don't put JS in Lean, right? x)</p>",
        "id": 196067408,
        "sender_full_name": "Steffan",
        "timestamp": 1588449247
    },
    {
        "content": "<p>The VS code extension is written in TypeScript</p>",
        "id": 196067415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588449268
    },
    {
        "content": "<p>Oh</p>",
        "id": 196067418,
        "sender_full_name": "Steffan",
        "timestamp": 1588449276
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean\" title=\"https://github.com/leanprover/vscode-lean\">https://github.com/leanprover/vscode-lean</a></p>",
        "id": 196067421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588449283
    },
    {
        "content": "<p>Well I don't do that stuff.</p>",
        "id": 196067424,
        "sender_full_name": "Steffan",
        "timestamp": 1588449290
    },
    {
        "content": "<p>like all VS code extensions I guess</p>",
        "id": 196067426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588449290
    },
    {
        "content": "<p>yes, I don't know how to do a vscode extension tho.</p>",
        "id": 196067441,
        "sender_full_name": "Steffan",
        "timestamp": 1588449324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> What you describe sounds possible, though I don't see a non-hacky way to do it. The issue is that I don't know how to get the <code>squeeze_simp</code> output from Lean without modifying the file. It'd be much nicer if we had an interface to have the Lean server evaluate some code without adding it to the file. I guess that's what the hole commands are for, but it's annoying to have to add <code>{!!}</code> whenever we want to use them (and apparently we also can't use them in tactics).</p>\n<p>Anyways I won't have time to tackle it in the near future, but if you open an issue at the vscode-lean repo I'll try and circle back to this when I can. I do think we could try and add more code actions (particularly relating to linting).</p>",
        "id": 196069417,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588452451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> voila: <a href=\"https://github.com/leanprover/vscode-lean/issues/157\" title=\"https://github.com/leanprover/vscode-lean/issues/157\">https://github.com/leanprover/vscode-lean/issues/157</a></p>",
        "id": 196069895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588453251
    }
]