[
    {
        "content": "<p>This may be a strange question, but can anyone think of a way of modelling lists so the <code>append</code> operation becomes definitionally associative?</p>",
        "id": 167736807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560148215
    },
    {
        "content": "<p>(i.e. in the sense that with normal <code>list</code>, <code>list.nil_append</code> is by <code>rfl</code>, but <code>list.append_nil</code> and <code>list.append_assoc</code> are proper theorems)</p>",
        "id": 167736812,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560148250
    },
    {
        "content": "<p>(For context, I just \"proved\" that every monoidal category was monoidally equivalent to a strictly associative one, by building an equivalence to a category whose objects were words in the objects of the original category. To a certain sort of mathematician, this is morally the right proof. However, in Lean it doesn't end up saying quite what you expected: the unitors and associator are not actually identities! Instead they are things like <code>eq_to_hom (list.append_assoc _ _ _)</code>.)</p>",
        "id": 167736888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560148354
    },
    {
        "content": "<p>What happens with maps <code>fin n -&gt; alpha</code>?</p>",
        "id": 167737463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560149324
    },
    {
        "content": "<p>I get that for lists it's not definitional, but how is (e.g.) a unitor not an identity at the end of the day when <code>X</code> and <code>X \\otimes 1</code> are equal on the nose?</p>",
        "id": 167737796,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560149850
    },
    {
        "content": "<p>I don't think <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">M \\otimes_R R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> are equal on the nose, despite every mathematician telling you they are</p>",
        "id": 167738634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560151070
    },
    {
        "content": "<p>Sure, but I think Scott is making the \"strictification\" of a monoidal category using lists, where the point is that in the new category nice things like <code>X</code> and <code>X \\otimes 1</code> being equal actually hold because concatenation of lists is strictly associative.</p>",
        "id": 167739457,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560152060
    },
    {
        "content": "<blockquote>\n<p>This may be a strange question, but can anyone think of a way of modelling lists so the <code>append</code> operation becomes definitionally associative?</p>\n</blockquote>\n<p>Yes, it is true if you use difference lists, although it is not quite true with the <code>dlist</code> implementation in core for reasons I forget off-hand</p>",
        "id": 167741568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560154212
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/strictification/near/127139698\" title=\"#narrow/stream/116395-maths/topic/strictification/near/127139698\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/strictification/near/127139698</a></p>",
        "id": 167741758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560154459
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">A difference list is a function that, given a list, returns the original</span>\n<span class=\"cm\">contents of the difference list prepended to the given list.</span>\n\n<span class=\"cm\">This structure supports `O(1)` `append` and `concat` operations on lists, making it</span>\n<span class=\"cm\">useful for append-heavy uses such as logging and pretty printing.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">dlist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">apply</span>     <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">invariant</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">apply</span> <span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">dlist</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">♯</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">abstract</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Convert a list to a dlist -/</span>\n<span class=\"n\">def</span> <span class=\"n\">of_list</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">append</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"err\">♯</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>I've never seen this before today. It looks to me like some sort of tedious implementation issue ;-)</p>",
        "id": 167742866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560155899
    },
    {
        "content": "<p>wooah is that local notation being used to denote a tactic? What is this <code>abstract</code>?</p>",
        "id": 167742909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560155992
    },
    {
        "content": "<p>So a <code>dlist</code> is a way of changing lists (to be thought of as appending the given list). This does feel like that whole monoid thing that Reid linked to.</p>",
        "id": 167742968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560156046
    },
    {
        "content": "<p>Are two functions defeq if they defeqly agree everywhere?</p>",
        "id": 167743285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560156407
    },
    {
        "content": "<p><code>f</code> is equal to <code>λ x, f x</code> definitionally, so I guess that means yes</p>",
        "id": 167743623,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560156900
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">xena</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">dlist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- λ l, l ++ d</span>\n<span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">apply</span> <span class=\"o\">[])</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dlist</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"o\">[]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">apply_def</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">thm</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dlist</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">thm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append_nil</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dlist</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n  <span class=\"n\">thm</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">apply_def</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">apply_def</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">apply_def</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">apply_def</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">dlist</span><span class=\"bp\">.</span><span class=\"n\">append</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"kn\">end</span> <span class=\"n\">xena</span>\n</pre></div>",
        "id": 167745920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560159812
    },
    {
        "content": "<p>I did it the other way to core (they go for <code>d ++ l</code>) and I'm not sure if it matters.</p>",
        "id": 167745975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560159852
    },
    {
        "content": "<p>Can we also have a <code>dnat</code> and <code>dint</code> etc? Where addition is associative by defeq...</p>",
        "id": 167746032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560159935
    },
    {
        "content": "<p>You define dnat to be the function which adds d to a nat.</p>",
        "id": 167746102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560159982
    },
    {
        "content": "<p>The original use for difference lists is to turn some arbitrary tree of appends into right-associated <code>a ++ (b ++ (c ++ ...))</code> which can be computed back to a list in linear time. If you append on the other side then you're always getting the worst case of <code>++</code> rather than always getting the best case.</p>",
        "id": 167746112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560159993
    },
    {
        "content": "<p>But it doesn't matter if your goal is to achieve this strictification</p>",
        "id": 167746151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560160041
    },
    {
        "content": "<p>I would love to have a <code>dint</code> where <code>i</code> is defeq to <code>(i - 1) + 1</code>.</p>",
        "id": 167746331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560160238
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">dint</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">apply</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">dint</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">dint</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 167746726,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560160727
    },
    {
        "content": "<p>I think that if I'd gone the core way then both zero_add and add_zero would be rfl</p>",
        "id": 167746884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560160879
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">dlist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- λ l, d ++ l</span>\n<span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">apply</span> <span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dlist</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"o\">[]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">apply_def</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"bp\">++</span> <span class=\"n\">l</span><span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">thm</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dlist</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">thm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil_append</span> <span class=\"n\">l</span><span class=\"o\">)}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dlist</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n  <span class=\"n\">thm</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">dlist</span><span class=\"bp\">.</span><span class=\"n\">append</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">dlist</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">α</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dlist</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>That's really annoying. How come I have to cases on d for add_zero and zero_add?</p>",
        "id": 167754335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560169443
    },
    {
        "content": "<p>Because one side is a variable and the other side is an application of <code>dlist.mk</code></p>",
        "id": 167754523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560169612
    },
    {
        "content": "<p>And this is different to the add_assoc example?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">dint</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dint</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">d</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- rfl fails</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 167754677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560169781
    },
    {
        "content": "<p>If we had definitional eta for structures then these would become defeq. (Same with unitality of bundled morphisms, functors, etc.)</p>",
        "id": 167754718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560169803
    },
    {
        "content": "<p>In associativity both sides are <code>dlist.mk</code> applications</p>",
        "id": 167754738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560169811
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dint</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>Penny has dropped</p>",
        "id": 167755005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560170052
    },
    {
        "content": "<p>I really hope people don't put this stuff in mathlib</p>",
        "id": 167768638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560180406
    },
    {
        "content": "<p>Ssssssssssssssssssslllllllllllllllllllllllooooooooooooooooooowwwwwwwwwwwwwwwww</p>",
        "id": 167768648,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560180418
    },
    {
        "content": "<p>But so beautiful!</p>",
        "id": 167768862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560180599
    },
    {
        "content": "<p>I think it will just make you more mad about the things that are defeq now vs the things that aren't</p>",
        "id": 167769347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560180910
    },
    {
        "content": "<p>In the limit it seems that all proofs will become rfl. This seems appealing.</p>",
        "id": 167769393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560180942
    },
    {
        "content": "<p>right, that's a false sense</p>",
        "id": 167769400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560180954
    },
    {
        "content": "<p>And if it's slow, just get a faster computer.</p>",
        "id": 167769409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560180956
    },
    {
        "content": "<p>that isn't going to happen with any coding scheme in DTT</p>",
        "id": 167769474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560180974
    },
    {
        "content": "<p>:-(</p>",
        "id": 167769487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560180982
    },
    {
        "content": "<p>and chasing it will make you constructions crazy and not obviously motivated</p>",
        "id": 167769504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560181005
    },
    {
        "content": "<p>Yes, the other part of me wants to say to Scott \"who cares what is defeq and what isn't? This is a weird computer science notion\"</p>",
        "id": 167769542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560181031
    },
    {
        "content": "<p>With extensional type theory you can actually achieve that, at the expense of undecidable type checking</p>",
        "id": 167769556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560181046
    },
    {
        "content": "<p>it's basically saying \"let's call mathematician's equality defeq and call it a day\"</p>",
        "id": 167769577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560181075
    },
    {
        "content": "<p>I was having a conversation with a Coq user over lunch last week (Nicola Gambino, from Leeds) and he said that because Coq doesn't have quotients, you can end up in what is commonly referred to as \"setoid hell\".</p>",
        "id": 167769697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560181172
    },
    {
        "content": "<p>yes</p>",
        "id": 167769711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560181186
    },
    {
        "content": "<p>that has to do with the inability to use lean <code>=</code> to represent other equivalence relations</p>",
        "id": 167769774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560181210
    },
    {
        "content": "<p>And I said \"but you can just make quotients, using sets of equivalence classes, except they have some problems\" and he said \"yeah, one problem is equality\". And I was a bit confused and talked to him about what equality was, and he started talking about \"extensional v intensional equality\" and at that point I lost him.</p>",
        "id": 167769790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560181238
    },
    {
        "content": "<p>lol, equality is a PhD topic around here</p>",
        "id": 167769831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560181298
    },
    {
        "content": "<p>I'm not exactly sure how far you can get in Coq, but I think the problem is that even showing that two sets are <code>=</code> iff they have the same elements requires some function extensionality and/or quotient types</p>",
        "id": 167769938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560181373
    },
    {
        "content": "<p>so the equivalence class construction replaces one problem with an equivalent problem</p>",
        "id": 167770001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560181431
    },
    {
        "content": "<p>Coq has a much more bifurcated notion of equality than lean, because the axioms don't allow making the other equalities the same as <code>=</code> as in lean. A setoid in Coq is the same as <code>setoid</code> in lean - a type with an equivalence relation, but in Coq they stop there and don't build the quotient. So they have to add notation for the <code>≈</code> and call it \"equals\", and then prove that various functions and predicates are \"extensional\", i.e. they respect the equality-pretender. In lean this is \"free\" since we can use <code>eq.rec</code> to rewrite any predicate using <code>=</code>. It's very similar to the issue we face when rewriting across isomorphisms, that is solved by univalence. The \"free\" is in quotes because of course we still have to prove our functions and predicates are extensional; this is the final argument of <code>quot.lift</code> that appears in all functions on quotients. But it does give us some functions for free, like <code>eq</code>, that are extensional without having to be proven so.</p>",
        "id": 167770714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560181909
    }
]