[
    {
        "content": "<p>use <code>∑ x : (divisors_antidiagonal 10),</code> instead</p>",
        "id": 315300639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670828724
    },
    {
        "content": "<p>That seems to work! I think <code>x.val</code> contains the value and <code>x.property</code> is the proof. I can't figure out what type <code>x</code> is, but I'm guessing a subtype.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">divisors_antidiagonal</span> <span class=\"mi\">10</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">x.val.1</span> <span class=\"bp\">*</span> <span class=\"n\">x.val.2</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem_divisors_antidiagonal.mp</span> <span class=\"n\">x.property</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 315301578,
        "sender_full_name": "Niels Voss",
        "timestamp": 1670829178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> has marked this topic as resolved.</p>",
        "id": 315302052,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670829440
    },
    {
        "content": "<p>That's right (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a>) although I'm curious how you were able to figure out the names <code>x.val</code> and <code>x.property</code> without knowing that.</p>",
        "id": 315303002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670829941
    },
    {
        "content": "<p>I basically guessed <code>x.val</code>, and I guessed that <code>x.2</code> represented the proof. Subtypes were the most general type I knew of that had a non-proof object and a proof.</p>",
        "id": 315409980,
        "sender_full_name": "Niels Voss",
        "timestamp": 1670863241
    }
]