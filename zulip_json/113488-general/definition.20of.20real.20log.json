[
    {
        "content": "<p>I have a controversial question (Kevin, close your eyes): how should we define the real logarithm of <code>x</code> when <code>x &lt; 0</code>. Currently, it is <code>0</code>, but I wonder if using <code>log |x|</code> would not be better, as it would satisfy the formulas <code>log(xy) = log x + log y</code> for all nonzero <code>x</code> and <code>y</code>, and <code>log' = 1/x</code> away from <code>0</code>. Given that proving that something is nonzero is often easier than checking its positivity, this would make these statements easier to apply. Any thoughts?</p>",
        "id": 195528886,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588059960
    },
    {
        "content": "<p>That would also make it equal to the real part of our complex log.</p>",
        "id": 195529745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588060603
    },
    {
        "content": "<p>Ha ha I am over all this now. I remember Chris having problems with junk inputs with this definition but I can't remember the details. Isn't log|x| actually a useful function in fact? Isn't it the indefinite integral of 1/x for example?</p>",
        "id": 195529828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588060671
    },
    {
        "content": "<p>I think we had a similar discussion about the output of sqrt many years ago when I was learning this stuff (I wrote real.sqrt before there was one in mathlib because I needed it for my undergraduate problem sheets)</p>",
        "id": 195529952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588060735
    },
    {
        "content": "<p>I think Chris' observation was that exp (log (junk)) was not the traditional junk value of 0 but was actually 1</p>",
        "id": 195530009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588060792
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">junk</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n</code></pre></div>",
        "id": 195530790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588061257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">âˆƒ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">irregular_prime</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">use</span> <span class=\"n\">junk</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 195531121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588061467
    },
    {
        "content": "<p>Sorry for trolling...<br>\n<span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I think this is a great idea! I think this is even sometimes done in \"real\" maths, isn't it?</p>",
        "id": 195531234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588061537
    },
    {
        "content": "<p>As in, people write <code>ln x</code>, and they actually mean <code>ln |x|</code>, and this only gets corrected after a while</p>",
        "id": 195531265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588061582
    },
    {
        "content": "<p>One day there are going to be theses written about how 37 became the world's default junk value.</p>",
        "id": 195531467,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588061693
    },
    {
        "content": "<p>I think this is a good idea as well. Two arguments in favor are the use of <code>ln |x|</code> in intro calc and the fact that <code>log |x| = Re (log x)</code> (both mentioned above)</p>",
        "id": 195533110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062785
    },
    {
        "content": "<p>Less clear is whether <code>real.sqrt</code> should do the same thing</p>",
        "id": 195533231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062844
    },
    {
        "content": "<p>when you said \"intro calc\" my first thought was the two tactics <code>by intro</code> and <code>by calc</code>... Lean syndrome</p>",
        "id": 195533421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588062981
    },
    {
        "content": "<p>should <code>real.sqrt (-4)</code> be <code>-2</code> or <code>2</code>?</p>",
        "id": 195533473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588063024
    },
    {
        "content": "<p>I think the only reasonable choices are <code>0</code> and <code>2</code></p>",
        "id": 195533501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588063051
    },
    {
        "content": "<p>well <code>-2</code> would keep the monotonic property</p>",
        "id": 195533518,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588063063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/definition.20of.20real.20log/near/195533421\" title=\"#narrow/stream/113488-general/topic/definition.20of.20real.20log/near/195533421\">said</a>:</p>\n<blockquote>\n<p>when you said \"intro calc\" my first thought was the two tactics <code>by intro</code> and <code>by calc</code>... Lean syndrome</p>\n</blockquote>\n<p>It got me stuck for a couple of seconds too.</p>",
        "id": 195537027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588065342
    }
]