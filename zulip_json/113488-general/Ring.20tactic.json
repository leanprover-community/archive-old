[
    {
        "content": "<p>Hi, I am writing a tutorial for computations in Lean, and I was surprised that <code>ring</code> fails in this case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c1\">-- this works</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">add_assoc</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is that something to expect or is that also surprising to someone else?</p>",
        "id": 172570556,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565081401
    },
    {
        "content": "<p>Does it work for <code>comm_ring</code>?</p>",
        "id": 172570768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565081588
    },
    {
        "content": "<p>I think the ring tactic only works in the commutative case.</p>",
        "id": 172570773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565081600
    },
    {
        "content": "<p>Yep, it does work for <code>comm_ring</code>. In fact, <code>ring</code> already fails for this example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span>\n</pre></div>\n\n\n<p>So I suppose you are right that <code>tactic.ring</code> is actually more like <code>tactic.comm_ring</code>.</p>",
        "id": 172571053,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565081981
    },
    {
        "content": "<p>Currently it requires <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/ring.lean#L48\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/ring.lean#L48\">an instance of</a> <code>comm_semiring</code>, which a <code>ring</code> is not.</p>",
        "id": 172575202,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1565085863
    }
]