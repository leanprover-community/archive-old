[
    {
        "content": "<p>Hi, I have a proof where I am trying to show that you can divide a version of generalised tangent and it's the same as tangent as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>a</mi><msub><mi>n</mi><mi>m</mi></msub><mi>x</mi><mo>=</mo><mfrac><mrow><mi>s</mi><mi>i</mi><msub><mi>n</mi><mi>m</mi></msub><mi>x</mi></mrow><mrow><mi>c</mi><mi>o</mi><msub><mi>s</mi><mi>m</mi></msub><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo>∗</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo>∗</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\"> tan_m x = \\frac{sin_m x}{cos_m x} = \\frac{sin x * f(x)}{cos x * f(x)}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3168639999999998em;vertical-align:-0.44509999999999994em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8717639999999999em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4101em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">s</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">s</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">s</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> is my radius function. I have got the following code thus far: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">special_functions</span><span class=\"bp\">.</span><span class=\"n\">pow</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> 002 -/</span>\n<span class=\"n\">def</span> <span class=\"n\">radius</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span> <span class=\"bp\">|</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 003 -/</span>\n<span class=\"n\">def</span> <span class=\"n\">sinm</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sin</span> <span class=\"n\">θ</span> <span class=\"bp\">*</span> <span class=\"n\">radius</span> <span class=\"n\">θ</span> <span class=\"n\">m</span>\n<span class=\"c1\">-- trigonometric sin is defined!!</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 004 -/</span>\n<span class=\"n\">def</span> <span class=\"n\">cosm</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cos</span> <span class=\"n\">θ</span> <span class=\"bp\">*</span> <span class=\"n\">radius</span> <span class=\"n\">θ</span> <span class=\"n\">m</span>\n<span class=\"c1\">-- So we can onto prove somethings!</span>\n<span class=\"c1\">-- actually, let us go and define a few more things</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 005 -/</span>\n<span class=\"n\">def</span> <span class=\"n\">tanm</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sinm</span> <span class=\"n\">θ</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">cosm</span> <span class=\"n\">θ</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">tanm_eq_tan</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">radius</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">tanm</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">tan</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">tanm</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">sinm</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cosm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">radius</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">],</span>\n   <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"n\">swap</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">n</span><span class=\"o\">,},</span>\n   <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">not_exists</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- bit stuck here, want to just &#39;cos&#39; both sides</span>\n      <span class=\"c1\">--rw [mul_zero, zero_add, mul_comm, ←div_eq_mul_one_div],</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n   <span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I have also proved this auxillary lemma but it doesn't seem to be much use:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">exists_cos_pi_half_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203933251,
        "sender_full_name": "James Arthur",
        "timestamp": 1594805557
    },
    {
        "content": "<p>There's the <code>apply_fun</code> tactic.</p>",
        "id": 203933935,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1594806034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"304228\">@James Arthur</span> But sides of the goal, or both sides of a hypothesis?</p>",
        "id": 203933938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594806036
    },
    {
        "content": "<p>(I didn't try your code yet.)</p>",
        "id": 203933951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594806047
    },
    {
        "content": "<p>both sides of the goal</p>",
        "id": 203933977,
        "sender_full_name": "James Arthur",
        "timestamp": 1594806070
    },
    {
        "content": "<p><code>cosm</code> needs to be injective for that right?</p>",
        "id": 203933991,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1594806098
    },
    {
        "content": "<p>current state of the goal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℤ</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">radius</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span>\n</code></pre></div>",
        "id": 203934006,
        "sender_full_name": "James Arthur",
        "timestamp": 1594806112
    },
    {
        "content": "<p>Is it injective on some interval and you know both sides of the goal are in that interval?</p>",
        "id": 203934055,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1594806131
    },
    {
        "content": "<p>Wait, your assumption <code>h</code> is wrong, right? (take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>π</mi><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x_1 = (2 \\pi x -1)/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>). From this, you can deduce anything you want!</p>",
        "id": 203934216,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594806271
    },
    {
        "content": "<p>I believe that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">cos x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">x</span></span></span></span> isn't injective than on 0 to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\"> \\frac{\\pi}{2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.040392em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> and I haven't actually looked at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>m</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">  cosm x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">x</span></span></span></span> but my intuition says no. I removed the problemed areas in this case, i.e. where cosm goes to infinity</p>",
        "id": 203934225,
        "sender_full_name": "James Arthur",
        "timestamp": 1594806285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/can.20you.20take.20cos.20of.20both.20sides.3F/near/203934216\">said</a>:</p>\n<blockquote>\n<p>Wait, your assumption <code>h</code> is wrong, right? (take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>π</mi><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x_1 = (2 \\pi x -1)/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>). From this, you can deduce anything you want!</p>\n</blockquote>\n<p>Oh... yeah. it needs to be an integer XD</p>",
        "id": 203934307,
        "sender_full_name": "James Arthur",
        "timestamp": 1594806354
    },
    {
        "content": "<p>This was what I was alluding to yesterday. I didn't see your code for very long and the <code>\\exists ...</code> may not have been the correct idea.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">tanm_eq_tan</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">radius</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">tanm</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">tan</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">tanm</span> <span class=\"n\">sinm</span> <span class=\"n\">cosm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tan_eq_sin_div_cos</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_eq_div_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_ne_zero</span> <span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203934380,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1594806376
    },
    {
        "content": "<p>Since dividing by 0 in Lean gives you 0, so it's true whether <code>cos x</code> is 0 or not</p>",
        "id": 203934434,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1594806416
    },
    {
        "content": "<p>Apologies for (maybe) leading you down a wrong path</p>",
        "id": 203934483,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1594806442
    },
    {
        "content": "<p>It's ok. I was following your message. To be perfectly honest I had no idea where I was going</p>",
        "id": 203934548,
        "sender_full_name": "James Arthur",
        "timestamp": 1594806479
    },
    {
        "content": "<p>Also thankyou all!</p>",
        "id": 203936229,
        "sender_full_name": "James Arthur",
        "timestamp": 1594807747
    }
]