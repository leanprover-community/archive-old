[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weight</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wsum</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">j</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)),</span> <span class=\"n\">wsum</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∘</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">wsum</span> <span class=\"n\">w</span> <span class=\"c1\">-- no problem here</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)),</span> <span class=\"n\">wsum</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∘</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">wsum</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">gives</span> <span class=\"n\">an</span> <span class=\"n\">error</span> <span class=\"o\">(</span><span class=\"n\">at</span> <span class=\"s2\">\"wsum\"</span><span class=\"o\">):</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>What is going on here?<br>\nNote that removing all <code>d</code>s leads to something that does typecheck... <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 299193192,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663344359
    },
    {
        "content": "<p>I can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)),</span>\n<span class=\"k\">let</span> <span class=\"n\">w'</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">w</span> <span class=\"bp\">∘</span> <span class=\"n\">σ</span> <span class=\"k\">in</span> <span class=\"n\">wsum</span> <span class=\"n\">w'</span> <span class=\"bp\">=</span> <span class=\"n\">wsum</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but then I don't know how I can use the lemma -- <code>rw test</code> or <code>simp [test]</code> does not work.</p>",
        "id": 299194150,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663344579
    },
    {
        "content": "<p>You probably need to make <code>d</code> explicit in <code>wsum</code>. When you do <code>w ∘ σ</code>, the type of <code>w</code> gets unfolded to a <code>fin n.succ → ℕ</code> and <code>d</code> can no longer be inferred.</p>",
        "id": 299195499,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663344957
    },
    {
        "content": "<p>(I don't see why removing the <code>d</code> causes issues, if I do it locally it seems fine)</p>",
        "id": 299195690,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663345010
    },
    {
        "content": "<p><code>example : ∀ (w : weight n d) (σ : equiv.perm (fin n.succ)), @wsum n d (w ∘ σ) = wsum w := sorry</code> also works, or maybe also a <code>weight.comp</code> method that preserves <code>d</code> by definition</p>",
        "id": 299195930,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663345086
    },
    {
        "content": "<p>I'd expect</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)),</span> <span class=\"n\">wsum</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∘</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">wsum</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>to work</p>",
        "id": 299196058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663345131
    },
    {
        "content": "<p>it doesn't, that is the <code>show X, from _</code> vs <code>(_ : X)</code> issue again Kyle</p>",
        "id": 299196185,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663345172
    },
    {
        "content": "<p>Oh well, too bad type ascriptions don't act as hints when elaborating function arguments...</p>",
        "id": 299196381,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663345229
    },
    {
        "content": "<p>Depending on what the intent is, one potential solution is to define a custom composition function, like <code>wsum.perm</code>, that returns <code>weight n d</code>.</p>",
        "id": 299196557,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663345289
    },
    {
        "content": "<p>Another is to change <code>wsum</code> to not take a <code>weight n d</code>, but a <code>fin n -&gt; nat</code></p>",
        "id": 299196705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663345328
    },
    {
        "content": "<p>and yet another is to turn <code>weight</code> into a structure so that <code>d</code> cannot be erased from the type through unfolding</p>",
        "id": 299196830,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663345368
    },
    {
        "content": "<p>OK, thanks. I can live with the <code>@</code> variant.</p>",
        "id": 299206926,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663348633
    }
]