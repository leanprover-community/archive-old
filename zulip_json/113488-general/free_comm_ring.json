[
    {
        "content": "<p>(This thread is a continuation of <a href=\"#narrow/stream/144837-PR-reviews\" title=\"#narrow/stream/144837-PR-reviews\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews</a>)<br>\nSo I built the free commutative ring over a type <code>A</code>, which corresponds to the multivariate polynomials with variables indexed by <code>A</code> and coefficients in <code>\\Z</code>. There are some differences between <code>free_comm_ring A</code> and <code>mv_polynomial A \\Z</code>:<br>\n1. you don't need <code>A</code> to have decidable equality for <code>free_comm_ring A</code> to be a ring, but you do need it for <code>mv_polynomial A \\Z</code> to be a ring.<br>\n2. the coefficients of <code>free_comm_ring</code> are in <code>\\Z</code>, so it is a special case of <code>mv_polynomial</code> (<code>polynomial</code> is also a special case and we also allow it in mathlib).<br>\n3. <code>free_comm_ring</code> might have faster elaboration speed than <code>mv_polynomial</code>, and it might be caused by the fact that there are less typeclass searches, since it doesn't need either <code>decidable_eq</code> or a ring instance for the coefficients.</p>",
        "id": 159267753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550998180
    },
    {
        "content": "<p>Should we put <code>free_comm_ring</code> in mathlib?</p>",
        "id": 159267799,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550998205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 159267805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550998218
    },
    {
        "content": "<p>no ring instance for the coefficients?</p>",
        "id": 159268686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551000057
    },
    {
        "content": "<p>I agree that <code>mv_polynomial</code> should have decidable_eq removed, but this isn't the only way to achieve that</p>",
        "id": 159268701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551000116
    },
    {
        "content": "<p>I think <code>finsupp</code> should go fully classical</p>",
        "id": 159268744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551000142
    },
    {
        "content": "<p>I mean, <code>free_comm_ring</code> doesn't have a sense of \"coefficients\" at all</p>",
        "id": 159269031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551000648
    },
    {
        "content": "<p>so it doesn't need to search for a ring instance of the \"coefficients\"</p>",
        "id": 159269041,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551000677
    },
    {
        "content": "<p>you claimed that <code>free_comm_ring</code> is equivalent to <code>mv_polynomial</code>. That means it has all the structure of polynomials. Where is it?</p>",
        "id": 159269871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002174
    },
    {
        "content": "<p>I never claimed that.</p>",
        "id": 159269875,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002211
    },
    {
        "content": "<p>I said <code>free_comm_ring \\a</code> is isomorphic to <code>mv_polynomial \\a \\Z</code></p>",
        "id": 159269883,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002246
    },
    {
        "content": "<p>So how does <code>mv_polynomial A B</code> relate to a free construction?</p>",
        "id": 159269926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002293
    },
    {
        "content": "<p>I don't see the relevance of that question</p>",
        "id": 159269931,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002331
    },
    {
        "content": "<p>but <code>mv_polynomial A B</code> is the free <code>B</code>-algebra generated by <code>A</code></p>",
        "id": 159269940,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002362
    },
    {
        "content": "<p>okay, so let's do that</p>",
        "id": 159269945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002386
    },
    {
        "content": "<p>I guess that generalizes to all the other free constructions too</p>",
        "id": 159269950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002400
    },
    {
        "content": "<p>my construction only works for coefficients in Z</p>",
        "id": 159269995,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002424
    },
    {
        "content": "<p>like ring expressions with constants taken from a ring, or free group expressions with constants in a group</p>",
        "id": 159269999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002437
    },
    {
        "content": "<p>and indeterminates from an arbitrary type</p>",
        "id": 159270001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002455
    },
    {
        "content": "<p>I don't understand</p>",
        "id": 159270012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002508
    },
    {
        "content": "<p>what's your new plan?</p>",
        "id": 159270013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002510
    },
    {
        "content": "<p>you want to replace <code>mv_polynomial</code> entirely?</p>",
        "id": 159270045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002523
    },
    {
        "content": "<p>I thought that was your plan</p>",
        "id": 159270057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002531
    },
    {
        "content": "<p>no that wasn't my plan</p>",
        "id": 159270059,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002536
    },
    {
        "content": "<p>my plan is to keep <code>mv_polynomial</code>, and add <code>free_comm_ring</code></p>",
        "id": 159270060,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002550
    },
    {
        "content": "<p>As you pointed out, we already have <code>mv_polynomial \\a \\Z</code>. It just needs a few less typeclass args</p>",
        "id": 159270074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002610
    },
    {
        "content": "<p>we also have <code>mv_polynomial unit R</code> but <code>polynomial</code> is still in mathlib</p>",
        "id": 159270078,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002638
    },
    {
        "content": "<p>But probably your version is closer to what someone would expect if they see <code>free_comm_ring</code></p>",
        "id": 159270120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002648
    },
    {
        "content": "<p>I think it is okay to have isomorphic constructions if they represent a different way of dealing with a type, but you need to have tons of lemmas relating the two if you take this route</p>",
        "id": 159270140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551002712
    },
    {
        "content": "<p>it's just the free comm ring. It's what I intended it to be. It's just a coincidence that it's isomorphic to <code>mv_polynomial A \\Z</code></p>",
        "id": 159270188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002781
    },
    {
        "content": "<p>I don't understand why a fuss is being made over this</p>",
        "id": 159270193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551002797
    },
    {
        "content": "<p>seriously mv_polynomial is so damn slow I don't even want to work with them <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 159270370,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003176
    },
    {
        "content": "<p>can I not refactor <a href=\"https://github.com/leanprover/mathlib/issues/754\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/754\">#754</a></p>",
        "id": 159270377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003189
    },
    {
        "content": "<p>Like I said, the decidable_eq instance on <code>finsupp</code> needs to die</p>",
        "id": 159270378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551003195
    },
    {
        "content": "<p>Okay, go ahead. But the idea behind library building is that you complete the graph of relations between concepts in the library. If you have two isomorphic things there should be a theorem about that</p>",
        "id": 159270382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551003225
    },
    {
        "content": "<p>what do you mean by \"go ahead\"?</p>",
        "id": 159270430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003288
    },
    {
        "content": "<p>I would have given up if I hadn't written this in terms of free_comm_ring to begin with</p>",
        "id": 159270491,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003386
    },
    {
        "content": "<p><code>elaboration of lift took 18.8s</code></p>",
        "id": 159270492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003393
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"n\">direct_limit</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"bp\">â†’</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span> <span class=\"bp\">â†’</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">evalâ‚‚</span> <span class=\"n\">coe</span> <span class=\"err\">$</span> <span class=\"bp\">Î»</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">Î£</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">evalâ‚‚</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span> <span class=\"bp\">â†’</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">Î»</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">Î£</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">evalâ‚‚</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"bp\">_</span> <span class=\"bp\">â‰¤</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">evalâ‚‚</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span> <span class=\"bp\">â†’</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">Î»</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">Î£</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">âŠ¥</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mem_bot</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_le</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_coe</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_comap</span><span class=\"o\">,</span> <span class=\"n\">mem_bot</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">âŸ©</span> <span class=\"bp\">|</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">âŸ©</span> <span class=\"bp\">|</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">âŸ©</span> <span class=\"bp\">|</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">âŸ©;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evalâ‚‚_sub</span><span class=\"o\">,</span> <span class=\"n\">evalâ‚‚_X</span><span class=\"o\">,</span> <span class=\"n\">Hg</span><span class=\"o\">,</span> <span class=\"n\">evalâ‚‚_one</span><span class=\"o\">,</span> <span class=\"n\">evalâ‚‚_add</span><span class=\"o\">,</span> <span class=\"n\">evalâ‚‚_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159270495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003400
    },
    {
        "content": "<p>do you see how to make it faster?</p>",
        "id": 159270497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003417
    },
    {
        "content": "<p>original:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"n\">direct_limit</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"bp\">â†’</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">free_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"bp\">Î»</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"bp\">_</span> <span class=\"bp\">â‰¤</span>\n    <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">free_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">Î£</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Î¹</span><span class=\"o\">),</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)))</span> <span class=\"err\">âŠ¥</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mem_bot</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_le</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_coe</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_comap</span><span class=\"o\">,</span> <span class=\"n\">mem_bot</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">âŸ©</span> <span class=\"bp\">|</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">âŸ©</span> <span class=\"bp\">|</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">âŸ©</span> <span class=\"bp\">|</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">âŸ©;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lift_sub</span><span class=\"o\">,</span> <span class=\"n\">lift_of</span><span class=\"o\">,</span> <span class=\"n\">Hg</span><span class=\"o\">,</span> <span class=\"n\">lift_one</span><span class=\"o\">,</span> <span class=\"n\">lift_add</span><span class=\"o\">,</span> <span class=\"n\">lift_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159270509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003472
    },
    {
        "content": "<p>Using <code>ring_hom</code> might help here as well</p>",
        "id": 159270608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551003618
    },
    {
        "content": "<p>I think that all of the issues you point out which <code>free_comm_ring</code> solves have nothing to do with the definition</p>",
        "id": 159270618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551003678
    },
    {
        "content": "<p>I would appreciate a diagnosis of the slow elaboration time</p>",
        "id": 159270733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003882
    },
    {
        "content": "<p>Lean doesn't really have good debugging tools</p>",
        "id": 159270734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003889
    },
    {
        "content": "<blockquote>\n<p>Using <code>ring_hom</code> might help here as well</p>\n</blockquote>\n<p>so you're saying, I should do a lot of refactoring just to get <a href=\"https://github.com/leanprover/mathlib/issues/754\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/754\">#754</a> into mathlib?</p>",
        "id": 159270750,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551003944
    },
    {
        "content": "<p>No, that's what I meant by \"go ahead\". But I don't think we should despair over <code>mv_polynomial</code></p>",
        "id": 159270869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551004162
    },
    {
        "content": "<p>thanks</p>",
        "id": 159270935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551004253
    },
    {
        "content": "<p>The correct way to do <code>mv_polynomial A B</code> is <code>free_comm_ring A \\otimes B</code></p>",
        "id": 159279191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551020694
    },
    {
        "content": "<p>Why is that the correct way? Why isn't the correct way <code>free_comm_algebra B A</code>?</p>",
        "id": 159279246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551020770
    },
    {
        "content": "<p>because how are you gonna construct that</p>",
        "id": 159279386,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551021111
    },
    {
        "content": "<p>(the two bifunctors are isomorphic anyway)</p>",
        "id": 159279426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551021124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> What would you suggest changing about <code>mv_polynomial</code> in order to make it usable?</p>",
        "id": 159280213,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551022638
    },
    {
        "content": "<p>I would suggest better debugging tools in Lean 4</p>",
        "id": 159280220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551022660
    },
    {
        "content": "<p>Does Mario's suggestion of getting rid of any decidability assumptions, and using classical throughout help?</p>",
        "id": 159280782,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551023690
    },
    {
        "content": "<p>no idea</p>",
        "id": 159281369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551024664
    },
    {
        "content": "<p>But you could find out Kenny, by finding a situation where you have problems with polynomials and then throwing in <code>prop_decidable</code> etc and seeing if it speeds things up.</p>",
        "id": 159288033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551036178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Here is another thread about issues with polynomials being slow...</p>",
        "id": 164865541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556971991
    }
]