[
    {
        "content": "<p>The proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable_zero\">docs#summable_zero</a> is <code>has_sum_zero.summable</code>. I'm unfamiliar with this use of the <code>.</code> notation. What does it mean? Is it discussed in TPIL?</p>",
        "id": 245497562,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1625864514
    },
    {
        "content": "<p>The simple version is that <code>f.bar</code> when <code>f : foo</code> means <code>foo.bar f</code>.</p>",
        "id": 245497945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625864602
    },
    {
        "content": "<p>The slightly more complex version is that <code>f</code> doesn't even need to be the first argument.</p>",
        "id": 245498155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625864648
    },
    {
        "content": "<p>I think the range of things it supports has increased since TPIL was written</p>",
        "id": 245498425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625864709
    },
    {
        "content": "<p>Generally, we refer to this as \"dot notation\"; you might find some more discussions in Zulip using that term.</p>\n<p>Here's a hopefully helpful repost:<br>\n<span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/smallest.20element.20of.20a.20set.3F/near/212325387\">said</a>:</p>\n<blockquote>\n<p>For more on dot notation see the end of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#conjunction\">3.3.1</a> and <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html\">9.1</a> in TPiL. I think it finally clicked for me though after I read <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20confusion/near/157341136\">this thread</a>.</p>\n</blockquote>",
        "id": 245498635,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1625864761
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> !</p>",
        "id": 245498914,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1625864826
    },
    {
        "content": "<p>By the way, a lot of the library is written to exploit this notation.  For example, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/differentiable.continuous\">docs#differentiable.continuous</a>, so that if you ever know <code>(hf : differentiable ℝ f)</code>, then you can write <code>hf.continuous</code> for the fact that <code>f</code> is continuous.</p>",
        "id": 245499684,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625865067
    },
    {
        "content": "<p>And we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bounded\">docs#is_compact.bounded</a>, so that if you ever know <code>(hs : is_compact s)</code>, then you can write <code>hs.bounded</code> for the fact that <code>s</code> is bounded.</p>",
        "id": 245499924,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625865133
    },
    {
        "content": "<p>And many many more :)</p>",
        "id": 245499952,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625865142
    },
    {
        "content": "<p>I even recently defined <code>has_subset.subset.finpartition_on</code> to be able to write <code>h.finpartition_on</code> when <code>h : A ⊆ B</code>.</p>",
        "id": 245500831,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625865376
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>!</p>",
        "id": 245500984,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1625865411
    },
    {
        "content": "<p>Very useful examples that I wish I knew before are <code>le.trans</code>, <code>le.trans_lt</code>, <code>lt.trans</code>, <code>lt.trans_le</code></p>",
        "id": 245501066,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625865433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20notation.20question/near/245501066\">said</a>:</p>\n<blockquote>\n<p>Very useful examples that I wish I knew before are <code>le.trans</code>, <code>le.trans_lt</code>, <code>lt.trans</code>, <code>lt.trans_le</code></p>\n</blockquote>\n<p>Yes, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_lt.lt.ne\">docs#has_lt.lt.ne</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_lt.lt.ne'\">docs#has_lt.lt.ne'</a>.</p>",
        "id": 245501389,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625865522
    },
    {
        "content": "<p>So instead of <code>le_of_le_lt hle hlt</code>, you can seamlessly write <code>hle.trans_lt hlt</code> and get a <code>&lt;</code> result in the end. You also have the handy <code>lt.le</code> instead of <code>le_of_lt</code> and <code>.antisymm</code> which works at least for <code>≤</code> and <code>⊆</code>.</p>",
        "id": 245501482,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625865554
    },
    {
        "content": "<p>The biggest drawback in my opinion is that typeclass inference basically stops at the dot notation so, because many projections are overloaded (<code>.antisymm</code>, <code>.trans</code>, ...),  the type of what you dot notate on has to be pretty clear for the notation to work.</p>",
        "id": 245501862,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625865665
    },
    {
        "content": "<p>OK, I think I get it now. Thanks for the explanations! I see that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.generalized_field_notation</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>desugars (is that a word?) this notation. So in the example <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  mentioned, we can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.ordered</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.generalized_field_notation</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">hle.trans_lt</span> <span class=\"n\">hlt</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>and find that the proof of <code>bar</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">has_le.le.trans_lt</span> <span class=\"n\">hle</span> <span class=\"n\">hlt</span>\n</code></pre></div>\n<p>The reason the dot notation works here is that <code>hle : has_le.le a b</code> and, coincidentally (not), there's a function called <code>has_le.le.trans_lt</code> which takes, as its first parameter, a term of type <code>has_le.le x y</code>. So <code>hle.trans_lt</code> is just applying the <code>has_le.le.trans_lt</code> function, but with <code>hle</code> as the first argument.</p>\n<p>Rephrasing, this works because:</p>\n<ol>\n<li>The <em>name</em> of the <em>type</em> of <code>hle</code> matches the first part of the <em>name</em> of a dotted-function (here <code>has_le.le.trans_lt</code>) and</li>\n<li>The  <em>type</em> of the first parameter of the function <code>has_le.le.trans_lt</code> matches the <em>type</em> of <code>hle</code>.</li>\n</ol>\n<p>I hope that's correct!</p>",
        "id": 245515539,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1625871949
    },
    {
        "content": "<p>It's correct except that it works even slightly more generally! <code>hle</code> doen't have to be the first explicit parameter of the function. It has to be the first explicit parameter <strong>of type <code>has_le.le</code></strong> of the function. So for example this would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.convex.topology</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- mathematically stupid</span>\n<span class=\"kd\">def</span> <span class=\"n\">convex.foo</span> <span class=\"o\">(</span><span class=\"n\">hAcomp</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAconv</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">hAcomp.is_closed</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">hAconv</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAcomp</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">hAconv.foo</span> <span class=\"n\">hAcomp</span> <span class=\"c1\">-- convex.foo hAcomp hAconv : is_closed A</span>\n<span class=\"k\">#check</span> <span class=\"n\">hAconv.foo</span> <span class=\"c1\">-- I would have expected this to work</span>\n<span class=\"c\">/-</span><span class=\"cm\"> type mismatch at application</span>\n<span class=\"cm\">  convex.foo hAconv</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  hAconv</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  convex A</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  is_compact ?m_3-/</span>\n</code></pre></div>\n<p>but surprisingly (to me) it doesn't like partial application.</p>",
        "id": 245535271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625901812
    },
    {
        "content": "<p>I think dot notation will also unfold definitions sometimes too; if you have <code>def my_nat := nat</code>, then dot notation on terms of type <code>mynat</code> will first try the mynat namespace then the nat namespace. I can't check that right now though.</p>",
        "id": 245535433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625902037
    },
    {
        "content": "<p>Maybe it has to be reducible</p>",
        "id": 245535435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625902047
    }
]