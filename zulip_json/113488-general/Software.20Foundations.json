[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think a while back you were looking at Software Foundations using Lean. Did you write anything up?</p>",
        "id": 125958987,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525203459
    },
    {
        "content": "<p>I have got a work experience kid doing it for a week in July!</p>",
        "id": 125959038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525203486
    },
    {
        "content": "<p>Goodness knows how far they'll get</p>",
        "id": 125959046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525203528
    },
    {
        "content": "<p>Interesting! What is the scope of the project? Only writing up solutions in Lean or reformulating the parts of the book that are specifically about Lean?</p>",
        "id": 125959214,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525203749
    },
    {
        "content": "<p>It's one of my kids</p>",
        "id": 125959222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525203768
    },
    {
        "content": "<p>so they'll just do what they want really</p>",
        "id": 125959224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525203776
    },
    {
        "content": "<p>I'm just hoping to get them engaged with the material</p>",
        "id": 125959232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525203789
    },
    {
        "content": "<p>because I know they'll like it</p>",
        "id": 125959239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525203796
    },
    {
        "content": "<p>He's good at python</p>",
        "id": 125959241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525203801
    },
    {
        "content": "<p>and I showed him that python had lambdas</p>",
        "id": 125959245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525203808
    },
    {
        "content": "<p>and he got quite interested in them</p>",
        "id": 125959248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525203817
    },
    {
        "content": "<p>Amazing :D How old is he?</p>",
        "id": 125959252,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525203839
    },
    {
        "content": "<p>16</p>",
        "id": 125959781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525204630
    },
    {
        "content": "<p>wants to do computer science</p>",
        "id": 125959784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525204637
    },
    {
        "content": "<p>How disappointed is the dad? <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 125959796,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525204667
    },
    {
        "content": "<p>One of my former undergraduate student is thinking of going through SF with Lean. Do you think that might help your son to have a studying buddy?</p>",
        "id": 125963169,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525209343
    },
    {
        "content": "<p>who is SF?</p>",
        "id": 125963172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525209352
    },
    {
        "content": "<p>Software Foundations</p>",
        "id": 125963450,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525209749
    },
    {
        "content": "<p>aha</p>",
        "id": 125963451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525209754
    },
    {
        "content": "<p>i think in general it might not be a bad idea to have a lean translation of SF</p>",
        "id": 125963581,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525210032
    },
    {
        "content": "<p>I'd volunteer to do 4-5 chapters if people were interested</p>",
        "id": 125963591,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525210075
    },
    {
        "content": "<p>That'd be great, that's true. I should probably pitch in too :D</p>",
        "id": 125963635,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525210107
    },
    {
        "content": "<p>great, you can take all the chapters that deal with tactics</p>",
        "id": 125963642,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525210138
    },
    {
        "content": "<p>haha</p>",
        "id": 125963643,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525210139
    },
    {
        "content": "<p>I would but then there would be nothing left for you to do!</p>",
        "id": 125963709,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525210217
    },
    {
        "content": "<p>don't forget SF is 3 books now... it's a big project</p>",
        "id": 125963710,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525210237
    },
    {
        "content": "<p>I'm wondering how different the result would be from SF</p>",
        "id": 125963713,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525210244
    },
    {
        "content": "<p>I would hope that change capitals for lower cases with an underscore in front be enough but we might have rewrite some sections significantly</p>",
        "id": 125963729,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525210290
    },
    {
        "content": "<p>^</p>",
        "id": 125963895,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525210577
    },
    {
        "content": "<p>yes, because i taught myself lean by doing sf in lean</p>",
        "id": 125963897,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525210593
    },
    {
        "content": "<p>and there are differences</p>",
        "id": 125963898,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525210597
    },
    {
        "content": "<p>unfortunately i didn't keep my solutions around...</p>",
        "id": 125963900,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525210607
    },
    {
        "content": "<p>I have solutions for some stuff, which I was going to let my son see if he was completely lost</p>",
        "id": 125964748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525212144
    },
    {
        "content": "<p>cool. i'll take a look at setting up a github repo . SF is GPL licensed so I don't think there's any issue forking it and putting it online</p>",
        "id": 125965133,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525212811
    },
    {
        "content": "<p>I'm wondering if we could team up with the SF team. I don't know if they will keep updating SF but if they do, it would be great to be notified (automatically?) so that we can adjust the Lean version too</p>",
        "id": 125965209,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525212932
    },
    {
        "content": "<p>why does that need teaming up? you could just watch their github repo</p>",
        "id": 125965331,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525213104
    },
    {
        "content": "<p>is there actually a notification system for that?</p>",
        "id": 125965355,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525213179
    },
    {
        "content": "<p>Oh, yeah, ok I see. I guess we can register to get emails on commits to their repos</p>",
        "id": 125965358,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525213200
    },
    {
        "content": "<p>yeah, you can choose to receive notification emails</p>",
        "id": 125965366,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525213201
    },
    {
        "content": "<blockquote>\n<p>I would hope that change capitals for lower cases with an underscore in front be enough</p>\n</blockquote>\n<p>Don't forget to find-and-replace A to Î± as well</p>",
        "id": 125974526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525230435
    },
    {
        "content": "<blockquote>\n<p>One of my former undergraduate student is thinking of going through SF with Lean. Do you think that might help your son to have a studying buddy?</p>\n</blockquote>\n<p>Hi all, I'm the said former undergrad (now masters) student <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span> I'm a Haske-holic coming to Lean and hope to do neat things with programming language semantics, and with system specs and models as well</p>",
        "id": 125974738,
        "sender_full_name": "Amin Bandali",
        "timestamp": 1525230936
    },
    {
        "content": "<p>nice. I got started on translating the first chapter of sf, basics. Everything up to chapter 11 seems pretty straightforward</p>",
        "id": 125975644,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525233005
    },
    {
        "content": "<p>that said, even though it's straightforward, it's still work. actually, I've been spending most of my time figuring out how the sphinx documentation workflow works</p>",
        "id": 125975657,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525233045
    },
    {
        "content": "<p>i'll have more time to devote to this after thursday</p>",
        "id": 125975670,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525233095
    },
    {
        "content": "<p>Let me know when you decide to show it</p>",
        "id": 125976197,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525234090
    },
    {
        "content": "<p>So my son will start from book 1 p1 because he's learning the entire theory from nothing but a background of python.</p>",
        "id": 125980871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525244313
    },
    {
        "content": "<p>But I'm independently interested in any sphinx tips because I want to write something about Lean for mathematicians at some point and I am still not 100% clear on the format this should take -- at the minute I am tempted to just copy TPIL but my concern is that I don't know how to display LaTeX within that set-up. Is this possible?</p>",
        "id": 125980928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525244407
    },
    {
        "content": "<p>What kind of LaTeX do you want to use? Merely \"equations\"? Or also other fancy typesetting, like diagrams?</p>",
        "id": 125981644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525245927
    },
    {
        "content": "<p>Hey guys, I'm working through software foundations lists chapter:<br>\n<a href=\"https://softwarefoundations.cis.upenn.edu/current/lf-current/Lists.html#lab60\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/current/lf-current/Lists.html#lab60\">https://softwarefoundations.cis.upenn.edu/current/lf-current/Lists.html#lab60</a></p>\n<p>After some fairly mindless pattern-matching I was able to implement a function, which can compute a sum of a list of natural numbers, and I think it basically works, but a few things seem strange:</p>\n<p>1. I had to use <code>meta</code> in front of list_sum. I suspect this is something to do with recursion not necessarily being well-defined, but my PL knowledge + understanding of lean are a bit lacking, so not _really_ sure why. Any idea how to do it without <code>meta</code>?<br>\n2. There's a weird thing inside the recursor inside <code>list_sum</code>, I've called it \"what_is_this_for\". I thought I was producing a term of type <code>nat</code>, not of type <code>nat â nat</code>, but lean disagrees. Any idea why?</p>\n<div class=\"codehilite\"><pre><span></span>inductive natlist : Type\n    | nil : natlist\n    | cons : nat â natlist â natlist\n\nmeta definition list_sum : natlist â nat :=\n    Î» list : natlist,\n    natlist.rec_on list 0 (Î» list_element : nat, Î» previous_list : natlist, Î» what_is_this_for: nat, list_element + (list_sum previous_list))\n\nopen natlist\n\n#reduce list_sum $ cons 2 $ cons 2 nil\n\n#eval list_sum $ cons 4 $ cons 3 $ cons 2 nil\n</pre></div>",
        "id": 129020226,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1530621937
    },
    {
        "content": "<p>What you called <code>what_is_this_for</code> is the inductive hypothesis</p>",
        "id": 129020469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530622279
    },
    {
        "content": "<p>you should use it in place of <code>list_sum previous_list</code></p>",
        "id": 129020475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530622291
    },
    {
        "content": "<p>and then it won't need to be meta</p>",
        "id": 129020480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530622309
    },
    {
        "content": "<p>Or you can just use the equation compiler instead of the recursor, and then you can make reference to the function you are defining and lean automatically compiles it to recursors</p>",
        "id": 129020531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530622362
    },
    {
        "content": "<p>Of course! Thank you Mario, in hindsight this is super-obvious (I think you've actually explained this to me last year in Cambridge).</p>",
        "id": 129020743,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1530622610
    },
    {
        "content": "<p>Here's an alternative definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">natlist</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">natlist</span> <span class=\"bp\">â</span> <span class=\"bp\">â</span> <span class=\"o\">:=</span>\n<span class=\"n\">natlist</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">â</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nl</span> <span class=\"o\">:</span> <span class=\"n\">natlist</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">â</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 129020765,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530622654
    },
    {
        "content": "<p>It's definitely easier to use the equation compiler, though. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 129020833,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530622697
    },
    {
        "content": "<p>I should definitely learn to use the equation compiler, thanks guys!</p>",
        "id": 129020861,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1530622739
    }
]