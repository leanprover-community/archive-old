[
    {
        "content": "<p>Dear Lean community,</p>\n<p>We finally have a release for Lean 3.5.0c! Using <code>elan</code>, it can be installed with the following command line:</p>\n<div class=\"codehilite\"><pre><span></span>elan toolchain install leanprover-community/lean:3.5.0\n</pre></div>\n\n\n<p><code>leanpkg.toml</code> files can be updated to refer to 3.5.0c:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">lean_version</span> <span class=\"o\">=</span> <span class=\"s\">&quot;leanprover-community/lean:3.5.0&quot;</span>\n</pre></div>\n\n\n<p>The binaries can be found <a href=\"https://github.com/leanprover-community/lean/releases/tag/v3.5.0\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/releases/tag/v3.5.0\">here</a> and, as before, they are available for Linux, OS X, Windows and for the browser.</p>\n<p>All the code that works with 3.4.2 should still work and we made sure that the current version of mathlib still works with this release. A more detailed summary of the changes can be found <a href=\"https://github.com/leanprover-community/lean/blob/v3.5.0/doc/changes.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/v3.5.0/doc/changes.md\">here</a>.</p>\n<p>Going forward, we will continue fixing bugs and adding features that makes Leaners' (or Lean-atics?) life easier. We have been strict so far in maintaining backward compatibility but we will now start considering breaking changes as well.</p>\n<p>Special thanks to those who made this release possible: <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>, <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"143402\">@matt rice</span>, <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> and of course <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> and <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>.</p>",
        "id": 184349819,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577489564
    },
    {
        "content": "<p>This is great! Thanks for the hard work guys.</p>",
        "id": 184350236,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577490358
    },
    {
        "content": "<p>I think the workshop in January would be a good time to talk about \"porting\" mathlib to 3.5c, that is, taking advantage of changes that aren't backward compatible.</p>",
        "id": 184350297,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577490432
    },
    {
        "content": "<p>Good idea :) I think <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> planned on mathlib discussion, we can bring it up then</p>",
        "id": 184350346,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577490492
    },
    {
        "content": "<p>Yup. We'll put up more details about the schedule soon. But we have a few blocks of time set aside for this kind of stuff.</p>",
        "id": 184350417,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577490649
    },
    {
        "content": "<p>With proper elan integration, I don't see any reason not to make the change, and some of the new features/fixes will really be helpful.</p>",
        "id": 184350477,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577490734
    },
    {
        "content": "<p>Cool :) Are you thinking of some specific?</p>",
        "id": 184350563,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577490929
    },
    {
        "content": "<p>Renaming all the primed tactics, first of all, but I think there's a lot.</p>",
        "id": 184352007,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577493748
    },
    {
        "content": "<p>I'm very much interested in this for teaching. Is there anything I could do to get a version of Lean for linux, windows and MacOS where all primed versions become unprimed and, much more importantly, <code>rintros</code> becomes <code>intro</code> and <code>rcases</code> becomes <code>cases</code>? I think those would <code>intro</code> and <code>cases</code> changes would even be backward compatible.</p>",
        "id": 184369590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577529182
    },
    {
        "content": "<p>I think <code>cases H with H1 H2</code> becomes <code>rcases H with ⟨H1, H2⟩</code>.</p>",
        "id": 184370174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577530335
    },
    {
        "content": "<p>There's plenty of little updates to the library that we'd like to do (e.g. get rid of <code>nat.pow</code> and <code>discrete_field</code>). Would it be a good idea to move the core library into mathlib and make these changes?</p>",
        "id": 184370359,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577530689
    },
    {
        "content": "<p>BTW, which part of the Lean C++ code is responsible for class instances resolution? I think about adding an algorithm that works better with algebraic classes, namely go <strong>down</strong> the chain from existing constants, not up from the goal.</p>",
        "id": 184370441,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577530888
    },
    {
        "content": "<p>Indeed <code>rcases</code> is not backward compatible, I was wrong.</p>",
        "id": 184372554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577534785
    },
    {
        "content": "<p>Yury, what you are asking for is a huge change.</p>",
        "id": 184372635,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577534901
    },
    {
        "content": "<p>It seems that what I'm asking should actually be rather easy. The <code>intro</code> tactic is defined in Lean (in core lib of course) so it should be possible to change it without recompiling Lean, and I could try to find a completely new name for <code>rcases</code>. Too bad <code>split</code> and <code>destruct</code> are already taken.</p>",
        "id": 184372703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577535021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  Is there any reason why <code>intro</code> wasn't changed to <code>rintro</code> in Lean 3.5.0c?</p>",
        "id": 184372785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577535217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I don't know whether I'll have time/skills to work on this, and I don't expect it to be done soon. However I feel that this is a way to go, at least for algebraic structures.</p>",
        "id": 184372789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577535237
    },
    {
        "content": "<p>I don't deny that, I'm only trying to keep a distinction between easy modifications that could be made before or during Fomm2020 and long-term goals.</p>",
        "id": 184372850,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577535305
    },
    {
        "content": "<p>Yury, you would probably be better off talking to <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> directly about this. He understands type class inference well. In some sense type class inference has turned out to be one of the biggest problems which mathematicians have had with Lean 3, and things were written about it in the mathlib paper. My impression is that it was originally written with modest goals in mind perhaps inspired by the way it is used in computer science, and then mathematicians wanted to push it a whole lot further (\"if <code>group</code> is a typeclass then I guess <code>module</code> should be too, because modules are defined by a few axioms just like groups -- oh dear things just got complicated\" was something that happened, and \"if <code>group</code> is a typeclass then I guess <code>ring</code> and <code>comm_ring</code> and <code>field</code> and <code>complete_topological_field</code> and 100 other things are too -- oh crap, type class inference is now trying 20 times to prove that the integers are a field\".</p>",
        "id": 184377809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577544348
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span>  Is there any reason why <code>intro</code> wasn't changed to <code>rintro</code> in Lean 3.5.0c?</p>\n</blockquote>\n<p>The goal of the first community release was to be conservative, to make a Lean version that could be used interchangeably (almost) with 3.4.2. If we move <code>rintro</code> into Lean core, we have to remove it from mathlib. That can be a suitable next step but I think there needs to be a discussion about the willingness of the mathlib community to break compatibility with Leo's Lean 3</p>",
        "id": 184381623,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577550944
    },
    {
        "content": "<p>But isn't <code>rintro</code> fully compatible with <code>intro</code>?</p>",
        "id": 184381671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577550982
    },
    {
        "content": "<p>You mean move <code>rintro</code> and call it <code>intro</code>? You're right, that might not break anything. This is in the category of changes we could call moving mathlib tactics to core (which especially concerns the primed tactics). The best is to make one decision for the block with little variations from tactic to tactic.</p>",
        "id": 184381732,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577551098
    },
    {
        "content": "<p>Yes.</p>",
        "id": 184381826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577551237
    },
    {
        "content": "<p>BTW, a smaller change that could help: add a command <code>#cache_instance</code> that adds an instance to the cache. Should work for instances involving local <code>variables</code>. Then a file can start with several <code>#cache_instance</code>s instead of <code>local attribute [instance, priority 10000]</code>.</p>",
        "id": 184597273,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577883793
    }
]