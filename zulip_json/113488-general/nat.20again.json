[
    {
        "content": "<p>What's the state of the art for proving goals like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206720237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597251119
    },
    {
        "content": "<p>I don't know about state of the art, but moving everything to nat then omega seems a general strategy.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">i_val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j_val</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206720891,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597251442
    },
    {
        "content": "<p>I guess you want a tactic like <code>zify</code> to take goals about fin to goals about nat with various bounds so omega can do its thing?</p>",
        "id": 206721149,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597251590
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">i_val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j_val</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- omega fails here</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"c1\">-- works here</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>omega is sort of like an old car, if you use it a fair amount then you learn some of the tricks and you can get things out of it, but there's an issue where there's a list of problems it has.</p>",
        "id": 206721152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597251591
    },
    {
        "content": "<p>Thanks, I definitely don't have the habit of using <code>omega</code> yet.</p>",
        "id": 206721241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597251631
    },
    {
        "content": "<p>It works best if you have cleared all other hypotheses and made sure every natural is in a sensible form.</p>",
        "id": 206721568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597251812
    }
]