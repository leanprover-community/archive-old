[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/11091\">#11091</a> I add some new <code>*_hom_class</code> instances and now Lean fails to simplify some coercion in <code>data.polynomial.basic</code>. I suggest that we define something like this (probably, with some <code>out_param</code>s):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">fun_like.has_forgetful_coe</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe_coe</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then we automatically get all coercions like <code>(M ≃* N) → (M →* N)</code>. Currently, I'm not sure how to rewrite <code>(((e : R ≃+* S) : R →+* S) : R →* S) to </code>e : R →* S`.</p>",
        "id": 266276522,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640712419
    },
    {
        "content": "<p>The class looks good to me. Looks like <code>α</code> and <code>β</code> have to be <code>out_param</code>s so the <code>extends has_coe_t F G</code> doesn't become a dangerous instance.</p>",
        "id": 266290477,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640723926
    },
    {
        "content": "<p>Do you have any ideas about the <code>norm_cast</code> lemma squashing two <code>coe</code>s? Should we add a reducible non-instance <code>fun_like.has_forgetful_coe.trans</code>?</p>",
        "id": 266297263,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640729566
    },
    {
        "content": "<p>I don't want to make it an instance because Lean should find <code>has_forgetful_coe F (M →* N)</code> from <code>monoid_hom_class F M N</code>.</p>",
        "id": 266297302,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640729610
    },
    {
        "content": "<p>But it should be defeq to the instance coming from <code>monoid_hom_class</code>.</p>",
        "id": 266297367,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640729644
    },
    {
        "content": "<p>Agreed, let's not make <code>trans</code> an instance. The alternative is to unbundle the data (<code>coe</code>) from the class <code>forgetful_coe</code>, then we can be sure there's no non-instance appearing in the <code>simp</code>-normal form. But that has its own (term size) issues...</p>",
        "id": 266351626,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640789808
    },
    {
        "content": "<p>So I'm thinking along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">fun_like.has_forgetful_coe</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe_fn_coe</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then you should be able to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_coe</span> <span class=\"o\">[</span><span class=\"n\">has_forgetful_coe</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_forgetful_coe</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_forgetful_coe</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">coe_fn_injective</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_fn_coe</span><span class=\"o\">])</span> <span class=\"c1\">-- or something like that</span>\n</code></pre></div>",
        "id": 266351824,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640790002
    },
    {
        "content": "<p>Then the <code>monoid_hom_class.has_forgetful_coe</code> would provide the <code>F → H</code> and <code>G → H</code> instances, and <code>ring_hom_class.has_forgetful_coe</code> the <code>F → G</code> instance.</p>",
        "id": 266351963,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640790075
    },
    {
        "content": "<p>Or actually, <code>coe_coe</code> should be provable without unbundling <code>has_coe_t</code>.</p>",
        "id": 266352032,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640790134
    }
]