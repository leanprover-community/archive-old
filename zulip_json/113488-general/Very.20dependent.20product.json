[
    {
        "content": "<p>Is there a trick to have a type which is like a dependent product <code>Π k : ℕ, X k</code> except the definition of <code>X (k+1)</code> depends on the value chosen in <code>X k</code>? I know this doesn't make sense, I'm asking how to get something which makes sense.</p>",
        "id": 199256099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590844099
    },
    {
        "content": "<p>Let me try to avoid the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> issue. The context is I try, <em>again</em>, to build inductively build a sequence <code>u : ℕ → Y</code> but recording many properties linking <code>u k</code> and <code>u (k+1)</code>, so I thought maybe <code>u</code> should live in a sort of dependent product.</p>",
        "id": 199256212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590844284
    },
    {
        "content": "<p>I think <code>well_founded.fix</code> is meant to be the solution to this problem.</p>",
        "id": 199256267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590844327
    },
    {
        "content": "<p>But it is a thoroughly foreign concept for most mathematicians (like me).</p>",
        "id": 199256278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590844345
    },
    {
        "content": "<p>Can't you do it by using <code>choose</code> to assert the relationship between <code>u k</code> and <code>u (k+1)</code>, and <code>nat.rec_on</code> to do the induction, like in the proof of Baire theorem <a href=\"https://github.com/leanprover-community/mathlib/blob/62cb7f2f34079df7c054239d467f72c61be4f63a/src/topology/metric_space/baire.lean#L123\">https://github.com/leanprover-community/mathlib/blob/62cb7f2f34079df7c054239d467f72c61be4f63a/src/topology/metric_space/baire.lean#L123</a> ?</p>",
        "id": 199256477,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590844618
    },
    {
        "content": "<p>This sounds a bit like Reid's <code>crec</code> might help, but I might be completely wrong as I don't properly understand it.</p>",
        "id": 199256489,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590844664
    },
    {
        "content": "<p>Yes, this is what <code>crec</code> does</p>",
        "id": 199256551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590844750
    },
    {
        "content": "<p>Let me try a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, especially since Sébastien and Reid are around:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">$</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Set u 0 = x. Assume u is constructed until rank k.</span>\n<span class=\"cm\">  In particular dist x (u k) ≤ ∑ j in range k, ε/2^j ≤ 2*ε</span>\n<span class=\"cm\">  Specialize h to k and u k and what we know about u k. The existential in h then gives u (k+1).</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199256633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590844865
    },
    {
        "content": "<p>I hope I kept enough information to make this correct and relevant.</p>",
        "id": 199256636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590844877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> do you think you could try to unsorry the above proof?</p>",
        "id": 199257498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590846185
    },
    {
        "content": "<p>Yes, I will unsorry your proof, but not now as the kids want to go to the beach (nice week-end at &lt; 100km from Rennes :)</p>",
        "id": 199257867,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590846773
    },
    {
        "content": "<p>Enjoy!</p>",
        "id": 199257898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590846823
    },
    {
        "content": "<p>You can start with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">$</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"o\">((</span><span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨@</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon</span> <span class=\"n\">X</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">x&#39;</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">u_step</span> <span class=\"n\">hu_step</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">u_step</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">u_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u_step</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"kn\">using</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec&#39;</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ihn</span><span class=\"o\">,</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Set u 0 = x. Assume u is constructed until rank k.</span>\n<span class=\"cm\">  In particular dist x (u k) ≤ ∑ j in range k, ε/2^j ≤ 2*ε</span>\n<span class=\"cm\">  Specialize h to k and u k and what we know about u k. The existential in h then gives u (k+1).</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>At this moment all type-related problems are solved.</p>",
        "id": 199259838,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590849829
    },
    {
        "content": "<p>And the proof state is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n<span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">u_step</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">hu_step</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n    <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">→</span>\n    <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"o\">(</span><span class=\"n\">u_step</span> <span class=\"n\">k</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">u_step</span> <span class=\"n\">k</span> <span class=\"n\">x&#39;</span><span class=\"o\">),</span>\n<span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span> <span class=\"n\">u_step</span><span class=\"o\">,</span>\n<span class=\"n\">u_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u_step</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">ihn</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">m</span>\n<span class=\"err\">⊢</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199259887,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590849859
    },
    {
        "content": "<p>Thank you very much Yury! I'll study this. I'm still interested to see Sébastien's version anyway.</p>",
        "id": 199262107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590852740
    },
    {
        "content": "<p>The first <code>replace</code> changes order of quantifiers to match what is in <code>baire</code>, then I do the trick suggested by Sébastien.</p>",
        "id": 199262476,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590853228
    },
    {
        "content": "<p>Here is an (almost) working version, with just one sorry left:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring_exp</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dist_le_of_geometric_aux</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">$</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Set u 0 = x. Assume u is constructed until rank k.</span>\n<span class=\"cm\">  In particular dist x (u k) ≤ ∑ j in range k, ε/2^j ≤ 2*ε</span>\n<span class=\"cm\">  Specialize h to k and u k and what we know about u k. The existential in h then gives u (k+1).</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">k</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">x&#39;</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">choose</span> <span class=\"n\">F</span> <span class=\"n\">hF</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">u0</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">un</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"kn\">using</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">case_strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">u0</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">div_one&#39;</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">div_one&#39;</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">dist_self</span><span class=\"o\">],</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">un</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">Dn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">u0</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">dist_le_of_geometric_aux</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">k</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hk</span> <span class=\"n\">hm</span><span class=\"o\">)},</span>\n    <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">un</span><span class=\"o\">],</span>\n      <span class=\"k\">have</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n        <span class=\"n\">le_of_lt</span> <span class=\"o\">((</span><span class=\"n\">hF</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">Dn</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">div_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ε_pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n      <span class=\"n\">convert</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">Z</span> <span class=\"n\">this</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n      <span class=\"n\">ring_exp</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">Dn</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">A</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This is cheating a little bit, since using junk values in the definition of <code>F</code> one can define your sequence by induction, and then check its properties (i.e., separate the data from the proof). It would be possible to do it also mixing the data and the proof as <code>nat.rec_on</code> allows you to have a different type at each step, so it makes it possible to construct a sequence <code>u</code> such that <code>u n</code> belongs to the subtype <code>{y // dist y x ≤ 2 * ε - ε / 2 ^ n ∧ ε * φ x ≤ ε/2^n * φ y}</code>. But it means you have to do together the definition and the proof. This is definitely possible, but less convenient.</p>",
        "id": 199270901,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590865312
    },
    {
        "content": "<p>I hadn't looked at  Yury's suggestion. It is essentially the same, although he's clearly better at golf :)</p>",
        "id": 199271108,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590865619
    },
    {
        "content": "<p>Thank you very much Sébastien, I'll read both your code and Yury's carefully. Constructing a <code>u</code> in this dependent product is what I started doing, but it didn't sound fun.</p>",
        "id": 199271404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590865929
    },
    {
        "content": "<p>I'll try to get to crec tomorrow and try out this example</p>",
        "id": 199280440,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590880428
    },
    {
        "content": "<p>Meanwhile I will distract Patrick with <a href=\"https://github.com/leanprover-community/mathlib/issues/2879\">#2879</a></p>",
        "id": 199280483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590880482
    },
    {
        "content": "<p>I don't know how I'm meant to be distracted. I'd love to have this tactic but I don't know how I could help.</p>",
        "id": 199297768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590915751
    },
    {
        "content": "<p>I hope to return to the main topic of this thread today, maybe I should say what is the full context. What I'm formalizing is Lemma 5.21 on Page 179 of <a href=\"https://arxiv.org/abs/1011.1690\">https://arxiv.org/abs/1011.1690</a>.</p>",
        "id": 199297851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590915936
    },
    {
        "content": "<p>Don't be worried by the title of this book, I'm really interested only in this lemma (at least until mathlib gets a long way in geometry and analysis).</p>",
        "id": 199297894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590916010
    },
    {
        "content": "<p>Actually I think this is a very nice formalization challenge. Anyone can participate. You don't even need to know about metric spaces, this lemma is not easier when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">X = \\mathbb R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>. I'd be interested to see <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> golfing this (without necessarily following the \"proof\" from that book).</p>",
        "id": 199297949,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590916148
    },
    {
        "content": "<p>In case it's not clear, the name attached to this lemma also features on <a href=\"https://www.math.ias.edu/people/faculty\">https://www.math.ias.edu/people/faculty</a>.</p>",
        "id": 199298004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590916231
    },
    {
        "content": "<p>Would you care to state the theorem? Or is that part of the challenge</p>",
        "id": 199298055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590916326
    },
    {
        "content": "<p>Sure I can state it</p>",
        "id": 199298060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590916366
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">hofer</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε&#39;</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span>\n                   <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">ε</span> <span class=\"bp\">∧</span>\n                   <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">∧</span>\n                   <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 199298071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590916412
    },
    {
        "content": "<p>The notations are slightly different because this is taken from the original paper, not the textbook.</p>",
        "id": 199298112,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590916443
    },
    {
        "content": "<p>I apologize for not having given the full context yesterday, but I'm really interested in learning how to build sequences by non trivial induction in Lean, since it is a very common proof scheme that doesn't translate easily.</p>",
        "id": 199298127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590916526
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span>\n\n<span class=\"c1\">-- A non-negative sequence f(n) with 2f(n) &lt; f(n+1) is unbounded.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">aux1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">hofer</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε&#39;</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span>\n                   <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">ε</span> <span class=\"bp\">∧</span>\n                   <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">∧</span>\n                   <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">ih</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">ih</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">H</span> <span class=\"k\">else</span> <span class=\"n\">ih</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">aux1</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nonneg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">H</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n      <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}),</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_forall</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h3</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">HN</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199298743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590917764
    },
    {
        "content": "<p>how about something like this</p>",
        "id": 199298745,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590917772
    },
    {
        "content": "<p>I've converted 1 <code>sorry</code> into 5 <code>sorry</code>s</p>",
        "id": 199298797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590917907
    },
    {
        "content": "<p>surely this must mean progress</p>",
        "id": 199298798,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590917911
    },
    {
        "content": "<p>I used <code>classical.epsilon</code> instead of <code>classical.some</code> there</p>",
        "id": 199299004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590918269
    },
    {
        "content": "<p>I'll read Kenny's message next. But first I have a question. Sébastien and Yury both use a version of the following trick that I was missing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨@</span><span class=\"n\">epsilon</span> <span class=\"n\">X</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">epsilon_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"c\">/-</span><span class=\"cm\"> with readable tactic state:</span>\n<span class=\"cm\">begin</span>\n<span class=\"cm\">  by_cases hx : P x,</span>\n<span class=\"cm\">  finish,</span>\n<span class=\"cm\">  use x,</span>\n<span class=\"cm\">end</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>Is this part of a more general trick? Can this be avoided?</p>",
        "id": 199299089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590918376
    },
    {
        "content": "<p>It can be avoided, but it is a lot easier to take advantage of potential garbage results in order to delay the proof of properties of the sequence until you are done defining it</p>",
        "id": 199299163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590918507
    },
    {
        "content": "<p>Defining Kenny's f sequence was my original plan, but then I thought I should start with <code>by_contradiction</code></p>",
        "id": 199299164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590918509
    },
    {
        "content": "<p>I've made it this far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ε</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span><span class=\"o\">),</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)),</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199299167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590918528
    },
    {
        "content": "<p>I'm also curious to see why we use all these <code>λ n, nat.rec_on n ...</code> instead of <code>nat.rec</code>. Is this purely a failure of the elaborator or are there deeper reasons?</p>",
        "id": 199299235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590918646
    },
    {
        "content": "<p>the former</p>",
        "id": 199299241,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590918670
    },
    {
        "content": "<p>left to right elaboration</p>",
        "id": 199299244,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590918685
    },
    {
        "content": "<p>Mario's start looks very close to the informal proof, I'd be curious to see whether it is manageable.</p>",
        "id": 199299298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590918794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Very.20dependent.20product/near/199298127\">said</a>:</p>\n<blockquote>\n<p>I apologize for not having given the full context yesterday, but I'm really interested in learning how to build sequences by non trivial induction in Lean, since it is a very common proof scheme that doesn't translate easily.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2850\">#2850</a> is meant to do this sort of inductive construction, but I'm not sure how suitable it is here. Isn't \"apply Baire category theorem\" the canonical solution to this sort of question about complete metric spaces? In a sense <a href=\"https://github.com/leanprover-community/mathlib/issues/2850\">#2850</a> is equivalent to BCT</p>",
        "id": 199299305,
        "sender_full_name": "David Wärn",
        "timestamp": 1590918832
    },
    {
        "content": "<p>Indeed, the proof here looks <em>very</em> similar to BCT</p>",
        "id": 199299368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590918904
    },
    {
        "content": "<p>David, I'd be curious to see whether you can prove this using <a href=\"https://github.com/leanprover-community/mathlib/issues/2850\">#2850</a>.</p>",
        "id": 199299418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590919003
    },
    {
        "content": "<p>I also don't know a proof using Baire. But I can tell you this lemma is equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> being complete if you move everything but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> right of the colon.</p>",
        "id": 199299438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590919067
    },
    {
        "content": "<p>Kenny's attempt seems pretty hard to complete. As I feared  when I decided not to try that, you really need to reason about the <em>first</em> time you switch branch in the definition of <code>f</code>.</p>",
        "id": 199299864,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590919872
    },
    {
        "content": "<p>for which <code>sorry</code>?</p>",
        "id": 199299871,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590919918
    },
    {
        "content": "<p>you can prove <code>dist (f n) (f (n+1)) &lt;= \\e / 2^n</code> unconditionally</p>",
        "id": 199299914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590919941
    },
    {
        "content": "<p>up to indexing error</p>",
        "id": 199299915,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590919948
    },
    {
        "content": "<p>This is the easy part. The issue is with <code>ε * φ x ≤ ε / 2 ^ N * φ (f N)</code></p>",
        "id": 199300030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590920212
    },
    {
        "content": "<p>Here is my \"crec style\" attempt, where I've <code>sorry</code>ed some of the boring inequality bits. This is not actually using <code>crec</code>, just the principle behind it. I still need to think about whether <code>crec</code> really helps in this case, but after breakfast.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">pfun</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- &quot;Partial&quot; choice, in the sense of pfun/roption:</span>\n<span class=\"cm\">choose a value `x` satisfying `p x` if there is one, otherwise fail. -/</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">pchoice</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">roption</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dom</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">get</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">div_le_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">/</span> <span class=\"n\">β</span> <span class=\"bp\">≤</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">hofer</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε&#39;</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span>\n                   <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">ε</span> <span class=\"bp\">∧</span>\n                   <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">∧</span>\n                   <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- Build the sequence x₀, x₁, ... as a partial function</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→.</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n      <span class=\"c1\">-- get the previous value (if defined)</span>\n      <span class=\"n\">x&#39;</span> <span class=\"err\">←</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- choose a legal next value</span>\n      <span class=\"n\">pchoice</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Establish some basic properties of the construction</span>\n  <span class=\"k\">have</span> <span class=\"n\">def_of_succ_def</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">dist_pair_bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn&#39;</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">),</span>\n    <span class=\"n\">dist</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hn&#39;</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">hn&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">dist</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">dist_x_bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">dist_pair_bound</span> <span class=\"o\">(</span><span class=\"n\">def_of_succ_def</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">def_of_succ_def</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">φ_pair_bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn&#39;</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">),</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hn&#39;</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">hn&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">φ_bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">φ_pair_bound</span> <span class=\"o\">(</span><span class=\"n\">def_of_succ_def</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">def_of_succ_def</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- If the construction stops, we can extract the required x&#39;</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"err\">∉</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hn₁</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">hn₁</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hn₁</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_not</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">pε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">ε_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">two_pos</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pε</span><span class=\"o\">,</span>\n      <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">div_le_self</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ε_pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">two_pos</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">dist_x_bound</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">calc</span>\n        <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">field_simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n      <span class=\"bp\">...</span>       <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_le_mul_left</span> <span class=\"n\">pε</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">φ_bound</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- otherwise, f (n+1) would be defined too, contradicting hn₁</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hn₁</span> <span class=\"bp\">⟨</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_of_not_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- Otherwise, we use the construction to build a Cauchy sequence</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">dist_pair_bound&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist_pair_bound</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">φ_bound&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">φ_bound</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- f&#39; is a Cauchy sequence on which φ diverges</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199302114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590924123
    },
    {
        "content": "<p>I tried to follow the order of the original proof. As such, this falls a bit outside the intended scope of <code>crec</code> because you have no reason to think that the construction of the sequence will always be successful. Probably more efficient is to prove the statement by contradiction, which tells you that building the sequence has to succeed.</p>",
        "id": 199302193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590924338
    },
    {
        "content": "<p>One annoyance: <code>do</code> notation seems not to work inside tactic mode (?)</p>",
        "id": 199302243,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590924410
    },
    {
        "content": "<p>Thank you very much Reid! I'll read that. I totally agree that proving the statement by contradiction from the beginning can only be more efficient. That's what gives the lemma I wrote yesterday.</p>",
        "id": 199303447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590926586
    },
    {
        "content": "<p>Proof complete, although not as elegant as I would have liked</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">hofer</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε&#39;</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span>\n                   <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">ε</span> <span class=\"bp\">∧</span>\n                   <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">∧</span>\n                   <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ε</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span><span class=\"o\">),</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">two_pos</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x&#39;</span> <span class=\"n\">ε&#39;</span><span class=\"o\">,</span> <span class=\"n\">xi</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">ε&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">ε&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">x&#39;</span> <span class=\"n\">ε&#39;</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">xi</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">x₁</span> <span class=\"n\">ε₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">e</span> <span class=\"n\">at</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"n\">injection</span> <span class=\"n\">a&#39;</span> <span class=\"k\">with</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">div_div_eq_div_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">hx₁</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon_spec</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">a₁</span> <span class=\"n\">at</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">a₁</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n      <span class=\"n\">subst</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n      <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">ε_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">two</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">div_le_of_le_mul</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">two</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">le_mul_of_ge_one_left</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">ε_pos</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">one_le_pow_of_one_le</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x₁</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">h₃</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"n\">dist_comm</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">ε_pos</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_or_pos</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">injection</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span> <span class=\"mi\">0</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">le_div_iff</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">two</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">((</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">ε_pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_not_gt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hx&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">two</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hx₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"k\">obtain</span> <span class=\"n\">hm</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff_lt_or_eq</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"n\">two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"bp\">_</span> <span class=\"n\">hm</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_right_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">x₁</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"n\">this</span> <span class=\"n\">hx&#39;</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"n\">hm</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">hm</span><span class=\"o\">)),</span>\n        <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">dist_triangle</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x₁</span> <span class=\"n\">x&#39;</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">h₁&#39;</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">∘</span> <span class=\"n\">xi</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">uniformity_basis_dist</span><span class=\"bp\">.</span><span class=\"n\">cauchy_seq_iff&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">pow_unbounded_of_one_lt</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">one_lt_two</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_lt_iff</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"n\">hδ</span> <span class=\"n\">two</span><span class=\"o\">),</span> <span class=\"err\">←</span> <span class=\"n\">div_lt_iff&#39;</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">two</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">xi</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">x&#39;</span> <span class=\"n\">ε&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">main</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dist_comm</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">N</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">div_pos</span> <span class=\"n\">ε_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">two</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">cauchy_seq_tendsto_of_complete</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">two_pos</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">xi</span> <span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">x&#39;</span> <span class=\"n\">ε&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">main</span> <span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">tendsto_at_top</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"n\">cont</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">hx1</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">N₂</span><span class=\"o\">,</span> <span class=\"n\">hN₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">pow_unbounded_of_one_lt</span> <span class=\"o\">((</span><span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">φ</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">one_lt_two</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N₂</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hN</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hN</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">not_lt_of_lt</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">xi</span> <span class=\"n\">M</span> <span class=\"k\">with</span> <span class=\"n\">x&#39;</span> <span class=\"n\">ε&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hM</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">main</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hM</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N₂</span><span class=\"o\">)),</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hN₂</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hN₂</span> <span class=\"o\">(</span><span class=\"n\">pow_le_pow</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">le_add_of_le_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">N</span> <span class=\"n\">N₂</span><span class=\"o\">)</span> <span class=\"n\">zero_le_one</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_lt_iff&#39;</span> <span class=\"n\">hx1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hN₂</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">lt_sub_iff_add_lt</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">hN₂</span> <span class=\"n\">this</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">le_abs_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199305865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590930732
    }
]