[
    {
        "content": "<p>When I tried to create a type like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">george</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n</code></pre></div>\n<p>I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 319133852,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672726929
    },
    {
        "content": "<p>Do you just want to fix the error? You can put <code>[DecidableEq X]</code> after <code>{X : Type}</code></p>",
        "id": 319146206,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1672734642
    },
    {
        "content": "<p>(This is because Lean doesn't how to determine whether <code>x = y</code>, because the type <code>X</code> is completely arbitrary. The <code>DecidableEq</code> fix says \"I will only call <code>george</code> in places where the context contains a way to determine equality in the <code>X</code> I use\".  If you add <code>DecidableEq</code>, it will be an error <em>at the point where you try and use <code>george</code></em> if Lean can't work it out.)</p>",
        "id": 319151401,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1672737004
    },
    {
        "content": "<p>Probably <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PLift#doc\">docs4#PLift</a> is a better way to achieve the same thing as your <code>george</code>.</p>",
        "id": 319152682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672737518
    },
    {
        "content": "<p>I wanted something which was a constituent of Type but acted like a proposition (so it should be Unit or Empty type but we might not know which). And the simpler the better. Here's what I really wanted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">type_of</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span><span class=\"n\">Unit</span>\n</code></pre></div>\n<p>but I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span>\n<span class=\"n\">argument</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.16705</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.16675</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 319218484,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672759493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/A.20unit.20type.20equality/near/319151401\">said</a>:</p>\n<blockquote>\n<p>(This is because Lean doesn't how to determine whether <code>x = y</code>, because the type <code>X</code> is completely arbitrary. The <code>DecidableEq</code> fix says \"I will only call <code>george</code> in places where the context contains a way to determine equality in the <code>X</code> I use\".  If you add <code>DecidableEq</code>, it will be an error <em>at the point where you try and use <code>george</code></em> if Lean can't work it out.)</p>\n</blockquote>\n<p>I guess what I don't understand here is how to make a type which is Unit when x = y, Empty otherwise, but which doesn't require this be settled when defining the type. And I want it to work for any proposition not just x = y. But unfortunately I get the above error when I try the way that occurred to me.</p>",
        "id": 319219349,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672759745
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PSigma#doc\">docs4#PSigma</a> for this (notation <code>Σ'</code>). The only difference is that the fields are also allowed to be propositions.<br>\nOr just use PLift like I suggested above, which is doing the same thing but simpler (without an extra <code>Unit</code> field).</p>",
        "id": 319220441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672760075
    },
    {
        "content": "<blockquote>\n<p>I wanted something which was a constituent of Type but acted like a proposition (so it should be Unit or Empty type but we might not know which).</p>\n</blockquote>\n<p>If this doesn't mean to act like a <em>specific</em> proposition, but you just one to say that a type behaves like propositions do, in that it is either empty or has one term, you can also use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subsingleton#doc\">docs4#Subsingleton</a></p>",
        "id": 319222739,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672760760
    },
    {
        "content": "<p>Spelling out what Reid means, you probably want <code>PLift (x = y)</code>.</p>",
        "id": 319225555,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672761560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/A.20unit.20type.20equality/near/319225555\">said</a>:</p>\n<blockquote>\n<p>Spelling out what Reid means, you probably want <code>PLift (x = y)</code>.</p>\n</blockquote>\n<p>Ok I think I get it now.</p>\n<p>And I can do this too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span>  <span class=\"n\">x</span>  <span class=\"s2\">\":\"</span>  <span class=\"n\">X</span>  <span class=\"s2\">\")\"</span> <span class=\"s2\">\"↦\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Σ\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\":\"</span> <span class=\"n\">A</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Π\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\":\"</span> <span class=\"n\">A</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⊛\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"o\">):</span><span class=\"bp\">⊛</span> <span class=\"o\">:=</span> <span class=\"n\">PSigma.mk</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 319248846,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672768479
    }
]