[
    {
        "content": "<p>Would it be hard to make <code>ext</code> use more information to match lemmas? There are (in <code>mathlib</code> or not yet) specialized <code>ext</code> lemmas for (additive/multiplicative/linear/ring/algebra) homomorphisms from <code>nat</code>, <code>int</code>, <code>submodule.quotient</code>, <code>monoid_algebra</code>, <code>finsupp=direct_sum</code>, <code>multiset</code>, <code>free_*</code>.</p>",
        "id": 196003553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588363454
    },
    {
        "content": "<p>Now I'm adding <code>*hom_ext</code> lemmas and applying them explicitly.</p>",
        "id": 196003608,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588363490
    },
    {
        "content": "<p>I'm talking about, e.g., <code>(f g : free_group α →* G) (h : ∀ x : α, f (of x) = g (of x)) : f = g</code> or <code>(f g : nat →+ A) (h : f 1 = g 1) : f = g</code>, or <code>(p : submodule R M) (f g : p.quotient →ₗ[R] M₂) (h : ∀ x : M, f (quotient.mk x) = g (quotient.mk x)) : f = g</code>.</p>",
        "id": 196003846,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588363630
    },
    {
        "content": "<p>We can use <code>ext ⟨x⟩</code> instead of the last one but not for the other lemmas.</p>",
        "id": 196003941,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588363691
    },
    {
        "content": "<p>A few more: <code>(f g : (α →₀ A) →+ B) (h : ∀ a b, f (single a b) = g (single a b)) : f = g</code>, <code>(f g : monoid_algebra k G →ₐ[k] A) (h : ∀ a, f (single a 1) = g (single a 1)) : f = g</code>.</p>",
        "id": 196004073,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588363795
    },
    {
        "content": "<p>Another possibility: make <code>ext</code> aware of <code>priority</code> and make all these lemmas have higher priority than generic ones. If the top-priority lemma fails, <code>ext</code> should try the next one.</p>",
        "id": 196004476,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588363995
    },
    {
        "content": "<p>Is it clear what someone wants ext to do in practice? Do they always want the most aggressive one?</p>",
        "id": 196007076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588365530
    },
    {
        "content": "<p>I wouldn't be surprised if <code>ext</code> was automatically aware of <code>priority</code>; did you try it?</p>",
        "id": 196007270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588365636
    },
    {
        "content": "<p>I think I remember <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> saying that some kind of enumerating over declarations with a given tag orders by priority by default</p>",
        "id": 196007340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588365678
    },
    {
        "content": "<p>The tactic <code>attribute.get_instances</code> returns a list ordered by priority, the first element has the highest priority. If priorities are tied then it depends on  when a declaration is given (and probably the order in which you import files).</p>",
        "id": 197189716,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589223742
    },
    {
        "content": "<p>Thank you. I forgot to post here that I've tried adding extra <code>@[ext]</code> attributes and it worked. I'll PR some of those <code>@[ext]</code>s.</p>",
        "id": 197190286,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589224006
    }
]