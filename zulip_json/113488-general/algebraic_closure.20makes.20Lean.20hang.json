[
    {
        "content": "<p>This gives me excessive memory consumption errors. Any tips about what to do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.algebraic_closure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">examle</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≃+*</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 253987122,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1632101965
    },
    {
        "content": "<p>Does it work if you fill in the def? I see the same behaviour with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span> <span class=\"bp\">≃+*</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- hangs</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span> <span class=\"bp\">≃+*</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">ring_equiv.refl</span> <span class=\"n\">_</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 254014006,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632126458
    },
    {
        "content": "<p>Yeah, I think this is the \"standard\" lemma/def issue. I tend to make these sorts of defns a lemma until its done, and then change then to def at the end</p>",
        "id": 254036040,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632138292
    },
    {
        "content": "<p>Iirc it's related to defs being able to change the 'actual' type depending on the contents</p>",
        "id": 254036113,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632138337
    },
    {
        "content": "<p>What is it actually doing while it hangs though? Presumably it must be unfolding some definitions, but why?<br>\nIf <code>b</code> above works, then it doesn't seem to be an instance search issue...?</p>",
        "id": 254038728,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632139711
    },
    {
        "content": "<p>I hit this issue very often in LTE. I used the same workaround as Eric: keep the defns a lemma until all the pieces are in place.</p>",
        "id": 254038912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632139811
    },
    {
        "content": "<p>Running the profiler it looks like it is the decl post-processing that hangs?</p>",
        "id": 254039279,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632140025
    }
]