[
    {
        "content": "<p>Hi, I am going through the online course Logic and Proof. I am stuck in the exercises. Is this the right place to ask such questions?</p>",
        "id": 127707574,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1528364578
    },
    {
        "content": "<p>Yes</p>",
        "id": 127707694,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528364684
    },
    {
        "content": "<p>Thanks. So I'm stuck progressing with the last prob. of <a href=\"https://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html#exercises\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html#exercises\">Chapter 4's exercises</a> i.e. prove <code>¬ (A ↔ ¬ A)</code></p>",
        "id": 127708058,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1528365028
    },
    {
        "content": "<p>I am thinking of following the rules mentioned in the book till now and start with the assumption that <code>(A ↔ ¬ A)</code>is true and then progress to show <code>false</code> so that I can prove the negation. But I can't figure out a way forward</p>",
        "id": 127708189,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1528365168
    },
    {
        "content": "<p>hint: prove <code>¬ A</code> from your assumption</p>",
        "id": 127708218,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528365214
    },
    {
        "content": "<p>This actually came up in M1F, and I was annoyed with myself for assuming excluded middle.</p>",
        "id": 127708555,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528365499
    },
    {
        "content": "<p>not constructive enough, eh :P</p>",
        "id": 127708566,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528365515
    },
    {
        "content": "<p>am failing to get how can I get <code>¬ A</code> with just assuming <code>A ↔ ¬ A</code>. I can get it if I also assume <code>A</code> and apply left elimination to the iff to get <code>¬ A</code>. Is my understanding correct ?</p>",
        "id": 127708801,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1528365739
    },
    {
        "content": "<p>no, you need to assume <code>A</code> and prove <code>false</code></p>",
        "id": 127708812,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528365760
    },
    {
        "content": "<p>ok, which you get via deducing <code>¬ A</code></p>",
        "id": 127708823,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528365782
    },
    {
        "content": "<p>Try <code>have h : ¬ A</code></p>",
        "id": 127708944,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528365934
    },
    {
        "content": "<p>I am trying to do something like that but I am getting a type mismatch error coz of the additional assumption. <br>\nCould you please look at this <a href=\"https://leanprover.github.io/live/3.4.1/#code=variables%20A%20:%20Prop%0A%0Aexample%20:%20¬%20(A%20↔%20¬%20A)%20:=%0Aassume%20h,%0Aassume%20a%20:%20A,%0Ahave%20h1%20:%20¬%20A,%20from%20h.mp%20a,%0Ashow%20false,%20from%20h1%20a\" target=\"_blank\" title=\"https://leanprover.github.io/live/3.4.1/#code=variables%20A%20:%20Prop%0A%0Aexample%20:%20¬%20(A%20↔%20¬%20A)%20:=%0Aassume%20h,%0Aassume%20a%20:%20A,%0Ahave%20h1%20:%20¬%20A,%20from%20h.mp%20a,%0Ashow%20false,%20from%20h1%20a\">LEAN code</a></p>",
        "id": 127708955,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1528365957
    },
    {
        "content": "<p>You can only do <code>assume a : A</code> if your goal is <code>A → something</code></p>",
        "id": 127709050,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528366045
    },
    {
        "content": "<p>Have you used <code>have</code> before?</p>",
        "id": 127709059,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1528366057
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 127709121,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528366096
    },
    {
        "content": "<p>so your code should look like this</p>",
        "id": 127709126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528366101
    },
    {
        "content": "<p>yeah that's what I am trying but could not think of any intro/elim rule to apply to get <code>¬ A</code> from <code>h</code></p>",
        "id": 127709348,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1528366355
    },
    {
        "content": "<p>The biggest hint here was the innocuous sentence \"...and I was annoyed with myself for assuming excluded middle\" :). You can't conjure <code>not A</code> from thin air, but you <em>can</em> conjure something almost as good.</p>",
        "id": 127709518,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1528366535
    },
    {
        "content": "<p>Ok I think I got it</p>\n<div class=\"codehilite\"><pre><span></span>variables A : Prop\n\nexample : ¬ (A ↔ ¬ A) :=\nassume h,\nhave h1 : ¬ A, from\n    assume a : A,\n    show false, from (h.mp a) a,\nshow false, from h1 (h.mpr h1)\n</pre></div>",
        "id": 127709738,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1528366779
    },
    {
        "content": "<p>thanks a lot for the guidance</p>",
        "id": 127709838,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1528366837
    },
    {
        "content": "<p>Hello again. I want to do the exercise 17.1 of the course on proving the equivalence of <em>principle of complete induction</em> to <em>principle of least element</em> in Lean. So in that regard does the following setup make sense? I still need to do the actual proof. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n                <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 129916601,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1531985102
    },
    {
        "content": "<p>the parentheses seem to be off in a few places</p>",
        "id": 129917107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531985933
    },
    {
        "content": "<p>I think this is correct with minimal parentheses:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n            <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 129917793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531987201
    },
    {
        "content": "<p>the statement of the principle of least element you gave looks really weird and is probably incorrect - I've changed the statement a bit</p>",
        "id": 129917947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531987421
    },
    {
        "content": "<p>I expect it to say something like \"if P(n) for some n, then there exists an m such that P(m), and ¬ P(x) for all smaller x\"</p>",
        "id": 129917995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531987474
    },
    {
        "content": "<p>The current statement reads to me as \"I can prove <code>P</code> by induction iff the principle of least element holds for <code>P</code>\"</p>",
        "id": 129918082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531987623
    },
    {
        "content": "<p>My point is that the right hand side doesn't look like the PLE to me</p>",
        "id": 129918311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531987975
    },
    {
        "content": "<p>Oooh, you are completely right. The right hand side should start with <code>\\exists</code>. As stated it is trivial: take <code>m = 0</code>.</p>",
        "id": 129918399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531988063
    },
    {
        "content": "<p>Also, I don't think this will actually work (unless you prove both sides individually), since the traditional reduction of induction to PLE and vice versa involves negating P</p>",
        "id": 129918405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531988075
    },
    {
        "content": "<p>this can be rectified by quantifying P individually on each side:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n           <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 129918425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531988141
    },
    {
        "content": "<p>Ok. I got the formalization of PLE. Thanks</p>",
        "id": 129918491,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1531988239
    },
    {
        "content": "<p>although in your formalization of PLE, there is no relation between <code>n</code> and <code>m</code>. Shouldn't we mention that <code>m &lt; n</code> ?</p>",
        "id": 129918612,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1531988424
    },
    {
        "content": "<p>There is no need, in the same way that there is no relation between n and x in the statement of induction</p>",
        "id": 129918986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531988889
    },
    {
        "content": "<p>You can prove, given the conclusion, that <code>m &lt;= n</code>, but it is possible that <code>m = n</code> if <code>n</code> is already the minimal witness</p>",
        "id": 129919018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531988942
    },
    {
        "content": "<p>another way to bracket it is <code>∀ (P : ℕ → Prop), (∃ n, P n) → ∃ m, P m ∧ ∀ x, x &lt; m → ¬ P x</code></p>",
        "id": 129919095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531989006
    },
    {
        "content": "<p>Ok got it.</p>",
        "id": 129919210,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1531989161
    },
    {
        "content": "<p>I'm stuck at this simple proof. how do I go from <code>n * n &lt; m * m</code> to <code>n ^ 2 &lt; m ^2</code></p>\n<div class=\"codehilite\"><pre><span></span>open nat\nvariables n m : ℕ\n\nexample : 0 &lt; n ∧ n &lt; m → n ^ 2 &lt; m ^ 2 :=\nassume h,\nhave n * n &lt; n * m, from mul_lt_mul_of_pos_left h.right h.left,\nhave n * m &lt; m * m, from mul_lt_mul_of_pos_right h.right (lt_trans h.left h.right),\nhave n * n &lt; m * m, from lt_trans ‹ n * n &lt; n * m › ‹ n * m &lt; m * m ›,\nsorry\n</pre></div>",
        "id": 130138371,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1532337957
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">variables</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span>  <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"err\">^</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"err\">^</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 130138666,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532338369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> why can't I replace <code>by dsimp [(^)]; refl</code> with <code>rfl</code>?</p>",
        "id": 130138680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532338431
    },
    {
        "content": "<p>Definitional equality is not transitive.</p>",
        "id": 130138725,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532338476
    },
    {
        "content": "<p>but then why does this work?</p>",
        "id": 130138729,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532338497
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 130138731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532338499
    },
    {
        "content": "<p>Definitional equality is not consistent either?</p>",
        "id": 130138738,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532338516
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> . I still don't understand tactics. Maybe the theorem proving in lean course will help. Logic and Proof course have few mentions of tactics.</p>",
        "id": 130138817,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1532338648
    },
    {
        "content": "<p>Kaushik, to answer your original question, there is <code>pow_two</code> which you can use to rewrite between <code>n * n</code> and <code>n^2</code>.</p>",
        "id": 130139007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532338923
    },
    {
        "content": "<p>it's not available without further import though</p>",
        "id": 130139020,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532338941
    },
    {
        "content": "<p>Right, you need to import <code>algebra.group_power</code>, I think.</p>",
        "id": 130139360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532339512
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>. but am still not sure how to use <code>pow_two</code> in my proof. I think I have to use <code>rewrite</code> tactic but not sure how. Here is how I've changed my earlier proof</p>\n<div class=\"codehilite\"><pre><span></span>import algebra.group_power\nopen nat\nvariables n m : ℕ\n\nexample : 0 &lt; n ∧ n &lt; m → n ^ 2 &lt; m ^ 2 :=\nassume h,\nhave n * n &lt; n * m, from mul_lt_mul_of_pos_left h.right h.left,\nhave n ^ 2 &lt; n * m, by sorry,\nhave n * m &lt; m * m, from mul_lt_mul_of_pos_right h.right (lt_trans h.left h.right),\nhave n * m &lt; m ^ 2, by sorry,\nlt_trans ‹ n ^ 2 &lt; n * m ›  ‹ n * m &lt; m ^ 2 ›\n</pre></div>",
        "id": 130140974,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1532342240
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">pow_two</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130141157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532342517
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">pow_two</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 130141225,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532342591
    },
    {
        "content": "<p>yeah I got the function usage part but how do I use <code>pow_two</code> when I've the <code>lt</code> relation i.e. replace sorry in <code>have n ^ 2 &lt;  n * m, by sorry</code> when I've established <code>n * n &lt; n * m</code>. Or I'm approaching it wrong ?</p>",
        "id": 130141616,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1532343201
    },
    {
        "content": "<p>You should be able to do this with <code>rw</code></p>",
        "id": 130168976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532374264
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">pow_two</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130169439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532374752
    },
    {
        "content": "<p>You should also be able to do it with <code>eq.subst</code> but I can never ever ever for the life of me get it to work.</p>",
        "id": 130169462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532374778
    },
    {
        "content": "<p><code>\\t</code></p>",
        "id": 130169478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532374799
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pow_two</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>[doesn't work]</p>",
        "id": 130169502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532374802
    },
    {
        "content": "<p>Can you fix it Kenny?</p>",
        "id": 130169525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532374811
    },
    {
        "content": "<p>I think you would like <code>by convert h</code></p>",
        "id": 130169559,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532374880
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">pow_two</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 130169633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532374947
    },
    {
        "content": "<p>I'm not sure why your original version doesn't work</p>",
        "id": 130169668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532375006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">pow_two</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 130169677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532375030
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">((((</span><span class=\"n\">pow_two</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 130169688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375042
    },
    {
        "content": "<p>:o</p>",
        "id": 130169727,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532375053
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>invalid &#39;eq.subst&#39; application, elaborator has special support for this kind of application (it is handled as an &quot;eliminator&quot;), but expected type must not contain metavariables\n  n ^ 2 &lt; n * m\n</pre></div>",
        "id": 130169729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375057
    },
    {
        "content": "<p>I see no metavariables!</p>",
        "id": 130169733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375068
    },
    {
        "content": "<p>yeah I'm puzzled too</p>",
        "id": 130169743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532375075
    },
    {
        "content": "<p><code>example (m n : ℤ) (h : n * n &lt; n * m) : n ^ (2 : ℕ) &lt; n * m := (pow_two n).symm ▸ h</code></p>",
        "id": 130169747,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532375082
    },
    {
        "content": "<p>...</p>",
        "id": 130169752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532375089
    },
    {
        "content": "<p>works</p>",
        "id": 130169753,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532375090
    },
    {
        "content": "<p>...</p>",
        "id": 130169755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375092
    },
    {
        "content": "<p>The well-known metavariable <code>2</code></p>",
        "id": 130169775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375117
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>invalid &#39;eq.subst&#39; application, elaborator has special support for this kind of application (it is handled as an &quot;eliminator&quot;), but expected type must not contain metavariables\n  @has_lt.lt.{0} int int.has_lt\n    (@has_pow.pow.{0 ?l_1} int ?m_2 ?m_3 n (@bit0.{?l_1} ?m_2 ?m_4 (@has_one.one.{?l_1} ?m_2 ?m_5)))\n    (@has_mul.mul.{0} int int.has_mul n m)\n</pre></div>",
        "id": 130169932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375288
    },
    {
        "content": "<p>Indeed there was a metavariable</p>",
        "id": 130169934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375302
    },
    {
        "content": "<p>This works <code>lemma thing (m n : ℤ) (h : n * n &lt; n * m) : n ^ 2 &lt; n * m := (pow_two n).symm ▸ h</code></p>",
        "id": 130169942,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532375328
    },
    {
        "content": "<p>?????????????????</p>",
        "id": 130169949,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532375343
    },
    {
        "content": "<p>not this though <code>def thing (m n : ℤ) (h : n * n &lt; n * m) : n ^ 2 &lt; n * m := (pow_two n).symm ▸ h</code></p>",
        "id": 130169960,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532375376
    },
    {
        "content": "<p>I think this is a bug in <code>pow_two</code> -- the inbuilt <code>2</code> is a nat</p>",
        "id": 130170018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375418
    },
    {
        "content": "<p>Clearly pow_two should be a definition not a theorem</p>",
        "id": 130170049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375483
    },
    {
        "content": "<p>Or am I barking up the wrong tree ;-)</p>",
        "id": 130170055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375491
    },
    {
        "content": "<p>I agree. Split the definition into more cases for easier definitional equality.</p>",
        "id": 130170117,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532375533
    },
    {
        "content": "<p>I don't think it has anything to do with <code>pow_two</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">two_add_three</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- doesn&#39;t work</span>\n</pre></div>",
        "id": 130170126,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532375550
    },
    {
        "content": "<p><code>example : (2 : ℕ) + 3 = 5 := add_comm 0 5 ▸ rfl -- works</code></p>",
        "id": 130171125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532376639
    },
    {
        "content": "<p>So the bit where it says \"Ok I can't figure out the type of this <code>2</code> thing, let's let it be <code>nat</code> just so we can get on\" is not occurring in the <code>example</code>s</p>",
        "id": 130171160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532376686
    },
    {
        "content": "<p>Maybe <code>pow_two</code> should have been an example. Wait...</p>",
        "id": 130171165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532376698
    },
    {
        "content": "<p>The reason that <code>example</code> and <code>def</code> fail while <code>theorem</code> succeeds is due to the separation of statement and proof done with <code>theorem</code></p>",
        "id": 130180460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532389803
    },
    {
        "content": "<p>Remember how I mentioned a long time ago that <code>nat</code> is the default type for numerals but it occurs very late in the elaboration? It's basically the last resort if there is a numeral of indeterminate type</p>",
        "id": 130180493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532389864
    },
    {
        "content": "<p>In regard to this example, what happens is that since <code>def</code>/<code>example</code> allows the statement and proof to be elaborated together, it checks the proof to see if that will give a hint what is alpha in <code>(2:alpha) + 3 = 5</code>. But that means that when it hits the <code>eq.subst</code> it will still have a lingering metavariable. In the <code>theorem</code> case, there is no information to be had, since the proof doesn't contribute to elaborating the statement, so it goes with the default <code>nat</code> type for numerals. Then when it elaborates the proof, there are no metavariables</p>",
        "id": 130180615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532390050
    },
    {
        "content": "<p>For this code in the LEAN live in-browser IDE</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pow_two</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>am getting following error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"s2\">&quot;eliminator&quot;</span> <span class=\"n\">elaborator</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">82</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">inferred</span> <span class=\"n\">motive</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">eliminator</span><span class=\"bp\">-</span><span class=\"n\">like</span> <span class=\"n\">application</span> <span class=\"n\">is</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>\n</pre></div>",
        "id": 130244645,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1532474973
    },
    {
        "content": "<p>Join the <code>▸</code>-haters club!</p>",
        "id": 130244817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532475197
    },
    {
        "content": "<p>Sometimes the issue is that higher-order unification is undecidable, sometimes I've just made a silly mistake.</p>",
        "id": 130244863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532475253
    },
    {
        "content": "<p>The mistake here is that <code>pow_two</code> is a theorem about <code>monoid.pow</code> and not <code>nat.pow</code></p>",
        "id": 130244921,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532475364
    },
    {
        "content": "<p>yes, I just realised that when trying to solve without the triangle</p>",
        "id": 130244927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532475378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  @has_lt.lt nat nat.has_lt (@has_pow.pow nat nat (@monoid.has_pow nat nat.monoid) n 2)\n    (@has_mul.mul nat nat.has_mul n m)\nbut is expected to have type\n  @has_lt.lt nat nat.has_lt (@has_pow.pow nat nat nat.has_pow n 2) (@has_mul.mul nat nat.has_mul n m)\n</pre></div>",
        "id": 130244928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532475383
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 130245103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532475668
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  this worked. however, I have some doubts about the <code>nat.pow_two</code> theorem. In your proof, you showed a different equality than what is in the sig. of the theorem. Is Lean somehow guessing the fact that <code>(1 * a) * a = a ^ 2</code>. Or how is the rewrite tactics working here?</p>",
        "id": 130246833,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1532478824
    },
    {
        "content": "<p>that’s obtained by unfolding the definition of <code>pow</code>, which basically is that <code>n^a = (((1*n)*n)*...)*n</code> (with <code>a</code> <code>n</code>s of course)</p>",
        "id": 130247804,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1532480689
    },
    {
        "content": "<p>got it. thanks, <span class=\"user-mention\" data-user-id=\"111651\">@Nicholas Scheel</span></p>",
        "id": 130261244,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1532505958
    },
    {
        "content": "<p>Yes, there are two kinds of equality in Lean. There's \"equal by definition\" and \"equal because of a theorem\". <code>a^2=1*a*a</code> is true by definition of <code>^</code> (you can discover this sort of thing by continually unfolding everything -- switch off notation and just get unfolding in tactic mode and see where you go) but <code>1*a=a</code> is true because of a theorem. Things that are equal by definition you can just use interchangeably (I used <code>show</code> to change the goal to a goal which Lean thinks is the same goal by definition), but then I used a rewrite to apply the theorem.</p>",
        "id": 130263722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532509446
    },
    {
        "content": "<p>I am trying to attempt a Lean proof of quotient-remainder theorem shown <a href=\"https://leanprover.github.io/logic_and_proof/elementary_number_theory.html#the-quotient-remainder-theorem\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/elementary_number_theory.html#the-quotient-remainder-theorem\">here</a> and, as usual, clueless on the approach. I've tried to chalk out a rough skeleton of the proof based on my understandings from an earlier chapter on doing induction in Lean &amp; some exploration of Lean's types and functions. Does it make sense?</p>\n<div class=\"codehilite\"><pre><span></span>open int\nopen nat\n\n -- quotient / remainder theorem\ntheorem qt (n m q r : ℤ) : m &gt; 0 → n = m * q + r ∧ (0 ≤ r ∧ r &lt; m) :=\nassume h,\nshow (n = m * q + r) ∧ (0 ≤ r ∧ r &lt; m), from\n  int.rec_on n\n  (assume k,\n  show (of_nat k = m * q + r) ∧ ( 0 ≤ r ∧ r &lt; m ), from\n    nat.rec_on k\n      (show (of_nat 0 = m * q + r) ∧ (0 ≤ r ∧ r &lt; m), from sorry)\n      (assume k ih,\n        show of_nat (succ k) = m * q + r ∧ (0 ≤ r ∧ r &lt; m), from sorry)\n  )\n  (assume k,\n    have h11 : -of_nat (k + 1) = m * q + r, from sorry,\n    have h22 : 0 ≤ r ∧ r &lt; m, from sorry,\n    ⟨ h11 , h22 ⟩)\n</pre></div>",
        "id": 131140816,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1533774170
    },
    {
        "content": "<p>The theorem isn't true. This says for all n m q r, ... Whereas you want <code>forall m n, exists q r,...</code></p>",
        "id": 131141198,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533774840
    },
    {
        "content": "<p>the proof of this theorem in the lean library is a combination of <code>int.mod_add_div</code>, <code>int.mod_lt</code>  and <code>int.mod_nonneg</code>.</p>",
        "id": 131141265,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533774937
    },
    {
        "content": "<p>Oh, thanks for clarifying. Does this theorem statement make sense?</p>\n<div class=\"codehilite\"><pre><span></span>theorem qt : ∀ n m : ℤ, m &gt; 0 → ∃ q r : ℤ, (n = m * q + r) ∧ (0 ≤ r ∧ r &lt; m) :=\nsorry\n</pre></div>",
        "id": 131151108,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1533791262
    },
    {
        "content": "<p>I tried to solve the above statement with the functions you mentioned but I could not figure out how to come up with the existential terms <code>q</code> &amp; <code>r</code> from <code>n</code> and  <code>m</code> and hence the proof does not type check. I must be formulating the theorem statement wrong or missing some approach in the proof.</p>\n<div class=\"codehilite\"><pre><span></span>theorem qt : ∀ n m : ℤ, m &gt; 0 → ∃ q r : ℤ, n = m * q + r ∧ (0 ≤ r ∧ r &lt; m) :=\nassume n m h,\n\nassume q r,\nassume h2 : q = n / m,\nassume h1 : r = n % m,\n\nhave HH:  n = m * q + r, from calc\n  n = n % m + m * (n / m) : by rw [int.mod_add_div]\n  ... = r + m * (n / m) : by rw h1\n  ... = r + (m * q) : by rw h2\n  ... = (m * q) + r : by rw add_comm,\n\nhave HH1: 0 ≤ r, from calc\n  0 ≤ n % m : int.mod_nonneg n (ne_of_gt h)\n  ... ≤ r : by rw h1,\n\nhave HH2: r &lt; m, from calc\n  r = n % m : by rw h1\n  ... &lt; abs m : int.mod_lt n (ne_of_gt h)\n  ... = m : abs_of_pos h,\n\nexists.intro q (exists.intro r (and.intro HH  (and.intro HH1 HH2) ))\n</pre></div>",
        "id": 131155084,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1533798449
    },
    {
        "content": "<p>This is an incorrect use of the <code>assume</code> keyword. <code>assume</code> is used <em>only</em> for proving a forall or pi or implication, and it introduces a variable with the type specified in the domain. To prove an existential, you use <code>exists.intro</code> and provide the witness you want</p>",
        "id": 131155253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533798720
    },
    {
        "content": "<p>So after <code>assume n m h,</code> you should write <code>exists.intro (n / m) $ exists.intro (n % m) $</code> instead of <code>assume q r, assume h2 : q = n / m, assume h1 : r = n % m,</code></p>",
        "id": 131155369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533798858
    },
    {
        "content": "<p>(The dollar signs are to save on having to close parentheses at the end of the proof)</p>",
        "id": 131155379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533798894
    },
    {
        "content": "<p>After that, <code>q</code> and <code>r</code> will no longer be present in the statement, so you won't need to rewrite with <code>h1</code> anymore</p>",
        "id": 131155394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533798952
    },
    {
        "content": "<p>I knew what was wrong with that <em>assume</em> but your tip on the <code>exists.intro</code> was helpful. Here's my updated proof which type checks</p>\n<div class=\"codehilite\"><pre><span></span>theorem qt : ∀ n m : ℤ, m &gt; 0 → ∃ q r : ℤ, n = m * q + r ∧ (0 ≤ r ∧ r &lt; m) :=\nassume n m h,\n\nexists.intro (n / m) $ exists.intro (n % m) $\n\n  have HH:  n = m * (n / m)  + (n % m), from calc\n    n = n % m + m * (n / m) : by rw [int.mod_add_div]\n    ... = m * (n / m) + (n % m) : by rw add_comm,\n\n  have HH1: 0 ≤ (n % m), from int.mod_nonneg n (ne_of_gt h),\n\n  have HH2: (n % m) &lt; m, from calc\n    (n % m) &lt; abs m : int.mod_lt n (ne_of_gt h)\n    ... = m : abs_of_pos h,\n\n  ⟨ HH , ⟨ HH1 , HH2 ⟩ ⟩\n</pre></div>",
        "id": 131157187,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1533801815
    },
    {
        "content": "<p>I am working on exercice 2 of Chapter 2. The exercise states that the first clue can be represented as</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mi>A</mi><mo>∨</mo><mi>S</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi>M</mi><mi>W</mi><mo>∨</mo><mi>D</mi><mi>W</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>∧</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>M</mi><mi>A</mi><mo>∨</mo><mi>D</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mi>W</mi><mo>∨</mo><mi>S</mi><mi>W</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">((FA \\lor SA) \\rightarrow (MW \\lor DW)) \\land ((MA \\lor DA) \\rightarrow (FW \\lor SW))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>Should the implications be replaced with iff as follows ?</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mi>A</mi><mo>∨</mo><mi>S</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>↔</mo><mo stretchy=\"false\">(</mo><mi>M</mi><mi>W</mi><mo>∨</mo><mi>D</mi><mi>W</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>∧</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>M</mi><mi>A</mi><mo>∨</mo><mi>D</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>↔</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mi>W</mi><mo>∨</mo><mi>S</mi><mi>W</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">((FA \\lor SA) \\leftrightarrow (MW \\lor DW)) \\land ((MA \\lor DA) \\leftrightarrow (FW \\lor SW))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↔</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↔</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>",
        "id": 189379656,
        "sender_full_name": "Olivier de G.",
        "timestamp": 1582959467
    },
    {
        "content": "<p>Humm maybe it's actually equivalent because of</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mo>∨</mo><mi>S</mi><mi>W</mi><mo>∨</mo><mi>M</mi><mi>W</mi><mo>∨</mo><mi>D</mi><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">FW \\lor SW \\lor MW \\lor DW</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span></span></p>\n<p>and</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>A</mi><mo>∨</mo><mi>S</mi><mi>A</mi><mo>∨</mo><mi>M</mi><mi>A</mi><mo>∨</mo><mi>D</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">FA \\lor SA \\lor MA \\lor DA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathdefault\">A</span></span></span></span></span></p>",
        "id": 189379745,
        "sender_full_name": "Olivier de G.",
        "timestamp": 1582959674
    },
    {
        "content": "<p>I think you're right. Both interpretations are valid translations of the sentence and. as you say, both are equivalent in the context (but of course they are not equal).</p>\n<p>This is a common theme I guess. I found it interesting watching computer scientists claiming that they had proved there were infinitely many primes by showing that given a finite set of primes, they could find a prime not in this set. I initially thought \"that's not what infinite means\" but then I realised that actually it's a perfectly reasonable way of formalising it (\"no finite set of primes is all the primes\") and actually I didn't really know what infinite meant -- there are several definitions of infinite, all equivalent, but not at all equal, and one has to make a choice at some point.</p>",
        "id": 189386713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582975038
    }
]