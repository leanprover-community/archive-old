[
    {
        "content": "<p>Right now, when lean sees <code>∀ (x ∈ s)</code> it generates <code>∀ (x : X) (H : x ∈ s)</code>. I think it might be more useful to generate <code>∀ ⦃x : X⦄ (H : x ∈ s)</code>, since when it actually comes to applying the lemma chances are you will pass an <code>_</code> as <code>x</code>. What do people think about this?</p>\n<p>This came up when reviewing <a href=\"https://github.com/leanprover-community/mathlib/issues/6785\">#6785</a>.</p>",
        "id": 232248738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617014918
    },
    {
        "content": "<p>I think it would be a major refactor to remove all the explicit variables pass around in mathlib (-;</p>",
        "id": 232248795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617014970
    },
    {
        "content": "<p>But I agree that the pattern you describe makes sense.</p>",
        "id": 232248805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617014986
    },
    {
        "content": "<p>I dislike the <code>{x : X} (h : p x)</code> pattern in general.  I think it should always be <code>(x : X) (h : p x)</code>.  I often want to specify the element explicitly, so that Lean shows the correct goal for <code>p x</code> and I can then work on the proof for that subgoal (or use <code>by simp</code> or <code>by ring</code>, etc., on it).<br>\nSometimes this works if <code>x</code> is left as a metavariable.  But when it doesn't work, it's very cumbersome to work around using <code>@</code> or <code>show p x, from ...</code>.</p>",
        "id": 232252507,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617017257
    },
    {
        "content": "<p>Do you object to my suggestions in that PR then?</p>",
        "id": 232252934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617017507
    },
    {
        "content": "<p>I added a comment to that effect on the PR.</p>",
        "id": 232253920,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617018010
    },
    {
        "content": "<p>Would you go as far as advocating for changing the implicitness of the binders in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective/src\">src#function.injective</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inj_on/src\">src#set.inj_on</a>?</p>",
        "id": 232254745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617018455
    },
    {
        "content": "<p>I'd also prefer to make them explicit.  We'll have them to change them in Lean 4 anyways, since ⦃⦄ is gone now.</p>",
        "id": 232255879,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617019063
    },
    {
        "content": "<p>Is that worth opening a github issue about, with a <code>mathport</code> tag?</p>",
        "id": 232258311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617020287
    },
    {
        "content": "<p>It doesn't hurt to open an issue.</p>",
        "id": 232258603,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617020432
    },
    {
        "content": "<p>This may be an irrelevant comment, but sometimes, when working with sets and their members, using <code>show_term</code> on a <code>solve_by_elim</code> gives a term of the form <code>hx x z</code> and the <code>x</code> should not be there, since it is implicit.  Is this also an issue with some implicit/explicit business?  I can try to replicate an example, if needed, but do not have one at hand right now.</p>",
        "id": 232259931,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617021114
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/394\">https://github.com/leanprover-community/lean/issues/394</a> ?</p>",
        "id": 232260166,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617021236
    },
    {
        "content": "<p>Exactly!</p>\n<p>I decided to work an explicit example out and came up with exactly this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set_members</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232260318,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617021302
    },
    {
        "content": "<p>Using <code>show_term</code> on <code>solve_by_elim</code> produces <code>exact h x hx</code>, which does not work, while <code>exact h hx</code> does.</p>",
        "id": 232260400,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617021350
    },
    {
        "content": "<p>In the general theme of this thread, I agree with Gabriel that often I want to tell Lean the element, before I supply a proof that it satisfies some property.  This is mostly at the level of manufacturing the proof term, once that step is done, I can usually supply directly the proof.  I sometimes leave explicit some assumptions that could be figured out by later ones, exactly for this reason.  However, I am not sure what is the best strategy overall.</p>",
        "id": 232260610,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617021469
    }
]