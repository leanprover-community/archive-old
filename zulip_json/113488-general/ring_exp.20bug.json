[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  <code>ring_exp</code> is not pleasing the kernel:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring_exp</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abs_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267711847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641987083
    },
    {
        "content": "<p>Sorry about the edits, I simplified the example</p>",
        "id": 267711972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641987184
    },
    {
        "content": "<p>To be clear: the interactive Lean says \"goals accomplished\" but the proof is rejected by the kernel.</p>",
        "id": 267712021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641987216
    },
    {
        "content": "<p>and replacing <code>ring_exp</code> by <code>ring_nf</code> works</p>",
        "id": 267712091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641987248
    },
    {
        "content": "<p>Thanks for the bug report! From a quick check, it looks like the issue occurs when the goal can't be closed and <code>ring_exp</code> tries to normalize as much as possible.</p>",
        "id": 267712611,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641987649
    },
    {
        "content": "<p>Further simplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring_exp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.replace_at</span> <span class=\"o\">(</span><span class=\"n\">tactic.ring_exp.normalize</span> <span class=\"n\">tactic.transparency.reducible</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"n\">tt</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(),</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267712653,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641987689
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11394\">#11394</a></p>",
        "id": 267715953,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641989993
    },
    {
        "content": "<p>Thanks a lot for this very quick fix!</p>",
        "id": 267717104,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641990679
    }
]