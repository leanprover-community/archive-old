[
    {
        "content": "<p>Is this a bug?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">xnat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"c1\">-- works, but shouldn&#39;t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"c1\">-- error, as expected</span>\n</pre></div>",
        "id": 129536505,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531403097
    },
    {
        "content": "<p><code>one</code> is a variable in the first definition</p>",
        "id": 129536612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531403232
    },
    {
        "content": "<p><code>one</code> doesn't have the <code>pattern</code> attribute, so... ^</p>",
        "id": 129536615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531403238
    },
    {
        "content": "<p>That's a nice one! Note that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">xnat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"c1\">-- works, as it should</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails, as it should</span>\n</pre></div>",
        "id": 129542371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531409214
    },
    {
        "content": "<blockquote>\n<p><code>one</code> is a variable in the first definition</p>\n</blockquote>\n<p>how does <code>succ zero</code> define a variable?</p>",
        "id": 129542467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531409306
    },
    {
        "content": "<p>it doesn't</p>",
        "id": 129542478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531409315
    },
    {
        "content": "<p>then why does it work?</p>",
        "id": 129542486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531409328
    },
    {
        "content": "<p><code>one</code> doesn't refer to the def it's the same as writing <code>n</code></p>",
        "id": 129542491,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531409332
    },
    {
        "content": "<p>Try replacing <code>one</code> by <code>three</code> in the def of <code>is_even</code></p>",
        "id": 129542497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531409339
    },
    {
        "content": "<p>Lean is guaranteed to be correct, not to be non-confusing</p>",
        "id": 129542531,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531409384
    },
    {
        "content": "<p>oh!</p>",
        "id": 129542540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531409401
    }
]