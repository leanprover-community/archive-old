[
    {
        "content": "<p>I am really struggling to write a tactic that \"does mk_eq_symm, but even inside binders\". I would like to have something that given <code>h : \\forall x : X, f x = g x</code>, spits back <code>\\forall x : X, g x = f x</code>. Can anyone point me in the right direction?</p>",
        "id": 123790494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521195590
    },
    {
        "content": "<p>(I need this to work its way through arbitrarily many binders, possibly zero.)</p>",
        "id": 123790545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521195616
    },
    {
        "content": "<p>So far I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_eq_symm_under_binders_aux</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n                             <span class=\"n\">b&#39;</span> <span class=\"err\">←</span> <span class=\"n\">mk_eq_symm_under_binders_aux</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n                             <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">mk_eq_symm</span> <span class=\"n\">e</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_eq_symm_under_binders</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_symm_under_binders_aux</span> <span class=\"n\">e</span> <span class=\"n\">t</span>\n</pre></div>",
        "id": 123790763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521196044
    },
    {
        "content": "<p>Whilst of course I can't help, the recent thread here about using rw really opened my eyes to how this sort of thing wasn't \"happening by default\" as it were. I am still a little unclear about why <code>eq.symm</code> can't be used directly but this is probably just my poor understanding of the notion of equality in type theory. If I had write a tactic proof which did this I would just continually apply conv to everything.</p>",
        "id": 123790818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521196138
    },
    {
        "content": "<p>Yes! I know how to achieve this with <code>conv</code>. I need this tactic in service of my \"rewrite searching\" tactic, unfortunately, so a human isn't available to help direct the <code>conv</code>. I need to be able to determine if a rewrite is applying to the entire expression, or just a subexpression, but the only way to ask Lean to rewrite an entire expression seems to be via <code>simp_lemmas.rewrite</code>, which doesn't provide a facility for applying the rule in reverse, so I'm going to have to build the reverse rule myself.</p>",
        "id": 123791017,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521196457
    },
    {
        "content": "<p>But what I have above is stupid. The <code>expr.app e b</code> is silly, it's not <code>b</code> that I'm meant to put in there, it's.... something. :-)</p>",
        "id": 123791083,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521196573
    },
    {
        "content": "<p>I am a little disappointed that something like <code>repeat {by conv in (_ = _) {rw eq.symm}}</code> doesn't work in tactic mode :-)</p>",
        "id": 123791084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521196586
    },
    {
        "content": "<p>Or, more precisely, that I couldn't get it to work :-)</p>",
        "id": 123791093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521196640
    },
    {
        "content": "<p>I wrote an extremely similar tactic for <code>alias</code></p>",
        "id": 123791337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197092
    },
    {
        "content": "<p>I think my fundamental difficulty is I don't know how to construct an <code>expr.lam</code>.</p>",
        "id": 123791338,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197100
    },
    {
        "content": "<p>I will look at <code>alias</code>!</p>",
        "id": 123791345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197114
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta def mk_iff_mp_app (iffmp : name) : expr → (nat → expr) → tactic expr\n| (expr.pi n bi e t) f := expr.lam n bi e &lt;$&gt; mk_iff_mp_app t (λ n, f (n+1) (expr.var n))\n| `(%%a ↔ %%b) f := pure $ @expr.const tt iffmp [] a b (f 0)\n| _ f := fail &quot;Target theorem must have the form `Π x y z, a ↔ b`&quot;\n</pre></div>",
        "id": 123791349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197148
    },
    {
        "content": "<p>e.g., if I have <code>f : \\nat \\to \\nat</code>, how to I construct the <code>expr</code> for <code>\\lambda n, f (n+1)</code>?</p>",
        "id": 123791350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197152
    },
    {
        "content": "<p>That tactic directly constructs a proof of <code>\\forall x y z, a -&gt; b</code> from <code>\\forall x y z, a &lt;-&gt; b</code></p>",
        "id": 123791390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197184
    },
    {
        "content": "<p>I don't think it even needs to be a tactic (I only used a tactic in that case so I could fail with a nice error message)</p>",
        "id": 123791405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197264
    },
    {
        "content": "<p>So how does <code>expr.var</code> work?</p>",
        "id": 123791446,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197297
    },
    {
        "content": "<p>That has me confused.</p>",
        "id": 123791447,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197303
    },
    {
        "content": "<p><code>expr.var</code> is a de bruijn variable</p>",
        "id": 123791450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197318
    },
    {
        "content": "<p>so <code>\\forall x y z, x = y</code> becomes roughly <code>pi \"x\" (pi \"y\" (pi \"z\" (app (app (const \"eq\") (var 2)) (var 1)))</code></p>",
        "id": 123791456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197378
    },
    {
        "content": "<p>the number counts how many binders back the variable is</p>",
        "id": 123791506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197412
    },
    {
        "content": "<p>I see. (Or, at least I can imagine writing voodoo code based on what I see. :-)</p>",
        "id": 123791513,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197463
    },
    {
        "content": "<p>I have an aversion to writing code that has suboptimal asymptotics, so I may have been too clever in the definition there, what with the accumulation function and all</p>",
        "id": 123791558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197530
    },
    {
        "content": "<p>Also, I don't think you will be able to use <code>mk_eq_symm</code> in the function</p>",
        "id": 123791609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197657
    },
    {
        "content": "<p>I guess one question for Scott then is whether he is likely to be applying his tactic to terms built from strings of length 10^10 :-)</p>",
        "id": 123791613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521197671
    },
    {
        "content": "<p>What will go wrong with <code>mk_eq_symm</code>?</p>",
        "id": 123791616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197692
    },
    {
        "content": "<p>because when you are working on an expr manually like this, you have to deal with open terms, and tactics don't like open terms</p>",
        "id": 123791617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197695
    },
    {
        "content": "<p>open meaning containing an unbound <code>var</code></p>",
        "id": 123791624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197704
    },
    {
        "content": "<p>(Or you can let me find out for myself in a minute or two..)</p>",
        "id": 123791625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197706
    },
    {
        "content": "<p>I see. But I can just build it directly myself?</p>",
        "id": 123791628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197722
    },
    {
        "content": "<p>(as you did in your example)</p>",
        "id": 123791630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197735
    },
    {
        "content": "<p>yes</p>",
        "id": 123791670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521197768
    },
    {
        "content": "<p>Is it just a coincidence that Mario posted code with the line <code>lam n, f (n+1)</code> seconds before Scott asked about how to construct the <code>expr</code> for <code>lam n, f (n+1)</code>?</p>",
        "id": 123791690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521197872
    },
    {
        "content": "<p>apparently yes :-)</p>",
        "id": 123791736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197897
    },
    {
        "content": "<p>They have nothing to do with each other. :-)</p>",
        "id": 123791740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197910
    },
    {
        "content": "<p>(and wow, this looks like it may be working!)</p>",
        "id": 123791741,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521197921
    },
    {
        "content": "<p>I thought so but I thought I'd ask as I am frantically cut-and-pasting into a text file and just wanted to check that zulip didn't have some \"slightly re-order the messages\" functionality</p>",
        "id": 123791747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521197960
    },
    {
        "content": "<p>It's about time I learnt something about tactics and one way of learning is to write some docs.</p>",
        "id": 123791810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521198115
    },
    {
        "content": "<p>Thank you all! Things are looking good here. :-) <code>all_rewrites</code> seems to be working, finding lots of rewrites that <code>rw</code> itself can't see.</p>",
        "id": 123791850,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521198151
    },
    {
        "content": "<p>Can you post what you wrote?</p>",
        "id": 123791853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521198168
    },
    {
        "content": "<p>[if you're happy to do so of course!]</p>",
        "id": 123791854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521198174
    },
    {
        "content": "<p>It's probably slow as molasses ... but that's a different problem.</p>",
        "id": 123791855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521198176
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_eq_symm_under_binders_aux</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">mk_eq_symm_under_binders_aux</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">mk_eq_symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;expression must have the form `Π x y z, a = b`&quot;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_eq_symm_under_binders</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_symm_under_binders_aux</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 123791902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521198246
    },
    {
        "content": "<p>That's just the <code>mk_eq_symm_under_binders</code> part.</p>",
        "id": 123791903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521198262
    },
    {
        "content": "<p>Then there's</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">rewrite_entire</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"k\">let</span> <span class=\"n\">sl</span> <span class=\"o\">:=</span> <span class=\"n\">simp_lemmas</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">,</span>\n   <span class=\"n\">r&#39;</span> <span class=\"err\">←</span> <span class=\"k\">if</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"n\">mk_eq_symm_under_binders</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n   <span class=\"n\">sl</span> <span class=\"err\">←</span> <span class=\"n\">sl</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">r&#39;</span><span class=\"o\">,</span>\n   <span class=\"n\">sl</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">e</span>\n</pre></div>",
        "id": 123791907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521198300
    },
    {
        "content": "<p>which given <code>r</code>, a rule and a <code>bool</code> flag indicating whether to use the rule in reverse, and an expression <code>e</code>, either rewrite the entire expression <code>e</code> using the rule, returning the replacement and the proof, or fails.</p>",
        "id": 123791924,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521198356
    },
    {
        "content": "<p>Now I will tell my students to alias rw to this and they will never have to worry about why it used to sometimes fail :-)</p>",
        "id": 123791965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521198403
    },
    {
        "content": "<p>And then there's <a href=\"https://gist.github.com/semorrison/9b3a0f42fbd697d562a8b6daa960f14e\" target=\"_blank\" title=\"https://gist.github.com/semorrison/9b3a0f42fbd697d562a8b6daa960f14e\">https://gist.github.com/semorrison/9b3a0f42fbd697d562a8b6daa960f14e</a></p>",
        "id": 123791971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521198426
    },
    {
        "content": "<p>for the actual implementation of <code>all_rewrites</code></p>",
        "id": 123791976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521198447
    },
    {
        "content": "<p>which still needs a little more wrapper before you can use it in interactive mode...</p>",
        "id": 123791977,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521198479
    },
    {
        "content": "<p>Thanks for this. I know I could just try to learn tactics by reading the tactic code in core Lean etc but the problem with doing that is that it can often be pretty hard-core. It's like trying to learn Lean by reading core lean and instantly finding opt_params everywhere with no explanation as to what they are.</p>",
        "id": 123792018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521198544
    }
]