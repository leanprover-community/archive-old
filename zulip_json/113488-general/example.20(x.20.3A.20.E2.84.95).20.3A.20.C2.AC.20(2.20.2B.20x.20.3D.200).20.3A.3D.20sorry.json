[
    {
        "content": "<p>It is forever taking me 3 lines to prove stuff like this. What's a slick way of doing this quickly?</p>",
        "id": 124642055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522876529
    },
    {
        "content": "<p><code>rw add_comm; apply succ_ne_zero</code></p>",
        "id": 124642141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522876642
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (x : ℕ) : ¬ (2 + x = 0) :=\nby cases x; apply nat.no_confusion\n</pre></div>",
        "id": 124644443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880374
    },
    {
        "content": "<p>So you (Mario) decided to do it in tactic mode. Looking at this example I realise I didn't really understand what <code>apply</code> actually does.</p>",
        "id": 124644446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880388
    },
    {
        "content": "<p>oh hey our solutions have exactly the same length</p>",
        "id": 124644490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880405
    },
    {
        "content": "<p>he opened nat!</p>",
        "id": 124644493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880414
    },
    {
        "content": "<p>oh right</p>",
        "id": 124644496,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880422
    },
    {
        "content": "<p>so i win</p>",
        "id": 124644498,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880425
    },
    {
        "content": "<p>in some sense</p>",
        "id": 124644500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880429
    },
    {
        "content": "<p>He answered first</p>",
        "id": 124644502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880434
    },
    {
        "content": "<p>well i was sleeping</p>",
        "id": 124644504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880439
    },
    {
        "content": "<p>solutions aren't totally ordered</p>",
        "id": 124644512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880446
    },
    {
        "content": "<p>you always win if you get to choose the ordering</p>",
        "id": 124644519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880456
    },
    {
        "content": "<p>Let me think about Mario's solution.</p>",
        "id": 124644528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880469
    },
    {
        "content": "<p><code>apply [xxx]</code>, where <code>[xxx] : A -&gt; B -&gt; C -&gt; D</code> attempts to match <code>D</code> with the goal, and set <code>A</code>, <code>B</code>, <code>C</code> as three new goals if necessary</p>",
        "id": 124644542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880500
    },
    {
        "content": "<p><code>x + 2</code> unfolds to <code>x + bit0 1</code> which unfolds to <code>x + (1 + 1)</code></p>",
        "id": 124644544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880501
    },
    {
        "content": "<p>and I can't match this with nat.succ anything</p>",
        "id": 124644550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880521
    },
    {
        "content": "<p>oh I have to unfold more</p>",
        "id": 124644596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880534
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (x : ℕ) : x + 2 = nat.succ (x + 1) := rfl\n</pre></div>",
        "id": 124644602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880566
    },
    {
        "content": "<p><code>x + succ 1, succ (x + 1)</code></p>",
        "id": 124644603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880567
    },
    {
        "content": "<p>right</p>",
        "id": 124644605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880572
    },
    {
        "content": "<p>but there's still more to do</p>",
        "id": 124644617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880592
    },
    {
        "content": "<p>how so</p>",
        "id": 124644618,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880600
    },
    {
        "content": "<p>because apply is not exact</p>",
        "id": 124644624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880617
    },
    {
        "content": "<p>and this is not exact</p>",
        "id": 124644625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880620
    },
    {
        "content": "<p>the goal is <code>f(succ x)</code> and we solve it with <code>forall n, f(n)</code></p>",
        "id": 124644670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880659
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (x : ℕ) : ¬ (2 + x = 0) :=\nby rw add_comm; exact nat.succ_ne_zero (x+1)\n</pre></div>",
        "id": 124644675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880666
    },
    {
        "content": "<p><code>apply</code> automatically fills out the arguments for you</p>",
        "id": 124644676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880673
    },
    {
        "content": "<p>I've seen it not automatically fill out the arguments for me</p>",
        "id": 124644678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880685
    },
    {
        "content": "<p>and I've had to use refine instead</p>",
        "id": 124644681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880691
    },
    {
        "content": "<p>well I can't say anything if you don't have an example</p>",
        "id": 124644693,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880724
    },
    {
        "content": "<p>yeah and I can't read the definition of apply because it's in meta land</p>",
        "id": 124644698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880751
    },
    {
        "content": "<p>I guess I've sometimes tried to apply to partially close a goal and it's failed</p>",
        "id": 124644739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880768
    },
    {
        "content": "<p>I guess I just have to read the docstring more carefully.</p>",
        "id": 124644750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522880811
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/--\nThe `apply` tactic tries to match the current goal against the conclusion of the type of term. The argument term should be a term well-formed in the local context of the main goal. If it succeeds, then the tactic returns as many subgoals as the number of premises that have not been fixed by type inference or type class resolution. Non-dependent premises are added before dependent ones.\n\nThe `apply` tactic uses higher-order pattern matching, type class resolution, and first-order unification with dependent types.\n-/\n</pre></div>",
        "id": 124644764,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522880875
    },
    {
        "content": "<p>I used <code>apply</code> in that example simply as a shorthand for <code>exact</code> (or <code>refine</code> nonterminally), it saves me a few underscores at the end. It doesn't always work, but I think it works here.</p>",
        "id": 124650332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522891560
    },
    {
        "content": "<p>what about <code>rw add_comm; from dec_trivial</code>?</p>",
        "id": 124653601,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1522899102
    },
    {
        "content": "<p>does it work?</p>",
        "id": 124653603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522899118
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/live/latest/#code=variable%20x%20:%20nat%0A%0Aexample%20:%20%C2%AC%20(2%20+%20x%20=%200)%20:=%20by%20rw%20add_comm;%20from%20dec_trivial\" target=\"_blank\" title=\"https://leanprover.github.io/live/latest/#code=variable%20x%20:%20nat%0A%0Aexample%20:%20%C2%AC%20(2%20+%20x%20=%200)%20:=%20by%20rw%20add_comm;%20from%20dec_trivial\">https://leanprover.github.io/live/latest/#code=variable%20x%20:%20nat%0A%0Aexample%20:%20%C2%AC%20(2%20+%20x%20=%200)%20:=%20by%20rw%20add_comm;%20from%20dec_trivial</a></p>",
        "id": 124653644,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1522899162
    },
    {
        "content": "<p>you win</p>",
        "id": 124653651,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522899192
    },
    {
        "content": "<p><code>simp; from dec_trivial</code></p>",
        "id": 124653845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522899603
    },
    {
        "content": "<p>ok you win</p>",
        "id": 124653851,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522899609
    },
    {
        "content": "<p>Or import lean-tidy and: <code>obviously</code>.</p>",
        "id": 124653852,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522899614
    }
]