[
    {
        "content": "<p>(Re-asking here after crickets in new-members.) While trying to clean up this implementation of <code>rewrite_search</code> I am trying to figure out which data structures are the fastest and had a couple questions. I would expect that it's the ones implemented in the VM. It looks like <code>d_array</code> is supposed to be, for example. My first question is, does this work quickly as I'd expect? When I look at the code some of the methods don't seem like they would be efficient. For example from <a href=\"https://github.com/leanprover-community/lean/blob/0ec2a19/library/init/data/array/basic.lean#L11\">https://github.com/leanprover-community/lean/blob/0ec2a19/library/init/data/array/basic.lean#L11</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `write a i v` sets the `i`th member of `a` to be `v`. Has builtin VM implementation. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">write</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">eq.rec_on</span> <span class=\"n\">h</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">a.read</span> <span class=\"n\">j</span><span class=\"o\">}</span>\n</code></pre></div>\n\n<p>That implementation looks like it will be O(n) to evaluate a read after doing n writes. Is it actually being replaced with something else more efficient by the VM?</p>\n<p>My second question is whether there are other efficient data structures. In particular a good map structure like a hashmap or a treemap would be nice. There are a bunch of different tree-like structures lying around and I was wondering if there's conventional wisdom on which are the best to use.</p>",
        "id": 214743774,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603823507
    },
    {
        "content": "<p>I think that indeed the definition of <code>write</code> is replaced in the VM</p>",
        "id": 214743942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603823561
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/016b855d61d4e8959a2ad689678b0d7dc80138bb/src/library/vm/vm_array.cpp#L189\">https://github.com/leanprover-community/lean/blob/016b855d61d4e8959a2ad689678b0d7dc80138bb/src/library/vm/vm_array.cpp#L189</a></p>",
        "id": 214744023,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603823595
    },
    {
        "content": "<p>why is it even defined in lean at all if it's replaced by the vm? I guess that part is just used as formalization?</p>",
        "id": 214744304,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603823709
    },
    {
        "content": "<p>in that directory i see <code>rb_map</code>, that looks promising</p>",
        "id": 214744464,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603823784
    },
    {
        "content": "<p>There is <code>native.rb_map</code> for a good rb_map implementation</p>",
        "id": 214745953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824423
    },
    {
        "content": "<p>The pure <code>rb_map</code> in core is kind of broken</p>",
        "id": 214745980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824439
    },
    {
        "content": "<p>yikes. how is it \"kind of\" broken?</p>",
        "id": 214746063,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603824479
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hash_map\">docs#hash_map</a> if you want a hash map</p>",
        "id": 214746065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824481
    },
    {
        "content": "<p>Isn't the hash map even slower?</p>",
        "id": 214746175,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603824512
    },
    {
        "content": "<p>than what?</p>",
        "id": 214746206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824523
    },
    {
        "content": "<p>The operations of <code>rb_map</code> are fine, but the invariant is wrong so you can't construct the full API</p>",
        "id": 214746255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824541
    },
    {
        "content": "<p>this hash_map uses a hash function written in lean iiuc, so it sort of can't be all that fast</p>",
        "id": 214746305,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603824560
    },
    {
        "content": "<p>Than <code>native.rb_map</code>.</p>",
        "id": 214746337,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603824577
    },
    {
        "content": "<p>Oh sure, anything written in C++ is going to be faster just because it's compiled</p>",
        "id": 214746422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824604
    },
    {
        "content": "<p>I wasn't comparing those anyway</p>",
        "id": 214746460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824616
    },
    {
        "content": "<p>This is sort of the reason my plan to formalize Okasaki's pure functional data structures book fell through</p>",
        "id": 214746571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824669
    },
    {
        "content": "<p>lean has its own implementation of an array, huh. <a href=\"https://github.com/leanprover-community/lean/blob/016b855d61d4e8959a2ad689678b0d7dc80138bb/src/library/parray.h\">https://github.com/leanprover-community/lean/blob/016b855d61d4e8959a2ad689678b0d7dc80138bb/src/library/parray.h</a> i wonder why not use STL data structures</p>",
        "id": 214746638,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603824711
    },
    {
        "content": "<p>besides the fact that we <em>still</em> have no memoization primitive, the performance of the lean 3 VM is sufficiently bad that it's kind of pointless</p>",
        "id": 214746742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824746
    },
    {
        "content": "<blockquote>\n<p>I wonder why not use STL data structures</p>\n</blockquote>\n<p>Which one?</p>",
        "id": 214746765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824759
    },
    {
        "content": "<p><code>parray</code> is a persistent array, <code>std::array</code> would not be a replacement</p>",
        "id": 214746804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824779
    },
    {
        "content": "<p>oh i see. can I get a regular old non-persistent array, or is that philosophically forbidden?</p>",
        "id": 214746911,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603824834
    },
    {
        "content": "<p>I think it would be useful to have such a thing, but it is very difficult to use properly in lean</p>",
        "id": 214747030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824883
    },
    {
        "content": "<p>specifically, you have to use the array linearly, and unfortunately lean sometimes holds on to extra references in places where it probably shouldn't and this kills your performance</p>",
        "id": 214747110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824927
    },
    {
        "content": "<p>If you use a <code>parray</code> completely linearly, I believe it acts basically like an array</p>",
        "id": 214747171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824959
    },
    {
        "content": "<p>IIRC there is an option you can set to see when non-destructive updates are being performed</p>",
        "id": 214747284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603824993
    },
    {
        "content": "<p>ok. so when you say the <code>native.rb_map</code> is good and the pure <code>rb_map</code> in core is kind of broken, which one is the good one? I think I only see <a href=\"https://github.com/leanprover-community/lean/blob/0ec2a19/library/init/meta/rb_map.lean#L15\">https://github.com/leanprover-community/lean/blob/0ec2a19/library/init/meta/rb_map.lean#L15</a> in the lean codebase</p>",
        "id": 214747824,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603825239
    },
    {
        "content": "<p>The other one is called <code>rbmap</code> (without the underscore).</p>",
        "id": 214752186,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603827296
    },
    {
        "content": "<p>so <code>rb_map</code> good, <code>rbmap</code> bad? which is which here</p>",
        "id": 214752527,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603827446
    },
    {
        "content": "<p>the C++ one has a <code>native</code> in the name</p>",
        "id": 214752710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827512
    },
    {
        "content": "<p>ok cool. yet another question - what's the difference between <code>d_array</code> and <code>array</code>? They look the same to me. A comment at <a href=\"https://github.com/leanprover-community/lean/blob/0ec2a19/library/init/data/array/basic.lean#L138\">https://github.com/leanprover-community/lean/blob/0ec2a19/library/init/data/array/basic.lean#L138</a> says that <code>array</code> is \"a non-dependent array\", but I have never heard the phrase \"dependent array\" before and google does not enlighten me</p>",
        "id": 214753010,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603827631
    },
    {
        "content": "<p>Look at the types</p>",
        "id": 214753055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827656
    },
    {
        "content": "<p><code>d_array</code> allows the type of each element of the array to be different</p>",
        "id": 214753105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827686
    },
    {
        "content": "<p>You won't find such a feature in most programming languages because they lack dependent types</p>",
        "id": 214753138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827706
    },
    {
        "content": "<p>i am familiar with this feature, from such obscure language as python, javascript, php, ruby... ;-)</p>",
        "id": 214753370,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603827815
    },
    {
        "content": "<p>for example, <code>d_array 100 (λ i, array i.1 ℕ)</code> is a two-dimensional triangular array</p>",
        "id": 214753402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827830
    },
    {
        "content": "<p>python, javascript, etc cannot express this</p>",
        "id": 214753472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827851
    },
    {
        "content": "<p>they can say \"this is an array of things\" but they can't have a strongly typed version</p>",
        "id": 214753539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827880
    },
    {
        "content": "<p>OK i get it - so probably <code>array</code> is saner for most applications</p>",
        "id": 214753657,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603827934
    },
    {
        "content": "<p>yes</p>",
        "id": 214753690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827945
    },
    {
        "content": "<p>it's useful for proving properties though, for example if you want the elements of the array to satisfy some invariant that depends on the index</p>",
        "id": 214753852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827995
    },
    {
        "content": "<p>yet another array question. the array's length is part of its type signature. is there a way to have something akin to a java \"arraylist\" where it can be of any length, but its implementation is an array rather than a list, so that random access is efficient? i just want to do something like, pass arrays around as arguments without describing what the length is all the time</p>",
        "id": 214759268,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603830334
    },
    {
        "content": "<p>See the <code>buffer</code> type</p>",
        "id": 214759404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603830377
    },
    {
        "content": "<p>Why is there a <code>has_lt</code> instance in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">key</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">→</span> <span class=\"n\">key</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rb_lmap</span> <span class=\"n\">key</span> <span class=\"n\">data</span> <span class=\"o\">:=</span>\n<span class=\"n\">rb_map.mk</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">data</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Because <code>rb_map.mk</code> doesn't need it...</p>",
        "id": 214761607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603831408
    },
    {
        "content": "<p>There's a <code>has_lt key</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/native.rb_map.mk\">docs#native.rb_map.mk</a></p>",
        "id": 214806033,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603873213
    },
    {
        "content": "<p>Ooh, you are right</p>",
        "id": 214808244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603874884
    }
]