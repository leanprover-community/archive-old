[
    {
        "content": "<p>I wanted to try generalizing <code>monoid_hom</code> in <code>src/algebra/group/hom.lean</code> to look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ancestor one_hom mul_hom, to_additive]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">one_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>(rather than <code>[monoid M] [monoid N]</code>)</p>",
        "id": 231417421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616470050
    },
    {
        "content": "<p>and that line works, but in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">monoid_hom.has_coe_to_one_hom</span> <span class=\"o\">{</span><span class=\"n\">mM</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mN</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">monoid_hom.to_one_hom</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>just a few lines later I get an error message from <code>to_additive</code> that I don't understand:</p>",
        "id": 231417430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616470074
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">N</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_monoid.to_has_zero</span> <span class=\"n\">M</span> <span class=\"n\">mM</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_zero</span> <span class=\"n\">M</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">add_monoid</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>Does anyone see what is going on?</p>",
        "id": 231417472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616470089
    },
    {
        "content": "<p>Does it work if you rephrase it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ancestor one_hom mul_hom, to_additive]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">one_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 231417607,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616470228
    },
    {
        "content": "<p>No reason that that should fix it unless there's some weird variable order in the <code>to_additive</code> code</p>",
        "id": 231417715,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616470368
    },
    {
        "content": "<p>The error message changes to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"n\">M</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"n\">M</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_zero</span> <span class=\"n\">M</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n</code></pre></div>",
        "id": 231418421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616471136
    },
    {
        "content": "<p>Did you also change <code>add_monoid_hom</code> above?</p>",
        "id": 231419705,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616472607
    },
    {
        "content": "<p>Because that fixes it for me</p>",
        "id": 231419742,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616472662
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 231419756,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616472692
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ancestor zero_hom add_hom]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">zero_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">add_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ancestor one_hom mul_hom, to_additive]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">one_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>and just <code>eval_apply</code> needs to be fixed</p>",
        "id": 231419824,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616472781
    },
    {
        "content": "<p><code>eval_apply</code> needs help inferring which <code>eval</code> is being discussed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eval_apply</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>And that makes the file error free for me.</p>",
        "id": 231419911,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616472893
    },
    {
        "content": "<p>Ah!!! I didn't realise <code>add_monoid_hom</code> had already been defined above, and thought it was being generated, rather than just matched, by the <code>to_additive</code> on <code>monoid_hom</code>.</p>",
        "id": 231420571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616473710
    },
    {
        "content": "<p>That sort of double-definition thing is so tricksy, I still don't really understand why it needs to be that way</p>",
        "id": 231420600,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616473791
    },
    {
        "content": "<p>For the record (if anyone has similar issues), I debugged this by comparing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">monoid_hom</span>\n</code></pre></div>\n<p>after changing just <code>monoid_hom</code> and not <code>add_monoid_hom</code>. I saw that <code>add_monoid_hom</code> still had <code>add_monoid</code> constraints, and I couldn't imagine that <code>to_additive</code> was creating them out of thin air. Then I just did a F12 to go to definition.</p>",
        "id": 231420746,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616473957
    },
    {
        "content": "<p>I made a bit further progress, but the concrete categories are really upset. They expect the morphisms to need a single typeclass on source and target, and it looks a bit grungy to make it more flexible...</p>",
        "id": 231423156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616476273
    },
    {
        "content": "<p>I could presumably generalize to <code>mul_one_class</code> :-)</p>",
        "id": 231423318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616476470
    },
    {
        "content": "<p>That at least would relax caring about associativity.</p>",
        "id": 231423325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616476490
    },
    {
        "content": "<p>Should we just fill out this diagram? <a href=\"https://en.wikipedia.org/wiki/Semigroup#/media/File:Magma_to_group4.svg\">https://en.wikipedia.org/wiki/Semigroup#/media/File:Magma_to_group4.svg</a></p>",
        "id": 231423774,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616477030
    },
    {
        "content": "<p>Possibly... gosh it would be nice to automate. :-)</p>",
        "id": 231423884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616477146
    },
    {
        "content": "<p>I'm looking forward to what Yasmine is able to generate in that rosy future</p>",
        "id": 231423951,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616477209
    },
    {
        "content": "<p>While Kevin might have been joking about it, I really think that there is a (possibly small) use for additive structures with_one, just like there are multiplicative ones with_zero.</p>",
        "id": 231427053,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616480679
    },
    {
        "content": "<p>In most applications, they are merged by assuming semiring, but it is nice to be able to develop a little bit of theory without assuming the other operation</p>",
        "id": 231427096,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616480729
    },
    {
        "content": "<p>Note that the cost in terms of number of typeclasses of having a different typeclass for the presence or absence of each axiom is effectively exponential in number of axioms</p>",
        "id": 231439509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616490214
    },
    {
        "content": "<p>So arguably there needs to be a stronger argument than \"it is nice\", Damiano!</p>",
        "id": 231439579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616490249
    },
    {
        "content": "<p>Yes. I think the current motivation is trying to unify Lie algebras with other algebras to the extent possible, but this would require a lot of flexibility about units and associativity.</p>",
        "id": 231439695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616490337
    },
    {
        "content": "<p>Doesn't that also require the lie stuff to start using <code>*</code> instead of the lie brackets?</p>",
        "id": 231439770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616490367
    },
    {
        "content": "<p>I suppose we could have a <code>to_lie</code> like <code>to_additive</code></p>",
        "id": 231440044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616490556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/generalizing.20.60monoid_hom.60/near/231439695\">said</a>:</p>\n<blockquote>\n<p>Yes. I think the current motivation is trying to unify Lie algebras with other algebras to the extent possible, but this would require a lot of flexibility about units and associativity.</p>\n</blockquote>\n<p>Speaking for myself, I wouldn't say \"to the extent possible\" but rather \"to the extent that is immediately useful\" and adopting a wait and see approach about some sort of possible future grand unification.</p>",
        "id": 231446824,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616494476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/generalizing.20.60monoid_hom.60/near/231439770\">said</a>:</p>\n<blockquote>\n<p>Doesn't that also require the lie stuff to start using <code>*</code> instead of the lie brackets?</p>\n</blockquote>\n<p>Notation aside, we need to be able to talk about algebras that carry both associative and Lie products. I claim this need justifies the special Lie bracket product instead of <code>*</code>. For what it's worth, here's an example (in a messy branch which I will tidy up if/when a bunch of other stuff is resolved) where I do cross the boundary and usefully turn a Lie product into a <code>*</code>: <a href=\"https://github.com/leanprover-community/mathlib/pull/6723/files#diff-53e86155c95b35de6847327b3a7a3abac9132834bcab9e06644828a38aced107R67\">https://github.com/leanprover-community/mathlib/pull/6723/files#diff-53e86155c95b35de6847327b3a7a3abac9132834bcab9e06644828a38aced107R67</a></p>",
        "id": 231447131,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616494645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/generalizing.20.60monoid_hom.60/near/231447131\">said</a>:</p>\n<blockquote>\n<p>Notation aside, we need to be able to talk about algebras that carry both associative and Lie products</p>\n</blockquote>\n<p>Do you mean carry both at the same time with different notation, or a generalization that treats the two as synonyms?</p>",
        "id": 231447501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616494845
    },
    {
        "content": "<p>I mean, they have two product operations (that are compatible). The standard example would be a (non-commutative) ring, thus carrying <code>has_mul</code>, where we define a second <code>has_bracket</code> product as <code>⁅x, y⁆ = x*y - y*x</code>.</p>",
        "id": 231447776,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616495016
    },
    {
        "content": "<p><code>to_additive</code> can't generate <code>structure</code>s because Lean 3 meta programming doesn't let us (easily) define structures in meta code.</p>",
        "id": 231460122,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616501997
    },
    {
        "content": "<p>Can't we build a bit of API around <code>emit_code_here</code> that would allow us to define structures in meta code?</p>",
        "id": 231461638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616502801
    }
]