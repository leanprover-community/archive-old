[
    {
        "content": "<p>Yael isolated a nice simple version of a phenomenon I've seen a couple of times now, where tactic mode is quick to accept a theorem as true, but the kernel then spends a long time convincing itself. This is some kind of \"heavy refl\" I think but of a very specific nature. Consider the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.free_abelian_group</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">-- works super-quickly</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- works instantly</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- tactic failed, there are no goals to be solved</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It seems that in this set-up, <code>x * 0</code> is defeq to <code>0</code> and the first example compiles with no problem. The second example, which of course should also be <code>refl</code>, also seems to compile without problem, you get the goals accomplished message, and an error on the <code>sorry</code> complaining that there are no goals left. Commenting out the <code>sorry</code> though makes the proof compilation time shoot up to about 5 seconds on my relatively new laptop, and although I only have a poor understanding of what's going on what I think is happening is that tactic mode accepted the <code>refl</code> fine but the kernel seems to be having second thoughts about it for quite some time.</p>\n<p>Switching on the profiler doesn't seem to help at all; it just reports everything as happening quickly, it's perhaps not profiling that last step where the kernel has to check it believes the proof term which has been constructed. I've seen situations like this before but this is by far the simplest one. Is it worth trying to demathlibify this or are examples which use only core Lean already known?</p>\n<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works fine and is also very quick. Is there more than one kind of \"heavy refl\"? The kind which takes a long time to work in tactic mode, and then a different kind like this one which is quick in tactic mode but then takes a long time in the kernel? Or are they all like this? Sorry if I'm talking nonsense about kernels, I don't really understand how all this works really.</p>",
        "id": 282041245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652311712
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.free_abelian_group</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- quick</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- quick</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- very slow (but quick if you add `sorry` after)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282041975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652312258
    },
    {
        "content": "<p>This is different to the non-transitivity of <code>rfl</code> at the end of <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">section 3.7 of the reference manual</a>; there the <code>refl</code> just fails quickly, and adding a <code>sorry</code> afterwards doesn't change anything.</p>",
        "id": 282042398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652312596
    },
    {
        "content": "<p>Completely coincidentally Bhavik just showed me another very short example of apparently a totally different nature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">timeout</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">128</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">500</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num1</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- no goals to be solved</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282043817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652313725
    },
    {
        "content": "<p>It gets even shorter!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">timeout</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282043840,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1652313752
    },
    {
        "content": "<p>My guess is that this is a bug in how norm_num deals with real powers?</p>",
        "id": 282043857,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1652313770
    },
    {
        "content": "<p><code>(0 : ℝ) &lt; 1 ^ (20 : ℕ)</code> is fine, and <code>(0 : ℝ) &lt; 1 ^ (19 : ℝ)</code> is fine</p>",
        "id": 282043897,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1652313808
    },
    {
        "content": "<p>(in my case it's easily worked-around though, with <code>rpow_pos_of_pos</code>)</p>",
        "id": 282043989,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1652313891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this issue well-understood?</p>",
        "id": 282043992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652313896
    },
    {
        "content": "<p>I'm interested because I feel like it's the only issue I ever run into with Lean 3 where I feel at a loss about how to solve it. Many other weird timeouts are fixed by making universes explicit, or using <code>noncomputable!</code>, but this one is nasty and I have no understanding of it.</p>",
        "id": 282044167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652314062
    },
    {
        "content": "<p>When there is a surprising performance cliff in <code>norm_num</code> kernel check time, the usual diagnosis is a bug in the proof construction. The reason it isn't always just a failure is because lean has all sorts of definitional equalities, so when you apply things which are of the wrong type lean just tries to unfold things until it works, leading to a huge cost. In this case, the bug was that it was expecting <code>(20:ℝ) = ↑(20:ℕ)</code> and I gave it <code>↑(20:ℕ) = (20:ℝ)</code>. This works even though it's wrong, because <code>↑(20:ℕ)</code> and <code>(20:ℝ)</code> are defeq (at great expense)</p>",
        "id": 282072805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652343622
    },
    {
        "content": "<p>Aah so this looks like it's totally unrelated to the <code>x*y*0</code> slowness.</p>",
        "id": 282115647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652366339
    },
    {
        "content": "<p>In the original <code>x*y*0</code> issue, I would guess that the elaborator has chosen some good sequence of unfoldings but the kernel chose a bad one; unfortunately there doesn't seem to be any sort of logging in the kernel <code>is_def_eq</code> check so I'm not sure how to debug it effectively</p>",
        "id": 282116011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652366495
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14099\">#14099</a></p>",
        "id": 282116598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652366728
    },
    {
        "content": "<p>I can't figure out how <code>rfl : x*y*0=x*(y*0)</code> works at all. I thought it was defined in terms of list concatenation (with multiple levels of quotients), but this identity doesn't work for lists concatenation directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Unless somehow the concatenation is reversed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">([]</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282118693,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652367486
    },
    {
        "content": "<p>This is multiplication in the (additive) free abelian group on a monoid</p>",
        "id": 282118957,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652367586
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_abelian_group.semigroup\">docs#free_abelian_group.semigroup</a></p>",
        "id": 282119630,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652367819
    },
    {
        "content": "<p>Here's a simpler version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.free_abelian_group</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">free_abelian_group</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- true but hard</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">abelianization.of</span> <span class=\"bp\">$</span> <span class=\"n\">free_group.mk</span> <span class=\"o\">[])</span> <span class=\"bp\">=</span>\n  <span class=\"n\">lift</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">abelianization.of</span> <span class=\"bp\">$</span> <span class=\"n\">free_group.mk</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- true but harder, times out</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abelianization.of</span> <span class=\"bp\">$</span> <span class=\"n\">free_group.mk</span> <span class=\"o\">[])</span> <span class=\"bp\">=</span>\n  <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abelianization.of</span> <span class=\"bp\">$</span> <span class=\"n\">free_group.mk</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 282122700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652369037
    },
    {
        "content": "<p>I think <code>lift</code> is not stated in a very defeq-friendly way</p>",
        "id": 282122781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652369058
    },
    {
        "content": "<p>well, really this kind of thing is never easy, not sure that we need to do anything about it</p>",
        "id": 282123518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652369339
    },
    {
        "content": "<p>the basic issue is that the heuristic <code>f x =?= g y &lt;- f =?= g, x =?= y</code> is easy to mislead but also really important in practice</p>",
        "id": 282123644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652369397
    },
    {
        "content": "<p>In certain cases like this one, we want the iota reduction to take precedence (i.e. <code>lift f (mk x) ~&gt; f x</code>) rather than going off on a wild goose chase on <code>lift f (mk x) =?= lift g (mk x) &lt;- f =?= g</code> when we know <code>f x</code> and <code>g x</code> are obviously equal, but after they've been wrapped in this many layers of definition it is really hard to tell that this is still an iota rule</p>",
        "id": 282124032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652369537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/kernel.20slow.20to.20accept.20refl.20proof/near/282116598\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14099\">#14099</a></p>\n</blockquote>\n<p>Thanks for this!</p>",
        "id": 282150601,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1652379671
    }
]