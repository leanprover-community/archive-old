[
    {
        "content": "<p>I've started playing around with <code>norm_num</code> a bit, trying to understand how one can possibly extend it. Mimicking code I found in the context of <code>gcd</code>s, I'm trying the following (a bit silly) example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test0</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mod</span><span class=\"o\">],}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"o\">,</span> <span class=\"n\">nat.one_mod</span><span class=\"o\">],}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_sub_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.mod_eq_sub_mod</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_not_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">h'</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_sub_two'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">test_sub_two</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_test</span> <span class=\"o\">:</span> <span class=\"n\">instance_cache</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">instance_cache</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ic</span> <span class=\"n\">ea</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ea.to_nat</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">ea'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">ic.of_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_test</span> <span class=\"n\">ic</span> <span class=\"n\">ea'</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- `p'` should be a proof of `a ≠ 1`</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test_sub_two'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[</span><span class=\"n\">ea</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval_test</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"bp\">%%</span><span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">prove_test</span> <span class=\"n\">c</span> <span class=\"n\">ea</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n</code></pre></div>\n<p>The <code>sorry</code> should be replaced by something returning a proof of <code>a ≠ 1</code>.</p>\n<p>The question is, how can I obtain this? I have noticed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_num.prove_ne\">docs#norm_num.prove_ne</a>, but this seems to be about rational numbers, not naturals.</p>",
        "id": 296882698,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662146666
    },
    {
        "content": "<p>OK; I figured out that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_num.prove_ne\">docs#norm_num.prove_ne</a> works for naturals and integers as well. So:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test0</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mod</span><span class=\"o\">],}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"o\">,</span> <span class=\"n\">nat.one_mod</span><span class=\"o\">],}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_sub_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.mod_eq_sub_mod</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_not_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">h'</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_sub_two'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">test_sub_two</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_test</span> <span class=\"o\">:</span> <span class=\"n\">instance_cache</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">instance_cache</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ic</span> <span class=\"n\">ea</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ea.to_nat</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">ea'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">ic.of_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_test</span> <span class=\"n\">ic</span> <span class=\"n\">ea'</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">norm_num.prove_ne</span> <span class=\"n\">ic</span> <span class=\"n\">ea</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test_sub_two'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[</span><span class=\"n\">ea</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval_test</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"bp\">%%</span><span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">prove_test</span> <span class=\"n\">c</span> <span class=\"n\">ea</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 296887200,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662148750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as resolved.</p>",
        "id": 296887227,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662148761
    }
]