[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>  and I are having some \"fun\" profiling <code>rewrite_search</code>, and discovered that all the arithmetic is slow.</p>",
        "id": 147570420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542085478
    },
    {
        "content": "<p>don't generate proofs during the search</p>",
        "id": 147570429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085516
    },
    {
        "content": "<p>We're going to experiment to see if typeclass resolution is partly to blame, but I'm also wondering if you have a sense of whether it's better to use <code>nat</code> or <code>int</code>.</p>",
        "id": 147570430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542085522
    },
    {
        "content": "<p>how are you proving things?</p>",
        "id": 147570435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085537
    },
    {
        "content": "<p>Maybe Keeley can tell me that <code>nat</code> won't actually do for our purposes.</p>",
        "id": 147570438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542085540
    },
    {
        "content": "<p>Nope, everything is in meta land.</p>",
        "id": 147570441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542085546
    },
    {
        "content": "<p>oh --- sorry, it's not that part that is slow</p>",
        "id": 147570457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542085562
    },
    {
        "content": "<p>it is the edit distance calculations that are slow</p>",
        "id": 147570486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542085569
    },
    {
        "content": "<p>so this has nothing to do with proofs</p>",
        "id": 147570489,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542085574
    },
    {
        "content": "<p>they should both be pretty fast</p>",
        "id": 147570491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085577
    },
    {
        "content": "<p>We could use <code>nat</code> I think<br>\nI just have to find all the typeclass names I think</p>",
        "id": 147570510,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542085631
    },
    {
        "content": "<p>for numbers less than 2^30 or so it's just using the C++ addition which should be super fast</p>",
        "id": 147570511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085644
    },
    {
        "content": "<p>ok, all our numbers should be small enough, I think</p>",
        "id": 147570517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542085658
    },
    {
        "content": "<p>do you have any idea why <code>min</code> could be (relatively speaking) slow?</p>",
        "id": 147570540,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542085671
    },
    {
        "content": "<p>there is a lot of overhead for VM stuff but no more than anything else</p>",
        "id": 147570542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085676
    },
    {
        "content": "<p>You can look at the code generated for a definition using <code>set_option trace.compiler.optimize_bytecode true</code></p>",
        "id": 147570604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085720
    },
    {
        "content": "<p>oooh...</p>",
        "id": 147570617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542085753
    },
    {
        "content": "<p>If you inline the definition of <code>min</code> it's almost as fast as it possibly could be</p>",
        "id": 147570676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085852
    },
    {
        "content": "<p>if you don't inline there is possible inefficiency in creating and destroying the <code>nat.decidable_linear_ordered_semiring</code></p>",
        "id": 147570686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085907
    },
    {
        "content": "<p>but I don't know how significant it is</p>",
        "id": 147570729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085928
    },
    {
        "content": "<p>(And by inline I mean <code>attribute [inline] min</code>)</p>",
        "id": 147570739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542085967
    },
    {
        "content": "<p>ooooh</p>",
        "id": 147570933,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542086324
    },
    {
        "content": "<p>can you inline instances?</p>",
        "id": 147570948,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542086350
    },
    {
        "content": "<p>like where they are used</p>",
        "id": 147570951,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542086357
    },
    {
        "content": "<p>you don't want to inline instances, you want to inline projections. My experiments with <code>min</code> on <code>nat</code> show exactly the kind of simplification you would want</p>",
        "id": 147571233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542086774
    },
    {
        "content": "<p>Just for the record: we ended up getting a factor-of-three speedup by inlining a bunch of important things in the hotpath, and eliminating some pesky table lookups in favor of using more memory---and parallelisation is to come!</p>",
        "id": 147582312,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542104964
    },
    {
        "content": "<p>finally someone more clever than me is using a more clever approach to speed up things! :D</p>",
        "id": 147582752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542105414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> would you have any insight as to how I could speed up <a href=\"https://github.com/leanprover/mathlib/pull/461/commits/f80e9fce6b081cf26f551b3ae2e5c83327f9bd59#diff-1f7cb4d661f00b6d887925434b41ad5dR293\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/461/commits/f80e9fce6b081cf26f551b3ae2e5c83327f9bd59#diff-1f7cb4d661f00b6d887925434b41ad5dR293\">this</a> without doing what I did?</p>",
        "id": 147668689,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542203664
    },
    {
        "content": "<p>Unfortunately not without contriving a tactic kenny<br>\n---but I must get to bed!</p>",
        "id": 147669081,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542204034
    },
    {
        "content": "<p>:O the string <code>@mv_polynomial σ α (@comm_ring.to_comm_semiring α _inst_3)</code> appears 31 times!</p>",
        "id": 147669084,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542204044
    },
    {
        "content": "<p>But its definitely something to think about<br>\n<code>(@comm_ring.to_comm_semiring α _inst_3)</code> 67 times!</p>",
        "id": 147669239,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542204182
    },
    {
        "content": "<p>Can you think of a general way to hint about this kind of stuff? <br>\nMaybe you could say \"use <code>comm_ring.to_comm_semiring</code> everywhere you can first\"</p>",
        "id": 147669365,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542204295
    },
    {
        "content": "<p>To some tactic</p>",
        "id": 147669375,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542204304
    },
    {
        "content": "<p>I don't write tactics...</p>",
        "id": 147670232,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542205201
    },
    {
        "content": "<p>:D<br>\nIt's on the list, then!</p>",
        "id": 147670331,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542205254
    }
]