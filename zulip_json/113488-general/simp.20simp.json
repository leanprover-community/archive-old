[
    {
        "content": "<p>In this example I need to call <code>simp</code> twice to close the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.dfinsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span>\n\n<span class=\"kd\">@[congr[</span>\n<span class=\"kd\">lemma set_like.dep_congr {ι α β P} [set_like P α]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">dfinsupp.single</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.to_add</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">submodule.zero_mem</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">dfinsupp.single</span> <span class=\"mi\">0</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">submodule.zero_mem</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>  <span class=\"c1\">-- delta reduce an instance argument, so that simp has to make real progress</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is my <code>@[congr]</code> lemma bad?</p>",
        "id": 263872040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638806652
    },
    {
        "content": "<p>Are you sure that congr lemma is even used? (The head symbol is a variable, so it won't be found in the index.)</p>",
        "id": 263872334,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638806756
    },
    {
        "content": "<p>Yes, the second <code>simp</code> fails without it</p>",
        "id": 263872436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638806780
    },
    {
        "content": "<p><del>(and the first one amounts to a <code>dsimp only</code> that cleans up an instance argument)</del> edited so that the first <code>simp</code> fails without <code>@[congr]</code></p>",
        "id": 263872685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638806884
    },
    {
        "content": "<p>I suspect the problem is that the congr lemma doesn't let <code>x</code> be replaced with some <code>y</code> on the RHS, but also I can't work out how to state that in a way that <code>congr</code> accepts</p>",
        "id": 263874425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638807502
    },
    {
        "content": "<p><code>set_like</code> isn't to blame either, this fails with a submodule-specific lemma too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">submodule.dep_congr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 263876279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638808192
    },
    {
        "content": "<p>The problem here is the <code>f</code>, not the assumptions.</p>",
        "id": 263876683,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638808342
    },
    {
        "content": "<p>If I replace <code>f</code> with something specific like <code>pi.single</code>, then <code>@[congr]</code> rejects the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set_like.dep_congr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">has_zero</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">pi.single</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">pi.single</span> <span class=\"n\">j</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 263877331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638808611
    },
    {
        "content": "<p>Right, because it won't work in every instance (only when the codomain (p in your example)  is non-dependent).</p>",
        "id": 263877401,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638808648
    },
    {
        "content": "<p>But the codomain of <code>pi.single</code> is dependent in this case?</p>",
        "id": 263877722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638808764
    },
    {
        "content": "<p>Ah, now I see.</p>",
        "id": 263877860,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638808815
    },
    {
        "content": "<p>Is the problem that this only applies to specific invocations of <code>pi.single</code>?</p>",
        "id": 263878285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638808992
    },
    {
        "content": "<p>Yes, that's what the check ensures.  I <em>think</em> that check could be removed in core without breaking anything.  The simplifier does the matching using unification anyhow afaict.</p>",
        "id": 263878964,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638809259
    },
    {
        "content": "<p>Conversely, should <code>@[congr]</code> be rejecting my original lemma?</p>",
        "id": 263879245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638809366
    },
    {
        "content": "<p>If core supported this kind of congr lemma, then you should also allow rewriting in <code>x</code>, i.e., something like <code>i = j → x.1 = y → pi.single i x = pi.single j ⟨y, ...⟩</code>.</p>",
        "id": 263879250,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638809369
    },
    {
        "content": "<p>The <code>set_like.dep_congr</code> lemma is bad because 1) it does higher-order matching, and 2) doesn't allow rewriting in x, and 3) potentially applies to every subterm.  There is a lot of stuff the simplifier doesn't like but doesn't reject either, which is fine, we've got linters for that.</p>",
        "id": 263879426,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638809421
    },
    {
        "content": "<p><code>x.1 = y</code> isn't allowed in the congr lemma, annoyingly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- invalid congruence lemma, 'set_like.dep_congr' argument #13 is not a valid hypothesis, the</span>\n<span class=\"c1\">-- left-hand-side contains unresolved parameters</span>\n<span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set_like.dep_congr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"n\">y</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 263879831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638809582
    },
    {
        "content": "<p>Nor any other attempt to state something like that I can think of, like <code>x = ⟨y.1, h.symm ▸ y.prop⟩</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- invalid congruence lemma, 'set_like.dep_congr' argument #13 is not a valid hypothesis, the</span>\n<span class=\"c1\">-- right-hand-side must be of the form (m l_1 ... l_n) where m is parameter that was not</span>\n<span class=\"c1\">-- 'assigned/resolved' yet and l_i's are locals</span>\n</code></pre></div>",
        "id": 263879847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638809591
    },
    {
        "content": "<p>This would be accepted (but it still has the f issue):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set_like.dep_congr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"n\">y</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 263880862,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638809997
    },
    {
        "content": "<p>That has <code>y : p i</code> rather than <code>y : p j</code></p>",
        "id": 263881151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638810074
    },
    {
        "content": "<p>I should have mentioned that I tried that one; but with that one even <code>simp, simp, simp, simp</code> doesn't close the goal about <code>pi.single</code>...</p>",
        "id": 263881268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638810113
    },
    {
        "content": "<p>At least <code>simp; refl</code> works.</p>",
        "id": 263882303,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638810509
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set_like.dep_congr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">⟨</span><span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"n\">y</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 263882322,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638810519
    },
    {
        "content": "<p>It works for my original <code>congr</code> lemma too though</p>",
        "id": 263882464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638810578
    },
    {
        "content": "<p>(also that last snippet differs only in coe vs .1; did you find that makes a difference?)</p>",
        "id": 263882638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638810636
    },
    {
        "content": "<p>Oh wow it does, thanks!</p>",
        "id": 263882720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638810675
    },
    {
        "content": "<p>Although I still need multiple <code>simp</code>s in some cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">pi.single</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.to_add</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">submodule.zero_mem</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">pi.single</span> <span class=\"mi\">0</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">submodule.zero_mem</span> <span class=\"n\">_</span><span class=\"o\">]⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- leaves behind a `⟨0, _⟩.val` which isn't simp-normal!</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- gets rid of the above</span>\n\n  <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263883173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638810845
    },
    {
        "content": "<p>If congr lemmas allowed complex arguments you could have a second congr lemma of the form <code>pi.single i ⟨x, h⟩ = pi.single j ⟨y, h⟩</code> which would avoid the iota-reduction.</p>",
        "id": 263885357,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638811732
    },
    {
        "content": "<p>Yeah, really that's what I'd like to be able to do</p>",
        "id": 263885436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638811769
    },
    {
        "content": "<p>Just to check, do you think it's reasonable to expect <code>simp</code> to be able to close this type of goal?</p>",
        "id": 263885487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638811798
    },
    {
        "content": "<p>Yes.</p>",
        "id": 263885645,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638811851
    },
    {
        "content": "<p>It should be able to rewrite here.</p>",
        "id": 263885671,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638811861
    },
    {
        "content": "<p>For this particular goal it seems I can get by with my original congr lemma, and the <code>pi.single_inj</code> lemma in <a href=\"https://github.com/leanprover-community/mathlib/issues/10644\">#10644</a></p>",
        "id": 263886186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638812051
    },
    {
        "content": "<p>But that only works when the dependent function is injective</p>",
        "id": 263886213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638812069
    },
    {
        "content": "<p>Can Lean 4 handle this type of thing?</p>",
        "id": 263886259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638812088
    },
    {
        "content": "<p>The original congr lemma is bad and shouldn't be used, it does higher-order matching on every subterm.</p>",
        "id": 263886857,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638812348
    },
    {
        "content": "<p>Which is a bad thing because of performance I assume</p>",
        "id": 263887372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638812575
    },
    {
        "content": "<p>Also because of unpredictability.</p>",
        "id": 263887399,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638812590
    }
]