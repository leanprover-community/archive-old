[
    {
        "content": "<p>I recently became convinced to replace my habit of commenting out pieces of working proofs in a long proof by use the <code>sorry ; {}</code> trick. For instance let's look at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Say the first proof is too long to check for my taste when I'm working on the second proof. I used to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> { refl } -/</span><span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>while working on the second part. But people told me I should switch to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However doing that make the second goal disappear when the cursor is at the end of the first line (or the beginning of the second line), which is very weird and confusing.</p>",
        "id": 272826370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645546661
    },
    {
        "content": "<p>Does anyone has an explanation and some way to save that <code>sorry ; </code> trick?</p>",
        "id": 272826494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645546696
    },
    {
        "content": "<p>huh, this is really annoying; I think it's because the <code>;</code> combinator mode is so bugged in lean3. <code>skip, sorry;</code> seems to recover better behaviour, but it just delays the annoyance to after <code>skip</code>.</p>",
        "id": 272827636,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645547057
    },
    {
        "content": "<p>i am told that in lean4 this sort of stuff is going away, so hopefully</p>",
        "id": 272827690,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645547081
    },
    {
        "content": "<p>Can we make a <code>don't</code> tactic that takes a block, and just does <code>sorry</code>?</p>",
        "id": 272827775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645547115
    },
    {
        "content": "<p>Looks like this works <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272828118,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645547240
    },
    {
        "content": "<p>I'd be very curious to know whether <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has an explanation.</p>",
        "id": 272829239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645547657
    },
    {
        "content": "<p>I suspect this is the same as <a href=\"https://github.com/leanprover-community/lean/pull/201\">lean#201</a></p>",
        "id": 272829593,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1645547803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/sorry.20weirdness/near/272827775\">said</a>:</p>\n<blockquote>\n<p>Can we make a <code>don't</code> tactic that takes a block, and just does <code>sorry</code>?</p>\n</blockquote>\n<p>Yep!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Ignore a tactic block and use `sorry` instead, to help speed up a</span>\n<span class=\"cm\">proof under construction. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">skip_proof</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">itactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.admit</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Ignore the tactic block completely. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ignore</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">itactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.skip</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">skip_proof</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272829655,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645547829
    },
    {
        "content": "<p>Or since <code>sorry</code> already exists, it could take an optional block and ignore it (assuming optional blocks are possible)</p>",
        "id": 272829665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645547836
    },
    {
        "content": "<blockquote>\n<p>I'd be very curious to know whether @Gabriel Ebner has an explanation.</p>\n</blockquote>\n<p>As others have already pointed out, this is the \"intended\" behavior of the semicolon.  That is, it shows all goals that the block would be applied to (i.e., none in this case).</p>",
        "id": 272829864,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645547907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/sorry.20weirdness/near/272829593\">said</a>:</p>\n<blockquote>\n<p>I suspect this is the same as <a href=\"https://github.com/leanprover-community/lean/pull/201\">lean#201</a></p>\n</blockquote>\n<p>Indeed!</p>",
        "id": 272829937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645547946
    },
    {
        "content": "<p>It's so weird that the semi-colon affects the tactic state <em>before</em> using it!</p>",
        "id": 272829993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645547966
    },
    {
        "content": "<p>Anyway, I think we could have the <code>skip_proof</code> tactic (maybe with a shorter name).</p>",
        "id": 272830129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645548014
    },
    {
        "content": "<p>Would it be too far out there to upgrade <code>sorry</code> to take an optional <code>itactic</code>? That way it could just be <code>sorry { ... }</code></p>",
        "id": 272830235,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645548067
    },
    {
        "content": "<p>Oh, Reid already said that</p>",
        "id": 272830306,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645548116
    },
    {
        "content": "<p>Except if you accidentally forget the comma after sorry, you might be sorrying the wrong thing.</p>",
        "id": 272830538,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645548210
    },
    {
        "content": "<p>sorry is already overloaded since it is a homonym for the term and the tactic. Putting more things on it to now possibly affect other blocks is scary to me. But I can learn to deal with it.</p>",
        "id": 272830814,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645548315
    },
    {
        "content": "<p>I couldn't get optional <code>itactic</code> blocks to work, and there aren't any tactics that have them, so they might not be possible.</p>",
        "id": 272831187,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645548456
    },
    {
        "content": "<p>what are the odds that an optional expression would match the same syntax?</p>",
        "id": 272831471,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645548558
    },
    {
        "content": "<p>One advantage of reusing <code>sorry</code> is that we already know that writing <code>sorry</code> means you didn't prove the theorem. But if it doesn't work (without weird hacks), then not worth it.</p>",
        "id": 272831607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645548609
    },
    {
        "content": "<p>Other possible names: <code>cut</code>, <code>ignore</code>, <code>overlook</code>, <code>trust</code>, <code>approve</code>, <code>defer</code>, <code>relent</code>, or a one-letter name like <code>c</code> or <code>s</code></p>",
        "id": 272832019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645548758
    },
    {
        "content": "<p><code>itactic</code>  is a bit weird, but IIRC Ed added a regular parser combinator for tactic blocks</p>",
        "id": 272832349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645548849
    },
    {
        "content": "<p>Would it be easy to ensure that VS Code formats this new name in red as it does with <code>sorry</code>, to make it easier to find?</p>",
        "id": 272833316,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1645549199
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser.itactic</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">foo</span> <span class=\"o\">{</span> <span class=\"n\">skip</span> <span class=\"o\">},</span>\n  <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272833588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645549264
    },
    {
        "content": "<p>Ok, so this could replace <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"gr\">sorry</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser.itactic</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.admit</span>\n</code></pre></div>",
        "id": 272834042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645549440
    },
    {
        "content": "<p>I didn't realize <code>begin/end</code> work, too, for these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"bp\">'</span> <span class=\"kd\">begin</span> <span class=\"n\">refl</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272834178,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645549481
    },
    {
        "content": "<p>yes, <code>begin</code> and <code>end</code> are synonyms for <code>{ }</code> in tactic mode (and outside it in a few places)</p>",
        "id": 272834737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645549699
    },
    {
        "content": "<p>I like this. Indeed there is some risk of being confusing if used accidentally, but it doesn't sound like a huge risk to me.</p>",
        "id": 272834816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645549753
    },
    {
        "content": "<p>why not just make a different name to avoid all possible mistakes?</p>",
        "id": 272841657,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645552582
    },
    {
        "content": "<p>Because people (and IDEs and other tools) already know that <code>sorry</code> has an important meaning</p>",
        "id": 272841995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645552703
    },
    {
        "content": "<p>I think that also, even if there's a mistake people make with this, it won't take long to figure out what happened.</p>",
        "id": 272842387,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645552834
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/689\">lean#689</a></p>\n<p>One thing I'm not sure about is using <code>with_desc</code> for <code>parser.itactic</code> to give it a better documentation string. To get it to work, I added a <code>reflectable</code> instance for <code>with_desc</code>, but I'm not really sure what the class is for.</p>",
        "id": 272844398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645553714
    },
    {
        "content": "<p>I think it'd be nice if this could be tested with sorry'd code, such as LTE and flt-regular, before merging into mathlib main; it could wreak havoc if it works differently to what we think</p>",
        "id": 272844755,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645553853
    },
    {
        "content": "<p>Here's what the in-tactic docstring looks like in context (in Emacs):</p>\n<p><a href=\"/user_uploads/3121/8Q6o5ELQVj9q1H8ToowSTxWo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8Q6o5ELQVj9q1H8ToowSTxWo/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/8Q6o5ELQVj9q1H8ToowSTxWo/image.png\"></a></div>",
        "id": 272845097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645553990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/sorry.20weirdness/near/272844398\">said</a>:</p>\n<blockquote>\n<p>One thing I'm not sure about is using <code>with_desc</code> for <code>parser.itactic</code> to give it a better documentation string. To get it to work, I added a <code>reflectable</code> instance for <code>with_desc</code>, but I'm not really sure what the class is for.</p>\n</blockquote>\n<p>I'm not 100% sure, but I believe the reason is that the return value of the parser (the <code>α</code> in <code>parser α</code>) must be serialized between calling the custom parser and calling the user notation, and expressions are the only available format for that.  Your implementation looks correct, since <code>with_desc</code> has the same return value as the wrapped value.</p>",
        "id": 272845765,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645554260
    }
]