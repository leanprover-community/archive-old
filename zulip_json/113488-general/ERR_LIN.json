[
    {
        "content": "<p>Could the style linter tell us where the long lines are? The only way I know to check for them is by going in the \"Files changed\" tab on a PR, which isn't very practical, at least to me on big PRs.</p>",
        "id": 253738383,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631883825
    },
    {
        "content": "<p>I use something like <code>git diff master | grep '.{102}'</code> (actually, I use Emacs magit to get the diff and search for a regexp in this diff).</p>",
        "id": 253740039,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631884552
    },
    {
        "content": "<p>Ooh, that's smart!</p>",
        "id": 253741208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631885086
    },
    {
        "content": "<p>I broke this in <a href=\"https://github.com/leanprover-community/mathlib/issues/5952\">#5952</a>, it should be straightforward to extend the messages to include the missing information</p>",
        "id": 253742574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631885714
    },
    {
        "content": "<p>Github is sort of at fault here; we're providing it the line number and filename in the message, but it's parsing them out then discarding them!</p>",
        "id": 253742653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631885753
    },
    {
        "content": "<p>For some reason the linter itself cannot do this? It doesn't have access to the information?</p>",
        "id": 253745716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631886970
    },
    {
        "content": "<p>I found this painful when I refactored all the <code>_is_group_hom</code> stuff</p>",
        "id": 253745783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631886998
    },
    {
        "content": "<p>Are you talking about the lean linter or the style linter Kevin?</p>",
        "id": 253746540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631887295
    },
    {
        "content": "<p>The problem with the style linter is that it <a href=\"https://github.com/leanprover-community/mathlib/blob/5b75f5ac2a1897f514941f95665f83480959026b/scripts/lint-style.py#L236\">currently prints out</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">::</span><span class=\"n\">error</span> <span class=\"n\">file</span><span class=\"bp\">=</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">line</span><span class=\"bp\">=</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">code</span><span class=\"bp\">=</span><span class=\"n\">Z</span><span class=\"o\">::</span><span class=\"n\">Some</span> <span class=\"n\">information</span>\n</code></pre></div>\n<p>and github says \"Oh I know, you wanted to see <em>'Some information'</em> and none of that silly colon stuff\"</p>",
        "id": 253746799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631887404
    },
    {
        "content": "<p>The fix is to just put <code>X</code> and <code>Y</code> inside <code>Some information</code></p>",
        "id": 253746865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631887438
    }
]