[
    {
        "content": "<p>After merging in master, my PR at <a href=\"https://github.com/leanprover-community/mathlib/pull/4908\">https://github.com/leanprover-community/mathlib/pull/4908</a> is now experiencing a deterministic timeout in a file I haven't touched. What worries me, is that I don't think any of the files I've touched are even imported by that file - so why am I getting a timeout?</p>",
        "id": 215845845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604669606
    },
    {
        "content": "<p>The bad file is <code>src/data/polynomial/monic.lean</code>. This is a sufficiently basic file that it ought not cause timeouts. We should fix this.</p>",
        "id": 215846469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604669968
    },
    {
        "content": "<p>These commits have identical file trees:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/compare/5cf35e8501b74cc8391099c08c34ac504a30ccc0..e24736b251ebee44fcfb066ac5dfaa2e9c3b59d1\">https://github.com/leanprover-community/mathlib/compare/5cf35e8501b74cc8391099c08c34ac504a30ccc0..e24736b251ebee44fcfb066ac5dfaa2e9c3b59d1</a></p>\n<p>Yet <a href=\"https://github.com/leanprover-community/mathlib/commit/5cf35e8501b74cc8391099c08c34ac504a30ccc0\">one builds</a> and <a href=\"https://github.com/leanprover-community/mathlib/commit/e24736b251ebee44fcfb066ac5dfaa2e9c3b59d1\">one does not</a></p>",
        "id": 215846485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604669977
    },
    {
        "content": "<p>You could just click the \"Rerun jobs\" button. Maybe the timeout came from cosmic background radiation interfering with CI.)</p>",
        "id": 215846623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604670036
    },
    {
        "content": "<p>My hunch is that the the difference between those commits is they start with different caches</p>",
        "id": 215846680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604670074
    },
    {
        "content": "<p>For merge commits, the mathlib CI only tries the first parent, which never includes origin/master</p>",
        "id": 215846715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604670103
    },
    {
        "content": "<p>So maybe mathlib is now unbuildable with an empty cache?</p>",
        "id": 215846780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604670127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/How.20deterministic.20are.20deterministic.20timeouts.3F/near/215846623\">said</a>:</p>\n<blockquote>\n<p>You could just click the \"Rerun jobs\" button. Maybe the timeout came from cosmic background radiation interfering with CI.)</p>\n</blockquote>\n<p>I'll push <a href=\"https://github.com/leanprover-community/mathlib/pull/4908/commits/64e3e798bc2cf22466c9e52e1af01c41d3f98d6b\">an empty commit</a> instead - I don't want to discard the evidence of this happening</p>",
        "id": 215846834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604670178
    },
    {
        "content": "<p><code>next_coeff_mul</code> is very slow</p>",
        "id": 215846974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604670248
    },
    {
        "content": "<p>Is there a way to up the timeout for a single lemma?</p>",
        "id": 215847276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604670408
    },
    {
        "content": "<p>Uh oh, <a href=\"https://github.com/leanprover-community/mathlib/runs/1363787258\">this build</a> in the attempt to merge the totally unrelated <a href=\"https://github.com/leanprover-community/mathlib/issues/4915\">#4915</a> is also failing at the same place.</p>",
        "id": 215850977,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604672187
    },
    {
        "content": "<p>It looks like pushing an empty commit to the same branch wa enough to fix the problem, based on the fact it didn't immediately fail - so the time _is_ non-deterministic, but it's at least not deterministically always a problem</p>",
        "id": 215851599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604672453
    },
    {
        "content": "<p>Umm yeah, deterministic timeouts are only deterministic in the sense that they don't count how many seconds it takes to run something.  But there's lots of other \"hidden state\" that can influence how long a proof takes.  For example, caches, or the result of <code>mk_fresh_name</code>, etc.</p>",
        "id": 215851731,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1604672521
    },
    {
        "content": "<p>Silly Lean 3</p>",
        "id": 215852023,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1604672652
    },
    {
        "content": "<p>I'm speeding up the lemma. There are a lot of calls to <code>omega</code>.</p>",
        "id": 215853743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604673397
    },
    {
        "content": "<p>It's sad, because now I need to prove stupid trivialities about nats by hand</p>",
        "id": 215853771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604673414
    },
    {
        "content": "<p>I wish <code>omega</code> would print 5-line unreadable proof certificates that are reasonably fast. But <code>show_term { omega }</code> is more like 50 lines and unreadable.</p>",
        "id": 215854081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604673523
    },
    {
        "content": "<p>I've now got a speed up from 15.2s to 2.35s</p>",
        "id": 215856110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604674408
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4920\">#4920</a>, 15 extra lines <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>   36 insertions(+), 21 deletions(-)</p>",
        "id": 215856345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604674505
    },
    {
        "content": "<p>I wonder whether there's any work done on efficiently checkable proof formats for Presburger arithmetic</p>",
        "id": 215857039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604674781
    },
    {
        "content": "<p>I wouldn't be surprised if the answer is no</p>",
        "id": 215857048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604674785
    },
    {
        "content": "<p>I didn't check whether the output of <code>show_term { omega }</code> allowed for fast checking...</p>",
        "id": 215857191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604674831
    },
    {
        "content": "<p>If we could hide those 50 lines, then I wouldn't mind have 50 fast lines of garbage introduced by <code>-- omega says:</code></p>",
        "id": 215857274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604674866
    },
    {
        "content": "<p>Can we have VScode automatically hide lines. Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- proof generated by omega</span>\n<span class=\"c1\">-- START HIDDEN BLOCK</span>\n<span class=\"n\">complicated</span> <span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"o\">)</span>\n<span class=\"c1\">-- END HIDDEN BLOCK</span>\n</code></pre></div>",
        "id": 215857625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604674986
    },
    {
        "content": "<p>And only the first line would be shown in VScode, and the rest would be folded away</p>",
        "id": 215857671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604675004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/How.20deterministic.20are.20deterministic.20timeouts.3F/near/215854081\">said</a>:</p>\n<blockquote>\n<p>But <code>show_term { omega }</code> is more like 50 lines and unreadable.</p>\n</blockquote>\n<p>Does its output even elaborate correctly? I find that a lot of the time when I use <code>show_term</code>, the result does not</p>",
        "id": 215858160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604675210
    },
    {
        "content": "<p><a href=\"https://marketplace.visualstudio.com/items?itemName=maptz.regionfolder\">https://marketplace.visualstudio.com/items?itemName=maptz.regionfolder</a> looks promising!</p>",
        "id": 215858404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604675331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/How.20deterministic.20are.20deterministic.20timeouts.3F/near/215858160\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/How.20deterministic.20are.20deterministic.20timeouts.3F/near/215854081\">said</a>:</p>\n<blockquote>\n<p>But <code>show_term { omega }</code> is more like 50 lines and unreadable.</p>\n</blockquote>\n<p>Does its output even elaborate correctly? I find that a lot of the time when I use <code>show_term</code>, the result does not</p>\n</blockquote>\n<p>Bleh, you are right... it's more like 200 lines of non-elaborating crap.</p>",
        "id": 215858624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604675425
    },
    {
        "content": "<p>It would be great if we can have <code>omega?</code> which prints a correct proof certificate.</p>",
        "id": 215858941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604675569
    },
    {
        "content": "<p>Well, given <code>squeeze_simp?</code> sometimes gives incorrect output, I'm not too optimistic that getting <code>omega</code> to do that is propery is likely</p>",
        "id": 215859224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604675695
    },
    {
        "content": "<p>The problems that I currently had was stuff like <code>0.succ_pos</code> where projection notation is used but it shouldn't.</p>",
        "id": 215860745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604676342
    },
    {
        "content": "<p>why does lean have the quasi-deterministic timeouts? most programming languages, if compiling something is taking a long time, then it will just go ahead and take longer.</p>",
        "id": 215873776,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604681988
    },
    {
        "content": "<p>because it's used in an editor</p>",
        "id": 215873891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604682026
    },
    {
        "content": "<p>no one likes when their editor hangs</p>",
        "id": 215873923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604682038
    },
    {
        "content": "<p>if you use lean on the console there are no timeouts</p>",
        "id": 215873952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604682051
    },
    {
        "content": "<p>your editor shouldn't hang, right? it should just take a while to check syntax</p>",
        "id": 215874043,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604682110
    },
    {
        "content": "<p>and besides, the problem here is not in an editor - the CI system is failing with a timeout <a href=\"https://github.com/leanprover-community/mathlib/runs/1363431665\">https://github.com/leanprover-community/mathlib/runs/1363431665</a></p>",
        "id": 215874218,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604682181
    },
    {
        "content": "<p>For CI we want the timeouts to make sure that our code is reasonably fast</p>",
        "id": 215875121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604682588
    },
    {
        "content": "<p>By default, when you use Lean on the console there are no timeouts. In both the editor and CI, we use the <code>-T100000</code> option to throw an error when a proof takes too long.</p>",
        "id": 215875215,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604682614
    },
    {
        "content": "<p>I feel a vague unease but i guess I can't put my finger on quite why this seems wrong to me. I guess pretty soon mathlib will just hit the limits, they can always be increased but the status quo where compiling everything takes an hour isn't great, and hopefully lean 4 has much faster compilation?</p>",
        "id": 215876532,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604683138
    },
    {
        "content": "<p>GitHub Actions allows up to 6 hours for each run, so we should be OK for at least a few more months. Believe it or not, mathlib used to take even longer to build and lint, but then Gabriel went and improved a bunch of stuff in community Lean for us.</p>",
        "id": 215877069,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604683367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/How.20deterministic.20are.20deterministic.20timeouts.3F/near/215856345\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4920\">#4920</a>, 15 extra lines <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>   36 insertions(+), 21 deletions(-)</p>\n</blockquote>\n<p>Thanks to tips and tricks from Eric and Bryan, this is now almost a 10x speedup, and only 3 lines longer than it used to be.</p>",
        "id": 215881334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604685398
    },
    {
        "content": "<p>In fact, only 1 line longer: 30 insertions(+), 29 deletions(-)<br>\n(I forgot to disable the profile... doing that saves another 2 lines <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> )</p>",
        "id": 215881540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604685484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/How.20deterministic.20are.20deterministic.20timeouts.3F/near/215876532\">said</a>:</p>\n<blockquote>\n<p>I feel a vague unease but i guess I can't put my finger on quite why this seems wrong to me. I guess pretty soon mathlib will just hit the limits, they can always be increased but the status quo where compiling everything takes an hour isn't great, and hopefully lean 4 has much faster compilation?</p>\n</blockquote>\n<p>Note that the time limit is on <em>individual proofs</em>, so this doesn't represent a global bound on mathlib, unless the growth of the typeclass hierarchy makes all our individual proofs unbearably slow, in which case we have a bigger problem</p>",
        "id": 215887085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604688064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/How.20deterministic.20are.20deterministic.20timeouts.3F/near/215857039\">said</a>:</p>\n<blockquote>\n<p>I wonder whether there's any work done on efficiently checkable proof formats for Presburger arithmetic</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> this seems like the kind of thing that would exist in metamath if it exists anywhere?</p>",
        "id": 215889783,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604689443
    },
    {
        "content": "<p>I don't have any particular suggestions beyond the usual. Omega consists of a bunch of logical steps, you just write those down</p>",
        "id": 215892941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604691074
    },
    {
        "content": "<p>I'm pretty sure it's not nearly as bad as the <code>omega</code> tactic makes it look because <code>omega</code> uses proof by reflection</p>",
        "id": 215892986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604691103
    },
    {
        "content": "<p>The only fundamental advantage an efficiently checkable proof format would have over the omega test is if there is an advantage in nondeterministic computation. Such a thing might exist in the SAT part of omega but I think the main line is pretty deterministic</p>",
        "id": 215893233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604691230
    }
]