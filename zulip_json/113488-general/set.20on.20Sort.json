[
    {
        "content": "<p><code>set</code> and <code>subtype</code> are very old parts of Lean (old enough that <code>subtype</code> dates to the time before universe variables, eight years ago). When <code>set</code> was introduced, the definitions for the two were</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">tag</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">elt_of</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_property</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">elt_of</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">definition</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>At some point, <code>subtype</code> was changed to use <code>Sort</code> (which I believe didn't even exist yet), but <code>set</code> has had essentially the same definition ever since.</p>",
        "id": 284393377,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653933282
    },
    {
        "content": "<p>An important role for <code>subtype</code> these days is that it's used to create the <code>has_coe_to_sort</code> instance for <code>set</code>. The modern definition for <code>subtype</code> and <code>set</code> are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Is there any reason we shouldn't define it as <code>def set (α : Sort u) := α → Prop</code>? This would allow us to write <code>↥{x | p x}</code> or <code>{x // p x}</code> in all cases.</p>",
        "id": 284393389,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653933290
    },
    {
        "content": "<p>I think the answer is that it makes the type of <code>set</code> annoying for universe reasons</p>",
        "id": 284393907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653933753
    },
    {
        "content": "<p>Similar to how we have separate sigma and psigma</p>",
        "id": 284393925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653933779
    },
    {
        "content": "<p>Longer term, it seems that to make subtypes vs coerced sets more streamlined we should really embrace that <code>has_coe_to_sort</code> instance and redefine <code>subtype</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which then gives a coercion instance like so: (modulo universe variable mistakes, I haven't tested this)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">subtype</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Then <code>{x // p x}</code> could be convenient notation for just <code>subtype {x | p x}</code>.</p>",
        "id": 284393950,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653933818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/set.20on.20Sort/near/284393907\">said</a>:</p>\n<blockquote>\n<p>I think the answer is that it makes the type of <code>set</code> annoying for universe reasons</p>\n</blockquote>\n<p>It's still the case with this that <code>set α : Type u</code> when <code>α : Type u</code>, but now <code>set Prop : Type</code>.  Definitions and lemmas around <code>set</code> can still use <code>Type u</code> if that's more convenient universe-wise.</p>",
        "id": 284394172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653934008
    },
    {
        "content": "<p>It might be that <code>sigma</code> vs <code>psigma</code> solves some universe variable issues, but why do we not have <code>subtype</code> and <code>psubtype</code> then? Maybe the reason it's fine for <code>subtype</code> means it can be fine for <code>set</code>.</p>",
        "id": 284394330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653934156
    },
    {
        "content": "<blockquote>\n<p>It's still the case with this that <code>set α : Type u</code> when <code>α : Type u</code>, but now <code>set Prop : Type</code>.</p>\n</blockquote>\n<p>Are you sure? I think the fear is that you end up with some stupid universe constraint like <code>Sort (max (u+1) 1)</code> (I'm not at lean to check)</p>",
        "id": 284407390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653945924
    },
    {
        "content": "<p>What type is <code>set A</code> under your proposal when <code>A : sort u</code>?</p>",
        "id": 284407404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653945958
    },
    {
        "content": "<p>With this, <code>set : Sort u → Sort (max u 1)</code> (vs the current <code>set : Type u → Type u</code>).</p>\n<p>For comparison, right now we have <code>subtype : Π {α : Sort u}, (α → Prop) → Sort (max 1 u)</code>.</p>\n<p>Also:</p>\n<ul>\n<li><code>sigma : Π {α : Type u}, (α → Type v) → Type (max u v)</code></li>\n<li><code>psigma : Π {α : Sort u}, (α → Sort v) → Sort (max 1 u v)</code></li>\n</ul>",
        "id": 284409128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653947917
    },
    {
        "content": "<p>Right, so what type is <code>set α</code> under that proposal where <code>α : Type u</code>?</p>",
        "id": 284410669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653949862
    },
    {
        "content": "<p>Are you asking something else that this doesn't answer?<br>\n<span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/set.20on.20Sort/near/284394172\">said</a>:</p>\n<blockquote>\n<p>It's still the case with this that <code>set α : Type u</code> when <code>α : Type u</code></p>\n</blockquote>",
        "id": 284412590,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653952401
    },
    {
        "content": "<p>Has anyone tried this?</p>",
        "id": 285078463,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654494998
    }
]