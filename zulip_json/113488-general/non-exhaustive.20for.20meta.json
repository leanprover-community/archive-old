[
    {
        "content": "<p>If we allow non-termination at meta level, shouldn't we also allow non-exhaustive match?</p>",
        "id": 129371844,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531168188
    },
    {
        "content": "<p>There are a lot of possibilities. While mandatory termination is very restrictive, exhaustiveness is not and it has great benefits. It allows Lean to tell you when you're messing up</p>",
        "id": 129372015,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531168343
    },
    {
        "content": "<p>Whenever you would leave some cases out, it is a good practice to write an error message instead</p>",
        "id": 129372069,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531168407
    },
    {
        "content": "<p>You're making clear to any reader that you don't accept every input</p>",
        "id": 129372151,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531168463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> by error message you mean type level error? or is there some backdoor at meta-level that I can just halt the program in case of non-exhaustion?</p>",
        "id": 129373623,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531170104
    },
    {
        "content": "<p>because I'm pretty sure the rest case is not going to happen(and if it happens, that means problem in my meta-code).</p>",
        "id": 129373691,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531170158
    },
    {
        "content": "<p>If you're in <code>tactic</code>, you can use <code>fail my_error_message</code> to report the error ... it might actually a good enough reason to write code in <code>tactic</code></p>",
        "id": 129373788,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531170251
    },
    {
        "content": "<p>But that's not a backdoor, you can write trusted code in a similar way (but with different monads than <code>tactic</code> because <code>tactic</code> is <code>meta</code>)</p>",
        "id": 129373814,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531170304
    },
    {
        "content": "<p>hmm, what about a meta-program that simply returns a proof? </p>\n<div class=\"codehilite\"><pre><span></span>prog : hint -&gt; pexpr\n</pre></div>",
        "id": 129373829,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531170334
    },
    {
        "content": "<p>because the generation of the proof doesn't depends on inspection of the prover's environment, but only on the hint.</p>",
        "id": 129373904,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531170400
    },
    {
        "content": "<p>You can return a default value like <code> ``(Type) </code></p>",
        "id": 129373988,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531170510
    },
    {
        "content": "<p>There is also <code>undefined_core \"my error message\"</code></p>",
        "id": 129374000,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531170533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I think that's what I wanted.</p>",
        "id": 129374011,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531170552
    }
]