[
    {
        "content": "<p>What are the weakest assumptions on a morphism <code>e</code> for which we can prove for elements of complete lattices<br>\n<code>lemma is_compact_element_iff (a : α) : is_compact_element (e a) ↔ is_compact_element a :=</code><br>\nI have it for <code>order_iso</code>'s e, but really I would like it for some sort of order embedding (or maybe an injective complete lattice hom or something like that). <br>\nMy actual use case is the inclusion of a sublattice into a bigger one, where the sublattice is obtained by truncating to all elements below some give element, so as long as that works I'm happy.<br>\nMaybe this would also take the form of assumptions on partial inverses <code>f</code> and <code>e</code>, as long as it works I don't mind that either!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.compactly_generated</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.hom.complete_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complete_lattice</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">order_iso.image_symm_eq_preimage</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">M₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.symm</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.symm.image_eq_preimage</span><span class=\"o\">,</span> <span class=\"n\">e.symm_symm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">order_iso.map_is_compact_element</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_compact_element</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">is_compact_element</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_compact_element</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">hT</span><span class=\"o\">,</span> <span class=\"n\">hTle</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">T.image</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">e</span> <span class=\"n\">at</span> <span class=\"n\">hTle</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hTle</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sup_image</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_eq_Sup_image</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_id_eq_Sup</span><span class=\"o\">,</span>\n      <span class=\"n\">order_iso.map_Sup</span><span class=\"o\">,</span> <span class=\"n\">Sup_image</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply_fun</span> <span class=\"n\">e.symm</span> <span class=\"n\">at</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">order_iso.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">order_iso.map_Sup</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">order_iso.image_symm_eq_preimage</span><span class=\"o\">,</span> <span class=\"n\">Sup_image</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">order_iso.is_compact_element_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_compact_element</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">is_compact_element</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">e.symm_apply_apply</span> <span class=\"n\">a</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">e.symm.map_is_compact_element</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">e.map_is_compact_element</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 305392693,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666368523
    },
    {
        "content": "<p>What about Galois insertions? (I have not looked at any of the statements, this is just what jumped out at me from your description.)</p>",
        "id": 305470585,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1666401751
    }
]