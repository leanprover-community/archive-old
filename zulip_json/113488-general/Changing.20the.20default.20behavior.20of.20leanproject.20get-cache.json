[
    {
        "content": "<p>Right now, <code>leanproject get-cache</code> has a somewhat underused <code>--fallback</code> argument for when no exact cache is available but when caches might be available for parent commits. The options available are:</p>\n<ul>\n<li>\n<p><code>--fallback=none</code>: do not even detect the presence of inexact caches<br>\n<strong>use-case:</strong> to avoid unnecessary network access</p>\n</li>\n<li>\n<p><code>--fallback=show</code> (default): detect but do not download inexact caches<br>\n<strong>use-case:</strong> to not surprise users by succeeding but providing an incomplete cache, but also inform them that they can recover</p>\n</li>\n<li>\n<p><code>--fallback=download-first</code>: download and apply the first available cache, following first git parents<br>\n<strong>use-case:</strong> any cache is better than no cache. This is better than <code>get-cache --rev origin/master</code>, because it doesn't pick up an incompatible cache if <code>origin/master</code> is ahead of <code>$(git merge-base HEAD origin/master)</code></p>\n</li>\n<li>\n<p><code>--fallback=download-all</code>: like <code>download-first</code>, but also download caches found by following non-first git parents<br>\n<strong>use-case:</strong> you just merged master after doing a big refactor, and don't know whether the master cache or your branches old cache will be better. Download both upfront so that you can try switching with <code>--rev</code> later, even if offline.</p>\n</li>\n</ul>\n<p>In probably 90% of use-cases <code>--fallback=download-first</code> is the right thing to do, but it's also long to type so I suspect it's severely underused.</p>\n<p>Should we change this to be the default, or at least to have a shorter spelling?</p>",
        "id": 288137688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656664230
    },
    {
        "content": "<p>/poll Do you use the <code>--fallback</code> option?</p>\n<ul>\n<li>Yes, with <code>--fallback=download-first</code></li>\n<li>No, I use <code>get-cache --rev origin/master</code></li>\n<li>No, I use <code>git switch master; get-cache; git switch my-branch</code></li>\n<li>No, I just wait for github to have the latest cache</li>\n<li>No, I didn't know it existed!</li>\n</ul>",
        "id": 288137952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656664383
    },
    {
        "content": "<p>(before deciding whether to change anything, let's find out how it's currently used!)</p>",
        "id": 288138600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656664758
    },
    {
        "content": "<p>Eric, I am very grateful that you keep reminding me (and the community!) of all these commands!  My strategy is to use <code>leanproject get-cache</code> and then run <code>leanproject get-cache --rev &lt;commit found with earlier get-cache&gt;</code>: a very inefficient way of doing <code>leanproject get-cache --fallback=download-first</code>!</p>\n<p>If the name does not change, I will probably create an alias</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">alias</span> <span class=\"nv\">firstcache</span><span class=\"o\">=</span><span class=\"s1\">'leanproject get-cache --fallback=download-first'</span>\n</code></pre></div>",
        "id": 288148247,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656670068
    },
    {
        "content": "<p>I can't ever remember the options so I just type <code>leanproject get-cache</code> and then if it says \"this doesn't work, try this instead\" I tend to just cut and paste what it suggests. I think that in practice I am usually in one of two situations: (1) I'm editing a leaf file, so I just want to merge master, get master oleans and then continue; (2) I've edited data.nat.basic or whatever, so I'm probably doomed but perhaps the best bet is the most recent oleans available for my branch.</p>",
        "id": 288149688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656670917
    },
    {
        "content": "<p>Regarding not remember the options, if you put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eval</span> <span class=\"s2\">\"$(_LEANPROJECT_COMPLETE=bash_source leanproject)\"</span>\n</code></pre></div>\n<p>in your <code>~/.bashrc</code>, then tab-completion will remind you of the options</p>",
        "id": 288151678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656672204
    },
    {
        "content": "<p>I look at github, then use explicit <code>--rev</code></p>",
        "id": 288218550,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656706000
    },
    {
        "content": "<p>I always use download-all...</p>",
        "id": 288226935,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656711648
    },
    {
        "content": "<p>Having a user configurable default would be great I think.</p>",
        "id": 288226971,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656711683
    }
]