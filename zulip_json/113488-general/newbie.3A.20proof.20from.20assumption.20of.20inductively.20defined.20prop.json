[
    {
        "content": "<p>Given a typical definition of an evenness property ...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">ev</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_0</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_SS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ev</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Here's a script that proves that 7 isn't even:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">ev</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">assume</span> <span class=\"n\">ev7</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">ev7</span> <span class=\"k\">with</span> <span class=\"n\">ev5</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">ev7_a</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">ev7_a_a</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">ev7_a_a_a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>To prove that 8 is even, I can use repeat { apply ev_SS }.</p>\n<p>What is a stylistically nicer way to prove that 7 isn't even.</p>",
        "id": 135988274,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1539798070
    },
    {
        "content": "<p>You could move this thread into the <code>new members</code> stream. And if you're posting code you can triple quote it: write <code> ```lean </code> at the beginning and <code> ``` </code> at the end. For your question: you could prove <code>ev n</code> was decidable, and then <code>dec_trivial</code> would decide it.</p>",
        "id": 135989820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539799497
    },
    {
        "content": "<p>I think this is something that can be improved in Lean 4, when reflection runs a bit faster. <a href=\"https://people.csail.mit.edu/jgross/personal-website/papers/2018-reification-by-parametricity-itp-camera-ready.pdf\" target=\"_blank\" title=\"https://people.csail.mit.edu/jgross/personal-website/papers/2018-reification-by-parametricity-itp-camera-ready.pdf\">https://people.csail.mit.edu/jgross/personal-website/papers/2018-reification-by-parametricity-itp-camera-ready.pdf</a></p>",
        "id": 135990543,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1539800036
    },
    {
        "content": "<p>the paper's first few sections go through several ways of implementing an evenness checker</p>",
        "id": 135990685,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1539800135
    },
    {
        "content": "<p>got it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">decidable_ev</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">ev_0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ev1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">ev1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">decidable_ev</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">ev_SS_iff</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">ev</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 135992402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539801679
    },
    {
        "content": "<p>dammit I failed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_0</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_SS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ev</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ev</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ev_SS_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">ev</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- cases way</span>\n    <span class=\"n\">intro</span> <span class=\"n\">evSS</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">evSS</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- easy way</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ev_SS</span> <span class=\"n\">n</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ev</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">decidable_ev</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">ev_0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ev1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">ev1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">ev_SS_iff</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">decidable_ev</span> <span class=\"n\">n</span> <span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">exact tactic failed, type mismatch, given expression has type</span>\n<span class=\"cm\">  true</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  as_true (ev 2)</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ as_true (ev 2)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 135992403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539801679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">ev_SS_iff</span><span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ev1</span><span class=\"o\">,</span><span class=\"n\">cases</span> <span class=\"n\">ev1</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>is an answer (using the lemma I proved in the previous post).</p>",
        "id": 135992404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539801679
    },
    {
        "content": "<p>Sorry, had dodgy internet and posts have appeared in random order</p>",
        "id": 135992525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539801801
    },
    {
        "content": "<p>I'm guessing <code>dec_trivial</code> failed because you didn't make decidable an instance.</p>",
        "id": 135992534,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539801811
    },
    {
        "content": "<p>My rw proof doesn't work for some reason</p>",
        "id": 135992607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539801861
    },
    {
        "content": "<p>I think the problem is rewriting with an <code>iff</code> invokes propext which then cannot reduce?</p>",
        "id": 135992638,
        "sender_full_name": "Scott Olson",
        "timestamp": 1539801907
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"c1\">-- decidable.rec (λ (h : ev 2 → false), ff) (λ (h : ev 2), tt) (eq.rec (is_true ev_0) _)</span>\n</pre></div>",
        "id": 135992659,
        "sender_full_name": "Scott Olson",
        "timestamp": 1539801936
    },
    {
        "content": "<p>If you <code>set_option pp.proofs true</code> the innocent little <code>_</code> there is <code>(propext &lt;large iff structure expression&gt;)</code></p>",
        "id": 135992755,
        "sender_full_name": "Scott Olson",
        "timestamp": 1539802013
    },
    {
        "content": "<p>Nice!</p>",
        "id": 135992771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539802034
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_0</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_SS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ev</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">ev</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">ev</span><span class=\"bp\">.</span><span class=\"n\">ev_0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">H</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">ev</span><span class=\"bp\">.</span><span class=\"n\">decidable_pred</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">is_true</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"o\">(</span><span class=\"n\">ev</span><span class=\"bp\">.</span><span class=\"n\">ev_SS</span> <span class=\"n\">n</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">is_false</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"kn\">end</span>\n</pre></div>",
        "id": 135992968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539802253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> now that we've established that \"computable\" functions aren't really computable unless you avoid <code>propext</code> and <code>quot.sound</code>, are you going to start avoiding those axioms as well?</p>",
        "id": 135993101,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539802414
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_0</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_SS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ev</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ev_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">ev</span><span class=\"bp\">.</span><span class=\"n\">ev_SS</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">decidable_ev</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">ev</span><span class=\"bp\">.</span><span class=\"n\">ev_0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ev1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">ev1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">decidable_ev</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ev_iff</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135993158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539802465
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_0</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">ev_SS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ev</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ev_b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ev_b</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ev_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ev_b</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">ev</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ev</span><span class=\"bp\">.</span><span class=\"n\">ev_0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">ev1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">ev1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">ev1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">ev1</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">evss</span><span class=\"o\">,</span> <span class=\"n\">ev</span><span class=\"bp\">.</span><span class=\"n\">ev_SS</span> <span class=\"n\">n</span> <span class=\"o\">((</span><span class=\"n\">ev_iff</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">evss</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">evss</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">evss</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"n\">evss</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ev_iff</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">evss</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">ev</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"n\">infer_instance</span> <span class=\"o\">(</span><span class=\"n\">ev_iff</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135993447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539802760
    },
    {
        "content": "<p>You should use <code>bodd</code> instead, it has an efficient implementation in VM and a not stupid implementation in kernel</p>",
        "id": 135998146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539807614
    }
]