[
    {
        "content": "<p>Does anyone know how to use strong induction on a term that does not appear in the goal? For example, given <code>variable {P : list ℕ → Prop}</code>, I want to prove that <code>∀ (l : list ℕ), P l</code>. Here are some failed attempts:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">needs_induction</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"c1\">-- failed to find expression in the target</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">needs_induction</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- type mismatch</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">needs_induction_hack</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">n_eq_length</span><span class=\"o\">,</span> <span class=\"c1\">-- l is not generalised in IH</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">needs_induction_fix</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">needs_induction_hack</span> <span class=\"n\">l</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 174781643,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567512583
    },
    {
        "content": "<p>One way is to prove <code>forall n l (h : l.length = n), P l</code></p>",
        "id": 174782894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567513748
    },
    {
        "content": "<p>Then apply it to <code>_ l rfl</code></p>",
        "id": 174782942,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567513787
    },
    {
        "content": "<p>You can do this in tactic mode using <code>generalize e : l.length = n, induction n generalizing l</code></p>",
        "id": 174783013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567513819
    },
    {
        "content": "<p>You can also use the equation compiler or <code>well_founded.fix</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">needs_induction</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"bp\">⟩</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">needs_induction₂</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix</span> <span class=\"o\">(</span><span class=\"n\">measure_wf</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">l</span>\n</pre></div>",
        "id": 174783150,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567513950
    },
    {
        "content": "<p>Cool, thank you all! <code>well_founded.fix</code> is the thing I was looking for - the trick by Mario cannot be done with strong induction, or am I wrong?</p>",
        "id": 174784139,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567514756
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">needs_induction</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"kn\">using</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">generalizing</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 174784401,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567514905
    },
    {
        "content": "<p>That seems pretty hard to figure out. Is this documented somewhere? Can you name the inductions variables and assumptions?</p>",
        "id": 174786627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567516532
    },
    {
        "content": "<p>yes, in the usual way (<code>with</code>)</p>",
        "id": 174786867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567516691
    },
    {
        "content": "<p>I couldn't get it to work</p>",
        "id": 174786887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567516706
    },
    {
        "content": "<p>I don't use the <code>using</code> clause very often because it usually fails</p>",
        "id": 174786904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567516721
    },
    {
        "content": "<p>there is an order to the clauses, try reordering them if there is a parse error</p>",
        "id": 174786933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567516746
    },
    {
        "content": "<p>Indeed, I manage to find the correct order by looking at the tactic definition...</p>",
        "id": 174786956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567516770
    },
    {
        "content": "<p>that works too</p>",
        "id": 174786973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567516783
    },
    {
        "content": "<p>For the record, the order is \"using\" then \"with\" then \"generalizing\"</p>",
        "id": 174787041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567516812
    },
    {
        "content": "<p>We need to invent a mnemonic</p>",
        "id": 174787055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567516829
    },
    {
        "content": "<p>U Won't Get it right</p>",
        "id": 174787380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567517061
    },
    {
        "content": "<p>It's tempting to say we need a tactic to do that (and the obvious beta reduction in the induction hypothesis), but it's not so easy to see what would be the general pattern...</p>",
        "id": 174787672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567517264
    },
    {
        "content": "<p>There is an equality hypothesis in <code>cases</code>, but it is deliberately omitted in <code>induction</code> because it's usually the wrong thing</p>",
        "id": 174788450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567517777
    },
    {
        "content": "<p>Are you replying to something here?</p>",
        "id": 174788530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567517836
    }
]