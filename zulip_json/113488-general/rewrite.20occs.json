[
    {
        "content": "<p>Can anyone help me understand why the 2nd example in the following doesn't work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">baz</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">occs</span><span class=\"o\">:=</span><span class=\"n\">occurrences</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]},</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">baz</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">occs</span><span class=\"o\">:=</span><span class=\"n\">occurrences</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 123546271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520716000
    },
    {
        "content": "<p>I have been reading <code>replace_fn.cpp</code> and <code>kabstract.cpp</code>, to no avail: my understanding of what is going on there suggests the second example should still work.</p>",
        "id": 123546276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520716041
    },
    {
        "content": "<p>A related confusion is why in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">baz</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>the goal has become <code>[2, 1, 2] = [1, 2, 2]</code>, and not <code>[2, 1, 2] = [2, 2, 2]</code>. That is, why did rewrite give up on the rhs?</p>",
        "id": 123546372,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520716255
    },
    {
        "content": "<p><code>kabstract</code> does not backtrack from unification: once <code>l</code> has been assigned <code>[1, 2]</code>, it does not consider other values for it</p>",
        "id": 123546557,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520716739
    },
    {
        "content": "<p>That is, it only finds occurrences of the same instantiation of the lhs</p>",
        "id": 123546564,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520716792
    },
    {
        "content": "<p>(Don't ask me why :) )</p>",
        "id": 123546609,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520716850
    },
    {
        "content": "<p>oh...</p>",
        "id": 123546657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520716965
    },
    {
        "content": "<p>I see, that <code>ctx.unify</code> call in <code>kabstract</code> is saving information about things it has seen before.</p>",
        "id": 123546664,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520717012
    },
    {
        "content": "<p>It hadn't occurred to me that there were side effects there.</p>",
        "id": 123546667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520717030
    },
    {
        "content": "<p>That sucks (for my purposes)...</p>",
        "id": 123546697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520717042
    },
    {
        "content": "<p>So... if I really really wanted be be able to generate a list of all the rewrites of some expression <code>e</code> by some rule <code>r</code> (where we just rewrite in one place), is there any hope?</p>",
        "id": 123546756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520717164
    },
    {
        "content": "<p>It seems that just calling <code>rw [r] at e {occs := occurrences.pos n}</code> and gradually increasing <code>n</code> until it fails is doomed, because of this \"feature\" of <code>kabstract</code>.</p>",
        "id": 123546763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520717222
    },
    {
        "content": "<p>if you want to hack a solution together, you might have to copy / paste the implementation of <code>rw</code> and reimplement <code>kabstract</code>. I think the key is to undo the assignment of meta variable. One way of to that is to traverse your expression and create new meta variables to replace the ones that you find.</p>",
        "id": 123547082,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520717911
    },
    {
        "content": "<p>Yes. It just won't be very fast.</p>",
        "id": 123547088,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520717932
    },
    {
        "content": "<p>I assume with the new focus on Lean 4, that might be the one way to get the fixed tactic sooner than later.</p>",
        "id": 123547146,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520718023
    },
    {
        "content": "<p>I see: reimplement <code>kabstract</code> in Lean?</p>",
        "id": 123547154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718082
    },
    {
        "content": "<p>I was just trying to find the definition of <code>type_context_old</code>, and see if there was any hope of hacking on an extra option that would change this behaviour. But I agree it's exceedingly unlikely I could propose such a change.</p>",
        "id": 123547198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718135
    },
    {
        "content": "<p>yeah pretty much. Unless <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> agrees that the current semantics is wrong and is willing to fix it for you</p>",
        "id": 123547201,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520718168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ? :-)</p>",
        "id": 123547207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718189
    },
    {
        "content": "<p>It's been that way since Lean 2, where it was even documented afair :)</p>",
        "id": 123547208,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520718198
    },
    {
        "content": "<p>Okay!</p>",
        "id": 123547209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718205
    },
    {
        "content": "<p>Looks like I will think about a really slow version of kabstract!</p>",
        "id": 123547210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718236
    },
    {
        "content": "<p>(Context here is that I'm otherwise really happy with my <code>rewrite_search</code> tactic, based on greedily minimising edit distance. I have \"real\" examples where it successfully finds long (~10) chains of rewrites that complete a proof. Unfortunately sometimes it mysteriously fails, and this seems to be the issue.)</p>",
        "id": 123547259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718307
    },
    {
        "content": "<p>It's not even clear to me what a different <code>kabstract</code> would look like. Would it introduce <code>n</code> lambdas and return <code>n</code> instantiated copies of <code>e</code>?</p>",
        "id": 123547262,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520718360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> I suppose repeatedly rewriting will not solve your problem? :)</p>",
        "id": 123547305,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520718400
    },
    {
        "content": "<p>No -- I have lots of examples where the rewrite rule needs to be applied \"inside\" a bigger expression where the rewrite rule also applies.</p>",
        "id": 123547311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718444
    },
    {
        "content": "<p>But after you do the outer rewrite the inner rewrite is no longer available.</p>",
        "id": 123547312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718458
    },
    {
        "content": "<p>(<code>rewrite_search</code> is already trying repeated rewrites itself: I only discovered this problem because it was mysteriously failing.)</p>",
        "id": 123547354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718507
    },
    {
        "content": "<p>Scott -- has Mario made any suggestions on how to deal with your issues?</p>",
        "id": 123547355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520718514
    },
    {
        "content": "<p>Kevin -- I only raised this about 5 minutes ago, perhaps Mario is sleeping. :-)</p>",
        "id": 123547357,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, I guess I was thinking not actually to reimplement <code>kabstract</code>, but reimplement all of <code>rewrite_core</code>.</p>",
        "id": 123547414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718666
    },
    {
        "content": "<p>(Reimplementing <code>kabstract</code> in Lean would not be helpful, because no tactics actually call it from Lean: only things in c++.)</p>",
        "id": 123547416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718699
    },
    {
        "content": "<p>I'm not sure how you want to solve your issue with the current kabstract</p>",
        "id": 123547458,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520718780
    },
    {
        "content": "<p>Or rather, to write something called <code>all_rewrites</code>, that takes an expr, and a list of lemmas, and returns <code>list (expr \\times expr)</code>, where the pairs are the result of using the lemma in one place, and the proof.</p>",
        "id": 123547464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718816
    },
    {
        "content": "<p>It would work by recursively going down into the expr, and repeatedly calling unify ... oh, I see your point.</p>",
        "id": 123547505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718861
    },
    {
        "content": "<p>Those calls to unify are _also_ going to be cached. :-(</p>",
        "id": 123547509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718875
    },
    {
        "content": "<p>This is terrible. :-)</p>",
        "id": 123547511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718884
    },
    {
        "content": "<p>Well, not if you create new mvars like Simon suggested</p>",
        "id": 123547518,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520718917
    },
    {
        "content": "<p>I see; after every time you successfully find a match, you throw out the mvar you were passing to unify and make a new one.</p>",
        "id": 123547524,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718953
    },
    {
        "content": "<p>(Thanks, Simon, sorry I was slow to understand exactly what you meant.)</p>",
        "id": 123547566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520718994
    },
    {
        "content": "<p>No worries</p>",
        "id": 123547580,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520719061
    },
    {
        "content": "<blockquote>\n<p>Kevin -- I only raised this about 5 minutes ago, perhaps Mario is sleeping. :-)</p>\n</blockquote>\n<p>Oh -- I knew that you had been discussing with Mario about what looked like a major refactoring job on the category theory library and I was just kind of assumed this might be something to do with the refactoring</p>",
        "id": 123547635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520719156
    },
    {
        "content": "<p>I believe in rewrite, when you use <code>âˆ€ x, f x = g x</code> as your rewrite rule, you generate one mvar to instantiate x and you start matching. What you can do instead is create a unique local constant to instantiate x with (or as many as you have bound variable) and you create a table mapping those constants to mvars every time you attempt a match</p>",
        "id": 123547638,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520719194
    },
    {
        "content": "<p>Btw, it might be easier to build something on top of <code>tactic.ext_simplify_core</code>. You basically get a very configurable term DFS where you can return subterm equality proofs pre or post visit and the tactic takes care of composing them into the complete proof.</p>",
        "id": 123547691,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520719255
    },
    {
        "content": "<p>Hmm... okay, on the 3rd reading I still don't understand that. :-) (Simon's comment about local constants.)</p>",
        "id": 123547692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520719261
    },
    {
        "content": "<p>I don't have any good suggestions for your rewrite issue. One possibility is to use <code>conv</code> or <code>ext_simplify_core</code> to recurse into all subterms and try <code>rw</code> on each of them</p>",
        "id": 123547704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520719286
    },
    {
        "content": "<p>How do I do a rw in conv, by the way?</p>",
        "id": 123547744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520719352
    },
    {
        "content": "<p>I don't actually know how <code>conv</code> is implemented under the hood: is it using <code>ext_simplify_core</code> anyway?</p>",
        "id": 123547745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520719363
    },
    {
        "content": "<p>I don't mean a rw, I mean I want to replace something with something defeq</p>",
        "id": 123547746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520719376
    },
    {
        "content": "<p>do I have to use whnf?</p>",
        "id": 123547750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520719386
    },
    {
        "content": "<p>I really like these ideas. It hadn't occurred to me that I could think of <code>conv</code> as letting me recurse into all subterms in tactic mode.</p>",
        "id": 123547756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520719415
    },
    {
        "content": "<p>I only just learnt how it worked really, it's all because of this push by Patrick to get some informal docs written.</p>",
        "id": 123547798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520719448
    },
    {
        "content": "<p>I find them really enlightening</p>",
        "id": 123547799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520719455
    },
    {
        "content": "<p>Is there any hope that I could build a pattern corresponding to the lhs of my rewrite rule, and pass that to <code>conv</code>, and thereby only visit the places where <code>rw</code> would work anyway? Or would this run into exactly the same unification caching problem?</p>",
        "id": 123547800,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520719456
    },
    {
        "content": "<p>Okay, answering my own question: no, you can't pass patterns to conv, it does indeed run into this same problem.</p>",
        "id": 123547916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520719707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, here are two examples of using <code>rw</code> inside <code>conv</code>, solving the problem I started this thread with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">baz</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">baz</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 123548005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520719913
    },
    {
        "content": "<p>I think in the end <code>ext_simplify_core</code> is going to be the right solution. Since I want to build up a list of all the possible rewrites, I think it makes sense to build it up during the run of <code>ext_simplify_core</code>, rather than making multiple calls into conv, each one looking at a different piece of the expression.</p>",
        "id": 123548103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520720082
    },
    {
        "content": "<p>(Please tell me if that doesn't make sense!)</p>",
        "id": 123548109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520720102
    },
    {
        "content": "<p>Thank you, everyone, for the extremely helpful suggestions, as usual!</p>",
        "id": 123548158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520720185
    },
    {
        "content": "<p>Thanks for the interesting challenges <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 123548204,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520720307
    },
    {
        "content": "<p>I don't even understand what this thread is about. What is ematch? Did someone write some informal docs yet?</p>",
        "id": 123548272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520720505
    },
    {
        "content": "<p>I really find life easier with docs. Then I have to ask fewer questions.</p>",
        "id": 123548304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520720522
    },
    {
        "content": "<p>I don't think the ematch attribute is relevant to simon's example</p>",
        "id": 123548319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520720574
    },
    {
        "content": "<p>ematch: you can try reading Leo's paper.... <a href=\"https://link.springer.com/chapter/10.1007/978-3-540-73595-3_13\" target=\"_blank\" title=\"https://link.springer.com/chapter/10.1007/978-3-540-73595-3_13\">https://link.springer.com/chapter/10.1007/978-3-540-73595-3_13</a></p>",
        "id": 123548415,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520720860
    },
    {
        "content": "<p>it's a little arcane unless you're really into the theory though</p>",
        "id": 123548456,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520720927
    },
    {
        "content": "<p>aha! something better: <a href=\"http://yices.csl.sri.com/papers/cav2007.pdf\" target=\"_blank\" title=\"http://yices.csl.sri.com/papers/cav2007.pdf\">http://yices.csl.sri.com/papers/cav2007.pdf</a></p>",
        "id": 123548570,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520721218
    },
    {
        "content": "<p>seems the root paper at the bottom of all this is something from the 80s: <a href=\"https://people.eecs.berkeley.edu/~necula/Papers/nelson-thesis.pdf\" target=\"_blank\" title=\"https://people.eecs.berkeley.edu/~necula/Papers/nelson-thesis.pdf\">https://people.eecs.berkeley.edu/~necula/Papers/nelson-thesis.pdf</a></p>",
        "id": 123548609,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520721269
    },
    {
        "content": "<p>that said, i'm not volunteering to read everything, digest it, and then write a simple introduction to ematch :)</p>",
        "id": 123548657,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520721414
    },
    {
        "content": "<p>Oh thanks! I honestly behave like a computer. I looked at what Scott had posted, didn't understand the first word (ematch) and then just crashed and stopped reading (I was trying to get three kids to bed as well as reading chat). I see that this thread is well within my grasp now. Sorry for earlier noise.</p>",
        "id": 123567801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520769161
    },
    {
        "content": "<p>So Scott what are you actually trying to do in the long run here? What is the problem with just writing a tactic which tries every possible rw on some term using some set of terms which are equalities but with metavariables? Is that what you want? Isn't that exactly the sort of thing one can write a tactic for? Or is the point that you want to do it without writing a tactic?</p>",
        "id": 123567891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520769386
    },
    {
        "content": "<p>And a related question. Is Sebastian saying \"there is something written in C++ which doesn't do what you want, but you could write a version in Lean which does do what you want but it would be slow\"? And how does this contrast with Leo's Lean 4 plan -- goal <a href=\"https://github.com/leanprover/lean/issues/1\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1\">#1</a> in fact -- of taking some stuff out of C++ and implementing it in Lean?</p>",
        "id": 123568038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520769817
    },
    {
        "content": "<p>How can this ever be a good idea? I don't understand the ramifications of this idea</p>",
        "id": 123568039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520769840
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 123568138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520770051
    },
    {
        "content": "<p>In Lean 4 it would be fast because you could compile it to C++ that runs as fast as the current kabstract code.</p>",
        "id": 123568224,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520770207
    },
    {
        "content": "<p>How will that work? Will Lean run the definitions of the current file in the VM and at the end compile the whole file to C++ to accelerate the verification of the next files?</p>",
        "id": 123579238,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520796911
    },
    {
        "content": "<blockquote>\n<p>I don't mean a rw, I mean I want to replace something with something defeq</p>\n</blockquote>\n<p>ooh I can use change.</p>",
        "id": 123580122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520798897
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem H3 : 3 + 2 = 1 + 4 := begin\nconv begin\nto_lhs,\nchange 1 + 4,\nend\nend\n</pre></div>",
        "id": 123580123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520798907
    },
    {
        "content": "<p>Great! Do you have a slightly more realistic example?</p>",
        "id": 123580178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799012
    },
    {
        "content": "<p>I did have the other day!</p>",
        "id": 123580181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799021
    },
    {
        "content": "<p>(not necessarily super realistic, like the ones I put in the conv doc)</p>",
        "id": 123580183,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799034
    },
    {
        "content": "<p>I had a goal of the form <code>X=Y</code> but <code>Y</code> had terms in it of the form <code>\\&lt;a,_\\&gt;</code></p>",
        "id": 123580184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799058
    },
    {
        "content": "<p>so I couldn't use show to replace X on LHS with something defeq because cut and paste wouldn't work for RHS. So I used conv and then realised I didn't know how to do show in conv mode and ended proving some auxiliary lemma with rfl and doing a rw. This way is much cooler :-)</p>",
        "id": 123580228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799139
    },
    {
        "content": "<p>I was going to update the conv doc myself but then I realised you owned it rather than mathlib</p>",
        "id": 123580229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799158
    },
    {
        "content": "<p>What?</p>",
        "id": 123580231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799177
    },
    {
        "content": "<p>I don't own anything here</p>",
        "id": 123580236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799196
    },
    {
        "content": "<p>My PR was merged into mathlib</p>",
        "id": 123580237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799202
    },
    {
        "content": "<p>Please feel super free to update it</p>",
        "id": 123580238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799221
    },
    {
        "content": "<p>wait I can't find it anywhere</p>",
        "id": 123580277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799248
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md</a></p>",
        "id": 123580279,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799264
    },
    {
        "content": "<p>or follow links from the main README</p>",
        "id": 123580280,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799274
    },
    {
        "content": "<p>Starting with link \"extra Lean documentation\"</p>",
        "id": 123580282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799294
    },
    {
        "content": "<p>maybe I don't understand git. I thought I just pulled</p>",
        "id": 123580283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799298
    },
    {
        "content": "<p>oh maybe I really don't understand git. I am pulling from my own fork not from mathlib</p>",
        "id": 123580290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799309
    },
    {
        "content": "<p>(because it's no about mathlib)</p>",
        "id": 123580291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799311
    },
    {
        "content": "<p>Do you have a git remote pointing to the main repo?</p>",
        "id": 123580294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799331
    },
    {
        "content": "<p><code>git add remote upstream https://github.com/leanprover/mathlib.git</code></p>",
        "id": 123580295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799351
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ git remote -v\nleanprover  https://github.com/leanprover/mathlib.git (fetch)\nleanprover  https://github.com/leanprover/mathlib.git (push)\norigin  git@github.com:kbuzzard/mathlib.git (fetch)\norigin  git@github.com:kbuzzard/mathlib.git (push)\n</pre></div>",
        "id": 123580296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799355
    },
    {
        "content": "<p>I need to pull harder somehow</p>",
        "id": 123580338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799369
    },
    {
        "content": "<p>I am only pulling from origin</p>",
        "id": 123580342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799379
    },
    {
        "content": "<p>Then <code>git pull leanprover master</code></p>",
        "id": 123580343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799381
    },
    {
        "content": "<p>you called leanprover what is traditionnaly called \"upstream\"</p>",
        "id": 123580344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799397
    },
    {
        "content": "<p>great, I now have extras.</p>",
        "id": 123580347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799408
    },
    {
        "content": "<p>Now <code>git checkout -b docs-conv-change</code></p>",
        "id": 123580358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799451
    },
    {
        "content": "<p>Do your modifications, <code>git commit -a</code>, <code>git push</code>. Then git will complain and tell you what to type instead of <code>git push</code></p>",
        "id": 123580399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799491
    },
    {
        "content": "<p>(with <code>git push set-upstream</code> in it)</p>",
        "id": 123580400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799513
    },
    {
        "content": "<p>why won't it just push to my fork?</p>",
        "id": 123580401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520799515
    },
    {
        "content": "<p>then go to either upstream mathlib or your fork on Github and you'll be invited to open a PR</p>",
        "id": 123580404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799537
    },
    {
        "content": "<p>Because it's a new branch</p>",
        "id": 123580410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799554
    },
    {
        "content": "<p>a branch that is not on github yet</p>",
        "id": 123580411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799562
    },
    {
        "content": "<p>(yeah, the word upstream is used in a slightly different sense in <code>set-upstream</code>)</p>",
        "id": 123580412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520799596
    },
    {
        "content": "<p>git push just pushed to my fork</p>",
        "id": 123580639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520800106
    },
    {
        "content": "<p>yes</p>",
        "id": 123580640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520800118
    },
    {
        "content": "<p>now you can PR</p>",
        "id": 123580642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520800122
    },
    {
        "content": "<p>except that you skipped creating a new branch...</p>",
        "id": 123580648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520800182
    },
    {
        "content": "<p>yeah :-/</p>",
        "id": 123580649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520800188
    },
    {
        "content": "<p>This is bad</p>",
        "id": 123580650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520800189
    },
    {
        "content": "<p>oh :-)</p>",
        "id": 123580651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520800194
    },
    {
        "content": "<p>You can't have several open PR with this non-branching strategy</p>",
        "id": 123580701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520800217
    },
    {
        "content": "<p>I have loads of my own WIPs all with no branch either.</p>",
        "id": 123580702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520800227
    },
    {
        "content": "<p>I will google and sort it out. Let's not spam here.</p>",
        "id": 123580704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520800239
    },
    {
        "content": "<p>Then you can't even PR since it would PR the WIP at the same time</p>",
        "id": 123580712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520800274
    },
    {
        "content": "<p>Hmm. I can't deal with Mario's comments on my docs because travis hasn't finished building.</p>",
        "id": 123597942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520840324
    },
    {
        "content": "<p>I think you can more or less ignore travis builds for a doc change</p>",
        "id": 123598291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520841226
    },
    {
        "content": "<p>Quoting Mario for <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<blockquote>\n<p>Re: PRs, I'm okay with docs of any kind. My recommendation is to try to write them with an authoritative locution style; I will let you know if you say false things. If you don't know something, leave it out, say you don't know in the doc, or ask about it here and then put in whatever you find out.</p>\n</blockquote>",
        "id": 123598331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520841294
    },
    {
        "content": "<p>(Of course, there is no guarantee that your PR won't (apparently) \"break the build\", since our current peculiar setup that pulls from a moving target lean nightly means that if Leo decides to break mathlib at the same time your PR will get the blame.)</p>",
        "id": 123598341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520841345
    },
    {
        "content": "<p>I think you could edit a few sentences to conform to this recommendation</p>",
        "id": 123598348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520841361
    },
    {
        "content": "<p>I tried to respond to Kevin's parentheticals in the PR comments, so hopefully they will be addressed in the next revision</p>",
        "id": 123598385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520841421
    }
]