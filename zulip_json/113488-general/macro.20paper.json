[
    {
        "content": "<p>I don't think it has been explicitly posted here before, so here is the IJCAR 2020 paper about Lean 4's macro system I wrote with <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>: <a href=\"https://arxiv.org/abs/2001.10490\" title=\"https://arxiv.org/abs/2001.10490\">https://arxiv.org/abs/2001.10490</a><br>\nFeel free to ask questions or give feedback for the camera-ready version</p>",
        "id": 192503685,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585734117
    },
    {
        "content": "<p>You are right to post that message, although the paper appears on <a href=\"https://leanprover.github.io/publications/\" title=\"https://leanprover.github.io/publications/\">https://leanprover.github.io/publications/</a> and <a href=\"https://leanprover-community.github.io/links/\" title=\"https://leanprover-community.github.io/links/\">https://leanprover-community.github.io/links/</a>. I have feedback: I implore you to stop using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span> to mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span>.</p>",
        "id": 192507090,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585736064
    },
    {
        "content": "<p>This is sweet!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro</span> <span class=\"s2\">&quot;Σ&quot;</span> <span class=\"s2\">&quot;(&quot;</span> <span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">index</span> <span class=\"s2\">&quot;)&quot;</span> <span class=\"n\">F</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;`</span><span class=\"o\">(</span><span class=\"err\">\\</span><span class=\"n\">big_</span> <span class=\"o\">[</span><span class=\"n\">HasAdd</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"err\">$</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"err\">$</span><span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"c1\">-- end</span>\n\n<span class=\"c1\">-- We can already use`Σ`with the different kinds of index.</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;-</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">≤</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">20</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">≤</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"c1\">-- Define`Π`</span>\n<span class=\"n\">macro</span> <span class=\"s2\">&quot;Π&quot;</span> <span class=\"s2\">&quot;(&quot;</span> <span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">index</span> <span class=\"s2\">&quot;)&quot;</span> <span class=\"n\">F</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;`</span><span class=\"o\">(</span><span class=\"err\">\\</span><span class=\"n\">big_</span> <span class=\"o\">[</span><span class=\"n\">HasMul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">](</span><span class=\"err\">$</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"err\">$</span><span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- The examples above now also work for`Π`</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;-</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">≤</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">20</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">≤</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n</pre></div>",
        "id": 192508959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585737255
    },
    {
        "content": "<p>Yes, we can be grateful they didn't decide to use <code>Σ</code> for products and <code>Π</code> for sums!</p>",
        "id": 192509528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585737641
    },
    {
        "content": "<p>This doesn't cover all the lemmas and things like <code>rw</code> and <code>simp</code> applying in the right situations... notation isn't the only thing needed to make this set up work</p>",
        "id": 192509751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585737780
    },
    {
        "content": "<p>This is a paper about macros, so it seems fair.</p>",
        "id": 192509809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585737822
    },
    {
        "content": "<p>that's true, I just want to remind folks that this isn't the main blocker for such notations in lean 3</p>",
        "id": 192509872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585737859
    }
]