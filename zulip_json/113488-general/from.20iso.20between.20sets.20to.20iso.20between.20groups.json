[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">G4</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_comm_of_G4</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G4</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- Every group of order 4 is commutative -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_comm_of_card_eq_four</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hG4</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How to prove <code>mul_comm_of_card_eq_four</code> using  <code>mul_comm_of_G4</code>?</p>",
        "id": 291001960,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1658909328
    },
    {
        "content": "<p>there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.group\">docs#equiv.group</a></p>",
        "id": 291002329,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658909594
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv_fin\">docs#fintype.equiv_fin</a> should also be helpful.</p>",
        "id": 291002461,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658909677
    },
    {
        "content": "<p>What's the maths proof? It's not enough to say \"these types have the same number of elements\", you need to show that you can match the group identity with the identity etc</p>",
        "id": 291005328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658911713
    },
    {
        "content": "<p>Oh, I guess here because you stated G4 without a specific group structure you don't have that problem</p>",
        "id": 291005399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658911782
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.equiv.transfer_instance</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">G4</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_comm_of_G4</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G4</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- Every group of order 4 is commutative -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_comm_of_card_eq_four</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hG4</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span> <span class=\"n\">G4</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">change</span> <span class=\"n\">G4</span> <span class=\"k\">with</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hG4</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">fintype.equiv_fin</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">grp</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.group</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e.to_fun</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">e.to_fun</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e.to_fun</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">e.to_fun</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_comm_of_G4</span> <span class=\"o\">(</span><span class=\"n\">e.to_fun</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.to_fun</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm sorry that I still cannot finish this proof...</p>",
        "id": 291005878,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1658912107
    },
    {
        "content": "<p>Looks like you've solved the annoying equiv part of the proof at least</p>",
        "id": 291006638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658912569
    },
    {
        "content": "<p>Oh right, there's a missing sorry in that proof</p>",
        "id": 291006790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658912665
    },
    {
        "content": "<p>I haven't solved the equiv part <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 291007155,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1658912890
    },
    {
        "content": "<p>A bit sloppy, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.equiv.transfer_instance</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">G4</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_comm_of_G4</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G4</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- Every group of order 4 is commutative -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_comm_of_card_eq_four</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hG4</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span> <span class=\"n\">G4</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.equiv_fin_of_card_eq</span> <span class=\"n\">hG4</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">e.symm.surjective.forall₂</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">e.injective</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"n\">grp</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.group</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">mul_comm_of_G4</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">equiv.symm_symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">equiv.symm_symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291008790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658913822
    },
    {
        "content": "<p>Ah, this is a bit slicker:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Every group of order 4 is commutative -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_comm_of_card_eq_four</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hG4</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span> <span class=\"n\">G4</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.equiv_fin_of_card_eq</span> <span class=\"n\">hG4</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"n\">grp</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.group</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm.mul_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">fun_like.congr_arg</span> <span class=\"n\">e'</span> <span class=\"o\">(</span><span class=\"n\">mul_comm_of_G4</span> <span class=\"o\">(</span><span class=\"n\">e'.symm</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e'.symm</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_equiv.apply_symm_apply</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.mul_equiv\">docs#equiv.mul_equiv</a> is responsible for most of the cleanup</p>",
        "id": 291009515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658914278
    },
    {
        "content": "<p>I'm a little suspicious that your <code>mul_comm_of_G4</code> doesn't state what you think it states, but I guess you'll find out when you start trying to prove it!</p>",
        "id": 291009570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658914318
    },
    {
        "content": "<p>What are you worried about? It's still true, right?</p>",
        "id": 291017088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658919034
    },
    {
        "content": "<p>I think there are two open PRs now proving that all groups of order p^2 are commutative by the way</p>",
        "id": 291017166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658919101
    },
    {
        "content": "<p>Yes, but it's just as hard as the next lemma, right?</p>",
        "id": 291017192,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658919118
    },
    {
        "content": "<p>Yes!</p>",
        "id": 291017282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658919160
    },
    {
        "content": "<p>Possibly harder than the next lemma, because either you don't unfold G4 in which case it's basically identical, or do you unfold it and now you have <code>1 : fin 4</code> and <code>1 : G4</code> for which equality is undecidable</p>",
        "id": 291018808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658920118
    },
    {
        "content": "<p>Thank you a lot. I've unlocked the answer to the problem since I couldn't solve the first lemma either. <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 291020050,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1658920974
    }
]