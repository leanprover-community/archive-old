[
    {
        "content": "<p>How hard would it be to have a version of <code>calc</code> with delayed proofs? I can write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">calc</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"err\">≤</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"err\">↔</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"err\">≤</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">...</span><span class=\"w\"> </span><span class=\"err\">↔</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">...</span><span class=\"w\"> </span><span class=\"err\">↔</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"err\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and then Lean asks for three proofs but, for teaching purposes, I would like to have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">calc</span> <span class=\"err\">&#39;</span>\n<span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>and then see the same three goals. It's not very important but I'd be interested if this is not too hard (and I can use a non-standard Lean if needed).</p>",
        "id": 182036240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574872936
    },
    {
        "content": "<p>we could make <code>calc'</code> a tactic with a custom parser. This should be doable, but I'm not sure what the best way is</p>\n<ul>\n<li>Make a custom parser which parses a list of expressions separated by <code>...</code>, and with some trickery so that it parses the expressions after the first one correctly</li>\n<li>Make <code>...</code> (or a similar token) a infix notation so that the whole thing can be parsed as a single pre-expression.</li>\n<li>...</li>\n</ul>",
        "id": 182038889,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1574874619
    }
]