[
    {
        "content": "<p>I finished a draft of a talk on automated reasoning and interactive theorem proving, which I will deliver next week. The talk is here:<br>\n<a href=\"http://www.andrew.cmu.edu/user/avigad/Talks/london.pdf\" target=\"_blank\" title=\"http://www.andrew.cmu.edu/user/avigad/Talks/london.pdf\">http://www.andrew.cmu.edu/user/avigad/Talks/london.pdf</a><br>\nAn associated repository is here:<br>\n<a href=\"https://github.com/avigad/arwm\" target=\"_blank\" title=\"https://github.com/avigad/arwm\">https://github.com/avigad/arwm</a><br>\nI am grateful to everyone who has shared their thoughts and experiences.</p>",
        "id": 174592020,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567209756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>  thanks for the announcement.  Will you be delivering a live video that I can join?</p>",
        "id": 174592167,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567209966
    },
    {
        "content": "<p>I don't think the talks at the conference will be recorded or live-streamed. But preparing it was more work that I thought it would be, and I'll be happy to repeat the performance at any time.</p>",
        "id": 174592872,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567211143
    },
    {
        "content": "<p>typo around slide 21: so far Jesse and I only showed that \\neg CH is consistent with set theory (i.e. CH is unprovable from ZFC).</p>",
        "id": 174594697,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567213732
    },
    {
        "content": "<p>Oops, sorry. Thanks for catching that. I'll put a fixed version online tomorrow.</p>",
        "id": 174595013,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567214292
    },
    {
        "content": "<p>we are close to finishing, though---modulo the construction of aleph one, the forcing argument for the consistency of CH is done</p>",
        "id": 174595280,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1567214777
    },
    {
        "content": "<p>Way cool!</p>",
        "id": 174595401,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567215030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> And on the slide before that (p.20) there is an <code>n</code> too much in my name <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 174602106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567227911
    },
    {
        "content": "<p>Tangentially related: <a href=\"https://www.hillelwayne.com/post/theorem-prover-showdown/\" target=\"_blank\" title=\"https://www.hillelwayne.com/post/theorem-prover-showdown/\">https://www.hillelwayne.com/post/theorem-prover-showdown/</a></p>",
        "id": 174603032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567229670
    },
    {
        "content": "<p>Still about people, I guess Scott will be surprised to learn he does \"quantum field<br>\ntheory\", which is a part of physics or mathematical physics. He studies topological quantum field theories, a part of topology very remotely related to physics <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>My description is accurate but surprisingly specific compared to others. If you want to be as vague as what you use for Johan and Kevin you can write \"Differential topology and geometry\"</p>",
        "id": 174609414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567242038
    },
    {
        "content": "<p>(I agree that I don't do quantum field theory. I do regularly go to conferences about topological phases, with physicists. :-)</p>",
        "id": 174611809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567247369
    },
    {
        "content": "<p>Small pedantic grammar typo: “more white squares <em>than</em> black squares”</p>",
        "id": 174624316,
        "sender_full_name": "Jason Rute",
        "timestamp": 1567268835
    },
    {
        "content": "<p>Thanks for all these corrections! They should all be fixed now.</p>",
        "id": 174624951,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567269948
    },
    {
        "content": "<p>More pedantry <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> : on page 54 isn't that a statement of <em>uniform</em> continuity?</p>",
        "id": 174668071,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1567355624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> I think you misspelled <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>'s name on page 20</p>",
        "id": 174676283,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567370273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  Isn't it fixed now? <a href=\"http://www.andrew.cmu.edu/user/avigad/Talks/london.pdf\" target=\"_blank\" title=\"http://www.andrew.cmu.edu/user/avigad/Talks/london.pdf\">http://www.andrew.cmu.edu/user/avigad/Talks/london.pdf</a>.<br>\n<span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span> No, it's regular continuity, since the delta is chosen for a fixed <code>y</code>. (The instance I used is the <code>y</code> from two slides back, and also a particular <code>epsilon</code>.)</p>",
        "id": 174676902,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567371331
    },
    {
        "content": "<p>My bad! I didn't see that someone reported it already</p>",
        "id": 174677265,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567371865
    },
    {
        "content": "<p>Just read the slides; very nice! Just two comments: p. 7: \"can our should\",<br>\np. 56: we've reached the \"Speculation\" part of the recap, but the slide title is \"Conclusions.\"<br>\nI agree that the basic “plumbing” of elaboration, instance search, implicit arguments, etc., including bundling/unbundling, is some of the most important pieces of automation, and it's important that it's fast and predictable. I haven't played with Lean 3 yet, but from what I've gathered from lurking and skimming the discussions here, there's still some ways to go before we (in the ITP community) figure that out, although Lean 2 was already pretty good.</p>",
        "id": 174709317,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1567423305
    },
    {
        "content": "<p>@Ulrik Thanks! I am in London  now, returning home tomorrow. The talk was well received. I'll fix the typo when I get back.</p>",
        "id": 175009846,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567713808
    },
    {
        "content": "<p>I'm really sorry I missed it Jeremy. I'm at MSR visiting Leo -- I also spoke today. Did they video your talk?</p>",
        "id": 175037782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567749320
    },
    {
        "content": "<p>No, it was not recorded, but I didn't say anything that wasn't on the slides. (I <em>did</em> get through most of the slides, though I had to skip one or two.)</p>\n<p>I hope you recognize that everyone here is much more interested in hearing about your visit. Please do send a report when you can find the time.</p>",
        "id": 175154716,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567888824
    },
    {
        "content": "<p>I can report here and now if you like. I learnt far less about stuff like Lean 4 than some of you were probably hoping. I just asked stupid questions: \"When will Lean 4 be ready?\" I asked -- and the answer was \"It's ready already! The repository is public!\". The tactic framework is coming, hopefully within the next month or two; Leo is currently highly motivated to get it done because Selsam needs it for the IMO project.</p>\n<p>Type class inference is really complicated and Leo again actively urges us users to tell him about explicit examples where Lean 3's type class inference is struggling. Someone mentioned <code>mv_polynomial</code> but I've never used that stuff; Leo wants to see some far more specific explicit examples of type class inference or coercions failing rather than us just pointing him to modules with unspecified problems. He is interested in examples of the abstract syntax tree and why Lean 3's algorithms are not working well on it. Let me say this again explicitly. <em>Leo does not have some amazingly clever answer to type class inference and coercions which is guaranteed to solve all of our problems and he is asking for our input in a very precise way here</em>.  He seemed to be genuinely interested in this question -- extending Prolog to this dependent type domain -- as an algorithmic challenge, and I believe he wants to work on it. He does not read the chat though. I showed him Johannes Hoelzl's write-up of the int -&gt; nat timeout thing and he had not seen this before, as far as I know. He wants more stuff like this.</p>\n<p>Things which are probably already known but which I hadn't really realised -- when you run Lean 4 on a Lean file it turns it into a C file. Apparently this is important because Lean can now be compiled instead of interpreted. I am a complete amateur here and version 1 of this post might be a load of old twaddle -- please take with a pinch of salt. Let me try and explain three reasons which I think they tried to explain to me about why this might be important. I think.</p>\n<p>1)  Let's say I'm just doing some simple stuff with the integers, except I want to use the <code>ring</code> tactic a lot. If I import <code>ring</code> then a whole bunch of other stuff gets imported which I don't even need. Apparently now it will be more easy to somehow just run <code>ring</code> independently and just keep the proof term without having to import all the modules which <code>ring</code> imports at all.</p>\n<p>2) <code>constant a : A</code> doesn't work any more. You either supply a proof of existence (<code>constant a : A := &lt;construction of term of type A which will be opaque, classical.some is fine&gt;</code>) or give it some C code which you already checked will produce a term of this type if asked (e.g. a compiled version of the construction which you only had to compile once); you pass the C code in via an attribute.</p>\n<p>3) Computer scientists might want to use Lean to write formally verified code, because its performance is now better in certain situations than Haskell or C++. Here is an example of something that can be done. Computer scientists do not actually need that code is formally proved correct. They just need that it is extremely likely to be correct, because if a machine says it's correct then this is evidence that any actual bugs in the system would be extremely hard to exploit. Computer scientists are apparently not keen on unary addition, they seem to prefer something called <code>gmp.c</code> or something. But Leo is going to let <code>refl</code> have the option that if it runs into <code>nat.add</code> it will just call some arbitrary c code to do the addition. So <code>example: 1000+1000=2000:= by rfl</code> will be instant if you are using some sensible software, and it would also I guess be trivial to write a small c program which you could point addition to and then prove <code>2 + 2 = 5</code> by <code>rfl</code>. Same with <code>nat.mul</code>.</p>\n<p>Perhaps as a consequence of (2), or perhaps this is some unrelated thing -- nothing needs to be meta any more. I don't really understand why. <code>Expr</code> is not meta. <code>meta</code> is now called <code>unsafe</code>. It's very hard to find any Lean code in the kernel which is marked as <code>unsafe</code>. <code>unsafe_cast</code> was one of the few examples.</p>\n<p>Another thing which was stressed to me was that porting mathlib to Lean 4 will be extremely difficult. They have changed the elaborator and loads of the core Lean 3 files<br>\nhave hundreds of errors when you throw them into Lean 4. Porting will be hard work. On the other hand Leo seemed to think that someone like Sebastian would be able to write some sort of import/export functionality which would mean that we could use Lean 3 olean files as imports into Lean 4 files. The technical problem with this is that there are some fundamental things like nat whose internal storage changed between Lean 3 and Lean 4 so there would have to be some hackery to get this working -- to get the terms to be accepted.</p>\n<p>But honestly we spent most of the time I was there talking about how humans do IMO problems.</p>",
        "id": 175156029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567891231
    },
    {
        "content": "<p>Thanks for the report. It sounds like an interesting and fruitful meeting, including the discussion of how humans do IMO problems. Maybe I'll get you to reconstruct some of that one day in person.</p>",
        "id": 175156810,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567892746
    },
    {
        "content": "<p>Do you know if (3) is a thing right this moment in the Lean 4 repository? If so I'd like to start exploring it.</p>",
        "id": 175156854,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1567892786
    },
    {
        "content": "<p>I'm afraid I have no idea.</p>",
        "id": 175156929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567892965
    },
    {
        "content": "<p>(2) is interesting, we were discussing exactly this this morning, in regards to the real numbers (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>)</p>",
        "id": 175157548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567894137
    },
    {
        "content": "<p>I made a repository of examples of type class failures in Lean 3. Most of them depend on using some old commit of mathlib. The respository is <a href=\"https://github.com/ChrisHughes24/type_class\" target=\"_blank\" title=\"https://github.com/ChrisHughes24/type_class\">here</a></p>",
        "id": 175186095,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567951889
    },
    {
        "content": "<blockquote>\n<p>Another thing which was stressed to me was that porting mathlib to Lean 4 will be extremely difficult. They have changed the elaborator and loads of the core Lean 3 files<br>\nhave hundreds of errors when you throw them into Lean 4. Porting will be hard work. On the other hand Leo seemed to think that someone like Sebastian would be able to write some sort of import/export functionality which would mean that we could use Lean 3 olean files as imports into Lean 4 files. The technical problem with this is that there are some fundamental things like nat whose internal storage changed between Lean 3 and Lean 4 so there would have to be some hackery to get this working -- to get the terms to be accepted.</p>\n</blockquote>\n<p>Is this something that we can be working on already? This would be a complete game-changer --- I've been assuming until now that migrating was going to require going over files lines by line, hopefully with some automatic assistance. The prospect of just renaming everything to a <code>.lean3</code> file and being able to import is pretty exciting.</p>",
        "id": 175203921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567984663
    }
]