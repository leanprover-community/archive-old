[
    {
        "content": "<p>I've been thinking about the intersection of a ZFC <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set\">docs#Set</a>. In contrast to the usual <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sInter\">docs#set.sInter</a>, we can't just define <code>sInter Ø = univ</code>, since there's no such thing as a universal ZFC set. I don't think it's desirable to have <code>sInter</code> return a <code>Class</code>, either.</p>",
        "id": 289615713,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657816343
    },
    {
        "content": "<p>We could of course just case on whether the input set is empty, and return some default value if it is, but I think this would lose computability - is that something we care about here?</p>",
        "id": 289615819,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657816401
    },
    {
        "content": "<p>Alternatively, we could have <code>sInter</code> take in an explicit member <code>s</code> of the set <code>t</code>, so that it could be defined as <code>{x ∈ s | ∀ y ∈ t, x ∈ y}</code>. This of course has the annoyance that different choices of this member don't lead to definitionally equal sets.</p>",
        "id": 289615998,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657816482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/ZFC.20intersection/near/289615819\">said</a>:</p>\n<blockquote>\n<p>We could of course just case on whether the input set is empty, and return some default value if it is, but I think this would lose computability - is that something we care about here?</p>\n</blockquote>\n<p>No, we don't care about computability here</p>",
        "id": 289784590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657919926
    },
    {
        "content": "<p>Although, I suspect that you don't actually need noncomputability to write this definition</p>",
        "id": 289784660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657919988
    },
    {
        "content": "<p>ZFC sets are generally \"trivially computable\" in the same way that proofs are</p>",
        "id": 289784728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657920008
    }
]