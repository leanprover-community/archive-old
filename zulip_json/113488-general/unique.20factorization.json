[
    {
        "content": "<p>In lean-3.19.0 we had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">associates.eq_of_prod_eq_prod</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">unique_factorization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">associates.factor_set</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a.prod</span> <span class=\"bp\">=</span> <span class=\"n\">b.prod</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n<p>but now we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">associates.eq_of_prod_eq_prod</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normalization_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">associates.factor_set</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n  <span class=\"n\">a.prod</span> <span class=\"bp\">=</span> <span class=\"n\">b.prod</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n<p>This seems a lot weaker because of that <code>normalization_monoid</code> requirement. Should this be fixed?</p>",
        "id": 212982771,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1602452189
    },
    {
        "content": "<p>The only thing that the entire <code>factor_set</code> section is used for in thhe entirety of <code>mathlib</code> is establishing the <code>gcd_monoid</code> instance, which needs <code>normalization_monoid</code> anyway.</p>",
        "id": 212983005,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602452656
    },
    {
        "content": "<p>Thanks Aaron! I wanted to show that in a PID the ideal generated by <code>x</code> and <code>y</code> is the ideal generated by <code>gcd x y</code>. I was thinking of stating this as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">span_gcd</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">associates.mk</span> <span class=\"o\">(</span><span class=\"n\">submodule.is_principal.generator</span> <span class=\"o\">(</span><span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)))</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">associates.mk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">associates.mk</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n</code></pre></div>\n\n<p>But <code>⊓</code> now requires <code>normalization</code> monoid. Any suggestions on how to proceed?</p>",
        "id": 212985881,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1602457477
    },
    {
        "content": "<p>If you want to prove that statement, then I can see how you want a versatile <code>associates.factor_set</code>.</p>",
        "id": 213081243,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602533477
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 213081296,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602533521
    },
    {
        "content": "<p><code>associates</code> always has a <code>normalization_monoid</code> instance, so you should probably be able to refactor <code>factor_set</code> to just use that</p>",
        "id": 213081570,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602533709
    },
    {
        "content": "<p>In the meantime, I don't think the name of your theorem matches its statement.</p>",
        "id": 213081583,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602533724
    },
    {
        "content": "<p>Wouldn't you just want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">span_gcd</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"n\">ideal.span</span><span class=\"o\">(</span> <span class=\"n\">gcd_monoid.gcd</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n</code></pre></div>\n\n<p>?</p>",
        "id": 213081934,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602533969
    },
    {
        "content": "<p>Technically not every PID is a <code>gcd_monoid</code>. Is refactoring <code>gcd_monoid</code> to not require normalization, and only have all of the equations be true up to associated, still an option? I wouldn't mind giving that a go...</p>",
        "id": 213105803,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1602555926
    }
]