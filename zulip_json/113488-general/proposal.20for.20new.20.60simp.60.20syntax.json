[
    {
        "content": "<p>How about being able to write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n</code></pre></div>\n\n\n<p>which fails unless the resulting goal unifies with the type <code>T</code>? This would allow some flexibility with non-terminal simps. It's possible to arrange this already with <code>suffices</code>, but it takes two lines and some boilerplate.</p>",
        "id": 199294003,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590907383
    },
    {
        "content": "<p>We could also have <code>simp at h : T</code> to indicate the expected type of the new hypothesis.</p>",
        "id": 199294011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590907399
    },
    {
        "content": "<p>This looks the same as <code>simp, change T</code></p>",
        "id": 199294148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590907572
    },
    {
        "content": "<p>I don't think this makes the <code>simp</code> any less brittle though</p>",
        "id": 199294160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590907628
    },
    {
        "content": "<p><code>try { simp; change T }</code>?</p>",
        "id": 199294161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590907633
    },
    {
        "content": "<p>why <code>try</code>?</p>",
        "id": 199294165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590907644
    },
    {
        "content": "<p>Aah, you say that it's enough if the <code>change T</code> fails</p>",
        "id": 199294188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590907674
    },
    {
        "content": "<p>fair enough</p>",
        "id": 199294189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590907678
    },
    {
        "content": "<p>If <code>simp</code> closes the goal, I guess this would also be a <code>simp : T</code> failure</p>",
        "id": 199294231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590907701
    },
    {
        "content": "<p>so I think <code>simp, change T</code> is correct</p>",
        "id": 199294234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590907711
    },
    {
        "content": "<p>except that <code>change T</code> can also do defeq changes, which may or may not be a good idea here, hard to tell</p>",
        "id": 199294241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590907733
    },
    {
        "content": "<p>I think there is a <code>assert_goal</code> tactic, usually used for tests, that does no defeq changes</p>",
        "id": 199294252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590907777
    },
    {
        "content": "<p>Good points: <code>simp, change T</code> is indeed all that I wanted.</p>",
        "id": 199294500,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590908311
    },
    {
        "content": "<p>It's true that this breaks just as often as just a non-terminal <code>simp</code>: the point is that hopefully it's fixable, because even when it's broken you know what state you need to get back to for the rest of the proof to go through.</p>",
        "id": 199294507,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590908354
    },
    {
        "content": "<p>I think <code>suffices : T, simpa</code> is a bit more stable</p>",
        "id": 199294800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590908947
    },
    {
        "content": "<p>The main downside of <code>suffices : T, simpa</code> is that when a new lemma is added to the default <code>simp</code> set, you miss an opportunity to make your proof use it.</p>",
        "id": 199295281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590910045
    },
    {
        "content": "<p>proposal for new <code>simp</code> syntax: don't</p>",
        "id": 199295328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590910194
    },
    {
        "content": "<p>And with <code>simp, change T</code> or <code>simp, guard_target T</code> you (a) see which <code>simp</code> failed, (b) can choose whether to fix it with <code>simp [-new_lemma]</code> or adjust the proof.</p>",
        "id": 199295369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590910224
    },
    {
        "content": "<p>you don't know what <code>new_lemma</code> is necessarily though</p>",
        "id": 199295480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590910510
    },
    {
        "content": "<p>worst case you could <code>squeeze_simp</code> it and then start deleting lemmas until it matches the claim again</p>",
        "id": 199295483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590910546
    },
    {
        "content": "<p>better is just to use <code>simp only</code> so that this doesn't happen</p>",
        "id": 199295525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590910600
    },
    {
        "content": "<p><code>simp only</code> still makes me sad, that us poor humans are writing out (even if it's just point and click these days) irrelevant details. I'll live.</p>",
        "id": 199295632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590910902
    },
    {
        "content": "<p>It's more verbose than it could be, but I think this is what we should be aiming for: a slow but powerful tactic that rewrites itself to a fast but maybe less comprehensible certificate</p>",
        "id": 199295676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590910978
    },
    {
        "content": "<p>It would be even better if the certificate could be out of the source itself, but it needs to be version controlled which makes things tricky</p>",
        "id": 199295684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590911011
    },
    {
        "content": "<p>certificates in an unobtrusive parallel file would be fantastic :-)</p>",
        "id": 199296005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590911684
    },
    {
        "content": "<p>I guess the nolints file is a precedent for this approach</p>",
        "id": 199296010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590911720
    },
    {
        "content": "<p>Here's an architecture that could work without too much in the way of changes to lean: Certificates are kept in some file, indexed by declaration name, like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mythm</span><span class=\"o\">:</span> <span class=\"n\">CERT</span>\n<span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">otherthm</span><span class=\"o\">:</span> <span class=\"n\">CERT2</span>\n</code></pre></div>\n\n\n<p>Then there is a command like <code>load_certificates \"foo.cert\"</code> that will use IO to read the file and create declarations <code>foo.mythm.cert1 : string := \"CERT\"</code> (or whatever the appropriate data structure is for the certificate). Finally, <code>fancy_tactic</code>, when used in <code>foo.mythm</code>, checks if definition <code>foo.mythm.cert1</code> exists, and if so uses the certificate. For this last part I think we need extra support because tactics don't have access to the currently elaborating definition IIUC.</p>",
        "id": 199296156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590912040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/proposal.20for.20new.20.60simp.60.20syntax/near/199295480\">said</a>:</p>\n<blockquote>\n<p>you don't know what <code>new_lemma</code> is necessarily though</p>\n</blockquote>\n<p>If we're talking about code in <code>mathlib</code>, then the one who adds a lemma fixes all compile failures.</p>",
        "id": 199296157,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590912044
    },
    {
        "content": "<p>assuming the change is small enough that it is easy to locate which new lemma is the culprit</p>",
        "id": 199296162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590912078
    },
    {
        "content": "<p>if the code is being rehabilitated, the problem is much worse</p>",
        "id": 199296164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590912099
    },
    {
        "content": "<p>The certificate file could also be a machine generated lean source file, like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mythm</span><span class=\"bp\">.</span><span class=\"n\">cert1</span> <span class=\"o\">:</span> <span class=\"n\">technical</span> <span class=\"kn\">lemma</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">fancy_tactic</span> <span class=\"kn\">using</span> <span class=\"n\">incomprehensible_sequence_of_characters</span>\n</code></pre></div>",
        "id": 199296209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590912237
    },
    {
        "content": "<p>Is this similar to <a href=\"https://github.com/leanprover-community/mathlib/issues/2300\">#2300</a>?</p>",
        "id": 199296537,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590912996
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2300\">#2300</a> is doing something related, but a bit crazy. It is (I think) serialising the proof term generated by each <code>begin ... end</code> block into a file on disk, and the next time the <code>begin ... end</code> block is compiled it intercepts that and attempts to just load the previous term from disk and typecheck it.</p>",
        "id": 199296689,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590913326
    },
    {
        "content": "<p>You could use exprs as the certificate but I'm assuming that particular tactics can do a lot better with smaller certificates, like the lemma list in <code>simp only</code></p>",
        "id": 199296955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590914020
    },
    {
        "content": "<p>The advantage of <code>simp : T</code> over <code>suffices : T, by simpa using this</code> is that when the proof breaks it's easy to fix (by switching back to <code>suffices</code>) but there's also the option to improve the proof.</p>",
        "id": 199297221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590914605
    }
]