[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- {x : n → k | ∀ s ∈ S, s x = 0} -- doesn&#39;t work</span>\n<span class=\"c1\">-- {x : n → k | ∀ s ∈ S, s.eval x = 0} -- also doesn&#39;t work</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- works BUT VARIABLES IN STUPID ORDER!</span>\n</pre></div>",
        "id": 185714666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579105645
    },
    {
        "content": "<p>If s is a polynomial and x is some assignment of the variables, I want to write <code>s(x)</code> to be the evaluation of the polynomial at the assignment of the variables. As does every mathematician. Why am I failing in the above?</p>",
        "id": 185714689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579105664
    },
    {
        "content": "<p><code>eval x</code> is a ring hom. That's why they're in the current order.</p>",
        "id": 185714854,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579105750
    },
    {
        "content": "<p>I don't understand why <code>s.eval x = 0</code> fails. Is this an issue with the elaborator?</p>",
        "id": 185715017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579105824
    },
    {
        "content": "<p>It's because of <code>∀ s ∈ S</code>, I think.</p>",
        "id": 185723920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579110729
    },
    {
        "content": "<p>If you would write <code>∀ f, f ∈ S → f.eval x = 0</code>, I think it would work</p>",
        "id": 185723986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579110768
    },
    {
        "content": "<p>But of course that is ugly</p>",
        "id": 185723996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579110777
    },
    {
        "content": "<p>At least<code>∀ f : mv_polynomial n k, f ∈ S → f.eval x = 0</code> should work</p>",
        "id": 185724067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579110823
    },
    {
        "content": "<blockquote>\n<p>If you would write <code>∀ f, f ∈ S → f.eval x = 0</code>, I think it would work</p>\n</blockquote>\n<p>It doesn't work for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"err\">𝕍</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- {x : n → k | ∀ f, f ∈ S →  f x = 0} -- doesn&#39;t work</span>\n<span class=\"c1\">-- {x : n → k | ∀ f, f ∈ S → f.eval x = 0} -- also doesn&#39;t work</span>\n<span class=\"c1\">-- {x : n → k | ∀ f ∈ S, eval x f = 0} -- works BUT VARIABLES IN STUPID ORDER!</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- works BUT VARIABLES IN STUPID ORDER!</span>\n</pre></div>",
        "id": 185728653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579113183
    },
    {
        "content": "<p>oh yeah, inference with has_mem is super annoying</p>",
        "id": 185732724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579115472
    },
    {
        "content": "<p>When using \"forall in\" so that I can't write the type, I usually do something like this:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 185735148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579116912
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> But it is still 3.1415 miles away from what mathematicians would write...</p>",
        "id": 185735280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579116977
    },
    {
        "content": "<p>Are there examples of <code>has_mem X Y</code> in mathlib where <code>X</code> is not uniquely determined by <code>Y</code>? More precisely, can someone point me to two instances with types <code>has_mem X_1 Y</code> and <code>has_mem X_2 Y</code> such that <code>X_1</code> differs from <code>X_2</code>?</p>",
        "id": 185735901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579117354
    },
    {
        "content": "<p>(The dual case is clear: <code>has_mem X (set X)</code> and <code>has_mem X (finset X)</code>, etc... all exist and are desirable.)</p>",
        "id": 185736009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579117440
    },
    {
        "content": "<p><code>X</code> is an <code>out_param</code> so I think the case you suggest is not supposed to happen, but I never really understood whether <code>out_param</code> behaves like I would expect from Haskell</p>",
        "id": 185736104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579117496
    },
    {
        "content": "<p>Like here we definitely know that <code>S : set (mv_polynomial n k)</code>, so there should be no problem inferring <code>f : mv_polynomial n k</code> and yet here we are</p>",
        "id": 185736156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579117526
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_mem&#39;</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185736308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579117585
    },
    {
        "content": "<p>Also I think it would be better if ∈ was not overloaded at all, but only had type <code>a -&gt; set a -&gt; Prop</code>. The other cases you refer to could be handled using coercions.</p>",
        "id": 185736334,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579117605
    },
    {
        "content": "<p>after all, a set S is exactly determined by its membership predicate so there is no loss of information this way</p>",
        "id": 185736387,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579117642
    },
    {
        "content": "<blockquote>\n<p>Also I think it would be better if ∈ was not overloaded at all, but only had type <code>a -&gt; set a -&gt; Prop</code>. The other cases you refer to could be handled using coercions.</p>\n</blockquote>\n<p>But you run the risk that you have to explicitly tell Lean that you want to coerce...</p>",
        "id": 185736577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579117770
    },
    {
        "content": "<p>Suppose I write <code>∀ f ∈ S</code>, and <code>S : finset X</code>. Then Lean doesn't know the type of <code>f</code> yet. It will want to coerce <code>S</code> to <code>set m_1?</code>, but probably isn't smart enough to figure out that <code>finset X</code> only coerces to <code>set X</code>.</p>",
        "id": 185736718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579117860
    },
    {
        "content": "<p>oh this might be an issue, yes, but isn't that already broken?</p>",
        "id": 185736765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579117892
    },
    {
        "content": "<p>So you end up writing <code>∀ f ∈ (S : set (mv_polynomial k n))</code>, which is what we want to avoid.</p>",
        "id": 185736775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579117901
    },
    {
        "content": "<p>Anyways that's the same as the coercion to function issue which will hopefully be fixed in <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 185736848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579117930
    },
    {
        "content": "<p>Well, not if you allow multiple <code>has_mem</code>s, I think</p>",
        "id": 185736851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579117936
    },
    {
        "content": "<p>What do you think of my <code>has_mem'</code>?</p>",
        "id": 185736873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579117948
    },
    {
        "content": "<p>It's probably broken as well... I dunno</p>",
        "id": 185736899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579117969
    },
    {
        "content": "<p>I think this encoding might get annoying in practice because Lean will naturally synthesize a type like <code>(@set.has_mem a).T</code> and then it will need to be reduced to <code>a</code> and it might not happen automatically in the right places</p>",
        "id": 185737154,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579118031
    },
    {
        "content": "<p>Other than that, I think it would work</p>",
        "id": 185737161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579118036
    },
    {
        "content": "<p>I think the problem with <code>out_param</code> was that it kicks in too late. My version would hopefully kick in at the right time</p>",
        "id": 185737219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579118046
    },
    {
        "content": "<p>Do whatever you want as long as we don't loose sets being members of a filter.</p>",
        "id": 185737464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579118214
    },
    {
        "content": "<p>Patrick, as long as nothing else can be member of a filter, that should be fine.</p>",
        "id": 185737590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579118288
    },
    {
        "content": "<p>I wish we could register lookup tables in the parser and/or elaborator. Where you say: Oh, you've got <code>∀ f ∈ S</code>? Figure out the type of <code>S</code>, and I'll look in the table what the type of <code>f</code> must be.</p>",
        "id": 185737711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579118377
    },
    {
        "content": "<p>But that is a very ad hoc thing to do, I guess</p>",
        "id": 185737808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579118405
    },
    {
        "content": "<p>Isn't it covered by unification hints?</p>",
        "id": 185737832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579118419
    },
    {
        "content": "<p>Je ne sais pas</p>",
        "id": 185737852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579118436
    },
    {
        "content": "<p>I don't know either, I'm only trolling.</p>",
        "id": 185738160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579118613
    }
]