[
    {
        "content": "<p>Does anyone know the behaviour of <code>meta constant expr.replace : expr → (expr → nat → option expr) → expr</code>?</p>",
        "id": 133596936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536473675
    },
    {
        "content": "<p>(I have an expression that has a single <code>mvar</code> somewhere in it; I would like to replace that with an <code>expr.var 0</code>.)</p>",
        "id": 133596945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536473738
    },
    {
        "content": "<p>You could try implementing it as <code>e.replace $ λ e' _, if e'.is_mvar then expr.var 0 else  none</code></p>",
        "id": 133597029,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536473922
    },
    {
        "content": "<p>It might not work if <code>replace</code> does not proceed recursively but your attempt should help us decide what to do next.</p>",
        "id": 133597036,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536473956
    },
    {
        "content": "<p>you should probably use the <code>n</code> variable though</p>",
        "id": 133597037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536473962
    },
    {
        "content": "<p><code>e.replace $ λ e' n, if e'.is_mvar then expr.var n else  none</code></p>",
        "id": 133597038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536473973
    },
    {
        "content": "<p>Ooooooh! Is that what it's for? That's so cool!</p>",
        "id": 133597079,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536474007
    },
    {
        "content": "<p>Neat!</p>",
        "id": 133597174,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536474248
    },
    {
        "content": "<p>Do you guys have an <code>expr.is_mvar</code> that I'm missing?</p>",
        "id": 133597181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536474303
    },
    {
        "content": "<p>no, looks like you will have to roll your own</p>",
        "id": 133597243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536474421
    },
    {
        "content": "<p>I thought it was in <code>mathlib</code></p>",
        "id": 133597254,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536474449
    },
    {
        "content": "<p>Ah! In <code>tactic.basic</code>, there it is called <code>is_meta_var</code></p>",
        "id": 133597260,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536474480
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 133597304,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536474520
    },
    {
        "content": "<p>should we be more regular in the naming there?</p>",
        "id": 133597321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536474583
    },
    {
        "content": "<p>Probably, yes</p>",
        "id": 133597365,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536474610
    },
    {
        "content": "<p>Is there any documentation anywhere on what all the constructors to <code>expr</code> mean?</p>",
        "id": 136182545,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540065203
    },
    {
        "content": "<p>Not that I know of. It would be worth writing. What do you want to know?</p>",
        "id": 136183618,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540067323
    },
    {
        "content": "<p>I would love to have a paragraph on each. I have to re-remember the order of arguments to expr.pi every time I see it.</p>",
        "id": 136186327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1540072683
    },
    {
        "content": "<p>Essentially what Scott's talking about. What each of the arguments to each constructor represents.</p>",
        "id": 136187796,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540075608
    },
    {
        "content": "<p>Didn't Ed Ayers write this at some point? He had a draft of some docs on meta stuff, but I think it was never PR'd.</p>",
        "id": 136187976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1540075930
    },
    {
        "content": "<p>Are <code>expr tt</code>s allowed to contain metavariables?</p>",
        "id": 136199026,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540097314
    },
    {
        "content": "<p>yes</p>",
        "id": 136204211,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540109094
    },
    {
        "content": "<p>as far as I understand, <code>expr tt</code> means that the expression has been typechecked and fully elaborated.</p>",
        "id": 136204262,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540109201
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">inductive</span> <span class=\"n\">expr</span> <span class=\"o\">(</span><span class=\"n\">elaborated</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A bound variable with a de-Bruijn index. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>      <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A type universe: `Sort u` -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">sort</span>     <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">level</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A global constant. These include definitions, constants and inductive type stuff present in the environment as well as hard-coded definitions. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span>    <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">level</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> [WARNING] Do not trust the types for `mvar` and `local_const`,</span>\n<span class=\"cm\">they are sometimes dummy values. Use `tactic.infer_type` instead. -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> An `mvar` is a &#39;hole&#39; yet to be filled in by the elaborator or tactic state. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">mvar</span>        <span class=\"o\">(</span><span class=\"n\">pretty</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A local constant. For example, if our tactic state was `h : P ⊢ Q`, `h` would be a local constant. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">local_const</span> <span class=\"o\">(</span><span class=\"n\">pretty</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bi</span> <span class=\"o\">:</span> <span class=\"n\">binder_info</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Function application. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span>         <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Lambda abstraction. eg ```(λ a : α, x)`` -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span>        <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bi</span> <span class=\"o\">:</span> <span class=\"n\">binder_info</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var_type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Pi type constructor. eg ```(Π a : α, x)`` and ```(α → β)`` -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">pi</span>         <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bi</span> <span class=\"o\">:</span> <span class=\"n\">binder_info</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var_type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> An explicit let binding.-/</span>\n<span class=\"bp\">|</span> <span class=\"n\">elet</span>       <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assignment</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A macro, see the docstring for `macro_def`.</span>\n<span class=\"cm\">  The list of expressions are local constants and metavariables that the macro depends on.</span>\n<span class=\"cm\">  -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">macro</span>       <span class=\"o\">:</span> <span class=\"n\">macro_def</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n</pre></div>",
        "id": 136204263,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540109216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> yeah I should PR it at some point.</p>",
        "id": 136204269,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540109268
    },
    {
        "content": "<p>I build Lean from source with extra docstrings.</p>",
        "id": 136204315,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540109366
    },
    {
        "content": "<p><code>binder_info</code> is only used by the elaborator.</p>",
        "id": 136204675,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540110145
    },
    {
        "content": "<p>Thanks for this.</p>",
        "id": 136219638,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540139071
    },
    {
        "content": "<p>What does <code>tactic.generalize</code> do?</p>",
        "id": 136221625,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540142437
    },
    {
        "content": "<p>If you have <code>⊢ x + 1 ≤ y + 2</code>, <code>generalize ``(y + 2) `z</code> will turn the goal into <code>⊢ x + 1 ≤ z</code></p>",
        "id": 136224003,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540146468
    },
    {
        "content": "<p>Okay thanks.</p>",
        "id": 136224045,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540146527
    },
    {
        "content": "<p>The interactive version offers more options like adding an assumption <code>h : y + 2 = z</code></p>",
        "id": 136224062,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540146581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> An <code>expr tt</code> may not actually have been typechecked, but it is presumed to at least have the structure to be typechecked</p>",
        "id": 136233210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540162224
    },
    {
        "content": "<p>Ok so does <code>expr tt</code> just mean that there are no placeholders?</p>",
        "id": 136254342,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540198686
    },
    {
        "content": "<p>Well, technically yes since \"placeholder\" is the name used for the macro that represents the <code>_</code> syntactical form.  But both <code>expr ff</code> and <code>expr tt</code> can have metavariables.</p>",
        "id": 136254555,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1540198957
    },
    {
        "content": "<p>The big difference between <code>expr ff</code> and <code>expr tt</code> is whether implicit arguments are present.  For example the equality <code>x = x</code> is represented in <code>expr ff</code> as <code>app (app (const `eq _) x) x</code> while in <code>expr tt</code> it is represented as <code>app (app (app (const `eq _) t) x) x</code> (one more argument).</p>",
        "id": 136254645,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1540199073
    },
    {
        "content": "<p>What is the difference between <code>implicit</code> and <code>strict_implicit</code>?</p>",
        "id": 136255803,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540200716
    },
    {
        "content": "<p>For <code>binder_info</code></p>",
        "id": 136255844,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540200727
    },
    {
        "content": "<p><code>default</code> = <code>(x : α)</code>, <code>implicit</code> = <code>{x : α}</code>, <code>strict_implicit</code> = <code>⦃x : α⦄</code>, <code>inst_implicit</code> = <code>[x : α]</code>, I believe <code>aux_decl</code> is used as a tag for the <code>_match</code> hypotheses but I could be completely mistaken.</p>",
        "id": 136256137,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1540201107
    },
    {
        "content": "<p>The difference between <code>{}</code> and <code>⦃⦄</code> is how implicit arguments are treated that are <em>not</em> followed by explicit arguments.  <code>{}</code> arguments are applied eagerly, while <code>⦃⦄</code> arguments are left partially applied:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">⦄</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- foo : ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bar</span> <span class=\"c1\">-- bar : Π ⦃x : ℕ⦄, ℕ</span>\n</pre></div>",
        "id": 136256251,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1540201281
    },
    {
        "content": "<p>In C++ it says that <code>aux_decl</code> is \"used to mark local constants representing recursive functions<br>\n        in recursive equations and <code>match</code> statements.\"</p>",
        "id": 136256815,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1540202151
    },
    {
        "content": "<p><code>aux_decl</code> is used for <code>_match</code>, <code>_fun_match</code>, <code>_let_match</code> and the self reference that appears in recursive pattern matching</p>",
        "id": 136256893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540202258
    },
    {
        "content": "<p>these are not real local constants, but rather trigger recursive compilation when used</p>",
        "id": 136256937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540202290
    },
    {
        "content": "<p>If <code>pexpr</code> and <code>expr</code> are more or less the exact same inductive type how are they different? Is it just because in practice we never define them from constructors ourselves and always use the inbuilt functions which treat <code>pexpr</code> and <code>expr</code> differently even though the type doesn't force them to?</p>",
        "id": 136369830,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540331451
    },
    {
        "content": "<p>As Gabriel said above, the same term is represented differently as an <code>pexpr</code> than as an <code>expr</code>. Moreover, for both structures there are some constants such as <code>expr.mk_sorry</code>, <code>pexpr.mk_placeholder</code> and <code>pexpr.mk_explicit</code> which only exist in one of the two variants, but not the other. These are not represented by the inductive structure. But <code>mk_placeholder</code> and <code>mk_explicit</code> will be used (for example) by the tactic <code>to_expr</code>.</p>",
        "id": 136382261,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540348691
    },
    {
        "content": "<p>Is there an easy way of printing an <code>expr</code> in terms of the constructors of <code>expr</code>?</p>",
        "id": 136660474,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540745539
    },
    {
        "content": "<p><code>expr.to_raw_fmt</code></p>",
        "id": 136661109,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540746420
    },
    {
        "content": "<p>Thanks</p>",
        "id": 136661131,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540746469
    },
    {
        "content": "<p>If I'm writing a tactic and I have <code>e : expr</code>, which is a proof of equality, how would I do <code>rw e at *</code> say, or <code>simp [e] at *</code> as part of a tactic?</p>",
        "id": 137160587,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541346776
    },
    {
        "content": "<p>You can <code>rw</code> another arbitrary <code>expr</code> using <code>rewrite_core</code>. I would have to read the <code>tactic.interactive.rw</code> definition to see how it replaces local hypotheses, too, but that's the idea.</p>\n<p>For <code>simp</code> you need to call <code>mk_simp_set</code> and then add your lemma to it. Then you need to pass that data to the built-in function <code>tactic.simplify</code>.</p>",
        "id": 137178093,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541379327
    },
    {
        "content": "<p>often a cheap way to do these sorts of things is using tactic quotations, e.g. <code> `[simp at *] </code></p>",
        "id": 137181620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541386794
    },
    {
        "content": "<p>I'm guessing you can use antiquotations, and write something like <code> `[simp [%%e] at *]</code>.</p>",
        "id": 137181673,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541386821
    }
]