[
    {
        "content": "<p>Dear All,</p>\n<p>in the process of working on the <code>ordered</code> refactor, I broke <code>linarith</code>... where can I find the lemmas that <code>linarith</code> uses, in order to state them with the correct assumptions?</p>\n<p>Thanks!</p>",
        "id": 240092759,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621881490
    },
    {
        "content": "<p>presumably <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/tactic/linarith\">here</a>, but it'll take a lot of sifting :(</p>",
        "id": 240094073,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621882078
    },
    {
        "content": "<p>Thanks Eric!  I was hoping for something simpler, but I can also try and find out which lemmas changed since the last time <code>linarith</code> worked.<br>\nHowever, Mario was able to find the <code>norm_num</code> lemmas, I think easily, and I was hoping for something similar, if available.  I do not know how Mario did it, though...</p>",
        "id": 240096280,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621882961
    },
    {
        "content": "<p>Mario wrote <code>norm_num</code>.</p>",
        "id": 240096844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621883182
    },
    {
        "content": "<p>Ah, that may be the reason why he knew the lemmas... although, Mario also <strong>knows</strong> lean!  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 240097697,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621883570
    },
    {
        "content": "<p>You can trying asking <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> who wrote linarith</p>",
        "id": 240097750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621883604
    },
    {
        "content": "<p>Ah, thanks Patrick!  Anyway, I am done for the day: thank you all for your input!</p>",
        "id": 240098399,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621883896
    },
    {
        "content": "<p>If you ctrl-f for <code> ` </code> on <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/linarith/preprocessing.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/linarith/preprocessing.lean</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/linarith/verification.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/linarith/verification.lean</a> you'll find the large majority of what linarith uses</p>",
        "id": 240098574,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1621884000
    },
    {
        "content": "<p>Rob, thanks a lot!  Tomorrow I will try it!  I imagine that <code> </code> <code>` </code> is what introduces a mathlib lemma in a tactic, right?</p>",
        "id": 240100491,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621884805
    },
    {
        "content": "<p>The syntax for referring to a lemma by name in a metaprogram is <code>`lemma_name</code>. This isn't the only way to do it but it probably catches all the occurrence in linarith</p>",
        "id": 240113761,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1621891308
    },
    {
        "content": "<p>I have not tested that reformulating these lemmas with the previous hypotheses will fix <code>linarith</code>, but these appear to be most of the <code>linarith</code> lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_neg</span>\n<span class=\"n\">add_neg_of_neg_of_nonpos</span>\n<span class=\"n\">add_neg_of_nonpos_of_neg</span>\n<span class=\"n\">add_nonpos</span>\n<span class=\"n\">eq.symm</span>\n<span class=\"n\">le_of_not_gt</span>\n<span class=\"n\">lt_of_not_ge</span>\n<span class=\"n\">mul_nonneg_of_nonpos_of_nonpos</span>\n<span class=\"n\">mul_pos_of_neg_of_neg</span>\n<span class=\"n\">mul_self_nonneg</span>\n<span class=\"n\">mul_zero_eq</span>\n<span class=\"n\">neg_eq_zero</span>\n<span class=\"n\">neg_neg_of_pos</span>\n<span class=\"n\">neg_nonpos_of_nonneg</span>\n<span class=\"n\">sq_nonneg</span>\n<span class=\"n\">sub_eq_zero_of_eq</span>\n<span class=\"n\">sub_neg_of_lt</span>\n<span class=\"n\">sub_nonpos_of_le</span>\n<span class=\"n\">zero_lt_one</span>\n<span class=\"n\">zero_mul_eq</span>\n</code></pre></div>",
        "id": 240143651,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621919951
    },
    {
        "content": "<p><code>linarith</code> uses <code>ring</code> so you should also include all the <code>ring</code> lemmas</p>",
        "id": 240143739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621920094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/linarith.20lemmas/near/240096280\">said</a>:</p>\n<blockquote>\n<p>However, Mario was able to find the <code>norm_num</code> lemmas, I think easily, and I was hoping for something similar, if available.  I do not know how Mario did it, though...</p>\n</blockquote>\n<p>I did what Rob said: I searched for uses of <code> `lemma</code> or <code> ``lemma</code>, except I ignored the lemmas that were defined in the norm_num file</p>",
        "id": 240143818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621920193
    },
    {
        "content": "<p>Mario, thank you very much!  I will also look for the <code>ring</code> lemmas, then!</p>",
        "id": 240143930,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621920336
    },
    {
        "content": "<p>although I guess since you are working on ordered rings probably nothing <code>ring</code> uses is an issue</p>",
        "id": 240143939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621920357
    },
    {
        "content": "<p>Update: these are the ones that I have actually changed, from the 'linarith` list above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">add_neg_of_neg_of_nonpos</span>\n<span class=\"k\">#print</span> <span class=\"n\">add_nonpos</span>\n<span class=\"k\">#print</span> <span class=\"n\">neg_neg_of_pos</span>\n<span class=\"k\">#print</span> <span class=\"n\">neg_nonpos_of_nonneg</span>\n</code></pre></div>",
        "id": 240143942,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621920360
    },
    {
        "content": "<p>Ah, if ring uses no inequalities, then I should be fine there!</p>",
        "id": 240143989,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1621920387
    }
]