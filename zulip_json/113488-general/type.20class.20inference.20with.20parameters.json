[
    {
        "content": "<p>Is there a way to tell type class inference to \"use the current parameter\"? In the following code, the <code>apply_instance</code> fails, because the argument of type <code>decidable_eq A</code> is a metavariable, and I want Lean to use the parameter.</p>\n<div class=\"codehilite\"><pre><span></span>section\nparameters {A : Type} {h : decidable_eq A}\ndef X := A ⊕ A\ndef decidable_eq_X : decidable_eq X := @sum.decidable_eq _ h _ h\nlocal attribute [instance] decidable_eq_X\nset_option trace.class_instances true\ndef foo : decidable_eq X := by apply_instance\nend\n</pre></div>\n\n\n<p>(note: it is unacceptable in my actual application to let <code>X</code> depend on <code>h</code>)</p>",
        "id": 146970992,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541609023
    },
    {
        "content": "<p>What if you use <code>[ ]</code> around the declaration of <code>h</code>?</p>",
        "id": 146971329,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541609276
    },
    {
        "content": "<p>That works, but in my actual example <code>h</code> is not a type class parameter, but just some extra data to construct a <code>setoid</code>.</p>",
        "id": 146971982,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541609797
    },
    {
        "content": "<p>You could do something like <code>by haveI := h; apply_instance</code>, replacing <code>h</code> with whatever you need it to be.</p>",
        "id": 146972041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541609871
    },
    {
        "content": "<p>(you need <code>mathlib</code> for <code>haveI</code> by the way, and to import <code>tactic</code>)</p>",
        "id": 146972171,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541609976
    },
    {
        "content": "<p>this is a more faithful representation of my actual scenario:</p>\n<div class=\"codehilite\"><pre><span></span>constant some_data (α : Type) : Type\ndefinition foo {α : Type} (h : some_data α) : setoid (α ⊕ α) := sorry\nsection\nparameters {α : Type} (h : some_data α)\ndef X := α ⊕ α\ndef setoid_X : setoid X := foo h\nlocal attribute [instance] setoid_X\nset_option trace.class_instances true\ndef foo : setoid X := by apply_instance\nend\n</pre></div>",
        "id": 146972280,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541610019
    },
    {
        "content": "<p>yes, that works, but is still a little annoying.</p>",
        "id": 146972375,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541610104
    },
    {
        "content": "<p>I only have a problem with <code>quotient.mk</code>, so currently I just have something like <code>def my_quotient.mk := @quotient.mk _ setoid_X</code>, which is also a little annoying.</p>",
        "id": 146972463,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541610156
    },
    {
        "content": "<p>There's been a couple of back-and-forth on the subject. Leo doesn't like to allow instances to be created on the fly but he still granted us a way to do it.</p>",
        "id": 146972512,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541610202
    },
    {
        "content": "<p>Does it work if you replace <code>@quotient.mk _ setoid_X</code> with <code>by haveI := setoid_X; apply quotient.mk</code>?</p>",
        "id": 146972748,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541610388
    },
    {
        "content": "<blockquote>\n<p>There's been a couple of back-and-forth on the subject. Leo doesn't like to allow instances to be created on the fly but he still granted us a way to do it.</p>\n</blockquote>\n<p>Yeah, I know, but I don't want to add instances on the fly, I just want that in that section I have an instance of type <code>setoid X</code>.</p>",
        "id": 146972896,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541610510
    },
    {
        "content": "<p>I see. I mistook your issue. I think the problem is that your instance depend on stuff that can't be inferred. You may have to make <code>some_data</code> a class locally.</p>",
        "id": 146973032,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541610635
    }
]