[
    {
        "content": "<p>Do we have a standard way to deal with different instances of <code>decidable</code>?</p>",
        "id": 193395131,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586391890
    },
    {
        "content": "<p>I can <code>congr; split_ifs; refl</code> but it's not convenient.</p>",
        "id": 193395154,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586391914
    },
    {
        "content": "<p>Note that this problem is present even with <code>open_locale classical</code> because some lemmas generate instances based on <code>classical</code>.</p>",
        "id": 193395238,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586391983
    },
    {
        "content": "<p>E.g., when I do <code>rw</code> inside the argument of <code>ite</code>.</p>",
        "id": 193395369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586392122
    },
    {
        "content": "<p>Not <code>rw</code> but <code>simp only</code>.</p>",
        "id": 193395438,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586392201
    },
    {
        "content": "<p>Why do you have access to multiple equivalent instances of <code>decidable</code>? I think eliminating the redundancy would be best if it's possible</p>",
        "id": 193395543,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586392307
    },
    {
        "content": "<p>It seems that this will be fixed in 3.8.0.</p>",
        "id": 193396816,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586393683
    },
    {
        "content": "<p>I mean, my particular source of redundancy.</p>",
        "id": 193396826,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586393701
    },
    {
        "content": "<p>What's the fix?</p>",
        "id": 193396843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586393735
    },
    {
        "content": "<p>It came from <code>simp</code>lifying condition of <code>ite</code>, and before 3.8.0 the <code>congr</code> lemma inserts some <code>eq.rec</code>.</p>",
        "id": 193396847,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586393745
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/159\" title=\"https://github.com/leanprover-community/lean/issues/159\">lean#159</a></p>",
        "id": 193397096,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586394085
    }
]