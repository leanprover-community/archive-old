[
    {
        "content": "<p>Is there a way of applying a tactic (which creates several goals) and then applying a list of tactics to all the resulting goals? I don't want to use <code>tac1;tac2;tac3</code> because I think it looks ugly to use ; when tactics are not creating extra goals. I like this new <code>by {tac1, tac2}</code> style and I'd like to extend it to this case if possible.</p>",
        "id": 195256365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771267
    },
    {
        "content": "<p><code>tac1; { tac2, tac3 }</code>?</p>",
        "id": 195256408,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587771338
    },
    {
        "content": "<p>I couldn't get it to work. Am I just an idiot? I'll try again.</p>",
        "id": 195256420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771353
    },
    {
        "content": "<p>Is that the kind of list you have in mind? You want to apply the same sequence of several tactics to each goal created by <code>tac1</code>?</p>",
        "id": 195256464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587771364
    },
    {
        "content": "<p>Yes.</p>",
        "id": 195256470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771373
    },
    {
        "content": "<p>I'm getting an error on the semicolon.</p>",
        "id": 195256548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771481
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Would you expect this to work?</p>",
        "id": 195256657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771578
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>works fine but I don't like the semicolon after h1</p>",
        "id": 195256712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771607
    },
    {
        "content": "<p>I think the stuff in the braces has to succeed on every goal created by the tactic before the semicolon. I'm surprised the second example works.</p>",
        "id": 195256778,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587771719
    },
    {
        "content": "<p>It doesn't solve the goal, it just doesn't give an error.</p>",
        "id": 195256832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771756
    },
    {
        "content": "<p>Oh wait, I misread the first example.</p>",
        "id": 195256839,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587771770
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>is OK but</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span><span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">solve1</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">focused</span> <span class=\"n\">goal</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">solved</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n</pre></div>",
        "id": 195256880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771803
    },
    {
        "content": "<p>Oh right, if you use <code>{ }</code> then you have to finish the goal.</p>",
        "id": 195256886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587771808
    },
    {
        "content": "<p>You can also write <code>split, all_goals {rw h1, rw h2}</code></p>",
        "id": 195256891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587771821
    },
    {
        "content": "<p><code>  split; try {rw h1, rw h2},</code></p>",
        "id": 195256892,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587771822
    },
    {
        "content": "<p>or <code>split; rw [h1, h2]</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 195256906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587771834
    },
    {
        "content": "<p>hence my question</p>",
        "id": 195256959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771872
    },
    {
        "content": "<p>I guess the <code>try</code> version is the one that does exactly what you asked</p>",
        "id": 195256984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587771906
    },
    {
        "content": "<p>the one with <code>all_goals</code> would also apply to any other goals you have floating around</p>",
        "id": 195257063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587771979
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 195257379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587772398
    },
    {
        "content": "<p>I use <code>try</code> for this. Unfortunately <code>`[...]</code> doesn't work because it takes the line out of interactive mode, and <code>do</code> is already taken - I really want a notation for the identity function in interactive tactics</p>",
        "id": 195260564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587776676
    },
    {
        "content": "<p>I guess <code>all_goals</code> will also work - that is <code>split; all_goals {rw h1, rw h2}</code> - because when there is only one goal <code>all_goals</code> is the identity</p>",
        "id": 195260643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587776784
    }
]