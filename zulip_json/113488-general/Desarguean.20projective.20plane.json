[
    {
        "content": "<p>Aloha,</p>\n<p>Why doesn't the definition of <code> configuration.desarguean</code> below work? I'm trying to define a projective plane to be desarguean if  any six points satisfying <code>centrally_perspective</code> satisfy <code>axially_perspective</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">centrally_perspective</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₀</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">≠</span> <span class=\"n\">q₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">q₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">≠</span> <span class=\"n\">q₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h₀</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)):</span>\n<span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span>\n  <span class=\"o\">((</span><span class=\"n\">mk_point</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">axially_perspective</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₀</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hpdist₀₁</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">≠</span> <span class=\"n\">p₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hpdist₀₂</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hpdist₁₂</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hqdist₀₁</span> <span class=\"o\">:</span> <span class=\"n\">q₀</span> <span class=\"bp\">≠</span> <span class=\"n\">q₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hqdist₀₂</span> <span class=\"o\">:</span> <span class=\"n\">q₀</span> <span class=\"bp\">≠</span> <span class=\"n\">q₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hqdist₁₂</span> <span class=\"o\">:</span> <span class=\"n\">q₁</span> <span class=\"bp\">≠</span> <span class=\"n\">q₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hpqdist₀₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">hpdist₀₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">hqdist₀₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">hpqdist₀₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">hpdist₀₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">hqdist₀₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">hpqdist₁₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">hpdist₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">hqdist₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk_point</span> <span class=\"n\">hpqdist₀₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">mk_point</span> <span class=\"n\">hpqdist₀₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"c1\">--TODO: rename g</span>\n<span class=\"o\">:</span>\n<span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span>\n  <span class=\"o\">(</span><span class=\"n\">mk_point</span> <span class=\"n\">hpqdist₁₂</span> <span class=\"o\">:</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span>\n    <span class=\"n\">mk_line</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">configuration.desarguean</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₀</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span>\n  <span class=\"n\">centrally_perspective</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₀</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">axially_perspective</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₀</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n<p>Side question: Is this an appropriate question for the general stream? If not, for where?</p>",
        "id": 319296970,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672787852
    },
    {
        "content": "<p><code>centrally_perspective (p₀ p₁ p₂ q₀ q₁ q₂ : P) </code> should be <code>centrally_perspective p₀ p₁ p₂ q₀ q₁ q₂</code> and similar for the other one</p>",
        "id": 319297277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672788011
    },
    {
        "content": "<p>Your spelling means \"treat <code>p₀</code> as a function taking 5 arguments\"</p>",
        "id": 319297305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672788032
    },
    {
        "content": "<p>You will also have to do something about all those nondegeneracy arguments</p>",
        "id": 319297546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672788168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Mind saying more? Do you know anywhere I can see appropriate handling of nondegeneracy?</p>",
        "id": 319298825,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672788850
    },
    {
        "content": "<p>It is just that <code>centrally_perspective p₀ p₁ p₂ q₀ q₁ q₂</code> is a function of 4 more arguments and <code>axially_perspective p₀ p₁ p₂ q₀ q₁ q₂</code> is a function of 10 more arguments</p>",
        "id": 319298950,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672788934
    },
    {
        "content": "<p>I see.</p>",
        "id": 319299051,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672788974
    },
    {
        "content": "<p>Are you trying to say \"six points are axially perspective if they are distinct and ...\" or \"six distinct points are axially perspective if ...\"?</p>",
        "id": 319300605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672789886
    },
    {
        "content": "<p>The difference being that only the former lets you say \"the same point six times is not axially perspective\"</p>",
        "id": 319300697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672789945
    },
    {
        "content": "<p>My first instinct for defining <code>centrally_perspective</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">centrally_perspective</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₀</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span> <span class=\"bp\">∧</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">q₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">q₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span> <span class=\"bp\">∧</span> <span class=\"n\">q₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span>\n</code></pre></div>\n<p>You may add degeneracy conditions in theorems if the proofs require them.</p>",
        "id": 319318452,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672803332
    },
    {
        "content": "<p>I came up with this self-dual definition of Desarguesian property of a projective plane, without any non-degeneracy conditions (I don't yet impose even that the two triangles are individually nondegenerate),  and conjecture it's equivalent to the normal one with non-degeneracy conditions, but the equivalence is maybe tons of case analysis ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">triangle</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₁</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₂</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₀</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₂</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₀</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₁</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">concurrent</span> <span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">centrally_perspective</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₀</span> <span class=\"n\">T₂.p₀</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₁</span> <span class=\"n\">T₂.p₁</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₂</span> <span class=\"n\">T₂.p₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">axially_perspective</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₀</span> <span class=\"n\">T₂.l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₁</span> <span class=\"n\">T₂.l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₂</span> <span class=\"n\">T₂.l₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_desarguesian</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">centrally_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"bp\">↔</span> <span class=\"n\">axially_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span>\n</code></pre></div>",
        "id": 319321610,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672806688
    },
    {
        "content": "<p>is one direction of the biconditional in <code>is_desarguesian</code> always true?</p>",
        "id": 319321786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672806812
    },
    {
        "content": "<p>No, because the dual of one direction is the other direction, so if you show one direction for all projective planes, you get the other direction by specializing to the dual projective plane. However, <a href=\"https://www.google.com/books/edition/The_Four_Pillars_of_Geometry/I1QPQic_PxwC?hl=en&amp;gbpv=1&amp;dq=Because+the+Desargues+theorem+implies+its+converse,+another+way+to+show+that+the+Desargues+theorem+fails+in+the+Moulton+plane+is+to+show+that+its+converse+fails.+This+plan+is+easily+implemented+with+the+help+of+Figure+6.16.&amp;pg=PA128&amp;printsec=frontcover\">one direction actually implies the other direction</a> even when considering a single projective plane:<br>\n<a href=\"/user_uploads/3121/2bzf6TYlprD3W8NFMDjkgw5X/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2bzf6TYlprD3W8NFMDjkgw5X/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2bzf6TYlprD3W8NFMDjkgw5X/image.png\"></a></div>",
        "id": 319322611,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672807495
    },
    {
        "content": "<p>What's the difference b/t parentheses and curly brackets in <code>variables (P) {L}</code>?</p>",
        "id": 319429050,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672851099
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/glossary.html#binder\">glossary#binder</a></p>",
        "id": 319429220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672851140
    },
    {
        "content": "<blockquote>\n<p>What's the difference b/t parentheses and curly brackets in variables (P) {L}?</p>\n</blockquote>\n<p>Here P and L are already declared, so <code>variables (P) {L}</code> changes <code>P</code> to explicit and <code>L</code> to implicit.</p>",
        "id": 319442040,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672855378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/Desarguean.20projective.20plane/near/319442040\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>What's the difference b/t parentheses and curly brackets in variables (P) {L}?</p>\n</blockquote>\n<p>Here P and L are already declared, so <code>variables (P) {L}</code> changes <code>P</code> to explicit and <code>L</code> to implicit.</p>\n</blockquote>\n<p>Why not make <code>P</code> implicit in <code>concurrent</code> as well?</p>",
        "id": 319468425,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672864456
    },
    {
        "content": "<p>Because if you write <code>concurrent l₀ l₁ l₂</code>, Lean doesn't know what <code>P</code> to use.</p>",
        "id": 319471055,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672865575
    },
    {
        "content": "<p>Probably we want to make the types bundled in <code>projective_plane</code>.</p>",
        "id": 319472071,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672865972
    },
    {
        "content": "<p>It's not like <code>projective_plane P L</code> has any interesting algebraic structure (or am I unaware?)</p>",
        "id": 319472223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672866025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/Desarguean.20projective.20plane/near/319321610\">said</a>:</p>\n<blockquote>\n<p>I came up with this self-dual definition of Desarguesian property of a projective plane, without any non-degeneracy conditions (I don't yet impose even that the two triangles are individually nondegenerate),  and conjecture it's equivalent to the normal one with non-degeneracy conditions, but the equivalence is maybe tons of case analysis ...</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">triangle</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₁</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₂</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₀</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₂</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₀</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₁</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">concurrent</span> <span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">centrally_perspective</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₀</span> <span class=\"n\">T₂.p₀</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₁</span> <span class=\"n\">T₂.p₁</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₂</span> <span class=\"n\">T₂.p₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">axially_perspective</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₀</span> <span class=\"n\">T₂.l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₁</span> <span class=\"n\">T₂.l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₂</span> <span class=\"n\">T₂.l₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_desarguesian</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">centrally_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"bp\">↔</span> <span class=\"n\">axially_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Why didn't you use <code>configuration.is_desarguesian</code> as in the suggestion <a href=\"#narrow/stream/113489-new-members/topic/Using.20a.20structure\">here</a>?</p>",
        "id": 319828613,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1673026918
    }
]