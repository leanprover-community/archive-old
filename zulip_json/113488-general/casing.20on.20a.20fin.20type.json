[
    {
        "content": "<p>Suppose I define a function like <code>foo</code>, and want to prove <code>bar</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"dog\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cat\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"parakeet\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"tasmanian devil\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here is one way to do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"s2\">\"dog\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"s2\">\"cat\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"s2\">\"parakeet\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo3</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"s2\">\"tasmanian devil\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l0</span> <span class=\"o\">:</span> <span class=\"s2\">\"dog\"</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"s2\">\"cat\"</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"s2\">\"parakeet\"</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"s2\">\"tasmanian devil\"</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Is there a way to do it without having to declare all the simp lemma?</p>\n<p>I realize that there are two questions here: how to get simp to simplify a definition by cases, and how to get the simplifier to unpack strings. Information on either will be helpful.</p>",
        "id": 257588192,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1634238415
    },
    {
        "content": "<p>Is the question specifically about <code>simp</code>? It works for me without the simp lemmas with <code>dec_trivial</code> if that's a suitable answer?</p>\n<p>I.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"dog\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cat\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"parakeet\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"tasmanian devil\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 257589227,
        "sender_full_name": "Julian Berman",
        "timestamp": 1634238826
    },
    {
        "content": "<p>Slightly rephrased, you don't even need <code>fin_cases</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"dog\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cat\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"parakeet\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"tasmanian devil\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 257594736,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634241123
    },
    {
        "content": "<p>Thanks! This is really helpful. I have a use case where we are performing permutations on concrete matrices and want to verify the results. I worry that things like <code>dec_trivial</code> and reflexivity will hit performance problems -- but maybe not. I'm still be curious to know if the simplifier can be made to do explicit calculations like these (length of a string, value of a function on an element of a fintype). But, again, this is really helpful.</p>",
        "id": 257596530,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1634241817
    },
    {
        "content": "<p>We wrote a norm_num plugin to deal with normalizing swaps, norm_swap.</p>",
        "id": 257596961,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634241986
    },
    {
        "content": "<p>From what I remember Mario saying, such explicit calculations shouldn't be the simplifier's role, because often you're expanding and increasing terms, which might not be confluent. Instead, a d sl-based proof constructing algorithm can be employed a la norm_num plugins.</p>",
        "id": 257597197,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634242082
    },
    {
        "content": "<p>For what it's worth, I managed to get <code>simp</code> to do the computation. For strings, it's easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">string</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">length_str</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"n\">s</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">s.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">push</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">length_empty</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">empty</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">string</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">string.length</span> <span class=\"s2\">\"tasmanian devil\"</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>It's harder to simplify a <code>fin</code> numeral like <code>3</code> to <code>⟨3, _⟩</code>, because the simplifier is wired to go the other way. So you have to be careful to use <code>simp only</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">fin</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">mk_simp_attr</span> <span class=\"bp\">`</span><span class=\"n\">fin_num_simps</span>\n\n<span class=\"kd\">@[fin_num_simps]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fin.mk</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[fin_num_simps]</span> <span class=\"kd\">lemma</span> <span class=\"n\">one_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fin.mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.mod_lt</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[fin_num_simps]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit0_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">fin.mk</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fin.mk</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_one_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fin.mk</span> <span class=\"n\">m</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">fin.mk</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"n\">n.succ</span><span class=\"o\">))</span> <span class=\"bp\">%</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[fin_num_simps]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit1_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">fin.mk</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fin.mk</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0_eq</span><span class=\"o\">,</span> <span class=\"n\">add_one_eq</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">fin</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.fin_num_simp</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"k\">with</span> <span class=\"n\">fin_num_simps</span> <span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">norm_num1</span> <span class=\"o\">},</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.mk_eq_subtype_mk</span><span class=\"o\">]</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"s2\">\"tasmanian devil\"</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">fin_num_simp</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Putting it together, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">16</span><span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">fin_num_simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 257633010,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1634261651
    },
    {
        "content": "<p>Dealing with fins has its own plugin! norm_fin</p>",
        "id": 257635240,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634263631
    },
    {
        "content": "<p>Which will also properly deal with the periodic properties of fin.</p>",
        "id": 257635254,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634263658
    },
    {
        "content": "<p>For what it's worth, you might also want to check out <a href=\"https://leanprover-community.github.io/mathlib_docs/data/matrix/notation.html\"><code>data.matrix.notation</code></a>, which allows you to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"s2\">\"dog\"</span><span class=\"o\">,</span> <span class=\"s2\">\"cat\"</span><span class=\"o\">,</span> <span class=\"s2\">\"parakeet\"</span><span class=\"o\">,</span> <span class=\"s2\">\"tasmanian devil\"</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- The following still works, by the way:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 257675814,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634293338
    }
]