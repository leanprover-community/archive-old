[
    {
        "content": "<p>So here I am in the middle of a Lean file, with lots of imports and variables and so on, I'm learning Lean, and I just noticed that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n</pre></div>\n\n\n<p>typechecks. This means that <code>submodule R M</code> has some structure which I don't know about -- it will be some kind of lattice. So now I want to go straight to the place in mathlib where this lattice structure is defined. I try looking at where <code>submodule</code> is defined, but I can't see anything there, and so then I figure I'll investigate with <code>#print</code> and <code>#check</code>. But I can't do it! And I even guessed at some point.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"err\">⊤</span> <span class=\"c1\">-- lattice.has_top.top _</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"c1\">-- comes from typeclass lattice.has_top</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ABC</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ABC</span> <span class=\"c1\">-- lattice.has_top -- ??? Where is the definition??</span>\n\n<span class=\"c1\">-- so probably `submodule R M` is a lattice. Let&#39;s start there.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">guess1</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">guess1</span> <span class=\"c1\">-- lattice.conditionally_complete_lattice.to_lattice (submodule R M)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">guess2</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">guess2</span> <span class=\"c1\">--   lattice.conditionally_complete_lattice_of_complete_lattice</span>\n\n<span class=\"c1\">-- I am getting bored now.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">guess3</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">guess3</span> <span class=\"c1\">-- ??? lattice.complete_lattice ???</span>\n\n<span class=\"c1\">-- I am now stuck</span>\n</pre></div>",
        "id": 169719473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562342651
    },
    {
        "content": "<p>Somewhere some instance is defined. How do I get to that definition without having to ask or guess or search?</p>",
        "id": 169719575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562342769
    },
    {
        "content": "<p>pp.implicit</p>",
        "id": 169719831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562343078
    },
    {
        "content": "<p>nice</p>",
        "id": 169719838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562343107
    },
    {
        "content": "<p>There are a bunch of things open</p>",
        "id": 169719841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562343115
    },
    {
        "content": "<p>I did <code>pp.all</code></p>",
        "id": 169719886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562343124
    },
    {
        "content": "<p>You need <code>pp.all</code>. Here's the last guess with implicit:</p>\n<div class=\"codehilite\"><pre><span></span>def guess3 : Π {R M : Type u} [_inst_1 : ring R] [_inst_2 : add_comm_group M] [_inst_3 : @module R M _inst_1 _inst_2],\n  lattice.complete_lattice (@submodule R M _inst_1 _inst_2 _inst_3) :=\nλ {R M : Type u} [_inst_1 : ring R] [_inst_2 : add_comm_group M] [_inst_3 : @module R M _inst_1 _inst_2],\n  @lattice.complete_lattice R M _inst_1 _inst_2 _inst_3\n</pre></div>",
        "id": 169719935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562343192
    },
    {
        "content": "<p>with <code>pp.all</code> it's <code>submodule.lattice.complete_lattice</code></p>",
        "id": 169719959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562343227
    },
    {
        "content": "<p>Aah I see, you use <code>implicit</code> at another point in the investigation</p>",
        "id": 169720179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562343435
    },
    {
        "content": "<p>I agree this is not nice. Here's what I did to jump to the location:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">-- copy-paste below</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span> <span class=\"c\">/-</span><span class=\"cm\"> &lt;- ctrl-click -/</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169720417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562343654
    },
    {
        "content": "<p>If you know that <code>\\top</code> is provided by has_top, you can skip the <code>pp.notation</code> line like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span> <span class=\"c\">/-</span><span class=\"cm\"> &lt;- ctrl-click -/</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span>\n  <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169720624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562343897
    },
    {
        "content": "<p>If you have <code>submodule</code> open, your results might be different.</p>",
        "id": 169720641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562343915
    },
    {
        "content": "<p>And you can't close it, and you're 400 lines in</p>",
        "id": 169720646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562343924
    },
    {
        "content": "<p>You can still do the same thing, the printout only looks a bit different</p>",
        "id": 169720658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562343943
    },
    {
        "content": "<p>yeah, <code>submodule</code> was suppressed so you couldn't copy paste and then click!</p>",
        "id": 169720711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562343968
    },
    {
        "content": "<p>Oh! That looks like a <code>pp</code> bug</p>",
        "id": 169720730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562344000
    },
    {
        "content": "<p>since <code>submodule.lattice.has_top</code> is protected, the pretty printer should not show it without the namespace</p>",
        "id": 169720749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562344031
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_top</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@lattice.has_top R M _inst_1 _inst_2 _inst_3 : lattice.has_top (@submodule R M _inst_1 _inst_2 _inst_3)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 169720750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562344033
    },
    {
        "content": "<p>That's exactly what stopped me proceeding.</p>",
        "id": 169720756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562344055
    },
    {
        "content": "<p>I seldom <code>open</code> things so I don't have this problem</p>",
        "id": 169720840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562344125
    },
    {
        "content": "<p>Yeah I checked. Opening <code>submodule</code> is what causes <code>@submodule.lattice.has_top</code> to become <code>@lattice.has_top</code></p>",
        "id": 169720846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562344140
    },
    {
        "content": "<blockquote>\n<p>I seldom <code>open</code> things so I don't have this problem</p>\n</blockquote>\n<p>I'm looking at someone else's work here</p>",
        "id": 169720860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562344160
    },
    {
        "content": "<p><code>set_option pp.full_names true</code> does the trick</p>",
        "id": 169720982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562344295
    },
    {
        "content": "<p>or <code>pp.all</code> of course</p>",
        "id": 169720988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562344317
    },
    {
        "content": "<p><code>pp.all</code> was horrible in my use case, it was huge</p>",
        "id": 169721049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562344357
    },
    {
        "content": "<p>This full_names thing is much better</p>",
        "id": 169721054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562344368
    },
    {
        "content": "<p><code>pp.all</code> is just the conjunction of a large number of other <code>pp</code> options</p>",
        "id": 169721077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562344404
    }
]