[
    {
        "content": "<p>I don't understand why the second one fails, and all the other work... are we missing an instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.direct_sum.finsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"c1\">--works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">--doesn't work</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">--works! (monoids as modules over a ring)</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">--works!! (note that direct sum an dfinsupp are defeq)</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 258189175,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634648208
    },
    {
        "content": "<p>I have encountered similar bugs before, where the Pi type made inference fail.</p>",
        "id": 258194033,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634650072
    },
    {
        "content": "<p>That's why we have both the dependent and independent versions, right?</p>",
        "id": 258194236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634650153
    },
    {
        "content": "<p>See e.g.:</p>\n<ul>\n<li><a href=\"#narrow/stream/113488-general/topic/Typeclass.20resolution.20under.20binders/near/245176934\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Typeclass.20resolution.20under.20binders/near/245176934</a></li>\n<li><a href=\"#narrow/stream/113489-new-members/topic/decidable_pred.20instance.20not.20found.20by.20typeclass.20search/near/219962294\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/decidable_pred.20instance.20not.20found.20by.20typeclass.20search/near/219962294</a></li>\n<li><a href=\"https://github.com/leanprover/lean4/issues/509\">leanprover/lean4#509</a></li>\n</ul>",
        "id": 258194313,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634650191
    },
    {
        "content": "<p>I am not really complaining, what I really want is the last one, that works. But it should be literally the same as the second one...</p>",
        "id": 258195084,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634650492
    },
    {
        "content": "<p>Does it work in lean 4?</p>",
        "id": 258198608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634651819
    },
    {
        "content": "<p>The reason is that we have a duplicate instance somewhere that specifically covers the failing case</p>",
        "id": 258199913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634652290
    },
    {
        "content": "<p>Can you print the instance that's actually found?</p>",
        "id": 258199932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634652301
    },
    {
        "content": "<p>I would guess we have both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.module\">docs#direct_sum.module</a> and <del>docs#direct_sum.module'</del></p>",
        "id": 258200216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634652413
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum.module</span>\n</code></pre></div>\n<p>works</p>",
        "id": 258200840,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634652635
    },
    {
        "content": "<p>You can even replace <code>direct_sum.module</code> by <code>dfinsupp.module</code> and it still works (keeping the direct sum).</p>",
        "id": 258200925,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634652672
    },
    {
        "content": "<p>But</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp.module</span>\n</code></pre></div>\n<p>doesn't work.</p>",
        "id": 258200983,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634652694
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"bp\">@</span><span class=\"n\">dfinsupp.module.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span> <span class=\"bp\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"bp\">?</span><span class=\"n\">m_7</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span> <span class=\"bp\">?</span><span class=\"n\">m_9</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">module.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span> <span class=\"bp\">?</span><span class=\"n\">l_3</span><span class=\"o\">)}</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">dfinsupp.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span> <span class=\"bp\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_7</span> <span class=\"n\">i</span><span class=\"o\">)))))</span>\n    <span class=\"bp\">?</span><span class=\"n\">m_8</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">dfinsupp.add_comm_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span> <span class=\"bp\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_7</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span>\n        <span class=\"bp\">?</span><span class=\"n\">l_1</span>\n        <span class=\"bp\">?</span><span class=\"n\">l_2</span>\n        <span class=\"bp\">?</span><span class=\"n\">l_3</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">module.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">dfinsupp.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_3</span> <span class=\"n\">i</span><span class=\"o\">)))))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">dfinsupp.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n             <span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_3</span> <span class=\"n\">i</span><span class=\"o\">)))))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">dfinsupp.add_comm_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">_inst_3</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 258201238,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634652781
    },
    {
        "content": "<p>Is your example really finding <code>direct_sum.module</code> for the add_comm_group case? Can you confirm with <code>show_term</code>?</p>",
        "id": 258247832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634667891
    },
    {
        "content": "<p>Oh, looking at your last message; this is because unification can find the add_comm_monoid structure as an argument to direct_sum, but dfinsupp only takes <code>has_zero</code> so can't offer unification help.</p>",
        "id": 258248043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634667967
    }
]