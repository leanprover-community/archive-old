[
    {
        "content": "<p>While working on my <a href=\"https://github.com/leanprover-community/mathlib/pull/16416\">computability refactor</a> using trees, I am trying to automate as many <code>primrec</code> lemmas as possible. Ultimately, the dream is to be able to write something like <code>derive primrec [list.foldr, list.sum, list.map]</code> and have a tactic automatically prove that they are primitive recursive based on their structure.</p>\n<p>To this end, I've written a generic recursion template tentatively called <code>stack_rec</code> -- because it explicitly keeps track of the arguments that would traditionally go on a stack. The idea is that <code>pre</code> does explicit preprocessing before passing arguments to the inductive hypothesis, and <code>post</code> does the post-processing given the result from the inductive step. For example the definition of <code>stack_rec</code> for a list is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">post</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">stack_rec</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">base</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">post</span> <span class=\"o\">(</span><span class=\"n\">stack_rec</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>And an example implementation is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nth_stack_rec</span> <span class=\"o\">{</span><span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">x.stack_rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n.pred</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ih</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">hd</span> <span class=\"k\">else</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>In other words, we preprocess by the argument <code>n</code> to the inductive hypothesis by subtracting 1.  This corresponds directly to the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nth'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">hd</span> <span class=\"k\">else</span> <span class=\"k\">let</span> <span class=\"n\">ih</span> <span class=\"o\">:=</span> <span class=\"n\">nth'</span> <span class=\"n\">tl</span> <span class=\"n\">n.pred</span> <span class=\"k\">in</span> <span class=\"n\">ih</span>\n</code></pre></div>\n<p>My question is, is there a way to take a recursively defined function and automatically put it in the <code>stack_rec</code> form? Obviously, not all Lean-defined functions can be written with <code>stack_rec</code>, but can we write a tactic that works on \"usual\" cases? The issue is that rewriting every function using <code>stack_rec</code> and proving their equivalence is cumbersome, but also requires no creativity and seems very routine. However, inspecting what the equation compiler outputs, it seems to use <code>brec</code> and <code>below</code>, rather than the usual <code>rec</code>. And there isn't much documentation on <code>brec</code> and what it does.</p>\n<p>What would be the best way of finding the equivalent <code>rec</code> definition of a function, if one is available? (Going from <code>rec</code> to <code>stack_rec</code> seems quite doable).</p>",
        "id": 298187709,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1662853409
    },
    {
        "content": "<p><code>brec</code> and <code>below</code> (and I think all those auto-generated stuff) use <code>rec</code> under the hood; you can see by using <code>#print</code> (but I admit I can't immediately make sense of the output; I wasn't aware of their existence before):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">list.brec_on</span>\n<span class=\"k\">#print</span> <span class=\"n\">list.below</span>\n<span class=\"k\">#print</span> <span class=\"n\">nat.brec_on</span>\n<span class=\"k\">#print</span> <span class=\"n\">nat.below</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">list.brec_on</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">list.below</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">list.below</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">list.rec</span> <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"n\">list.nil</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.below</span> <span class=\"n\">T</span> <span class=\"n\">tl</span><span class=\"o\">)),</span>\n        <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩⟩)</span>\n     <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">list.below</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">),</span>\n  <span class=\"n\">list.rec</span> <span class=\"n\">punit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">l</span><span class=\"o\">)),</span> <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"n\">punit</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">nat.brec_on</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat.below</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat.below</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">nat.rec</span> <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.below</span> <span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n        <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"n\">n.succ</span> <span class=\"o\">⟨</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩⟩)</span>\n     <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">nat.below</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">nat.rec</span> <span class=\"n\">punit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">l</span><span class=\"o\">)),</span> <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"n\">punit</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 298194218,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662861032
    },
    {
        "content": "<p>It seems like these are trying to simulate a kind of strong induction, but I can't quite figure it out. Is there any documentation on what they actually do? Why are they multiplying by <code>punit</code> in <code>nat.below</code> and <code>list.below</code> (maybe for universe reasons?)</p>",
        "id": 298263544,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1662910661
    }
]