[
    {
        "content": "<p>I want to fiddle with a lean syntax graph in another language but I don't want to write a parser. Is it possible to get lean to dump the parse tree?</p>",
        "id": 231427999,
        "sender_full_name": "Iocta",
        "timestamp": 1616481637
    },
    {
        "content": "<p>I am also interested in this and in the reverse process: convert the AST back to Lean (is a pretty printer and re-parsing the only way to go?)</p>",
        "id": 231432987,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1616486135
    },
    {
        "content": "<p>Can both of you explain a bit more about that part of the code you want an AST for (and maybe the applications)?  In general, parsing Lean code is something you need a full Lean parser to do.  Every time a new tactic, user command, or notation is added to the language it changes the behavior of the parser.  Your three options are to (1) write a Lean parser or (2) hack into the C++ Lean parser, or (3) in certain cases you can write a poor Lean parser which doesn't cover all the cases and combine it with data from hacked versions of basic lean functions in Lean's parser and tactic monads.</p>",
        "id": 231453504,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616498129
    },
    {
        "content": "<p>We took the final approach for the LeanStep dataset for the LeanStep/PACT paper. There we extracted an AST for all Lean tactic proofs.  To read a bit more about how we did this, see <a href=\"https://docs.google.com/presentation/d/1poOu2gP9mSGAdAFvOupHvf4tpgD33jACQLJAVcphA1g/edit#slide=id.gb23f08f17b_0_75\">this slide for Lean Together 2021</a> and the next few slides.  The repo is <a href=\"https://github.com/jasonrute/lean-proof-recording-public\">here</a>, but like a lot of code for papers, it got rushed at the end to meet a deadline and isn't as usable as I'd like.  I hope to clean it up.</p>",
        "id": 231453513,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616498136
    },
    {
        "content": "<p>Now if you just want the internal AST of expressions, that is much easier.  There are a number of more parsable formats for Lean expressions that can (with varying degrees of difficulty) be coverted back into Lean.  But again, you can't just read them easily from a Lean file.  You need to work from within the Lean metaprogramming framework to export the data.</p>",
        "id": 231453524,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616498143
    },
    {
        "content": "<p>Finally, it should be noted that this is all easier in Lean 4.  (I assume you are asking about Lean 3.)</p>",
        "id": 231453534,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616498146
    },
    {
        "content": "<p>It's also easy actually, in Lean 3, to get the AST of all definitions and theorems in the environment as well as the low-level term proofs that Lean saves.  Again, you need to work from within the Lean metaprogramming framework to export this data.</p>",
        "id": 231453893,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616498388
    },
    {
        "content": "<p>That's interesting. How do I get the AST of definitions out?</p>",
        "id": 231520643,
        "sender_full_name": "Iocta",
        "timestamp": 1616524493
    },
    {
        "content": "<p>Is that <code>meta def trace_parser_state</code></p>",
        "id": 231521364,
        "sender_full_name": "Iocta",
        "timestamp": 1616524756
    },
    {
        "content": "<p>I see the slide mentioned Large was run over 8 run and Larger was run over 1, but not Larger over 8?</p>",
        "id": 231521780,
        "sender_full_name": "Iocta",
        "timestamp": 1616524923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113488-general/topic/ast/near/231521364\">said</a>:</p>\n<blockquote>\n<p>Is that <code>meta def trace_parser_state</code></p>\n</blockquote>\n<p>No.  I've actually not seen that function before, but whatever it is it probably doesn't do anything like what you are asking.  (It probably just traces helpful information about the parser state for debugging).</p>",
        "id": 231553265,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616538156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113488-general/topic/ast/near/231521780\">said</a>:</p>\n<blockquote>\n<p>I see the slide mentioned Large was run over 8 run and Larger was run over 1, but not Larger over 8?</p>\n</blockquote>\n<p>If you are interested in the results, then please look at the <a href=\"https://arxiv.org/abs/2102.06203\">paper</a>, and <a href=\"https://www.youtube.com/watch?v=EXpmbAfBNnw\">a more recent talk</a> with <a href=\"https://cmsa.fas.harvard.edu/wp-content/uploads/2021/03/LeanStep-Talk-New-Technology-in-Mathematics-Seminar.pdf\">slides</a>.  Everything in the last part of those other slides I shared is really out of date.  We have better results now.  I just shared the older slides since they contained more info on the tactic AST extraction.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"EXpmbAfBNnw\" href=\"https://www.youtube.com/watch?v=EXpmbAfBNnw\"><img src=\"https://i.ytimg.com/vi/EXpmbAfBNnw/default.jpg\"></a></div>",
        "id": 231553682,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616538367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113488-general/topic/ast/near/231520643\">said</a>:</p>\n<blockquote>\n<p>That's interesting. How do I get the AST of definitions out?</p>\n</blockquote>\n<p>I'll have to find a code snippet.  How comfortable are you with metaprogramming in lean?  The main idea is something like the following:</p>\n<ul>\n<li>You should be working in a tactic or in an io function (like <code>def main : IO unit</code>).</li>\n<li>The tactic <code>tactic.get_env</code>returns an environment object <code>env</code>.</li>\n<li>In particular, there is a method on <code>env</code> to iterate over all declarations in the environment.</li>\n<li>You can filter out only the definitions.</li>\n<li>For each definition you will have information about the name, the type, and the value of the definition.  The type and value are expressions.  There are a number of ways to print an expression to a string, including the usual pretty-printed version, the fully elaborated (<code>pp.all</code>) version, or <code>expr.to_raw_fmt</code>.  All of these serializations can be converted back into a Lean expression as well, with lots of caveats.   In particular, a Lean expression is an algebraic datatype and you could also write your own serializer to say S-expressions or JSON.</li>\n<li>To output the definition to file, you can use Lean's IO framework, or just trace your data using <code>tactic.trace</code>.  When you run <code>lean foo.lean</code> (or <code>lean --main foo.lean</code>), then any traced messages goes to stdout where you can pipe it into a file.</li>\n</ul>",
        "id": 231555685,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616539561
    },
    {
        "content": "<p>Maybe start with this example: <a href=\"#narrow/stream/113489-new-members/topic/printing.20lemma.20statements/near/213518206\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/printing.20lemma.20statements/near/213518206</a></p>",
        "id": 231555962,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616539716
    },
    {
        "content": "<p>Or this one which gets all theorems: <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/ML.20for.20Lean.3A.20How.20to.20do.20it.3F/near/186859952\">https://leanprover.zulipchat.com/#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/ML.20for.20Lean.3A.20How.20to.20do.20it.3F/near/186859952</a></p>",
        "id": 231556289,
        "sender_full_name": "Jason Rute",
        "timestamp": 1616539923
    },
    {
        "content": "<p>I don't have much experience with lean's metaprogramming, but I'll look around. Thanks for the info.</p>",
        "id": 231556614,
        "sender_full_name": "Iocta",
        "timestamp": 1616540126
    }
]