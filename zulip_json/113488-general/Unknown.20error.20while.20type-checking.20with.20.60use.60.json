[
    {
        "content": "<p>For some reason, lean just dies after the <code>use M</code> line, and sometimes (eventually?), you can get <code>unknown error while type-checking theorem</code> (this might not be verbatim), although interestingly, using <code>tauto</code> at that point doesn't throw this error (also this seems to have been an error with a week ago mathlib, as well as current). Additionally, having R being an integral domain resolves this.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">fractional_ideal</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nonfield_has_prime</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">nonfield</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"err\">⊥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">I</span> <span class=\"bp\">∧</span> <span class=\"n\">I</span> <span class=\"bp\">&lt;</span> <span class=\"err\">⊤</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"bp\">∧</span> <span class=\"err\">⊥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nonfield</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">gt_bot</span><span class=\"o\">,</span> <span class=\"n\">lt_top</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ne_top</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"err\">⊤</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">lt_top</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">exists_le_maximal</span> <span class=\"n\">I</span> <span class=\"n\">ne_top</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">maximal</span><span class=\"o\">,</span> <span class=\"n\">gei</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">is_maximal</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"n\">maximal</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">gt_bot</span> <span class=\"o\">:</span> <span class=\"err\">⊥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">gt_of_ge_of_gt</span> <span class=\"n\">gei</span> <span class=\"n\">gt_bot</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n   <span class=\"c1\">--exact ideal.is_maximal.is_prime maximal, exact gt_bot,</span>\n  <span class=\"c1\">--tauto,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207082671,
        "sender_full_name": "Kenji Nakagawa",
        "timestamp": 1597601802
    },
    {
        "content": "<p>Try <code>  refine ⟨M, _, _⟩,</code> instead for now</p>",
        "id": 207082884,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597602204
    },
    {
        "content": "<p><code>existsi M</code> is something else which sometimes works</p>",
        "id": 207082944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597602311
    },
    {
        "content": "<p>There's definitely something weird here. For me, the yellow bars just don't go away if the <code>use M,</code> line is present. If I comment it out then Lean quickly finishes.</p>",
        "id": 207083138,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597602629
    },
    {
        "content": "<p><code>existsi M</code> and <code>refine ⟨M, _, _⟩,</code> work though.</p>",
        "id": 207083158,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597602695
    },
    {
        "content": "<p>This is the well-known \"<code>use</code> bug\"; <code>use</code> was written because <code>existsi</code> was bad at type unification; I've never seen a situation where neither of them work ;-)</p>",
        "id": 207085516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597605620
    },
    {
        "content": "<p>I think I've asked before for a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of the \"well-known <code>use</code> bug,\" preferably as a mathlib issue so it doesn't get lost. Ideally the example has fewer imports than this one.</p>",
        "id": 207086369,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597607151
    },
    {
        "content": "<p>The problem in this case is that the elaborator doesn't recognize that <code>M</code> itself isn't a proof of <code>∃ (P : ideal R), P.is_prime ∧ ⊥ &lt; P</code>. You can see that <code>refine M</code> times out too.</p>",
        "id": 207087131,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597608068
    },
    {
        "content": "<p>Why? I have no idea. The elaborator trace options aren't helping at all.</p>",
        "id": 207087173,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597608123
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">M</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207089095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597610925
    },
    {
        "content": "<p>It is fast if you provide <code>ring</code> or <code>semiring</code> instead</p>",
        "id": 207089097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597610940
    },
    {
        "content": "<p>It is also fast with <code>R : Type</code> instead of <code>R : Type*</code>, so maybe it has something to do with the universe unification</p>",
        "id": 207089171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597611070
    },
    {
        "content": "<p>Hmm, with what imports? This is fast:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">submodule</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">M</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207089335,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597611250
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">fractional_ideal</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">M</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207089401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597611330
    },
    {
        "content": "<p>it's something in <code>localization</code></p>",
        "id": 207089475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597611425
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization_map.coe_submodules/src\">src#localization_map.coe_submodules</a></p>",
        "id": 207089585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597611550
    },
    {
        "content": "<p>Looks like a coercion instance going wrong.</p>",
        "id": 207089588,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597611554
    },
    {
        "content": "<p>yeah this is a bad instance, that coe can loop and it leaves <code>f</code> free</p>",
        "id": 207089668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597611670
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3832\">#3832</a></p>",
        "id": 207089806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597611930
    },
    {
        "content": "<p>Maybe add a comment explaining why it's not an instance?</p>",
        "id": 207089861,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597611979
    }
]