[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">finsupp</span> <span class=\"n\">add_monoid_algebra</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"c1\">-- if commented works fine</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">comm_semiring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">coeff</span>\n\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">my_coeff_mul_X</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">single</span> <span class=\"n\">s</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">s</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">single</span> <span class=\"n\">s</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">antidiagonal</span> <span class=\"o\">:=</span> <span class=\"n\">mem_antidiagonal.2</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.insert_erase</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_insert</span> <span class=\"o\">(</span><span class=\"n\">finset.not_mem_erase</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">finset.sum_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_erase</span><span class=\"o\">,</span> <span class=\"n\">mem_antidiagonal</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">single</span> <span class=\"n\">s</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hij</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_X'</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">coeff</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">comm_semiring</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mv_polynomial</span>\n</code></pre></div>\n<p>I am working on a lemma similar to the one above which is a duplicate of <code>coeff_mul_X</code> in <code>data.mv_polynomial.basic</code>. I copied over the proof from <code>coeff_mul_X</code> to get started, and noticed the proof was failing in my file. I isolated the problem to the <code>variables [decidable_eq σ]</code> line, which I have in my file for a different lemma. When this instance is included, I start getting the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">s</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>\n<p>Why does the decidable_eq instance cause this?</p>",
        "id": 240857176,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1622482733
    },
    {
        "content": "<p>Because you did open_locale classical, which already provides a decidable_eq instance for all types. And now you gave a second, non defeq one.</p>",
        "id": 240858252,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622483641
    },
    {
        "content": "<p>Well if the problem is that I've defined something twice, why does the error manifest this way, instead of simply telling me that I've made two instances of one class?</p>",
        "id": 240858748,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1622484029
    },
    {
        "content": "<p>Because one of the ites has one instance, and the rw has another, so rw sees two fundamentally different things</p>",
        "id": 240858933,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622484201
    },
    {
        "content": "<p>Turn on pp.implicit and you'll see</p>",
        "id": 240858943,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622484217
    },
    {
        "content": "<p>Further question - now that I've open_locale classical, I would think by what you are saying that it would be totally unnecessary to have any decidable_eq declarations in the file. But indeed, the other lemma fails if I remove the decidable_eq declaration.</p>",
        "id": 240859020,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1622484284
    },
    {
        "content": "<p>Actually never mind, I see the only reason it fails is that the last finishing tactic is no longer needed</p>",
        "id": 240859144,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1622484365
    },
    {
        "content": "<p>Which lemma introduces the ite into the goal?</p>",
        "id": 240860218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622485364
    },
    {
        "content": "<p>Seems the coeff_X' lemma introduces ite into the goal</p>",
        "id": 240860367,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1622485479
    },
    {
        "content": "<p>I understand that you all are telling me that there are two instances of the decidable_eq \\sigma here, what I'm try to ask is why is this allowed at all. In this thread <a href=\"#narrow/stream/113488-general/topic/Type.20class.20resolution.20only.20works.20with.20a.20name\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Type.20class.20resolution.20only.20works.20with.20a.20name</a> I was told that the defining features of a class was that there was a unique one for each type. I'm pretty sure decidable_eq is implemented as a class. So why isn't some sort of error thrown when I write <code>variables [decidable_eq σ]</code>?</p>",
        "id": 240860426,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1622485531
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.coeff_X'\">docs#mv_polynomial.coeff_X'</a>?</p>",
        "id": 240861529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622486458
    },
    {
        "content": "<p>That lemma is stated badly</p>",
        "id": 240861569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622486507
    },
    {
        "content": "<p>It's missing a <code>decidable</code> argument</p>",
        "id": 240861596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622486522
    },
    {
        "content": "<p>Uniqueness is a guideline for typeclasses, not something lean enforces.</p>",
        "id": 240861797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622486716
    },
    {
        "content": "<p>Good to know.</p>",
        "id": 240861962,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1622486862
    },
    {
        "content": "<p>There are several lemmas in data/mv_polynomial/basic that introduce ite without a decidable argument. Should all of them be changed?</p>",
        "id": 240862049,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1622486923
    },
    {
        "content": "<p>The whole file where that lemma is defined is classical</p>",
        "id": 240862323,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622487171
    },
    {
        "content": "<p>Yep, so why does <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  say it's stated badly?</p>",
        "id": 240862428,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1622487243
    },
    {
        "content": "<p>That lemma is a lemma about a classical if, not an arbitrary if</p>",
        "id": 240863368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622488045
    },
    {
        "content": "<p>Which makes it difficult to use in exactly the way you were running into</p>",
        "id": 240863409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622488081
    },
    {
        "content": "<p>With a <code>[decidable_eq \\sigma]</code>, the lemma becomes <em>more</em> general, not less.</p>",
        "id": 240863532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622488189
    },
    {
        "content": "<p>I am a bit confused about this. I was expecting Yury's rule of thumb to apply (the statement of <code>coeff_X'</code> would not compile without decidability assumptions) but it does compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_X''</span> <span class=\"o\">:</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">decidable_eq_of_decidable_le</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span> <span class=\"c1\">-- works, uses decidable_eq_of_decidable_le</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">decidable_eq_of_decidable_le</span> <span class=\"c1\">-- an instance</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_eq_of_decidable_le</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span> <span class=\"c1\">-- works, uses finsupp.decidable_le</span>\n</code></pre></div>",
        "id": 240867806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622492054
    },
    {
        "content": "<p>Maybe I jumped to conclusions here</p>",
        "id": 240868073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622492291
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.decidable_le\">docs#finsupp.decidable_le</a> is bad</p>",
        "id": 240868108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622492322
    },
    {
        "content": "<p>(where bad = \"spoilt by <code>choice</code>\")</p>",
        "id": 240868636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622492823
    },
    {
        "content": "<p>Heh, I like the name of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.finsupp.decidable_eq\">docs#finsupp.finsupp.decidable_eq</a></p>",
        "id": 240868811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622492977
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">finsupp.decidable_le</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">propext</span>\n<span class=\"cm\">quot.sound</span>\n<span class=\"cm\">classical.choice</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 240873645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622497432
    },
    {
        "content": "<p>The <code>classical</code> instance is in the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.le_iff\">docs#finsupp.le_iff</a> .</p>",
        "id": 240874050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622497760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20makes.20lemma.20fail/near/240868811\">said</a>:</p>\n<blockquote>\n<p>Heh, I like the name of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.finsupp.decidable_eq\">docs#finsupp.finsupp.decidable_eq</a></p>\n</blockquote>\n<p>Don't we have a linter for this?</p>",
        "id": 240874373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622498050
    },
    {
        "content": "<p>What we actually care about is whether it's noncomputable, not whether its proof uses choice</p>",
        "id": 240876380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622500189
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7817\">#7817</a> fixes the mv_polynomial lemmas and the double name that <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> spotted.</p>",
        "id": 241532050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812082
    },
    {
        "content": "<p>What's going on with <code>finsupp.decidable_le</code> is a <code>decidable</code> diamond that doesn't involve <code>choice</code>. I'm going to pretend it doesn't exist until we run into a problem where it actually comes up.</p>",
        "id": 241532189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812148
    },
    {
        "content": "<p>How do I write &lt;- with keyboard shortcuts on lean?</p>",
        "id": 241556080,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1622822213
    },
    {
        "content": "<p><code>\\l</code> -- if you use VScode</p>",
        "id": 241556164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622822252
    },
    {
        "content": "<p>Also, this question should probably be put in a new thread</p>",
        "id": 241556213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622822280
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> to <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/keyboard.20shortcuts\">#new members &gt; keyboard shortcuts</a></p>",
        "id": 241597395,
        "sender_full_name": "Notification Bot",
        "timestamp": 1622843640
    }
]