[
    {
        "content": "<p>I am not understanding how the commands.ts file works.  I was thinking I could write a program that just acts as a stdio reader and shows me all traffic both ways.  Or, I could ask you if there's the ability to switch that on at the command line.  Or if not could someone write a simple \"printf()\" routine that prints out the JSON to VSCode's terminal?  That would save me a lot of trouble.  By that I mean actually modifying lean.  I'm not sure how to do that myself.</p>",
        "id": 182593699,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490160
    },
    {
        "content": "<p>Can someone give me simple instructions how to build lean 4?</p>",
        "id": 182594193,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490480
    },
    {
        "content": "<p>What is your OS?</p>",
        "id": 182594204,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1575490497
    },
    {
        "content": "<blockquote>\n<p>What is your OS?</p>\n</blockquote>\n<p>Windows 10</p>",
        "id": 182594225,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490511
    },
    {
        "content": "<p>Lean 4 might be a little premature. I tried building it with MinGW a few months ago and it didn't work</p>",
        "id": 182594229,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1575490516
    },
    {
        "content": "<p>64-bit</p>",
        "id": 182594241,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490526
    },
    {
        "content": "<p>I'm not sure I understand your question, but if you run <code>lean --server</code> at the command line, you can type or paste in JSON commands, following the outputs of the functions in <a href=\"https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-core/src/server.ts\" target=\"_blank\" title=\"https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-core/src/server.ts\">server.ts</a>. For example, you can input:</p>\n<div class=\"codehilite\"><pre><span></span>{&quot;command&quot;:&quot;sync&quot;, &quot;file_name&quot;:&quot;test.lean&quot;, &quot;content&quot;:&quot;example : true := sorry&quot;, &quot;seq_num&quot;:0}\n{&quot;command&quot;:&quot;info&quot;, &quot;file_name&quot;:&quot;test.lean&quot;, &quot;line&quot;:1, &quot;column&quot;:10, &quot;seq_num&quot;:0}\n</pre></div>",
        "id": 182594244,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575490527
    },
    {
        "content": "<p>Yes, but I don't know what to type in.  If I could use lean normally and see all traffic, that would be ideal.</p>",
        "id": 182594335,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490565
    },
    {
        "content": "<p>Oh you're saying look at the lines:<br>\n<code>return this.send({command: 'info', file_name: file, line, column}</code><br>\netc and that is exactly the json?</p>",
        "id": 182594428,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490634
    },
    {
        "content": "<p>It's close, for instance, it's missing the <code>seq_num</code> key.</p>",
        "id": 182594459,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575490663
    },
    {
        "content": "<p>So what is the start-up sequence for Lean in JSON commands?</p>",
        "id": 182594462,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I think that <span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span>  wants to see all the JSON traffic that goes between VS and Lean. On Linux I'd suggest some short bash script based on <code>tee</code> and redirection.</p>",
        "id": 182594530,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1575490687
    },
    {
        "content": "<p>Can't someone just build me a binary that prints it all ?</p>",
        "id": 182594565,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490717
    },
    {
        "content": "<p>Then in VSCode I could set the exec setting to that binary</p>",
        "id": 182594593,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490741
    },
    {
        "content": "<blockquote>\n<p>If I could use lean normally and see all traffic, that would be ideal.</p>\n</blockquote>\n<p>If you're not opposed to fooling around in the browser, you can do this in the online lean editor: <a href=\"https://leanprover-community.github.io/lean-web-editor/\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor/\">https://leanprover-community.github.io/lean-web-editor/</a></p>\n<p>Click the (?) to open the modal popup, then scroll to the bottom and check \"Log server messages to console\".</p>",
        "id": 182594608,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575490750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  that's awesome!  I will try it now</p>",
        "id": 182594649,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490781
    },
    {
        "content": "<p>Then open your browser's dev console and you should see messages like this: </p>\n<div class=\"codehilite\"><pre><span></span>15:17:33.006 =&gt; server:   { command: &quot;info&quot;, file_name: &quot;/test.lean&quot;, line: 6, column: 33 }\n15:17:33.009 &lt;= server:   { response: &quot;ok&quot;, seq_num: 2 }\n</pre></div>",
        "id": 182594711,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575490803
    },
    {
        "content": "<p>It's possible to do something similar with the VS Code extension, but it's a bunch more steps.</p>",
        "id": 182594779,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575490856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> This is perfect.  Thank you!</p>",
        "id": 182594817,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490878
    },
    {
        "content": "<p>Now I just have to open the executable with python which is out of the scope of here.</p>",
        "id": 182594846,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575490902
    },
    {
        "content": "<blockquote>\n<p>Then open your browser's dev console and you should see messages like this: </p>\n</blockquote>\n<p>15:17:33.006 =&gt; server:   { command: \"info\", file_name: \"/test.lean\", line: 6, column: 33 }<br>\n15:17:33.009 &lt;= server:   { response: \"ok\", seq_num: 2 }</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>\n\n\n<p><a href=\"/user_uploads/3121/kLc6ETTC0MckXTM_ChkqprBD/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kLc6ETTC0MckXTM_ChkqprBD/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/3121/kLc6ETTC0MckXTM_ChkqprBD/pasted_image.png\"></a></div><p>What is all that under __proto__ and is that present in the JSON?</p>",
        "id": 182595527,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575491355
    },
    {
        "content": "<p>Also, should I have one LeanInterface (ie. a python subprocess instance) per file or should I have a singleton LeanInterface that works on all files?</p>",
        "id": 182596365,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575491890
    },
    {
        "content": "<p>Did you already look at <a href=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/server.py\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/server.py\">https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/server.py</a>?</p>",
        "id": 182597013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575492264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  thanks that's truely helpful.  It shows all the stuff I actually need right now!</p>",
        "id": 182597865,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575492767
    },
    {
        "content": "<p>To answer my own question, since the online thing has an open / save feature, I opened up a local .lean file and it just sends a sync command to the server.  So in that case it's a singleton server instance I should be doing.</p>",
        "id": 182598026,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575492845
    },
    {
        "content": "<p>That file is really rudimentary. It's exactly what I needed at that time, no more.</p>",
        "id": 182598065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575492893
    },
    {
        "content": "<p>But turning it into a general purpose tool could be very useful.</p>",
        "id": 182598093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575492912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  what is <code>-j0</code> flag or should I just drop that?</p>",
        "id": 182598342,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575493048
    },
    {
        "content": "<p>You should try <code>lean --help</code></p>",
        "id": 182598370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575493076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210574\">@Patrick Massot</span>  closest match is:<br>\n  --threads=num -j   number of threads used to process lean files</p>\n<p>Lean (version 3.4.2, commit cbd2b6686ddb, Release)</p>",
        "id": 182598662,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575493209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  that's not quite the format you have with <code>j0</code></p>",
        "id": 182598709,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575493241
    },
    {
        "content": "<p>That's it.</p>",
        "id": 182598746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575493262
    },
    {
        "content": "<p>So it should be <code>-j=0</code>?</p>",
        "id": 182598773,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575493276
    },
    {
        "content": "<p>No. <code>-j0</code>.</p>",
        "id": 182598787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575493292
    },
    {
        "content": "<p>Then the help command is wrong?</p>",
        "id": 182598816,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575493311
    },
    {
        "content": "<p>So 0 = infinity here?</p>",
        "id": 182598886,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575493334
    },
    {
        "content": "<p>What's wrong? There is <code>=</code> in the long name version, not the short name version.</p>",
        "id": 182598975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575493393
    },
    {
        "content": "<p>I see now.  Thank you!</p>",
        "id": 182599314,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575493576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  should LEAN_PATH be the user's workspace directory or is that always pointing to the lean base folder?</p>",
        "id": 182600465,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575494169
    },
    {
        "content": "<p>It depends on what you want to be included.</p>",
        "id": 182600632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575494283
    },
    {
        "content": "<p>the <code>__proto__</code> stuff is not part of the JSON. It shows up because the JSON gets parsed into a JS object and the browser console shows its \"prototype chain\".</p>",
        "id": 182600685,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575494321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  thanks.  Well the working directory lean uses seems to be the root of my application<br>\nSince i've pasted in a test.lean file and the server now responds with something other than error.</p>",
        "id": 182600934,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575494495
    },
    {
        "content": "<p>I've put the lean executable into a subfolder<br>\nDoes that violate the license?</p>",
        "id": 182601017,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575494533
    },
    {
        "content": "<p>It's my_ide/lean/bin/lean.exe</p>",
        "id": 182601084,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575494580
    }
]