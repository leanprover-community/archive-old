[
    {
        "content": "<p>I'd really like to be able to make this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">derivative_seq</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"n\">derivative_seq</span> <span class=\"o\">(</span><span class=\"n\">p.derivative</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but Lean shouts at me in many ways, and I guess understandably so. There's many things wrong with this - firstly, I don't think Lean likes me using <code>0</code> as a pattern (and I'm not too sure that <code>.(0)</code> helps - if I do that and turn it into a <code>meta_def</code>, it just turns the whole function into <code>λ p, []</code>). Furthermore, I'd like to use well-founded recursion here - for <code>p ≠ 0</code>, we clearly have that <code>degree (p.derivative) &lt; degree p</code>, but how do I get that <code>p ≠ 0</code> apart from that if it was, we'd have gone down the first  path?</p>\n<p>I guess essentially I'm really misunderstanding the equation compiler and maybe forcing it to do things it doesn't want to. Is the correct way to use <code>wf.fix</code>?</p>",
        "id": 274533481,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646742306
    },
    {
        "content": "<p>is this the correct way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">derivative_seq</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]]</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"n\">derivative_seq</span> <span class=\"o\">(</span><span class=\"n\">p.derivative</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 274533692,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646742454
    },
    {
        "content": "<p>Another option would be to directly recurse on <a href=\"http://p.degree\">p.degree</a></p>",
        "id": 274533874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646742582
    },
    {
        "content": "<p>hmm, that doesn't seem to well-found properly, this throws an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">derivative_seq</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]]</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">[]</span> <span class=\"k\">else</span> <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.degree_derivative_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                                 <span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"n\">derivative_seq</span> <span class=\"o\">(</span><span class=\"n\">p.derivative</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 274533991,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646742632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/well-founded.20recursion.20on.20polynomials/near/274533874\">said</a>:</p>\n<blockquote>\n<p>Another option would be to directly recurse on <a href=\"http://p.degree\">p.degree</a></p>\n</blockquote>\n<p>with a <code>match</code>, you mean?</p>",
        "id": 274533998,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646742639
    },
    {
        "content": "<p>Probably an auxiliary def</p>",
        "id": 274534013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646742652
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"n\">p.derivative</span>\n</code></pre></div>\n<p>Then use <code>aux p.degree p</code> or similar</p>",
        "id": 274534182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646742772
    },
    {
        "content": "<p>Why do you need a <code>list</code>?</p>",
        "id": 274534226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646742805
    },
    {
        "content": "<p>What do you suggest, Reid? I'm trying to implement Budan-Fourier like the Isabelle implementation</p>",
        "id": 274534320,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646742850
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/1811.11093\">https://arxiv.org/abs/1811.11093</a></p>",
        "id": 274534349,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646742869
    },
    {
        "content": "<p><code>polynomial.derivative^[n]</code> maybe?</p>",
        "id": 274534361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646742875
    },
    {
        "content": "<p>I can also just stick that in a <code>list.map</code>, I don't get <code>p :: derivative_seq p' = derivative_seq p</code> automatically but that's ok</p>",
        "id": 274534551,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646743022
    },
    {
        "content": "<p>But even then, why would you need a list?</p>",
        "id": 274534615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646743063
    },
    {
        "content": "<p>My understanding of the theorem is that I take the sequence of derivatives, evaluate them at a point, and the sign differences in this sequence are meaningful. The way I calculate sign differences is using a list representation, although also a <code>finsupp</code> could work just as well, thinking about it.</p>",
        "id": 274535129,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646743353
    },
    {
        "content": "<p>It's also far more idiomatic; I've made a function that turns a polynomial into a list and even proving that a monomial's representation was <code>if r = 0 then [0] else r :: list.repeat 0 n</code> was hell</p>",
        "id": 274535201,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646743408
    },
    {
        "content": "<p>I think in Isabelle (or at least from what I got from the paper) they represent polynomials directly as lists, so they don't have to think about all this</p>",
        "id": 274535353,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646743487
    },
    {
        "content": "<p>oh, maybe not:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">typedef</span> <span class=\"o\">(</span><span class=\"kp\">overloaded</span><span class=\"o\">)</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">poly</span> <span class=\"o\">=</span> <span class=\"s\">\"{f :: nat ⇒ 'a::zero. ∀⇩∞ n. f n = 0}\"</span>\n</code></pre></div>",
        "id": 274535423,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646743538
    },
    {
        "content": "<p>I think you can just work with <code>nat -&gt; R</code> given by <code>n \\mapsto (polynomial.derivative^[n] p).eval x</code>.</p>",
        "id": 274535642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646743661
    },
    {
        "content": "<p>That sequence will eventually be zero</p>",
        "id": 274535660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646743673
    },
    {
        "content": "<p>But you can still count the number of sign differences on the image of <code>finset.range (p.nat_degree + 1)</code>.</p>",
        "id": 274535764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646743718
    }
]