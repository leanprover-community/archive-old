[
    {
        "content": "<p>I have a polynomial A with complex coefficients. I have a theorem stating that the roots must be real. Now I wish to treat them as real (e.g. use &lt;= etc.) but they are of type complex as compiler does not know that their imaginary part is 0. </p>\n<p>Questions:</p>\n<ol>\n<li>Why doesn't complex has a &lt;= operator that return true only if (<a href=\"http://a.re\">a.re</a> &lt;= <a href=\"http://b.re\">b.re</a> &amp;&amp; <a href=\"http://a.im\">a.im</a> &lt;= <a href=\"http://b.im\">b.im</a>), and return false otherwise? This way it isn't linearly ordered, but it has mathematical meaning</li>\n<li>What is good practice to capture the idea of \"since I can prove the numbers are real, we can treat them like real from now on?\" I have thought about just write a function ripping their imaginary parts off, but that would be a different meaning ... </li>\n</ol>\n<p>I also don't understand how to skip some cases of pattern matching if I have proof that it cannot happen. I suspect this has something to do with Q2 ..? </p>\n<p>That's quite a lot of questions. Any help would be greatly appreciated!!</p>",
        "id": 271898103,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1644877319
    },
    {
        "content": "<p>If you know the complex number has no imaginary part, just take the real part. That's the function you need</p>",
        "id": 271899102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644877846
    },
    {
        "content": "<p>I don't think we should be endowing the complex numbers with a pathological ordering just because it's the one you think you want at this time. It stops anyone else from ever putting another order on it. If you want that order you can make it a local instance and then just use &lt;= in your file without messing up anyone else's ability to make a different choice</p>",
        "id": 271899306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644877960
    },
    {
        "content": "<p>Pattern matching -- just use false.elim and prove that the situation can't occur by deducing false from it</p>",
        "id": 271899414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644878042
    },
    {
        "content": "<p>I see. Thanks!</p>",
        "id": 271899637,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1644878161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431349\">Shi Zhengyu</span> has marked this topic as resolved.</p>",
        "id": 271899690,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644878175
    },
    {
        "content": "<p>For Q2 there is also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#lift\">tactic#lift</a></p>",
        "id": 271909904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644884918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> has marked this topic as resolved.</p>",
        "id": 271953954,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644921051
    }
]