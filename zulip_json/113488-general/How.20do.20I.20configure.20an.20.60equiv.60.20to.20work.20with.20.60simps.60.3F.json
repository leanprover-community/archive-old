[
    {
        "content": "<p>For example, in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group_with_zero</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"sd\">/-- The map `λ x, a * x + b`, as a homeomorphism from `ℝ` to itself, when `a ≠ 0`. -/</span>\n<span class=\"kd\">@[simps?]</span>\n<span class=\"kd\">def</span> <span class=\"n\">affine_homeo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">mul_div_cancel_left</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><code>@[simps]</code> doesn't generate the lemmas I want: they look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">adding</span> <span class=\"n\">projection</span> <span class=\"n\">affine_homeo_to_equiv_apply</span><span class=\"o\">:</span>\n        <span class=\"bp\">&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">affine_homeo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>whereas I'd prefer just </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">affine_homeo_apply</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">affine_homeo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is there some magic incantation that will cause <code>simps</code> to do this in the first place? <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>?</p>",
        "id": 233291764,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617702024
    },
    {
        "content": "<p>Do you need something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">homeo</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233292255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617702280
    },
    {
        "content": "<p>It looks like <code>≃ₜ </code> is missing a <code>has_coe_to_fun</code>?</p>",
        "id": 233292287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617702300
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#function%20coercion\">https://leanprover-community.github.io/mathlib_docs/notes.html#function%20coercion</a> may be relevant. I don't know what <code>≃ₜ</code> is so can't look at the docs for it</p>",
        "id": 233292567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617702410
    },
    {
        "content": "<p>I think it's <code>homeomorph</code> (test: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph\">docs#homeomorph</a>)</p>",
        "id": 233292670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617702479
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph.has_coe_to_fun\">docs#homeomorph.has_coe_to_fun</a></p>",
        "id": 233292804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617702534
    },
    {
        "content": "<p>I think this is because <code>homeomorph</code> is not an <code>old_structure_cmd</code> like the other equivs</p>",
        "id": 233292970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617702627
    },
    {
        "content": "<p>But your suggestion may still work</p>",
        "id": 233293047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617702664
    },
    {
        "content": "<p>This is unfortunately not supported yet. <br>\nAs Eric said, the reason is that <code>homeomorph</code> is not an <code>old_structure_cmd</code>, so therefore, there is no single projection <code>homeomorph a b -&gt; (a -&gt; b)</code>. Therefore, to support this, <code>simps</code> would have to look at a composition of projections and a custom projection for that. That is not supported yet, but it is at the top of the list of <a href=\"https://github.com/leanprover-community/mathlib/issues/5489\">#5489</a>. I'll see if I can implement it soon(ish).</p>",
        "id": 233343306,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1617723974
    },
    {
        "content": "<p>Why don't we make all structures old structures?</p>",
        "id": 233346168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617725025
    },
    {
        "content": "<p>This is implemented in <a href=\"https://github.com/leanprover-community/mathlib/issues/7074\">#7074</a>. <br>\n still have to test it in some examples of mathlib.</p>\n<p>Are there other structures like <code>homeomorph</code> that extend a structure without <code>old_structure_cmd</code> and that have a coercion to functions?</p>",
        "id": 233425859,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1617766259
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rel_embedding\">docs#rel_embedding</a>, and probably everything in that file</p>",
        "id": 233442340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617779352
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_homeomorph\">docs#local_homeomorph</a></p>",
        "id": 233751732,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617928745
    }
]