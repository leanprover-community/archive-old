[
    {
        "content": "<p>If I run <code>obtain ⟨l, w⟩ := e</code>, where <code>e</code> is some existential, and the goal is not a prop, I (quite reasonably) get the error <code>induction tactic failed, recursor 'Exists.dcases_on' can only eliminate into Prop</code>.</p>\n<p>However, as a mathematician, I really don't care, and would prefer that <code>obtain</code> could automatically use <code>Exists.some</code> and <code>Exists.some_spec</code> (or something functionally equivalent). </p>\n<p>Could/should we do this? I'm worried that it would have to be an <code>Exists</code> specific hack.</p>",
        "id": 240581393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622194654
    },
    {
        "content": "<p>I'd be happy with <code>obtain!</code> as syntax if people are scared of allowing this as default behaviour.</p>",
        "id": 240581415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622194670
    },
    {
        "content": "<p>I have found myself sometimes writing <code>apply nonempty.some _,</code> before the <code>obtain</code> line, and then <code>apply nonempty.intro,</code> afterwards when I am in a hurry and just want my witness. :-)</p>",
        "id": 240581560,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622194751
    },
    {
        "content": "<p>I think it would be good to have <code>obtain!</code>, since I can imagine this syntax unifying with <code>let</code> et al and it's not that unusual to use it for programs and other data, and using noncomputable stuff silently as a fallback will cause weird errors</p>",
        "id": 240584234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622196115
    },
    {
        "content": "<p>In the same vein, I'd also still like <code>by_contra!</code></p>",
        "id": 240589015,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622199408
    },
    {
        "content": "<p>I prefer by_cases, by_contra, and obtain because they're typically used in proofs and most lemmas already use choice.  But I could put up with the apostrophe if the error message included a hint to add it.</p>",
        "id": 240591069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622201059
    },
    {
        "content": "<p>You could perhaps mock this up from <code>choose</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  a : ℕ</span>\n<span class=\"cm\">  ha : a = a + 1</span>\n<span class=\"cm\">  ⊢ ℕ</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">37</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240600319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622206859
    }
]