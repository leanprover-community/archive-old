[
    {
        "content": "<p>Gaetan Gilbert made a Coq type checker for lean in order the help understand the differences. I think it's very useful in that way.<br>\n<a href=\"https://coq.discourse.group/t/alpha-announcement-coq-is-a-lean-typechecker/581\" target=\"_blank\" title=\"https://coq.discourse.group/t/alpha-announcement-coq-is-a-lean-typechecker/581\">https://coq.discourse.group/t/alpha-announcement-coq-is-a-lean-typechecker/581</a></p>",
        "id": 186803454,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1580231303
    },
    {
        "content": "<p>That seems like a really thorough comparison. Chapeau!</p>",
        "id": 186804882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580232254
    },
    {
        "content": "<p>This is cool! I'm not really clear what's meant by this line:</p>\n<blockquote>\n<p>The whole stdlib cannot be checked as some conversion problems are<br>\npathological. two_pos seems a typical example (0 &lt; 2 in an ordered<br>\nfield). </p>\n</blockquote>\n<p>I'm probably missing something, does anyone know what the issue is with 0 &lt; 2?</p>",
        "id": 186806965,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580233688
    },
    {
        "content": "<p>I just saw that <span class=\"user-mention\" data-user-id=\"243878\">@Gaëtan Gilbert</span> also has an account here. So we can ask him directly <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 186807137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580233802
    },
    {
        "content": "<p>Yes, this looks really cool indeed. Also interesting to see some small kernel differences between Coq and Lean I have never seen before.</p>",
        "id": 186807665,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580234068
    },
    {
        "content": "<p>It means that some conversion problem involved in checked the proof of 0&lt;2 is difficult for Coq. I haven't investigated yet, I guess it starts unfolding the wrong thing then gets lost.</p>",
        "id": 186807681,
        "sender_full_name": "Gaëtan Gilbert",
        "timestamp": 1580234079
    },
    {
        "content": "<p>I also don't know what the problem is with <code>two_pos</code>. <br>\nFor the lazy:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">two_pos</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">unfold</span> <span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">add_pos</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">zero_lt_one</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>and <code>#print two_pos</code> gives</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">two_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n    <span class=\"o\">(</span><span class=\"n\">id</span>\n       <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">b_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_3</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n           <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">gt</span> <span class=\"n\">e_2</span><span class=\"o\">)</span> <span class=\"n\">e_3</span><span class=\"o\">)</span>\n          <span class=\"mi\">2</span>\n          <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">bit0</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>\n          <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">add_pos</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Maybe it's the weird identity function generated by <code>unfold</code> that causes problems.</p>",
        "id": 186807862,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580234180
    },
    {
        "content": "<p>Hmm, maybe. I would have guessed that the proof of <code>two_pos</code> doesn't have that much that's even possible to unfold. But Lean isn't happy with <code>#reduce two_pos</code> either.</p>",
        "id": 186808427,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580234442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> remember when you used to complain about proving things about numerals? Turns out the proofs are actually hard :p</p>",
        "id": 186808855,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580234629
    },
    {
        "content": "<p>For me, <code>#reduce @two_pos</code> takes a couple of seconds. There is still a bunch to unfold, with all the substitutions involved in the following definitions (used in <code>two_pos</code>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">add_pos</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">add_lt_add_right</span>\n</pre></div>\n\n\n<p>Maybe Coq is busy unfolding all these, which doesn't seem to be necessary.</p>",
        "id": 186808987,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580234670
    },
    {
        "content": "<p>yeah my ideas about what maths is \"hard\" have changed rather radically in the last 2.5 years...</p>",
        "id": 186809012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580234685
    },
    {
        "content": "<p>OK I figured out why two_pos is slow<br>\nIn Coq we try reducing terms before testing if they're proof irrelevant <br>\nIf I change that order two_pos checks basically instantly</p>\n<p>The reason we picked that order is basically that all our benches use only relevant terms (since sprop is still new), and for those it's faster to reduce first</p>",
        "id": 186810230,
        "sender_full_name": "Gaëtan Gilbert",
        "timestamp": 1580235244
    },
    {
        "content": "<p>What is Coq's <code>sprop</code>?</p>",
        "id": 186810287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580235284
    },
    {
        "content": "<p>It's Lean's <code>Prop</code>: a universe that is definitionally proof irrelevant.</p>",
        "id": 186810318,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580235303
    },
    {
        "content": "<p>Coq's <code>Prop</code> is not definitionally proof irrelevant, but you can add proof irrelevance as an axiom.</p>",
        "id": 186810364,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580235337
    },
    {
        "content": "<p>I see. So the issue is <code>rfl</code> working or not?</p>",
        "id": 186810394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580235357
    },
    {
        "content": "<p>Hey this is a really cool way to check <code>sprop</code> :-)</p>",
        "id": 186810455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580235374
    },
    {
        "content": "<p>There will be issues with quotients as well, presumably? I never quite understood <a href=\"https://leanprover.github.io/reference/expressions.html#computation\" target=\"_blank\" title=\"https://leanprover.github.io/reference/expressions.html#computation\">the Lean reference manual</a> here: it seems to give a definition of <code>rfl</code> which doesn't seem (to me) to imply that <code>quot.lift f h (quot.mk r a) = f a</code> is defeq.</p>",
        "id": 186810728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580235545
    },
    {
        "content": "<p>Yes, quotients are also an issue, but there is a trick in Coq using so-called Private Inductive types. This has also been used to implement higher inductive types in the Coq-HoTT library (a quotient is an example of a higher inductive type).</p>",
        "id": 186810976,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580235695
    },
    {
        "content": "<p>It's quite a hack, the idea is the following. You privately define the quotient <code>A / ~</code> to be just <code>A</code> (or a inductive type that is isomorphic to <code>A</code>): then it's very easy to define functions <code>quot.lift</code> and <code>quot.mk</code> such that the rule <code>quot.lift f h (quot.mk r a) = f a</code> holds definitionally. Of course, you don't get the rule that if <code>x ~ x'</code> then <code>[x] = [x']</code>, but you can add that as as an (inconsistent) axiom. Then you declare everything that you don't want to use as \"private\" (for example the fact that <code>A / ~</code> was implemented as <code>A</code>), so that you cannot use these things anymore. <br>\nThe final result is that from outside the private module, everything you can see is exactly the behavior of a quotient.</p>",
        "id": 186811352,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580235912
    },
    {
        "content": "<p>Here is another explanation: <a href=\"https://dl.acm.org/doi/pdf/10.1145/3018610.3018615?download=true\" target=\"_blank\" title=\"https://dl.acm.org/doi/pdf/10.1145/3018610.3018615?download=true\">https://dl.acm.org/doi/pdf/10.1145/3018610.3018615?download=true</a><br>\n(Section \"Higher Inductive Types\")</p>",
        "id": 186811725,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580236135
    },
    {
        "content": "<p>You CS guys are so imaginative ;-)</p>",
        "id": 186811886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580236205
    },
    {
        "content": "<p>I'll try explaining quotients using this technique to my undergraduates when I teach them next year.</p>",
        "id": 186811923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580236233
    },
    {
        "content": "<p>if it's good enough for the computer, it's good enough for them.</p>",
        "id": 186811979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580236266
    },
    {
        "content": "<p>So basically it's controlled inconsistency? :/</p>",
        "id": 186826396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580244048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243878\">@Gaëtan Gilbert</span> Have you looked at all at the reverse process, Coq -&gt; Lean? I've been bugging all coq people I know to tell me how the kernel typechecking algorithm works, because it's not completely documented anywhere outside the ML</p>",
        "id": 186826584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580244172
    },
    {
        "content": "<p>Is there an analogue of the Lean output format for Coq?</p>",
        "id": 186826613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580244184
    },
    {
        "content": "<p>Coq -&gt; Lean is way harder due to universe cumulativity (I wouldn't be surprised if it's impossible)<br>\nOther universe issues:</p>\n<ul>\n<li>non recursively uniform parameters (AFAICT translating them to regular indices only changes the universe of the inductive)</li>\n<li>template universe polymorphism (a predecessor of universe polymorphism, kinda underspecified, it has caused repeated inconsistencies but hasn't been removed because it's still in use everywhere through sigma types and list and so on)</li>\n</ul>\n<p>If you get past universe issues you also have</p>\n<ul>\n<li>your pattern matching to eliminator elaboration must be as strong as the termination condition implemented in Coq (not sure how hard this is, I'm not an expert on the termination checker)</li>\n<li>mutual and nested inductives (I think Lean already has some system to deal with those?) </li>\n<li>modules. You could just reduce functor applications and treat the resulting flat modules as namespaces (AFAIK the checker does something like that). If module aliases or Include are used you will not have a fun time.</li>\n</ul>\n<p>Less used:</p>\n<ul>\n<li>records with definitional eta (not used in Coq's stdlib)</li>\n<li>coinductives (not used much afaik)</li>\n<li>primitive integers and floats (also not used much afaik)</li>\n</ul>\n<p>No output format, parsing vo files while ignoring non-kernel stuff may be feasible if you tie yourself to a specific Coq version.</p>",
        "id": 186831409,
        "sender_full_name": "Gaëtan Gilbert",
        "timestamp": 1580247198
    },
    {
        "content": "<p>PS maybe using serapi or a custom plugin one could get a reasonable output format</p>",
        "id": 186831569,
        "sender_full_name": "Gaëtan Gilbert",
        "timestamp": 1580247301
    },
    {
        "content": "<blockquote>\n<p>it has caused repeated inconsistencies but hasn't been removed because it's still in use everywhere through sigma types and list and so on</p>\n</blockquote>\n<p>So to implement this part you have to find an inconsistency in Lean?</p>",
        "id": 186834184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580249078
    },
    {
        "content": "<p>There are no known inconsistencies left in it, it's just a historically buggy part of Coq</p>",
        "id": 186834800,
        "sender_full_name": "Gaëtan Gilbert",
        "timestamp": 1580249509
    },
    {
        "content": "<p>On the other hand I have seen people getting into universe messes here -- they are often sorted out in the end but I have often wondered whether cumulative universes would make life easier. I'm a believer in ZFC so I would be happy if everything sensible just lived in <code>Type</code> (other than the things which are \"obviously not sets\")</p>",
        "id": 186839078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580252260
    },
    {
        "content": "<p>I just got to the part of <a href=\"https://www.irif.fr/~sozeau/research/publications/drafts/Coq_Coq_Correct.pdf\" target=\"_blank\" title=\"https://www.irif.fr/~sozeau/research/publications/drafts/Coq_Coq_Correct.pdf\">Coq Coq Correct!</a> that deals with the most subtle part of the theory, the guard condition on recursion inside a fixpoint, but they axiomatized it, so there is no definition :(</p>",
        "id": 186847777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580260564
    },
    {
        "content": "<p>This hit HN front page: <a href=\"https://news.ycombinator.com/item?id=22171305\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=22171305\">https://news.ycombinator.com/item?id=22171305</a></p>",
        "id": 186861580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580282275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You're getting some indirect credit. See the first comment.</p>",
        "id": 186862131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580282961
    },
    {
        "content": "<p>Updated stdlib stats after fixing the issue examplified by <code>two_pos</code> (we need to check for proof irrelevance before comparing structurally):</p>\n<p>Lean Import with 10s timeout, set upfront instances and set conv check:<br>\n320s, 1GB RAM<br>\nvo size 111MB<br>\n11 skips (3 timeout, 8 not instantiated)</p>\n<p>The timeouts are <code>bla.equations._eqn_1</code>, where <code>bla</code> in</p>\n<ul>\n<li><code>tactic.delta_config.max_steps._default</code></li>\n<li><code>char.of_nat</code></li>\n<li><code>simp.default_max_steps</code><br>\nThese all involve moderately sized integers (<code>of_nat</code> through <code>char.is_valid</code>)</li>\n</ul>\n<p>I actually already did a hack for <code>std.prec.max.equations._eqn_1</code>, setting <code>prec.max</code> to the <code>Expand</code> reduction strategy (when comparing 2 applied constants we need to decide which one we try to reduce first, <code>Expand</code> is the most eager strategy). That may be correct for the <code>max_steps</code> but doesn't seem right for <code>of_nat</code>.<br>\nWhat does Lean do here?</p>",
        "id": 186883196,
        "sender_full_name": "Gaëtan Gilbert",
        "timestamp": 1580303119
    },
    {
        "content": "<p>Lean unfolds the definition with the largest definitional height, which I believe is the max of the definitional heights of all referenced definitions, plus one</p>",
        "id": 186883738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580303526
    },
    {
        "content": "<p>Looking at <code>char.of_nat</code>, I see no expensive unfolding at all</p>",
        "id": 186883916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580303671
    },
    {
        "content": "<p>Thanks, that looks like it works. The Lean stdlib now fully passes:</p>\n<ul>\n<li>284s runtime, 1.3GB RAM usage</li>\n<li>resulting vo takes 116MB</li>\n<li>coqchk takes 540s and 1.1GB RAM<br>\nIf we skip structure validation coqchk takes 51s and 720MB RAM<br>\nIf we use OCaml's Marshal instead of our custom Analyze coqchk takes 45s and 380MB RAM</li>\n</ul>",
        "id": 186888854,
        "sender_full_name": "Gaëtan Gilbert",
        "timestamp": 1580307466
    },
    {
        "content": "<blockquote>\n<p>So basically it's controlled inconsistency? :/</p>\n</blockquote>\n<p>The technique was explained here in agda:<br>\n<a href=\"https://homotopytypetheory.org/2011/04/23/running-circles-around-in-your-proof-assistant/\" target=\"_blank\" title=\"https://homotopytypetheory.org/2011/04/23/running-circles-around-in-your-proof-assistant/\">https://homotopytypetheory.org/2011/04/23/running-circles-around-in-your-proof-assistant/</a><br>\nIt's a hack to add HITs to a type theory that does not have them. Really, we'd like to have a cubical type theory in the future.</p>",
        "id": 186990610,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1580394028
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️ to that!</p>",
        "id": 187052614,
        "sender_full_name": "Tim Carstens",
        "timestamp": 1580438597
    }
]