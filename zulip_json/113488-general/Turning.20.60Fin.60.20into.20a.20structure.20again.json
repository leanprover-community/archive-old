[
    {
        "content": "<p>As some of you might have noticed, in Lean 4 <code>Fin</code> is a structure.  Just like it was in Lean 3 before Johan PRd <a href=\"https://github.com/leanprover-community/lean/pull/452\">lean#452</a>.  However there are now good reasons to make <code>Fin</code> a structure.  For example, Leo plans implement some compiler optimizations for <code>Fin</code>s that would not be possible with the subtype definition.</p>\n<p>In my opinion, the structure definition has lots of other advantages.  For example, the unifier won't reduce <code>Fin n</code> to <code>Subtype (· &lt; n)</code> and then try to unify the less-than function (and its type class instance).  The difference between <code>Fin.mk</code> and <code>Subtype.mk</code> disappears.  And the cases tactic produces <code>Fin.mk</code> instead of <code>Subtype.mk</code> (as it does now).</p>\n<p>A big reason behind Johan's change was that we could reuse API for subtypes.  From what I can tell, we have since added lots of API around <code>function.injective</code> and <code>function.embedding</code> which works for general subobjects and not just literal subtypes.  This seems to significantly reduce the pain points mentioned by Johan.</p>\n<p>I have tried out changing <code>fin</code> into a structure again in mathlib, and it requires <a href=\"https://github.com/leanprover-community/mathlib/compare/finstruct?expand=1\">only very little change</a>.  The biggest one is the <code>locally_finite_order</code> instance which unfortunately doesn't generalize to <code>function.injective</code> (as it requires a computable inverse).  Are there any objections to change <code>fin</code> to a structure?</p>",
        "id": 295831170,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661774990
    },
    {
        "content": "<p>No objections for me. You've made a strong case for the change.</p>",
        "id": 295831512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661775120
    },
    {
        "content": "<p>The fix you introduced for the <code>locally_finite_order</code> instance looks good to me, so no objection.</p>",
        "id": 295835236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661776497
    },
    {
        "content": "<p>That link doesn't seem to work for me.</p>",
        "id": 297154683,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662343776
    },
    {
        "content": "<p>The branch was deleted after merged in <a href=\"https://github.com/leanprover-community/mathlib/pull/16292\">#16292</a>.</p>",
        "id": 297156858,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662346583
    },
    {
        "content": "<p>It looks like the documentation still says : <code>fin n is the subtype of ℕ consisting of natural numbers strictly smaller than n</code>. Even though that isn't how it is defined.</p>",
        "id": 297225130,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662383736
    },
    {
        "content": "<p>Maybe we should just copy the Lean 4 docstring (authored by Mario):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`Fin n` is a natural number `i` with the constraint that `0 ≤ i &lt; n`.</span>\n<span class=\"sd\">It is the \"canonical type with `n` elements\".</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>Although the <code>0 ≤ i</code> is a bit redundant for a natural number..</p>",
        "id": 297225746,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662383943
    },
    {
        "content": "<p>Shouldn't it say \"a term of type <code>Fin n</code> ...\"?</p>",
        "id": 297268665,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662404914
    }
]