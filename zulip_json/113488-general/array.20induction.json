[
    {
        "content": "<p>Given a theorem statement involving an <code>array</code>, what might I use in the proof where I would normally use induction if the <code>array</code> were instead a <code>list</code>?</p>",
        "id": 132096387,
        "sender_full_name": "Sean Leather",
        "timestamp": 1534234348
    },
    {
        "content": "<p>In particular, I have <code>array.to_list</code> in the statement. It seems like I might use induction on the <code>nat</code> size of the array, since the core of <code>array.to_list</code> is <code>d_array.rev_iterate_aux</code>.</p>",
        "id": 132096647,
        "sender_full_name": "Sean Leather",
        "timestamp": 1534234656
    },
    {
        "content": "<p>Or: not the size but the index into the <code>d_array</code>.</p>",
        "id": 132096728,
        "sender_full_name": "Sean Leather",
        "timestamp": 1534234749
    },
    {
        "content": "<p>It depends on the statement</p>",
        "id": 132099746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534238270
    },
    {
        "content": "<p>If you can have the array length vary, it might be easier to prove by induction over all vectors of any length</p>",
        "id": 132099801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534238325
    },
    {
        "content": "<p>If the array is fixed, then you may need to do induction on the index, which is messier</p>",
        "id": 132099817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534238350
    },
    {
        "content": "<p>So, I've got this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">to_list_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"mi\">0</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>And I'm looking at this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">to_list_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span> <span class=\"bp\">::</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">pop_back</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>But I think <code>to_list</code> does a reverse fold, which means the above is not true.</p>",
        "id": 132099938,
        "sender_full_name": "Sean Leather",
        "timestamp": 1534238500
    },
    {
        "content": "<p><code>to_list</code> produces a list in the same order as the index</p>",
        "id": 132101671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534240863
    },
    {
        "content": "<p><code>rev_list</code> produces a list in reverse order (which turns out to be a bit easier to define)</p>",
        "id": 132101681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534240884
    },
    {
        "content": "<p>so I think you want that statement to be on <code>rev_list</code></p>",
        "id": 132101744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534240954
    },
    {
        "content": "<p>This reminds me something: do we have an eliminator for <code>finset</code> that eliminates a <code>s : finset</code> to any <code>Sort</code>?</p>",
        "id": 132118289,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1534261239
    },
    {
        "content": "<p>Somewhere in mathlib?</p>",
        "id": 132118300,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1534261257
    },
    {
        "content": "<p>If it is going all the way back to lists under permutation, it's easier to just do cases on the finset and the <code>quot.lift</code>, i.e. define it via multiset</p>",
        "id": 132118802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534261895
    },
    {
        "content": "<p>what would the type of such an eliminator be?</p>",
        "id": 132118810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534261912
    },
    {
        "content": "<p>Plus, if you are doing dependent elimination over a quotient the compatibility hypothesis is a mess to work with</p>",
        "id": 132118881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534261969
    },
    {
        "content": "<p>Right, I just looked into the <code>multiset.lean</code> and saw your comments on the dependent recursor</p>",
        "id": 132119121,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1534262226
    }
]