[
    {
        "content": "<p>Last week I used this notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"Σ\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">x</span> <span class=\"s2\">\":\"</span> <span class=\"n\">X</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Π\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">x</span> <span class=\"s2\">\":\"</span> <span class=\"n\">X</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"λ\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">x</span> <span class=\"s2\">\":\"</span> <span class=\"n\">X</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span>  <span class=\"n\">x</span>  <span class=\"s2\">\":\"</span>  <span class=\"n\">X</span>  <span class=\"s2\">\")\"</span> <span class=\"s2\">\"↦\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"∀\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">x</span> <span class=\"s2\">\":\"</span> <span class=\"n\">X</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">p</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"∃\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">x</span> <span class=\"s2\">\":\"</span> <span class=\"n\">X</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">p</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⊛\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\"≡\"</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">):</span><span class=\"bp\">⊛</span>\n</code></pre></div>\n<p>I would like people to criticize it or appraise how difficult it would be to follow this.</p>\n<p>I was a bit irked that the notation wasn't already symmetrical or more uniform but I might have to let that go since it takes a lot of effort to read the modifications.</p>",
        "id": 320493755,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673368809
    },
    {
        "content": "<blockquote>\n<p>I was a bit irked that the notation wasn't already symmetrical or more uniform</p>\n</blockquote>\n<p>What do you mean by this?</p>",
        "id": 320495473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673369264
    },
    {
        "content": "<p>Changing notations is the greatest sin, it is greater than the sum of all the sin possibly committed by bad notation.</p>",
        "id": 320497208,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673369749
    },
    {
        "content": "<p>But what about the cos?</p>",
        "id": 320497624,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673369859
    },
    {
        "content": "<p>e.g. on the left there is : where on the right there is either , or =&gt;. On the left there is no Sigma' just Sigma. On the left everything is a symbol and there are no words of different length. </p>\n<p>I'm convinced it's esoteric now though so it's gonna have to go.</p>",
        "id": 320501957,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673371014
    },
    {
        "content": "<p>These pieces of notation have different purposes. For example, <code>:</code> is used for type ascription and <em>only</em> type ascription, so whenever you see <code>:</code> you instantly know we have an expression of a particular type.</p>",
        "id": 320502273,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371122
    },
    {
        "content": "<p>In your notation, <code>:</code> can mean the type of an expression or (for example) the body of a function binder.</p>",
        "id": 320502403,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371168
    },
    {
        "content": "<p>Every other programming language I've used makes this kind of distinction to aid readability, so I don't think it can really be called esoteric.</p>",
        "id": 320502563,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371214
    },
    {
        "content": "<p>Also note that your usage of notation is not what lean \"wants\" you to do - using <code>Sigma'</code> is in some sense a sign you should be making your own <code>structure</code>s or <code>inductive</code>s.</p>",
        "id": 320502829,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371305
    },
    {
        "content": "<blockquote>\n<p>where on the right there is either <code>,</code> or <code>=&gt;</code></p>\n</blockquote>\n<p>I also find this sllightly strange, but only because I've been trained on Lean 3 where it's <code>,</code> everywhere. Perhaps someone more familiar with lean4 has a good explanation for what makes <code>fun</code> binders special.</p>",
        "id": 320502995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673371343
    },
    {
        "content": "<p>Using <code>=&gt;</code> and <code>-&gt;</code> for functions matches most other programming languages. Lean 4 seems like a step in that direction.</p>",
        "id": 320503135,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371382
    },
    {
        "content": "<p><code>∀</code> has no other-language equivalent, so presumably it's just spelled the mathematical way.</p>",
        "id": 320503232,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371418
    },
    {
        "content": "<p>I guess the fair comparison is to use the new Lean4 notation</p>\n<ul>\n<li><code>(a : α) → P a</code> not <code>∀ a, P a</code> or <code>forall a, P a</code></li>\n<li><code>(x : X) × F</code> not <code>Σ (x : X), F</code></li>\n</ul>\n<p>and then the use  of arrows is consistent (i.e. the commas are gone entirely)</p>",
        "id": 320503433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673371473
    },
    {
        "content": "<p><code>∃</code> doesn't fit that model though; unless you write <code>∃ x, p x</code> as <code>Exists fun x =&gt; p x</code>.</p>",
        "id": 320504047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673371640
    },
    {
        "content": "<p>I guess we just need an infix operator for <code>∃</code> then!</p>",
        "id": 320504166,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371677
    },
    {
        "content": "<p>The <code>:</code> syntax for function bodies is not without precedent, though - Python uses it. But notably, Python doesn't have (often) type ascriptions.</p>",
        "id": 320504301,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371708
    },
    {
        "content": "<p>Python's type ascriptions were added as an afterthought after most of the notation was already allocated, so are not really a good example to compare to</p>",
        "id": 320504429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673371765
    },
    {
        "content": "<p>Yeah, absolutely.</p>",
        "id": 320504442,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371772
    },
    {
        "content": "<p>I do wonder if <code>∃ x, p x</code> should be spelt <code>∃ x =&gt; p x</code> for consistency</p>",
        "id": 320504586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673371807
    },
    {
        "content": "<p>I think that would be nice to be honest</p>",
        "id": 320504670,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673371844
    },
    {
        "content": "<p>But then it's less consistent with <code>∀</code>. Before I learned type theory, I thought that <code>∀</code> and <code>∃</code> were basically the same kind of object, and it was nice to have their syntaxes align.</p>",
        "id": 320505415,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673372054
    },
    {
        "content": "<p>If <code>Σ (x : X), F x</code> is spelled <code>(x : X) × F x</code> then should <code>∃ x, p x</code> be spelled <code>(x : X) ∧ p x</code>?</p>",
        "id": 320505888,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673372205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"559197\">Kind Bubble</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20criticisms/near/320501957\">said</a>:</p>\n<blockquote>\n<p>there are no words of different length. </p>\n</blockquote>\n<p>I don't think this is really an issue. The expressions we're talking about are really fundamentally different objects, and there's no reason (other than aesthetics) that they <em>need</em> to have the same length.</p>",
        "id": 320505907,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673372209
    },
    {
        "content": "<p><code>(x : X) ∧ p x</code> certainly sounds like notation that should exist, even if we choose not to prefer it in mathlib.</p>",
        "id": 320506238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673372303
    },
    {
        "content": "<p>I do like it, but at least to me that notation suggests <code>X : Prop</code></p>",
        "id": 320506380,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673372353
    },
    {
        "content": "<p>Almost like a Sigma' where both types are <code>Prop</code>s</p>",
        "id": 320506445,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673372373
    },
    {
        "content": "<p>Yes, I guess that would have the weirdness where <code>(x : X) ∧ (y : X) ∧ p x y</code> is legal but <code>(x : X) ∧ (y : X)</code> is not</p>",
        "id": 320506523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673372401
    },
    {
        "content": "<p>But maybe that's already the case for <code>×</code>?</p>",
        "id": 320506602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673372416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20criticisms/near/320503433\">said</a>:</p>\n<blockquote>\n<p>I guess the fair comparison is to use the new Lean4 notation</p>\n<ul>\n<li><code>(a : α) → P a</code> not <code>∀ a, P a</code> or <code>forall a, P a</code></li>\n<li><code>(x : X) × F</code> not <code>Σ (x : X), F</code></li>\n</ul>\n<p>and then the use  of arrows is consistent (i.e. the commas are gone entirely)</p>\n</blockquote>\n<p>Oh I didn't know this works for dependent types.</p>",
        "id": 320506785,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673372477
    },
    {
        "content": "<p>Since notation seems to allow all sorts of new syntactic statements, is it possible to confuse lean with ambiguities? Or is it the opposite, are there limitations around what is allowed inside  <code>notation</code></p>",
        "id": 320522104,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1673376986
    }
]