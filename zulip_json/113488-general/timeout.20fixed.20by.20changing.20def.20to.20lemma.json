[
    {
        "content": "<p>For the third time this month someone at Imperial (this time Jujian Zhang) has a situation where a construction seems to work fine but the kernel goes into a loop when trying to accept it. In all cases this happens in a <code>def</code>, and if the <code>def</code> is changed to <code>lemma</code> or <code>example</code> then the loop does not occur (but of course this is not a workaround because it needs to be a def). <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> expressed some surprise the first time he saw this phenomenon. One hypothesis is that Lean is getting stuck working out whether something is noncomputable or not. Is this a feasible hypothesis? What are other possibilities which might cause this issue? Jujian hasn't minimised his example yet; the other two examples are <a href=\"#narrow/stream/113488-general/topic/another.20really.20horrible.20timeout/near/263780183\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/another.20really.20horrible.20timeout/near/263780183</a> and <a href=\"#narrow/stream/113488-general/topic/crazy.20time-out/near/263470182\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/crazy.20time-out/near/263470182</a> .</p>",
        "id": 264300684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639056637
    },
    {
        "content": "<p>Is this only while writing the decl, or also after you are completely done?</p>",
        "id": 264302495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639057447
    },
    {
        "content": "<p>I'm pretty convinced of that hypothesis, because wrapping the function in something known-noncomputable makes the problem go away, but wrapping it in something known-computable does not</p>",
        "id": 264305929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639058892
    },
    {
        "content": "<p>The noncomputability checker tries to reduce terms iirc, so I can see how that could cause timeouts.  Unfortunately I don't think we have any trace options to see what whnf is doing, so debugging this might be hard.  I would expect that the issue could be solved by strategically making some definitions irreducible.</p>",
        "id": 264306894,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639059302
    },
    {
        "content": "<p>we could also just add a patch to lean3 that makes something like <code>noncomputable!</code> which doesn't try to check if you're wrong</p>",
        "id": 264307070,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639059365
    },
    {
        "content": "<p>i'm not sure if that will carry over well on synport, however...</p>",
        "id": 264307109,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639059383
    },
    {
        "content": "<p>Johan if you want to see it with your own eyes then Amelia's example is the simplest:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Γ₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_monoid_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>",
        "id": 264309220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639060305
    },
    {
        "content": "<p>Change the def to a lemma and it's fine.</p>",
        "id": 264309252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639060320
    },
    {
        "content": "<p>Yes, you have a <code>sorry</code> right there.</p>",
        "id": 264309692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639060493
    },
    {
        "content": "<p>I think that's a known bug.</p>",
        "id": 264309707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639060500
    },
    {
        "content": "<p>Write the def as a <code>lemma</code>, and change it to <code>def</code> when you are done. I had to do that 50x in LTE.</p>",
        "id": 264309743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639060521
    },
    {
        "content": "<p>No, this is worse.</p>",
        "id": 264309792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639060543
    },
    {
        "content": "<p>Take a look at Maria's example above -- I link to it. You get timeouts even if you complete the definition.</p>",
        "id": 264309897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639060574
    },
    {
        "content": "<p>Aha, that's bad.</p>",
        "id": 264310271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639060744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20fixed.20by.20changing.20def.20to.20lemma/near/264307109\">said</a>:</p>\n<blockquote>\n<p>we could also just add a patch to lean3 that makes something like <code>noncomputable!</code> which doesn't try to check if you're wrong</p>\n<p>i'm not sure if that will carry over well on synport, however...</p>\n</blockquote>\n<p>I don't see why not. We can handle pretty much anything lean 3 wants to do, we just have to have a reasonable lean 4 equivalent. In this case, that might either mean stripping the <code>!</code> in the lean 4 version, or adding support for it to lean 4 if the same issue manifests in lean 4.</p>",
        "id": 264335559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639070821
    },
    {
        "content": "<p>Kevin, does it actually say \"deterministic timeout\" on your machine or does it just never load?</p>",
        "id": 264344568,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639074259
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/bNu_b8HcQPsRkHi9SsNpuMOE/image.png\">image.png</a> this issue is weird....</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bNu_b8HcQPsRkHi9SsNpuMOE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bNu_b8HcQPsRkHi9SsNpuMOE/image.png\"></a></div>",
        "id": 264345980,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639074773
    },
    {
        "content": "<p>ok, this is way beyond my knowledge of Lean's codebase.... it doesn't seem to be solely the <code>noncomputableness</code>, it seems to be stuck within the <code>compiler_step_visitor</code>; but at some point the memory stops climbing, so there's no actual timeout because there's not enough memory allocations</p>",
        "id": 264349725,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639076322
    },
    {
        "content": "<p>trying to find exactly where this leak/infinite loop is happening is hopeless manually because I don't have access to a profiler, and it only happens after a truly enormous amount of memory has been guzzled (+, the code is super slow at failing...)</p>",
        "id": 264349968,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639076409
    },
    {
        "content": "<blockquote>\n<p>we could also just add a patch to lean3 that makes something like noncomputable! which doesn't try to check if you're wrong</p>\n</blockquote>\n<blockquote>\n<p>i'm not sure if that will carry over well on synport, however...</p>\n</blockquote>\n<p>We don't even have <code>noncomputable theory</code> in Lean 4.  The Lean 4 <code>noncomputable</code> works like the <code>noncomputable!</code> you describe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n</code></pre></div>",
        "id": 264678282,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639386301
    },
    {
        "content": "<p>Does that emit any diagnostics?</p>",
        "id": 264679283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639386954
    },
    {
        "content": "<p>It would be a shame for lean not to remind you that something no longer needs to be <code>noncomputable</code> after you computablize its dependencies.</p>",
        "id": 264679382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639387007
    },
    {
        "content": "<p>No warnings or errors.</p>",
        "id": 264680505,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639387765
    },
    {
        "content": "<p>By the way, in Amelia's example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Γ₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_monoid_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>\n<p>this can be fixed by changing <code>def</code> to <code>lemma</code>, then generating the skeleton for the structure under construction, then filling in the non-Prop fields, sorrying the Prop fields, and then changing the <code>lemma</code> back to <code>def</code>. This was a trick Johan told me, he said he'd used it a ton in LTE. Maria's example (the subtype.val example) is nastier (and doesn't quite compile with mathlib master: the line <code>noncomputable instance : field (K_v K v) := @field_completion K _ (us' v) (tdr' v) _ (ug' v) _</code> needs to have the last <code>_</code> removed nowadays) because all definitions are there (and the variant she had had no sorrys at all IIRC). The timeout is extremely brittle -- Gabriel suggests fixing it by making things irreducible and I can't get this to work, but you can just add more things (e.g. making a new declaration P so that the subtype is {x // P x} \"fixes\" it). What scares me a bit about the latter approach is that the timeout might reappear the moment P is unfolded. But I've not seen this happening in practice.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"c1\">-- name the killer predicate</span>\n<span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span>\n\n<span class=\"c1\">-- safe subtype</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- bad subtype</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo1</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fine</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar1</span> <span class=\"o\">:</span> <span class=\"n\">foo1</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"c1\">-- fine</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar2</span> <span class=\"o\">:</span> <span class=\"n\">foo2</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>",
        "id": 264691362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639393904
    },
    {
        "content": "<p>Minimising (i.e. removing all mathlib imports) would be a bunch of work because I would have to set up a chunk of the algebra hierarchy and also there is a bunch of topology happening (completion of a topological field is a topological field) which seems to be important. Even extremely innocuous changes such as changing <code>∃</code> to <code>∀</code> in <code>foo2</code> make the problem go away, so it's not even clear that I would succeed; furthermore Gabriel has suggested that even if I did succeed then it might be very hard to figure out the problem, so I am minded to leave this for now. Initially I was worried that doing things like defining <code>P</code> above were just postponing the problem (i.e. that it would blow up in our face at the next definition), but perhaps they really should be regarded as a solution.</p>",
        "id": 264692084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639394293
    },
    {
        "content": "<p>Sorry, my theory turned out to be wrong.  It's not the noncomputable check that's timing out, but the VM compilation (in case you ever wanted to execute your <code>hmm</code> function).</p>\n<p>I don't think there's any way to disable VM compilation in Lean 3 except for marking things as noncomputable.  So this works as a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">force_noncomputable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function.const</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">classical.choice</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">force_noncomputable_def</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force_noncomputable</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Γ₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_monoid_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span>\n  <span class=\"n\">force_noncomputable</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- no longer times out</span>\n</code></pre></div>",
        "id": 264695049,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639396127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> can you get your code working with this? I've checked and it seems to solve both Amelia and Maria's problems. But with your sheaf I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- still (deterministic) timeout</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">presheaf</span> <span class=\"n\">BundledModule</span> <span class=\"n\">BundledModule.is_cat</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">PresheafOfModules2</span> <span class=\"n\">ℱ</span><span class=\"o\">]:</span>\n<span class=\"n\">PresheafOfModules1</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">force_noncomputable</span> <span class=\"o\">{</span> <span class=\"bp\">𝒪</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">R</span><span class=\"o\">,</span>\n         <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"n\">ℱ</span> <span class=\"o\">:=</span>\n    <span class=\"n\">force_noncomputable</span> <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">,</span>\n      <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">force_noncomputable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommGroup.of_hom</span> <span class=\"o\">(</span><span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">force_noncomputable</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n          <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span>  <span class=\"n\">linear_map.map_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n          <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n          <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}),</span> <span class=\"o\">},</span>\n  <span class=\"n\">is_module</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup.coe_of</span><span class=\"o\">],</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">res_compatible</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup.coe_of</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_zero</span><span class=\"o\">,</span> <span class=\"n\">functor.map_comp</span><span class=\"o\">,</span> <span class=\"n\">functor.map_id</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"n\">PresheafOfModules2.res_compatible</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">smul_def'</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>As you can see I just threw in <code>force_noncomputable</code> here there and everywhere and it didn't fix it (unless now it's actually timing out because the proof was already slow). But I know that you refactored the code after you showed it me. If you're interested in following this up can you create an example which depends only on mathlib rather than on your sheaf of modules work? I would be very interested to see if Gabriel's approach can be used to avoid your timeout!</p>",
        "id": 264698824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639398587
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">force_noncomputable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function.const</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">classical.choice</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">force_noncomputable_def</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force_noncomputable</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">presheaf</span> <span class=\"n\">BundledModule</span> <span class=\"n\">BundledModule.is_cat</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">force_noncomputable</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddCommGroup.of_hom</span> <span class=\"o\">(</span><span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n          <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span>  <span class=\"n\">linear_map.map_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n          <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.map_add</span><span class=\"o\">],</span>\n            <span class=\"gr\">sorry</span>\n          <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Unfortunately, it still gives me a timeout.</p>",
        "id": 264703950,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639401503
    },
    {
        "content": "<p>This <code>sorry</code> will still make lean complain that there is no more goals, but removing it gives a time out.</p>",
        "id": 264704049,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639401558
    },
    {
        "content": "<p>The strange thing is that for <code>map_zero'</code>, <code>rw linear_map.map_zero</code> works, but <code>linear_map.map_add</code> doesn't work for map_add'</p>",
        "id": 264704289,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639401674
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (i.e., with imports, etc.) please?</p>",
        "id": 264704330,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639401698
    },
    {
        "content": "<p>I am sorry about this. The context is that I am trying to work out if <code>(opens X)\\op \\functor BundledModule</code> is a sensible definition for sheaf of modules. So I had to define the category of bundled modules first. So the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is really not minimal at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.CommRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.sheaf</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.category.Top.opens</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">Top</span> <span class=\"n\">topological_space</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">restriction_of_scalar.has_scalar</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">restriction_of_scalar.restrict</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">is_module</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">has_scalar.smul</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_one</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">has_scalar.smul</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">has_scalar.smul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">has_scalar.smul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">has_scalar.smul</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">has_scalar.smul</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">restriction_of_scalar.has_scalar</span> <span class=\"n\">f</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">restriction_of_scalar.has_scalar'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">restriction_of_scalar.restrict</span> <span class=\"n\">f</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">restriction_of_scalar</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">restriction_of_scalar.smul_def'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">restriction_of_scalar.restrict</span> <span class=\"n\">f</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">restriction_of_scalar.functor</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"bp\">⥤</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">restriction_of_scalar.restrict</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m1</span> <span class=\"n\">m2</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.map_add</span><span class=\"o\">],</span>\n      <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">restriction_of_scalar.smul_def'</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">],</span>\n        <span class=\"n\">convert</span> <span class=\"n\">linear_map.map_smul</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">BundledModule</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">CommRing.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">restriction_of_scalar</span> <span class=\"o\">{</span><span class=\"n\">M1</span> <span class=\"n\">M2</span> <span class=\"o\">:</span> <span class=\"n\">BundledModule</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M1.R</span> <span class=\"bp\">⟶</span> <span class=\"n\">M2.R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BundledModule</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">M1.R</span><span class=\"o\">,</span>\n  <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">restriction_of_scalar.restrict</span> <span class=\"n\">f</span> <span class=\"n\">M2.M</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">restriction_of_scalar.R</span> <span class=\"o\">{</span><span class=\"n\">M1</span> <span class=\"n\">M2</span> <span class=\"o\">:</span> <span class=\"n\">BundledModule</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M1.R</span> <span class=\"bp\">⟶</span> <span class=\"n\">M2.R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">restriction_of_scalar</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">M1.R</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">restriction_of_scalar.M</span> <span class=\"o\">{</span><span class=\"n\">M1</span> <span class=\"n\">M2</span> <span class=\"o\">:</span> <span class=\"n\">BundledModule</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M1.R</span> <span class=\"bp\">⟶</span> <span class=\"n\">M2.R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">restriction_of_scalar</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">restriction_of_scalar.restrict</span> <span class=\"n\">f</span> <span class=\"n\">M2.M</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bundledMap</span> <span class=\"o\">(</span><span class=\"n\">M1</span> <span class=\"n\">M2</span> <span class=\"o\">:</span> <span class=\"n\">BundledModule</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M1.R</span> <span class=\"bp\">⟶</span> <span class=\"n\">M2.R</span><span class=\"o\">),</span> <span class=\"n\">M1.M</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">restriction_of_scalar</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">BundledModule.is_cat</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">BundledModule</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M1</span> <span class=\"n\">M2</span><span class=\"o\">,</span> <span class=\"n\">bundledMap</span> <span class=\"n\">M1</span> <span class=\"n\">M2</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">𝟙</span> <span class=\"n\">M.R</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n                       <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n                       <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}⟩,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M1</span> <span class=\"n\">M2</span> <span class=\"n\">M3</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">f.1</span> <span class=\"bp\">≫</span> <span class=\"n\">g.1</span><span class=\"o\">,</span>\n     <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">g.2</span> <span class=\"o\">(</span><span class=\"n\">f.2</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n       <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m1</span> <span class=\"n\">m2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map.map_add</span><span class=\"o\">],</span>\n       <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f'</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g'</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.id_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_smulₛₗ</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">,</span>\n          <span class=\"n\">restriction_of_scalar.smul_def'</span><span class=\"o\">,</span> <span class=\"n\">restriction_of_scalar.smul_def'</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">],</span>\n        <span class=\"n\">convert</span> <span class=\"n\">linear_map.map_smul</span> <span class=\"n\">g'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n      <span class=\"kd\">end</span> <span class=\"o\">}⟩,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M1</span> <span class=\"n\">M2</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">heq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M1</span> <span class=\"n\">M2</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">heq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">force_noncomputable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function.const</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">classical.choice</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">force_noncomputable_def</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force_noncomputable</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">presheaf</span> <span class=\"n\">BundledModule</span> <span class=\"n\">BundledModule.is_cat</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">force_noncomputable</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddCommGroup.of_hom</span> <span class=\"o\">(</span><span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n          <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span>  <span class=\"n\">linear_map.map_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n          <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n            <span class=\"c1\">-- the goal is :</span>\n            <span class=\"c1\">-- ⇑((ℱ.map h).snd) (m + m') = ⇑((ℱ.map h).snd) m + ⇑((ℱ.map h).snd) m'</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.map_add</span><span class=\"o\">],</span>\n            <span class=\"c1\">-- sorry</span>\n          <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264705272,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639402179
    },
    {
        "content": "<p>I was trying to see if I can write down a sheaf of modules like in textbook (a sheaf of abelian groups that are modules).</p>",
        "id": 264705410,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639402234
    },
    {
        "content": "<p>I though that maybe <code>AddCommGroup.of_hom</code> is causing trouble, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">presheaf</span> <span class=\"n\">BundledModule</span> <span class=\"n\">BundledModule.is_cat</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">force_noncomputable</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n      <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">linear_map.map_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"n\">linear_map.map_add</span><span class=\"o\">,</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"kd\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264705843,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639402469
    },
    {
        "content": "<p>this has exactly the same problem</p>",
        "id": 264705853,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639402480
    },
    {
        "content": "<p>Note that there are prop goals there which are being proved by <code>. obviously</code>, this is probably what makes it slow.</p>",
        "id": 264706541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639402826
    },
    {
        "content": "<p>In fact this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">presheaf</span> <span class=\"n\">BundledModule</span> <span class=\"n\">BundledModule.is_cat</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">ℱ.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n      <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">linear_map.map_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"n\">linear_map.map_add</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n   <span class=\"o\">}</span>\n</code></pre></div>\n<p>I claim that this timeout might be being caused by an unrelated issue. Hence I claim that Gabriel has solved all our problems! Thank you Gabriel!</p>",
        "id": 264706775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639402936
    },
    {
        "content": "<p>I filled the <code>sorries</code> and it worked! Thank you!</p>",
        "id": 264708705,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639403828
    },
    {
        "content": "<p>I think <code>force_noncomputable</code> (maybe with another name like <code>forbid_evaluation</code> or <code>classicalize</code>) probably belongs in mathlib somewhere</p>",
        "id": 264718546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639407760
    },
    {
        "content": "<p>Boom! And a 4th person at Imperial (<span class=\"user-mention\" data-user-id=\"460212\">@Sebastian Monnet</span> , a Lean learner trying to do Galois theory of infinite extensions) just ran into the same issue. It's happening all the time with people doing algebra.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"c1\">-- Adjoin roots</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">root_finset</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots.to_finset</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">min_polys</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.univ.image</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional.fin_basis</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">prod_min_polys</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.prod</span> <span class=\"o\">(</span><span class=\"n\">min_polys</span> <span class=\"n\">h_findim</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--noncomputable def force_noncomputable {α : Sort*} (a : α) : α :=</span>\n<span class=\"c1\">--  function.const _ a (classical.choice ⟨a⟩)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">adj_roots</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--force_noncomputable</span>\n<span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">root_finset</span> <span class=\"o\">(</span><span class=\"n\">prod_min_polys</span> <span class=\"n\">h_findim</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Completely random deterministic timeout on perfectly type-correct code which can be fixed by uncommenting <code>force_noncomputable</code>. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> thank you so much for this fix. Will someone PR it to mathlib? It's genuinely fast becoming an essential trick for people working in the kind of algebraic number theory we're trying to do at Imperial.</p>",
        "id": 265730566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640118438
    },
    {
        "content": "<p>I can do it if someone tells me where the heck to put it -- I have no idea.</p>",
        "id": 265730598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640118460
    },
    {
        "content": "<p>I think everyone is importing <code>field_theory.tower</code> so probably it can go there ;-)</p>",
        "id": 265731732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640119138
    },
    {
        "content": "<p>It sounds like it should go under <code>logic.</code>, as those are the basic files. <code>logic.basic</code>, maybe?</p>",
        "id": 265731843,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640119203
    },
    {
        "content": "<p>Stranding it in a random file towards what you're using it for seems like the safest way to forget about it.</p>",
        "id": 265732144,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640119432
    },
    {
        "content": "<p>I think we should make it its own file &amp; some simp lemmas just to simplify working with it</p>",
        "id": 265735025,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640121307
    },
    {
        "content": "<p>Gabriel wrote a simp lemma above</p>",
        "id": 265735165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640121389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20fixed.20by.20changing.20def.20to.20lemma/near/264718546\">said</a>:</p>\n<blockquote>\n<p>I think <code>force_noncomputable</code> (maybe with another name like <code>forbid_evaluation</code> or <code>classicalize</code>) probably belongs in mathlib somewhere</p>\n</blockquote>\n<p>Did <code>force_noncomputable</code> make it into <code>mathlib</code>? I haven't found it under any of these names.</p>",
        "id": 271821128,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1644842894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> (moving <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean.3Amaster/near/275032967\">this conversation</a> from <a class=\"stream\" data-stream-id=\"116290\" href=\"/#narrow/stream/116290-rss\">#rss</a> ) above are some examples of timeouts fixed by <code>force_noncomputable</code>. The other issue I saw (some code of Ashvni's) was a definition where Lean complained whether or not you marked it <code>noncomputable</code>, so you couldn't get it make it un-noisy. I think <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> had a mathlib-free example of this?</p>",
        "id": 275043469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647037857
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/leanprover-community/lean/pull/451\">lean#451</a> has an example of a function that's neither computable nor noncomputable. If Ashvni's issue is \"rec_fn_macro only allowed in meta definitions\", then doing both <code>noncomputable theory</code> and <code>noncomputable</code> might be a workaround. If I understand it right, the first command tells lean to not complain that you put <code>noncomputable</code> on a definition it thinks is computable, and the second command will cause Lean to compile recursive definitions using a different strategy, so you might luck out.</p>",
        "id": 275044364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647038404
    },
    {
        "content": "<p>Another example of a mysterious timeout fixed by <code>noncomputable!</code>: <a href=\"https://github.com/leanprover-community/mathlib/pull/14071\">#14071</a></p>",
        "id": 281970855,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652278150
    },
    {
        "content": "<p>I came across this in the subobject refactor <a href=\"https://github.com/leanprover-community/mathlib/pull/11759\">#11759</a>, even though this declaration should have absolutely nothing to do with subobjects...</p>",
        "id": 281971062,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652278231
    },
    {
        "content": "<p>My (limited) understanding is that the vm compiler starts with some very aggressive whnf calculations, which I believe has exponential behavior when typeclasses are many and deep. I don't know if that applies here.</p>",
        "id": 282013845,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652296100
    }
]