[
    {
        "content": "<p>Calling any lean programmers,</p>\n<p>I am a maths undergraduate. After 'graduating' from the natural number game, I've investigated a little further and gone through most of Theorem Proving in Lean.<br>\nAs I have some programming experience, I'd love to learn how to write tactics. I've been trying to teach myself how to do so but it has been difficult as my only real documentation of sorts has been <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic_writing.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactic_writing.html\">https://leanprover-community.github.io/mathlib_docs/tactic_writing.html</a>.</p>\n<p>I've set myself a couple of mini goals: to recreate <code>left</code> specifically for <code>or</code> propositions, and <code>split</code> specifically for <code>and</code> propositions.<br>\nHere is my code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n\n<span class=\"c1\">-- This tactic is like `left`, but only works on ∨</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">myorleft</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Not a clue what I&#39;m doing, want to create a goal of type l and use it</span>\n  <span class=\"o\">(</span><span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">])</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span>\n\n<span class=\"c1\">-- And similarly for ∧</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">myandsplit</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Just guessing, want to create two goals and then use them</span>\n  <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">::</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">])</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">useorleft</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">myorleft</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">useandsplit</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">myandsplit</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span> <span class=\"o\">{</span>\n    <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>How can I open goals for the user to prove, then form the correct type and close the main goal?</p>",
        "id": 192149831,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1585443959
    },
    {
        "content": "<p>An easy way to do this is to use <code>tactic.applyc ``or.inl</code> instead of <code>(set_goals [l]) &gt;&gt;= tactic.exact</code></p>",
        "id": 192150046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585444357
    },
    {
        "content": "<p>These are great mini goals. The only other reference I know of, other than the tutorial, is <a href=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\" title=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\">programming in Lean</a>, which is incomplete and out of date but taught me a lot about monads (I had worked through a lot of learnyouahaskell by that point).</p>",
        "id": 192150069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585444424
    },
    {
        "content": "<p>Time for me to point out again that <a href=\"https://lean-forward.github.io/logical-verification/2019/\" title=\"https://lean-forward.github.io/logical-verification/2019/\">the Logical Verification in Lean course notes</a> also have a lot of great material on metaprogramming. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 192150112,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585444493
    },
    {
        "content": "<p>If you want to be a bit more controlled about it and do the unification yourself, you can create a goal of type <code>l</code> using <code>g &lt;- mk_mvar l</code>, then create the desired proof term, which is <code> `(or.inl %%l %%r %%g)</code>, then use it for the main goal using <code>tactic.exact  `(or.inl %%l %%r %%g)</code>, and finally give the newly created metavariable back to the user using <code>gs &lt;- get_goals, set_goals (g :: gs)</code>. This is what <code>applyc</code> is doing</p>",
        "id": 192150161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585444594
    },
    {
        "content": "<p>Thank you so much everyone! I will check out learnyouahaskell, as I'm not experienced with functional programming. And those notes look handy. That's precisely what I've been looking for Mario :)</p>",
        "id": 192150219,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1585444757
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">myorleft</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"err\">%%</span><span class=\"n\">r</span> <span class=\"err\">%%</span><span class=\"n\">g</span><span class=\"o\">),</span>\n  <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">useorleft</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">myorleft</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192150222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585444787
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">myorleft</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">applyc</span> <span class=\"bp\">``</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">useorleft</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">myorleft</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192150262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585444804
    },
    {
        "content": "<p>Note that if you forget to give the metavariable back to the user, you will end up in a funny state where there are no goals but the proof term still has a metavariable in it. This happens every once in a while and indicates a bug in the tactic</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">myorleft</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"err\">%%</span><span class=\"n\">r</span> <span class=\"err\">%%</span><span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">useorleft</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">myorleft</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goals accomplished?</span>\n<span class=\"kn\">end</span> <span class=\"c1\">-- tactic failed, result contains meta-variables</span>\n</pre></div>",
        "id": 192150340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585444984
    },
    {
        "content": "<p>Wonderful! And I've managed to do the and one now too</p>",
        "id": 192150341,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1585444995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Writing.20tactics.3A.20creating.20goals/near/192150112\" title=\"#narrow/stream/113488-general/topic/Writing.20tactics.3A.20creating.20goals/near/192150112\">said</a>:</p>\n<blockquote>\n<p>Time for me to point out again that <a href=\"https://lean-forward.github.io/logical-verification/2019/\" title=\"https://lean-forward.github.io/logical-verification/2019/\">the Logical Verification in Lean course notes</a> also have a lot of great material on metaprogramming. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>I'm reading through them now so I won't forget again :-)</p>",
        "id": 192151021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585446375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274262\">@Alastair Horn</span> I know the tactic writing doc misses a section on manipulating the goal, it's been on my TODO list forever. Feel free to transform the conversation you had with Mario into a new section and open a pull request (ask here or google github opening a pull request if needed).</p>",
        "id": 192168663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585479953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Do you know why <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic_writing.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactic_writing.html\">https://leanprover-community.github.io/mathlib_docs/tactic_writing.html</a> has no code block syntax highlighting?</p>",
        "id": 192168703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585479971
    },
    {
        "content": "<p>I think the docs don't do syntax highlighting at all right now. There was a reason for this at the beginning, I don't remember what.</p>",
        "id": 192170636,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585483039
    },
    {
        "content": "<p>I'll look into it when I have time.</p>",
        "id": 192170639,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585483053
    },
    {
        "content": "<p>The Lean 3 changes were <a href=\"https://github.com/pygments/pygments/pull/1415\" title=\"https://github.com/pygments/pygments/pull/1415\">merged into pygments master</a>, so I was going to try and add syntax highlighting to doc-gen after their next release.</p>",
        "id": 192175739,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585490372
    },
    {
        "content": "<p>Oh, nice!</p>",
        "id": 192177682,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585492933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> : We just released a new edition of the book, at</p>\n<div class=\"codehilite\"><pre><span></span>https://lean-forward.github.io/logical-verification/2020/index.html#material\n</pre></div>\n\n\n<p>It's now 50 pages of so longer than before and has color. The material on metaprogramming has been greatly expanded. I'd be grateful for any feedback.</p>",
        "id": 192796897,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585917633
    },
    {
        "content": "<p>Great! I'll take a look when I have a chance.</p>",
        "id": 192797144,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585917768
    },
    {
        "content": "<p>I'm a bit confused by all those Dutch courses. How many Lean courses are there at VU? Is it like one by Rob and one by Jasmin?</p>",
        "id": 192804869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585921202
    },
    {
        "content": "<p>Yep.</p>",
        "id": 192804924,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585921213
    },
    {
        "content": "<p>You can see the list at <a href=\"https://lean-forward.github.io\" title=\"https://lean-forward.github.io\">https://lean-forward.github.io</a> then click \"events\".</p>",
        "id": 192804970,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585921232
    },
    {
        "content": "<p>Rob's is BSc level and focused on introduction/elimination rules for connectives, using proof terms / structured proofs.</p>",
        "id": 192805139,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585921312
    },
    {
        "content": "<p>Mine is an MSc-level course and it's mostly backward/tactical proofs, with the focus on practical applications (but a bit of logical mastur***n at the beginning of course to learn the syntax -- Chapters 2 and 3 of the book).</p>",
        "id": 192805332,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585921393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> it looks great! Thanks</p>",
        "id": 193711131,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586694592
    }
]