[
    {
        "content": "<p>I noticed that the <code>set</code> tactic doesn't interact well with <code>revert</code> (because in its core it's still a <code>let</code>, and when you revert it you see a <code>let _ := _ in</code> in the goal)</p>\n<p>and I've come up with an alternative:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">hn : n = 2 + 2</span>\n<span class=\"cm\">⊢ true</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159557268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551305274
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">hn : n = 2 + 2</span>\n<span class=\"cm\">⊢ true</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ ∀ (n : ℕ), n = 2 + 2 → true</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">n : ℕ := 2 + 2,</span>\n<span class=\"cm\">hn : n = 2 + 2</span>\n<span class=\"cm\">⊢ true</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ let n : ℕ := 2 + 2</span>\n<span class=\"cm\">  in n = 2 + 2 → true</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159557419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551305382
    },
    {
        "content": "<p>Can you do this with a sigma type when the goal isn't propositional?</p>",
        "id": 159557992,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551305877
    },
    {
        "content": "<p>I'd imagine not</p>",
        "id": 159558128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551305987
    },
    {
        "content": "<p>Your example doesn't do the same thing. Using <code>let</code> means that the new variable is definitionally equal to the term you set it to, which is sometimes useful.</p>",
        "id": 159558235,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551306041
    }
]