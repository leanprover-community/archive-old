[
    {
        "content": "<p><a href=\"https://arend-lang.github.io/2019/07/17/Arend-1.0.0-released.html\" target=\"_blank\" title=\"https://arend-lang.github.io/2019/07/17/Arend-1.0.0-released.html\">https://arend-lang.github.io/2019/07/17/Arend-1.0.0-released.html</a></p>",
        "id": 172653009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565158470
    },
    {
        "content": "<p>From my first glimpse it seems they have no bundling issues: <a href=\"https://arend-lang.github.io/about/arend-features#anonymous-extensions\" target=\"_blank\" title=\"https://arend-lang.github.io/about/arend-features#anonymous-extensions\">https://arend-lang.github.io/about/arend-features#anonymous-extensions</a></p>",
        "id": 172654644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565161076
    },
    {
        "content": "<p>Of course I can't say anything about speed.</p>",
        "id": 172654692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565161100
    },
    {
        "content": "<p>Universes are cumulative</p>",
        "id": 172654713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565161193
    },
    {
        "content": "<p>It's HoTT, so it has transport</p>",
        "id": 172654752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565161203
    },
    {
        "content": "<p>What!! And <code>\\Prop</code> is even impredicative.</p>",
        "id": 172654794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565161289
    },
    {
        "content": "<p>Is this thing even consistent?</p>",
        "id": 172654797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565161295
    },
    {
        "content": "<p>You can always pick 2 of: impredicative Prop, large elimination, and excluded middle</p>",
        "id": 172654938,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565161548
    },
    {
        "content": "<p>What does \"large elimination\" mean?</p>",
        "id": 172654993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565161604
    },
    {
        "content": "<p><a href=\"https://lean-forward.github.io/logical-verification/2018/41_notes.html\" target=\"_blank\" title=\"https://lean-forward.github.io/logical-verification/2018/41_notes.html\">https://lean-forward.github.io/logical-verification/2018/41_notes.html</a></p>",
        "id": 172655104,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565161785
    },
    {
        "content": "<p>there's a section on large elimination in the notes</p>",
        "id": 172655149,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565161803
    },
    {
        "content": "<p>The list of editor features (Intellij) also looks quite nice: <a href=\"https://arend-lang.github.io/about/intellij-features\" target=\"_blank\" title=\"https://arend-lang.github.io/about/intellij-features\">https://arend-lang.github.io/about/intellij-features</a></p>",
        "id": 172655181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565161883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> Thanks, I'll take a look</p>",
        "id": 172655185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565161894
    },
    {
        "content": "<p>As an example of the bundling thing: they have</p>\n<div class=\"codehilite\"><pre><span></span>\\class Group \\extends CancelMonoid {\n  | inverse : E -&gt; E\n  | inverse-left (x : E) : inverse x * x = ide\n| inverse-right (x : E) : x * inverse x = ide\n</pre></div>\n\n\n<p>This allows you to write <code>(X : \\Type) (Group X)</code> or <code>(X : Group)</code>, and these two are defeq. At the same time, they can also write</p>\n<div class=\"codehilite\"><pre><span></span>\\instance GroupCategory : Cat Group\n  =&gt; subCat (\\new Embedding {\n    | f (G : Group) =&gt; \\new Monoid G.E G.ide (G.*) G.ide-left G.ide-right G.*-assoc\n    | isEmb G H =&gt; \\new Retraction {\n      | sec =&gt; Group.equals G H\n      | f_sec =&gt; idpe\n    }\n})\n</pre></div>\n\n\n<p>to prove that groups form a category.</p>\n<p>There is no distinction between bundled and unbundled objects.</p>",
        "id": 172655406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565162252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> So you gave a pick-2-out-of-3. If I pick impredicative <code>Prop</code> and LEM, then I have to sacrifice large elimination. But do I sacrifice it for <code>Prop</code>, or in general?</p>",
        "id": 172655631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565162559
    },
    {
        "content": "<p>I think in general would make your theory a bit useless.</p>",
        "id": 172655665,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565162635
    },
    {
        "content": "<p>It seems that Arend sacrifices LEM... which is a pity.</p>",
        "id": 172655772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565162752
    },
    {
        "content": "<p>I don't understand how large elimination could be consistent.</p>",
        "id": 172655850,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565162873
    },
    {
        "content": "<p>This would give you a way to \"choose\" a bijection between types, which gives you em, at least in Lean.</p>",
        "id": 172656002,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565163016
    },
    {
        "content": "<p>So this HoTT must be weaker in some sense than Lean without choice</p>",
        "id": 172656061,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565163106
    },
    {
        "content": "<p>I've looked into Arend (vs Lean) a bit and here is what I think I've found...</p>",
        "id": 175108784,
        "sender_full_name": "Jason Rute",
        "timestamp": 1567808863
    },
    {
        "content": "<p>I think, just like in Lean, <code>\\Prop</code> in Arend is impredicative and does <em>not</em> allow large elimination.  Also, like Lean, the <code>\\Type</code> universe levels are predicative and support large elimination.  I see nothing inconsistent about LEM (for <code>\\Prop</code>) in Arend, especially since LEM (for propositions) is consistent in other HoTT systems.</p>",
        "id": 175108787,
        "sender_full_name": "Jason Rute",
        "timestamp": 1567808866
    },
    {
        "content": "<p>Indeed, to me, the foundations for Arend seem very similar to those for Lean, but contain more “levels” of types.  An analogy (possibly too simplistic) is that Lean is a logic for propositions (<code>Prop</code>) and sets (<code>Type</code>) while Arend is a logic for propositions (<code>\\Prop</code>), sets (<code>\\Set</code>), and other higher homotopy spaces/types (<code>\\1-Type</code>, <code>\\2-Type</code>, …).  This allows univalence since the univalence axiom requires that a type universe (except <code>\\Prop</code>) not be a set.</p>",
        "id": 175108794,
        "sender_full_name": "Jason Rute",
        "timestamp": 1567808874
    },
    {
        "content": "<p>Now, in book HoTT, propositions and sets are defined.  (A <em>proposition</em> is a type <code>P</code> for which all pairs of elements are equal, and a <em>set</em> is a type <code>A</code> for which every <code>a = a'</code> is a proposition).  In Arend, however, it seems <code>\\Prop</code> and <code>\\Set</code> are also built into the type hierarchy.  So if <code>A : \\Set</code> and <code>a a' : A</code>, then the type of <code>a = a'</code>  is Prop, judgmentally.  In this way, Arend’s <code>\\Prop</code> is similar to Lean’s <code>Prop</code>.</p>",
        "id": 175108818,
        "sender_full_name": "Jason Rute",
        "timestamp": 1567808882
    },
    {
        "content": "<p>In Lean, inductively defined propositions are formed through a special <code>Prop</code>-valued induction.  Similarly, in Arend they are formed by truncating an inductively defined type to <code>\\Prop</code>.  So, logical disjunction <code>\\/</code> in <code>\\Prop</code> would have the same definition as disjoint union <code>+</code> in <code>\\Type</code>, except that the former is explicitly truncated to <code>\\Prop</code>.  This truncation prevents large elimination.</p>",
        "id": 175108838,
        "sender_full_name": "Jason Rute",
        "timestamp": 1567808889
    },
    {
        "content": "<p>When it comes to classical reasoning, that is where Lean and Arend/HoTT start to differ is subtle ways (that I don’t completely appreciate yet).  HoTT is all about proof relevant reasoning, but proof relevant versions of classical reasoning are not compatible with the univalence axiom.  From the Curry-Howard Isomorphism, the analogy of LEM in <code>Type</code> would be <code>Π α : Type, α + (α -&gt; empty)</code> which contradicts univalence, and would be inconsistent in Arend.  Instead, Arend/HoTT’s version of LEM replaces <code>\\Type</code> with <code>\\Prop</code>.  In Lean, this is <code>prop_decidable</code>, but using the univalence axiom it is equivalent to the usual propositional LEM <code>Π p : Prop, p ∨ ¬ p</code>).  In Lean, the “type-valued LEM” above is provable via Lean’s choice function, which takes a nonempty type and extracts a value. Arend/HoTT can’t have such a strong choice function.  Instead, in the Arend/HoTT version of AC, all one can do is say is that if a <em>set</em> <code>A</code> is non-empty (proposition) then there exists (proposition) a choice function.  Since “exists” here is a proposition, one can’t directly use that choice function for constructions except inside proofs of propositions.  (Also, in Arend/HoTT there doesn’t propositionally exist one universal choice function, but instead one for each set-indexed family of non-empty sets.)</p>",
        "id": 175108841,
        "sender_full_name": "Jason Rute",
        "timestamp": 1567808897
    },
    {
        "content": "<p>Just like in Lean, in Arend’s version of HoTT, it seems useful to have an impredicative universe <code>\\Prop</code> of propositions and predicative universes of other types.  (Arend/HoTT also seems to make it easier to go between arbitrary types and <code>\\Prop</code> by either proving that a type is a proposition or by truncating it to one.)  How one uses <code>\\Prop</code> seems to me to be a matter of taste, engineering, and philosophy.  Should one lean into constructive, proof relevant mathematics trying to avoid <code>\\Prop</code> whenever possible?  Or, like Lean, should one embrace classical mathematics and propositions, adding AC (in the HoTT sense) as an axiom (while still getting univalence!).  (Or is there a “best of both worlds”, where one uses arbitrary types for constructive, proof-relevant reasoning, and AC for classical reasoning in <code>\\Prop</code> and <code>\\Set</code>, all within the same system?)</p>",
        "id": 175108844,
        "sender_full_name": "Jason Rute",
        "timestamp": 1567808905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> Thanks for this thorough comparison! It only makes it seem more interesting to me!</p>",
        "id": 175124817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567831608
    },
    {
        "content": "<p>Huh, I had no idea Jetbrains people care about this, given their (apparent) focus on industrial applications.</p>",
        "id": 175219510,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1568012852
    },
    {
        "content": "<p>They have a research arm, <a href=\"https://research.jetbrains.org\" target=\"_blank\" title=\"https://research.jetbrains.org\">https://research.jetbrains.org</a> .  This project is listed under applied math and physics.  I guess one could justify this as supporting software verification, but I don’t know how it was sold.</p>",
        "id": 175231930,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568027516
    }
]