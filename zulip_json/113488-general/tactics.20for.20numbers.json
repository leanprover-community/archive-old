[
    {
        "content": "<p>I'm about to leave on vacation (-; If anyone happens to get bored during the holidays, here is a little silly idea for a tactic. We discussed these kind of issues before, but maybe not exactly this.<br>\n(Ooh, and the <code>norm_cast</code> bundle is really fantastic, it makes life a lot easier!)<br>\nSuppose that <code>n : int</code> and <code>h : n ≥ 0</code>.<br>\nThen every mathematician (and especially if they are new to Lean) wants to say <code>n : nat</code>. But that is not possible.<br>\nSo I wish for a tactic</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">lift_int_to_nat</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">with</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"bp\">`</span>\n</pre></div>\n\n\n<p>that will create a new <code>N : nat</code> and a proof <code>hN : n = (N : int)</code>.</p>",
        "id": 172855120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565360489
    },
    {
        "content": "<p>Extra goodies: figure out if <code>n</code> is an atom, and if so call <code>subst n</code> afterwards.</p>",
        "id": 172855200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565360528
    },
    {
        "content": "<p>Also, that goodie should automatically re-use the name of the atom for the new <code>nat</code> (so <code>n</code> in this example).</p>",
        "id": 172855236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565360568
    },
    {
        "content": "<p>The <code>N : nat</code> could be defined as <code>n.nat_abs</code>.</p>",
        "id": 172855272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565360595
    },
    {
        "content": "<p>We could have similar tactics <code>lift_rat_to_int</code> and maybe <code>lift_rat_to_nat</code>.</p>",
        "id": 172855296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565360626
    },
    {
        "content": "<p>Maybe they all be bundled into one super-tactic.</p>",
        "id": 172855348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565360646
    },
    {
        "content": "<p>Also: suggestions for better names are very welcome!</p>",
        "id": 172855362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565360673
    },
    {
        "content": "<p>isn't this just <code>cases</code> on an appropriate theorem?</p>",
        "id": 172875576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565374889
    },
    {
        "content": "<p>and you can do the other stuff with <code>rcases</code> or <code>obtain</code></p>",
        "id": 172875693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565374953
    },
    {
        "content": "<p>You mean something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">lift</span> <span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"bp\">ℕ</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- new goal: ↑n = m</span>\n  <span class=\"n\">lift</span> <span class=\"n\">m</span> <span class=\"n\">to</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"c1\">-- new goals: ↑n = ↑m and m ≥ 0</span>\n  <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"bp\">ℕ</span> <span class=\"kn\">using</span> <span class=\"n\">hk</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"c1\">-- new assumptions: l : ℕ and hl : ↑l = k + ↑n</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'm currently cleaning up my tactic.<br>\nMario is right that it's basically just <code>cases</code> on an appropriate theorem, but it's useful to have syntax that is a shortcut for that.</p>",
        "id": 172891021,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565386512
    },
    {
        "content": "<p>In the back-end there is the following class you have to provide an instance for:</p>\n<div class=\"codehilite\"><pre><span></span>class can_lift (α : Type u) (β : Type v) : Type (max u v) :=\n(coe : α → β)\n(cond : β → Prop)\n(prf : ∀(y : β), cond y → ∃(x : α), coe x = y)\n</pre></div>\n\n\n<p>The instance I needed to provide for my previous tactic script (to lift from <code>ℤ</code> to <code>ℕ</code>) is: </p>\n<div class=\"codehilite\"><pre><span></span>@[can_lift_simp] instance : can_lift ℕ ℤ :=\n⟨coe, λ n, n ≥ 0, λ n hn, ⟨n.nat_abs, int.nat_abs_of_nonneg hn⟩⟩\n</pre></div>",
        "id": 172891164,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565386631
    },
    {
        "content": "<p>What is the canonical way to make an expression application in tactic mode?</p>\n<ul>\n<li>If I do</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>my_expr ← mk_app `can_lift.prf [new_tp, old_tp, inst, e, prf]\n</pre></div>\n\n\n<p>then I get an error, saying it cannot unify the type of <code>prf</code> with the expected type. It seems that <code>mk_app</code> is doing this unification in the \"wrong order\", because it doesn't seem to know the other arguments to <code>can_lift.prf</code> yet (which it needs to do the unification).</p>\n<ul>\n<li>If I do</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>let my_expr := `(@can_lift.prf.{0 0} %%new_tp %%old_tp %%inst %%e %%prf),\n</pre></div>\n\n\n<p>I have to manually check that this type-checks (which is fine, I guess). I also need to figure out the universe levels myself (is there an easier way than doing <code>infer_type</code> on my types, and then match the result with <code>expr.sort u</code>?)</p>",
        "id": 172895197,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565390480
    },
    {
        "content": "<p>My mostly complete tactic is here: <a href=\"https://github.com/leanprover-community/mathlib/blob/lift_to/src/tactic/lift.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/lift_to/src/tactic/lift.lean\">https://github.com/leanprover-community/mathlib/blob/lift_to/src/tactic/lift.lean</a></p>",
        "id": 172895345,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565390607
    },
    {
        "content": "<p>I don't think Johan will be looking at the chat for about two weeks :-) But I'm sure he'll be very grateful! I love the way that people just do stuff for other people here.</p>",
        "id": 172896025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565391254
    },
    {
        "content": "<p>I guess it's because lean is fun. The Imperial guy seemed very impressed with the community's efforts on the 1988 IMO problem, although I don't know how much he understood...</p>",
        "id": 172896086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565391323
    },
    {
        "content": "<p>This looks really cool, and I love the user experience!</p>",
        "id": 172899270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565395074
    },
    {
        "content": "<p>PR'd the tactic: <a href=\"https://github.com/leanprover-community/mathlib/issues/1315\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1315\">#1315</a></p>",
        "id": 172937545,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565466108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>: Yeah, I also like that about this community. </p>\n<p>I also think that it is really valuable to have these kinds of tactics that make common patterns more convenient to do (other examples include <code>rcases</code>, <code>rintro</code>, <code>simpa</code>, <code>norm_cast</code>, <code>norm_num</code>, and many more).</p>\n<p>Lastly, it is good for me to regularly work on short projects. When I only work on long-term projects, I sometimes lose track of the reasons that they are important.</p>",
        "id": 172948968,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565489351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Thanks a lot for writing this!</p>",
        "id": 174041917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566658378
    },
    {
        "content": "<p>I see that the tactic is even merged into mathlib already!!</p>",
        "id": 174042043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566658575
    },
    {
        "content": "<p>I should probably go on holiday more often (-;</p>",
        "id": 174042044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566658583
    }
]