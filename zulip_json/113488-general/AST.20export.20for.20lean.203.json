[
    {
        "content": "<p>I've been working with <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> on mathport at MS, and as part of it there is now a complete AST export of lean 3 available at <a href=\"https://github.com/leanprover-community/lean/compare/master...digama0:ast\">https://github.com/leanprover-community/lean/compare/master...digama0:ast</a> . You can see the generated grammar at <a href=\"https://github.com/dselsam/mathport/blob/master/Mathport/AST3.lean\">https://github.com/dselsam/mathport/blob/master/Mathport/AST3.lean</a> . What makes this most interesting is its completeness: I made sure not to leave out anything, and it has been tested on lean core + mathlib. For example, here is the concrete syntax you can use in expr position in a lean file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«...»</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"gr\">sorry</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"n\">_</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"o\">()</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"o\">{}</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">ambiguous</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Levels</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">decimal</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">string</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">char</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">paren</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">isType</span> <span class=\"n\">isStar</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"bp\">#</span><span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"k\">fun</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"n\">isAssume</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Binders</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«→»</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"k\">Pi</span> <span class=\"o\">:</span> <span class=\"n\">Binders</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"k\">show</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Proof</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"n\">suff</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"bp\">#</span><span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Proof</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«.»</span> <span class=\"o\">(</span><span class=\"n\">compact</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Proj</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"k\">if</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"bp\">#</span><span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"k\">calc</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«@»</span> <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">partial</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pattern</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«`</span><span class=\"o\">()</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"n\">lazy</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«%%»</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«`</span><span class=\"o\">[]</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Tactic</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«`»</span> <span class=\"o\">(</span><span class=\"n\">resolve</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"o\">⟨⟩</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">infix_fn</span> <span class=\"o\">:</span> <span class=\"n\">Choice</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"o\">(,)</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"o\">:</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">hole</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«#</span><span class=\"o\">[]</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"kd\">by</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Tactic</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"kd\">begin</span> <span class=\"o\">:</span> <span class=\"n\">Block</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"k\">let</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Binders</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"k\">match</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">Arm</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"k\">do</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"n\">braces</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">DoElem</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"o\">{,}</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">setReplacement</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Binders</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">structInst</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"bp\">#</span><span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">fields</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">srcs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">catchall</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">atPat</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«.</span><span class=\"o\">()</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">«</span><span class=\"kd\">notation</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Choice</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Arg</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">userNotation</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">#</span><span class=\"n\">Param</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n</code></pre></div>",
        "id": 245389260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625792026
    },
    {
        "content": "<p>Exciting!</p>\n<ul>\n<li>So it parses lean 3 files into a JSON grammar which you then read into Lean 4?  </li>\n<li>How does one run it?  </li>\n<li>Will it be kept up to date with newer versions of Lean 3, or added as an option to a new release of Lean 3?</li>\n<li>Does it capture internal state information? That is the big need for lean_proof_recording.  (Although that is also the easier step.  The harder step is getting the tactic commands which this seems to do.)</li>\n<li>Does it capture the position information?  (I currently need that for lean proof recording, to align internal state info that I've dumped, and it is also nice for a number of other reasons.  I think Alectryon needs it for their project, but I don't know if this is directly useful to Alectryon or not.)</li>\n</ul>",
        "id": 245390258,
        "sender_full_name": "Jason Rute",
        "timestamp": 1625793092
    },
    {
        "content": "<p>*Also, is there already a dump of the data or should one run it to get the data?</p>",
        "id": 245390345,
        "sender_full_name": "Jason Rute",
        "timestamp": 1625793217
    },
    {
        "content": "<blockquote>\n<p>So it parses lean 3 files into a JSON grammar which you then read into Lean 4?  </p>\n</blockquote>\n<p>Yes. If you don't want to use lean 4 you can also use those mathport files (especially <a href=\"https://github.com/dselsam/mathport/blob/master/Mathport/Parse.lean\">Parse.lean</a>) as a specification of the JSON schema. It's mostly stable now but it might still change in the near future if any bugs are discovered.</p>\n<blockquote>\n<p>How does one run it?  </p>\n</blockquote>\n<p>If you compile the linked <code>ast</code> fork of lean 3, you can use the <code>--ast</code> option in conjunction with <code>--make</code> to produce the AST of any file that is read from source. (Note that you will have to kill the oleans first, because files with oleans already are never read or parsed, so you don't get any AST output.) It produces <code>foo.ast.json</code> files alongside <code>foo.lean</code> and <code>foo.olean</code>.</p>\n<blockquote>\n<p>Will it be kept up to date with newer versions of Lean 3, or added as an option to a new release of Lean 3?</p>\n</blockquote>\n<p>I hope to upstream it to community lean at some point. It adds some to the memory usage, at least in theory, but nothing that I have noticed. But I haven't done any detailed profiling to be sure. It may need to be behind a compile flag in the worst case.</p>\n<blockquote>\n<p>Does it capture internal state information? That is the big need for lean_proof_recording.  (Although that is also the easier step.  The harder step is getting the tactic commands which this seems to do.)</p>\n</blockquote>\n<p>That is a planned extension. Currently it only captures the pexpr before and the expr after, when there is an expr attached to that piece of syntax.</p>\n<blockquote>\n<p>Does it capture the position information?  (I currently need that for lean proof recording, to align internal state info that I've dumped, and it is also nice for a number of other reasons.  I think Alectryon needs it for their project, but I don't know if this is directly useful to Alectryon or not.)</p>\n</blockquote>\n<p>Yes! All the <code>#</code> you see in the inductive type I just posted are spans (begin and end), although right now the end is always none (lean 3 does not capture any token end information and I only added a hook to support it eventually).</p>",
        "id": 245390559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625793486
    },
    {
        "content": "<p>There is not a dump available, but it's not very hard to run it. It's basically the same as regular compiling, I just don't like compiling mathlib unless I have to</p>",
        "id": 245390806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625793844
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Does it capture internal state information? That is the big need for lean_proof_recording.  (Although that is also the easier step.  The harder step is getting the tactic commands which this seems to do.)</p>\n</blockquote>\n<p>That is a planned extension. Currently it only captures the pexpr before and the expr after, when there is an expr attached to that piece of syntax.</p>\n</blockquote>\n<p>Specifically, the reason for doing all this is so that we can have very accurate information about how a lean 3 proof was elaborated when reconstructing corresponding lean 4 syntax, so that we can do things like insert missing arguments, change argument order or other things in order to acommodate lean 4 elaboration changes. Ultimately we want to have lean 3 -&gt; lean 4 porting which can achieve a high success rate even on syntax-ported tactic proofs by understanding what's going on on both sides</p>",
        "id": 245391507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625794753
    },
    {
        "content": "<p>Great work!  I should probably just run it myself, but I wonder what happens with the super-hacky stuff like <code>open_locale</code> that call the parser on a generated string in the middle of the command?  Do you get both the user command and the local notation command (with dangling ranges)?</p>",
        "id": 245409267,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625815294
    },
    {
        "content": "<p>We get the user command, but do not track additions coming from the called command. More specifically, the call will produce AST nodes but they are not attached to the tree so they are skipped during export</p>",
        "id": 245432023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625831018
    },
    {
        "content": "<p>That seems like it might cause problems for the port, right? Without <code>open_locale nat</code>, there will be an error when parsing <code>n!</code>.</p>",
        "id": 245432537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625831352
    },
    {
        "content": "<p>Actually that's not quite true. Item parsers like <code>small_nat</code> will drop their AST nodes on the floor, but commands are added to a global data structure, so if you use <code>with_input</code> to read a full command it will appear after the user command, with messed up position info</p>",
        "id": 245432575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625831400
    },
    {
        "content": "<p>The port will add support for individual commands when the data we receive is not sufficient. We need this anyway since we aren't running a lean 3 VM, so tactics will need to be rewritten</p>",
        "id": 245432692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625831475
    },
    {
        "content": "<p>So if some user command does something really weird, we can just match on it and clean up the result</p>",
        "id": 245432733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625831515
    },
    {
        "content": "<p>I'm really excited. This exporter seems like a pretty massive step forward!</p>",
        "id": 245432818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625831557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/AST.20export.20for.20lean.203/near/245432537\">said</a>:</p>\n<blockquote>\n<p>That seems like it might cause problems for the port, right? Without <code>open_locale nat</code>, there will be an error when parsing <code>n!</code>.</p>\n</blockquote>\n<p>Actually this isn't as much of a problem as you might think. We already know it is the factorial function being applied, because lean 3 parsed it. So we can output <code>n!</code> if we see the notation in scope and <code>nat.fact n</code> otherwise, or we can play it fast and loose and always output <code>n!</code>, as well as the <code>open_locale nat</code> line and make sure there is a working lean 4 equivalent</p>",
        "id": 245432963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625831651
    },
    {
        "content": "<p>We'll probably want to convert uses of <code>open_locale</code> to scoped notations anyway</p>",
        "id": 245433168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625831787
    },
    {
        "content": "<blockquote>\n<p>I hope to upstream it to community lean at some point.</p>\n</blockquote>\n<p>Please PR as soon as you have time!</p>",
        "id": 245605992,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626008507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I noticed this was recently added to Lean (since it caused lean_proof_recording to break. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>) just want to check that this still doesn’t include the end position, right?  If it did, it could be a more robust replacement to lean_proof_recording.  (I guess even if it doesn’t have end positions we could try taking the AST and converting into Lean 3 code, similar to how you already covert it into Lean 4 code.  It wouldn’t be character-for-character the same as the user inputted code, but would also have more syntactic hierarchical structure.). cc <span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span></p>",
        "id": 255548762,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632996981
    },
    {
        "content": "<p>I was just having a conversation about this with Stan. End positions have been added for tactics, at least, since <a href=\"https://github.com/leanprover-community/lean/issues/612\">lean#612</a></p>",
        "id": 255548857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632997044
    },
    {
        "content": "<p>in my experience, those end positions are accurate, but I didn't check with every possible tactic</p>",
        "id": 255548950,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632997086
    },
    {
        "content": "<p>It works fairly well with your <code>proof-recording.lean</code> file though (that's been my major testcase with alectryon! very good file :] )</p>",
        "id": 255548989,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632997110
    },
    {
        "content": "<p>Oh, Stan told me this in another convo and I misread it.</p>",
        "id": 255549234,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632997247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> one potential missing piece to recover lean_proof_recording capabilities, as discussed with Mario, would be to add a <code>pp_expr</code> list along with the tactic state that provides pretty-printed version of the expressions in the tactic state, so that its reconstruction for our ML purposes is straightforward. We could have default options + named specific set of options as needed (as an example for us I think we would just want to add <code>pp.full_names</code>).</p>",
        "id": 255549441,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632997344
    },
    {
        "content": "<p>(Won't be able to get to this myself before early November, but definitely plan to do it by then)</p>",
        "id": 255549676,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632997459
    }
]