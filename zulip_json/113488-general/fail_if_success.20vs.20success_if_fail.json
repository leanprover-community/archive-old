[
    {
        "content": "<p>I notice these tactics do the same thing. Their docstrings are even exactly the same, and the only difference is that the error messages says \"fail_if _success\" in one and \"success_if_fail\" in the other. Autocomplete suggests there may have been a previous thread about this, but I can't get Zulip to show me that thread. Should this be fixed?</p>",
        "id": 254140436,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632185247
    },
    {
        "content": "<p>I don't think they're the same?</p>",
        "id": 254146228,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632190484
    },
    {
        "content": "<p>Hmm, maybe I just have an old lean version, let me check</p>",
        "id": 254146952,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632191133
    },
    {
        "content": "<p>I think they are the same</p>",
        "id": 254147095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632191271
    },
    {
        "content": "<p>What do you mean by \"fixed\"?</p>",
        "id": 254147146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632191291
    },
    {
        "content": "<p>Here is the line <a href=\"https://github.com/leanprover-community/lean/blob/98a113f41ddcc750ba0d780c7b46976339d2a325/library/init/meta/tactic.lean#L170\">https://github.com/leanprover-community/lean/blob/98a113f41ddcc750ba0d780c7b46976339d2a325/library/init/meta/tactic.lean#L170</a></p>",
        "id": 254147161,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632191310
    },
    {
        "content": "<p>Well, by \"fixed\" I mean \"changed so that only one of these exists\".</p>",
        "id": 254147193,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632191336
    },
    {
        "content": "<p>Or at least, redefined so that one is an alias for the other</p>",
        "id": 254147244,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632191390
    },
    {
        "content": "<p>hmm, I didn't experiment with plugging in a success to success if fail. to me, it seems that <code>success_if_fail {x}</code> should do nothing on a success instead of thrwoing</p>",
        "id": 254147475,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632191585
    },
    {
        "content": "<p>that's called <code>try</code></p>",
        "id": 254147589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632191693
    },
    {
        "content": "<p>They can't be aliases if they have different error messages</p>",
        "id": 254147614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632191716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/fail_if_success.20vs.20success_if_fail/near/254147475\">said</a>:</p>\n<blockquote>\n<p>hmm, I didn't experiment with plugging in a success to success if fail. to me, it seems that <code>success_if_fail {x}</code> should do nothing on a success instead of thrwoing</p>\n</blockquote>\n<p>Going off the names I'm not sure I would expect one of <code>fail_if_success</code>/<code>success_if_fail</code> to behave differently from the other. I just don't expect to see both.</p>",
        "id": 254147632,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632191747
    },
    {
        "content": "<p>FWIW only <code>failIfSuccess</code> exists in lean 4</p>",
        "id": 254147738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632191838
    },
    {
        "content": "<p>I guess backwards compatibility is an issue, since this is actually in lean and not mathlib. Is it a backwards compatibility problem if one of them starts printing out the error message that the other prints now? Maybe it's best to just leave it.</p>",
        "id": 254147763,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632191879
    },
    {
        "content": "<p>There are 48 uses of <code>fail_if_success</code> and 11 uses of <code>success_if_fail</code> in lean core, and 11 uses of <code>fail_if_success</code> and 194 uses of <code>success_if_fail</code> in mathlib</p>",
        "id": 254147832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632191924
    },
    {
        "content": "<p>backwards compatibility is a non-goal</p>",
        "id": 254147848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632191946
    },
    {
        "content": "<p>Ok, then maybe better to just leave it?</p>",
        "id": 254147849,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632191947
    },
    {
        "content": "<p>we would just cut another version of lean if we wanted to change this</p>",
        "id": 254147858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632191966
    },
    {
        "content": "<p>I'm not sure I would be able to reliably guess which one exists, if only one does</p>",
        "id": 254147942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632192020
    },
    {
        "content": "<p>I was going off the heuristic of \"you shouldn't have two pieces of code to do one thing\" but honestly, this is maybe only ~20s of confusion for those who encounter it and use \"go to definition\" in vscode to see what's going on.</p>",
        "id": 254147954,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632192044
    },
    {
        "content": "<p>there is also <code>success_if_fail_with_msg</code> but no <code>fail_if_success_with_msg</code> in mathlib</p>",
        "id": 254147966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632192056
    },
    {
        "content": "<p>I like that the coq version of this tactic is just called <code>Fail</code></p>",
        "id": 254147993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632192085
    },
    {
        "content": "<p>so I don't have to think about this ordering</p>",
        "id": 254148002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632192097
    },
    {
        "content": "<p>Even better, you can (and people do) use <code>Fail Fail</code> to write the equivalent of <code>example</code> in lean, to test that a definition works without actually doing it</p>",
        "id": 254148099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632192184
    },
    {
        "content": "<p><code>Fail</code> is way nicer, though; gives a lot nicer output for Alectryon to use ;b</p>",
        "id": 254148181,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632192263
    },
    {
        "content": "<p>can you elaborate?</p>",
        "id": 254148201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632192292
    },
    {
        "content": "<p><code>Fail</code> says something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Command</span> <span class=\"bp\">`</span><span class=\"n\">xyz</span><span class=\"bp\">`</span> <span class=\"n\">did</span> <span class=\"n\">indeed</span> <span class=\"n\">fail</span><span class=\"o\">,</span> <span class=\"k\">with</span> <span class=\"n\">error</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"c1\">------------</span>\n<span class=\"n\">ActualOutputErrorMessage</span>\n</code></pre></div>\n<p>whilst <code>success_if_fail</code> just said <code>tactic did indeed fail</code> owtte; if you're explaining why typechecking fails or something subtle it's cool to have the OG error message</p>",
        "id": 254148349,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632192453
    },
    {
        "content": "<p>I'm not sure if this changd in Lean4</p>",
        "id": 254148354,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632192461
    },
    {
        "content": "<p>Oh, yeah that makes sense, since lean tactics that succeed aren't supposed to produce any output</p>",
        "id": 254148589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632192651
    },
    {
        "content": "<p>I suppose there could be a <code>success_if_fail?</code> that prints the error message</p>",
        "id": 254148609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632192670
    },
    {
        "content": "<p>maybe it should be called <code>trace_if_fail</code></p>",
        "id": 254148729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632192805
    },
    {
        "content": "<p>But then there should also be a <code>fail_if_trace</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 254152432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632196798
    },
    {
        "content": "<p>I just see a bunch of computer scientists arguing about whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\implies Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">Y\\implies X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> are the same thing here, and apparently they are</p>",
        "id": 254160228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632204857
    },
    {
        "content": "<p>Maybe it should be called <code>success_iff_fail</code></p>",
        "id": 254160278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632204915
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254163819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632207843
    },
    {
        "content": "<p>I think this is something like the use of \"if\" in making definitions. If I say that tactic <code>X</code> fails if <code>Y</code> succeeds, it leaves undetermined whether it also fails in other cases, but it is a violation of linguistic convention to do not say the most precise statement so the \"if\" gets promoted to \"iff\".</p>\n<p>In other words, blame english, not computer science</p>",
        "id": 254294958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632268007
    },
    {
        "content": "<p>\"if you don't get down from that tree, I'm calling the police\". Sounds like it implies \"if you do get down from that tree, I'm not calling the police\" but not if you read the small print</p>",
        "id": 254333621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632299941
    },
    {
        "content": "<p>I think \"if\" is used this way in maths definitions too, as in \"we say a function f is analytic if bla\". You can think of it as an inductive prop!</p>",
        "id": 254334585,
        "sender_full_name": "David Wärn",
        "timestamp": 1632300474
    }
]