[
    {
        "content": "<p>Can we use unification hints to make sure that we can just write <code>ℤ</code> if we want to view the integers as an object of the category <code>CommRing</code>?</p>",
        "id": 158512228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133397
    },
    {
        "content": "<p>I don't think so. Unification hints seem more useful for unbundling a bundled structure than bundling an unbundled one</p>",
        "id": 158546457,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550164725
    },
    {
        "content": "<p>Too bad... I really liked the notation (-;</p>",
        "id": 158549046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550166718
    },
    {
        "content": "<p>Is there a canonical example of unification hints being used in Lean that someone can point to?</p>",
        "id": 158607025,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1550229350
    },
    {
        "content": "<p>Cyril and Assia had a demonstration at Lean Together, I wonder if that file is available somewhere</p>",
        "id": 158607080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550229387
    },
    {
        "content": "<p>It's never been used in lean core or mathlib outside one example in <code>init.core</code></p>",
        "id": 158607093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550229425
    },
    {
        "content": "<p>I emailed them to ask about the file!</p>",
        "id": 158612898,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1550236384
    },
    {
        "content": "<p>Hi! Both the Coq demo and the Lean equivalent are available on <a href=\"https://lean-forward.github.io/lean-together/2019/\" target=\"_blank\" title=\"https://lean-forward.github.io/lean-together/2019/\">https://lean-forward.github.io/lean-together/2019/</a></p>",
        "id": 158612979,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1550236498
    },
    {
        "content": "<p>Assia Mahboubi: unification hints (in Coq) <a href=\"https://lean-forward.github.io/lean-together/2019/slides/coq_cs_demo.v\" target=\"_blank\" title=\"https://lean-forward.github.io/lean-together/2019/slides/coq_cs_demo.v\">https://lean-forward.github.io/lean-together/2019/slides/coq_cs_demo.v</a><br>\nCyril Cohen: unification hints (in Lean) <a href=\"https://lean-forward.github.io/lean-together/2019/slides/demo_structures.lean\" target=\"_blank\" title=\"https://lean-forward.github.io/lean-together/2019/slides/demo_structures.lean\">https://lean-forward.github.io/lean-together/2019/slides/demo_structures.lean</a></p>",
        "id": 158613068,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1550236608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> </p>\n<blockquote>\n<p>Can we use unification hints to make sure that we can just write <code>ℤ</code> if we want to view the integers as an object of the category <code>CommRing</code>?</p>\n</blockquote>\n<p>We, in mathcomp, usually explicitly wrap them e.g. <code>[CommRing  of ℤ]</code> to denote the canonical structure associated to a carrier. In Coq there is no way to automate this further to my knowledge. But maybe in Lean you could use some special kind of coercion. Indeed, since coercions are fused with the typeclass system, you could make a coercion from <code>Type</code> that finds the structure  and packages it with the type to give you the structure as a result.</p>",
        "id": 158613326,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1550236850
    },
    {
        "content": "<p>thanks!</p>",
        "id": 158613483,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1550237024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> I don't follow... you want a coercion from <code>Type</code> to <code>CommRing</code>? But then it has to turn every type into a commutative ring...</p>",
        "id": 158613615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550237138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> only when the inference succeeds in finding a <code>CommRing</code> typeclass on the argument. I'm not sure it works, I'm just guessing it might, given how coercions are implemented in lean.</p>",
        "id": 158614041,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1550237576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> on second thought, I do not think it is possible ... sorry for the false hopes...</p>",
        "id": 158614207,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1550237739
    },
    {
        "content": "<p>No problem...</p>",
        "id": 158614275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550237791
    },
    {
        "content": "<p>How does the <code>coe</code> from <code>Prop</code> to <code>bool</code> work? That's a partial coercion.</p>",
        "id": 158616977,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550240331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> which files did you import?</p>",
        "id": 158617505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550240854
    },
    {
        "content": "<p>I'm afk, but I think it's in core. It only works on decidable props.</p>",
        "id": 158617735,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550241022
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">to_bool</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">bool</span>\n</pre></div>",
        "id": 158617772,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550241056
    },
    {
        "content": "<p>But I don't have to write <code>to_bool</code></p>",
        "id": 158617804,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550241088
    },
    {
        "content": "<p>interesting</p>",
        "id": 158617817,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550241099
    },
    {
        "content": "<p>bool to Prop is a special case handled in the C++ code, iirc</p>",
        "id": 158618974,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550242044
    },
    {
        "content": "<p>this will change in some way in lean 4, but I don't remember where I read that</p>",
        "id": 158619078,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550242102
    }
]