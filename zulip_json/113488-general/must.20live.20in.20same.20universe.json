[
    {
        "content": "<p>Any insight into this error?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">object</span> <span class=\"o\">:</span> <span class=\"n\">rbmap</span> <span class=\"n\">string</span> <span class=\"n\">value</span> <span class=\"bp\">â†’</span> <span class=\"n\">value</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">nested inductive type compiled to invalid inductive type</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">nested inductive type compiled to invalid inductive type</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">nested inductive type compiled to invalid inductive type</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">nested occurrence &#39;rbnode.well_formed.{0} _nest_3_3.prod.json.value (fun (a : _nest_3_3.prod.json.value) (b : _nest_3_3.prod.json.value), (has_lt.lt.{0} string string.has_lt (prod.fst.{0 0} string _nest_3_3.json.value a) (prod.fst.{0 0} string _nest_3_3.json.value b)))&#39; lives in universe &#39;0&#39; but must live in the same universe as the inductive types being declared, which is &#39;1&#39;</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 129790411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531796649
    },
    {
        "content": "<p>I think it's because <code>rbtree</code> is defined as a subtype, and so contains a field which is a Prop, but I don't know what I should do about it</p>",
        "id": 129790488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531796866
    },
    {
        "content": "<p>You can only use inductive types this way. <code>rbnode</code> is inductive so you may be able to write your definition as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">object</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">rbnode</span> <span class=\"c\">/-</span><span class=\"cm\"> something in terms of value -/</span><span class=\"o\">),</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">well_formed</span> <span class=\"n\">lt</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">value</span>\n</pre></div>",
        "id": 129790726,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531797266
    },
    {
        "content": "<p>Then you can write a function that puts the <code>rbmap</code> back together.</p>",
        "id": 129790735,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531797322
    },
    {
        "content": "<p>You can define it if you use <code>meta inductive</code></p>",
        "id": 129790740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531797357
    },
    {
        "content": "<p>Oh nice, <code>meta</code> is good enough for me (for now anyways)</p>",
        "id": 129790781,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531797386
    }
]