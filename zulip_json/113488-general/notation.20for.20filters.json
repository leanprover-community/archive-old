[
    {
        "content": "<p>Having worked with filters in mathlib for a while, I've noticed that order.filter.basic can't make up its mind about which notation to use for filters:</p>\n<ul>\n<li>Sometimes it uses <code>f</code> and <code>g</code> (e.g. in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.prod_comm\">docs#filter.prod_comm</a>). I think this choice is bad because then you need to use different letters for functions (like <code>m</code>), which for a mathematician used to seeing <code>f</code> for functions is quite odd.</li>\n<li>Sometimes it uses <code>F</code> and <code>G</code> (e.g. in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.prod_map_map_eq'\">docs#filter.prod_map_map_eq'</a>). This choice is better, but you run into problems if you're dealing with filters on groups and <code>G</code> is generally used for groups.</li>\n<li>Sometimes it uses <code>a</code>, <code>b</code> and <code>x</code>, <code>y</code> (e.g. in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.prod_map\">docs#filter.tendsto.prod_map</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_prod_iff\">docs#filter.tendsto_prod_iff</a>). This goes against the use of these variables for inhabitants of types and members of sets.</li>\n<li>Sometimes it uses <code>l</code> (e.g. in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.map_inf_principal_preimage\">docs#filter.map_inf_principal_preimage</a>). This is admittedly better than all of the above options, but if you are dealing with more than one filter,  I find it awkward being limited to <code>l</code>.</li>\n<li>The neighborhood filters and the principal filters use bold curly math: ùìù, ùìü.</li>\n</ul>\n<p>In my own project, I've been using normal curly math letters, like ‚Ñ±, ùí¢, etc. for filters. This curly math letter notation is also used in the math literature.</p>\n<p>I would like to propose to make the filter notation consistent throughout mathlib. I vote for using the bold curly math letters. I would also like to volunteer to do this refactoring work (or help someone that already had this idea). Thoughts?</p>",
        "id": 269717157,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643367005
    },
    {
        "content": "<p>It's a bit harder to write and filters are everywhere. To me, it only makes sense to change the letters if you're heavily reworking one file anyway. I agree that having the same letters across files is useful (then you can copy-paste code and not spend 5min change letters one by one), but it's pretty low priority.</p>",
        "id": 269717978,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643367468
    },
    {
        "content": "<blockquote>\n<p>It's a bit harder to write</p>\n</blockquote>\n<p>This is not a good argument given the crazy amount of fancy unicode mathlib uses.</p>",
        "id": 269718106,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643367536
    },
    {
        "content": "<blockquote>\n<p>it's pretty low priority</p>\n</blockquote>\n<p>Indeed. But I would be happy to do it either way.</p>",
        "id": 269718290,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643367618
    },
    {
        "content": "<p>But usually the name of the variables are not fancy unicode. <br>\nAlso <code>\\McF</code> is quite exceptionally hard to write (compared to other sequences) for people that doesn't really know how to press the shift key like me.</p>",
        "id": 269718639,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1643367767
    },
    {
        "content": "<p>I find it surprising that this is a problem. I was originally using plain ascii in my project and everybody was egging me to use fancy unicode instead. And now the tables have turned!</p>",
        "id": 269718854,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643367902
    },
    {
        "content": "<p>We use ASCII for terms and fancy unicode for types. You were using ASCII for types. You now want to use fancy unicode for terms.</p>",
        "id": 269720161,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643368595
    },
    {
        "content": "<p>But lean/mathlib also uses fancy unicode in terms, e.g. in relations and operators, subscripts, superscripts, etc. In any case, my preference is to use the math notation from the literature. Ultimately, I don't really care what notation is used, as long as it is consistent.</p>",
        "id": 269720601,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643368829
    },
    {
        "content": "<p>For reference, I used fancy unicode for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.shadow\">docs#finset.shadow</a> and I regret it.</p>",
        "id": 269721388,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643369281
    },
    {
        "content": "<p>And I'm taking its generalization to any boolean algebra as an opportunity to get rid of the fancy unicode.</p>",
        "id": 269721585,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643369389
    },
    {
        "content": "<p>Never heard of shadows. In what branch of math do they appear?</p>",
        "id": 269727012,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643372430
    },
    {
        "content": "<p>Set family combinatorics. The shadow of a set family <code>A</code> (a set of sets) is the set of sets you can get to by removing one element of some set of <code>A</code>.</p>",
        "id": 269727357,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643372639
    },
    {
        "content": "<p>Ah, I should have realized it was combinatorics since it's under combinatorics.set_family.</p>",
        "id": 269727819,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643372890
    },
    {
        "content": "<p>For me, the main objection against using fancy unicode for variables is that in this case we shouldn't use the same unicode letters in notation.</p>",
        "id": 269830319,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643422324
    },
    {
        "content": "<p>I personally like <code>l</code>, it doesn't look like a function and it's easy to type. And we can easily have variants: <code>l'</code>, <code>l‚ÇÅ</code>, <code>l‚ÇÇ</code>, <code>‚Ñì</code>, and so on.</p>",
        "id": 269833808,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643426267
    },
    {
        "content": "<p>I think the idea of fancy curly letters for filters is a great one. I don't think you hear the authors of textbooks complaining that they don't want to use fancy letters because they take too long to LaTeX. I'm all for the normal mathematical notation being using throughout mathlib, if makes it easier to read, despite possibly being harder to write</p>",
        "id": 269849508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643445243
    },
    {
        "content": "<blockquote>\n<p>if makes it easier to read, despite possibly being harder to write</p>\n</blockquote>\n<p>This brings up a good point: The code is going to be read more often that it will be written, so it makes sense to optimize for readability.</p>",
        "id": 269860247,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643458015
    },
    {
        "content": "<blockquote>\n<p>I personally like l, it doesn't look like a function and it's easy to type. And we can easily have variants: l', l‚ÇÅ, l‚ÇÇ, ‚Ñì, and so on.</p>\n</blockquote>\n<p>I've seen <code>la</code> and <code>lb</code> as well. Is this also OK?</p>",
        "id": 269860344,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643458098
    },
    {
        "content": "<p>If we're going to use \\Mc* letters for filters, then we should agree on some relatively small set of letters that can be used for filters and shouldn't be used in <code>notation</code>.</p>",
        "id": 269872500,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643472197
    },
    {
        "content": "<p>Later we might need to shrink this list.</p>",
        "id": 269872508,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643472208
    },
    {
        "content": "<p>Just my 2c: I loathe writing the <code>\\Mc*</code> characters. It goes against all of my built in latex muscle memory. I tend to just use a Roman <code>F</code> (maybe with some decorations) for filters.</p>",
        "id": 269874640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643474557
    },
    {
        "content": "<p>Could we patch the VScode translations to (also) have <code>\\mathcalF</code> etc? If that would make life easier?</p>",
        "id": 269874983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643475001
    },
    {
        "content": "<p>My usual latex macros are <code>\\Fcal</code>, <code>\\Ffrak</code> etc.</p>",
        "id": 269875340,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643475372
    },
    {
        "content": "<p>I suppose I could set up my vscode/emacs with custom commands such as this.</p>",
        "id": 269875369,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643475420
    },
    {
        "content": "<p>I guess the question is... Does anyone actually like <code>\\Mc*</code>?</p>",
        "id": 269876404,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643476505
    },
    {
        "content": "<p>I also really hate typing <code>\\Mc*</code>.</p>",
        "id": 269876813,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643476967
    },
    {
        "content": "<p>Same here</p>",
        "id": 269878572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643479046
    },
    {
        "content": "<p>I do use custom translations in VSCode</p>",
        "id": 269878583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643479058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20filters/near/269876404\">said</a>:</p>\n<blockquote>\n<p>I guess the question is... Does anyone actually like <code>\\Mc*</code>?</p>\n</blockquote>\n<p>Me, a bit, when I want several terms called <code>a</code> .</p>",
        "id": 269880806,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643481488
    },
    {
        "content": "<p>I agree with Yury's objection. Fancy letters are usually used for notations; I had to check whether they are even legal identifier characters (they are)</p>",
        "id": 269880937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643481617
    },
    {
        "content": "<p>After years of using Latex I have to admit the novelty of being able to type fancy Unicode characters in just a few keystrokes still hasn‚Äôt worn off.</p>",
        "id": 269880987,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643481718
    },
    {
        "content": "<p>I believe the convention with curly letters in mathematics is to use them for sets of sets, which is why filters are often written as such</p>",
        "id": 269881031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643481730
    },
    {
        "content": "<p>Although one of these days we'll generalize filters to sets in a preorder and then the convention won't be as good</p>",
        "id": 269881064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643481767
    },
    {
        "content": "<p>Also, it's true that they are harder to write but more important to me is that they are harder to <em>read</em>. I always had to go get a dictionary when looking at mathscr and mathfrak letters</p>",
        "id": 269881184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643481913
    },
    {
        "content": "<p>I'm actually longing to doing this refactor, but I got told it involved convincing Patrick.</p>",
        "id": 269881195,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643481933
    },
    {
        "content": "<p>and this is exacerbated on a reasonably small monospace font</p>",
        "id": 269881199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643481936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> I wasn't wondering about whether people like the curly letters themselves, but rather the macro <code>\\Mc*</code> used to type them.</p>",
        "id": 269882275,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643483224
    },
    {
        "content": "<p>I think with <code>\\McF</code> it's fairly awkward to type an uppercase letter, followed by a lowercase one, followed by an uppercase one. Typing <code>\\Fcal</code> is much easier IMO</p>",
        "id": 269882386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643483355
    },
    {
        "content": "<p>Ah yeah no. I use it but I don't understand it.</p>",
        "id": 269882387,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643483356
    },
    {
        "content": "<p>It seems the discussion has derailed to a discussion about how to type fancy unicode. In this regard, let me say that I use vim with custom digraphs for all the fancy unicode, which are even harder to type. For example, I have to type C-k FQ to get ‚Ñ±. Ultimately, typing anything non-ascii sucks, be it in vim, vscode, emacs, etc.</p>\n<p>Anyways, so far, it seems that the majority are against the curly math letters. This is fine. Fr√©d√©ric Dupuis suggested using <code>l</code>. How do people feel about this?</p>",
        "id": 269884612,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643485937
    },
    {
        "content": "<p>Looking at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean</a> it seems that the letter <code>f</code> is the most common.</p>",
        "id": 269888763,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643490358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20filters/near/269875369\">said</a>:</p>\n<blockquote>\n<p>I suppose I could set up my vscode/emacs with custom commands such as this.</p>\n</blockquote>\n<p>Its easy to add extra/custom things to the vscode plugin, search in vscode settings for <code>Lean: extra translations</code> and edit it to add</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nt\">\"lean.input.customTranslations\"</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">\"mcF\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"‚Ñ±\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269889913,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643491563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20filters/near/269881195\">said</a>:</p>\n<blockquote>\n<p>I'm actually longing to doing this refactor, but I got told it involved convincing Patrick.</p>\n</blockquote>\n<p>I may have missed some messages and I'm a bit lost. Which refactor do you want to do? Using <code>McF</code>?</p>",
        "id": 269891277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643493377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20filters/near/269884612\">said</a>:</p>\n<blockquote>\n<p>Ultimately, typing anything non-ascii sucks, be it in vim, vscode, emacs, etc.</p>\n</blockquote>\n<p>I disagree. Using <code>\\a</code> to type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ±</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span> is really easy and efficient, whatever the editor. He the issue is that we have three characters alternating upper case and lower case. When I need to type <code>\\McF</code> a lot I simply give it a shorter abbreviation.</p>",
        "id": 269891368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643493493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20filters/near/269880987\">said</a>:</p>\n<blockquote>\n<p>After years of using Latex I have to admit the novelty of being able to type fancy Unicode characters in just a few keystrokes still hasn‚Äôt worn off.</p>\n</blockquote>\n<p>There is nothing preventing you from doing that in LaTeX as well. You simply need a modern TeX compiler such as xeLaTeX or LuaLaTeX.</p>",
        "id": 269891387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643493537
    },
    {
        "content": "<blockquote>\n<p>Using \\a to type Œ± is really easy and efficient, whatever the editor.</p>\n</blockquote>\n<p>That assumes you're using vscode with the lean extension. That doesn't work in e.g. nano, regardless of how you configure it.</p>",
        "id": 269897987,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643502022
    },
    {
        "content": "<p>We don't support people who are trying to make things difficult for themselves--why take away their fun?</p>",
        "id": 269898263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643502440
    },
    {
        "content": "<p>It also works in vim with <a href=\"https://github.com/Julian/lean.nvim\">https://github.com/Julian/lean.nvim</a> and emacs has the same support (<a href=\"https://github.com/leanprover/lean-mode\">https://github.com/leanprover/lean-mode</a>). The abbreviations files are kept synced so while getting the best abbreviations is always a work in progress everyone can use one of these 3 common editors easily</p>",
        "id": 269899303,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643503734
    },
    {
        "content": "<p>You can also configure <code>~/.XCompose</code> (if you're using Linux)</p>",
        "id": 269901711,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643506704
    },
    {
        "content": "<p>Or some more advanced input method. Pro: it will work in any app.</p>",
        "id": 269901719,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643506722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20filters/near/269901711\">said</a>:</p>\n<blockquote>\n<p>You can also configure <code>~/.XCompose</code> (if you're using Linux)</p>\n</blockquote>\n<p>(windows has WinCompose; i've sadly never found an equivalent for MacOS)</p>",
        "id": 269901802,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643506813
    },
    {
        "content": "<p>There's Settings &gt; Keyboard &gt; Text on macOS if you want replacements to work globally. But it doesn't use a compose key obviously, you can just stick \\a -&gt; Œ± in there or whatever.</p>",
        "id": 269902363,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643507464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20filters/near/269902363\">said</a>:</p>\n<blockquote>\n<p>There's Settings &gt; Keyboard &gt; Text on macOS if you want replacements to work globally. But it doesn't use a compose key obviously, you can just stick \\a -&gt; Œ± in there or whatever.</p>\n</blockquote>\n<p>That doesn't work uniformly across all applications. It works fine in TextEdit, but not if you're in the Terminal. Even fancier programs like <a href=\"https://textexpander.com/\">https://textexpander.com/</a> don't work correctly across all applications.</p>",
        "id": 269909113,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643516449
    },
    {
        "content": "<p>In any case, we're going off-topic again.</p>\n<blockquote>\n<p>Looking at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean</a> it seems that the letter f is the most common.</p>\n</blockquote>\n<p>I get this in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">grep</span> <span class=\"bp\">'</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter'</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n     <span class=\"mi\">395</span>\n<span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">grep</span> <span class=\"bp\">'</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter'</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n     <span class=\"mi\">398</span>\n</code></pre></div>",
        "id": 269909276,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643516699
    },
    {
        "content": "<p>Here's a general summary:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">ho</span> <span class=\"bp\">'\\</span><span class=\"n\">w</span><span class=\"bp\">\\+</span> <span class=\"o\">:</span> <span class=\"n\">filter'</span> <span class=\"bp\">|</span> <span class=\"n\">sort</span> <span class=\"bp\">|</span> <span class=\"n\">uniq</span> <span class=\"bp\">-</span><span class=\"n\">c</span>\n   <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">9</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">35</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">6</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">8</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">2</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">19</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">22</span> <span class=\"n\">at_bot</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">29</span> <span class=\"n\">at_top</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">14</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">6</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">4</span> <span class=\"n\">cofinite</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">compact_conv_nhd_filter_is_basis</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">compact_convergence_uniformity</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">2</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n <span class=\"mi\">392</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">5</span> <span class=\"n\">fi</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">filter</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">filter_empty</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">filter_local</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">filter_map_eq_filter</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">filter_zero</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n <span class=\"mi\">114</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">generate_empty</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">generate_univ</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">16</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">hFf</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">5</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">2</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">2</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n <span class=\"mi\">397</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">9</span> <span class=\"n\">la</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">large</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">17</span> <span class=\"n\">lb</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">11</span> <span class=\"n\">lc</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">4</span> <span class=\"n\">li</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">4</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">map_compose</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">map_id</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">map_map</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">map_monoid_hom</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">outer</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">28</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">stone_cech_unit</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">tendsto_abs_cocompact_at_top</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">5</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">1</span> <span class=\"n\">uniformity</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">31</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n  <span class=\"mi\">14</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n   <span class=\"mi\">4</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">filter</span>\n</code></pre></div>",
        "id": 269909571,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1643517144
    },
    {
        "content": "<p>I think this shows a clear preference for <code>f, g</code> or <code>l</code></p>",
        "id": 269909614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643517230
    },
    {
        "content": "<p>and I don't think it's necessary to make one choice between these two across the board</p>",
        "id": 269909664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643517278
    },
    {
        "content": "<p>I do think that <code>a,b,c</code> are bad names for filters unless they are mnemonic for something</p>",
        "id": 269909685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643517329
    },
    {
        "content": "<p>Well, the situation right now when you're searching for lemmas about filters is that you'll find some where <code>f</code> is a filter and some where <code>f</code> is a function, depending on which file your search lands in.</p>",
        "id": 269910386,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643518403
    },
    {
        "content": "<p>It feels more or less 50-50, and apparently the numbers bear this out.</p>",
        "id": 269910451,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1643518479
    }
]