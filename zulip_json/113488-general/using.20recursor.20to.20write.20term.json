[
    {
        "content": "<p>I'm trying to be a computer scientist, unsuccessfully. I'm trying to define a function in term mode.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">d1</span> <span class=\"o\">:</span> <span class=\"n\">D</span>\n<span class=\"bp\">|</span> <span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"n\">D</span>\n\n<span class=\"n\">def</span> <span class=\"n\">thing1</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- correct &quot;don&#39;t know how to synthesize placeholder -- here&#39;s a helpful context&quot;</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- correct</span>\n\n<span class=\"n\">def</span> <span class=\"n\">thing2</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n  <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  C.rec (D.rec ?m_3 ?m_4 d)</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  D.rec ?m_2 ?m_3 d</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m_1 d : Sort ?</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ?m_1 C.c1 : Sort ?</span>\n<span class=\"cm\">  -/</span>\n</pre></div>\n\n\n<p><code>thing1</code> is where things are going well. I want to use recursion on <code>c</code> and so I write <code>c.rec _ _</code> and both underscores have nice red underlines, indicating that I'm on the right track. </p>\n<p>But then I want to use recursion on <code>d</code> too, so I edit <code>thing1</code> until it becomes <code>thing2</code> and instead of having now three nice red underlines under my three underscores, Lean just gives up, flags the <code>c</code> in <code>c.rec</code> as an error. In reality the two inductive types are far more complicated and have parameters etc.</p>\n<p>Is there some trick to persuade Lean to start telling me the local context at every underscore? Have I just made some more basic error? It is going to be a royal pain figuring out all the types in my use case (some proofs are involved, I will need to drop into tactic mode at some point to supply all the terms needed). </p>\n<p>Am I missing a trick? Have I made an error?</p>",
        "id": 180624814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573651563
    },
    {
        "content": "<p>Try <code>D.rec_on d</code>. I think there's a bug where it doesn't use the <code>elab_as_eliminator</code> when you use projection notation</p>",
        "id": 180624922,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573651635
    },
    {
        "content": "<p>Also <code>C.rec_on c</code></p>",
        "id": 180625109,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573651777
    },
    {
        "content": "<p>I think I love you. <em>Many</em> thanks!</p>",
        "id": 180626954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573652969
    },
    {
        "content": "<p>Works in my real use case too :D I'm sure this has caused me problems on several occasions in the past. It's only now I am confident enough to start saying \"I think this should work\" rather than just saying \"maybe I need to understand things better\".</p>",
        "id": 180629236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573654387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120469\">@Ellen Arlt</span> I can write that function now.</p>",
        "id": 180629421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573654476
    }
]