[
    {
        "content": "<p>How to print an <code>expr</code> in a plaintext way? That is, represented as all constructors <code>app</code> <code>lam</code> <code>var</code>, etc..</p>",
        "id": 132012147,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534110078
    },
    {
        "content": "<p>Maybe I should provide a context: I'm parsing a <code>expr</code> which (in pretty print) read like \\forall (a b : bool), (b -&gt; a). But somehow I encouter <code>var 2</code> at <code>b</code> 's position, which is not possible because there should be only <code>0</code>(refering to <code>b</code>) and <code>1</code>(refering to <code>a</code>).</p>",
        "id": 132012314,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534110380
    },
    {
        "content": "<p>use <code>e.to_raw_fmt</code></p>",
        "id": 132012324,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534110415
    },
    {
        "content": "<p>it's actually <code>      ∀ (a b : bool), ↥b → ↥a</code>, to be precise.</p>",
        "id": 132012325,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534110420
    },
    {
        "content": "<p>Did you use <code>expr.lambdas</code> or <code>expr.pis</code>?</p>",
        "id": 132012338,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534110463
    },
    {
        "content": "<p>thank you, I got this: </p>\n<div class=\"codehilite\"><pre><span></span>(pi a default (const bool []) (pi b default (const bool []) (pi a default (app (app (app (const coe_sort [1,\n         1]) (const bool [])) (const coe_sort_bool [])) (var 0)) (app (app (app (const coe_sort [1,\n         1]) (const bool [])) (const coe_sort_bool [])) (var 2)))))\n</pre></div>",
        "id": 132012398,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534110545
    },
    {
        "content": "<p><code>pis</code> and <code>lambdas</code> have a known bug which behaves like you showed and there's a fix in mathlib, in <code>meta.expr</code></p>",
        "id": 132012450,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534110606
    },
    {
        "content": "<p>Oh, no, that's not what I thought</p>",
        "id": 132012460,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534110663
    },
    {
        "content": "<p>I think I didn't use expr.lambdas/pis explicitly. I just wrote the formula in this form.</p>",
        "id": 132012463,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534110666
    },
    {
        "content": "<p>You don't have only two bound variables, you have three because implication is also a pi-type</p>",
        "id": 132012467,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534110698
    },
    {
        "content": "<p>Gee.. rookie mistake...</p>",
        "id": 132012512,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534110734
    },
    {
        "content": "<p>I recommend you don't manipulate <code>var</code> directly, there's a better interface for it. What do you need with them?</p>",
        "id": 132012515,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534110746
    },
    {
        "content": "<p>I need to parse a user-provided formula to generate a query to SMT solvers.</p>",
        "id": 132012516,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534110771
    },
    {
        "content": "<p>these formulas are mostly like the one I said above.</p>",
        "id": 132012523,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534110791
    },
    {
        "content": "<p>So first I need extract declarations, (a, b : bool), then the assertions (a -&gt; b), or something more complex.</p>",
        "id": 132012524,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534110838
    },
    {
        "content": "<p>I see. So you're trying to use constants in your smt formulas rather than use quantifiers. What you can do is strip one quantifier at a time like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">unbind_vars</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"o\">([],</span><span class=\"n\">e</span><span class=\"o\">),</span>\n   <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">b&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">instantiate_var</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">vs</span><span class=\"o\">,</span><span class=\"n\">b&#39;&#39;</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">unbind_vars</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">::</span> <span class=\"n\">vs</span><span class=\"o\">,</span> <span class=\"n\">b&#39;&#39;</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 132012721,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534111286
    },
    {
        "content": "<p>The only thing you do with <code>var</code> in this code is use <code>intantiate_var</code></p>",
        "id": 132012763,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534111330
    },
    {
        "content": "<p>this is so much better than mine. Right now I have to keep track of the variable stack myself.</p>",
        "id": 132012813,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534111475
    },
    {
        "content": "<p>The more you know ... <span class=\"emoji emoji-1f320\" title=\"shooting star\">:shooting_star:</span></p>",
        "id": 132012925,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534111784
    },
    {
        "content": "<p>..the more I have to worry about?</p>",
        "id": 132012975,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534111810
    },
    {
        "content": "<p><span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 132012978,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534111858
    },
    {
        "content": "<p>I'm hoping not in this case <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 132013027,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534111935
    }
]