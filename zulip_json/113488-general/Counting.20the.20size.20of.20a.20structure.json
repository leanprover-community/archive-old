[
    {
        "content": "<p>Given a Lean data structure, is there a way to count the size of the value, taken reference sharing into account?</p>\n<p>As a concrete example, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"c1\">-- 3 / 2</span>\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">c</span> <span class=\"c1\">-- 7 / 3</span>\n<span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">d</span> <span class=\"c1\">-- 15 / 4</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">e</span>  <span class=\"c1\">-- 31 / 5</span>\n</code></pre></div>\n<p>If I walk over the tree and count every node one, I will get that <code>f</code> has size 31. However, in most functional languages, references can be shared, so a more accurate size would be 5.</p>\n<p>Does Lean share references? And if so, is it possible to compute the size somehow?</p>",
        "id": 244047649,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1624764945
    },
    {
        "content": "<p>Would something like that do what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">without_ref</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>       <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">without_ref</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">without_ref</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">with_ref_aux</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>       <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">with_ref_aux</span> <span class=\"n\">l</span> <span class=\"bp\">∪</span> <span class=\"n\">with_ref_aux</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">with_ref</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">with_ref_aux</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"c1\">-- 3 / 2</span>\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">c</span> <span class=\"c1\">-- 7 / 3</span>\n<span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">d</span> <span class=\"c1\">-- 15 / 4</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">e</span>  <span class=\"c1\">-- 31 / 5</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">without_ref</span> <span class=\"n\">f</span>\n<span class=\"k\">#eval</span> <span class=\"n\">with_ref_aux</span> <span class=\"n\">c</span>\n<span class=\"k\">#eval</span> <span class=\"n\">with_ref</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 244058658,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624786407
    },
    {
        "content": "<p>You'll have to define to define what you mean by size anyway. If you really mean reference and not equality, then no that's impossible. If <code>c = d = b a a</code>, then you can't expect <code>size (b c c) = 3</code> and <code>size (b c d) = 4</code>, because then substituting <code>c = d</code> would give <code>3 = 4</code>.</p>",
        "id": 244058790,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624786605
    },
    {
        "content": "<p>I really do mean reference, unfortunately. </p>\n<p>Can you confirm though that Lean does share reference internally? Intuitively it should be, since _not_ sharing seems harder to implement, but I want to be sure.</p>",
        "id": 244060593,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1624789876
    },
    {
        "content": "<p>I don't know. Ask <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> or <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 244060648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624789969
    },
    {
        "content": "<p>I assume what you mean here is \"size <em>when run in the VM</em>\"?</p>",
        "id": 244060857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624790362
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sizeof\">docs#sizeof</a> that is used, inter alia, by the equation compiler to infer that terms aren't growing without bound in recursive definitions. Perhaps it is related to what you need.</p>",
        "id": 244063815,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624795223
    },
    {
        "content": "<p>I think it might help for you to give some discussion about what you are looking to do with this information.  Also there are different levels here.  </p>\n<p>There is the pure mathematical level.  In that case, as Yael pointed out, since Lean as a math language, can’t behave differently on equal objects, there is no way to have a math function which takes a value as input and can say anything about its implementation.  (This goes as well for <code>sizeof</code> mentioned above.)</p>\n<p>Then there is the expression level.  Your <code>f</code> definition is stored in the environment, and using <code>meta</code> code, you can examine its expression, recursing over the tree.  In that case, I know references are shared since <code>e</code> in the expression for <code>f</code> is just basically a reference to the previous <code>e</code> declaration. You would have to do it as something like <code>refsizeof “e”</code> where <code>refsizeof</code> is a meta function which looks up a name from the environment, gets its expression, and traverses the tree.  (Edit: the <code>refsizeof</code> doesn’t exist.  You would have to write it.)</p>\n<p>Finally, there is the execution level, where this datastructure is turned into computer code and uses pointers to other data structures.  It would be silly not to share references, but I don’t know how the VM works exactly and if there is any way to probe it.  Also, for Lean 4 (every thing I’ve said so far is for Lean 3) you might find this paper interesting where they show optimizations to recursive computations exploiting shared references: <a href=\"https://dl.acm.org/doi/10.1145/3408997\">https://dl.acm.org/doi/10.1145/3408997</a></p>",
        "id": 244063817,
        "sender_full_name": "Jason Rute",
        "timestamp": 1624795226
    },
    {
        "content": "<p>Can I ask the dumb question - why do you want/care about this? What is it you are ultimately trying to achieve?</p>\n<p>If what you want is not possible, it's possible there's another way to achieve what you actually want without having to resolve this particular issue.</p>",
        "id": 244067772,
        "sender_full_name": "Stephen Butler",
        "timestamp": 1624801460
    },
    {
        "content": "<p>Leo wrote some code to calculate the size of a term for a Lean 4 test case: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/KyleAlg.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/KyleAlg.lean</a> (see <code>dagSize</code>) -- not sure if it can be ported to Lean 3, but maybe it's useful to see.</p>",
        "id": 244072343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624808748
    },
    {
        "content": "<p>I can't seem to find any meta function in Lean 3 that gives access to the pointer address of an object (this is what makes that Lean 4 code work as well as the optimizations in the paper). However, if you really want to be certain that Lean 3 shares references (in the VM), here is a simple proof by example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"sd\">/-- Binary tree of given height (not counting root).  Implemented via sharing references. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">binary_tree</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">A.a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">binary_tree</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">A.b</span> <span class=\"n\">t</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">left_path_size</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">A.a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">A.b</span> <span class=\"n\">t1</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">left_path_size</span> <span class=\"n\">t1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">left_path_size</span> <span class=\"o\">(</span><span class=\"n\">binary_tree</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- 2</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> This tree if expanded is larger than the number of atoms in the universe -/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">left_path_size</span> <span class=\"o\">(</span><span class=\"n\">binary_tree</span> <span class=\"mi\">1000</span><span class=\"o\">)</span> <span class=\"c1\">-- 1000</span>\n</code></pre></div>",
        "id": 244082831,
        "sender_full_name": "Jason Rute",
        "timestamp": 1624824918
    },
    {
        "content": "<p>As others have already surmised, this information is not exposed to lean code, although the VM is keeping track of it. It would not be hard to expose though, with a signature like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">constant</span> <span class=\"n\">reference_count</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>This is used by lean to make some behavioral changes for unshared arrays, for example. But knowing that something has 6 references or 5 is not necessarily so useful, and also you will have to be careful about off by one errors because the <code>reference_count</code> function itself will count as an extra reference (that's why it is being passed through the function in this example instead of just consumed)</p>",
        "id": 244159598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624893153
    },
    {
        "content": "<p><code>expr.replace</code> is an example of a function that exploits dag sharing in order to efficiently traverse a highly shared expr data structure. Unfortunately I don't know a way to do the same thing for user types, so for example with the <code>binary_tree</code> type in Jason's example I don't know how you could write a <code>size</code> function that doesn't take exponential time in the highly shared case</p>",
        "id": 244160015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624893315
    },
    {
        "content": "<p>we could just do something similar to lean 4 and expose pointer positions so that you can stick them in a hash table. Of course you will lose any ability to prove the correctness of such a function, and there is no way to avoid the unsafety of these accessors because they don't respect equality</p>",
        "id": 244160287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624893429
    },
    {
        "content": "<p>Oh, I didn't necessarily want a function like <code>reference_count</code> that \"just works\" (although it would be cool to have one nonetheless). Having a function that takes a value and return an address (perhaps virtual one) would suffice for me. I can walk the structure and do the counting myself.</p>",
        "id": 244229652,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1624937385
    },
    {
        "content": "<p>But as Jason said, this doesn't seem to be possible to Lean 3. But it is possible in Lean 4, as Kyle's link shows.</p>",
        "id": 244229738,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1624937502
    },
    {
        "content": "<p>As Mario said it would be possible to add access to the pointer as a meta function, but it would require modifying Lean 3 to expose it.  (It would have to be <code>meta</code> since it doesn’t respect equality.  Similarly the Lean 4 version is <code>unsafe</code>.)</p>",
        "id": 244229962,
        "sender_full_name": "Jason Rute",
        "timestamp": 1624937807
    }
]