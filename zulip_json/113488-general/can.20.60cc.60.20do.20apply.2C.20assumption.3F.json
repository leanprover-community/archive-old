[
    {
        "content": "<p>Should I expect <code>cc</code> to be able to solve this? It doesn't. Is there a tactic which does?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hUV</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hεU</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hUV</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hεU</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199989239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591471149
    },
    {
        "content": "<p><code>tauto</code></p>",
        "id": 199989456,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591471505
    },
    {
        "content": "<p>Great, thanks Chris. For years now I have been quite happy to write proofs such as the above, but I am now getting lazy :-)</p>",
        "id": 199990026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591472457
    },
    {
        "content": "<p>I thought tauto just did propositional logic goals, but after reading the docstring I now discover that <code>solve_by_elim</code> also closes the goal.</p>",
        "id": 199990042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591472513
    },
    {
        "content": "<p>In fact it seems that <code>solve_by_elim</code> was designed specifically to solve this kind of goal. <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span></p>",
        "id": 199990088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591472562
    }
]