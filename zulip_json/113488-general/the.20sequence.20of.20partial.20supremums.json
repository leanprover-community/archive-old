[
    {
        "content": "<p>I've recently wanted some API to talk about the sequence of partial supremums of a function <code>f : ℕ → α</code> for <code>[semilattice_sup_bot α]</code>.</p>\n<p>One alternative is to just use <code>(finset.range n).sup f</code>, but I found that it was nicer if I just made a new definition and proved some API about it, but I'm left feeling uncertain whether it is API-for-its-own-sake or actually useful. Any advice on whether we want the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The monotone sequence of supremums of the first `n` elements of a sequence. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">partial_sups</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→ₘ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">nat.rec</span> <span class=\"bp\">⊥</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">monotone_of_monotone_nat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">le_sup_left</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">partial_sups_zero</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">partial_sups</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">partial_sups_succ</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">partial_sups</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">partial_sups</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_partial_sups</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">partial_sups</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_sup_right</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">le_sup_left</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">partial_sups_le</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">partial_sups</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sup_le</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">nat.lt.step</span> <span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">n</span><span class=\"o\">))}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">partial_sups_eq</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">partial_sups</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">partial_sups</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.range_succ</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_insert</span><span class=\"o\">,</span> <span class=\"n\">sup_comm</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Note this lemma requires a distributive lattice,</span>\n<span class=\"c1\">-- so is not useful (or true) in situations such as submodules.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">partial_sups_disjoint_of_disjoint</span> <span class=\"o\">[</span><span class=\"n\">bounded_distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">partial_sups</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">disjoint_bot_left</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">partial_sups</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">disjoint_sup_left</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_of_succ_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_of_succ_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can avoid using it (I want it for proving that all noetherian rings has the strong rank condition), at the expense of ever-so-slightly-cruftier proofs in my application.</p>",
        "id": 239921233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621742181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> you might be interested in this. One should perhaps prove <code>partial_sups (f : ℕ →ₘ α) = f</code>. It's probably a Galois insertion.</p>",
        "id": 239942055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621766797
    },
    {
        "content": "<p>I think unfortunately there's an off-by-one error in this additional statement (<code>partial_sups f 0</code> is always <code>bot</code>).</p>",
        "id": 239942818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621767687
    },
    {
        "content": "<p>Then perhaps you should be taking sups over {x &lt;= n}?</p>",
        "id": 239943689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621768648
    },
    {
        "content": "<p>Sure. For my application I only care about \"eventually\" stuff anyway.</p>",
        "id": 239943921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621768908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/the.20sequence.20of.20partial.20supremums/near/239942055\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> you might be interested in this. One should perhaps prove <code>partial_sups (f : ℕ →ₘ α) = f</code>. It's probably a Galois insertion.</p>\n</blockquote>\n<p>Although I have no concrete use-case right now, I could very well imagine using Scott's definition of <code>partial_sups</code>, those lemmas about it, and perhaps even the statements Kevin suggested about it. But I clearly don't have enough experience to comment one way or the other about Scott's original question of \"whether we want the following\". (I'd naively just want all good math in mathlib <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>, certainly including this.)</p>\n<p>I suppose this came up because of the <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monotone.20limits\">monotone limits thing</a>. That was just something I stumbled on while playing my own NNG-sequel: the monotone limits lemma was one of the items I wished I had had in one of the boss levels (for the record, I beat that boss, but not without some hiding in corners). Mainly I was surprised not to find that item by <code>library_search</code>/<code>tidy</code>/<code>simp</code>.</p>\n<p>I definitely hope to be able to contribute something at some point, but for now I am still at the beginner stage of playing my own first game, to get an idea about what it takes to translate a bit of math to Lean. I will of course tell about that game soon enough (whether you ask for it or not, I'm afraid): either when give up or when I've played it through. But for now I have chosen to shield myself from spoilers by any scary omnipotent formalizers here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. Perhaps it because I'm the kind of person who prefers to bang my head against a wall until the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">&amp;</mi><mtext> ⁣</mtext><mo>∮</mo><mtext> ⁣</mtext><mo>⋆</mo><mi mathvariant=\"normal\">#</mi></mrow><annotation encoding=\"application/x-tex\"> \\&amp; \\! \\oint \\! \\star \\#</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.11112em;vertical-align:-0.30612em;\"></span><span class=\"mord\">&amp;</span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∮</span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">⋆</span><span class=\"mord\">#</span></span></span></span> washing machine works...</p>",
        "id": 240062849,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1621868448
    },
    {
        "content": "<p>Did you do all the exercises in the tutorial project? The monotone limit thing is definitely there, without any filters.</p>",
        "id": 240075701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621873928
    },
    {
        "content": "<p>I checked and apparently I did tutorials 1-6 in February. Seems I didn't do 7-9... I suspect it might be because I found Kevin's course at that point <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>.</p>\n<p>You are of course right: tutorials 5 has the monotone limit statement for <code>ℝ</code>, even in the completeness axiom form I asked earlier. So I had played through it and forgotten. But even if my memory were better than it is, I think I would <em>prefer</em> to find these is by <code>library_search</code>... This and the right generality was the question. For the right generality, the answers by you and Kevin were most helpful!</p>",
        "id": 240105938,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1621887411
    }
]