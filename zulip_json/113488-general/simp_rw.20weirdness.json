[
    {
        "content": "<p>A student just came to me with the following question, which I'm completely bamboozled by:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- simp_rw [abs_sub_comm], -- ??</span>\n  <span class=\"c1\">-- convert ha,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">abs_sub_comm</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"c1\">-- ??</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>They can't use <code>rw abs_sub_comm</code> on either the goal or <code>ha</code>, presumably because it's under a binder. But why does <code>simp_rw</code> <em>only</em> work on <code>ha</code> and not on the goal? When applied to the goal you get the error <code>simplify tactic failed to simplify</code> despite everything looking completely formally the same to me. </p>\n<p>Probably unrelated: it would be nice if <code>convert ha using 37</code> turned the goal into <code>|a n - t| = |t - a n|</code> but in practice it makes essentially no progress. I'm also slightly surprised by this...</p>",
        "id": 291161413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659001709
    },
    {
        "content": "<p>This does not answer much, but the very verbose <code>congrm (∀ ε : ℝ, 0 &lt; ε → ∃ B : ℕ, ∀ n : ℕ, B ≤ n → (_ &lt; ε))</code> does what <code>convert ha</code> alone should have done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">congrm</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">abs_sub_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291166186,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659005476
    },
    {
        "content": "<p>Maybe this is a cunning plot by Patrick to get everyone to use filters.</p>",
        "id": 291166744,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659005877
    },
    {
        "content": "<p>Actually, this is some further weirdness: change the order of the subtraction and <code>simp_rw</code> works on the target!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"c1\">-- note that this is the same as the hypothesis `ha`</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span><span class=\"o\">],</span> <span class=\"c1\">-- works!</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span><span class=\"o\">],</span> <span class=\"c1\">-- but doing it twice does not!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Maybe it is because <code>a</code> is a function and some unification does not work on it, but it does on <code>t</code>?</p>",
        "id": 291167890,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659006653
    },
    {
        "content": "<p>here is a shorter failuer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span><span class=\"o\">],</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span><span class=\"o\">],</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291168045,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659006767
    },
    {
        "content": "<blockquote>\n<p>Actually, this is some further weirdness: change the order of the subtraction and simp_rw works on the target!</p>\n</blockquote>\n<p>Yes, in my original post I noted that <code>simp_rw</code> works on <code>ha</code> but not the goal. It's order-dependent. Your example is a clearer version of this.</p>",
        "id": 291169099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659007551
    },
    {
        "content": "<p>Ah, I had read your comment as saying that goals and hypotheses are dealt with differently.  They might, but not in this case!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 291170036,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659008270
    },
    {
        "content": "<p>I may stop after this, it seems that the order in which the variables are declared (and not their type) matters:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span> <span class=\"c1\">--fails</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"c1\">--  note that `b` is declared first here</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291170600,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659008701
    },
    {
        "content": "<p>Oh nice! What the heck is going on?</p>",
        "id": 291170799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659008856
    },
    {
        "content": "<p>It is really puzzling: whenever I think that it might be something, it turns out that it isn't!  Very cool example!</p>",
        "id": 291170872,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659008887
    },
    {
        "content": "<p>Btw, it is really <code>simp</code> that has this behaviour: <code>simp_rw</code> works until it calls <code>simp</code> and then <code>simp</code> fails.  I updated the last example to use <code>simp only</code> and still displaying the same failure pattern.</p>\n<p>Also, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>works, but, depending on the parity of the <code>add_comm</code>s, the <code>simp</code> may or may not work!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 291172286,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659009791
    },
    {
        "content": "<p>Isn't this some sort of loop detection built in to <code>simp</code>?</p>",
        "id": 291172958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659010099
    },
    {
        "content": "<p>Because <code>simp [add_comm]</code> would loop like crazy. But (iirc) it decides to only rewrite when it ends up sorting subexpressions, for some random ordering of subexpressions. And this ordering is probably influenced by de Bruijn indices, which are influenced by the order in which vars are declared.</p>",
        "id": 291173084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659010184
    },
    {
        "content": "<p>Johan, your explanation fits with all that I have been observing!</p>",
        "id": 291173945,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659010613
    },
    {
        "content": "<p>And this is a sensible default for <code>simp</code>. But since <code>simp_rw</code> only does a single simp-pass, it would make sense if that loop-detection were disabled.</p>",
        "id": 291174089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659010701
    },
    {
        "content": "<p><code>simp_rw</code> does not make a single pass through</p>",
        "id": 291176516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659012242
    },
    {
        "content": "<p><code>simp only [add_comm] { single_pass := tt }</code> does though</p>",
        "id": 291176559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659012263
    },
    {
        "content": "<p>Ooh <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> So what <em>does</em> <code>simp_rw</code> do? I guess I don't have an accurate model for how <code>simp_rw</code> is different from <code>simp</code>.</p>",
        "id": 291176603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659012296
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.simp_rw/src\">src#tactic.interactive.simp_rw</a></p>",
        "id": 291176636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659012318
    },
    {
        "content": "<p>It just calls <code>simp only [lemma]</code> in sequence.</p>",
        "id": 291176673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659012345
    },
    {
        "content": "<p>Yep, I get it now.</p>",
        "id": 291176858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659012475
    }
]