[
    {
        "content": "<p>Any advice for resolving:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">aeval</span> <span class=\"bp\">ℤ</span> <span class=\"n\">R</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_ring_hom</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> fails with:</span>\n<span class=\"cm\">```</span>\n<span class=\"cm\">synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized</span>\n<span class=\"cm\">  @polynomial.algebra&#39;.{0 0} int int.comm_semiring int (@comm_semiring.to_semiring.{0} int int.comm_semiring)</span>\n<span class=\"cm\">    (@algebra_int.{0} int int.ring)</span>\n<span class=\"cm\">inferred</span>\n<span class=\"cm\">  @polynomial.algebra&#39;.{0 0} int int.comm_semiring int (@comm_semiring.to_semiring.{0} int int.comm_semiring)</span>\n<span class=\"cm\">    (@algebra.id.{0} int int.comm_semiring)</span>\n<span class=\"cm\">```</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 203675988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594612964
    },
    {
        "content": "<p>I can get</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">aeval</span> <span class=\"bp\">ℤ</span> <span class=\"n\">R</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"bp\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_ring_hom</span>\n</code></pre></div>\n\n\n<p>by first providing the instance <code>subsingleton (algebra ℤ R)</code>, but it's not an ideal solution.</p>",
        "id": 203677837,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594615948
    },
    {
        "content": "<p>Because this doesn't help if someone quite reasonably writes <code>(polynomial.aeval ℤ R r).to_ring_hom</code>...</p>",
        "id": 203677873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594616041
    },
    {
        "content": "<p>(And the <code>convert</code> results in a completely unusable term...)</p>",
        "id": 203678320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594616695
    },
    {
        "content": "<p>Hmm, frustrating. I wonder if it is in some way related to <a href=\"#narrow/stream/113488-general/topic/splitting.20field.20timeout\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/splitting.20field.20timeout</a></p>",
        "id": 203679515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594618434
    }
]