[
    {
        "content": "<p>Am I allowed to ask for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>these days, or is that verboten?</p>",
        "id": 235628146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619074539
    },
    {
        "content": "<p>I'm trying to match up the abstract and concrete definitions of <code>projective</code> that we now have. The problem is that <code>Module R</code> is the category of modules over <code>R</code> (so <code>R</code> must be a ring, not a semiring), while in <code>is_projective.of_lifting_property</code>, we quantify over semimodules. So in order to show that an <code>X : Module R</code> with <code>projective X</code> also has <code>is_projective X</code>, I need to know those semimodules are actually modules.</p>",
        "id": 235628694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619074842
    },
    {
        "content": "<p>So I'm happy if these are evil instances: I promise not to ever release them from a <code>Prop</code>-valued goal. :-)</p>",
        "id": 235629275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619074989
    },
    {
        "content": "<p>Another alternative is to give up on this silly semimodule nonsense completely. I'm well aware that you can have semimodules over a semiring but honestly, do semimodule theorists (if such people actually exist) really study projective semimodules?</p>",
        "id": 235629659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619075090
    },
    {
        "content": "<p>I would support not caring about whether semimodules are projective. :-)</p>",
        "id": 235629732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619075115
    },
    {
        "content": "<p>What I'm saying is that I was just conforming to mathlib principles when I defined projective semimodules, and have 0 applications in mind</p>",
        "id": 235629797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619075134
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/semimodule.add_comm_monoid_to_add_comm_group/src\">src#semimodule.add_comm_monoid_to_add_comm_group</a></p>",
        "id": 235630250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619075342
    },
    {
        "content": "<p>found it!</p>",
        "id": 235630253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619075344
    },
    {
        "content": "<p>Oh, but <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> is about to change all this.</p>",
        "id": 235630974,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619075754
    },
    {
        "content": "<p>maybe not.</p>",
        "id": 235631156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619075866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/module.20from.20semimodule.20over.20a.20ring/near/235628146\">said</a>:</p>\n<blockquote>\n<p>Am I allowed to ask for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>these days, or is that verboten?</p>\n</blockquote>\n<p>The first one can not be a global instance, as <code>R</code> is not determined from the target, so there would be some unknown metavariable in the instance search, which is very bad. But you can use it in proofs with explicit declarations as you like. The second one is already an instance, since <code>semimodule</code> and <code>module</code> are the same thing.</p>",
        "id": 235635010,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619078048
    },
    {
        "content": "<p>I'm still not getting this to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">semimodule.add_comm_monoid_to_add_comm_group</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mM</span><span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sM</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"bp\">???</span>\n</code></pre></div>",
        "id": 235644107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619082830
    },
    {
        "content": "<p>(This is post <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a>.)</p>",
        "id": 235644192,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619082865
    },
    {
        "content": "<p>How about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mM</span><span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sM</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">sM</span><span class=\"o\">}</span> <span class=\"c1\">-- (or `{..(infer_instance : semimodule R M)}` or even `{..‹semimodule R M›}`)</span>\n</code></pre></div>",
        "id": 235644390,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619082971
    },
    {
        "content": "<p>Wouldn't it be a nicer solution to just get rid of <code>module</code> altogether and rename <code>semimodule</code> to <code>module</code>? Whenever you need a <code>-</code> on <code>R</code> or <code>M</code> you can add it back in through the other typeclasses.</p>",
        "id": 235645014,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619083335
    },
    {
        "content": "<p>Abbreviations are really weird. As Anne suggests, I would just ditch <code>semimodule</code> and rename it to <code>module</code>, since as far as I can see the abbreviation we currently have doesn't buy us anything, and is creating problems sometimes.</p>",
        "id": 235647822,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619084534
    },
    {
        "content": "<p>Shall I make a PR to try it out (and do the same for <code>vector_space</code>)?</p>",
        "id": 235649761,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619085538
    },
    {
        "content": "<p>I ran <code>sed -i s/semimodule/module/g s/vector_space/module/g **/*.lean</code>, see <a href=\"https://github.com/leanprover-community/mathlib/issues/7322\">#7322</a> for the result.</p>",
        "id": 235651520,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619086425
    },
    {
        "content": "<p>I went through all changes. My main question: it would be okay to keep <code>dim</code> in the <code>vector_space</code> namespace, even though there is no definition called <code>vector_space</code>?</p>",
        "id": 235656323,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619089179
    },
    {
        "content": "<p>(Or should I just go ahead and move it to the <code>free_module</code> namespace, in anticipation of a <code>free_module</code> typeclass?)</p>",
        "id": 235656416,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619089204
    },
    {
        "content": "<p>My guess is that the typeclass would be called <code>module.free</code></p>",
        "id": 235657559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619089907
    },
    {
        "content": "<p>We could just have <code>module.rank</code> and never use <code>dim</code>?</p>",
        "id": 235657623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619089930
    },
    {
        "content": "<p>I'm not sure the abbreviation is a problem here - Scott's example just seems like a weird thing to want to do</p>",
        "id": 235657990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619090156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/module.20from.20semimodule.20over.20a.20ring/near/235649761\">said</a>:</p>\n<blockquote>\n<p>Shall I make a PR to try it out (and do the same for <code>vector_space</code>)?</p>\n</blockquote>\n<p>Heh, we're coming full circle</p>",
        "id": 235658344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619090345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>'s suggestion sounds good. I'll see if calling it <code>rank</code> works, and then add a TODO that this should be defined for modules that are not over a field.</p>",
        "id": 235659927,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619091175
    },
    {
        "content": "<p>One drawback: <code>_root_.rank</code> already exists, the rank of a linear map. So <code>module.rank</code> will have to be a protected definition (until we rename <code>_root_.rank</code> to <code>linear_map.rank</code>).</p>",
        "id": 235662809,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619092590
    },
    {
        "content": "<p>By the way, I found an example of the <code>instance : module := {.. infer_instance : semimodule}</code> pattern at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/triv_sq_zero_ext.module\">docs#triv_sq_zero_ext.module</a></p>",
        "id": 235665449,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619093727
    },
    {
        "content": "<p>Does that instance break if you change it to <code>:= infer_instance</code>?</p>",
        "id": 235665760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619093863
    },
    {
        "content": "<p>I'm currently compiling mathlib with (among others) that entire instance removed, so could you check that yourself? :)</p>",
        "id": 235665945,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619093950
    },
    {
        "content": "<p>On the <code>semimodule_to_module</code> branch, I'm getting a timeout in <code>Module.limit_module</code> (<code>src/algebra/category/Module/limits.lean</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">limit_module</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">types.limit_cone</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">sections_submodule</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Doing this in term mode makes it almost instant (60ms elaboration time):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">limit_module</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">types.limit_cone</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">sections_submodule</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n<span class=\"c1\">-- or:</span>\n<span class=\"kd\">instance</span> <span class=\"n\">limit_module</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">types.limit_cone</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">sections_submodule</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 235691533,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619103088
    },
    {
        "content": "<p>And if you change <code>change</code> to <code>show</code> in tactic mode?</p>",
        "id": 235691695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619103145
    },
    {
        "content": "<p>Also times out.</p>",
        "id": 235691808,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619103195
    },
    {
        "content": "<p>I've found, in my large refactors like the nat-mul one, or trying things with the nsmul and gsmul ones, that <code>change</code> tactic proofs are often a troublemaker.</p>",
        "id": 235692425,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619103421
    },
    {
        "content": "<p>They're good at getting the goal to be something human readable, and perhaps <code>rw</code>able, but really they usually hide heavy-rfl steps.</p>",
        "id": 235692521,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619103464
    },
    {
        "content": "<p>And are particularly brittle to changes in defeq</p>",
        "id": 235692550,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619103477
    },
    {
        "content": "<p>I tried using <code>rw (rfl : ... = ...)</code> instead, but that gives an incorrect motive error.</p>",
        "id": 235692683,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619103515
    },
    {
        "content": "<p>Looking at the <code>is_def_eq_detail</code> trace, looks like it really is the <code>limit_add_comm_group</code> that is being unified badly.</p>",
        "id": 235692839,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619103589
    },
    {
        "content": "<p>Aha, defining <code>limit_add_comm_monoid</code> analogous to <code>limit_add_comm_group</code> solves the timeout almost instantly.</p>",
        "id": 235695793,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619104225
    }
]