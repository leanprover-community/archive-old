[
    {
        "content": "<p>Does this generalization make sense?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Pullback a multiplicative action along an injective map respecting `•`, while pulling the base monoid along g. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">function.injective.mul_action₂</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→*</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_action</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">•</span><span class=\"o\">),</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul</span><span class=\"o\">,</span> <span class=\"n\">g.map_one</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)],</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul</span><span class=\"o\">,</span> <span class=\"n\">g.map_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Or does this factor into <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.mul_action\">docs#function.injective.mul_action</a> and some other definition that doesn't exist yet?</p>",
        "id": 231967991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616766877
    },
    {
        "content": "<p>The application: I want to transport <code>semimodule (⨁ i, A i) (⨁ i, A i)</code> (aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semiring.to_semimodule\">docs#semiring.to_semimodule</a> applied to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.semiring\">docs#direct_sum.semiring</a>) to <code>semimodule (A 0) (A i)</code></p>",
        "id": 231968258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616766969
    },
    {
        "content": "<p>Ah nevermind, it does factor - so this is now a \"do we have the thing it factors to\" queston: <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Transporting.20.60mul_action.60.20along.20a.20.60monoid_hom.60/near/231975342\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Transporting.20.60mul_action.60.20along.20a.20.60monoid_hom.60/near/231975342</a></p>",
        "id": 231975769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616769641
    }
]