[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> how should we define the <code>char</code> of a field?</p>",
        "id": 135921382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716085
    },
    {
        "content": "<p>I think your definition should be on semirings instead of zero/one/mul classes</p>",
        "id": 135921432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716136
    },
    {
        "content": "<p>I guess it could be on rings, since a nonzero characteristic semiring is a ring</p>",
        "id": 135921541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716220
    },
    {
        "content": "<p>Should it be a class or just a Prop?</p>",
        "id": 135921546,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539716224
    },
    {
        "content": "<p>a prop, it is a prop</p>",
        "id": 135921574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716252
    },
    {
        "content": "<p>oh wait you aren't asking about <code>char_p</code></p>",
        "id": 135921587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716269
    },
    {
        "content": "<p>both</p>",
        "id": 135921653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716305
    },
    {
        "content": "<p>I'm asking about <code>char</code>.</p>",
        "id": 135921654,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539716308
    },
    {
        "content": "<p>I'm asking about this thing in general</p>",
        "id": 135921657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716311
    },
    {
        "content": "<p>how did metamath / other languages deal with this?</p>",
        "id": 135921670,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716326
    },
    {
        "content": "<p>and is char(Q) 0 or 1?</p>",
        "id": 135921676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716333
    },
    {
        "content": "<p>char(Q) is 0</p>",
        "id": 135921705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716362
    },
    {
        "content": "<p>in where?</p>",
        "id": 135921712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716369
    },
    {
        "content": "<p>in metamath</p>",
        "id": 135921720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716374
    },
    {
        "content": "<p>and in math</p>",
        "id": 135921723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716379
    },
    {
        "content": "<p>but how is char defined?</p>",
        "id": 135921730,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716389
    },
    {
        "content": "<p>I feel like there's 1,000,000 subtleties</p>",
        "id": 135921736,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716397
    },
    {
        "content": "<p>the order of 1</p>",
        "id": 135921739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716400
    },
    {
        "content": "<p>how is order defined?</p>",
        "id": 135921811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716432
    },
    {
        "content": "<p>We don't have <code>order_of</code> on non finite groups</p>",
        "id": 135921818,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539716434
    },
    {
        "content": "<p>and the order of a group element is the smallest nonzero power of the element that is 1</p>",
        "id": 135921840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716453
    },
    {
        "content": "<p>or 0 if it doesn't exist</p>",
        "id": 135921850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716460
    },
    {
        "content": "<p>so that's a <code>def</code> not a <code>prop</code>?</p>",
        "id": 135921852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716463
    },
    {
        "content": "<p>ok I don't like this</p>",
        "id": 135921861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716469
    },
    {
        "content": "<p>metamath doesn't care about computability tho</p>",
        "id": 135921866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716471
    },
    {
        "content": "<p>do we have another approach?</p>",
        "id": 135921867,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716474
    },
    {
        "content": "<p>there is a computable definition yielding a <code>roption nat</code></p>",
        "id": 135921873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716485
    },
    {
        "content": "<p>and if we define <code>get_or_else</code> for <code>roption</code> then we can make it 0 otherwise</p>",
        "id": 135921939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716531
    },
    {
        "content": "<p>would it be usable?</p>",
        "id": 135921988,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716596
    },
    {
        "content": "<p>I am a fan of <code>roption</code> definitions; it would give you a relational interface</p>",
        "id": 135922050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716648
    },
    {
        "content": "<p><code>p \\in char R</code></p>",
        "id": 135922054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716656
    },
    {
        "content": "<p>The characteristic of a ring is the kernel of the canonical ring homomorphism from the integers to the ring.</p>",
        "id": 135922092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539716701
    },
    {
        "content": "<p>there is also the ideal option</p>",
        "id": 135922108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716714
    },
    {
        "content": "<blockquote>\n<p>The characteristic of a ring is the kernel of the canonical ring homomorphism from the integers to the ring.</p>\n</blockquote>\n<p>next</p>",
        "id": 135922114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716722
    },
    {
        "content": "<p>That's the best definition.</p>",
        "id": 135922123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539716730
    },
    {
        "content": "<p>that's just restating x^n = 0 though</p>",
        "id": 135922145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716749
    },
    {
        "content": "<p>maybe a better question is not what is the characteristic but what is it for</p>",
        "id": 135922199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716779
    },
    {
        "content": "<p>We have PID defined, right? Is it constructive exists?</p>",
        "id": 135922241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716825
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">is_principal_ideal</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n\n<span class=\"n\">class</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">integral_domain</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ideal</span> <span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"n\">is_principal_ideal</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135922259,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716847
    },
    {
        "content": "<p>yes</p>",
        "id": 135922262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716851
    },
    {
        "content": "<p>well no</p>",
        "id": 135922273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716870
    },
    {
        "content": "<p>That looks right to me. Is Mario asking about whether there's a function from ideals to generators though?</p>",
        "id": 135922280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539716874
    },
    {
        "content": "<p>yeah</p>",
        "id": 135922284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716882
    },
    {
        "content": "<p>A maths PID is what Kenny just quoted.</p>",
        "id": 135922332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539716894
    },
    {
        "content": "<p>I guess there is no constructive proof that Z is a PID then?</p>",
        "id": 135922341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716912
    },
    {
        "content": "<p>Of course the notion of PID was not invented by constructivists.</p>",
        "id": 135922345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539716924
    },
    {
        "content": "<p>nothing involving arbitrary sets can be constructive</p>",
        "id": 135922350,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539716926
    },
    {
        "content": "<p>History is written by the victors</p>",
        "id": 135922351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539716929
    },
    {
        "content": "<p>that's not exactly true kenny, it's possible that the ideal structure can be leveraged to give a generator</p>",
        "id": 135922383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539716977
    },
    {
        "content": "<blockquote>\n<p>I guess there is no constructive proof that Z is a PID then?</p>\n</blockquote>\n<p>The standard proof in textbooks (\"if the ideal is zero then done, if not then choose the smallest positive integer\") is constructive.</p>",
        "id": 135922388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539716982
    },
    {
        "content": "<p>well, constructive with LEM</p>",
        "id": 135922440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717004
    },
    {
        "content": "<p>you can't decide if the ideal is zero</p>",
        "id": 135922465,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717028
    },
    {
        "content": "<p>you can't determine if an arbitrary ideal is zero</p>",
        "id": 135922466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717030
    },
    {
        "content": "<p>In Z??</p>",
        "id": 135922471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539717036
    },
    {
        "content": "<p>that's exactly the problem with defining characteristic</p>",
        "id": 135922475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717043
    },
    {
        "content": "<p>give me an algorithm</p>",
        "id": 135922477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717045
    },
    {
        "content": "<p>the set of periods of an element is an ideal of Z</p>",
        "id": 135922490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717060
    },
    {
        "content": "<p>but you can't tell if it is zero</p>",
        "id": 135922500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717068
    },
    {
        "content": "<p>I'm not going to talk about this any more. It's silly.</p>",
        "id": 135922506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539717093
    },
    {
        "content": "<p>I think we have our answer Kenny</p>",
        "id": 135922511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717108
    },
    {
        "content": "<p>:-)</p>",
        "id": 135922516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539717113
    },
    {
        "content": "<p>totalize it</p>",
        "id": 135922518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717115
    },
    {
        "content": "<p>could you summarize the answer?</p>",
        "id": 135922565,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717127
    },
    {
        "content": "<p>Are you going to assume LEM?</p>",
        "id": 135922575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539717141
    },
    {
        "content": "<p>char Q = 0</p>",
        "id": 135922576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717141
    },
    {
        "content": "<p><code>noncomputable</code></p>",
        "id": 135922579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717149
    },
    {
        "content": "<p>live with it</p>",
        "id": 135922584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717153
    },
    {
        "content": "<p>no roption?</p>",
        "id": 135922598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717174
    },
    {
        "content": "<p>if you insist, you can define <code>char' A : roption nat</code></p>",
        "id": 135922599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717177
    },
    {
        "content": "<p>and define <code>char</code> in terms of it</p>",
        "id": 135922611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717188
    },
    {
        "content": "<p>but most of the theory will be about <code>char</code></p>",
        "id": 135922615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717195
    },
    {
        "content": "<p>it won't be a class then</p>",
        "id": 135922618,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717203
    },
    {
        "content": "<p><code>kenny_char : roption Prop</code> (because who knows?)</p>",
        "id": 135922620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539717205
    },
    {
        "content": "<p>also, <code>char</code> is a type</p>",
        "id": 135922637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717221
    },
    {
        "content": "<p>but every ring has a unique char</p>",
        "id": 135922640,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717223
    },
    {
        "content": "<p>characters</p>",
        "id": 135922649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717231
    },
    {
        "content": "<p>there is also the ideal definition, dunno how useful it is but that's constructive too</p>",
        "id": 135922699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717263
    },
    {
        "content": "<p>Let's write it in French then! <code>car</code></p>",
        "id": 135922704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539717266
    },
    {
        "content": "<p>I mean, it's useful to make \"char A = p\" into a class</p>",
        "id": 135922705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717266
    },
    {
        "content": "<p>I agree on that</p>",
        "id": 135922710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717276
    },
    {
        "content": "<p><code>char_p</code> is fine and unproblematic</p>",
        "id": 135922715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717288
    },
    {
        "content": "<p>oh ok</p>",
        "id": 135922719,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717294
    },
    {
        "content": "<blockquote>\n<p>but every ring has a unique char</p>\n</blockquote>\n<p>isn't this not true constructively? or am I really confused</p>",
        "id": 135922722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539717298
    },
    {
        "content": "<p>no, that's true</p>",
        "id": 135922744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717317
    },
    {
        "content": "<p>I'm talking about the reason to make it into a typeclass</p>",
        "id": 135922750,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717325
    },
    {
        "content": "<p>if a ring has two characteristics then they are equal</p>",
        "id": 135922760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717333
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_eq_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Do we all agree that this definition is deficit?</p>",
        "id": 135922763,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539717335
    },
    {
        "content": "<p>It's the \"has\" part I am worried about</p>",
        "id": 135922770,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539717342
    },
    {
        "content": "<p>I agree \"unique\" is okay.</p>",
        "id": 135922780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539717360
    },
    {
        "content": "<p>no you can't prove existence of a characteristic (number) in general without LEM</p>",
        "id": 135922831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717388
    },
    {
        "content": "<p>the ideal is fine of course</p>",
        "id": 135922835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539717401
    },
    {
        "content": "<p>right, okay</p>",
        "id": 135922838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539717418
    },
    {
        "content": "<blockquote>\n<p>I guess there is no constructive proof that Z is a PID then?</p>\n</blockquote>\n<p>I think you can even prove constructively that \"Z is a PID\" =&gt; LEM</p>",
        "id": 135923259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539717957
    },
    {
        "content": "<p>by taking a proposition P and defining the ideal I = {x | x = 0 \\/ P}</p>",
        "id": 135923313,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539717979
    },
    {
        "content": "<p>and then looking at whether its generator is zero or not</p>",
        "id": 135923331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539718000
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135923475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539718154
    },
    {
        "content": "<p>how about this</p>",
        "id": 135923477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539718156
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_antisymm</span>\n  <span class=\"o\">((</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135923619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539718310
    },
    {
        "content": "<blockquote>\n<p>I think your definition should be on semirings instead of zero/one/mul classes</p>\n</blockquote>\n<p>but <code>char_zero</code> is defined on <code>[add_monoid \\a] [has_one \\a]</code>?</p>",
        "id": 135923715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539718435
    },
    {
        "content": "<p>or that</p>",
        "id": 135924255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539719031
    },
    {
        "content": "<p>existe uma diferencia?</p>",
        "id": 135924367,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539719129
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_antisymm</span>\n  <span class=\"o\">((</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">((</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">of_char_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_dvd_iff</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_eq</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_dvd_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩⟩⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨λ</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_of_mod_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n      <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"err\">$</span> <span class=\"n\">not_of_not_imp</span> <span class=\"err\">$</span>\n          <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">not_imp_of_and_not</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)),</span>\n          <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">of_not_not</span> <span class=\"o\">(</span><span class=\"n\">not_not_of_not_imp</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)),</span>\n          <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span><span class=\"o\">)),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel&#39;</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">of_not_not</span> <span class=\"o\">(</span><span class=\"n\">not_not_of_not_imp</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)),</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩⟩</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">exists_unique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">exists</span> <span class=\"n\">α</span> <span class=\"k\">in</span>\n<span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">α</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 135925799,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720388
    },
    {
        "content": "<p>How does this look? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 135925803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 135925816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720406
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p>I see you went for the ideal idea after all ;-)</p>",
        "id": 135925950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539720513
    },
    {
        "content": "<p><code>char_p.eq</code> should definitely not have square brackets</p>",
        "id": 135925962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720536
    },
    {
        "content": "<p><code>is_char_p</code>?</p>",
        "id": 135925979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539720561
    },
    {
        "content": "<p>Maybe it should be a property of Z, then you can literally say <code>is_ideal (char_p A)</code></p>",
        "id": 135926065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720627
    },
    {
        "content": "<p>wait I'm confused</p>",
        "id": 135926427,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720979
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_antisymm</span>\n  <span class=\"o\">((</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">((</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 135926429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720981
    },
    {
        "content": "<p>how can the proof still work now that I turned <code>[]</code> to <code>()</code>?</p>",
        "id": 135926434,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720996
    },
    {
        "content": "<p>maybe kevin knows... I told him the solution to this puzzle a few weeks ago</p>",
        "id": 135926462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539721032
    },
    {
        "content": "<p>anyway how is this now?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_antisymm</span>\n  <span class=\"o\">((</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">((</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">of_char_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_dvd_iff</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_eq</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_dvd_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩⟩⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨λ</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_of_mod_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n      <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"err\">$</span> <span class=\"n\">not_of_not_imp</span> <span class=\"err\">$</span>\n          <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">not_imp_of_and_not</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)),</span>\n          <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">of_not_not</span> <span class=\"o\">(</span><span class=\"n\">not_not_of_not_imp</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)),</span>\n          <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span><span class=\"o\">)),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel&#39;</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">of_not_not</span> <span class=\"o\">(</span><span class=\"n\">not_not_of_not_imp</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)),</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩⟩</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">exists_unique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">exists</span> <span class=\"n\">α</span> <span class=\"k\">in</span>\n<span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">α</span> <span class=\"n\">H2</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 135926477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539721050
    },
    {
        "content": "<p><code>char_p.exists</code> should be defining a function... called <code>char</code></p>",
        "id": 135926549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539721093
    },
    {
        "content": "<p>we can functionize that</p>",
        "id": 135926554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539721108
    },
    {
        "content": "<p>He told Johannes too.</p>",
        "id": 135926587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539721151
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>invalid definition, a declaration named &#39;char&#39; has already been declared\n</pre></div>",
        "id": 135926599,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539721164
    },
    {
        "content": "<p>hard luck</p>",
        "id": 135926600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539721165
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">ring_char</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">exists_unique</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ring_char</span><span class=\"bp\">.</span><span class=\"n\">spec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">ring_char</span> <span class=\"n\">α</span> <span class=\"err\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">exists_unique</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">;</span>\n<span class=\"n\">unfold</span> <span class=\"n\">ring_char</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ring_char</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">ring_char</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">exists_unique</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span> <span class=\"n\">C</span>\n</pre></div>",
        "id": 135926906,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539721468
    },
    {
        "content": "<p>how is this?</p>",
        "id": 135926909,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539721470
    },
    {
        "content": "<blockquote>\n<p>how can the proof still work now that I turned <code>[]</code> to <code>()</code>?</p>\n</blockquote>\n<p>Type class inference just grabs anything it can find to the left of the colon. The round and square brackets are just for the signature of the theorem, they don't affect how type class inference works in the proof. This is not so well-known because it's not common to put a typeclass left of the colon and not in a square bracket.</p>",
        "id": 135927432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539722046
    },
    {
        "content": "<p>I discovered it a few weeks ago when I was trying to understand Patrick's type class hell with his completions and had exactly the same reaction.</p>",
        "id": 135927447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539722085
    },
    {
        "content": "<p>I've had to construct that argument from memory because my search for the conversation failed. Hopefully it's some sort of approximation to the truth.</p>",
        "id": 135927490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539722138
    },
    {
        "content": "<p>I guess it's <a href=\"#narrow/stream/116395-maths/subject/Separation.20stuff/near/134261338\" title=\"#narrow/stream/116395-maths/subject/Separation.20stuff/near/134261338\">this conversation?</a> I found it by searching for \"left of colon\".</p>",
        "id": 135927856,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539722455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could you help me with some typeclass problems? It's in L324 here: <a href=\"https://github.com/kckennylau/Lean/blob/master/perfect_closure.lean#L324\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/perfect_closure.lean#L324\">https://github.com/kckennylau/Lean/blob/master/perfect_closure.lean#L324</a></p>",
        "id": 135927950,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539722541
    },
    {
        "content": "<p>Lean can't figure out the coercion in <code>(↑x : perfect_closure α p)</code></p>",
        "id": 135927966,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539722566
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/subject/Separation.20stuff/near/134261591\" title=\"#narrow/stream/116395-maths/subject/Separation.20stuff/near/134261591\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/Separation.20stuff/near/134261591</a></p>",
        "id": 135928018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539722628
    },
    {
        "content": "<p>You owe Mario a light bulb</p>",
        "id": 135928021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539722635
    },
    {
        "content": "<p>done</p>",
        "id": 135928069,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539722652
    },
    {
        "content": "<p>(thanks Bryan)</p>",
        "id": 135928099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539722675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> never mind it's stupid</p>",
        "id": 135928788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539723211
    }
]