[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">option</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Maybe I can't use simp andI have to reassociate things and apply mul_left_inv a bunch of times?</p>",
        "id": 266067739,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640453046
    },
    {
        "content": "<p><code>by simp [mul_assoc]</code> solves this goal.</p>",
        "id": 266067896,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640453309
    },
    {
        "content": "<p>Nice.</p>",
        "id": 266067987,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640453439
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a></p>",
        "id": 266068085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640453578
    },
    {
        "content": "<p>Learning to effectively use the simplifier is one of the most important things you can do when starting off with lean</p>",
        "id": 266068102,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640453627
    },
    {
        "content": "<p>You can also use <code>assoc_rw</code> here.</p>",
        "id": 266068518,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640454336
    },
    {
        "content": "<p>Say I have <code>x * y</code> and I want to insert a 1 in between and expand the 1 into <code>(g⁻¹ * h) * (h⁻¹ * g)</code>. This is like the opposite of <code>simp</code>.</p>",
        "id": 266072191,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640460513
    },
    {
        "content": "<p>Is this easy to do, or do I have to carefully apply rw?</p>",
        "id": 266072213,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640460595
    },
    {
        "content": "<p>Do you know about the <code>rw (show ..., by ...)</code> trick? If not, I can explain a bit later (Christmas is busy around here...)</p>",
        "id": 266072563,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640461134
    },
    {
        "content": "<p>I don't think I've seen that. Is it discussed in \"Theorem proving in Lean\"?</p>",
        "id": 266072695,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640461327
    },
    {
        "content": "<p>Hmm.. don't see it there.</p>",
        "id": 266072710,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640461370
    },
    {
        "content": "<p>It's a type-ascription. <code>rw (proof_term : type)</code> will do the same.</p>",
        "id": 266072724,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640461416
    },
    {
        "content": "<p>It might be easier to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 266072785,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1640461520
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#group\">tactic#group</a> btw, under the hood it does something very similar to <code>simp [mul_assoc]</code> but is a nice idiomatic way to solve such goals.</p>",
        "id": 266073151,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640462064
    },
    {
        "content": "<p>You can also use calc mode.</p>",
        "id": 266073170,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640462114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span> what I had in mind is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">group</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But all the other choices that were mentioned above would work as well.</p>",
        "id": 266073642,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640462809
    },
    {
        "content": "<p>I have been using calc mode actually for all this stuff.</p>",
        "id": 266074009,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640463456
    },
    {
        "content": "<p>Anyways, thanks a lot for the pointers.</p>",
        "id": 266074058,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640463493
    }
]