[
    {
        "content": "<p>Why doesn't this work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">alg_equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"bp\">@</span><span class=\"n\">alg_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--invalid &#39;structure&#39;, expression must be a &#39;parent&#39; structure</span>\n</pre></div>",
        "id": 172417059,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564858252
    },
    {
        "content": "<p>That's a bit annoying isn't it! My impression is that Lean chokes on the @ symbol and doesn't go any further. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hello_mum</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"c1\">-- same error</span>\n<span class=\"o\">(</span><span class=\"n\">hello_world</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 172417287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564858701
    },
    {
        "content": "<p>You could of course just work around it by putting the fields in and making the projection yourself. Are there any serious disadvantages to this other than it being a bore?</p>",
        "id": 172417297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564858755
    },
    {
        "content": "<p>I think the best solution is to make that field of <code>alg_hom</code> explicit. Then using the notation should work</p>",
        "id": 172417343,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564858805
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1296\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1296\">#1296</a></p>",
        "id": 172417872,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564859798
    },
    {
        "content": "<p>6^4</p>",
        "id": 172423036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564869919
    }
]