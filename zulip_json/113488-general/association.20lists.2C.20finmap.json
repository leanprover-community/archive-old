[
    {
        "content": "<p>As some people know, I've been working on association lists and finite maps for mathlib (<a href=\"https://github.com/spl/lean-finmap\" target=\"_blank\" title=\"https://github.com/spl/lean-finmap\">https://github.com/spl/lean-finmap</a>). Mario has decided he wants to get it into mathlib soon, so he has started rewriting it in his own fashion (<a href=\"https://github.com/leanprover-community/mathlib/tree/finmap\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/finmap\">https://github.com/leanprover-community/mathlib/tree/finmap</a>). I wanted to open up the discussion to get feedback from anyone else who might be interested.</p>",
        "id": 134290992,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537426643
    },
    {
        "content": "<p>One question is whether there is  the need for a <code>structure</code> to wrap a list without duplicate keys. Mario thinks it might be useful:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">alist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">nd</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">knodup</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/e5ddd1d4dca984f6d7a77a87a1608b414296208f/data/list/alist.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/e5ddd1d4dca984f6d7a77a87a1608b414296208f/data/list/alist.lean\">https://github.com/leanprover-community/mathlib/blob/e5ddd1d4dca984f6d7a77a87a1608b414296208f/data/list/alist.lean</a></p>\n<p>I went down this path and found that, given that (a) there are so many useful definitions and theorems regarding lists and (b) the <code>structure</code> is such a thin wrapper, every definition or proof for the <code>structure</code> is simple, it created a large number of really simple statements. Considering that <code>alist</code> is really a list with a property and I believe it is useful to use other list definitions that don't involve this property, I think the <code>alist</code> structure either (a) makes it more difficult to work with the wrapped list or (b) creates the problem of scaling the number of statements about <code>alist</code> to match those already about <code>list</code>.</p>",
        "id": 134291300,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537427153
    },
    {
        "content": "<p>In another way of putting it, you could look at an <code>alist</code> as something unique on its own or you could look at a list  with a property that it has no duplicate keys. In the process of developing my library, I found the latter view much more useful.</p>",
        "id": 134291437,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537427358
    },
    {
        "content": "<p>Why is latter more useful?</p>",
        "id": 134291494,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537427422
    },
    {
        "content": "<p>On a related note, that's also how I ended up with the <code>finmap</code> <code>structure</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">finmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">nodupkeys</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">nodupkeys</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/spl/lean-finmap/blob/035f1faa218e47b9f411c4a243900955f4714a56/src/data/finmap.lean#L8-L10\" target=\"_blank\" title=\"https://github.com/spl/lean-finmap/blob/035f1faa218e47b9f411c4a243900955f4714a56/src/data/finmap.lean#L8-L10\">https://github.com/spl/lean-finmap/blob/035f1faa218e47b9f411c4a243900955f4714a56/src/data/finmap.lean#L8-L10</a></p>\n<p>You could say that this is a similar situation: a <code>finmap</code> is just a <code>multiset</code> with no duplicate keys. However, I found that it's more useful to look at it as a <code>finmap</code> because I didn't find a lot of the other <code>multiset</code> definitions to be very useful for a <code>finmap</code>.</p>",
        "id": 134291573,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537427552
    },
    {
        "content": "<blockquote>\n<p>Why is latter more useful?</p>\n</blockquote>\n<p>The most important reason for me is that I care about the structure of the internal list: <code>nil</code>, <code>cons</code>, <code>append</code>, etc.</p>",
        "id": 134291591,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537427589
    },
    {
        "content": "<p>Also, regarding <code>finmap</code>, I don't care about the structure of the internal <code>multiset</code>.</p>",
        "id": 134291598,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537427618
    },
    {
        "content": "<p>... which makes sense, since a <code>multiset</code> is a <code>quotient</code>.</p>",
        "id": 134291662,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537427705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Thanks for that question, BTW. It gets to a key reason I don't think <code>alist</code> is useful, a reason that hadn't yet come to mind.</p>",
        "id": 134291736,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537427820
    },
    {
        "content": "<p>That is, I found that it was useful to wrap a <code>quotient</code> like <code>multiset</code> in a <code>structure</code> but not that useful to wrap a <code>list</code> in a <code>structure</code> because the structure of the list is important when working with the <code>structure</code>. I ended up creating definitions to wrap <code>nil</code>, <code>cons</code>, <code>append</code>, etc., and all of that already existed for the <code>list</code>, so I came to ask why it was necessary. I couldn't come up with a good answer.</p>",
        "id": 134291871,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537428050
    },
    {
        "content": "<blockquote>\n<p>You could say that this is a similar situation: a finmap is just a multiset with no duplicate keys. However, I found that it's more useful to look at it as a finmap because I didn't find a lot of the other multiset definitions to be very useful for a finmap.</p>\n</blockquote>\n<p>I don't get this nuance</p>",
        "id": 134292027,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537428308
    },
    {
        "content": "<blockquote>\n<p>I don't get this nuance</p>\n</blockquote>\n<p>I think it's similar to how you don't see a lot of the <code>multiset</code> definitions used for <code>finset</code>. There's a particular subset (mostly starting with <code>nd</code>) that are used in <code>finset</code>, but many of them are not.</p>",
        "id": 134292185,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537428601
    },
    {
        "content": "<p><code>multiset</code> seems to be useful as a substrate for <code>finset</code> and <code>finmap</code>, but it also has a larger API that is oriented towards counting duplicates.</p>",
        "id": 134292261,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537428702
    },
    {
        "content": "<p>Also, the subset of the <code>multiset</code> API used for <code>finset</code> is not useful for <code>finmap</code>.</p>",
        "id": 134292305,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537428744
    },
    {
        "content": "<p>I think the comparison is apt, and applicable to <code>alist</code>. A finset is just a multiset with a property, but the API is different (some basic operations are not applicable, like <code>cons</code>, and others are slightly weird and become more useful on the subtype, like <code>ndinsert</code>).</p>",
        "id": 134308497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537449403
    },
    {
        "content": "<p>In the case of <code>alist</code>, there are some operations that don't work anymore, like <code>cons</code>, and others are slightly weird and have been prefixed with <code>k</code> for lists. <code>cons</code> is just not a valid <code>alist</code> operation, <code>insert</code> is.</p>",
        "id": 134308618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537449503
    },
    {
        "content": "<blockquote>\n<p>I think the comparison is apt, and applicable to <code>alist</code>.</p>\n</blockquote>\n<p>So does this mean you agree with me, since my comparison is apt, which is to say that <code>alist</code> is not a useful structure?</p>",
        "id": 134308803,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537449692
    },
    {
        "content": "<blockquote>\n<p>In the case of <code>alist</code>, there are some operations that don't work anymore, like <code>cons</code>, and others are slightly weird and have been prefixed with <code>k</code> for lists. <code>cons</code> is just not a valid <code>alist</code> operation, <code>insert</code> is.</p>\n</blockquote>\n<p>This hints of disagreement. My point is that lists are constructed with <code>nil</code> and <code>cons</code>, and it is useful to have that construction, and therefore more useful to have a bare list with no duplicate keys than to have a structure hide that construction.</p>",
        "id": 134308937,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537449800
    },
    {
        "content": "<p>In short: I think <code>finset</code> is useful, and I think <code>alist</code> is useful</p>",
        "id": 134309076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537449931
    },
    {
        "content": "<p>I don't see why <code>alist</code> should provide a nil/cons construction. It's not natural. If you want to do such a construction then you should unpack the <code>alist</code> first</p>",
        "id": 134309171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537449995
    },
    {
        "content": "<p>That's kind of my point. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 134309182,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537450009
    },
    {
        "content": "<p>Instead it has <code>empty</code>/<code>insert</code></p>",
        "id": 134309185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450017
    },
    {
        "content": "<p>My point is, why are you doing list things on <code>alist</code>s?</p>",
        "id": 134309213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450059
    },
    {
        "content": "<p>My point is that I want to construct lists with no duplicate keys as well as use any other existing definitions and theorems on lists.</p>",
        "id": 134309308,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537450137
    },
    {
        "content": "<p>then do so, on <code>list</code>. You don't need <code>alist</code> for that</p>",
        "id": 134309416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450231
    },
    {
        "content": "<p>Quite right, which is why I don't think <code>alist</code> is necessary.</p>",
        "id": 134309434,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537450257
    },
    {
        "content": "<p><code>alist</code> provides a compositional structure for safety-preserving functions on lists</p>",
        "id": 134309458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450292
    },
    {
        "content": "<blockquote>\n<p>as well as use any other existing definitions and theorems on lists.</p>\n</blockquote>\n<p>Most list operations don't preserve the invariant. What do you do with these?</p>",
        "id": 134309526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450337
    },
    {
        "content": "<p>Well, if you want it, add it. I'm only trying to save you work.</p>",
        "id": 134309548,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537450382
    },
    {
        "content": "<p>This is an honest question. What is missing from the API of <code>alist</code> that you would want, that requires resorting to <code>list</code>?</p>",
        "id": 134309589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450432
    },
    {
        "content": "<p>Except for <code>union</code>, there's nothing I've missed that comes to mind</p>",
        "id": 134309684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450528
    },
    {
        "content": "<p>I'm not sure about <code>alist</code>, but I defined the minimum necessary to use <code>list</code>s with no duplicate keys. For example, <code>has_mem</code> and <code>append</code> don't need to be redefined. You only need some extra properties to use <code>append</code>, for example.</p>",
        "id": 134309698,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537450561
    },
    {
        "content": "<p>To answer your question from earlier, <code>alist</code> should also be available as a tool for programmers. \"I need a map, I only have equality\" -&gt; use <code>alist</code> or <code>finmap</code></p>",
        "id": 134309747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450597
    },
    {
        "content": "<p>Note that the <code>has_mem</code> on <code>alist</code> is different from the one on lists</p>",
        "id": 134309771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450645
    },
    {
        "content": "<p>and <code>append</code> doesn't apply</p>",
        "id": 134309775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450652
    },
    {
        "content": "<p>Which I don't think it should be.</p>",
        "id": 134309778,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537450658
    },
    {
        "content": "<p>As you'll see in my library.</p>",
        "id": 134309781,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537450666
    },
    {
        "content": "<p>I think in common programming parlance, <code>x \\in m</code> where m is a dictionary / map / associative array, means <code>x</code> is a key contained in the map <code>m</code>, not <code>x</code> is a key-value pair in the map</p>",
        "id": 134309850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450758
    },
    {
        "content": "<p>The idiom for the other interpretation is <code>&lt;x, y&gt; \\in m.val</code>, where <code>val</code> is the operation sometimes called <code>entries</code> in other libraries</p>",
        "id": 134309915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450806
    },
    {
        "content": "<p>(indeed, maybe it should be renamed to that)</p>",
        "id": 134309930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450825
    },
    {
        "content": "<p>Note also that if it meant membership in the underlying list, then it wouldn't be decidable unless you assume decidability of the values, which is not needed for anything else</p>",
        "id": 134310185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451123
    },
    {
        "content": "<p>Fair enough. With <code>a : alist</code>, you can use <code>a.val</code>/<code>a.entries</code>.</p>",
        "id": 134310257,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451189
    },
    {
        "content": "<p>right, I think this helps to view them as different things (a finite map vs a list of pairs)</p>",
        "id": 134310292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451238
    },
    {
        "content": "<p>You pointed out that it is possible to define operations like <code>append</code> if you assume side conditions (i.e. the key sets are disjoint). Does this come up often?</p>",
        "id": 134310375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451323
    },
    {
        "content": "<p>I don't know about “often,” but it has come up.</p>",
        "id": 134310406,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451371
    },
    {
        "content": "<p>I'm now using <code>finmap</code> instead of association lists directly, and you have the same thing with union there.</p>",
        "id": 134310494,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451461
    },
    {
        "content": "<p>I'm assuming you'll use <code>has_union</code> for <code>alist</code> instead of <code>has_append</code>?</p>",
        "id": 134310514,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451488
    },
    {
        "content": "<p>yes</p>",
        "id": 134310519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451502
    },
    {
        "content": "<p>since it's union, not append :P</p>",
        "id": 134310530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451521
    },
    {
        "content": "<p>it's not even possible to give an <code>append</code> instance that uses <code>list.append</code></p>",
        "id": 134310581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451543
    },
    {
        "content": "<p>Well, it's debatable that it's not a form of append.</p>",
        "id": 134310582,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451546
    },
    {
        "content": "<p>I prefer set terminology when duplicates are being dropped</p>",
        "id": 134310612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451573
    },
    {
        "content": "<p>It's still appending. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 134310633,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451593
    },
    {
        "content": "<p>When it comes to the <code>finmap</code>, you can forget that there is any appending. But with <code>alist</code>, you can't.</p>",
        "id": 134310663,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451632
    },
    {
        "content": "<p>Not sure what you mean. The underlying operation is not an append</p>",
        "id": 134310727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451679
    },
    {
        "content": "<p>It is true that <code>union</code> would be order-respecting on <code>alist</code></p>",
        "id": 134310750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451711
    },
    {
        "content": "<p>but then again, so is <code>union</code> on <code>list</code></p>",
        "id": 134310760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451721
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">kunion</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>         <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"bp\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"bp\">::</span> <span class=\"n\">kunion</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">kerase</span> <span class=\"n\">hd</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134310795,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451763
    },
    {
        "content": "<p>Are you doing it differently?</p>",
        "id": 134310838,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451775
    },
    {
        "content": "<p>I think the <code>erase</code> makes that a rather different kind of operation. But also I think we need two functions here - that is <code>unionl</code></p>",
        "id": 134310876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451827
    },
    {
        "content": "<p><code>unionr</code> would be</p>\n<div class=\"codehilite\"><pre><span></span>def kunionr : list (sigma β) → list (sigma β) → list (sigma β)\n| []         l := l\n| (hd :: tl) l := kinsert hd.1 hd.2 (kunionr tl l)\n</pre></div>",
        "id": 134310955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451887
    },
    {
        "content": "<p>I'm not even sure if it should get a <code>has_union</code> notation</p>",
        "id": 134310975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537451921
    },
    {
        "content": "<p>I'm not sure if you need it. I don't foresee people asking for it.</p>",
        "id": 134311002,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537451964
    },
    {
        "content": "<p>You need left and right preference. For <code>finmap</code> you can ignore it since the order of parameters gives the preference, but on <code>alist</code> you have order and preference separately</p>",
        "id": 134311082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452017
    },
    {
        "content": "<p>Why do you need it? Just because it's possible doesn't make it a need.</p>",
        "id": 134311233,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537452166
    },
    {
        "content": "<p>I'm okay with just assuming right preference (which is what <code>list.union</code> does), but you want left preference?</p>",
        "id": 134311266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452208
    },
    {
        "content": "<p>I stuck with the Haskell <code>Data.Map</code> approach because it seemed to the most intuitive to me.</p>",
        "id": 134311344,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537452247
    },
    {
        "content": "<p>Keep in mind that haskell has laziness to contend with, making your definition more natural for them</p>",
        "id": 134311402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452318
    },
    {
        "content": "<p>Yep.</p>",
        "id": 134311408,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537452326
    },
    {
        "content": "<p><code>∪</code> is <code>infixl</code>, so could that also indicate left-biased is preferred?</p>",
        "id": 134311479,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537452373
    },
    {
        "content": "<p>It seems like the difference between <code>foldl</code> and <code>foldr</code></p>",
        "id": 134311485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452382
    },
    {
        "content": "<p>and we have both of those</p>",
        "id": 134311497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452400
    },
    {
        "content": "<p>I'd rather not commit to one camp here</p>",
        "id": 134311510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452422
    },
    {
        "content": "<p>particularly since there are also performance characteristics to worry about, and the lean 4 compiler may change this as well</p>",
        "id": 134311595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452492
    },
    {
        "content": "<p>You have to commit to one for <code>∪</code> at the very least.</p>",
        "id": 134311611,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537452517
    },
    {
        "content": "<p>I guess if you're going with the <code>list.union</code> precedent, you would go with the right-biased option.</p>",
        "id": 134311653,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537452573
    },
    {
        "content": "<p>I think <code>alist</code> shouldn't have a notation, <code>finmap</code> can use left preference by default since the API properties take precedence there</p>",
        "id": 134311734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452630
    },
    {
        "content": "<p>I should look at other languages like java or python and see what preference is preferred</p>",
        "id": 134311763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452677
    },
    {
        "content": "<p>I would consider Haskell, ML, OCaml, Coq, Agda, Idris, etc. before looking at Java or Python.</p>",
        "id": 134311849,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537452746
    },
    {
        "content": "<p>hm, python has a mutation operation which makes the precedence obvious</p>",
        "id": 134311856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452752
    },
    {
        "content": "<p>Same with java. OCaml takes a merge function that resolves differences</p>",
        "id": 134311991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537452889
    },
    {
        "content": "<p>Haskell has both union (left bias) and unionWith that takes a merge function</p>",
        "id": 134312238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537453106
    },
    {
        "content": "<p>I couldn't find anything for Coq. Idris uses merge left bias and mergeWith</p>",
        "id": 134312504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537453331
    },
    {
        "content": "<p>ML is roll your own dict</p>",
        "id": 134312515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537453349
    },
    {
        "content": "<p>I'm coming to realize that what would be better for me than a <code>finmap</code> union that updates by <code>insert</code> or <code>erase</code> is something like an internal disjoint union. At least that's what I've gathered it would be called. [<a href=\"https://math.stackexchange.com/a/1631405\" target=\"_blank\" title=\"https://math.stackexchange.com/a/1631405\">1</a>, <a href=\"https://ncatlab.org/nlab/show/disjoint+union#internal_version\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/disjoint+union#internal_version\">2</a>] For <code>finmap</code>, perhaps the simplest definition would be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">djunion</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">finmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">disjoint</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">keys</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">keys</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"err\">∪</span> <span class=\"n\">g</span> <span class=\"k\">else</span> <span class=\"err\">∅</span>\n</pre></div>\n\n\n<p>But a more efficient version would probably use <code>list.append</code> instead of <code>list.kunion</code> as <code>∪</code> does.</p>\n<p>I'm only dealing with unions of disjoint <code>finmap</code>s, and it would simplify some things if I didn't have to track all of the <code>disjoint f.keys g.keys</code>.</p>",
        "id": 134367053,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537522504
    },
    {
        "content": "<p>Likewise, a disjoint insert would be good. Conceptually:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">djinsert</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"err\">∉</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">keys</span> <span class=\"k\">then</span> <span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"k\">else</span> <span class=\"err\">∅</span>\n</pre></div>\n\n\n<p>But <code>cons</code> would be better than <code>kinsert</code>.</p>",
        "id": 134368101,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537523853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What is your plan with <a href=\"https://github.com/leanprover-community/mathlib/tree/finmap\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/finmap\">https://github.com/leanprover-community/mathlib/tree/finmap</a> ? I'd like to see something get into mathlib. However, given the somewhat large difference between your rewrite and <a href=\"https://github.com/spl/lean-finmap\" target=\"_blank\" title=\"https://github.com/spl/lean-finmap\">my library</a>, I'm a bit reluctant at this point to invest the time to port more definitions and theorems over to that branch without knowing what's going to happen to it. Do you plan to continue working on that branch?</p>",
        "id": 135406194,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539008209
    },
    {
        "content": "<p>would you like me to merge it?</p>",
        "id": 135406729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539008728
    },
    {
        "content": "<blockquote>\n<p>would you like me to merge it?</p>\n</blockquote>\n<p>“It” being the <code>leanprover-community/mathlib</code> branch? Sure, if you're happy with it in its current state. I would feel more comfortable extending it at that point.</p>",
        "id": 135406861,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539008843
    },
    {
        "content": "<p>I noticed you renamed some things. Not a fan of <code>knodup</code>?</p>",
        "id": 135406969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539008929
    },
    {
        "content": "<blockquote>\n<p>I noticed you renamed some things. Not a fan of <code>knodup</code>?</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span> No. I think <code>nodupkeys</code> is better.</p>",
        "id": 135407006,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539008966
    },
    {
        "content": "<p>when I look at it I think \"nine letters is long for a name segment\"</p>",
        "id": 135407143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539009065
    },
    {
        "content": "<p>You could have <code>nodup_keys</code> but then it confuses with <code>nodup</code> of <code>keys</code></p>",
        "id": 135407208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539009092
    },
    {
        "content": "<p>what about <code>nodup_fst</code>?</p>",
        "id": 135407221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539009110
    },
    {
        "content": "<blockquote>\n<p>You could have <code>nodup_keys</code> but then it confuses with <code>nodup</code> of <code>keys</code></p>\n</blockquote>\n<p>Exactly.</p>",
        "id": 135407228,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539009114
    },
    {
        "content": "<blockquote>\n<p>what about <code>nodup_fst</code>?</p>\n</blockquote>\n<p>How is that better than <code>nodupkeys</code> since <code>nodup</code> and <code>keys</code> already exist?</p>",
        "id": 135407279,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539009140
    },
    {
        "content": "<p>... exist in the association list/finmap API that is.</p>",
        "id": 135407304,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539009164
    },
    {
        "content": "<p>I mean for the list version, before the \"map\" interpretation</p>",
        "id": 135407323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539009185
    },
    {
        "content": "<p>I'd prefer <code>nodupkeys</code> for both for consistency's sake. I think the name is clear in that it links <code>nodup</code> and <code>keys</code> and as short as it's needed to be.</p>",
        "id": 135407650,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539009472
    },
    {
        "content": "<p>Anyway, I have to go now. If you want to discuss any other issues, I'll pick it up tomorrow.</p>",
        "id": 135407709,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539009515
    }
]