[
    {
        "content": "<p>Hi,<br>\nIs there any way to store a <code>name_map name</code> other than <code>user_attr</code>?<br>\nFor my rewrite of <code>to_additive</code>, I want to store a <code>name_map name</code> of prefixes used to automatically map names from multiplicative to additive. Sometimes (e.g., for <code>quotient_group</code>), the key is not a <code>def</code> but a namespace. I see two ways of dealing with this:</p>\n<p>1. Define a dummy <code>@[to_additive quotient_add_group] def quotient_group : bool := tt</code>.<br>\n2. Store all <code>(src, tgt)</code> pairs as a <code>list (name × name)</code> attribute on a single <code>def</code>.<br>\n3. Explicitly specify <code>@[to_additive quotient_add_group.lemma_name] def lemma_name := sorry</code> every time.<br>\n4. Something else?<br>\nThe second approach fails with “error: deep recursion was detected at 'live variable analysis'” once we have sufficiently many items in the list. Any suggestions?</p>",
        "id": 173479967,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566121842
    },
    {
        "content": "<p>I can't think of any way which isn't a horrible hack</p>",
        "id": 173480187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566122285
    },
    {
        "content": "<p>You could do something similar to the <code>replacer</code> tactic. You store the data, reflected as an expr, as the content of a definition, and smuggle the data around via tactics triggered by an attribute</p>",
        "id": 173480203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566122357
    },
    {
        "content": "<p>Or maybe just use IO to open up a program with actual memory access</p>",
        "id": 173480262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566122439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think, I'll define a dummy <code>def quotient_group</code>. This is a hack but other options require too much work to deal with one or two exceptions.</p>",
        "id": 173480817,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566123307
    },
    {
        "content": "<p>A variation on (1) is to call the dummy <code>quotient_group._namespace</code> to avoid using the real name</p>",
        "id": 173480830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566123339
    },
    {
        "content": "<p>assuming of course you know you are looking for a namespace, not a def, and so know to adjust the lookup</p>",
        "id": 173480885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566123389
    },
    {
        "content": "<p>I use <code>attr.get_cache : tactic (name_map name)</code> as a set of prefix mappings, and <code>quotient_group._namespace</code> is not a prefix of <code>quotient_group.my_lemma</code>.</p>",
        "id": 173481164,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566123914
    },
    {
        "content": "<p>I mean that given <code>quotient_group._namespace</code>, you should first strip off the <code>_namespace</code> suffix and then do a prefix match with the target name</p>",
        "id": 173484726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566130609
    },
    {
        "content": "<p>What are you using the prefix map for?</p>",
        "id": 173488924,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566138114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  See <a href=\"https://github.com/leanprover-community/mathlib/issues/1345\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1345\">#1345</a>. I use it to avoid <code>attribute [to_additive add_group.cases_on] group.cases_on</code> and friends.</p>",
        "id": 173491444,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566142689
    },
    {
        "content": "<p>I assume that if I want to map <code>my.long.name</code> to additive, and I have <code>attribute [to_additive add_my] my</code>, then most probably <code>add_my.long.name</code> will work.</p>",
        "id": 173491458,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566142777
    },
    {
        "content": "<p>This heuristic works in most cases.</p>",
        "id": 173491519,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566142806
    },
    {
        "content": "<p>I have a PR where I started something similar. It was mostly for the auxiliary equations. You might what to take a look. There were a couple of details I couldn't work out though and I haven't pushed it across the finish line</p>",
        "id": 173491850,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566143481
    },
    {
        "content": "<p>Could you please send me a link?</p>",
        "id": 173492030,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566143843
    },
    {
        "content": "<p>Of course! Sorry I forgot! <a href=\"https://github.com/leanprover-community/mathlib/issues/431\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/431\">#431</a></p>",
        "id": 173492824,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566145256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Thanks! It turns out that I missed the presense of <code>get_eqn_lemmas_for</code>!</p>",
        "id": 173493338,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566146194
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 173493395,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566146304
    },
    {
        "content": "<p>Do you know what is better: transport eqn lemmas, or ask <code>smt_tactic.interactive.add_eqn_lemmas</code> to generate them? Is there any difference?</p>",
        "id": 173493542,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566146581
    },
    {
        "content": "<p>If <code>add_eqn_lemmas</code> is better, then how do I convert <code>smt_tactic α</code> to <code>tactic α</code>?</p>",
        "id": 173493556,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566146638
    },
    {
        "content": "<p>I don't think <code>add_eqn_lemmas</code> has an effect outside the scope of the current tactic</p>",
        "id": 173493940,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566147320
    },
    {
        "content": "<p>Thank you</p>",
        "id": 173493943,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1566147334
    },
    {
        "content": "<p>This is the annoying thing though. With Lean 3.4.2, you can't mimic eqn lemmas too well. I added a feature to 3.5 but mathlib has not migrated to 3.5 yet</p>",
        "id": 173493990,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566147384
    },
    {
        "content": "<p>In short: transport the equations but they are not going to be as nice to use as those for the multiplicative structures</p>",
        "id": 173494377,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566148061
    }
]