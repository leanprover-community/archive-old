[
    {
        "content": "<p>Dear all (and in particular meta-programming experts <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> , <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> , <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> , <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, and whoever I might have forgotten ), I am still writing the so called parametricity tactic, and I am facing the following problem.</p>\n<p>Since parametricity translations  generate new relations, I end up generating new universes. The best way I found to do so is to create lots of meta universes. When I am facing a definition, I simply unify the inferred type of the translation of the body with the translation of the type, and then I turn all remaining meta-universes into parameter universe, and I am done.</p>\n<p>When doing the same for inductive types, what I would like to do is<br>\n1. I compute the translated type for the inductive, and replace every remaining meta universes by parameter universes<br>\n2. in each constructor type replace the translated <code>const</code> of my new inductive name (which does not belong to the current environment yet) by a <code>local_const</code> representing the translated inductive type.<br>\n3. I launch typechecking in order to unify redundant meta-universes<br>\n4. I fix the return sort of the inductive type by computing max + 1 of the sort of the type of every constructor.<br>\nUnfortunately I am stuck at step 3... I tried many things: <code>type_check</code>, <code>infer_type</code> followed by <code>unify</code>, <code>to_expr (pexpr.of_expr e)</code>, first making a lambda out of my ad-hock inductive <code>local_const</code>, every time followed by <code>instatiate_mvars</code>... And so far I am still stuck...</p>\n<p>Would you know of a primitive, already-written meta function, technique or methodology that would ease my pain?<br>\nBest wishes!</p>",
        "id": 173535931,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566213889
    },
    {
        "content": "<p>I think I just managed, but at the price of exploring the return type of every constructor by hand, picking the list of arguments to the inductive type and performing individual type-checking with the list of abstract parameters, doing all the substitutions by hand... which seems to me redundant with what lean elaborate is capable of...</p>",
        "id": 173536715,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566214635
    },
    {
        "content": "<p>and my manual check is so slow that I timeout on the translation of <code>list</code>...</p>",
        "id": 173537461,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566215490
    },
    {
        "content": "<p>Is it possible to have a look at your code? That would make things a bit easier to follow</p>",
        "id": 173537638,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566215705
    },
    {
        "content": "<blockquote>\n<p>Is it possible to have a look at your code? That would make things a bit easier to follow</p>\n</blockquote>\n<p>It's a moving target right now... I will show you as soon as it is a bit stable (I think tomorrow morning CEST)</p>",
        "id": 173538694,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566216768
    },
    {
        "content": "<p>Until then, for me, the way I handle the universes is by creating the universe parameters by hand. I calculate ahead of time how many universes a construction is going to take and I make the parameters. I try to avoid type checking in the middle of program because it's slow but also, <code>type_check</code> seems like a more superficial type check and doesn't catch every problem.</p>",
        "id": 173538957,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566217033
    },
    {
        "content": "<p><code>mk_mapp</code> and <code>mk_app</code> might be good tools to put in your toolbox though. When you have a definition that you're trying to apply to arguments, it will do the type checking and unification for you</p>",
        "id": 173539046,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566217105
    },
    {
        "content": "<p>Yeah, it's tough to make a suggestion without seeing the code. My intuition is that <code>unify</code> followed by <code>instantiate_mvars</code> should work. It's normally willing to match universe mvars. If I'm understanding your description right, this is kind of similar to what you're trying to do, right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span>\n<span class=\"n\">do</span> <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n   <span class=\"n\">m</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">tt</span> <span class=\"bp\">`</span><span class=\"n\">list</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">],</span>\n   <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">tt</span> <span class=\"bp\">`</span><span class=\"n\">list</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">],</span>\n   <span class=\"n\">trace</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">,</span>\n   <span class=\"n\">unify</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n</pre></div>",
        "id": 173539465,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566217511
    },
    {
        "content": "<blockquote>\n<p><code>type_check</code> seems like a more superficial type check and doesn't catch every problem.</p>\n</blockquote>\n<p><code>infer_type</code> is superficial, but I thought <code>type_check</code> checks the entire term, no? Which is why it can be expensive sometimes.</p>",
        "id": 173539565,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566217604
    },
    {
        "content": "<p>I've had trouble with type check in the past where I would <code>type_check</code> just before adding a declaration, <code>type_check</code> would succeed but the declaration would fail for typing reason (if I remember correctly, some meta vars had not been unified yet)</p>",
        "id": 173539699,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566217761
    },
    {
        "content": "<p>here is a self contained example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">u</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">mk_app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">punit</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]],</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> fill in with some stuff here to trigger universe meta variable unification -/</span>\n  <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">to_raw_fmt</span> <span class=\"n\">t</span>\n</pre></div>",
        "id": 173543055,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566220983
    },
    {
        "content": "<p>This is trickier than I expected. If you can build enough of the <code>pexpr</code> structure of <code>t</code>, you can use that to force the universe levels to unify.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">u</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">mk_app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">punit</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]],</span>\n  <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">to_raw_fmt</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>But this does feel like a gap in the API.</p>",
        "id": 173548729,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566225437
    },
    {
        "content": "<p>Have you tried <code>mk_mapp</code>?</p>",
        "id": 173551194,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566227352
    },
    {
        "content": "<blockquote>\n<p>Have you tried <code>mk_mapp</code>?</p>\n</blockquote>\n<p>I can't because I already have a big term so it would involve rebuilding the whole term (and a lot of time I guess)... moreover <code>mk_app</code> takes a name and <code>list expr</code> instead of an <code>expr</code> and a <code>list expr</code></p>",
        "id": 173552539,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566228367
    },
    {
        "content": "<blockquote>\n<p>This is trickier than I expected. If you can build enough of the <code>pexpr</code> structure of <code>t</code>, you can use that to force the universe levels to unify.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">u</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">mk_app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">punit</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]],</span>\n  <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">to_raw_fmt</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>But this does feel like a gap in the API.</p>\n</blockquote>\n<p>My use-case is to do this unification on a big term that I already generated by some other means, so it is not appropriate to rebuild a skeleton and unify with it... I wouldn't know how to build such a skeleton...</p>",
        "id": 173552637,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566228453
    },
    {
        "content": "<p>And I tried converting to a pexpr and back, it does not work...</p>",
        "id": 173552719,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566228502
    },
    {
        "content": "<p>Would it make sense to build that big term as a pexpr and elaborate it at the end? Or do you need more control over the universe levels than that allows?</p>",
        "id": 173553237,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566228849
    },
    {
        "content": "<p>Actually, you should be able to build the pexpr skeleton automatically. I don't think this is 100% right, but I need to run in a sec.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">pexpr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">var</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">i</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">sort</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">const</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mvar</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">local_const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">local_const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">mk_explicit</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">elet</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">elet</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">macro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">a_1</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"n\">pexpr_skeleton</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">u</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">mk_app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">punit</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]],</span>\n  <span class=\"n\">pe</span> <span class=\"err\">←</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">to_expr</span> <span class=\"n\">pe</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">to_raw_fmt</span> <span class=\"n\">t</span>\n</pre></div>",
        "id": 173554392,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566229556
    },
    {
        "content": "<p>(Yes, there should be a better way to do this.)</p>",
        "id": 173554523,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566229630
    },
    {
        "content": "<p>I'm not sure if that will work. Have you tried it? Without using the <code>@</code> macro, the elaborator will think the type parameters are regular terms, will try to elaborate the type parameter using their types and the whole thing will fail.</p>",
        "id": 173554826,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566229850
    },
    {
        "content": "<p>All applications use the <code>mk_explicit</code> macro, which inserts <code>@</code> everywhere.</p>",
        "id": 173554946,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566229935
    },
    {
        "content": "<p>It works on this example anyway.</p>",
        "id": 173554964,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566229957
    },
    {
        "content": "<blockquote>\n<p>All applications use the <code>mk_explicit</code> macro, which inserts <code>@</code> everywhere.</p>\n</blockquote>\n<p>I don't understand the syntax tree as well as I thought then. How do you get it to not use <code>mk_explicit</code>?</p>",
        "id": 173555148,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566230114
    },
    {
        "content": "<p>Sorry, I phrased that badly. All applications created by <code>pexpr_skeleton</code> use it. <code>| (app a a_1) := app &lt;$&gt; (pexpr.mk_explicit &lt;$&gt; pexpr_skeleton a) &lt;*&gt; pexpr_skeleton a_1</code></p>",
        "id": 173555247,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566230166
    },
    {
        "content": "<p>The goal is that this should be a <code>pexpr</code> with the same structure as the input expr, except each universe is a meta universe.</p>",
        "id": 173555332,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566230237
    },
    {
        "content": "<p>Ah! I missed that! Thanks!</p>",
        "id": 173555426,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566230296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> thanks for your suggestion! It works in some cases, and for other cases the manual typechecking works better...<br>\nWhile trying to unify I had a new problem, I will post it in a different thread though.</p>",
        "id": 173632019,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566281769
    },
    {
        "content": "<p>cf <a href=\"#narrow/stream/113488-general/topic/unify.20fails.20in.20the.20presence.20of.20binders\" title=\"#narrow/stream/113488-general/topic/unify.20fails.20in.20the.20presence.20of.20binders\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/unify.20fails.20in.20the.20presence.20of.20binders</a></p>",
        "id": 173632096,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566281913
    },
    {
        "content": "<p>Here's a slight update that might fix some of the cases where it didn't work. (I noticed this while trying to investigate the other thread.)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">pexpr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">var</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sort</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">mk_meta_univ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">const</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mvar</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">infer_type</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">pexpr_skeleton</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">local_const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">local_const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">infer_type</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">pexpr_skeleton</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">mk_explicit</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">elet</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">elet</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">macro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">a_1</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"n\">pexpr_skeleton</span>\n</pre></div>",
        "id": 173666931,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566313913
    },
    {
        "content": "<blockquote>\n<p>Here's a slight update that might fix some of the cases where it didn't work. (I noticed this while trying to investigate the other thread.)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">pexpr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">var</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sort</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">mk_meta_univ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">const</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mvar</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">infer_type</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">pexpr_skeleton</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">local_const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">local_const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">infer_type</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">pexpr_skeleton</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">mk_explicit</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">elet</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">elet</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_1</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_2</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pexpr_skeleton</span> <span class=\"n\">a_3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">macro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">a_1</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"n\">pexpr_skeleton</span>\n</pre></div>\n\n\n</blockquote>\n<p>it still does not fix my other usecases...</p>",
        "id": 173669029,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566315573
    }
]