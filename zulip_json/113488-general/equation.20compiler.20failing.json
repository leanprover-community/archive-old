[
    {
        "content": "<p>The equation compiler keeps on giving me the same error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">auxiliary</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">f_map_core._main._pack'</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">infer</span> <span class=\"n\">type</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">unknown</span> <span class=\"kd\">variable</span>\n  <span class=\"n\">H</span>\n</code></pre></div>\n<p>This error happens in a variety of cases, and I can't find a good minimal example. In the simplest case, I have a hypothesis <code>hy</code> which exactly matches the goal, and replacing a sorry with <code>exact hy</code> causes this error to be emitted. Does anyone know some general tips for helping the equation compiler understand what I've written?</p>",
        "id": 287446496,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1656178519
    },
    {
        "content": "<p>this needs a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 287447190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656179506
    },
    {
        "content": "<p>it might have something to do with mutual recursion, it is difficult to understand what is happening without an example</p>",
        "id": 287447241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656179566
    },
    {
        "content": "<p>Yeah, unfortunately whenever I try to minify my example the problem goes away - the strange thing is that I never use the variable <code>H</code> at all so it must be internal to the equation compiler</p>",
        "id": 287447264,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1656179615
    },
    {
        "content": "<p>then minify everything else?</p>",
        "id": 287447864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656180415
    },
    {
        "content": "<p>Thanks for your help, the issue's fixed now. It turns out that the equation compiler was also failing due to issues related to a well-founded relation - I thought the errors were independent but after solving the latter, the former went away.</p>",
        "id": 287448775,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1656181739
    },
    {
        "content": "<p>I still would like to see an example, because it sounds like a bug</p>",
        "id": 287449388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656182757
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">hyx</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hyx</span><span class=\"o\">,</span> <span class=\"n\">test</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hfinite</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span> <span class=\"n\">test</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.lt_aleph_0_iff_finite</span> <span class=\"n\">at</span> <span class=\"n\">hfinite</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ℵ₀</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span> <span class=\"n\">test</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n      <span class=\"bp\">+</span> <span class=\"bp\">#</span><span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span> <span class=\"n\">test</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.mk_nat</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.mk_univ</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.mk_union_of_disjoint</span><span class=\"o\">,</span>\n      <span class=\"n\">congr'</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.union_def</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">set.eq_univ_of_forall</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">test</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.not_nonempty_iff_eq_empty</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">hfinite</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hfinite</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hfinite</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"n\">this.some</span>\n</code></pre></div>\n<p>This has an incorrect proof that recursive applications are decreasing - the important thing is that the first error emitted by lean is the equation compiler one.</p>",
        "id": 287449715,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1656183190
    },
    {
        "content": "<p>It can probably still be reduced, but I don't have time for that right now</p>",
        "id": 287449720,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1656183207
    },
    {
        "content": "<p>what are the imports?</p>",
        "id": 287453785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656188997
    },
    {
        "content": "<p>I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n</code></pre></div>\n<p>should suffice</p>",
        "id": 287453947,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1656189224
    }
]