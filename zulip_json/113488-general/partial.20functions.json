[
    {
        "content": "<p>Why this does not work?</p>\n<p>-- Switch from a function on a subset to a function to option monad<br>\ndef subfunc_to_option {α β: Type} {c: α → Prop} (f: {x:α // c x} → β) : α → option β :=<br>\nλ y: α, if c y then some (f (<a href=\"http://subtype.mk\" target=\"_blank\" title=\"http://subtype.mk\">subtype.mk</a> y (arbitrary (c y) [true_inhabited (c y)]))) else none</p>",
        "id": 129261641,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530978182
    },
    {
        "content": "<p>put [decidable_pred c] in the list of assumptions (before the colon)</p>",
        "id": 129261658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530978231
    },
    {
        "content": "<p>Kenny, I did what you say. Moreover <code>open classical</code> is already in effect. But it does not work now too</p>",
        "id": 129261720,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530978352
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">subfunc_to_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</pre></div>",
        "id": 129262022,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530978813
    },
    {
        "content": "<p><code>if h : c y</code> instead of <code>if c y</code> gives you access to the proof.</p>",
        "id": 129262116,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530978938
    },
    {
        "content": "<p>Chris, Thanks it works now. But I am curious why my old code (with <code>arbitrary</code>) didn't work.</p>",
        "id": 129262182,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530979012
    },
    {
        "content": "<p>Because there was no way of telling that the type <code>c y</code> was inhabited.</p>",
        "id": 129262210,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530979079
    },
    {
        "content": "<p>It's actually very unusual to use <code>inhabited</code> on Props.</p>",
        "id": 129262269,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530979146
    },
    {
        "content": "<p>Also <code>open classical</code> only opens the classical namespace, it doesn't give you decidability. You need <code>local attribute [instance] classical.prop_decidable</code> for that.</p>",
        "id": 129262352,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530979207
    },
    {
        "content": "<p>I tried to synthesize the function in another direction. Now I know where is my error but don't know how to fix it:</p>\n<p>-- Switch from function to option monad to a function on a subset<br>\ndef option_to_subfunc {α β: Type} (f: α → (option β)) :=<br>\nλ y: {x:α // f x ≠ none},<br>\nmatch f y with<br>\n| some x := y<br>\n| none   := sorry</p>",
        "id": 129262806,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530979909
    },
    {
        "content": "<p>You needed to give the type, and write <code>end</code> at the end of your <code>match</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">},</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129262898,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530980100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119326\">@Victor Porton</span> If you surround your code between three backticks, then it will be typeset in a codeblock. If you append \"lean\" to the first 3 backticks, then it will get highlighting!</p>",
        "id": 129262906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530980116
    },
    {
        "content": "<p>Again <code>f y</code> does not make sense because alpha is not equal to the subtype you are using. f wants an input of type alpha and you are feeding it <code>y</code>. Did you read about subtypes in Theorem in Lean?</p>",
        "id": 129262950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530980193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Your code does not validate. What I really wanted to ask is what to do instead of <code>sorry</code>. I am lost about this</p>",
        "id": 129262952,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530980201
    },
    {
        "content": "<p>It does make sense because there's a coercion</p>",
        "id": 129262957,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530980223
    },
    {
        "content": "<p>Yes, I knew that here there is a coercion</p>",
        "id": 129262963,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530980241
    },
    {
        "content": "<p>Oh -- it does make sense in this context because there's a coercion!</p>",
        "id": 129262965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530980246
    },
    {
        "content": "<p>:-)</p>",
        "id": 129262967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530980259
    },
    {
        "content": "<p>In response to a question in (no topic) that should have been here.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">hfy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hfy</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hfy</span><span class=\"o\">,</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hfy</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hfy</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129263099,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530980470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  1.  The values type of your <code>option_to_subfunc</code> is wrong; it should be <code>\\beta</code> not <code>{x:α // f x ≠ none}</code>. 2. Do I understand correctly that the values in <code>have</code> are \"ignored\" (not included into the result) when building the value of the defined object? 3. What this elimination do? (I am a very novice and understand your code partially.)</p>",
        "id": 129263253,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530980757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Sorry for a stupid question but I do not understand what <code>:=</code> after <code>have</code> means</p>",
        "id": 129263319,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530980818
    },
    {
        "content": "<p>It's the same as <code>from</code></p>",
        "id": 129263329,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530980839
    },
    {
        "content": "<p>I am trying to read your code</p>",
        "id": 129263344,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530980869
    },
    {
        "content": "<p>Sorry, what is <code>λ hfy, y</code>?</p>",
        "id": 129263411,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530980970
    },
    {
        "content": "<p>I put <code>hfy</code> after the <code>match</code> so I would have access to the fact that <code>f y ≠ none</code>. In the <code>none</code> cases <code>hfy</code> has type <code>none ≠ none</code> which is obviously false, so I can use <code>false.elim</code> to define the function</p>",
        "id": 129263412,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530980977
    },
    {
        "content": "<p><code>hfy</code> is just a proof that <code>f y = none</code> or in the <code>some</code> case that <code>some ≠ none</code></p>",
        "id": 129263460,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530981025
    },
    {
        "content": "<p>I think this is the function you want</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">hfy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hfy</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hfy</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hfy</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hfy</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129263520,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530981134
    },
    {
        "content": "<p>what is <code>(hfy rfl).elim</code>?</p>",
        "id": 129263532,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530981222
    },
    {
        "content": "<p><code>match f y, hfy with</code> means I now have to define a function with type <code>Π x : option β, x ≠ none → β </code></p>",
        "id": 129263533,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530981234
    },
    {
        "content": "<p><code>hfy rfl</code> is a proof of <code>false</code></p>",
        "id": 129263572,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530981252
    },
    {
        "content": "<p><code>(hfy rfl).elim</code> is another way of writing <code>false.elim (hfy rfl)</code>.</p>",
        "id": 129263574,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530981287
    },
    {
        "content": "<p>I need to time to review all you wrote</p>",
        "id": 129263581,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530981317
    },
    {
        "content": "<p><code>false.elim</code> is a function that gives you a term of any type given a proof of <code>false</code></p>",
        "id": 129263582,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530981318
    },
    {
        "content": "<p>What I don't understand: Why is it <code>| some x := λ hfy, x</code> not <code>| some x := x</code>. It should be a value in <code>\\b</code>, right? But <code>λ hfy, x</code> is a function and so it looks for me that it can't be in <code>\\b</code></p>",
        "id": 129263706,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530981560
    },
    {
        "content": "<p>err.. wrong</p>",
        "id": 129263710,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530981582
    },
    {
        "content": "<p><code>match f y, hfy</code> with means I now have to define a function with type <code>Π x : option β, x ≠ none → β</code>, not <code>option β → β</code> any more.  Even though I'm not using the fact that <code>x  ≠ none</code> in the <code>some</code> case, I still have access to it.</p>",
        "id": 129263833,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530981794
    },
    {
        "content": "<p>Hm, it is harder than I expected, I yet do not understand the details of this simple construct. I initially started to learn Lean to rewrite my English book in Lean. Now I suspect that it would take me too much time to master Lean. What is your advice: learn Lean or just to keep writing math in English?</p>",
        "id": 129263923,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530981961
    },
    {
        "content": "<p>What field of maths is your book on?</p>",
        "id": 129263975,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530982024
    },
    {
        "content": "<p>I think maybe a good way to think about the function is that the output of type <code>β</code> is the function of type <code>Π x : option β, x ≠ none → β</code> applied to <code>f y</code> and <code>hfy</code></p>",
        "id": 129264037,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530982125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I discovered a new subfield of general topology (though some man expressed that he does not consider it a subfield of general topology). For example the formula $f\\circ\\mu \\leq \\nu\\circ f$ means that $f$ is a continuous morphisms from $\\mu$ to $\\nu$.</p>",
        "id": 129264039,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530982129
    },
    {
        "content": "<p>I don't really know much about topology (I'm a first year undergraduate). I think <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  know about topology in lean.</p>",
        "id": 129264095,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530982215
    },
    {
        "content": "<p>Honestly, I am somehow lost in your Lean discussion. I may re-read it again</p>",
        "id": 129264096,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530982217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> This does not matter, as I build my version of topology from scratch, without using the classical GT</p>",
        "id": 129264123,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530982272
    },
    {
        "content": "<p>Is <code>match f y, hfy</code> the same as <code>match \\&lt;f y, hfy\\&gt;</code>?</p>",
        "id": 129264230,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530982442
    },
    {
        "content": "<p>more or less</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">hfy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hfy</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hfy</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">hfy</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hfy</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129264474,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530982900
    },
    {
        "content": "<p>I think that might be more confusing though.</p>",
        "id": 129264557,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530983003
    },
    {
        "content": "<p>It seems that I do (or almost do) understand your last (\"more confusing\") code. But why the \"less confusing\" code (which I don't understand) uses <code>some x := λ hfy, x</code> not <code>some x := x</code>?</p>",
        "id": 129264689,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530983184
    },
    {
        "content": "<p>oh, it seems I got the idea</p>",
        "id": 129264699,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530983214
    },
    {
        "content": "<p>I have yet a question. How does the following work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hfy</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hfy</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hfy</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hfy</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>We have two expressions in <code>match</code> arguments and just one in the math conditions. How do they match?</p>",
        "id": 129264809,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530983373
    },
    {
        "content": "<p>I don't really understand enough about the equation compiler to answer the question properly.</p>",
        "id": 129265113,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530983798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Anyway much thanks for your support. Also what does $\\Sigma'$ mean? It has added apostrophe</p>",
        "id": 129265139,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530983845
    },
    {
        "content": "<p>Now I \"almost\" understand. Thanks</p>",
        "id": 129265189,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530983897
    },
    {
        "content": "<p>It's just like Sigma, except the constructors can be either proofs or data, whereas Sigma only takes data.</p>",
        "id": 129265206,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530983919
    },
    {
        "content": "<p>This is perhaps a better way of writing the function</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">},</span>\n<span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"kn\">end</span> <span class=\"k\">in</span>\n<span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n</pre></div>",
        "id": 129265352,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530984179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> It gets better as I rewrote it more understandably</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">hfy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hfy</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hfy</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>  <span class=\"o\">,</span> <span class=\"n\">hfy</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hfy</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129265357,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530984209
    },
    {
        "content": "<p>I don't understand your last code. For example, what is <code>property</code>?</p>",
        "id": 129265405,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530984261
    },
    {
        "content": "<p>Another way of writing <code>y.2</code></p>",
        "id": 129265438,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530984336
    },
    {
        "content": "<p>Why do you think the the second way is better?</p>",
        "id": 129265498,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530984391
    },
    {
        "content": "<p>I had to try out a few things to get the first way to work. For example this didn't work. I don't really have a good reason why the second way is better other than that. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span><span class=\"o\">},</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hfy</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>  <span class=\"o\">,</span> <span class=\"n\">hfy</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hfy</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129265655,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530984637
    },
    {
        "content": "<p>It's clearer what's going on, because in the first method, it's not obvious that hfy will have type <code>some x ≠ none</code> or <code>none ≠ none</code>, and not <code>f y ≠ none</code> in the match expression.</p>",
        "id": 129265731,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530984789
    },
    {
        "content": "<p>In that last one, <code>y.2</code> has the type <code>f y.1 ≠ none</code>, so it is important that you write <code>f y.1</code> instead of <code>f (\\u y)</code></p>",
        "id": 129266827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530987034
    },
    {
        "content": "<p>What about </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 129267274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530987988
    },
    {
        "content": "<p>I thought the function probably already existed, but I couldn't find it.</p>",
        "id": 129267284,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530988051
    },
    {
        "content": "<p><code>option.is_some</code> is directly about what you care about instead of its negation</p>",
        "id": 129267287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530988069
    },
    {
        "content": "<p>I don't know if it already exists</p>",
        "id": 129267327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530988089
    },
    {
        "content": "<p>I think I saw it before, but I was thrown off by the fact <code>is_some</code> is <code>bool</code> rather than <code>Prop</code></p>",
        "id": 129267409,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530988232
    },
    {
        "content": "<p>Oh, you mean <code>is_some</code> already existed.</p>",
        "id": 129267412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530988258
    },
    {
        "content": "<p>I thought you were referring to <code>option_to_subfunc</code></p>",
        "id": 129267418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530988273
    },
    {
        "content": "<p>I was referring to <code>option_to_subfunc</code> or things like it, and I saw <code>option.get</code> but I didn't like it because <code>is_some</code> is <code>bool</code></p>",
        "id": 129267469,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530988337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What is this <code>|</code>?</p>",
        "id": 129270457,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530993759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Oh, it is pattern matching, I got</p>",
        "id": 129270466,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530993797
    },
    {
        "content": "<p>weird, I can't find <code>def option</code> in Lean library</p>",
        "id": 129270785,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530994335
    },
    {
        "content": "<p>got: <code>inductive option</code></p>",
        "id": 129270788,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530994367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Where is <code>option.get</code> defined?</p>",
        "id": 129270836,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530994457
    },
    {
        "content": "<p>found: <code>basic.lean</code></p>",
        "id": 129270857,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530994543
    },
    {
        "content": "<p>I also don't understand <code>(hfy rfl).elim</code>. Does it contain <code>hfy</code> applied to <code>rfl</code>? I would be not surprised if <code>rfl</code> were applied to an equality, but I see inequality applied to <code>rfl</code> what looks for me the \"opposite\" of what can be done. What is it?</p>",
        "id": 129271074,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530994924
    },
    {
        "content": "<p><code>hfy</code> has type <code>none ≠ none</code> which is definitionally equal to <code>none = none → false</code>. <code>rfl</code> is a proof that <code>none = none</code> so <code>hfy rfl</code> has type <code>false</code></p>",
        "id": 129271212,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530995218
    },
    {
        "content": "<p>How having a function <code>f</code> determine its domain?</p>",
        "id": 129273495,
        "sender_full_name": "Victor Porton",
        "timestamp": 1530999983
    },
    {
        "content": "<p>it's in the type of the function</p>",
        "id": 129273497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531000004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> So use <code>match</code>?</p>",
        "id": 129273512,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531000045
    },
    {
        "content": "<p>I have <code>f: (Σ c:α → Prop, {x:α // c x})</code> and want to get the <code>c</code></p>",
        "id": 129273518,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531000070
    },
    {
        "content": "<p>I... don't think that's how this works</p>",
        "id": 129273519,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531000082
    },
    {
        "content": "<p>What I try is like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">subfunc_to_option2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"c1\">--[decidable_pred c]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</pre></div>",
        "id": 129273563,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531000137
    },
    {
        "content": "<p>is this possible?</p>",
        "id": 129273670,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531000355
    },
    {
        "content": "<p>This does not compile (types of sides equality in <code>inv1</code> do not match). How to fix the error?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"c1\">-- Switch from a function on a subset to a function to option monad</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">subfunc_to_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"c1\">--[decidable_pred c]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"c1\">-- Switch from function to option monad to a function on a subset</span>\n<span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">inv1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subfunc_to_option</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 129274227,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531001503
    },
    {
        "content": "<p>I'm not sure what you're trying to do. I don't think the type of <code>f</code> is what you want it to be. You cannot do <code>f.1</code> because <code>f</code> is not a sigma type.</p>",
        "id": 129274270,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531001579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I tried to eliminate <code>{c: α → Prop}</code> from my definition. I tried it for completeness, but probably the proper way to do it is using an implicit argument (as in your code) instead</p>",
        "id": 129274320,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531001657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Note that the issue in my very last question was different</p>",
        "id": 129274321,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531001675
    },
    {
        "content": "<p>Side question: I subscribed to desktop notifications for this chat, but I get no notifications. Will I receive the notifications, if I close the browser window?</p>",
        "id": 129274440,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531001995
    },
    {
        "content": "<p>One way to fix the error is to use <code>==</code> instead of <code>=</code> which allows you to state equality when the types are different (your types are different, but they should be equal). This can be unwieldy however. Another way would be to prove that they are equal when applied to an argument, something like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">inv1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subfunc_to_option</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">c</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 129274488,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531002061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> \"unwieldy\"? What is particularly bad with <code>==</code>? the second way (to write <code>y</code> explicitly) seems even worse for me.</p>",
        "id": 129274550,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531002219
    },
    {
        "content": "<p>Can the following be proved?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">eq_xxx</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">==</span><span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>(that is if values of the same type are <code>==</code> then they are <code>=</code>)</p>",
        "id": 129274878,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531002948
    },
    {
        "content": "<p><code>eq_of_heq</code></p>",
        "id": 129275360,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531004137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119326\">@Victor Porton</span> You should receive notifications if you are directly addressed, like this</p>",
        "id": 129275452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531004333
    },
    {
        "content": "<p>hm, it looks now I am really stalled to fill the <code>sorry</code>ies in my source:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"c1\">-- Switch from a function on a subset to a function to option monad</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">subfunc_to_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"c1\">--[decidable_pred c]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"c1\">-- Switch from function to option monad to a function on a subset</span>\n<span class=\"n\">def</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">inv1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option_to_subfunc</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subfunc_to_option</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">inv2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">):</span> <span class=\"n\">subfunc_to_option</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">option_to_subfunc</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>How to learn to use <code>==</code>? Maybe I should read Coq docs on this?</p>",
        "id": 129275513,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531004453
    },
    {
        "content": "<p>To address the larger goal of the definitions you are making, I think you want to use <code>roption</code> (in <code>data.pfun</code>) and the isomorphism theorems between <code>roption</code> and <code>option</code>. A function <code>A -&gt; roption B</code> is the same as a partial function (from a subset of <code>A</code> to <code>B</code>)</p>",
        "id": 129275523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531004483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> First, how <code>roption</code> would be better for my purposes than <code>option</code>? My project uses classical logic. (However someone suggested me to mark which theorems need axiom of choice explicitly.) Now we have three isomorphic objects (and thus three isomorphisms): a partial function, <code>A-&gt;option B</code> and <code>A-&gt;roption B</code>. I do not see how it could be better than my initial idea.</p>",
        "id": 129299190,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531055763
    },
    {
        "content": "<p>Because a function <code>A -&gt; roption B</code> <em>is</em> a \"subfunc\" as you call it. It is literally a pair of a domain and a partial function on that domain</p>",
        "id": 129307057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531069265
    },
    {
        "content": "<p>so you can leverage the proofs of isomorphism there to obtain an isomorphism from <code>A -&gt; option B</code> to a partial function</p>",
        "id": 129307117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531069331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Either you don't understand me, or I do not understand you. The \"subfunc\" by definition is a function on a _subtype_ of <code>A</code>. But <code>A -&gt; roption B</code> is a function on the type <code>A</code>, not on its arbitrary subtype as I want. It may be isomorphic, but they are _not_ the same.</p>",
        "id": 129307187,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531069509
    },
    {
        "content": "<p>The isomorphism is almost trivial though, unlike the one from option</p>",
        "id": 129307195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531069556
    },
    {
        "content": "<p>And furthermore there is already a definition which gives this isomorphism, <code>as_subtype</code></p>",
        "id": 129307237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531069583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks. As there is undocumented things like <code>==</code> which I may need for my Lean-related project, I prefer to lay it aside for an indefinite future. Moreover, I am going to lay aside abstract math research and get busy myself writing a free Python program (for an applied computer science, not abstract mathematics) now</p>",
        "id": 129307448,
        "sender_full_name": "Victor Porton",
        "timestamp": 1531070116
    },
    {
        "content": "<p>It's not undocumented, but it's a pain to work with</p>",
        "id": 129307457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531070144
    }
]