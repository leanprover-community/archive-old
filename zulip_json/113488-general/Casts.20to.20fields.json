[
    {
        "content": "<p>It seems that some/many results in mathlib use <code>ℚ</code> in place of char zero fields (typically, <code>nat.choose_eq_factorial_div_factorial</code>, or <code>bernoulli_poly</code>). Instead of having results stated directly for char zero fields, we have results for <code>ℚ</code> that we then need to coerce. That seems to go against the idea of avoiding specificity, and more pragmatically it adds an annoying layer of coercion.<br>\nWhat should we do?</p>",
        "id": 247933868,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627918639
    },
    {
        "content": "<p>How about Q-algebras? When Ashvni and I were working on Bernoulli polynomials this was the generality we wanted (we wanted to apply these theorems in the power series ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[[T]]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]]</span></span></span></span> and had to keep coercing twice)</p>",
        "id": 247935748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627919713
    },
    {
        "content": "<p>Oooh, algebras aren't fields. That makes sense.<br>\nBut my point still holds for the rest of the uses.</p>",
        "id": 247936106,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627919945
    },
    {
        "content": "<p>But to be fair even then you should be able to replace <code>ℚ</code> by any char zero field. You just won't get rid of the algebra layer.</p>",
        "id": 247936344,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627920050
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.algebra_rat\">docs#rat.algebra_rat</a> makes all char-zero division_rings Q-algebras, right?</p>",
        "id": 247936452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627920119
    },
    {
        "content": "<p>Oh no, I'd missed that they have to be char 0 - so we can't just put an <code>of_rat</code> field in <code>division_ring</code> to solve the algebra diamonds</p>",
        "id": 247936609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627920202
    },
    {
        "content": "<p>I rather meant \"Is there a use for these lemmas on <code>α-algebra</code>s?\"</p>",
        "id": 247936634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627920214
    },
    {
        "content": "<p>One counterpoint to my idea is that Lean has to figure out more stuff when applying a lemma.</p>",
        "id": 247936683,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627920241
    }
]