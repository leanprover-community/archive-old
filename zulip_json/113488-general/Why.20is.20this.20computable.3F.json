[
    {
        "content": "<p>why on earth is this computable?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">prod&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">⟨</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 158857413,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550564709
    },
    {
        "content": "<p>and why on earth is this noncomputable?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">prod&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 158857474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550564787
    },
    {
        "content": "<p>types are erased</p>",
        "id": 158857486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550564817
    },
    {
        "content": "<p>types are what?</p>",
        "id": 158857496,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550564826
    },
    {
        "content": "<p>they are not data</p>",
        "id": 158857502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550564832
    },
    {
        "content": "<p>:o</p>",
        "id": 158857503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550564838
    },
    {
        "content": "<p>you can't compute with them</p>",
        "id": 158857504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550564839
    },
    {
        "content": "<p>what is data?</p>",
        "id": 158857505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550564840
    },
    {
        "content": "<p>this is new</p>",
        "id": 158857510,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550564852
    },
    {
        "content": "<p>in the VM they are unit</p>",
        "id": 158857513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550564857
    },
    {
        "content": "<p>I always thought that only Prop is not data</p>",
        "id": 158857515,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550564858
    },
    {
        "content": "<p>proofs and types are not data</p>",
        "id": 158857525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550564874
    },
    {
        "content": "<p>everything else is</p>",
        "id": 158857528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550564878
    },
    {
        "content": "<p>as a result, proofs and types are always vacuously computable</p>",
        "id": 158857582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550564928
    },
    {
        "content": "<p>why is Type not data?</p>",
        "id": 158857597,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550564980
    },
    {
        "content": "<p>because types are not observable in the lambda calculus</p>",
        "id": 158857672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565041
    },
    {
        "content": "<p>you can delete all the types and all the lambdas make sense</p>",
        "id": 158857678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565054
    },
    {
        "content": "<p>Another good reason is that there is no sensible return value for the noncomputable version, after all, all existence proofs here are definitionally equal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</pre></div>",
        "id": 158857680,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1550565055
    },
    {
        "content": "<p>and what's a sensible return value for the computable version?</p>",
        "id": 158857715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550565120
    },
    {
        "content": "<p><code>empty</code>?</p>",
        "id": 158857767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565142
    },
    {
        "content": "<p>or anything</p>",
        "id": 158857768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565145
    },
    {
        "content": "<p>Here's an amusing example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">def</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">ℕ</span> <span class=\"k\">else</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">three</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">T</span><span class=\"bp\">;</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"mi\">3</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">three</span> <span class=\"c1\">-- #3</span>\n</pre></div>\n\n\n<p>it uses a noncomputable type, and a noncomputable proof, and gets something computable and can actually be <code>#eval</code>'d</p>",
        "id": 158857903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565341
    },
    {
        "content": "<blockquote>\n<p>and what's a sensible return value for the computable version?</p>\n</blockquote>\n<p>Actually a better answer is \"unit star\" because in the VM <code>Type = unit</code></p>",
        "id": 158858014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565469
    },
    {
        "content": "<p>oh hell</p>",
        "id": 158858190,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550565659
    }
]