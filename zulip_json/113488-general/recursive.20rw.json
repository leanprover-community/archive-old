[
    {
        "content": "<p>Say I have <code>¬ (∃ (U ∈ f) (V ∈ g), U ∩ V = ∅)</code> and I want to apply <code>rw not_exists</code> recursively to it. How do I do this?</p>",
        "id": 280129020,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650920873
    },
    {
        "content": "<p>Does <code>repeat { rw not_exists, }</code> do what you want?</p>",
        "id": 280129180,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1650920940
    },
    {
        "content": "<p>(Actually <code>iterate { rw not_exists, }</code> may be better, and it also lets you specify an <code>n</code>)</p>",
        "id": 280129287,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1650920997
    },
    {
        "content": "<p>No, it does not seem to work.</p>",
        "id": 280129613,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650921149
    },
    {
        "content": "<p>Why do you get this in the first place? Did you use <code>by_contra</code> instead of <code>by_contra'</code>?</p>",
        "id": 280129614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650921150
    },
    {
        "content": "<p><code>simp_rw not_exists</code></p>",
        "id": 280129644,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650921164
    },
    {
        "content": "<p>That worked. Nice.</p>",
        "id": 280129732,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650921202
    },
    {
        "content": "<p>The problem with <code>repeat { rw not_exists }</code> is that <code>rw</code> does not look under binders, and <code>∃</code> is a binder, so it will only rewrite the first one.</p>",
        "id": 280129768,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650921219
    },
    {
        "content": "<p>I got it from using <code>iff.not</code> on <code>filter.inf_eq_bot_iff</code>.</p>",
        "id": 280129872,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650921252
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_neg\">tactic#push_neg</a></p>",
        "id": 280129899,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650921264
    },
    {
        "content": "<p>That's even better.</p>",
        "id": 280130132,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650921367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/recursive.20rw/near/280129768\">said</a>:</p>\n<blockquote>\n<p><code>rw</code> does not look under binders</p>\n</blockquote>\n<p>A reminder that <code>rw</code> does look under binders, it just can't rewrite subexpressions that contain local variables. <code>simp</code> can do it because it knows about <code>funext</code>.</p>",
        "id": 280134080,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650923287
    },
    {
        "content": "<p>Sorry, never know how to put it best!</p>",
        "id": 280134129,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650923320
    },
    {
        "content": "<p>\"can't look under binders\" is a good meme, so it's too bad it's inaccurate.</p>",
        "id": 280134286,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650923398
    }
]