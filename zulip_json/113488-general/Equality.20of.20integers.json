[
    {
        "content": "<p>I am working with arrays of natural numbers and arrays of arrays of natural numbers. I was hoping to get a few of the basics... is there a table involving the names of the various properties of the integers?</p>\n<p>I don't know very much about how this is handled, but I would imagine there is something to say about speed of testing equality here. Choose a base C for the decimal expansion of n : Nat and suppose that there is f : Nat -&gt; Nat sending all but finitely many natural numbers to 0 such that n = sum f(i) C^i</p>\n<p>There is a function m : Nat -&gt; Nat sending n = sum f(i) C^i to max {n : f(i) isn't 0}. Say we make a table e : {0, ..., C} x {0, ..., C} -&gt; Prop with t(C) time to look-up. Then knowledge of f above gives that = is O(m), m = m(f).</p>\n<p>For some reason I thought there would be something better than this on first instinct, maybe something amortized constant time, O(1)+?</p>",
        "id": 311884017,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669228685
    },
    {
        "content": "<p>Definitional equality is maybe related to the O(term-length) complexity class.</p>",
        "id": 311888308,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669229062
    },
    {
        "content": "<p>What do you mean by \"testing\" equality? Do you mean in the sense of the VM:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or the kernel:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311926123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669249919
    },
    {
        "content": "<p>Are you writing programs (in Lean 3? or in Lean 4?) or are you proving things about arrays of natural numbers?</p>",
        "id": 311980391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669284665
    },
    {
        "content": "<p>This is Lean 4.</p>\n<p>The test is the mentioned algorithm whose complexity time is O(m). This test is a function from binary representations whose length is recorded separately to 2. Here's something closer to Lean code:</p>\n<p>def X := {(f : Nat -&gt; {1, ..., C}, d = d(f) in N) // d = max(i :N , f(i) = 0) }<br>\ndef toNat (x : X) := sum_over_N x.fst(i)<br>\ndef Equality : X x X -&gt; 2 ...</p>",
        "id": 312053764,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669308649
    },
    {
        "content": "<p>Oh, and I'm writing programs. Actually is there a turing machine library?</p>",
        "id": 312053899,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669308714
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (and once you have one, follow the instructions at <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to post it)? What you have isn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because it doesn't include the definition of <code>sum_over_N</code></p>",
        "id": 312055447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669309356
    },
    {
        "content": "<p>Lean 4 uses <a href=\"https://gmplib.org/\">libgmp</a> to represent it's <code>Nat</code> type internally. That library stores numbers in base <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span></span></span></span> or base <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{64}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">64</span></span></span></span></span></span></span></span></span></span></span></span> I believe (they call each digit in this representation a \"limb\"). I'm not sure I understand what you're asking exactly, but maybe this helps.</p>",
        "id": 312056303,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669309760
    },
    {
        "content": "<p>One resource for what exists in Lean 4 and mathlib4 is the mathlib4 documentation. Here's a link to the documentation for <code>Nat</code> itself, but there are lemmas about <code>Nat</code> throughout the library. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs4#Nat</a></p>",
        "id": 312056747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669309964
    }
]