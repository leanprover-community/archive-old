[
    {
        "content": "<p>I'm playing a bit with automation. Somehow I want to tell Lean some facts that it should use, and then it should blast its way through to the finish line.<br>\nSo I would like to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">fact₁</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">key_lemma</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">fact₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">fact₃</span> <span class=\"o\">:</span> <span class=\"n\">xyzzy</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">some_auto</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>The natural order (for mathematicians) would be to state these facts in such an order that the proof of <code>fact₃</code> may depend on <code>fact₁</code> and <code>fact₂</code>. All these facts together will be used to prove the main goal.<br>\nHowever, Lean doesn't like that order. Because now the <code>have fact₃</code> claim is nested in the proof of <code>fact₂</code>, which is nested in the proof of <code>fact₁</code>. And so these facts aren't actually available when trying to prove the main goal.</p>\n<p>To some extent <code>suffices</code> makes the \"correct\" order available. However, then you can't say <code>apply key_lemma</code> right after stating some claim.</p>\n<p>So what I would like is <code>global_have</code>, which adds a claim to the global scope, instead of nested in the proof of a subgoal. Is something like that possible?</p>",
        "id": 158450113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550072248
    },
    {
        "content": "<p>I'm a little confused--do you intend to prove these <code>fact</code>s yourself?</p>",
        "id": 158450301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550072383
    },
    {
        "content": "<p>because after <code>have fact₂ : bar</code>, say, you should be giving the proof of <code>fact₂</code></p>",
        "id": 158450390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550072415
    },
    {
        "content": "<p>No. Not really. They are just to guide the automation.</p>",
        "id": 158450418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550072429
    },
    {
        "content": "<p>It should be able to prove these subgoals. And once it knows these facts, go on to prove the main goal.</p>",
        "id": 158450468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550072463
    },
    {
        "content": "<p>Okay, so basically you want to continue working on the main goal first. Then you can use <code>swap</code>, or possibly <code>have fact₂ : bar := _,</code></p>",
        "id": 158450485,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550072469
    },
    {
        "content": "<blockquote>\n<p>It should be able to prove these subgoals. And once it knows these facts, go on to prove the main goal.</p>\n</blockquote>\n<p>If you want to do it in that order, then you should put your prove-everything tactic after each <code>have</code></p>",
        "id": 158450525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550072497
    },
    {
        "content": "<p>I see, so I want a <code>swap_have</code> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 158450627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550072536
    },
    {
        "content": "<p>I don't want my prove-everything tactic after each <code>have</code>. That doesn't look nice.</p>",
        "id": 158450661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550072565
    },
    {
        "content": "<p>I tested and <code> := _</code> does work, and it's the same number of characters as <code>swap_</code></p>",
        "id": 158450705,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550072590
    },
    {
        "content": "<p>I want <code>swap_to_main_goal</code>.</p>",
        "id": 158451175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550072877
    },
    {
        "content": "<p>Is that possible?</p>",
        "id": 158451220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550072885
    },
    {
        "content": "<p>Ok, I now have this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Euclid</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">use_this</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_is_prime</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac_prime</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">key_fact</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_fact</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">auto</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>where <code>auto</code> is a wrapper around <code>solve_by_elim</code> and <code>tidy</code>. I'm reasonably happy with this.</p>",
        "id": 158451932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550073329
    },
    {
        "content": "<p>Thanks for the tips <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 158451952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550073346
    },
    {
        "content": "<p>I feel like I no longer know why this theorem is true</p>",
        "id": 158452211,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550073526
    },
    {
        "content": "<p>You think mathlib's version is more readable?</p>",
        "id": 158452275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550073583
    },
    {
        "content": "<p>I think it's that phenomenon where you see a word so many times that it stops looking like a word.</p>",
        "id": 158452793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550073915
    },
    {
        "content": "<p>But maybe it would help to have <code>p &lt; n</code> appear somewhere in the proof (I guess it would show up in the tactic state at least)</p>",
        "id": 158452818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550073932
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Semantic_satiation\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Semantic_satiation\">https://en.wikipedia.org/wiki/Semantic_satiation</a></p>",
        "id": 158452903,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550073971
    },
    {
        "content": "<p>did the <code>auto</code> tactic figure out to prove <code>p &lt;= n</code> from <code>p &lt; n</code>?</p>",
        "id": 158453084,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550074099
    },
    {
        "content": "<p>Auto is just chaining <code>solve_by_elim</code> (with a suitable set of lemmas) and <code>tidy</code>.<br>\nI know this is cheating... but we don't have a proper <code>back</code> yet, and I want to show that it is not unreasonable to hope that Lean will be able to figure out the trivial proof obligations.</p>",
        "id": 158453536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550074420
    },
    {
        "content": "<p>by the way <code>swap_have</code> is called <code>suffices</code></p>",
        "id": 158460451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550079499
    },
    {
        "content": "<p><code>suffices</code> does not suffice... see above. But I think the \"main goal\" is not always well-defined. So I've come to the conclusion that I probably can't have exactly what I want. However, Reid's approach solved it for me.</p>",
        "id": 158460614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550079623
    }
]