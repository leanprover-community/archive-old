[
    {
        "content": "<p>I'm looking at RB trees again. I found a really good implementation in Coq that I am copying over to Lean: <a href=\"https://github.com/coq/coq/blob/a1fc621b943dbf904705dc88ed27c26daf4c5e72/theories/MSets/MSetRBT.v\" target=\"_blank\" title=\"https://github.com/coq/coq/blob/a1fc621b943dbf904705dc88ed27c26daf4c5e72/theories/MSets/MSetRBT.v\">https://github.com/coq/coq/blob/a1fc621b943dbf904705dc88ed27c26daf4c5e72/theories/MSets/MSetRBT.v</a><br>\nHere is the start of my code:<br>\n<a href=\"https://github.com/EdAyers/mathlib/blob/rb/data/rb.lean\" target=\"_blank\" title=\"https://github.com/EdAyers/mathlib/blob/rb/data/rb.lean\">https://github.com/EdAyers/mathlib/blob/rb/data/rb.lean</a><br>\nMy problem is that it can't prove that my definition of <code>append</code> is terminating automatically. Is there a quick fix for this kind of thing or am I going to have to use well_founded.fix? I can't figure out how to use the <code>using_well_founded</code> keyword.</p>",
        "id": 132934326,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535481287
    },
    {
        "content": "<p>Did you look at the docs at <a href=\"https://github.com/EdAyers/mathlib/blob/rb/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/EdAyers/mathlib/blob/rb/docs/extras/well_founded_recursion.md\">https://github.com/EdAyers/mathlib/blob/rb/docs/extras/well_founded_recursion.md</a> ?</p>",
        "id": 132934439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535481411
    },
    {
        "content": "<p>Ah thanks I haven't read that one yet</p>",
        "id": 132934463,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535481440
    },
    {
        "content": "<p>I'm not saying it solves your problem, but it does have a bunch of cool tricks.</p>",
        "id": 132934551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535481531
    },
    {
        "content": "<p>One of the things it can't show is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">α</span> <span class=\"n\">lr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">α</span> <span class=\"n\">ll</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">α</span> <span class=\"n\">lr</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is there a tactic that will solve that instantaneously?</p>",
        "id": 132934673,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535481667
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-nursery/blob/master/src/tactic/monotonicity/interactive.lean#L571-L595\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nursery/blob/master/src/tactic/monotonicity/interactive.lean#L571-L595\">https://github.com/leanprover-community/mathlib-nursery/blob/master/src/tactic/monotonicity/interactive.lean#L571-L595</a> presumably</p>",
        "id": 132940133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535482301
    },
    {
        "content": "<p>not yet in mathlib, but you can temporarily add a dependency to this repo</p>",
        "id": 132940151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535482323
    },
    {
        "content": "<p>What's the problem with corelib rbtrees?</p>",
        "id": 132940196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535482368
    },
    {
        "content": "<p>Corelib rbtrees don't have <code>erase</code></p>",
        "id": 132940302,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535482492
    },
    {
        "content": "<p>And there are no proofs about them.</p>",
        "id": 132940317,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535482511
    },
    {
        "content": "<p>oh</p>",
        "id": 132940341,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535482550
    },
    {
        "content": "<p>I fixed this by adding my own has_well_founded instance</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">custom_wf</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded</span> <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">tr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">tr</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 132941632,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535483994
    },
    {
        "content": "<p>Before it was using wf using lexical ordering which was throwing it.</p>",
        "id": 132941692,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535484025
    },
    {
        "content": "<p>at least I think that's why</p>",
        "id": 132941711,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535484045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> The proofs are here <a href=\"https://github.com/leanprover/lean/tree/master/library/data/rbtree\" target=\"_blank\" title=\"https://github.com/leanprover/lean/tree/master/library/data/rbtree\">https://github.com/leanprover/lean/tree/master/library/data/rbtree</a></p>",
        "id": 132952390,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1535490463
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 132953705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535491952
    },
    {
        "content": "<p>thanks Leo! sorry I didn't spot them.</p>",
        "id": 132953908,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535492168
    },
    {
        "content": "<p>I am trying to define a function using the equation compiler, but I don't understand how one is supposed to use <code>using_well_founded</code>. Here is a minimal example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_top</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">well_founded_lt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n<span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>This fails with the message</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">assumption</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span>\n</pre></div>",
        "id": 163673121,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1555609278
    },
    {
        "content": "<p>Can you remove the <code>by</code>? You can do the same without it</p>",
        "id": 163673410,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555609445
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_top</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">well_founded_lt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n<span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>fails in the same way.</p>",
        "id": 163673533,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1555609555
    },
    {
        "content": "<p>You have to use the term mode <code>have</code></p>",
        "id": 163673628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555609593
    },
    {
        "content": "<p>oh but the second one also fails?</p>",
        "id": 163673656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555609618
    },
    {
        "content": "<p>oh, of course <code>assumption</code> fails here, you didn't give the right decreasing proof</p>",
        "id": 163673793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555609709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_top</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">P</span> <span class=\"n\">n</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">well_founded_lt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n<span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 163673878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555609792
    },
    {
        "content": "<p>Thanks a lot. The problem is that <code>assumption</code> will not apply the parameter <code>n</code> to what I have proved previously, it has to be proved in the exact form it needs. Would the following be acceptable style?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">well_founded_lt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_top</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 163674569,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1555610255
    },
    {
        "content": "<p>That looks fine to me. But if for some reason, you wanted to keep your <code>have</code> statement in the original form, you could use <code>apply_assumption</code> as the decision tactic.</p>",
        "id": 163675504,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555610867
    }
]