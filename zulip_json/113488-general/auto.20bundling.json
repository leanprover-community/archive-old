[
    {
        "content": "<p>I'm wondering if we can somehow bridge the gap between bundled and unbundled classes. Let's take <code>Top</code> as an example. If I have <code>X : Top</code>, and I want to apply a lemma from the library to <code>X</code>, then this will usually work. The lemma is written with assumptions <code>{X : Type*} [topological_space X]</code>, and Lean can figure out how to fill them in. It has a <code>coe_to_sort</code> that turns <code>X</code> into a type, and a type class search will figure out the <code>topological_space</code> instance.<br>\nThe other direction is currently not so easy. If we have and <code>X : Type*</code> and an instance <code>[topological_space X]</code> it is not so user-friendly to apply a lemma that assumes a <code>Top</code> (for example a generic lemma from the category library). One has to manually bundle everything up using <code>\\&lt; X, by apply_instance \\&gt;</code>. I would like to be able to just write <code>ðŸ—ƒ X</code> and move on. This becomes especially nice if the bundling takes more than one instance (for example topological groups). The <code>ðŸ—ƒ</code> would flag to Lean that it should first infer the expected type of the argument. The user \"promises\" that this type is a structure that contains exactly one data field. In this field Lean should plug <code>X</code>. All the other fields will be <code>Prop</code>s, and Lean should figure them out using <code>apply_instance</code>.<br>\nI have no idea whether this proposal makes any sense. I fear that it is impossible to implement this in Lean 3.4.2. I hope it will be possible in some future version of Lean...</p>",
        "id": 166337332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594516
    },
    {
        "content": "<p>It's not that hard to build a <code>Top</code>. You can just write <code>Top.of X</code>, and typeclass resolution finds the instance.</p>",
        "id": 166337392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558594582
    },
    {
        "content": "<p>I still think that we are drifting away from the beautiful and concise notation that we have in regular maths</p>",
        "id": 166337412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594631
    },
    {
        "content": "<p>I would like to stay as close as possible to that notation. Inserting a single crazy symbol (an arrow, or an emoji) that is the same for every category, seems to get closer to that ideal than having <code>foo_bar.of</code> for every category.</p>",
        "id": 166337494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594710
    },
    {
        "content": "<p>I would like to have a <code>has_of</code> class.</p>",
        "id": 166337498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594725
    },
    {
        "content": "<p>But that seems to be impossible with current tech.</p>",
        "id": 166337500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594737
    },
    {
        "content": "<p>Multiple typeclasses are not a problem:</p>\n<div class=\"codehilite\"><pre><span></span>noncomputable example : TopCommRing := TopCommRing.of â„‚\n</pre></div>",
        "id": 166337501,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558594737
    },
    {
        "content": "<p>Please don't replace useful words with emoji</p>",
        "id": 166337516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594763
    },
    {
        "content": "<blockquote>\n<p>Please don't replace useful words with emoji</p>\n</blockquote>\n<p>Why do you replace <code>coe</code> with an arrow?</p>",
        "id": 166337520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594782
    },
    {
        "content": "<p>I find myself peering closely at <span aria-label=\"archive\" class=\"emoji emoji-1f5c3\" role=\"img\" title=\"archive\">:archive:</span> trying to figure out what it is</p>",
        "id": 166337531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594798
    },
    {
        "content": "<p>Oh</p>",
        "id": 166337533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594800
    },
    {
        "content": "<p>Or <code>int.add</code> with <code>+</code>?</p>",
        "id": 166337550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594802
    },
    {
        "content": "<p>Coe is supposed to be invisible, but when you need to know it's there it's best to have a minimally invasive symbol</p>",
        "id": 166337637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594884
    },
    {
        "content": "<p>That</p>",
        "id": 166337639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594895
    },
    {
        "content": "<p><code>+</code> is not even a reasonable example</p>",
        "id": 166337643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594899
    },
    {
        "content": "<p>That is exactly how I want autobundling to behave</p>",
        "id": 166337648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594906
    },
    {
        "content": "<p>It should be invisible</p>",
        "id": 166337650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594910
    },
    {
        "content": "<p>It should be coe</p>",
        "id": 166337717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594969
    },
    {
        "content": "<p>It can't be</p>",
        "id": 166337722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558594977
    },
    {
        "content": "<p>that's lean's fault</p>",
        "id": 166337729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594984
    },
    {
        "content": "<p>the solution is not more crazy notation</p>",
        "id": 166337738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594995
    },
    {
        "content": "<p>Can we fix this in Lean 3.4.2 with crazy notation?</p>",
        "id": 166337752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558595012
    },
    {
        "content": "<p>not generically</p>",
        "id": 166337758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558595026
    },
    {
        "content": "<p>Can we <em>easily</em> fix this in Lean 3.5c without crazy notation?</p>",
        "id": 166337766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558595032
    },
    {
        "content": "<p>it's not on the todo list</p>",
        "id": 166337815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558595044
    },
    {
        "content": "<p>changing how coe works would I think be worthwhile but would also change a lot of stuff</p>",
        "id": 166337834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558595075
    },
    {
        "content": "<p>I want to be able to have <code>(R : Top) [comm_ring R] [topological_ring R]</code> and then write <code>(R : TopCommRing)</code>, and Lean should just be able to figure out what I mean.</p>",
        "id": 166337836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558595083
    },
    {
        "content": "<p>I know</p>",
        "id": 166337840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558595090
    },
    {
        "content": "<p>Is it reasonable to expect that this will become better in Lean 4?</p>",
        "id": 166337850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558595103
    },
    {
        "content": "<p>I don't think it's changed but I could be wrong</p>",
        "id": 166337862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558595120
    },
    {
        "content": "<p>Because I think that bundling-unbundling and transfer are the two biggest hurdles to making Lean usable for advanced math</p>",
        "id": 166337870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558595135
    },
    {
        "content": "<p>It doesn't sound like it's so hard currently</p>",
        "id": 166337930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558595193
    },
    {
        "content": "<p>Replying to the original message in this thread: In my experience (which might depend on the subject domain), it's not actually that frequent that one needs to go in the bundling direction if the library is structured to work with bundled objects in general. (I mean your own constructions/lemmas should take as input a bundled <code>(X : Top)</code>.) Basically you need to bundle once per primitive object (e.g., the reals) or construction (e.g., product space or subspace with the induced topology) and then you're set. In contrast, the other direction (coercing <code>Top</code> to <code>Type*</code>) gets used all over the place.<br>\n<a href=\"https://github.com/rwbarton/lean-homotopy-theory/search?q=mk_ob&amp;unscoped_q=mk_ob\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory/search?q=mk_ob&amp;unscoped_q=mk_ob\">https://github.com/rwbarton/lean-homotopy-theory/search?q=mk_ob&amp;unscoped_q=mk_ob</a> should give some sense of what I mean</p>",
        "id": 166367479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558622781
    }
]