[
    {
        "content": "<p>What's the best way of getting something a bit like this to work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 154192394,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546454602
    },
    {
        "content": "<p>I guess it would it be better for <code>α</code> to be an expression representing a type, instead of a type?</p>",
        "id": 154193433,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546455589
    },
    {
        "content": "<p>Do you really want an <code>expr</code> or would a <code>tactic expr</code> be good enough?</p>",
        "id": 154193848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546455907
    },
    {
        "content": "<p>That's generally the right move, yes. There are ways to make something like this work with alpha being a type using <code>reflected</code> instances. Along the lines of </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_def</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">reflected</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">reflected</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"err\">%%</span><span class=\"n\">h3</span> <span class=\"err\">%%</span><span class=\"n\">h2</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But that's weird. What application do you have in mind?</p>",
        "id": 154193945,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546455981
    },
    {
        "content": "<p><code>tactic expr</code> is good enough.</p>",
        "id": 154193947,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546455981
    },
    {
        "content": "<p><code>tactic.to_expr ```((1 : α))</code> should work then</p>",
        "id": 154194059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546456098
    },
    {
        "content": "<p>For <code>tactic expr</code> and taking alpha as an <code>expr</code>, it's easy.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_def&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>If the check for a group instance is important, it's easy to add.</p>",
        "id": 154194062,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546456105
    },
    {
        "content": "<p>It's difficult to be more precise without more context</p>",
        "id": 154194098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546456165
    },
    {
        "content": "<p>The context is, and I think I might be going about this the wrong way, is that I have a function that computes the conjugacy classes of a finite group as a <code>finset (finset G)</code>. It's too slow for the kernel, but fast enough for the VM. I want to compute this in the VM, and then verify it does indeed return the conjugacy classes in the kernel. Do I have to go via <code>expr</code> for this?</p>",
        "id": 154194913,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546456983
    },
    {
        "content": "<p>how do you intend to verify the result?</p>",
        "id": 154195434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546457450
    },
    {
        "content": "<p>Some decidable instance.</p>",
        "id": 154195453,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546457476
    },
    {
        "content": "<p>Though I'm not at all sure this is a good approach.</p>",
        "id": 154195475,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546457510
    },
    {
        "content": "<p>no, I mean what's the method you use to check that the result is correct, which is not the same as just calculating the classes?</p>",
        "id": 154195541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546457552
    },
    {
        "content": "<p>how does that decidable instance work</p>",
        "id": 154195557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546457567
    },
    {
        "content": "<p>is it fast enough?</p>",
        "id": 154195567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546457580
    },
    {
        "content": "<p>I haven't written it yet. It probably won't be that much faster than computing it from scratch.</p>",
        "id": 154195595,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546457609
    },
    {
        "content": "<p>I'm trying to prove A5 is simple by the way, and there's a proof that says look at the cardinalities of the conjugacy classes.</p>",
        "id": 154195663,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546457664
    },
    {
        "content": "<p>so you only need the cardinalities, not the classes</p>",
        "id": 154195684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546457700
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 154195695,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546457707
    },
    {
        "content": "<p>But I guess it's hard to verify the cardinalities without verifying the elements.</p>",
        "id": 154195722,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546457734
    },
    {
        "content": "<p>what are you looking for in the cardinalities? Do you really need to calculate all of them or can you use a symmetry argument for the rest?</p>",
        "id": 154195789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546457776
    },
    {
        "content": "<p>I like to think of these kinds of problems as if I am a human mathematician who doesn't want to do too much calculation; theorem provers generally prefer those kinds of proofs, as opposed to the blasty proofs that make them sweat</p>",
        "id": 154195899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546457895
    },
    {
        "content": "<p>The cardinalities are <code>{1, 12, 12, 15, 20}</code>. I was hoping to do a blasty proof that meant I didn't have to think.</p>",
        "id": 154195929,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546457927
    },
    {
        "content": "<p>The non blasty proofs pretty much involve looking at cycle shapes, which is quite a lot of work.</p>",
        "id": 154195966,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546457995
    },
    {
        "content": "<p>isn't there some thing about 3-transpositions generating A5 that helps?</p>",
        "id": 154196031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546458030
    },
    {
        "content": "<p>The version of that I've seen involves casing on the cycle type, and proving that whatever the cycle type of a non trivial element, there is a 3-cycle.</p>",
        "id": 154196170,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546458194
    },
    {
        "content": "<p>You can still split the difference between the blasty stuff and some smarts. For example, you can calculate the order of a subgroup with only a few well chosen elements and non-elements, depending on the group</p>",
        "id": 154196301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546458307
    },
    {
        "content": "<p>So I have to prove <a href=\"/user_uploads/3121/gRIVgvyOkROAJNzRRcZ6Bt96/Screenshot-2019-01-02-at-19.44.58.png\" target=\"_blank\" title=\"Screenshot-2019-01-02-at-19.44.58.png\">Screenshot-2019-01-02-at-19.44.58.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gRIVgvyOkROAJNzRRcZ6Bt96/Screenshot-2019-01-02-at-19.44.58.png\" target=\"_blank\" title=\"Screenshot-2019-01-02-at-19.44.58.png\"><img src=\"/user_uploads/3121/gRIVgvyOkROAJNzRRcZ6Bt96/Screenshot-2019-01-02-at-19.44.58.png\"></a></div>",
        "id": 154196439,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546458458
    },
    {
        "content": "<p>and what is A5 for you?</p>",
        "id": 154196501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546458491
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">alternating</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">sign</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">units</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>with<code>fin 5</code> instead of alpha</p>",
        "id": 154196525,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546458535
    },
    {
        "content": "<p>I guess you can consider the orders of different elements in sigma</p>",
        "id": 154196889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546458872
    },
    {
        "content": "<p>They can't all be 1. If all are 1 or 2 it is (a b)(c d), if there is one with 3 it is (a b c); and if there is one with 5 it is (a b c d e). You have to argue that 4 is not possible, and (a b c) (d e) is not possible</p>",
        "id": 154196997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546458969
    },
    {
        "content": "<p>I think it is important to have some way to talk about cycles for this</p>",
        "id": 154197163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546459156
    },
    {
        "content": "<p>Actually the first step is calculating partitions of 5</p>",
        "id": 154197262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546459246
    },
    {
        "content": "<p>for a given partition you can say if it is even or odd and thus get the list 3+1+1, 2+2+1, 5 for possible cycle decompositions</p>",
        "id": 154197322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546459320
    },
    {
        "content": "<p>(I guess a partition is even if the sum of all the elements of the list decreased by 1 is even, so 3+1+1 sums to 2 so is included, while 3+2 sums to 3 and is excluded)</p>",
        "id": 154197423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546459436
    },
    {
        "content": "<p>Here's one approach to verify the conjugacy classes. For the proof it suffices to prove that every conjugacy class I produce is a subset of a conjugacy class, it doesn't have to be equal. So it suffices to prove conjugacy of one element of each class with every other element, which I can do much more efficiently by  intelligently finding the element, instead of searching. This is getting rather complicated now though.</p>",
        "id": 154198375,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546460456
    },
    {
        "content": "<p>In meta land, can I not just turn any object of any type into an <code>expr</code> really easily?</p>",
        "id": 154198562,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546460654
    },
    {
        "content": "<p>what's the <code>expr</code> for the real number pi?</p>",
        "id": 154198577,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546460696
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pi_expr</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 154198871,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546460809
    },
    {
        "content": "<p>but you only have the object now</p>",
        "id": 154198944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546460889
    },
    {
        "content": "<p>you don't know how it was created</p>",
        "id": 154198949,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546460901
    },
    {
        "content": "<p>Point is there is uncountably many real numbers yet only countably many <code>expr</code></p>",
        "id": 154198961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546460939
    },
    {
        "content": "<p>you can't possibly surject <code>real -&gt; expr</code></p>",
        "id": 154198968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546460948
    },
    {
        "content": "<p>Yeah, but it's meta, so who cares.</p>",
        "id": 154198976,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546460973
    },
    {
        "content": "<p>I won't be able to input those undefinable reals into my function.</p>",
        "id": 154198988,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546460998
    },
    {
        "content": "<p>There are abstract proofs that A_n is simple for all n&gt;=5 but for just A_5 I always tell people to go for the counting proof. Can Lean really not count to 60?</p>",
        "id": 154199141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546461162
    },
    {
        "content": "<p>What's the counting proof. The one I mentioned?</p>",
        "id": 154199174,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546461242
    },
    {
        "content": "<p>Naively computing conjugacy classes is quadratic time I think. Plus there's lots of little inefficiencies in the algorithm that I've written.</p>",
        "id": 154199257,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546461342
    },
    {
        "content": "<p>Naively computing conjugacy classes might be quadratic time, but 60^2 is still a lot less than a million.</p>",
        "id": 154199328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546461419
    },
    {
        "content": "<p>But more than the kernel can handle apparently. You've got to erase duplicates as well, which increases the time quite a bit, so it's worse than quadratic I think.</p>",
        "id": 154199457,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546461502
    },
    {
        "content": "<p>I know something about abstract algorithms, and I know something about maths, but I have no idea how Lean implements abstract algorithms, or stores data types, so I am bewildered as to why all this is even an issue. I am pretty sure that I can write code which does this in gap and terminates very quickly.</p>",
        "id": 154199465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546461507
    },
    {
        "content": "<p>My VM version takes 246ms. But the kernel is unbelievably slow.</p>",
        "id": 154199484,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546461540
    },
    {
        "content": "<p>From the point of view of abstract algorithms, stuff like erasing dupes can just be done with hash tables or whatever.</p>",
        "id": 154199492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546461551
    },
    {
        "content": "<p>Maybe I am imagining what the VM does, not what the kernel does. I still don't really know the difference.</p>",
        "id": 154199502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546461573
    },
    {
        "content": "<p>yeah but when you use hash tables in say PARI/GP you don't need to prove that it works</p>",
        "id": 154199503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546461574
    },
    {
        "content": "<p>right.</p>",
        "id": 154199507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546461582
    },
    {
        "content": "<p>but here the hash is just the list of where [1,2,3,4,5] go and proving that two lists are equal or not is not hard.</p>",
        "id": 154199561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546461616
    },
    {
        "content": "<p>maybe we can store lemmas like 4 != 5 :P</p>",
        "id": 154199606,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546461669
    },
    {
        "content": "<p>I don't think there's any caching in Lean...</p>",
        "id": 154199621,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546461700
    },
    {
        "content": "<p>Imagine how bad it would be if I'd filtered all the functions to prove <code>fintype_perm</code> like some people suggested.</p>",
        "id": 154199887,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546461941
    }
]