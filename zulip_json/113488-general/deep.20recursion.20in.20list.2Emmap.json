[
    {
        "content": "<p>How am I supposed to write a for loop without hitting a deep recursion issue?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">list.iota</span> <span class=\"mi\">10000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n  <span class=\"o\">{</span> <span class=\"n\">io.put_str</span> <span class=\"o\">(</span><span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"{i}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"o\">},</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"k\">#eval</span> <span class=\"n\">main</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">formatter'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288641920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657098195
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/doc-gen/blob/4939ffb50c0e2c92ec804bfee1decdd770092343/export_json.lean#L92-L95\">This comment</a> in doc-gen ran into the same issue:</p>\n<blockquote>\n<p>Using <code>environment.mfold</code> is much cleaner. Unfortunately this led to a segfault, I think because<br>\nof a stack overflow. Converting the environment to a list of declarations and folding over that led<br>\nto \"deep recursion detected\". Instead, we split that list into 8 smaller lists and process them<br>\none by one. More investigation is needed.</p>\n</blockquote>",
        "id": 288643153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657099011
    },
    {
        "content": "<p>This seems to help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A version of `list.map` for `io` that does not consume the whole stack -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list.mmap_io</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">io</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">io.iterate</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"o\">{</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">state</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n    <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">))</span>\n  <span class=\"o\">}),</span>\n  <span class=\"n\">pure</span> <span class=\"n\">bs</span>\n</code></pre></div>\n<p>Unfortunately I'm not allowed to <code>@[vm_override]</code> that</p>",
        "id": 288646211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657100986
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mmap'\">docs#list.mmap'</a> works</p>",
        "id": 288660622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657109712
    },
    {
        "content": "<p>Not for n = 100000 it doesn't</p>",
        "id": 288661343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657110048
    },
    {
        "content": "<p>I would not try to process that big a list then</p>",
        "id": 288661593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657110183
    },
    {
        "content": "<p>Yes, this is a very well-known issue in Lean 3. I also hit it badly with LeanCrawler.</p>",
        "id": 288661727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657110249
    },
    {
        "content": "<p>Is there a github issue or prior zulip thread that comes to mind?</p>",
        "id": 288668251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657113438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/deep.20recursion.20in.20list.2Emmap/near/288661593\">said</a>:</p>\n<blockquote>\n<p>I would not try to process that big a list then</p>\n</blockquote>\n<p>such long lists originate from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.get_decls\">docs#environment.get_decls</a></p>\n<p>(the application here was <a href=\"https://github.com/eric-wieser/lean-graded-rings/blob/master/export.lean\">exporting symbol information from a git repo</a> to use as <a href=\"https://github.com/eric-wieser/lean-graded-rings/actions/runs/2622785830\">links in LaTeX</a>)</p>",
        "id": 288668293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657113466
    },
    {
        "content": "<p>Eric, there is probably related info in the thread <a href=\"#narrow/stream/113488-general/topic/random.20io.20output\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/random.20io.20output</a></p>",
        "id": 288689396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657121937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/deep.20recursion.20in.20list.2Emmap/near/288668293\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/deep.20recursion.20in.20list.2Emmap/near/288661593\">said</a>:</p>\n<blockquote>\n<p>I would not try to process that big a list then</p>\n</blockquote>\n<p>such long lists originate from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.get_decls\">docs#environment.get_decls</a></p>\n</blockquote>\n<p>You should not use <code>get_decls</code> if this is an issue. Instead use <code>environment.fold</code> and just do what you need to do on each decl as it goes by without buffering them all into a list</p>",
        "id": 289082519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657429034
    },
    {
        "content": "<p>Doesn't that hit the same problem if I fold over a monad? (I haven't tried)</p>",
        "id": 289084351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657432313
    },
    {
        "content": "<p>No; for example you can call <code>trace</code> on all decls and nothing overflows. Building a list is also something you can do (this is how <code>get_decls</code> works after all), it's just consuming the large list that causes a stack overflow</p>",
        "id": 289084594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657432700
    },
    {
        "content": "<p>Wild, thanks for the tip</p>",
        "id": 289085576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657434431
    },
    {
        "content": "<p>The <code>list.mmap_io</code> definition above did also solve the problem though</p>",
        "id": 289085588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657434458
    },
    {
        "content": "<p>But I guess only in one monad</p>",
        "id": 289085593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657434479
    }
]