[
    {
        "content": "<p>So I've just been experimenting with the <code>-E</code> option of <code>lean</code> and <code>leanchecker</code>, and came across the following error which I do not understand.</p>\n<p>Suppose I am working on a Lean project with the following three files:</p>\n<p><code>Preloaded.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Task 1: no axioms required</span>\n<span class=\"n\">def</span> <span class=\"n\">task_1</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- Task 2: using `simp` introduces `propext`</span>\n<span class=\"n\">def</span> <span class=\"n\">task_2</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Task 3: requires all 3 core axioms</span>\n<span class=\"n\">def</span> <span class=\"n\">task_3</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n\n<span class=\"c1\">-- Task 4: unprovable</span>\n<span class=\"n\">def</span> <span class=\"n\">task_4</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"c1\">-- Boilerplate code for bundling all tasks into one</span>\n<span class=\"n\">def</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"n\">task_1</span> <span class=\"bp\">∧</span> <span class=\"n\">task_2</span> <span class=\"bp\">∧</span> <span class=\"n\">task_3</span> <span class=\"bp\">∧</span> <span class=\"n\">task_4</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">SUBMISSION</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">SUBMISSION</span> <span class=\"c1\">-- to prevent cheating</span>\n</pre></div>\n\n\n<p><code>Solution.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"c1\">-- Task 1: Prove that n + m = n + m</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">immediate</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- Task 2: Prove that n + m = m + n</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">plus_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- Task 3: Prove excluded middle</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">excluded_middle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">em</span>\n\n<span class=\"c1\">-- Task 4: Prove that 1 + 1 = 3</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">one_plus_one_is_three</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- Do NOT modify this section</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">solution</span> <span class=\"o\">:</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span>\n  <span class=\"n\">immediate</span><span class=\"o\">,</span>\n  <span class=\"n\">plus_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">excluded_middle</span><span class=\"o\">,</span>\n  <span class=\"n\">one_plus_one_is_three</span>\n<span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p><code>SolutionTest.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span>\n<span class=\"kn\">import</span> <span class=\"n\">Solution</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">submission</span> <span class=\"o\">:</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"n\">solution</span>\n</pre></div>\n\n\n<p>When I compile the files using <code>lean SolutionTest.lean</code>, I get a few warnings regarding the usage of <code>sorry</code> but nothing more (which I assume is a success). However, if I compile the files using <code>lean SolutionTest.lean -E SolutionTest.out</code>, I get <code>&lt;unknown&gt;:1:1: error: failed to expand macro</code> on top of the warnings about <code>sorry</code>. When I then run <code>leanchecker SolutionTest.out submission</code> to check the axioms used in <code>submission</code>, I get <code>unknown declaration 'submission'</code>.</p>\n<p>Any hints on how to fix this would be much appreciated <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 188435768,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582018555
    },
    {
        "content": "<p>The text export (i.e. <code>lean -E</code>) fails if there are sorrys in the lean file.  This is by design: the export is intended for proof checkers, and sorrys are never valid proofs.  An easy workaround is to change <code>theorem one_plus_one_is_three</code> to <code>axiom one_plus_one_is_three</code>.</p>",
        "id": 188438753,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582021144
    },
    {
        "content": "<blockquote>\n<p>An easy workaround is to change <code>theorem one_plus_one_is_three</code> to <code>axiom one_plus_one_is_three</code>.</p>\n</blockquote>\n<p>I might tell some of my colleagues in the maths department about this trick</p>",
        "id": 188438878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582021278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Experimenting.20with.20leanchecker/near/188438753\" title=\"#narrow/stream/113488-general/topic/Experimenting.20with.20leanchecker/near/188438753\">said</a>:</p>\n<blockquote>\n<p>The text export (i.e. <code>lean -E</code>) fails if there are sorrys in the lean file.  This is by design: the export is intended for proof checkers, and sorrys are never valid proofs.  An easy workaround is to change <code>theorem one_plus_one_is_three</code> to <code>axiom one_plus_one_is_three</code>.</p>\n</blockquote>\n<p>Thanks - I changed it to an axiom and the export + <code>leanchecker</code> worked as intended.</p>",
        "id": 188439242,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582021621
    }
]