[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, I notice that in <code>archive/sensitivity.lean</code> we successfully use a <code>@[derive fintype]</code>. Where is this coming from? I want to use it somewhere else but can't work out what I need to import. I just get a <code>failed to find a derive handler for fintype</code> message.</p>",
        "id": 189729528,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583352326
    },
    {
        "content": "<p>Related <code>derive</code> question... It seems there's a problem if you use <code>@[derive decidable_eq]</code> twice in the same file, and there is a broken work-around in place.</p>",
        "id": 189729935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583352530
    },
    {
        "content": "<p>The problem seems to be disambiguating the <code>decidable_eq</code> in the second <code>@[derive decidable_eq]</code> annotation. Does that mean <code>_root_.decidable_eq</code>, or is it just the instance that was defined a moment ago by the first derive handler? (Which has a name ending in <code>decidable_eq</code>!)</p>",
        "id": 189730034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583352594
    },
    {
        "content": "<p>The error message that shows up is <code>failed to find a derive handler for 'choice decidable_eq category_theory.limits.walking_parallel_pair.decidable_eq'</code></p>",
        "id": 189730088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583352608
    },
    {
        "content": "<p>To find the <code>fintype</code> derive handler, try: <code>run_cmd attribute.get_instances `derive_handler &gt;&gt;= tactic.trace</code></p>",
        "id": 189730095,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583352610
    },
    {
        "content": "<p>And I'm guessing (?) that this <code>choice</code> business is some attempt to work out what we're actually trying to derive, based on what's actually available?</p>",
        "id": 189730141,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583352644
    },
    {
        "content": "<p><code>choice</code> I believe is the Lean macro for name overloading. It defers to the elaborator the choice between the two. But that being said, it's curious that it would affect you there.</p>",
        "id": 189730292,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583352740
    },
    {
        "content": "<p>I think I see the problem. This is the parser for the <code>derive</code> attribute: <code>parser := pexpr_list_or_texpr</code>. It has to parse expressions because you could specify something like <code>module real</code></p>",
        "id": 189730653,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583352983
    },
    {
        "content": "<p>If you give a name to the offending <code>decidable_eq</code> instance, that should go away</p>",
        "id": 189730707,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583353033
    },
    {
        "content": "<p>(a name different from <code>decidable_eq</code></p>",
        "id": 189730730,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583353047
    },
    {
        "content": "<p>which you can't do because it was generated automatically by the derive handler</p>",
        "id": 189730916,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583353169
    },
    {
        "content": "<p>Actually, we may be able to make that code a bit more robust</p>",
        "id": 189730920,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583353173
    },
    {
        "content": "<p>okay... I have a PR I'm looking at that has <code>@[derive _root_.decidable_eq]</code> to get around this problem. Should I allow that for now, or better to wait on some robustification?</p>",
        "id": 189731812,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583353749
    },
    {
        "content": "<p>I think you should keep that PR. The change would go in Lean itself</p>",
        "id": 189732236,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583354087
    },
    {
        "content": "<p>There are two ways to fix your particular issue. Either we generate a different name for the instance or we tolerate ambiguities in the name of the classes that we're trying to build an instance for</p>",
        "id": 189733049,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583354731
    },
    {
        "content": "<p>The solution for both is very simple. I'm not sure about the ramifications though</p>",
        "id": 189733224,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583354839
    },
    {
        "content": "<p>Note that the <code>delta_instance</code> handler (which just unfolds a definition and calls <code>apply_instance</code>) appends something to the name for exactly this reason. <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L1511\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L1511\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L1511</a></p>",
        "id": 189733343,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583354920
    },
    {
        "content": "<p>If you use it twice in a row and that it generates an instance for the same class, will you have a name clash with that approach?</p>",
        "id": 189733698,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583355161
    },
    {
        "content": "<p>The name is based on the type and the instance it's looking for, and it uses <code>get_unused_decl_name</code>, so no, I hope not.</p>",
        "id": 189733791,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583355237
    },
    {
        "content": "<p>That might be the right approach then. We could move <code>get_unused_decl_name</code> to core for that</p>",
        "id": 189734719,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583355852
    },
    {
        "content": "<p>Huh, I kind of assumed <code>get_unused_decl_name</code> was from core already, guess not.</p>",
        "id": 189734930,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583356005
    },
    {
        "content": "<p>Me too. That means that it shouldn't clash too much with its new neighbors</p>",
        "id": 189735771,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583356596
    },
    {
        "content": "<p>It would be nice if the meta programming interface allowed us to make protected declarations</p>",
        "id": 189736325,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583356931
    },
    {
        "content": "<p>Absolutely, I've wanted that a whole bunch of times.</p>",
        "id": 189736354,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583356960
    },
    {
        "content": "<p>Maybe that's a better solution then</p>",
        "id": 189736403,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583356991
    },
    {
        "content": "<p>making things protected seem to fix the issue</p>",
        "id": 189740048,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583359008
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/138\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/138\">https://github.com/leanprover-community/lean/pull/138</a></p>",
        "id": 189740793,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583359506
    }
]