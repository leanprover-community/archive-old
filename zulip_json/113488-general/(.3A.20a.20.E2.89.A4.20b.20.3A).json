[
    {
        "content": "<p>Smileys in mathlib (<code>src.order.lattice</code>, line 19)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"c1\">-- TODO: this seems crazy, but it also seems to work reasonably well</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">le_antisymm&#39;</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:)</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">le_antisymm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>What's with the <code> (: a ≤ b :)</code>? It's not notation -- what is it?</p>",
        "id": 202888786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593892298
    },
    {
        "content": "<p>According to <code>lean/src/frontends/lean/builtin_exprs.cpp</code>, those brackets delimit a pattern, like what comes in the left-hand-side of a <code>let</code> assignment.  I'm not sure what that means in a type.</p>",
        "id": 202889622,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593893704
    },
    {
        "content": "<p>It's used for the <code>@[ematch]</code> attribute</p>",
        "id": 202889637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593893743
    },
    {
        "content": "<p>I believe the meaning is that if we see <code>a &lt;= b</code> in the context, then we see if we can prove <code>b &lt;= a</code> and add <code>a = b</code> to the context</p>",
        "id": 202889685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593893806
    },
    {
        "content": "<p>aka heuristic instantiation</p>",
        "id": 202889689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593893814
    },
    {
        "content": "<p>Looking through that file, there's <code>@@foo</code> notation for some kind of partial explicit version of <code>foo</code>, but I don't see the pattern for which arguments of <code>@foo</code> are included.  It seems to include type class arguments and some quasi-random assortment of <code>{...}</code> arguments.  Is there any documentation or explanation for partial explicit notation?</p>",
        "id": 202890196,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593894681
    },
    {
        "content": "<p>It is supposed to make higher order arguments explicit</p>",
        "id": 202890209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593894710
    },
    {
        "content": "<p>the main motivation is to get to the motive in recursors like <code>eq.rec</code></p>",
        "id": 202890253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593894741
    },
    {
        "content": "<p>A very short comment:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"k\">enum</span> <span class=\"k\">class</span> <span class=\"nc\">arg_mask</span> <span class=\"p\">{</span>\n        <span class=\"n\">AllExplicit</span> <span class=\"cm\">/* @ annotation */</span><span class=\"p\">,</span>\n        <span class=\"n\">InstHoExplicit</span><span class=\"p\">,</span> <span class=\"cm\">/* @@ annotation (i.e., instance implicit and higher-order arguments are explicit  */</span>\n        <span class=\"n\">Default</span> <span class=\"cm\">/* default behavior */</span>\n    <span class=\"p\">};</span>\n</code></pre></div>",
        "id": 202890281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593894809
    },
    {
        "content": "<p>I'm not too familiar with the terminology (other than the \"motive is not type correct\" error).  So, to check, <code>C</code> in the following is the motive?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a_1</span>\n</code></pre></div>\n\n\n<p>And \"higher-order\" refers to it being an argument of a higher sort than the rest? (Sort of like first-order vs second-order logic?)</p>",
        "id": 202890390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593894989
    },
    {
        "content": "<p>yes</p>",
        "id": 202890392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593895001
    },
    {
        "content": "<p>the higher order is because it is matched using a limited kind of higher order unification</p>",
        "id": 202890398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593895025
    },
    {
        "content": "<p>A first order match of <code>C a_1</code> against a goal like <code>a = b</code> would set <code>a_1 := b</code> and <code>C := (=) a</code> which is not usually what we want</p>",
        "id": 202890445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593895091
    },
    {
        "content": "<p>A higher order match will find instances of <code>a_1</code> in the goal, replace them with a variable <code>x</code>, and then set <code>C := \\lam x, ...</code></p>",
        "id": 202890457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593895130
    },
    {
        "content": "<p>for example if the goal is <code>a = a</code> then first order matching <code>?C a</code> against it yields <code>?C := eq a</code>, and higher order matching yields <code>?C := \\lam x, x = x</code></p>",
        "id": 202890523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593895211
    },
    {
        "content": "<p>Oh, I see, higher order in the sense that it's a function that's being unified (with appropriate generalization)</p>",
        "id": 202890541,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593895289
    },
    {
        "content": "<p>In fact, full higher order matching yields other solutions as well, like <code>?C := \\lam x, x = a</code>. Lean 2 used to do backtracking on all these but it was too slow and unpredictable so higher order matching is now only used in a very limited way in recursors</p>",
        "id": 202890542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593895290
    },
    {
        "content": "<p>The <code>@[elab_as_eliminator]</code> attribute is a hint to lean to use higher order matching</p>",
        "id": 202890588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593895351
    },
    {
        "content": "<p>Is there any documentation on <code>ematch</code>?</p>",
        "id": 233228030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617656273
    }
]