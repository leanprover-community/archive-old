[
    {
        "content": "<p>I am struggling to get my own tactics going, and would appreciate a hint as to where to look (as in \"documentation\") or how to fix the following attempt at implementing a tactic which takes <code>a : α</code> and simply fulfills the goal <code>α × α</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">diag_tactic</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">diag_tactic</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 256728247,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633694096
    },
    {
        "content": "<p>Have you seen <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a> ?</p>",
        "id": 256728503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633694237
    },
    {
        "content": "<p>Yes, but I am unable to fix my broken example above by looking at that document. For starters, should <code>diag_tactic</code> have type <code>tactic unit</code>, by any chance?</p>",
        "id": 256729009,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633694481
    },
    {
        "content": "<p>yes</p>",
        "id": 256729293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633694629
    },
    {
        "content": "<p>Interactive tactics have type <code>tactic unit</code>. Type <code>tactic stuff</code> is useful as intermediate tools where you want to create some <code>stuff</code> during a tactic by accessing the current tactic state (and allowing failure)</p>",
        "id": 256729447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633694693
    },
    {
        "content": "<p>Iow the current goal (or list of goals) is ambient in the monadic state. I've found that the best documentation is looking through all the primitives in <code>init/meta/tactic.lean</code>.</p>",
        "id": 256729629,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1633694781
    },
    {
        "content": "<p><code>exact</code> is what you're looking for here.</p>",
        "id": 256729734,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1633694847
    },
    {
        "content": "<p>How do I say that the argument of a tactic is an expressions? For instance, if  the argument is an identifier, then I say <code>(h : parse ident)</code>, as far as I can tell, but what if it is supposed to be any expression?</p>",
        "id": 256731252,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633695730
    },
    {
        "content": "<p><code>(e : expr)</code>?</p>",
        "id": 256731307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633695768
    },
    {
        "content": "<p>Sorry, wrong question. How do I tell Lean to <em>parse</em> the argument to an expression. Consider the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">my_tactic</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">tactic.exact</span> <span class=\"n\">e</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">my_tactic</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It is of course crazy that we would have to quote the expression when we use <code>diag_tactic</code>. I want to reverse the process, so that I can write <code>diag_tactic (5,5)</code> and the tactic then parses <code>(5,5)</code> into an expression. (Or if I am doing it all wrong and there is a better way to achieve what I am trying to do, please tell me.)</p>",
        "id": 256731475,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633695871
    },
    {
        "content": "<p>This is explained in the document Johan linked to: <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html#parsing-locations-and-expressions\">https://leanprover-community.github.io/extras/tactic_writing.html#parsing-locations-and-expressions</a></p>",
        "id": 256731707,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633695993
    },
    {
        "content": "<p>You can also take a look at the implementation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.exact\">docs#tactic.interactive.exact</a>.</p>",
        "id": 256733148,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633696794
    },
    {
        "content": "<p>Here is a short example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.my_tactic</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">my_tactic</span> <span class=\"mi\">5</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- (5, 5)</span>\n</code></pre></div>",
        "id": 256733198,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633696803
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> , that's exactly what was eluding me!</p>",
        "id": 256734494,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633697475
    },
    {
        "content": "<p>Ugh, why is <code>tactic p</code> not allowed when <code>p : Prop</code>? What if I want a tactic that returns a proof of equality?</p>",
        "id": 256738454,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633699291
    },
    {
        "content": "<p>You almost certainly want it to return that proof as an <code>expr</code>, not a <code>Prop</code>.</p>",
        "id": 256738777,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633699444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/113488-general/topic/Writing.20basic.20tactics/near/256728247\">said</a>:</p>\n<blockquote>\n<p>I am struggling to get my own tactics going, and would appreciate a hint as to where to look (as in \"documentation\") or how to fix the following attempt at implementing a tactic which takes <code>a : α</code> and simply fulfills the goal <code>α × α</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">diag_tactic</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">diag_tactic</span> <span class=\"mi\">5</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I know you got this sorted out, but let me use it as an example, since it shows a common misconception: your interactive tactic isn't supposed to produce data that solves the goal. It's a function from tactic state to tactic state, and it's supposed to provide an expression whose type matches the type of the initial goal. So (as you figured out) you use the <code>exact</code> tactic to close this goal. And as you also saw (hidden in some notation), you gave <code>exact</code> an <code>expr</code>, not a pair of natural numbers.</p>",
        "id": 256739372,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633699732
    },
    {
        "content": "<p>Same thing with proof producing tactics. It doesn't really make sense for a tactic to compute a proof of <code>P : Prop</code>. Rather, if you have an <code>expr</code> <code>P</code>, whose type is <code>Prop</code>, you want to compute an <code>expr</code> <code>e</code> whose type is represented by the expr <code>P</code>.</p>",
        "id": 256739752,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633699901
    },
    {
        "content": "<p>Thanks! I've lived in the LCF-proof-assistant land for too long, where tactics actually return judgements.</p>",
        "id": 256740372,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633700183
    },
    {
        "content": "<p>If I may bother you a little more. Suppose, for the sake of example, that I would like to have a tactic which takes in expressions  <code>a</code> and <code>b</code> and attempts to use the <code>refl</code> tactic to prove <code>a = b</code>. (In a realistic example I wouldn't use <code>refl</code> but something complicated). Am I correct to think that I start like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">by_refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span>  <span class=\"k\">do</span> <span class=\"n\">something</span>\n</code></pre></div>",
        "id": 256740828,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633700377
    },
    {
        "content": "<p>Almost. <code>pexpr</code> (and <code>texpr</code>, same thing) are unelaborated. Basically think of them as input level syntax. You want to return a full proof term, so the type should be <code>tactic expr</code>.</p>",
        "id": 256741488,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633700671
    },
    {
        "content": "<p>And somehow I need to create a subgoal for <code>refl</code> to work on (hmmm, how?) because all of this is stateful and side-effecting.</p>",
        "id": 256741610,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633700729
    },
    {
        "content": "<p>Yup, that was what I was about to write <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> some tactics will return the terms they create, but things like <code>refl</code> which are meant to be used interactively operate on the goal state.</p>",
        "id": 256741849,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633700837
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">by_refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">solve_aux</span> <span class=\"n\">tgt</span> <span class=\"o\">(</span><span class=\"n\">tactic.reflexivity</span><span class=\"o\">),</span>\n<span class=\"n\">return</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 256741866,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633700846
    },
    {
        "content": "<p>There are various ways to do this, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.solve_aux\">docs#tactic.solve_aux</a> is my go-to</p>",
        "id": 256741981,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633700893
    },
    {
        "content": "<p>Thank you again! I think I was just trying to invent <code>solve_aux</code>, glad to see it's there already.</p>",
        "id": 256742088,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633700948
    },
    {
        "content": "<p><code>tactic.reflexivity</code> is what the interactive tactic <code>refl</code> does under the hood, but if you really explicitly wanted to use the interactive one, you could replace that with <code> `[refl] </code></p>",
        "id": 256742116,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633700960
    },
    {
        "content": "<p>Is <code>meta instance</code> what I think it is? I.e., a tactic that generates instances (but it may also fail)?</p>",
        "id": 256743315,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1633701437
    },
    {
        "content": "<p>No, nothing so fancy. <code>meta instance</code> is the same as <code>instance</code> except the type and body can refer to <code>meta</code> things.</p>",
        "id": 256744246,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633701771
    },
    {
        "content": "<p>You can't write <code>instance t : inhabited expr := ⟨expr.var 0⟩</code> since <code>expr</code> is <code>meta</code>, so this has to be a <code>meta instance</code>.</p>",
        "id": 256744352,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633701816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/113488-general/topic/Writing.20basic.20tactics/near/256743315\">said</a>:</p>\n<blockquote>\n<p>Is <code>meta instance</code> what I think it is? I.e., a tactic that generates instances (but it may also fail)?</p>\n</blockquote>\n<p>It's not <code>meta</code> that means \"tactic\", it's <code>tactic</code> as the return type that does. You can write regular functions with <code>meta</code> too, you just can't prove things about them.</p>",
        "id": 256749129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633703715
    }
]