[
    {
        "content": "<p>What is the canonical solution to:</p>\n<div class=\"codehilite\"><pre><span></span>import data.polynomial\n\nopen polynomial\n\nuniverse u\n\nvariables {α : Type u} [integral_domain α] [decidable_eq α]\n\nexample (n : ℕ) : degree (X^n : polynomial α) = n :=\nbegin\n  simp,\n  -- We&#39;re left with `↑n = ↑n`\n  sorry\nend\n</pre></div>\n\n\n<p>Are we missing some lemmas? Should <code>norm_cast</code> be able to help here (it currently doesn't).</p>",
        "id": 169096020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561598745
    },
    {
        "content": "<p>is it not <code>refl</code>?</p>",
        "id": 169096073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561598798
    },
    {
        "content": "<p>Unfortunately not</p>",
        "id": 169096076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561598809
    },
    {
        "content": "<p>There is clearly a missing lemma. What are the coe instances involved?</p>",
        "id": 169096091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561598832
    },
    {
        "content": "<p>adding the lemma</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma nat.cast_with_bot_cast {α} [add_monoid α] [has_one α] : ∀ n : ℕ,\n  (n : with_bot α) = (n : α)\n| 0 := rfl\n| (n+1) := by simp [nat.cast_with_bot_cast n]\n\nexample (n : ℕ) : degree (X^n : polynomial α) = n :=\nby simp\n</pre></div>\n\n\n<p>works</p>",
        "id": 169096094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561598847
    },
    {
        "content": "<p>But they don't feel like the right lemmas!</p>",
        "id": 169096099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561598861
    },
    {
        "content": "<p>That looks right to me... I recall Johan mentioning this lemma</p>",
        "id": 169096144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561598883
    },
    {
        "content": "<p><del>Oh, actually the second one isn't necessary.</del> (removed it)</p>",
        "id": 169096149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561598898
    },
    {
        "content": "<p>I'm not sure about the direction of the simp though. Isn't the RHS two up arrows?</p>",
        "id": 169096170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561598974
    },
    {
        "content": "<p>Can it be generalised in some useful way?</p>",
        "id": 169096171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561598974
    },
    {
        "content": "<p>that looks already maximally generalized</p>",
        "id": 169096179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561598992
    },
    {
        "content": "<p>Okay. If I reverse the direction of the simp lemma, it no longer fixes my problem.</p>",
        "id": 169096231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561599025
    },
    {
        "content": "<p>Eh, I guess it's fine the way you wrote it... There are more coes but they are simpler</p>",
        "id": 169096271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561599105
    },
    {
        "content": "<p>and more likely to trigger with other stuff</p>",
        "id": 169096316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561599142
    },
    {
        "content": "<p>Okay. And this belongs in <code>src/order/bounded_lattice.lean</code>, right after the coercion is introduced?</p>",
        "id": 169096346,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561599206
    },
    {
        "content": "<p>is nat.cast in scope there?</p>",
        "id": 169096352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561599231
    },
    {
        "content": "<p>no...</p>",
        "id": 169096396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561599253
    },
    {
        "content": "<p>what about the other way around, putting it in <code>data.nat.cast</code></p>",
        "id": 169096418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561599307
    },
    {
        "content": "<p>Seems to work.</p>",
        "id": 169096477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561599370
    },
    {
        "content": "<p>am I meant to mark this with <code>squash_cast</code>?</p>",
        "id": 169096479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561599385
    },
    {
        "content": "<p>even though it's actually unsquashing a cast? :-)</p>",
        "id": 169096483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561599396
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1155\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1155\">#1155</a></p>",
        "id": 169096688,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561599720
    },
    {
        "content": "<p>(Going through abandoned pieces of students' work salvaging useful bits. :-)</p>",
        "id": 169096742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561599752
    },
    {
        "content": "<p>I remember having talked about this before...</p>",
        "id": 169115451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561625567
    },
    {
        "content": "<p>link or it didn't happen</p>",
        "id": 169115637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561625718
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/simp.20tactic.20fails.20resulting.20in.20weird.20coercions\" title=\"#narrow/stream/113488-general/topic/simp.20tactic.20fails.20resulting.20in.20weird.20coercions\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/simp.20tactic.20fails.20resulting.20in.20weird.20coercions</a></p>",
        "id": 169115895,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561625978
    },
    {
        "content": "<p>Thanks</p>",
        "id": 169116184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561626239
    },
    {
        "content": "<p>Thanks Kenny, I've switched over to using your faster proof.</p>",
        "id": 169121212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561630568
    },
    {
        "content": "<p>did you and Mario come up with the exact same lemma and proof across 4 months :o</p>",
        "id": 169121479,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561630828
    },
    {
        "content": "<p>that's when you know it's a good interface</p>",
        "id": 169123390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561632724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> someone verified your canonical criterion!</p>",
        "id": 169123576,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561632919
    },
    {
        "content": "<p>Yeah, that's a proof that it's the canonical interface.</p>",
        "id": 169128062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561637249
    },
    {
        "content": "<p>No, I found that in a student's old repo that I was looking at for other reasons; I suspect he got it from Mario to begin with.</p>",
        "id": 169128504,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561637617
    },
    {
        "content": "<p>:-)</p>",
        "id": 169128511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561637628
    }
]