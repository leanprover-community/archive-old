[
    {
        "content": "<p>This works if I comment out the first, unneeded import.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"c1\">-- set_option trace.class_instances true</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hH</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"c1\">-- maximum class-instance resolution depth has been reached ...</span>\n</pre></div>",
        "id": 172337236,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564775295
    },
    {
        "content": "<p>Anyone know what's going on? Or is there a better way to state the hypothesis?</p>",
        "id": 172337269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564775317
    },
    {
        "content": "<p>Is it <code>decidable_mem_of_fintype</code> and <code>subtype.fintype</code> cycling? That's a guess without Lean in front of me.</p>",
        "id": 172337645,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564775645
    },
    {
        "content": "<p>Yeah it looks like it</p>",
        "id": 172337680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564775698
    },
    {
        "content": "<p>At least, <code>decidable_mem_of_fintype</code> is definitely involved</p>",
        "id": 172337780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564775779
    },
    {
        "content": "<p>Can I locally make it not an instance?</p>",
        "id": 172337831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564775831
    },
    {
        "content": "<p>Well I locally gave it priority 0 and that seems to have fixed it</p>",
        "id": 172337855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564775867
    },
    {
        "content": "<p>As of recent, we have a new <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite\">docs#finite</a> typeclass, meant to be a version of <code>fintype</code> without computability. So I'm wondering, shouldn't we move the existing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card\">docs#fintype.card</a> to <code>finite.card</code>, or at least create that alternate definition?</p>",
        "id": 288985024,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657309538
    },
    {
        "content": "<p>We have many theorems relating <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card\">docs#fintype.card</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.mk\">docs#cardinal.mk</a>, and the cardinal API is already overwhelmingly noncomputable, so doing the same for the finite portion of the API would be nice..</p>",
        "id": 288985191,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657309642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I suppose you've thought about this?</p>",
        "id": 288985270,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657309683
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card\">docs#nat.card</a>, which is better than a <code>finite.card</code> since it doesn't need a typeclass argument so has no dependent type issues.</p>",
        "id": 288987465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657310987
    },
    {
        "content": "<p>I think it would be nice to change <code>nat.card</code> to be defined directly in terms of the existence of a <code>finite</code> instance, since that way it can be defined on <code>Sort</code> and would have fewer dependencies (no need for cardinals)</p>",
        "id": 288987722,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657311133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/fintype.2Ecard/near/288985024\">said</a>:</p>\n<blockquote>\n<p>shouldn't we move the existing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card\">docs#fintype.card</a> to <code>finite.card</code></p>\n</blockquote>\n<p>There's still use for <code>fintype.card</code> -- it's the way to actually compute a cardinality, if that's something you want to do.</p>",
        "id": 288987828,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657311201
    },
    {
        "content": "<p>Wait, there's two different suggestions here: use <code>nat.card</code> which doesn't have a typeclass argument, and redefine <code>nat.card</code> so that it has <code>finite</code> as a typeclass argument. What's the play then?</p>",
        "id": 289000522,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657319269
    },
    {
        "content": "<p>I would rather prefer the latter approach. First because <code>finite</code> is a <code>Prop</code>, which means we seldom have dependent type issues to begin with, and second because I can't personally see much use in the junk values of <code>nat.card</code>.</p>",
        "id": 289000639,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657319359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> Are you referring to my \"I think it would be nice\" comment? I mean use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card_eq\">docs#nat.card_eq</a> as the definition.</p>",
        "id": 289000723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657319412
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 289000758,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657319436
    },
    {
        "content": "<p>My point stands, I'd rather ditch that in favor of <code>finite.card</code></p>",
        "id": 289000775,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657319448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/fintype.2Ecard/near/289000639\">said</a>:</p>\n<blockquote>\n<p>First because <code>finite</code> is a <code>Prop</code>, which means we seldom have dependent type issues to begin with</p>\n</blockquote>\n<p>Hold on, I'll pull up our last discussion about this</p>",
        "id": 289000792,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657319466
    },
    {
        "content": "<p>Seems annoying to not have theorems like <code>card α = 0 ↔ is_empty α</code></p>",
        "id": 289000798,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657319472
    },
    {
        "content": "<p>If you really insist on not having the <code>finite</code> typeclass argument, then I believe the correct approach is to have an <code>enat</code>-valued function instead</p>",
        "id": 289000973,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657319591
    },
    {
        "content": "<p><a href=\"#narrow/stream/144837-PR-reviews/topic/.2314373.20.60finite.60.20predicate/near/283930474\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2314373.20.60finite.60.20predicate/near/283930474</a></p>",
        "id": 289000985,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657319600
    },
    {
        "content": "<p>The point is that you don't use <code>nat.card</code> unless you know it's finite. So long as you have a <code>finite</code> instance around, you can apply lemmas about <code>nat.card</code> just fine without worrying about junk values. The function itself doesn't need to have the typeclass argument.</p>",
        "id": 289001028,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657319637
    },
    {
        "content": "<p>Ah, I get your point now</p>",
        "id": 289001245,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657319761
    },
    {
        "content": "<p>Then I agree, this is the approach we should be taking</p>",
        "id": 289001300,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657319790
    },
    {
        "content": "<p>BTW, <code>enat.card</code> is a nice function too.</p>",
        "id": 289001306,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657319795
    },
    {
        "content": "<p>(especially once we redefine <code>enat</code> as <code>with_top nat</code> and establish all the relevant instances)</p>",
        "id": 289001336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657319826
    },
    {
        "content": "<p>(It's true that there are some lemmas that take advantage of the fact that <code>0</code> is the junk value, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card_prod\">docs#nat.card_prod</a>, but that's just for convenience to make it easier to apply.)</p>",
        "id": 289001471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657319927
    },
    {
        "content": "<p>We can define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">enat.card</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">enat</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">α</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finite.exists_equiv_fin</span> <span class=\"n\">α</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"k\">else</span> <span class=\"n\">top</span>\n</code></pre></div>",
        "id": 289001503,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657319958
    },
    {
        "content": "<p>I think the plan of action should be to completely redo <code>data/finite/card.lean</code> in terms of a new definition <code>nat.card</code> which depends only on the <code>finite</code> API and not on cardinals, then change the theorems on cardinals that are stated in terms of <code>fintype.card</code> to use <code>nat.card</code></p>",
        "id": 289001593,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657320004
    },
    {
        "content": "<p>And we can also go ahead and define <code>enat.card</code> in this same file, can't hurt</p>",
        "id": 289001613,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657320016
    },
    {
        "content": "<p><code>nat.card α = (enat.card α).to_nat</code></p>",
        "id": 289001633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657320037
    },
    {
        "content": "<p>Oh that's great</p>",
        "id": 289001657,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657320058
    },
    {
        "content": "<p>Where <code>to_nat n = n.untop' 0</code></p>",
        "id": 289001662,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657320063
    },
    {
        "content": "<p>See recently merged <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.untop'\">docs#with_top.untop'</a></p>",
        "id": 289001677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657320075
    },
    {
        "content": "<p>(I don't know if the link works because half of websites don't work for me and many other people in Canada today)</p>",
        "id": 289001749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657320137
    },
    {
        "content": "<p>It does, don't worry</p>",
        "id": 289001788,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657320185
    },
    {
        "content": "<p>Would be nice to have <code>mul</code> defined on <code>enat</code> so that <code>0 * ⊤ = 0</code></p>",
        "id": 289005676,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657323727
    },
    {
        "content": "<p>That way we'd have <code>enat.card (α × β) = enat.card α * enat.card β</code></p>",
        "id": 289005685,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657323744
    },
    {
        "content": "<p>Multiplication on <code>with_top</code> is defined this way.</p>",
        "id": 289017046,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657339321
    },
    {
        "content": "<p>Darn</p>",
        "id": 289017101,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657339333
    },
    {
        "content": "<p>This is the third inconvenience I come across regarding <code>enat</code> while working on this</p>",
        "id": 289017136,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657339351
    },
    {
        "content": "<p>The first was the lack of <code>with_top.unbot'</code> and the second was some very simple missing simp lemmas</p>",
        "id": 289017158,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657339373
    },
    {
        "content": "<p>I think I'm going to do the <code>enat</code> refactor first</p>",
        "id": 289017179,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657339416
    },
    {
        "content": "<p>Nobody planned on doing that just yet, right?</p>",
        "id": 289017181,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657339423
    },
    {
        "content": "<p>Note that some parts of the library use <code>with_top nat</code>, some parts use <code>enat</code>. In particular, there is some theory about <code>with_top nat</code> before <code>enat</code> is defined.</p>",
        "id": 289017278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657339543
    },
    {
        "content": "<p>Are there any reasons for having <code>enat := with_top nat</code> instead of just using <code>with_top nat</code>?</p>",
        "id": 289017377,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657339654
    },
    {
        "content": "<p>This is probably historical. <code>enat</code> is (or was, I've not been paying attention) some weird constructive version of with_top nat which constructively has a different \"topology\" and is much harder to use if you don't understand <code>get_or_else</code> but makes more things computable. Or something.</p>",
        "id": 289025138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657349346
    },
    {
        "content": "<p>It makes <em>other</em> things computable.</p>",
        "id": 289031963,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657359612
    },
    {
        "content": "<p>can someone explain how <code>enat</code> actually works? I'm still very confused about it</p>",
        "id": 289031981,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657359651
    },
    {
        "content": "<p>I don't know whether we should have <code>def</code>s or <code>notation</code>s for things like <code>nnreal</code>, <code>ennreal</code>, <code>enat</code>.</p>",
        "id": 289031988,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657359665
    },
    {
        "content": "<p>Currently, <code>enat = part nat</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat\">docs#enat</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/part\">docs#part</a></p>",
        "id": 289031992,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657359683
    },
    {
        "content": "<p>So, it has two fields <code>dom : Prop</code> and get : dom → nat`.</p>",
        "id": 289032049,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657359747
    },
    {
        "content": "<p>E.g., it can be a pair <code>∃ n, p n</code> and <code>nat.find_min</code>. If <code>p</code> is a decidable predicate, then this is a computable <code>enat</code>.</p>",
        "id": 289032084,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657359813
    },
    {
        "content": "<p>right, but how does this allow different things than <code>with_top nat</code>? Does it allow you to \"defer\" whether something is computable/noncomputable till later?</p>",
        "id": 289032220,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657360028
    },
    {
        "content": "<p>It allows you to not be able to use the equation compiler any more, that's one thing it allows for sure.</p>",
        "id": 289032925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657361120
    },
    {
        "content": "<p>Why is with_top nat not computable?</p>",
        "id": 289039461,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657370391
    },
    {
        "content": "<p><strong>Other</strong> things are computable in <code>with_top nat</code>.</p>",
        "id": 289040261,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657371587
    },
    {
        "content": "<p>In order to create a computable value of type <code>with_top nat</code>, you need to know if it is equal to <code>top</code> or not.</p>",
        "id": 289040327,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657371649
    },
    {
        "content": "<p>In case of <code>part nat</code>, you postpone this decision.</p>",
        "id": 289040341,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657371669
    },
    {
        "content": "<p>So, e.g., if <code>p : nat -&gt; Prop</code> is a decidable predicate, then you can define a computable value <code>find_min p : enat</code>. In order to actually get a value, you'll need to provide a proof of the fact that <code>p n</code> is true for some <code>n</code>.</p>",
        "id": 289040417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657371763
    },
    {
        "content": "<p>What sorts of computability does <code>enat</code> make possible that <code>with_top ℕ</code> does not, and viceversa?</p>",
        "id": 289048728,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657381949
    },
    {
        "content": "<p>And are there any actual circumstances in mathlib where we care about this?</p>",
        "id": 289048736,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657381960
    },
    {
        "content": "<p>The current state of affairs, where we use <code>enat := part ℕ</code> to mean <code>with_top ℕ</code> is clearly undesirable. I see various possible approaches:</p>\n<ul>\n<li>make <code>enat := with_top ℕ</code>, use it instead of <code>with_top ℕ</code></li>\n<li>ditch <code>enat</code> entirely in favor of <code>with_top ℕ</code></li>\n<li>use <code>with_top ℕ</code> everywhere unless whatever computability <code>enat</code> provides  is a concern, in which case we use <code>enat</code></li>\n</ul>",
        "id": 289048856,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657382108
    },
    {
        "content": "<p>The first two solutions are undesirable if there's any circumstances where we actually care about the computability <code>enat</code> provides. The third one is the most conservative but will either leave us with lots of duplicate API, or a still annoyingly limited API for <code>enat</code> (though we wouldn't care much for this anymore).</p>",
        "id": 289048937,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657382197
    },
    {
        "content": "<p>Really the choice is about whether constructing enats is usually computable (part) or whether destructing them in the \"obvious\" way is always computable (with_top)</p>",
        "id": 289051843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657386077
    },
    {
        "content": "<p>There's the same choice at play between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_abelian_group\">docs#free_abelian_group</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a> I think (finsupp cheats and makes nothing computable)</p>",
        "id": 289051916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657386141
    },
    {
        "content": "<p><code>free_abelian_group.lift $ pi.single i 1</code> can only extract a coefficient computably if the indices have decidable equality, while <code>free_abelian_group.of</code> doesn't need decidable equality; dfinsupp is the reverse</p>",
        "id": 289052069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657386367
    },
    {
        "content": "<p>Hmm... so maybe the conservative approach is the correct one</p>",
        "id": 289055947,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657391602
    },
    {
        "content": "<p>I think this is one of the arguments against being constructive; it makes classically equivalent constructions non-equivalent, and people who don't care about constructivity will see only downsides to having two ways to spell the \"same\" thing</p>",
        "id": 289063166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657401461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> one point of view which has occasionally helped me in the past is this: constructively all functions are continuous, and these constructions we make in type theory for some reason come with some kind of internal topology which I don't really understand but I think might even be half the point of homotopy type theory. With this viewpoint, if I remember correctly (and I may well not!) then <code>with_top nat</code> is just naturals (discrete) disjoint union infinity (more discrete stuff) whereas I think <code>enat</code> is more like <code>{1/(n+1) : n in nat} union {0}, so it has a different topology to </code>with_top nat` and thus different functions to and from these different topological spaces are continuous.</p>",
        "id": 289063447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657401859
    },
    {
        "content": "<p>I think I might have it the right way around because you can use the equation compiler to define a function on <code>with_top nat</code> which is X for <code>top</code> and Y for everything else, whereas this would not be continuous as a function from {1/(n+1)} union {0}. I think my dislike of <code>with_top nat</code> came precisely because I was using it in a situation where I wanted to precisely define lots of functions of this X Y form above and it was a kerfuffle.</p>",
        "id": 289063524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657401983
    },
    {
        "content": "<p>I see...</p>",
        "id": 289067067,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657406374
    },
    {
        "content": "<p>I do think we should evaluate whether we're doing anything constructive that warrants <code>enat</code> and not <code>with_top nat</code></p>",
        "id": 289067205,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657406526
    },
    {
        "content": "<p>But in the meanwhile, we should port anything that isn't constructive to use <code>with_top nat</code></p>",
        "id": 289067214,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657406538
    },
    {
        "content": "<p>And specify in the <code>enat</code> documentation that unless computability is a concern, you should be using <code>with_top nat</code></p>",
        "id": 289067232,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657406581
    },
    {
        "content": "<p>...is this a good plan of action?</p>",
        "id": 289067246,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657406604
    },
    {
        "content": "<p>I don't think any decision or refactor needs to be done on <code>enat</code> / <code>with_top nat</code> at this time, but the discussed extended <code>nat.card</code> function should have codomain <code>with_top nat</code></p>",
        "id": 289086936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657436561
    },
    {
        "content": "<p>Note that we have <code>ennreal = with_top nnreal</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What do you think about \"rename <code>enat</code>, use <code>enat</code> name for <code>with_top nat</code>\"?</p>",
        "id": 289094820,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657448732
    },
    {
        "content": "<p>Maybe rename <code>enat</code> to <code>part_nat</code>?</p>",
        "id": 289095530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657449673
    },
    {
        "content": "<p><code>part_enat</code>?</p>",
        "id": 289100092,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657455756
    },
    {
        "content": "<p>if it's going to be called <code>part_nat</code>, there's probably no point in the definition? Or does it have additional instances beyond what <code>part nat</code> would have?</p>",
        "id": 289109427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657467253
    },
    {
        "content": "<p>The usual notation for this type is something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span>, not sure if that helps</p>",
        "id": 289109461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657467340
    },
    {
        "content": "<p>How should we name the functions for cardinality returning <code>ℕ</code> and <code>with_top ℕ</code>?</p>",
        "id": 289114932,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657474295
    },
    {
        "content": "<p>Maybe <code>nat.card</code> and <code>nat.card_top</code>?</p>",
        "id": 289114935,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657474300
    },
    {
        "content": "<p>Also, is there any place where we have specialized lemmas for <code>with_top ℕ</code>?</p>",
        "id": 289115119,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657474536
    },
    {
        "content": "<p>My imports must be really weak, since <code>simp</code> isn't being able to prove <code>↑(x + y) = ↑x + ↑y</code></p>",
        "id": 289115170,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657474564
    },
    {
        "content": "<p>Oh wait, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.coe_add\">docs#with_top.coe_add</a></p>",
        "id": 289115361,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657474829
    },
    {
        "content": "<p>Shouldn't this be marked <code>simp</code>?</p>",
        "id": 289115368,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657474834
    },
    {
        "content": "<p>Apparently the answer is \"no\", since doing this change breaks a bunch of proofs in nontrivial ways</p>",
        "id": 289116534,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657476508
    },
    {
        "content": "<p>I guess <code>↑(a + b)</code> is useful in that it's structurally obvious that it's a coercion, while <code>↑a + ↑b</code> doesn't quite have this same feature</p>",
        "id": 289116551,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657476547
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15226\">#15226</a></p>",
        "id": 289117856,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657478477
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.card\">docs#enat.card</a> exists, btw</p>",
        "id": 289117996,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657478671
    },
    {
        "content": "<p>I understand that <code>enat</code> is bad but at least worth linkign</p>",
        "id": 289118001,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657478681
    },
    {
        "content": "<p>I think the solution here is to remove that in this same PR</p>",
        "id": 289118401,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657479278
    },
    {
        "content": "<p><code>nat.card_top</code> now does this but better</p>",
        "id": 289118405,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657479293
    },
    {
        "content": "<p>I'm not a huge fan of changing the API from <code>enat</code> to <code>with_top ℕ</code> whimsically.</p>",
        "id": 289118519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657479480
    },
    {
        "content": "<p>Don't you have theorems to prove, Violeta? :-)</p>",
        "id": 289118565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657479492
    },
    {
        "content": "<p>I'm joining a larger effort to move away from <code>fintype</code> and into <code>finite</code> in noncomputable contexts, and this is a necessary step to do so</p>",
        "id": 289118850,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657479906
    },
    {
        "content": "<p>Well, not the <code>enat</code> to <code>with_top ℕ</code> part, but the <code>nat.card</code> part</p>",
        "id": 289118863,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657479922
    },
    {
        "content": "<p>Also, moving away from <code>enat</code> isn't a \"just because\" move, the idea is that we shouldn't have been using <code>enat</code> to begin with because we didn't care about the weird computability <code>enat</code> provided</p>",
        "id": 289118930,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657479994
    },
    {
        "content": "<p>Also also, I am proving theorems! This refactor business is just a side thing.</p>",
        "id": 289119218,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657480492
    },
    {
        "content": "<p>I decided to split off the <code>enat.card</code> → <code>nat.card_top</code> refactor: <a href=\"https://github.com/leanprover-community/mathlib/pull/15233\">#15233</a></p>",
        "id": 289129489,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657495537
    },
    {
        "content": "<p>Fortunately it seems like <code>enat.card</code> wasn't used much to begin with</p>",
        "id": 289129494,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657495561
    },
    {
        "content": "<p>Not sure if we have a consensus on whether this is a good idea, but now would be a good time to discuss</p>",
        "id": 289129547,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657495600
    },
    {
        "content": "<p>I suggest that we rename first, <a href=\"https://github.com/leanprover-community/mathlib/pull/15235\">#15235</a></p>",
        "id": 289133563,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657502379
    },
    {
        "content": "<p>Then we add lemmas about <code>enat</code> (defined as <code>with_top nat</code>) and redefine <code>enat.card</code></p>",
        "id": 289133613,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657502433
    },
    {
        "content": "<p>I have a branch with new <code>enat</code> but it's not ready yet.</p>",
        "id": 289133615,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657502449
    },
    {
        "content": "<p>Alright, I'll put these PRs on hold then</p>",
        "id": 289140407,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657511677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I suggest that we use this notation for <code>enat := with_top nat</code> and use <code>part_enat := part nat</code> as a \"<code>enat</code> implementation for a few cases where we care about that kind of computability\".</p>",
        "id": 289140750,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657512056
    },
    {
        "content": "<p>I just want to reiterate that I'm in favor of this</p>",
        "id": 289141012,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657512297
    },
    {
        "content": "<p>UPD: probably, it was you who suggested this. Sorry for incorrectly claiming credit for this.</p>",
        "id": 289141132,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657512433
    },
    {
        "content": "<p>I really only got the idea after discussing it with you, so I'd say it was a joint effort</p>",
        "id": 289141214,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657512538
    },
    {
        "content": "<p>Where's \"new enat\" at?</p>",
        "id": 291758672,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659469324
    },
    {
        "content": "<p>^</p>",
        "id": 291802472,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659504601
    },
    {
        "content": "<p>Aye, I meant \"since this conversation last month\"..</p>",
        "id": 291816699,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659515672
    },
    {
        "content": "<p>Oh no, I'm repeating your question</p>",
        "id": 291903107,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659552285
    },
    {
        "content": "<p>Hi, I'm going over 2 months of backlog. We have <code>enat = with_top nat</code> now.</p>",
        "id": 300230210,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1663874668
    }
]