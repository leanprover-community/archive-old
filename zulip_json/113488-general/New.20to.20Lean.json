[
    {
        "content": "<p>Hi, im new to Lean and Zulip so hope im doing this right. I researched Lean a bit, but cant seem to fully comprehend it. Is Lean a programming language or is it a program written in some other language? Does Lean create  mathematical proofs or does it guide people who are doing so, and makes sure they dont make any mistakes or contradictions or something like that?</p>",
        "id": 244437749,
        "sender_full_name": "Nick Gholami",
        "timestamp": 1625065470
    },
    {
        "content": "<p>Welcome! Lean refers both to a programming language, and a compiler that lets you run code written in Lean the language. (The newest version of Lean-4-the-program is actually written in Lean-4-the-language.)</p>",
        "id": 244438651,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625065788
    },
    {
        "content": "<p>Lean is what is called an interactive theorem prover, which basically means that you have to write the proof yourself and Lean assists/checks it. This is in contrast to automated theorem provers, which you can hand a statement and they try to prove or disprove it automatically.</p>",
        "id": 244439154,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625065961
    },
    {
        "content": "<p>(Lean can actually do a little bit of automatic reasoning, but in general you have to supply more details of a proof to Lean than you would write down in a pen-and-paper proof.)</p>",
        "id": 244439276,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625066018
    },
    {
        "content": "<p>(Another side note: there are other programs that can read (pre-processed) Lean code and check the proofs for correctness. But a typical user interaction is with Lean-the-program.)</p>",
        "id": 244439502,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625066097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/New.20to.20Lean/near/244439154\">said</a>:</p>\n<blockquote>\n<p>Lean is what is called an interactive theorem prover, which basically means that you have to write the proof yourself and Lean assists/checks it. This is in contrast to automated theorem provers, which you can hand a statement and they try to prove or disprove it automatically.</p>\n</blockquote>\n<p>Thanks for the detailed answer, really appreciate it.  Can you recommend any automated theorem provers? I'm a student and would like to create an automated theorem prover in my spare time, if possible. </p>\n<p>Are there any tutorials or documentation for Lean I can follow. Or do I have to learn it simply by trial and error?</p>",
        "id": 244441893,
        "sender_full_name": "Nick Gholami",
        "timestamp": 1625066923
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> is a good book for getting started with the concepts of lean</p>",
        "id": 244443122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625067357
    },
    {
        "content": "<p>more generally see anything on <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>",
        "id": 244443241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625067397
    },
    {
        "content": "<p>If you want to write an automated theorem prover, I think lean would actually be a fairly good environment to do so in</p>",
        "id": 244443467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625067492
    },
    {
        "content": "<p>Most existing ATPs are probably too complicated to understand for pedagogical purposes, but I recommend the <a href=\"https://www.amazon.com/Handbook-Practical-Logic-Automated-Reasoning/dp/0521899575\">Handbook of Practical Logic and Automated Reasoning</a> for learning the foundations of ATPs</p>",
        "id": 244443790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625067642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"342413\">@Stephan Schulz</span> has created a simple ATP for pedagogical purposes: <a href=\"https://github.com/eprover/PyRes\">https://github.com/eprover/PyRes</a>. Maybe you'd be interested in playing with it.</p>\n<p>There will also be a tutorial for PyRes next week: <a href=\"https://www.cs.cmu.edu/~mheule/CADE28/#events\">https://www.cs.cmu.edu/~mheule/CADE28/#events</a> (\"Practice of First-Order Reasoning\")</p>",
        "id": 244562992,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1625145217
    },
    {
        "content": "<p>From what I gathered there are things that first order reasoning can't capture right? Like... it can't express most of modern mathematics right?</p>",
        "id": 244567825,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625147044
    },
    {
        "content": "<p>Not really, you can encode anything in first order logic, including higher order logic and DTT. It's sort of like turing completeness for mathematical formalisms - they all interpret each other</p>",
        "id": 244595589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625158140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/New.20to.20Lean/near/244439154\">said</a>:</p>\n<blockquote>\n<p>Lean is what is called an interactive theorem prover</p>\n</blockquote>\n<p>I would note that, while this is true, one of the major goals of Lean 4 is for it to also just be a good general purpose programming language.</p>",
        "id": 244886392,
        "sender_full_name": "Mac",
        "timestamp": 1625448478
    },
    {
        "content": "<p>wait <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> how is Lean a programming language?</p>",
        "id": 245108706,
        "sender_full_name": "duck_master",
        "timestamp": 1625612274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373233\">@duck_master</span> what do you mean by that?</p>",
        "id": 245108783,
        "sender_full_name": "Mac",
        "timestamp": 1625612322
    },
    {
        "content": "<p>lean is basically a general-purpose functional programming language</p>",
        "id": 245108795,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625612337
    },
    {
        "content": "<p>like with my (very small) exposure to Lean, I'm only familiar with it as a theorem prover (i.e. you type in a proof and then you either get \"this is a correct proof!\" or \"this is a wrong proof!\"). I think you meant that Lean was basically a platform to run arbitrary computer programs, and so I wondered how that would be possible if it is.</p>",
        "id": 245108929,
        "sender_full_name": "duck_master",
        "timestamp": 1625612417
    },
    {
        "content": "<p>Well yes, you can use it that way. You can also just write a <code>main</code> function in Lean and compile a program into an executable.</p>",
        "id": 245109044,
        "sender_full_name": "Mac",
        "timestamp": 1625612497
    },
    {
        "content": "<p>Mac is thinking more about lean 4, which is certainly aiming to be \"the next haskell\", i.e. to do general programming in a functional style, in addition to its use as a theorem prover</p>",
        "id": 245109054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625612505
    },
    {
        "content": "<p>Lean 3 can be used for general programming as well, but it is not very efficient so you primarily see this capability being used for tactic programming</p>",
        "id": 245109125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625612545
    },
    {
        "content": "<p>out of curiosity, what were lean 1 and lean 2? i've seen like 0 references to either of them</p>",
        "id": 245109195,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625612607
    },
    {
        "content": "<p>Thanks for the addendum <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> . I too only used Lean 3 for theorem proving so I was not sure how much of my new knowledge of the general purpose use of Lean 4 translated back to Lean 3.</p>",
        "id": 245109201,
        "sender_full_name": "Mac",
        "timestamp": 1625612609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/New.20to.20Lean/near/245109195\">said</a>:</p>\n<blockquote>\n<p>out of curiosity, what were lean 1 and lean 2? i've seen like 0 references to either of them</p>\n</blockquote>\n<p>Lean 1 is mostly lost to history, although <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> can probably tell the story better than I. Lean 2 was used a fair amount, and in particular it had support for HoTT; most of <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> 's thesis was written in lean 2. You can find the repo at <a href=\"https://github.com/leanprover/lean2\">https://github.com/leanprover/lean2</a></p>",
        "id": 245109449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625612752
    },
    {
        "content": "<p>woah, I never knew Lean had HoTT support apart from the \"hack\" that's out there; that's pretty cool</p>",
        "id": 245109656,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625612896
    },
    {
        "content": "<p>Lean used to be more similar to Coq in aspirations of type theoretic generality. The versions have been progressively removing these in favor of more focus on conventional mathematics</p>",
        "id": 245109792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625613006
    },
    {
        "content": "<p>There used to be a bunch of kernel flags to change whether the pi is impredicative, what inductive types are supported, whether Prop exists and so on</p>",
        "id": 245109842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625613065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/New.20to.20Lean/near/245109449\">said</a>:</p>\n<blockquote>\n<p>Lean 2 was used a fair amount, and in particular it had support for HoTT; most of <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> 's thesis was written in lean 2. You can find the repo at <a href=\"https://github.com/leanprover/lean2\">https://github.com/leanprover/lean2</a></p>\n</blockquote>\n<p>This is somewhat off-topic, but that link just made me realize HoTT stands for  <strong>Ho</strong>motopy <strong>T</strong>ype <strong>T</strong>heory. I had always mistakenly thought it stood for <strong>H</strong>igher-<strong>o</strong>rder <strong>T</strong>ype <strong>T</strong>heory. <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 245109971,
        "sender_full_name": "Mac",
        "timestamp": 1625613174
    },
    {
        "content": "<p>it wouldn't be capitalized that way if so, I guess. HOL isn't HoL</p>",
        "id": 245110014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625613233
    },
    {
        "content": "<p>Which also always confused me, because by usual English standards of initials, Higher-order should be initialized <strong>H</strong> or <strong>Ho</strong> (i.e., the o in the initial would be lowercase) because the o in the actual word is lowercase (and is not, in fact, a separate word).</p>",
        "id": 245110141,
        "sender_full_name": "Mac",
        "timestamp": 1625613329
    },
    {
        "content": "<p>usually all words in an acronym are capitalized except conjunctions or connective words like \"of\", which are either omitted or lowercase</p>",
        "id": 245110255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625613415
    },
    {
        "content": "<p>then again, I think the rules are often bent, especially if there is an opportunity for a backronym</p>",
        "id": 245110265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625613428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/New.20to.20Lean/near/245110255\">said</a>:</p>\n<blockquote>\n<p>usually all words in an acronym are capitalized except conjunctions or connective words like \"of\", which are either omitted or lowercase</p>\n</blockquote>\n<p>True, but that would make higher-order logic HL (since higher-order is one word). When abbreviating a single word with multiple letters (like with Homotopy) the other letters are usually lowercase.</p>",
        "id": 245110365,
        "sender_full_name": "Mac",
        "timestamp": 1625613497
    },
    {
        "content": "<p>I'm not sure why HTT wasn't considered a good choice for homotopy type theory, maybe there is another type theory out there with the same initials?</p>",
        "id": 245110377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625613515
    },
    {
        "content": "<p>(Hyphenated words are title-cased, too, in many style guides.  It'd be Higher-Order Logic, since \"order\" is the right part of speech to be upper-cased.)</p>",
        "id": 245110403,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625613544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/New.20to.20Lean/near/245110403\">said</a>:</p>\n<blockquote>\n<p>(Hyphenated words are title-cased, too, in many style guides.  It'd be Higher-Order Logic.)</p>\n</blockquote>\n<p>While that may be true, Wikipedia disagrees: <a href=\"https://en.wikipedia.org/wiki/Higher-order_logic\">https://en.wikipedia.org/wiki/Higher-order_logic</a> :P</p>",
        "id": 245110433,
        "sender_full_name": "Mac",
        "timestamp": 1625613586
    },
    {
        "content": "<p>wikipedia isn't title casing though</p>",
        "id": 245110440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625613598
    },
    {
        "content": "<p>logic is also lowercase</p>",
        "id": 245110484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625613606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/New.20to.20Lean/near/245110440\">said</a>:</p>\n<blockquote>\n<p>wikipedia isn't title casing though</p>\n</blockquote>\n<p>You are right, my bran must have auto corrected that XD.</p>",
        "id": 245110537,
        "sender_full_name": "Mac",
        "timestamp": 1625613656
    },
    {
        "content": "<p>Here are some titles in the references:</p>\n<ul>\n<li>\"Foundations Without Foundationalism: A Case for Second-Order Logic\"</li>\n<li>\"Classical Logic II: Higher Order Logic\"</li>\n<li>\"Automation of Higher-Order Logic\".</li>\n<li>\"Second-order and Higher-order Logic\"</li>\n</ul>\n<p>So really all variants seem to be attested</p>",
        "id": 245110622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625613725
    },
    {
        "content": "<p>What, storytelling? Twist my arm! </p>\n<p>There never was a Lean 1. Leo started the project in 2013 and called the first version Lean 0.1. You could only run it from the command line, but that was o.k., because it was really fast. We started the library with natural numbers and lists and so on, and Floris van Doorn developed the first version of the integers. I spent a month with Leo at Microsoft in the summer of 2014, and by then he was working on Lean 2, so my first task was to port the library from Lean 0.1. Soonho Kong started his Microsoft internship on the same day (we went through the mandatory Microsoft orientation together) and he got to work right away on developing an Emacs mode, using Flycheck for continuous checking. HoTT was all the rage at the time and Leo incorporated a HoTT mode in Lean 2, so I also started the HoTT library that summer, but then Floris and Jakob von Raumer and eventually Ulrik Buchholtz took that over. Leo worked out the details of managing structures and an algebraic hierarchy with type class inference, and I spent most of my time the following year porting the algebraic hierarchy from Isabelle, through ordered fields or so. The following spring Rob Lewis and I spent a few months visiting Jon Borwein in Newcastle, and Rob implemented the real numbers there. At the time we were more invested in being constructive wherever possible, so we encouraged poor Rob to do a constructive formalization of the real numbers, along the lines of Bishop's book.</p>\n<p>Those were the good old days! We started moving to Lean 3 in 2017. Mario split mathlib off from core lean that summer, during the Big Proof program at the Isaac Newton Institute in Cambridge. Some of the library survived from Lean 2 --- the natural numbers, lists, integers, and the algebraic hierarchy had their origins there, but Mario rewrote (and wrote) a lot. Johannes Hölzl did a postdoc at Carnegie Mellon the following year, and added a lot. He restarted the topological library and filters from scratch and went a lot further. Then people like Patrick, Kevin, and Johan got involved,  and then Jasmin Blanchette launched Lean Forward, and people kept coming and coming, and the rest is history.</p>\n<p>(I'm probably leaving out some important bits, so I hope others will chime in.)</p>",
        "id": 245113539,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1625616752
    },
    {
        "content": "<p>Oh, and I forgot about Gabriel Ebner and Sebastian Ullrich, who started contributing to Lean 3 in 2016, IIRC. They got the emacs mode for Lean 3 working, and Gabriel got Lean 3 using multiple cores. Daniel Selsam started working on Lean in 2015 or 2016, I think. Jared Roesch wrote the first VS Code extension. I am probably leaving out lots of others -- I apologize for that.</p>",
        "id": 245115726,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1625619005
    },
    {
        "content": "<p>Has any commercial company shown interest in the project? I think if the industry got involved the pace of development might be much faster.</p>",
        "id": 245119919,
        "sender_full_name": "Bowen Liu",
        "timestamp": 1625624367
    },
    {
        "content": "<p>Education companies like Wiley?</p>",
        "id": 245119972,
        "sender_full_name": "Bowen Liu",
        "timestamp": 1625624421
    },
    {
        "content": "<p>Then there would be devoted math graduates doing this instead of mathematicians</p>",
        "id": 245119998,
        "sender_full_name": "Bowen Liu",
        "timestamp": 1625624487
    },
    {
        "content": "<p>with more investments and a huge professional teams</p>",
        "id": 245120050,
        "sender_full_name": "Bowen Liu",
        "timestamp": 1625624582
    },
    {
        "content": "<p>Maybe in the near future</p>",
        "id": 245120066,
        "sender_full_name": "Bowen Liu",
        "timestamp": 1625624616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"425469\">@Bowen Liu</span> Several of us in Microsoft are very interested in supporting/developing a polished, universally accessible, advanced-high-school-level, AI-auto-grading proof-based math/cs course on top of Lean. We are just starting to think about possible partners and collaborators.</p>",
        "id": 245121059,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1625626022
    },
    {
        "content": "<p>ah got ya</p>",
        "id": 245121747,
        "sender_full_name": "Bowen Liu",
        "timestamp": 1625626977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> That's very uplifting news</p>",
        "id": 245121813,
        "sender_full_name": "Bowen Liu",
        "timestamp": 1625627055
    },
    {
        "content": "<p>It occurs to me to make one correction to the story above: when Soonho Kong arrived at Microsoft in the summer of 2014, I am pretty sure it was his <em>second</em> Microsoft internship. He contributed a lot to the core development of the early versions of Lean. That summer, he also got Lean running in a browser, which was unheard of at the time.</p>",
        "id": 245178993,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1625664487
    },
    {
        "content": "<p>In fact he is still the top contributor after Leo in the community fork, though <em>someone</em> usurped him in the Lean 4 repo and Gabriel is getting close in the fork...</p>",
        "id": 245182675,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625665822
    },
    {
        "content": "<p>Here he is: <a href=\"https://soonhokong.github.io/\">https://soonhokong.github.io/</a>. He is still a legend in my mind. You can get a sense of how intense he is from this old CMU web page: <a href=\"http://www.cs.cmu.edu/~soonhok/synergy-security-and-tips.html\">http://www.cs.cmu.edu/~soonhok/synergy-security-and-tips.html</a>. He is the one who taught me how to use git; we used to call him the \"git whisperer\" because he would clean things up when we made a mess of things.</p>",
        "id": 245219360,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1625681053
    },
    {
        "content": "<p>(Abbreviating \"homotopy\" as \"ho\" rather than \"h\" is standard in algebraic topology, e.g. <code>hocolim</code> for the homotopy colimit.)</p>",
        "id": 245770587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626140482
    },
    {
        "content": "<p>Hello! Can I get a hint regarding the Lean/mathlib tutorial?</p>\n<p>I am stuck with the last exercise in 02_iff_if_and. I don't know how to prove two intermediates steps:<br>\ngcd a b ∣ a<br>\ngcd a b ∣ b</p>",
        "id": 245788249,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626161939
    },
    {
        "content": "<p>Those sound like lemmas that should be available - try <code>library_search</code> to find them</p>",
        "id": 245788780,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1626162342
    },
    {
        "content": "<p>Thanks a lot! They were gcd_dvd_left and gcd_dvd_right.</p>",
        "id": 245790052,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626163215
    },
    {
        "content": "<p>Using those lemmas is not at all the spirit here. All exercises in the tutorials can be solved using only the lemmas mentioned in the tutorials.</p>",
        "id": 245814302,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626178131
    },
    {
        "content": "<p>Unfortunately, I didn't know how to do it using the lemmas from the tutorial.</p>",
        "id": 245931842,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626250894
    },
    {
        "content": "<p>If you tried and couldn't succeed there is no dishonor in having a peek at the solution file.</p>",
        "id": 245931919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250943
    },
    {
        "content": "<p>New \"big problem\": How can I obtain FALSE from having <code>foo &gt; bar</code> and <code>foo = bar</code> at the same time?</p>",
        "id": 245931933,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626250951
    },
    {
        "content": "<p>the easy way is ne_of_lt</p>",
        "id": 245931955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250974
    },
    {
        "content": "<p><code>linarith</code> will handle that.</p>",
        "id": 245931956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626250975
    },
    {
        "content": "<p>that's the easier way <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 245931969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626250987
    },
    {
        "content": "<p>Is there an \"atomic\" proof term that will do it?</p>",
        "id": 245931986,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626251006
    },
    {
        "content": "<p>ne_of_lt</p>",
        "id": 245931993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626251013
    },
    {
        "content": "<p>Mario, we're discussing in the context of the tutorial.</p>",
        "id": 245931994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626251014
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 245932016,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626251035
    },
    {
        "content": "<p>I don't know what's in the tutorial. I guess <code>linarith</code> is the only presented solution?</p>",
        "id": 245932081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626251067
    },
    {
        "content": "<p>The tutorial comes from my teaching where clearly the goal is that automation takes care of all steps where you wouldn't write <em>anything</em> on paper.</p>",
        "id": 245932206,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626251165
    },
    {
        "content": "<p>Oh yes, <code>linarith</code> was mentioned at almost the beginning. If I am trying to be more low-level than the tutorial suggests, there is probably something wrong with my attitude.</p>",
        "id": 245932216,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626251183
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> teaches a lower level approach to things, which is useful for understanding what is going on behind the scenes and can help with more advanced usage. I wouldn't call it wrong, but the tutorial is aimed for a different style of usage</p>",
        "id": 245932285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626251281
    },
    {
        "content": "<p>It's not \"wrong\". What would that mean? But doing so means you would be fighting against the tutorial, but I assume you're a grown-up and you do whatever you want.</p>",
        "id": 245932328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626251292
    },
    {
        "content": "<p>In particular, given the choice between a proof by <code>linarith</code> and a proof by <code>ne_of_lt</code> in mathlib, we would usually choose the latter because it compiles faster</p>",
        "id": 245932490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626251418
    },
    {
        "content": "<p>How come it produces FALSE and not just <code>foo \\neq bar</code> instead? It works and I am puzzled why.</p>",
        "id": 245932562,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626251482
    },
    {
        "content": "<p>Maybe because <code>neq</code> is a function as well?</p>",
        "id": 245932605,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626251511
    },
    {
        "content": "<p>because <code>foo \\ne bar</code> is equal by definition to <code>foo = bar -&gt; false</code>, so it's secretly a function taking one more argument</p>",
        "id": 245932610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626251521
    },
    {
        "content": "<p>From equality to FALSE?</p>",
        "id": 245932612,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626251521
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 245932669,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626251541
    },
    {
        "content": "<p>This whole negation stuff is covered extensively in the tutorial</p>",
        "id": 245932698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626251574
    },
    {
        "content": "<p>Is there a more idiomatic way to write <code>by_contradiction ass</code> if I am not going to use <code>ass</code> anywhere in the proof?<br>\n(case analysis ... this case will never happen ... lemme show why)</p>",
        "id": 245933874,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626252590
    },
    {
        "content": "<p>as in you just want to prove <code>false</code> instead of the goal? That's <code>exfalso</code></p>",
        "id": 245934006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626252678
    },
    {
        "content": "<p>Oh yeah, that's it! I saw it in the Natural Numbers Game but forgot about that.</p>",
        "id": 245934104,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626252731
    },
    {
        "content": "<p>but I usually find it's not needed, since usually a proof of <code>false</code> will also be a proof of anything</p>",
        "id": 245934119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626252749
    },
    {
        "content": "<p>I think I want to use it frequently it after <code>cases</code>.</p>",
        "id": 245934171,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626252794
    },
    {
        "content": "<p>one trick you can use if you have a proof term that is literally <code>false</code> is to replace <code>exact foo</code> with <code>cases foo</code></p>",
        "id": 245934179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626252803
    },
    {
        "content": "<p>This is all covered in great detail in files 7 and 7bis of the tutorial.</p>",
        "id": 245934185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626252806
    },
    {
        "content": "<p>Sorry, I am ahead of time.</p>",
        "id": 245934199,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626252831
    },
    {
        "content": "<p>There is nothing to be sorry about, I'm only telling you that you should not loose hope</p>",
        "id": 245934261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626252867
    },
    {
        "content": "<p>Is there a way to force Visual Studio Code to display parentheses in the \"tactic state\" window?<br>\nExpressions like <code>¬ P ↔ P = false</code> are extremely confusing for me.</p>",
        "id": 246425781,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626681152
    },
    {
        "content": "<p>Are you aware you can hover over the expression to see where the parentheses are?</p>",
        "id": 246426426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626681643
    },
    {
        "content": "<p>WoW, thank you! I had no idea!</p>",
        "id": 246426493,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626681716
    },
    {
        "content": "<p>There is probably a more stable approach to this, but my strategy is to hover with my mouse over the various parts in the Infoview to obtain the information that I need.</p>\n<p>In this specific case, if you hover over <code>¬</code>, you will see that <code>¬ P</code> highlights: this means that they go together.<br>\nIf you hover over <code>=</code>, you will see that <code>P = false</code> highlights, so those also go together.<br>\nFinally, if you hover over <code>↔</code> everything highlights.</p>\n<p>In conclusion, these are the parentheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246426498,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626681721
    },
    {
        "content": "<p>Yeah! Thanks a lot! This is actually very clever!</p>",
        "id": 246426572,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626681761
    },
    {
        "content": "<p>Sometimes it can be tricky to get the mouse to hover over the right part, but it tends to work well most of the times!</p>",
        "id": 246426602,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626681800
    },
    {
        "content": "<p>What was the design decision behind assigning such a low priority to \\neg ? I think that mathematicians are used to \\neg having a higher priority than all other logical operators.</p>",
        "id": 246434655,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626687727
    },
    {
        "content": "<p>Are you sure? I would read <code>-a^b</code> as <code>-(a^b)</code>, not <code>(-a)^b</code>.</p>",
        "id": 246435201,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626688131
    },
    {
        "content": "<p>Yaël, \\neg is logical negation ¬ not unary minus -</p>",
        "id": 246435276,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626688186
    },
    {
        "content": "<p>Also, in this example ¬ has a high priority, not a low one</p>",
        "id": 246435326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626688205
    },
    {
        "content": "<p>Oh oops</p>",
        "id": 246435352,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626688224
    },
    {
        "content": "<p>If ¬ had a low priority it would be parsed <code>¬ (P ↔ P = false)</code></p>",
        "id": 246435368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626688246
    },
    {
        "content": "<p>Oh. You are right. I was wrong.</p>",
        "id": 246435540,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626688352
    },
    {
        "content": "<p>Apparently the lecture notes I learned mathematical logic from, wrote <code>¬ϕ ↔ (ϕ → ⊥)</code>, so this level of priority is not unusual to every mathematician :)</p>",
        "id": 246435747,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626688458
    },
    {
        "content": "<p>I thought the definition of \"mathematician\" included \"not having attended any course in mathematical logic\". <span aria-label=\"speak no evil\" class=\"emoji emoji-1f64a\" role=\"img\" title=\"speak no evil\">:speak_no_evil:</span></p>",
        "id": 246436072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626688687
    },
    {
        "content": "<p>I thought specifying <em>mathematical</em> logic would still allow me into the cool kids' club :P</p>",
        "id": 246436258,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626688819
    },
    {
        "content": "<p>Is there any shortcut for this?<br>\n<code>intro foo,\nexact foo,</code></p>\n<p>I use it very often!</p>",
        "id": 246494324,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626719669
    },
    {
        "content": "<p><code>exact id</code>?</p>",
        "id": 246494394,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626719694
    },
    {
        "content": "<p>or <code>exact fun x, x</code></p>",
        "id": 246494422,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626719706
    },
    {
        "content": "<p>Wow, thanks! This is great!</p>",
        "id": 246494470,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626719727
    },
    {
        "content": "<p>The reals, as currently defined in mathlib, are not computable. So <code>#eval</code> doesn't work on them. What would you want the output of <code>#eval real.cos 2</code> to look like?</p>",
        "id": 246495889,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626720358
    },
    {
        "content": "<p>You can do this though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">real.cos</span> <span class=\"n\">real.pi</span> <span class=\"c1\">-- -1</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">real.cos</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span><span class=\"o\">)</span> <span class=\"c1\">-- 1</span>\n</code></pre></div>",
        "id": 246495948,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626720374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/New.20to.20Lean/near/246495948\">said</a>:</p>\n<blockquote>\n<p>You can do this though:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">real.cos</span> <span class=\"n\">real.pi</span> <span class=\"c1\">-- -1</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">real.cos</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span><span class=\"o\">)</span> <span class=\"c1\">-- 1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you!!!</p>",
        "id": 246496332,
        "sender_full_name": "Taylor Belcher",
        "timestamp": 1626720544
    },
    {
        "content": "<p>I understand that <code>false</code> is a type. However, is <code>true</code> also a type? Does something like <code>true</code> exist in Lean?</p>",
        "id": 246519467,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1626731068
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/true\">docs#true</a></p>",
        "id": 246519479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626731078
    },
    {
        "content": "<p>(note that you can send \"Welcome bot\" PM's with <code>docs#</code> links to try them out, which is often faster than searching the docs if your guesses are good)</p>",
        "id": 246519549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626731149
    },
    {
        "content": "<p>I usually send those PMs to rss-bot</p>",
        "id": 246519621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626731179
    },
    {
        "content": "<p>I tried and nothing special happened. Only then I understood that Eric meant that the message contains a link that I can click. (For the record, my guess was not sufficiently good for the link to exist).</p>\n<p>But I noticed that I can equally well send the private message to myself. <span aria-label=\"privacy\" class=\"emoji emoji-1f50f\" role=\"img\" title=\"privacy\">:privacy:</span> How good is that? <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 246521910,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1626732728
    },
    {
        "content": "<p>Does sending a PM solve something that the Preview button doesn't?  If I'm guessing a docs link, I usually click that.</p>\n<p><a href=\"/user_uploads/3121/f5XYEtZYmpG2pdpThbaPbCS3/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/f5XYEtZYmpG2pdpThbaPbCS3/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/f5XYEtZYmpG2pdpThbaPbCS3/image.png\"></a></div>",
        "id": 246533514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626742986
    },
    {
        "content": "<p>You can even send PMs to yourself (-;</p>",
        "id": 246544654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626756370
    }
]