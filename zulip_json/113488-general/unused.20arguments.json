[
    {
        "content": "<p>I created a script that prints all declarations with unused arguments:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/sanity_check/src/tactic/sanity_check.lean#L97\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/sanity_check/src/tactic/sanity_check.lean#L97\">https://github.com/leanprover-community/mathlib/blob/sanity_check/src/tactic/sanity_check.lean#L97</a></p>\n<p>The output of this command is here:<br>\n<a href=\"https://gist.github.com/fpvandoorn/04837ea7f20479bcac9a99539d2c17b3\" target=\"_blank\" title=\"https://gist.github.com/fpvandoorn/04837ea7f20479bcac9a99539d2c17b3\">https://gist.github.com/fpvandoorn/04837ea7f20479bcac9a99539d2c17b3</a></p>\n<p>Many of these declarations are \"wrong\" in some way: maybe a type class argument occurs more than once, maybe a declaration is given with unnecessary assumptions (which is not always bad, but sometimes it is), maybe a declaration should really be in a different theory (e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/132bc5677b17b6e4ea0f1c6fec5d4b2c6003a777/src/topology/constructions.lean#L238\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/132bc5677b17b6e4ea0f1c6fec5d4b2c6003a777/src/topology/constructions.lean#L238\">this</a> should probably be proven for an arbitrary type, not an arbitrary topological space)</p>\n<p>Is anyone interested in going through this list and cleaning stuff up? If not, I'll do it at some point, but that will probably take a while.</p>",
        "id": 171988563,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564438443
    },
    {
        "content": "<p>There is some noise in this list: there are some automatically generated declarations and there are some declarations where you really want an unused argument (for example a user command with argument <code>(meta_info : decl_meta_info)</code>).</p>",
        "id": 171988768,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564438630
    },
    {
        "content": "<p>There are 653 declarations in mathlib that have unused arguments. This is after removing all declarations that are \"internal\" and most (but not all) automatically generated declarations.</p>",
        "id": 171989235,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564439071
    },
    {
        "content": "<p>Could you post an issue on GitHub with that list of declarations? I can imagine it will take a while to get it all fixed -- it would be easier to track incremental progress there.</p>",
        "id": 171989236,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564439073
    },
    {
        "content": "<p>I wonder what percentage are unnecessary type class arguments?</p>",
        "id": 171989253,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564439095
    },
    {
        "content": "<p>From looking manually at a bunch of them: most of them are.</p>",
        "id": 171989271,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564439116
    },
    {
        "content": "<p>Any way for your tool to check lemmas that have too many or too few implicit arguments?</p>",
        "id": 171989813,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1564439733
    },
    {
        "content": "<p>Looking at the algebra ones I think it's difficult to argue that these are \"incorrect\"; in fact for some of them I don't understand the output at all. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- ring_theory\\ideals.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">is_coprime_self</span> <span class=\"c1\">-- [2, 5]</span>\n</pre></div>\n\n\n<p>what does [2,5] mean here? The theorem is about x being coprime to x and this is surely meaningless unless x is in an algebraic structure like a commutative ring. The [2] seems to point to comm_ring and the 5 to the coprime thing. I am confused.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- ring_theory\\localization.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"c1\">-- [4]</span>\n</pre></div>\n\n\n<p>This one is saying that you don't need a submonoid to define a certain relation. This is like saying that if we have a group G and a subgroup H then we can define a binary relation on G by g1 R g2 iff g1/g2 is in H, but ha ha, we don't strictly speaking need that H is a subgroup -- it's just that we will never use this relation unless H is a subgroup. </p>\n<p>Similar story here, and probably for a lot of other algebra stuff:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- ring_theory\\ideal_operations.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"c1\">-- [6]</span>\n</pre></div>\n\n\n<p>if you have a map between rings then you can push ideals forward, and yes, strictly speaking, it doesn't have to be an unbundled ring hom, but when everything is bundled do we want this map between rings to be a ring hom or a random map of sets? It will always be a ring hom. Is there still some CS-related justification for removing the assumption?</p>",
        "id": 171990941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564441026
    },
    {
        "content": "<p>It makes all theorems using the definition shorter, and it proves for free that the choice of witness to H being a subgroup doesn't matter</p>",
        "id": 171991346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441459
    },
    {
        "content": "<p>So I would definitely try to avoid \"hygiene arguments\" that are there only because that's the area of math we are interested in today</p>",
        "id": 171991402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441555
    },
    {
        "content": "<p><code>ideal.is_coprime_self</code> takes an <code>x</code> and a <code>y</code> and proves <code>x</code> is coprime to <code>x</code> iff <code>x</code> is a unit. That's pretty clear cut</p>",
        "id": 171991467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441627
    },
    {
        "content": "<p>it also has two <code>comm_ring</code> assumptions</p>",
        "id": 171991535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441700
    },
    {
        "content": "<p>aah I had misunderstood [2,5]</p>",
        "id": 171991577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564441784
    },
    {
        "content": "<p>I don't see the two <code>comm_ring</code> assumptions</p>",
        "id": 171991581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564441796
    },
    {
        "content": "<p>so maybe I'm miscounting instead</p>",
        "id": 171991621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564441803
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">is_coprime_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">is_coprime</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">is_unit</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171991625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441805
    },
    {
        "content": "<p>I still don't see it :-/</p>",
        "id": 171991647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564441845
    },
    {
        "content": "<p><code>[_inst_1 : comm_ring α] [_inst_2 : comm_ring α]</code></p>",
        "id": 171991651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441853
    },
    {
        "content": "<p>If you are asking why it acquired a duplicate assumption, it's probably because one is explicitly in the statement and the other is a <code>variable</code> in the section</p>",
        "id": 171991724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441929
    },
    {
        "content": "<p>it's on line 15</p>",
        "id": 171991734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441949
    },
    {
        "content": "<p>I can see that <code>mem_span_pair</code>, <code>is_coprime_def</code>, <code>is_coprime_self</code> all make the same mistake of writing <code>[comm_ring α]</code> even though it's already included</p>",
        "id": 171991769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564442025
    },
    {
        "content": "<blockquote>\n<p>what does [2,5] mean here? </p>\n</blockquote>\n<p>From the Gist:</p>\n<blockquote>\n<p>The list after each declaration gives all the positions of the unused arguments (starting at 1). E.g. [2] means that the second argument is unused.</p>\n</blockquote>",
        "id": 171993246,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564443679
    },
    {
        "content": "<p>Nice job, Floris. The list is really striking.</p>",
        "id": 171993407,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1564443921
    },
    {
        "content": "<blockquote>\n<p>This one is saying that you don't need a submonoid to define a certain relation. This is like saying that if we have a group G and a subgroup H then we can define a binary relation on G by g1 R g2 iff g1/g2 is in H, but ha ha, we don't strictly speaking need that H is a subgroup -- it's just that we will never use this relation unless H is a subgroup.</p>\n</blockquote>\n<p>I'm ambivalent about this issue myself. I relate with both your and Mario's argument. If we're going through this list, we don't have to remove <em>all</em> the unused arguments.</p>",
        "id": 171993465,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564443973
    },
    {
        "content": "<p>Actually, Georges got a lot of mileage in the math components library by defining things in greater generality than you might think you would need. For example, you can take quotients G / H even if H is not a normal subgroup (maybe not even a subgroup?). IIRC it is defined as N_G(H) / H, where N_G(H) is the normalizer of H in G. So the construction makes sense and coincides with the usual one when H is normal in G. But doing things in greater generality meant that there were often less side conditions to check when writing proofs. </p>\n<p>I am not saying that deleting unused arguments will be genuinely helpful in all cases on Floris' list, only that you might be surprised.</p>",
        "id": 171994022,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1564444687
    },
    {
        "content": "<blockquote>\n<p>Any way for your tool to check lemmas that have too many or too few implicit arguments?</p>\n</blockquote>\n<p>I can try that next. The main problem is that we don't have universal rules for which arguments should be implicit, and it's hard to say which decisions are \"mistakes\". For example, we treat declarations proving <code>iff</code> different than declarations prove <code>eq</code>:</p>\n<div class=\"codehilite\"><pre><span></span>lemma sub_right_comm (a b c : α) : a - b - c = a - c - b\ntheorem inv_eq_one {a : α} : a⁻¹ = 1 ↔ a = 1\ntheorem mul_left_inj [left_cancel_semigroup α] (a : α) {b c : α} : a * b = a * c ↔ b = c\n</pre></div>\n\n\n<p>I can try to write a tactic that finds choices that are \"obviously wrong\". If you have ideas to decide which kinds of choices are wrong, then please tell me.</p>",
        "id": 171994292,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564445084
    },
    {
        "content": "<p>The rule is that if it's an iff then it should be implicit if it appears on both sides of the iff. That is, iffs are treated as a pair of implications, and are implicit if they would be implicit in both one-directional versions</p>",
        "id": 171995564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564446937
    },
    {
        "content": "<p>However, there are a lot of equalities that have all implicit args as well - I think Johannes likes this style as it appears a lot in topology and lattices - and I don't know if we should take a stance for or against it</p>",
        "id": 171995705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564447086
    },
    {
        "content": "<p>stuff like <code>inf_le_left</code> are almost always used with inferred arguments, but the standard rule would have them take explicit args</p>",
        "id": 171995735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564447165
    },
    {
        "content": "<p>I have also sometimes been surprised by choices regarding implicit / explicit variables in the library. I am curious to know if others think we should adopt more rigid policies.<br>\nDoes Johannes like to use implicit arguments in identities so that he can call <code>simp</code> with <code>foo.symm</code>? Or write <code>foo.trans bar</code>? Or is there some other reason?</p>",
        "id": 171996255,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1564447955
    },
    {
        "content": "<p>might this be the cause of some slowness?</p>",
        "id": 172009342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564468176
    },
    {
        "content": "<p>Nice work <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> !</p>",
        "id": 172010106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564469073
    },
    {
        "content": "<p>Btw, anyone else got stomach aches from the folder separators being slanted the wrong way?</p>",
        "id": 172010112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564469098
    },
    {
        "content": "<p>I think I might have been guilty of this myself, but I am pretty sure it is safe to delete <code>(meta_info : decl_meta_info)</code> from a user command---lean knows still understands, and it's less confusing. (Assuming the tactic doesn't use this information...)</p>",
        "id": 172020679,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1564479048
    },
    {
        "content": "<p>On the other hand an unused <code>(_ : parse (tk \"blah\"))</code> obviously can't be dropped---but probably your program can ignore arguments which have placeholder <code>_</code> names?</p>",
        "id": 172020719,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1564479113
    },
    {
        "content": "<blockquote>\n<p>Nice job, Floris. The list is really striking.</p>\n</blockquote>\n<p>I'm not surprised at all. The variable mechanism is  great, but it's clearly leading to this situation as soon as you start building a significant library about anything. I was already asking for this tool more than one year ago. Thanks Floris! I'll try to find time to participate in this argument hunting in topology at least.</p>",
        "id": 172025173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564483124
    },
    {
        "content": "<p>I located the cause of my confusion -- I was checking these things in the schemes project, which has a version of mathlib from March. In March the definition looked like this:</p>\n<div class=\"codehilite\"><pre><span></span>ideal.is_coprime_self :\n  ∀ {α : Type u_1} [_inst_2 : comm_ring α] (x : α), α → (ideal.is_coprime x x ↔ is_unit x)\n</pre></div>\n\n\n<p>hence why I asked about [2,5] -- there are only four inputs, I wondered if <code>ideal.is_coprime</code> counted somehow.</p>\n<p>So presumably since March someone threw in an extra variable somewhere completely unrelated and the problem then appeared.</p>",
        "id": 172026768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564484608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  On the March version of that declaration my output would probably be <code>[4]</code>, since there is still a erroneous second argument of type <code>α</code> in the lemma.</p>",
        "id": 172039046,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564494601
    },
    {
        "content": "<blockquote>\n<p>Kenny Lau: might this be the cause of some slowness?</p>\n</blockquote>\n<p>Probably not in any significant way.</p>",
        "id": 172039154,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564494668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> That's good to know. I always copy-pasted it thinking it was necessary. In that case, when cleaning up this list, we can also go through these arguments.</p>",
        "id": 172039567,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564494982
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>  On the March version of that declaration my output would probably be <code>[4]</code>, since there is still a erroneous second argument of type <code>α</code> in the lemma.</p>\n</blockquote>\n<p>Yes exactly. That's why I was totally confused earlier :-)</p>",
        "id": 172042404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564496653
    },
    {
        "content": "<p>Re: the argument that in the odd order project they worked with more generality. It would not surprise me if, after removing the condition that S be a submonoid in the definition of localisation R S, one found several other lemmas which happened not to use the fact that S was a submonoid. I can see that this is a change which gets computer scientists excited, but after The Big Refactor, when submonoids are bundled, one will just end up bundling S back into being a submonoid -- either that or one will have a lot of coercions from submonoid to set (and some other thread started today seemed to indicate that there might be problems here, although they might be specific to submodules, I'm not sure).</p>",
        "id": 172042926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564496930
    },
    {
        "content": "<p>On the other hand, in that example we do use that <code>R</code> is a ring, but we shouldn't. Because now we can't localise monoids )-;</p>",
        "id": 172043400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> is working on localising monoids as we speak! She's preparing a PR for mathlib which localises a monoid at a submonoid.</p>",
        "id": 172043524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497268
    },
    {
        "content": "<p>She has everything working, we're just trying to figure out what a good universal predicate should be.</p>",
        "id": 172043551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497298
    },
    {
        "content": "<p>Our initial guess, using kernels, was wrong, because a surjective morphism of monoids is not determined by its kernel, in contrast to groups.</p>",
        "id": 172043583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497324
    },
    {
        "content": "<p>We need this for the perfectoid project :-)</p>",
        "id": 172043807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497456
    },
    {
        "content": "<p>Can we have a generic theory of congruence relations on monoids. I don't think it would be very long. But I think you can quotient by the smallest congruence relation such that everything that's meant to have an inverse in the quotient has an inverse in the quotient.</p>",
        "id": 172043889,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564497493
    },
    {
        "content": "<p>The fact that cosets of submonoids can be quite badly behaved (they can have non-trivial intersection) makes things a bit more delicate than you might think, but if you think about stuff the right way it all seems to work.</p>",
        "id": 172043970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497546
    },
    {
        "content": "<p>That's why you need to talk about congruence relations instead of submonoids. But a congruence relation is just a submonoid of the product, that's also an equivalence relation.</p>",
        "id": 172044100,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564497616
    },
    {
        "content": "<p>Here's a terrifying example; the map from (nat,+) to (Z/2Z),* sending 0 to 1 and everything else to 0 is a monoid hom.</p>",
        "id": 172044107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497620
    },
    {
        "content": "<p>and it has trivial kernel :-) We don't have the target of the map in the localisation story, we just have a monoid and a submonoid.</p>",
        "id": 172044247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497720
    },
    {
        "content": "<p>Congruence relations form a complete lattice.</p>",
        "id": 172044365,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564497770
    },
    {
        "content": "<p>but all I have is a monoid and a submonoid. I don't have the target.</p>",
        "id": 172044403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497799
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 172044450,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564497834
    },
    {
        "content": "<blockquote>\n<p>But a congruence relation is just a submonoid of the product,</p>\n</blockquote>\n<p>What product?</p>",
        "id": 172044476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497842
    },
    {
        "content": "<p>For localisation of <code>M</code> by a submonoid <code>S</code> it will be <code>(M /times S) \\times (M \\times S)</code></p>",
        "id": 172044584,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564497900
    },
    {
        "content": "<p>Aah I see, so a congruence relation is a way of taking a quotient of a general monoid perhaps, and M[1/S] is a quotient of M x S</p>",
        "id": 172044716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497971
    },
    {
        "content": "<p>And the relation is easy to find, because it's the smallest one that gives you inverses.</p>",
        "id": 172044779,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564498013
    },
    {
        "content": "<p>In contrast to groups, where we just remember the things which get mapped to 1, here we need to keep track of the things which get mapped to the same thing.</p>",
        "id": 172044917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564498092
    },
    {
        "content": "<p>So that's called a congruence relation?</p>",
        "id": 172044973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564498130
    },
    {
        "content": "<p>Yes.</p>",
        "id": 172044982,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564498136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Is she refactoring the file for rings?</p>",
        "id": 172045168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564498261
    },
    {
        "content": "<p>I don't think we need/want two separate files, right?</p>",
        "id": 172045189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564498273
    },
    {
        "content": "<p>Not currently but what I've got so far would make it fairly easy to do so I think</p>",
        "id": 172045543,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1564498470
    },
    {
        "content": "<p>Ok, cool!</p>",
        "id": 172046497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564499068
    }
]