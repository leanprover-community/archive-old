[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.pow</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">âˆ£</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">-- goals accomplished ðŸŽ‰</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245016658,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625565041
    },
    {
        "content": "<p>Mario always warns of metavariables in goals.</p>",
        "id": 245157719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625652845
    },
    {
        "content": "<p>Yes, I believe that's indeed what's going wrong here.  simp assigns the metavariable to 1, but doesn't propagate this assignment.  And refl can then afterwards assign the same metavariable to 0.</p>",
        "id": 245163035,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625656151
    },
    {
        "content": "<p>Just for laughs, this shows the same behaviour:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">âˆ£</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goals accomplished ðŸŽ‰</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245163320,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625656362
    },
    {
        "content": "<p>It looks like it just forgets to update the tactic state's mctx: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp#L1262\">https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp#L1262</a></p>",
        "id": 245235283,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1625688397
    },
    {
        "content": "<p>^ or forgets to not assign regular metavariables, depending on your point of view</p>",
        "id": 245236615,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1625689114
    },
    {
        "content": "<p>This reminds me of when I tried a patch to preserve metavariables resolved by <code>conv</code>, but if I tried to preserve them in the lean code I got a segfault from the C++</p>",
        "id": 245243041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625692522
    },
    {
        "content": "<p>Maybe it wasn't a segfault; the reversion PR was <a href=\"https://github.com/leanprover-community/lean/pull/485/files\">https://github.com/leanprover-community/lean/pull/485/files</a></p>",
        "id": 245243180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625692594
    }
]