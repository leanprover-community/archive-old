[
    {
        "content": "<p>This hits a typeclass search loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">init.coe</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">50</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> without this line, we hit a typeclass search loop for</span>\n<span class=\"cm\">`has_lift_t (list (with_zero (with_zero ... (with_zero ℕ)))) (cycle ℕ)` -/</span>\n<span class=\"c1\">-- local attribute [-instance] lift_list</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 255726167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633086333
    },
    {
        "content": "<p>It ends up looking for a stupid instance like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)))))))))))))</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>where the number of <code>option</code>s is bounded only by the max depth</p>",
        "id": 255726531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633086510
    },
    {
        "content": "<p>This only gets worse without the <code>prelude</code>, as <code>widget.html</code> and <code>with_zero</code> also join the game</p>",
        "id": 255726573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633086538
    },
    {
        "content": "<p>interestingly<br>\n<a href=\"https://github.com/leanprover-community/lean/blob/a0fb1e8c7ac81dfd2e80ad0de08f4e57ee853d82/library/init/coe.lean#L105\">https://github.com/leanprover-community/lean/blob/a0fb1e8c7ac81dfd2e80ad0de08f4e57ee853d82/library/init/coe.lean#L105</a></p>",
        "id": 255726664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633086590
    },
    {
        "content": "<p>Ah this is really about <code>lift_list</code></p>",
        "id": 255727712,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633087140
    },
    {
        "content": "<p>Right, one of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_list\">docs#lift_list</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_option\">docs#coe_option</a> is to blame here, unless the transitivity mechanism itself is flawed. I guess that's also quite possible, given Lean4 chose to design it differently.</p>",
        "id": 255728075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633087328
    },
    {
        "content": "<p>Just to be clear -- you're not expecting such a coercion to exist right?</p>",
        "id": 255731667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633089401
    },
    {
        "content": "<p>No, I'm not expecting it to exist, that would be nonsense!</p>",
        "id": 255735019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633091179
    },
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_list\">docs#lift_list</a> we should probably either</p>\n<ul>\n<li>replace the type-class assumption from <code>[has_lift_t a b]</code> to <code>[has_lift a b]</code>; or</li>\n<li>replace the conclusion from <code>has_lift (list a) (list b)</code> to <code>has_lift_t (list a) (list b)</code></li>\n</ul>",
        "id": 255848928,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633158552
    },
    {
        "content": "<p>Should we have an instance for both cases?</p>",
        "id": 255851733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633161628
    },
    {
        "content": "<p>That seems unnecessary. I think the instance <code>[has_lift a b] : has_lift (list a) (list b)</code> is fully general, since we can do <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_trans\">docs#lift_trans</a> on the <code>list</code> level (e.g. if we have lifts <code>a -&gt; b</code> and <code>b -&gt; c</code> which gives lifts <code>list a -&gt; list b</code> and <code>list b -&gt; list c</code> so we get a <code>has_lift_t (list a) (list c)</code>).</p>",
        "id": 256020782,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633334847
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/626\">lean#626</a></p>",
        "id": 256021197,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633335039
    }
]