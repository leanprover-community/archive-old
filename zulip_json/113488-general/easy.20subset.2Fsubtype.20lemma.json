[
    {
        "content": "<p>I've reduced my goal to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">|</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">|</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Is there a one-liner for this? As it happens I only need the &lt;- direction but it somehow all looks easy.</p>",
        "id": 129752088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531750544
    },
    {
        "content": "<p>can you try <code>by ext; dsimp; tauto</code>?</p>",
        "id": 129752297,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531750723
    },
    {
        "content": "<p>Sorry, no that won't work</p>",
        "id": 129752338,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531750769
    },
    {
        "content": "<p>there should be a lemma <code>{x : A | x \\in B} = A \\cap B</code></p>",
        "id": 129752413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531750808
    },
    {
        "content": "<p>wait, that's not type correct</p>",
        "id": 129752438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531750839
    },
    {
        "content": "<p>hence Kevin's <code>.val</code></p>",
        "id": 129752451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531750857
    },
    {
        "content": "<p>Second attempt: <code>dsimp [set_eq_def]; apply forall_congr; tauto</code></p>",
        "id": 129752573,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531750962
    },
    {
        "content": "<p>I think <code>and.congr_right</code> needs a biconditional version</p>",
        "id": 129752609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531751004
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">congr_right_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">and_congr_right</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">|</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">|</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">set_eq_def</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">congr_right_iff</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 129753490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531751904
    },
    {
        "content": "<p>Thanks Mario.</p>",
        "id": 129754062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531752460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120726\">@Luca Gerolla</span> is doing homotopy theory in Lean and this was all that was left for proving that a function on [0,1] is continuous iff its restriction to [0,1/2] and [1/2,1] is.</p>",
        "id": 129754286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531752616
    }
]