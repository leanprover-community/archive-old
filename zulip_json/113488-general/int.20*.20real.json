[
    {
        "content": "<p>I am trying to prove that for a sine function every multiple of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is 0. This is my code thus far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">basic</span> <span class=\"n\">zero_lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sin_npi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">ring</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">H</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">=</span> <span class=\"n\">pi</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span><span class=\"o\">,</span>\n\n  <span class=\"n\">sorry</span><span class=\"o\">},</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>and get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">pi</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℝ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">ℤ</span>\n</code></pre></div>\n\n\n<p>I think it may be because I haven't imported the integers? As that was an issue before but I have tried to import: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n</code></pre></div>\n\n\n<p>but it still throws an error.</p>",
        "id": 202541870,
        "sender_full_name": "James Arthur",
        "timestamp": 1593591243
    },
    {
        "content": "<p>Lean sees <code>1 + (n - 1)</code> and thinks you want to work with integers. You need to tell it explicitly that you want to view this as a real.</p>",
        "id": 202541980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593591357
    },
    {
        "content": "<p>Telling lean to view <code>x</code> as a term of type <code>Y</code> can be done by writing <code>(x : Y)</code>.</p>",
        "id": 202542029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593591381
    },
    {
        "content": "<p>(This only works if someone explained to lean how to move <code>x</code> to this other type, this is called a coercion, or <code>coe</code>. Lean shows you that it coerced <code>x</code> by putting a tiny up-arrow before it.)</p>",
        "id": 202542064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593591423
    },
    {
        "content": "<p>So I need something like this? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">=</span> <span class=\"n\">pi</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>it works now but I fear that n is no longer an integer.</p>",
        "id": 202542288,
        "sender_full_name": "James Arthur",
        "timestamp": 1593591618
    },
    {
        "content": "<p>What do you mean \"n is no longer an integer\"? Things don't magically change their type. There are invisible functions in there. Look at the up arrows.</p>",
        "id": 202542319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593591650
    },
    {
        "content": "<p>So even if I coerce <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1 + (n-1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> by using <code> ((1 + (n-1) : ℝ)) </code>, n is still an integer just that whole statement is a real? I see the arrows, they mean that the variable is in a different field to the rest doesn't it?</p>",
        "id": 202542492,
        "sender_full_name": "James Arthur",
        "timestamp": 1593591828
    },
    {
        "content": "<p>n is an integer and this won't ever change. <code>\\u n</code> is a real. Coerce as soon as you can. Note that <code>\\u (n+1)</code> isn't the same as <code>(\\u n) + 1</code> because those are two different addition functions. Compatible, but different.</p>",
        "id": 202542715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593591976
    },
    {
        "content": "<p><code>norm_cast</code> will try and write everything as <code>\\u (all the maths)</code> and <code>push_cast</code> will try and write everything as (all the maths applied to <code>\\u</code> stuff)</p>",
        "id": 202542763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593592022
    },
    {
        "content": "<p>OK, that's very useful to know. I have now used the <code> \\u </code> in the have and produced <code> have H2 : (↑(1 + (n-1))) * pi = pi + (n - 1) * pi, </code>. It now works, thanks!</p>",
        "id": 202542807,
        "sender_full_name": "James Arthur",
        "timestamp": 1593592063
    },
    {
        "content": "<p>By the way, I can't tell exactly since I don't know what's in <code>basic</code> and <code>zero_lemmas</code>, but there's something like <code>sin_npi</code> already proved in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sin_int_mul_pi/src\">src#real.sin_int_mul_pi</a></p>",
        "id": 202542864,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593592087
    },
    {
        "content": "<p>Elaborating on Bryan's comment: James, it's good that you tried to include the imports in the code you pasted, but they seem to refer to local files you have. The goal of this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> story is that people here can copy paste into their VScode and see your issue. Here we can't.</p>",
        "id": 202542964,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593592190
    },
    {
        "content": "<p>Sorry, I think the imports didn't explicitly import pi. I have worked everything out and moved my local imports away from the mathlib imports so that shouldn't happen again.</p>",
        "id": 202543299,
        "sender_full_name": "James Arthur",
        "timestamp": 1593592427
    }
]