[
    {
        "content": "<p>I'm looking at</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>git grep -n <span class=\"s1\">'notation.*:: '</span>\n<span class=\"go\">src/data/num/bitwise.lean:196:  notation a :: b := bit a b</span>\n<span class=\"go\">src/data/num/bitwise.lean:247:  notation a :: b := bit a b</span>\n<span class=\"go\">src/data/sym/basic.lean:76:notation a :: b := cons a b</span>\n<span class=\"go\">src/data/sym/basic.lean:129:notation a :: b := cons' a b</span>\n<span class=\"go\">src/data/vector3.lean:38:notation a :: b := cons a b</span>\n<span class=\"go\">src/number_theory/dioph.lean:257:notation a :: b := cons a b</span>\n</code></pre></div>",
        "id": 258788480,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634945172
    },
    {
        "content": "<p>There is also <code>notation a :: b = stream.cons a b</code> and <code>notation a :: b = list.cons a b</code> in Lean core.</p>",
        "id": 258788523,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634945210
    },
    {
        "content": "<p>How does Lean parser choose between these meanings?</p>",
        "id": 258788583,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634945260
    },
    {
        "content": "<p>Should we use something like <code>::â‚˜</code> (used for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.cons\">docs#multiset.cons</a>) more often?</p>",
        "id": 258788669,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634945306
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> I'm moving <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream\">docs#stream</a> from core to mathlib. Should I change notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.cons\">docs#stream.cons</a>? Move it (and other notation about <code>stream</code>) to a locale?</p>",
        "id": 258788720,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634945360
    },
    {
        "content": "<p>(I've been meaning to replace <code>data/sym/basic</code>s notation. It managed to avoid getting its own right around when <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  <a href=\"https://github.com/leanprover-community/mathlib/commit/fde3d78cadeec5ef827b16ae55664ef115e66f57\">modified</a> the <code>multiset</code> notation.)</p>",
        "id": 258788787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634945403
    },
    {
        "content": "<p>How it seems to work is that Lean takes all the possible alternatives and checks to see which ones might actually apply based on types, and if there are multiple possibilities in the end, it fails with an error.  I've never really understood exactly when this occurs...</p>",
        "id": 258788963,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634945533
    },
    {
        "content": "<p>This is something within its capabilities for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`ðŸŒ´`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`ðŸŒ´`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">â„¤</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span> <span class=\"o\">:=</span> <span class=\"bp\">ðŸŒ´</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">â„¤</span> <span class=\"o\">:=</span> <span class=\"bp\">ðŸŒ´</span>\n</code></pre></div>",
        "id": 258789308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634945791
    },
    {
        "content": "<p>Should there be a <code>has_cons</code> class?</p>",
        "id": 258806586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634970080
    },
    {
        "content": "<p>In most cases <code>has_cons (Î± : out_param (Type u)) (Î² : Type v) := (cons : Î± â†’ Î² â†’ Î²)</code> will work but it will fail for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector\">docs#vector</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sym\">docs#sym</a>. What should be the signature?</p>",
        "id": 258806882,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634970550
    },
    {
        "content": "<p>Hmm, I see. Maybe those two can use their own subscripted notation?</p>",
        "id": 258806888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634970600
    },
    {
        "content": "<p>What Kyle said is accurate, Lean tries all specified overloads and fails if they are ambiguous.</p>",
        "id": 258925289,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635147376
    },
    {
        "content": "<p>For now in Lean 3, I'd suggest to have different notations for every cons.</p>",
        "id": 258925346,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635147425
    }
]