[
    {
        "content": "<p><code>set x</code> is defined as <code>x -&gt; Prop</code>. Why is this an invalid inductive? Is there a way to have an inductive contain functions over it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n<span class=\"bp\">|</span> <span class=\"n\">beta</span> <span class=\"o\">(</span><span class=\"n\">bars</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">of</span> <span class=\"n\">bar.beta</span> <span class=\"n\">has</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">positive</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>",
        "id": 221431856,
        "sender_full_name": "SnowFox",
        "timestamp": 1609645850
    },
    {
        "content": "<p>How would you map out of it?</p>",
        "id": 221432307,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609646756
    },
    {
        "content": "<p>What do you mean? The set should be little different than a list. It is just a function; as is list after erasing abstractions.</p>",
        "id": 221432510,
        "sender_full_name": "SnowFox",
        "timestamp": 1609647112
    },
    {
        "content": "<p>To define an inductive type you need to define its recursor, which tells you how to map out of the inductive type.</p>",
        "id": 221433199,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609648397
    },
    {
        "content": "<p>Constructors in inductive types (like <code>alpha</code> and <code>beta</code>) are provably injective. <br>\nYour <code>beta</code> gives an injection from <code>bar -&gt; Prop</code> into <code>bar</code>, contradicting Cantor's diagonal argument. So your inductive type would make the theory inconsistent.</p>",
        "id": 221433415,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609648812
    },
    {
        "content": "<p>Here is an answer to a similar earlier question: <a href=\"#narrow/stream/116395-maths/topic/question.20about.20game.20theory/near/162067308\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/question.20about.20game.20theory/near/162067308</a></p>",
        "id": 221433488,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609649011
    },
    {
        "content": "<p>Sorry, I don't follow. Mind elaborating?</p>",
        "id": 221436578,
        "sender_full_name": "SnowFox",
        "timestamp": 1609654690
    },
    {
        "content": "<p>The <code>beta</code> constructor is injective, but this implies that <code>set bar</code> is smaller than <code>bar</code>, which is a violation of Cantor's theorem, so you can prove false from the existence of <code>bar</code></p>",
        "id": 221438184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609657743
    },
    {
        "content": "<p>How is <code>set bar</code> different from <code>list bar</code> or even <code>bar</code>?</p>",
        "id": 221439625,
        "sender_full_name": "SnowFox",
        "timestamp": 1609660250
    },
    {
        "content": "<p><code>set bar</code> is the collection of all subsets of <code>bar</code>, i.e. the <a href=\"https://en.wikipedia.org/wiki/Power_set\">power set</a> of <code>bar</code>.</p>",
        "id": 221439895,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609660836
    },
    {
        "content": "<p>A list of bars already has unbounded cardinality.</p>",
        "id": 221439914,
        "sender_full_name": "SnowFox",
        "timestamp": 1609660913
    },
    {
        "content": "<p>That depends on <code>bar</code>. But it's irrelevant. <code>set bar</code> contains arbitrary collections of elements of <code>bar</code> and <code>list bar</code> only contains finite collections (and the order matters). That's the difference.</p>",
        "id": 221439980,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609660989
    },
    {
        "content": "<p>I see... Hmm. Thanks everyone.</p>",
        "id": 221440196,
        "sender_full_name": "SnowFox",
        "timestamp": 1609661342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328454\">@SnowFox</span> The general rule is that as long as the type operator has a cardinality-bounded number of \"slots\" into which to put the type being defined, an inductive type satisfying the condition exists. This is the \"bound\" in \"bounded natural functors\" that are used for the analogue of this kind of inductive construction in isabelle. In the case of <code>list</code>, the bound is <code>nat</code>, and you can do it in lean without even using nested inductives with <code>mk : (nat -&gt; bar) -&gt; bar</code>, and in fact you can even use <code>mk : (A -&gt; bar) -&gt; bar</code>, or even <code>mk (A : Type) : (A -&gt; bar) -&gt; bar</code>, where we are generalizing over all types in <code>Type</code>; in this case the cardinality bound lives in the next universe. But <code>set bar -&gt; bar</code> doesn't have a bounded number of slots at all, the number of slots just keeps growing as you add more elements. In lean, this is implemented through a syntactic check - <code>(bar -&gt; Prop) -&gt; bar</code> contains a use of <code>bar</code> on the left of the left of an arrow and that is not allowed.</p>",
        "id": 221443847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609668382
    }
]