[
    {
        "content": "<p>I'm trying to show that some class is a fintype. The <code>derive</code> handler doesn't quite work, because I need to also assume <code>decidable_eq</code>, so I tried to do it with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.mk_fintype_instance\">docs#tactic.mk_fintype_instance</a>. However, I get a weird error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_class</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">eq_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">my_class</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.mk_fintype_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>even though the <code>haveI</code> shows that this instance can be synthesized. Any ideas what goes wrong? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 238209823,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620679867
    },
    {
        "content": "<p>When this exact same thing happened to me (not with fintype, with some other typeclass which was in the instance cache) it turned out the problem was that there was another typeclass instance hidden in the goal which was not the one being picked up by type class inference (it was a classical v decidable eq one in my case). No idea if this is your problem but thought it was a funny coincidence that this also happened to me today.</p>",
        "id": 238210491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620680141
    },
    {
        "content": "<p>indeed, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.mk_fintype_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works so it was the same problem in some sense</p>",
        "id": 238210750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620680240
    },
    {
        "content": "<p>The two fintype expressions are not alpha equal. I will look at this more later but it looks like the terms being constructed by hand in <code>mk_finset</code> are not type correct, I think some unique names got messed up</p>",
        "id": 238215118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620682110
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7581\">#7581</a></p>",
        "id": 238333439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620748799
    }
]