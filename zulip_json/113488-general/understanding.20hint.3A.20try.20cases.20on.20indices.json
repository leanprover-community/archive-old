[
    {
        "content": "<p>I'm having trouble understanding a lean suggestion for an error I have. Firstly, I'm trying to define equality for an inductive type, MWE below:</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"n\">def</span> <span class=\"n\">type_map</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n   <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span>\n\n  <span class=\"kn\">instance</span> <span class=\"n\">has_deq_typemap_image</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">type_map</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n   <span class=\"bp\">|</span> <span class=\"mi\">0</span>            <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span>\n\n  <span class=\"c1\">--cannot @[derive decidable_eq]</span>\n  <span class=\"kn\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n   <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">type_map</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n  <span class=\"kn\">instance</span> <span class=\"n\">deq_foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"c1\">-- has error</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">is_true</span> <span class=\"n\">trivial</span><span class=\"o\">}</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">is_true</span> <span class=\"n\">trivial</span><span class=\"o\">}</span>\n   <span class=\"c1\">-- | _ (Foo.mk 0) (Foo.mk (nat.succ _)) := sorry -- if uncommented, then error on nat.succ _, expects 0</span>\n</code></pre></div>\n\n\n<p>I'm a bit weary of the last type signature, since it's important that it's not possible for an arbitrary type <code>i</code> to have <code>Foo i</code> (it's only possible to have <code>Foo nat</code> or <code>Foo bool</code>. But I suppose plugging in some other type should lead to absurdity, which implies decidable equality.</p>\n<p>In any case, I'd expect error to be that my patterns are incomplete, but instead it is  \"cases tactic failed, unsupported equality between type and constructor indices (only equalities between constructors and/or variables are supported, try cases on the indices): bool = type_map b_1\".  What exactly the hint is suggesting beyond what I already tried?</p>",
        "id": 203893666,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594763977
    },
    {
        "content": "<p>There's no way this could ever work in the VM anyways, so you might as well just use <code>classical</code> I guess.</p>",
        "id": 203893839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594764086
    },
    {
        "content": "<p>Oh wait maybe that's not true, I just noticed you have the data <code>i : nat</code>.</p>",
        "id": 203893869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594764118
    },
    {
        "content": "<p>Is this what you want? <code>Foo nat</code> is a <code>nat</code> that has to be zero. <code>Foo bool</code> is a <code>nat</code> that has to not be zero. Others are uninhabited.</p>",
        "id": 203894083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594764249
    },
    {
        "content": "<p>I think it would be possible to complete this approach, but mostly this seems like a strange thing to do...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">deq_Foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">aux</span><span class=\"o\">)</span> <span class=\"n\">heq_iff_eq</span>\n</code></pre></div>",
        "id": 203894980,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594764913
    },
    {
        "content": "<p>I'm not sure whether you can do it without making use of the fact that <code>bool</code> and <code>nat</code> happen to be provably unequal.</p>",
        "id": 203895289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594765112
    },
    {
        "content": "<p>This would achieve the same result with less mind-bending involved, I think:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">Foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">type_map</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 203895421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594765212
    },
    {
        "content": "<p>Regarding the original error, if you try to write the definition using recursors, I think you will see where things go wrong.</p>",
        "id": 203895565,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594765345
    },
    {
        "content": "<p>For context I was working on an application of Hoare logic involving types like <code>Expr A, Var A</code> where <code>Expr</code> and <code>Var </code> are <code>Type -&gt; Type</code>, but I had restricted the possible <code>A</code> types to the image of a function <code>Index  -&gt; Type</code> (for some inductive type <code>Index</code> with everything in the image having decidable equality). But I've now managed to restructure things a bit to avoid this weirdness. Still, your explanation of how to tackle this is very helpful for understanding Lean!</p>",
        "id": 203925481,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594799614
    }
]