[
    {
        "content": "<p>Just a heads-up, doc-gen has been failing the last two hours: <a href=\"https://github.com/leanprover-community/doc-gen/actions/runs/593756474\">https://github.com/leanprover-community/doc-gen/actions/runs/593756474</a></p>",
        "id": 227501629,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614113729
    },
    {
        "content": "<p>Looks like it's not able to load <code>export.json</code> for some reason:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Traceback (most recent call last):\n  File \"print_docs.py\", line 713, in &lt;module&gt;\n    main()\n  File \"print_docs.py\", line 701, in main\n    file_map, loc_map, notes, mod_docs, instances, tactic_docs = load_json()\n  File \"print_docs.py\", line 311, in load_json\n    decls = json.load(f, strict=False)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/json/__init__.py\", line 293, in load\n    return loads(fp.read(),\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/json/__init__.py\", line 370, in loads\n    return cls(**kw).decode(s)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n</code></pre></div>",
        "id": 227502267,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614114005
    },
    {
        "content": "<p>New lean version? The json serialization changed in master.</p>",
        "id": 227502934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614114251
    },
    {
        "content": "<p>doc-gen should be using the same version as mathlib though...</p>",
        "id": 227503697,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614114578
    },
    {
        "content": "<p>Hmm, I just ran <code>doc-gen</code> locally with the latest version of mathlib and <code>export.json</code> consists of only this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">entrypoint.lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 227506267,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614115646
    },
    {
        "content": "<p>That sounds like <code>mk_export_json</code> is failing. <a href=\"https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L360\">https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L360</a></p>",
        "id": 227506772,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614115852
    },
    {
        "content": "<p>Here's the diff between the last working and first failing commits: <a href=\"https://github.com/leanprover-community/mathlib/compare/391c90a3d...f84f5b2e23\">https://github.com/leanprover-community/mathlib/compare/391c90a3d...f84f5b2e23</a></p>",
        "id": 227506911,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614115915
    },
    {
        "content": "<p>Too late to troubleshoot tonight. I don't see any obvious issues there. Some missing backticks at <a href=\"https://github.com/leanprover-community/mathlib/compare/391c90a3d...f84f5b2e23#diff-2a1dceda3c5e1bdd94d303d1f1e6fe997ac50f4af68142421c676d0f9f6cd54bR126\">https://github.com/leanprover-community/mathlib/compare/391c90a3d...f84f5b2e23#diff-2a1dceda3c5e1bdd94d303d1f1e6fe997ac50f4af68142421c676d0f9f6cd54bR126</a></p>",
        "id": 227508761,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614116702
    },
    {
        "content": "<p>It seems to be something in <a href=\"https://github.com/leanprover-community/mathlib/blob/f84f5b2e2364c66682a58de79553937c55535f63/src/category_theory/subobject.lean\"><code>category_theory.subobject</code></a> since the docs build when I renamed the file.</p>",
        "id": 227514295,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614118522
    },
    {
        "content": "<p>Could it be due to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"bp\">«</span><span class=\"n\">exists</span><span class=\"bp\">»</span>\n</code></pre></div>\n<p>or other quoting like that? The <code>section «</code> is the only one I've grepped in mathlib.</p>",
        "id": 227516601,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614119614
    },
    {
        "content": "<p>Doesn't seem to be; I'm gradually commenting out parts of the file and I think I've narrowed it down to something in the module doc.</p>",
        "id": 227516703,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614119654
    },
    {
        "content": "<p>Oh wait, actually I think it's <a href=\"https://github.com/leanprover-community/mathlib/blob/f84f5b2e2364c66682a58de79553937c55535f63/src/category_theory/subobject.lean#L74\"><code>category_theory.mono_over</code></a>. The very first declaration, of course.</p>",
        "id": 227517153,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614119895
    },
    {
        "content": "<p>OK, I've found the line at which things are breaking, but I don't think I can make any further progress. <a href=\"https://github.com/leanprover-community/doc-gen/blob/e69db2af58366f5e68d1b6b5c17898d8f70cad70/src/export_json.lean#L323\">This line</a> in <code>get_instances</code> is failing on <code>category_theory.mono_over.has_coe</code> which is generated by <code>derive</code> <a href=\"https://github.com/leanprover-community/mathlib/blob/f84f5b2e2364c66682a58de79553937c55535f63/src/category_theory/subobject.lean#L74\">here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">class_nm</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"n\">e.get_app_fn</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 227519980,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614121242
    },
    {
        "content": "<p>I guess the pattern match fails?</p>",
        "id": 227520657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614121568
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.mono_over.has_coe\">docs#category_theory.mono_over.has_coe</a></p>",
        "id": 227520797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614121646
    },
    {
        "content": "<p>Oh, duh</p>",
        "id": 227520811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614121657
    },
    {
        "content": "<p>So the code which generates the docs is written in Lean??</p>",
        "id": 227521444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614121982
    },
    {
        "content": "<p>What does <code>#print category_theory.mono_over.has_coe</code> give?</p>",
        "id": 227521457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614121985
    },
    {
        "content": "<p>I had just assumed it was some dumb shell script looking for /-! etc</p>",
        "id": 227521525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614122040
    },
    {
        "content": "<p>The bit that dumps the metadata is written in lean</p>",
        "id": 227521589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614122051
    },
    {
        "content": "<p>I see!</p>",
        "id": 227521605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614122060
    },
    {
        "content": "<p>The bit that renders it is python</p>",
        "id": 227521616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614122067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/doc-gen.20is.20failing/near/227521457\">said</a>:</p>\n<blockquote>\n<p>What does <code>#print category_theory.mono_over.has_coe</code> give?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[instance]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">category_theory.mono_over.has_coe</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">v₁</span><span class=\"o\">)),</span> <span class=\"n\">has_coe</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">mono_over</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">coe_subtype</span>\n</code></pre></div>",
        "id": 227521655,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614122097
    },
    {
        "content": "<p>Maybe you should prove that the lean part works</p>",
        "id": 227521672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614122108
    },
    {
        "content": "<p>We're all waiting on mm0 for that <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 227521732,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614122145
    },
    {
        "content": "<p>Looks like the <code>delta_instances</code> derive_handler doesn't know how to delta-reduce its type</p>",
        "id": 227522004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614122289
    },
    {
        "content": "<p>Or possibly more insidiously, something about the category theory library makes it not reducible</p>",
        "id": 227522054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614122327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/doc-gen.20is.20failing/near/227522004\">said</a>:</p>\n<blockquote>\n<p>Looks like the <code>delta_instances</code> derive_handler doesn't know how to delta-reduce its type</p>\n</blockquote>\n<p>I think you mean β-reduce.  I'm surprised we didn't run into this earlier, derive is used pretty often.</p>",
        "id": 227564709,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155727
    },
    {
        "content": "<p>I tried to fix it here but there was a deterministic timeout in <code>topology/metric_space/cau_seq_filter</code> that I couldn't reproduce locally. <a href=\"https://github.com/leanprover-community/mathlib/tree/delta-instance-beta\">https://github.com/leanprover-community/mathlib/tree/delta-instance-beta</a></p>",
        "id": 227566201,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614156545
    },
    {
        "content": "<p>Re-running CI in case that was a fluke, not sure what's going on.</p>",
        "id": 227566227,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614156561
    },
    {
        "content": "<blockquote>\n<p>I think you mean β-reduce. I'm surprised we didn't run into this earlier, derive is used pretty often.</p>\n</blockquote>\n<p>I'm not sure how often we use non-beta-reduced instances with derive, although I would have guessed more than never.</p>",
        "id": 227566410,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614156661
    },
    {
        "content": "<p>I'm currently trying to fix the doc-gen side.</p>",
        "id": 227566415,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614156667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/doc-gen.20is.20failing/near/227566410\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how often we use non-beta-reduced instances with derive, although I would have guessed more than never.</p>\n</blockquote>\n<p>We definitely have tests for the non-beta-reduced instances, but I suspect there are no other uses. When I made the change to improve instance names, I was primarily concerned about <code>semimodule R</code> not <code>λ R, semimodule R M</code>, and I only remember fixing references to cases of the former being renamed.</p>",
        "id": 227566757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614156886
    },
    {
        "content": "<p>The doc-gen side is hopefully fixed now.</p>",
        "id": 227567217,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614157124
    },
    {
        "content": "<p>Can we add doc-gen to the <a class=\"stream\" data-stream-id=\"116290\" href=\"/#narrow/stream/116290-rss\">#rss</a> stream?</p>",
        "id": 227567556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614157309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I think you're in charge of the rss bot, right?</p>",
        "id": 227567704,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614157372
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/doc-gen\">https://github.com/leanprover-community/doc-gen</a></p>",
        "id": 227567708,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614157375
    },
    {
        "content": "<p>Now where did I put the bot...</p>",
        "id": 227567808,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614157426
    },
    {
        "content": "<p>It's under your bed (-;</p>",
        "id": 227567890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614157457
    },
    {
        "content": "<p>would explain the weird dreams</p>",
        "id": 227568088,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614157579
    },
    {
        "content": "<p>Ok, should work now</p>",
        "id": 227568119,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1614157607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/doc-gen.20is.20failing/near/227566201\">said</a>:</p>\n<blockquote>\n<p>I tried to fix it here but there was a deterministic timeout in <code>topology/metric_space/cau_seq_filter</code> that I couldn't reproduce locally. <a href=\"https://github.com/leanprover-community/mathlib/tree/delta-instance-beta\">https://github.com/leanprover-community/mathlib/tree/delta-instance-beta</a></p>\n</blockquote>\n<p>This passed CI this time without changing anything, which is slightly worrying. We don't usually see deterministic timeouts as glitches, do we?</p>",
        "id": 227569208,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614158190
    },
    {
        "content": "<p>It's uncommon, but not impossible.</p>",
        "id": 227569416,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614158288
    },
    {
        "content": "<p>My gut feeling is that <code>dsimplify</code> is a bit overkill here.</p>",
        "id": 227569469,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614158319
    },
    {
        "content": "<p>I've seen PRs fail with deterministic timeouts then pass after adding an empty commit</p>",
        "id": 227569704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614158467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/doc-gen.20is.20failing/near/227569469\">said</a>:</p>\n<blockquote>\n<p>My gut feeling is that <code>dsimplify</code> is a bit overkill here.</p>\n</blockquote>\n<p>What's better? <code>whnf</code> doesn't do the trick</p>",
        "id": 227569744,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614158501
    },
    {
        "content": "<p>I'd use an <code>open_pis</code> + <code>whnf transparency.none</code> + <code>pis</code></p>",
        "id": 227571516,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614159402
    },
    {
        "content": "<p>Hmm, I've just run into the timeout in another PR which does not include your fix: <a href=\"https://github.com/leanprover-community/mathlib/runs/1970111768?check_suite_focus=true\">https://github.com/leanprover-community/mathlib/runs/1970111768?check_suite_focus=true</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">metric_space</span><span class=\"bp\">/</span><span class=\"n\">cau_seq_filter.lean</span><span class=\"o\">:</span><span class=\"mi\">84</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n</code></pre></div>",
        "id": 227604009,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614176118
    },
    {
        "content": "<p>I just pushed a commit to <code>doc-gen</code> and got a notification that the build failed. However, <a href=\"https://github.com/leanprover-community/doc-gen/runs/2025942253?check_suite_focus=true\">the failure</a> is at the parsing of <code>export.json</code> again and <a href=\"https://github.com/leanprover-community/doc-gen/commit/70ff2ac21ffe29405858c025b06778d4b5cfdca9\">my change to a regex in the markdown rendering</a> shouldn't have affected this at all. </p>\n<p>Investigating now...</p>",
        "id": 228676699,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614809007
    }
]