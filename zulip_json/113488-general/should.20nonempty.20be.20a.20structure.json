[
    {
        "content": "<p>This came up here: <a href=\"https://github.com/leanprover-community/mathlib/pull/1964#discussion_r375744750\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1964#discussion_r375744750\">https://github.com/leanprover-community/mathlib/pull/1964#discussion_r375744750</a><br>\nI have no idea if it is important that it is an inductive type</p>",
        "id": 187539808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580988448
    },
    {
        "content": "<p>Repeating what I said there: <code>nonempty</code> can't be a structure, because it doesn't have projections. It is possible to define <code>class my_nonempty (A) : Prop := (foo : nonempty A)</code> and now it's a structure, but this has some unusual behavior when you attach it to another structure <code>bar A</code>  via <code>extends</code>. In particular, the <code>foo</code> projection will become a projection on <code>bar</code> as well, in addition to <code>to_nonempty : bar A -&gt; my_nonempty A</code>.</p>\n<p>My suggestion is to just put <code>(to_nonempty : nonempty A)</code> as a field on <code>bar</code> if you need it, and add an instance. It's not a structure.</p>",
        "id": 187559580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581004099
    }
]