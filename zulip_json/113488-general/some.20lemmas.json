[
    {
        "content": "<p>Any opinions on adding these?</p>\n<div class=\"codehilite\"><pre><span></span>lemma int.succ_ne_self (n : ℤ) : n + 1 ≠ n :=\nλ h, one_ne_zero ((add_left_inj n).mp (by { convert h, simp }))\nlemma int.pred_ne_self (n : ℤ) : n - 1 ≠ n :=\nλ h, one_ne_zero (neg_inj ((add_left_inj n).mp (by { convert h, simp })))\n</pre></div>\n\n\n<p>I couldn't find them in mathlib.</p>",
        "id": 177981574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570875426
    },
    {
        "content": "<p>They're true in ring with <code>0 \\ne 1</code>. Maybe even semiring.</p>",
        "id": 177981854,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570875891
    },
    {
        "content": "<p>The second doesn't make sense in a semiring... for the former you need something cancellative</p>",
        "id": 177981921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570875984
    },
    {
        "content": "<p>Does <code>int</code> have some typeclass already that asserts <code>0 \\ne 1</code>?</p>",
        "id": 177981998,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570876127
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example : zero_ne_one_class ℤ := infer_instance\n</pre></div>",
        "id": 177982024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570876171
    },
    {
        "content": "<p>There is <code>nonzero_comm_ring</code>. I don't think there is <code>nonzero_ring</code> though.</p>",
        "id": 177982105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570876293
    },
    {
        "content": "<p>I'll just write the lemma with [zero_ne_one_class R] and [ring R]?</p>",
        "id": 177982168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570876390
    },
    {
        "content": "<p>I think you than have two incompatible zeros?</p>",
        "id": 177982172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570876418
    },
    {
        "content": "<p>And two ones...</p>",
        "id": 177982176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570876423
    },
    {
        "content": "<p>... yes.</p>",
        "id": 177982231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570876488
    },
    {
        "content": "<p>Okay, sorted it out. Shall I put this in a separate PR? (I'm tempted to just roll it into the PR that needs these lemmas...)</p>",
        "id": 177982649,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570877175
    },
    {
        "content": "<p>How about</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">ne_of_gt</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pred_ne_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">ne_of_lt</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">pred_self_lt</span>\n</pre></div>",
        "id": 177985192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570881466
    },
    {
        "content": "<p>The first one should be done for a <code>nonzero_comm_semiring</code>.</p>",
        "id": 177999445,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570902806
    },
    {
        "content": "<p>Or is it false in that case?</p>",
        "id": 177999585,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570903024
    },
    {
        "content": "<p>I think {0, 1}, 1 + 1 = 1 is a semiring</p>",
        "id": 177999673,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570903197
    },
    {
        "content": "<p>I've stuck with the proof via <code>nonzero_comm_ring</code>, <a href=\"https://github.com/leanprover-community/mathlib/pull/1540/files#diff-997c56fe87e1352880681d783e610a7f\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1540/files#diff-997c56fe87e1352880681d783e610a7f\">https://github.com/leanprover-community/mathlib/pull/1540/files#diff-997c56fe87e1352880681d783e610a7f</a>, just because it's more general (but not as general as possible, which would require adjusting the algebraic hierarchy for very little gain).</p>",
        "id": 178024161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570948908
    }
]