[
    {
        "content": "<p>I'm running into the following problem. I've built an expression<br>\n<code>@equiv.arrow_congr.{1 1 1 ?l_1} α α ?m_2 ?m_3 ?m_4 ?m_5</code><br>\nwhich Lean tells me has type <br>\n<code>equiv.{1 (imax 1 ?l_1)} (α → α) (?m_2 → ?m_3)</code><br>\nI want to unify this with another expression<br>\n<code>?m_1</code><br>\nwith type<br>\n<code>equiv.{1 ?l_1} (α → α) ?m_2)</code>.</p>\n<p>To me that looks good, and unification should succeed. But it doesn't. :-( Can anyone guess what is going on?</p>",
        "id": 191694366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585101203
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 191694554,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585101408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> sorry, copy-paste error which I've just fixed.</p>",
        "id": 191694570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585101452
    },
    {
        "content": "<p>Ah, I seem to have found the problem. With <code>set_option pp.purify_metavars false</code>, we instead see that the two types are:</p>\n<div class=\"codehilite\"><pre><span></span>equiv.{1 (imax 1 ?l__fresh.1092.218230)} (α → α) (?m__fresh.1092.218696 → ?m__fresh.1092.218697)\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>equiv.{1 ?l__fresh.1092.218230} (α → α) ?m__fresh.1092.218370\n</pre></div>",
        "id": 191694636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585101517
    },
    {
        "content": "<p>and we can see why unification fails: the two <code>?l_1</code>s  must be the same, so <code>(imax 1 ?l_1)</code> isn't unifying with <code>?l_1</code>.</p>",
        "id": 191694718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585101622
    },
    {
        "content": "<p>That's a bit weird, actually. Aren't they always equal, for any <code>?l_1</code>?</p>",
        "id": 191694736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585101658
    },
    {
        "content": "<p>I guess Lean can't see that <code>?l_1 = (imax 1 ?l_1)</code>. Can anyone who knows universe level unification confirm that this is a plausible explanation?</p>",
        "id": 191695657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585103083
    },
    {
        "content": "<p>I guess my workaround is going to be to avoid <code>Sort</code>.</p>",
        "id": 191695665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585103103
    },
    {
        "content": "<p>Page 2 of Mario's <a href=\"https://github.com/digama0/lean-type-theory/releases\" title=\"https://github.com/digama0/lean-type-theory/releases\">thesis</a> has the universe unification rules. I can't find a way of deducing <code>?l_1 = (imax 1 ?l_1)</code> from the rules given.</p>",
        "id": 191699974,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585109595
    },
    {
        "content": "<p>Using the universe unification rules in my thesis, you can prove that and many other things, but crucially you have to use the split rule to case on whether <code>?l_1</code> is 0 or not, and lean doesn't have that rule, it has a fixed finite set of simplifications and that's it</p>",
        "id": 191701626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585112371
    },
    {
        "content": "<p>The way the proof goes is that <code>imax 1 0 = 0</code> and <code>imax 1 (suc u) = max 1 (suc u) = suc (max 0 u) = suc u</code>, so <code>imax 1 v = v</code></p>",
        "id": 191701687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585112458
    },
    {
        "content": "<p>this is the way trepplein does universe checking</p>",
        "id": 191701697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585112501
    },
    {
        "content": "<p>This was a really confusing and hard to debug issue. :-( I understand the issue now, but it took me forever to work out that the problem I was having (solve_by_elim refusing to apply a lemma that worked fine by hand) had as its root cause a universe issue.</p>",
        "id": 191703261,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585115322
    },
    {
        "content": "<p>What is the actual goal? I'm curious how this unification constraint can come up</p>",
        "id": 191703343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585115490
    },
    {
        "content": "<p>Hmm... it will be a bit hard to re-extract, actually. I'll see if I can dig it out.</p>",
        "id": 191703403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585115580
    }
]