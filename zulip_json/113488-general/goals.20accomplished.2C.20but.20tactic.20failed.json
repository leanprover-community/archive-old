[
    {
        "content": "<p>In the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, when I put the cursor at the end of the <code>simp</code> line I get <code>goals accomplished</code> in the Info View window, but I also get a red underline on <code>end</code> with the error <code>tactic failed, result contains meta-variables</code>.  How is this proof both succeeding and failing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorization</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">n.factors.to_finset</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">decidable.eq_or_ne</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">multiset.to_finset_prod_dvd_prod</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.prod_factors</span> <span class=\"n\">hn0.bot_lt</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269875845,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643475879
    },
    {
        "content": "<p>Does this happen if yoh turn it into a <code>lemma</code>?</p>",
        "id": 269876480,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643476565
    },
    {
        "content": "<p>Yes it does</p>",
        "id": 269876496,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643476590
    },
    {
        "content": "<p>Tactics can modify the tactic state arbitrarily and so if they have bugs situations like this can occur. The kernel always has the final day on whether a proof is ok or not, so what you are seeing is a tactic thinking it took care of everything but the kernel saying some part of the proof is still missing. You can use the tactic <code>recover</code> to make goals for the metavariables. But if indeed this is a tactic bug it's probably worth minimizing and reporting</p>",
        "id": 269877157,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643477361
    },
    {
        "content": "<p>Thanks.  Appending <code>recover</code> reveals that what's missing is <code>decidable_eq ℕ</code>, which I guess was a goal generated by <code>convert multiset.to_finset_prod_dvd_prod</code>?</p>",
        "id": 269878025,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643478415
    },
    {
        "content": "<p>On the way to minimising this, the following produces the same error, while changing <code>convert</code> to <code>exact</code> closes the goal with no problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorization</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L.to_finset.prod</span> <span class=\"n\">id</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">multiset.to_finset_prod_dvd_prod</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269878843,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643479266
    },
    {
        "content": "<p>Just to note that <code>multiset.to_finset_prod_dvd_prod</code> is something I added in <a href=\"https://github.com/leanprover-community/mathlib/pull/11693\">#11693</a> that was merged yesterday.  Is there any way this could be a problem that I've introduced, or is it purely a bug in <code>convert</code> that I've just turned up by chance?</p>",
        "id": 269879027,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643479462
    },
    {
        "content": "<p>no, definitely a bug in <code>convert</code></p>",
        "id": 269879047,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643479477
    },
    {
        "content": "<p>or maybe in <code>tactic.congr'</code>, actually</p>",
        "id": 269879061,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643479499
    },
    {
        "content": "<p>I think the middle line is the only thing that could go wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">],</span>\n  <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic.congr'</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">gs'</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"bp\">$</span> <span class=\"n\">gs'</span> <span class=\"bp\">++</span> <span class=\"n\">gs</span>\n</code></pre></div>\n<p>(lines 189-193 of congr.lean)</p>",
        "id": 269879091,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643479537
    },
    {
        "content": "<p>I'm going to try figure this out</p>",
        "id": 269879097,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643479550
    },
    {
        "content": "<p>also today I learned that <code>convert</code> supports <code>←</code> to say that you want the equalities the other way round</p>",
        "id": 269880988,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643481718
    },
    {
        "content": "<p>if you want a solution, <code>convert ... using 0</code> should fix it</p>",
        "id": 269881811,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643482694
    },
    {
        "content": "<p>I'm really not sure why but there you are</p>",
        "id": 269881819,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643482705
    },
    {
        "content": "<p>I usually just fiddle the tactics until it works.</p>",
        "id": 269881835,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643482747
    },
    {
        "content": "<p>metaprogramming thread about this: <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60convert.60.3A.20why.20does.20it.20use.20.60reflexivity.20transparency.2Enone.60.3F\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60convert.60.3A.20why.20does.20it.20use.20.60reflexivity.20transparency.2Enone.60.3F</a></p>",
        "id": 269882617,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643483605
    },
    {
        "content": "<p>Huh, I didn't know about <code>convert ... using ...</code>, which isn't in the documentation for <code>convert</code>. What exactly does it do?</p>",
        "id": 269886097,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643487338
    },
    {
        "content": "<p>\"Don't go so deep\"</p>",
        "id": 269886272,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1643487544
    },
    {
        "content": "<p><code>convert</code> seems to me (by a rough reading) to basically basically be \"make the prop <code>target = goal</code> and try use <code>congr</code> to prove it\". <code>using</code> controls the deepness of that <code>congr</code></p>",
        "id": 269886280,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643487553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113488-general/topic/goals.20accomplished.2C.20but.20tactic.20failed/near/269886097\">said</a>:</p>\n<blockquote>\n<p><code>convert ... using ...</code>, which isn't in the documentation for <code>convert</code></p>\n</blockquote>\n<p>It's hidden in the last two sentences of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#convert\">tactic#convert</a></p>",
        "id": 269886541,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643487783
    },
    {
        "content": "<p>It would be nice if the tactic documentation would have the full syntax of each tactic -- this could be automatically generated from the type of an interactive tactic, right?</p>",
        "id": 269886542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643487784
    },
    {
        "content": "<p>Oh, so it is!</p>",
        "id": 269886991,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643488270
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">convert</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">tactic.interactive</span> <span class=\"bp\">++</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">[])</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">open_pis</span><span class=\"o\">,</span>\n  <span class=\"n\">fs</span> <span class=\"bp\">←</span> <span class=\"n\">args.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">arg</span><span class=\"o\">,</span> <span class=\"n\">infer_type</span> <span class=\"n\">arg</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">interactive.param_desc</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">format.join</span> <span class=\"o\">(</span><span class=\"n\">to_fmt</span> <span class=\"n\">name</span> <span class=\"o\">::</span> <span class=\"n\">fs.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"s2\">\" \"</span> <span class=\"bp\">++</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n<span class=\"c1\">-- convert ← expr (using n)?</span>\n</code></pre></div>",
        "id": 269887398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643488790
    },
    {
        "content": "<p>that is roughly what the C++ code is doing to show you the tactic description in the hover</p>",
        "id": 269887458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643488859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/goals.20accomplished.2C.20but.20tactic.20failed/near/269879097\">said</a>:</p>\n<blockquote>\n<p>I'm going to try figure this out</p>\n</blockquote>\n<p>Were you able to make any progress on tracking down this bug?  </p>\n<p>(Meanwhile I've found an alternative proof that doesn't use <code>convert</code>, but I'm still curious about what was going on here.)</p>",
        "id": 271185963,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644351957
    },
    {
        "content": "<p>It's to do with the reflexivity check in convert, but I'm still not too sure why...</p>",
        "id": 271186509,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644352229
    }
]