[
    {
        "content": "<p>I would like to show</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">ρ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">ρ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>where multiplication is in a comm_ring hence is associative, however I cannot use conv as it cannot synthesis μ.to_fun as it is a function. Any tips?</p>",
        "id": 130723162,
        "sender_full_name": "Morenikeji Neri",
        "timestamp": 1533138773
    },
    {
        "content": "<p>all sorted</p>",
        "id": 130725250,
        "sender_full_name": "Morenikeji Neri",
        "timestamp": 1533140978
    },
    {
        "content": "<p>I recommend you make a minimal working example so that people can have a look inside of a Lean session. </p>\n<p>I think <code>congr' 1, ext, rw mul_assoc</code> could help.</p>",
        "id": 130725742,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533141587
    }
]