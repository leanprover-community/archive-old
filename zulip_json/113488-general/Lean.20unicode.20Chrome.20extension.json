[
    {
        "content": "<p>I'm building a Chrome extension that will allow us to use unicode characters here on Zulip (or on other sites if we want).</p>\n<p>It's still WIP, but it already works with \"\\\" as escaping key. Press \"alt\" twice to toggle it on/off.<br>\n<a href=\"https://github.com/arthurpaulino/chrome-lean-unicode\">https://github.com/arthurpaulino/chrome-lean-unicode</a></p>\n<p>Note: not on store yet</p>",
        "id": 271498610,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644529208
    },
    {
        "content": "<p>Can it be configured to only be turned on for Zulip?</p>",
        "id": 271499076,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644529386
    },
    {
        "content": "<p>Yeah, that's the current configuration (you can see it on the manifest file)</p>",
        "id": 271499895,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644529679
    },
    {
        "content": "<p>The configurable settings will be:</p>\n<ul>\n<li>The escaping character</li>\n<li>Whether to have it activated by default or not when visiting the Tulip website</li>\n</ul>",
        "id": 271500678,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644530098
    },
    {
        "content": "<p>This would be nice for leaving comments in PRs on Github too</p>",
        "id": 271503361,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1644531271
    },
    {
        "content": "<p>Once I learn how to make the popup for the settings, adding those configurations will be pretty easy</p>",
        "id": 271508365,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644534611
    },
    {
        "content": "<p>BTW I have no idea how but thanks to <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I can write ℝ on my Android phone on the Zulip app with \\R</p>",
        "id": 271543314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644567598
    },
    {
        "content": "<p>The Zulip thread describing how can be found by searching zulip for \"UDM\" (I can't work out how to get a thread link from mobile)</p>",
        "id": 271543566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644567752
    },
    {
        "content": "<p><strong>Unicode input on Android</strong>: <a href=\"#narrow/stream/113488-general/topic/Unicode.20input.20on.20android\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Unicode.20input.20on.20android</a></p>",
        "id": 271544358,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644568310
    },
    {
        "content": "<p>/poll If you're intending to use the extension, please let me know the escaping character (so I can avoid bugs in the regex)<br>\n\\<br>\n,<br>\n.<br>\n;</p>",
        "id": 271720301,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644715946
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271720322,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644715991
    },
    {
        "content": "<p>It's worth mentioning also that for those on Linux, an option for system-wide Lean abbreviations is Gabriel's <a href=\"https://github.com/gebner/m17n-lean\">m17n-lean</a>.</p>",
        "id": 271726892,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1644727039
    },
    {
        "content": "<p>Gabriel's solution just gave me an idea for a system wide cross platform (except for smartphones) solution using Python and <code>pynput</code>.</p>\n<p>But I am already satisfied with the options we have available (unless a real need appears)</p>",
        "id": 271738396,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644746700
    },
    {
        "content": "<p>The first version of the extension is ready!<br>\n<a href=\"https://github.com/arthurpaulino/chrome-lean-unicode\">https://github.com/arthurpaulino/chrome-lean-unicode</a><br>\nInstructions in the README. Please do report bugs, behavior changes and/or feature requests as issues<br>\n<a href=\"/user_uploads/3121/HreKNcLjUxw3IjhyFSSjmcZV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HreKNcLjUxw3IjhyFSSjmcZV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HreKNcLjUxw3IjhyFSSjmcZV/image.png\"></a></div>",
        "id": 271758802,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644777207
    },
    {
        "content": "<p>Hi Arthur, very nice! Will it work also in the Zulip app or only accessing Zulip website on Chrome?</p>",
        "id": 271766431,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644787659
    },
    {
        "content": "<p>Only in Chrome. If you're on a smartphone, <a href=\"#narrow/stream/113488-general/topic/Unicode.20input.20on.20android/near/241133076\">Eric's solution</a> might work better</p>",
        "id": 271766911,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644788337
    },
    {
        "content": "<p>It works like a charm for me! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 272101780,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645009736
    },
    {
        "content": "<p>Thank you very much for doing this <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Great work!</p>\n<p>Is there any hope of something similar for us Firefox users who refuse to use Chrome?</p>",
        "id": 272103146,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645010550
    },
    {
        "content": "<p>And in the search box for VSCode <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 272103295,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645010646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20unicode.20Chrome.20extension/near/272103146\">said</a>:</p>\n<blockquote>\n<p>Thank you very much for doing this <span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> Great work!</p>\n<p>Is there any hope of something similar for us Firefox users who refuse to use Chrome?</p>\n</blockquote>\n<p>Oh, I have no idea how to make it work in Firefox. Actually I had no idea how to make it work in Chrome either. It was my first extension <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> <br>\nWould totally appreciate some help in expanding it tho!</p>\n<p>BTW: I don't use Chrome exactly. I use Chromium and it works nicely for me</p>",
        "id": 272113555,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645017285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20unicode.20Chrome.20extension/near/272103295\">said</a>:</p>\n<blockquote>\n<p>And in the search box for VSCode <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>The only idea that comes to my mind to make it work in multiple applications like that is some kind of system app of its own (as opposed to a browser extension).</p>\n<p>As I said before, I do have an idea using a Python script that reads input with a lib called <code>pynput</code>.</p>",
        "id": 272114009,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645017566
    },
    {
        "content": "<p>If you're looking for system-wide support, there's <a href=\"https://github.com/gebner/m17n-lean\">m17n-lean</a>.  It works in vscode, the terminal, browsers, etc.  It's Linux-only though, I'm not sure what the best approach is for Windows/Mac.</p>",
        "id": 272114372,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645017764
    },
    {
        "content": "<p>Something like <a href=\"https://espanso.org/\">https://espanso.org/</a> seems to be flexible enough</p>",
        "id": 272114469,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1645017831
    },
    {
        "content": "<p>I use WinCompose (not quite equivalent) in Windows, I haven't figured out a Mac alternative yet (although I haven't spent the full time trying to get m17n-lean work)</p>",
        "id": 272114565,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645017861
    },
    {
        "content": "<p>I'd look into <a href=\"https://karabiner-elements.pqrs.org/\">karabiner</a> for macOS, it may be able to do this and is a standardish thing people use for low level keyboard things.</p>",
        "id": 272114690,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645017922
    },
    {
        "content": "<p>We should put a list with links to all these extensions on the website.  Is your WinCompose plugin public?</p>",
        "id": 272114728,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645017950
    },
    {
        "content": "<p>I don't really use a plugin, I turn off a couple features that make like &lt;compose&gt; a* into å and instead make it \\alpha (there's overlapping keybinds by default), but otherwise much the default. I'll try and post the full setup when I'm back to my Windows PC</p>",
        "id": 272114960,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645018074
    },
    {
        "content": "<p>Nice to have so many options, although I think it would be better if we had a default solution for the community that works on any OS or any app (terminal, browser, vscode etc). Question is: who would be willing to develop/maintain/support it? I would <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 272118319,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645019796
    },
    {
        "content": "<p>The solution I'm thinking is using <code>pynput</code> to monitor and control the keyboard. When a replaceable string is observed, the script simulates the user hitting backspace really fast a certain number of times and then typing out the corresponding unicode character. Does it sound too hacky? In theory, looks pretty easy to get it going (I have previous experience using <code>pynput</code>)</p>",
        "id": 272118669,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645019949
    },
    {
        "content": "<p>This solution is simpler and more lightweight than the chrome extension I developed</p>",
        "id": 272118898,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645020024
    },
    {
        "content": "<p>I think it would be pretty jarring to have simulated backspace presses.  For example what happens if you move the cursor using the mouse between typing <code>\\alph</code> and <code>a</code>?</p>",
        "id": 272119085,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645020091
    },
    {
        "content": "<p>moving the mouse (or rather, clicking with the mouse) would cancel/reset the buffering (it's possible to monitor the mouse too). But yeah, good catch</p>",
        "id": 272119326,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645020193
    },
    {
        "content": "<p>I guess I can only find out by making a simple PoC and experimenting with it</p>",
        "id": 272119912,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645020452
    },
    {
        "content": "<blockquote>\n<p>works on any OS or any app</p>\n</blockquote>\n<p>I don't think that's technically feasible.  E.g. the pynput approach that you've described won't work on android (since you can't capture the keyboard input).</p>\n<p>It's important to use the same set of abbreviations for all the plugins, but we're doing that already by copying the <code>abbreviations.json</code> file.</p>",
        "id": 272119927,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645020458
    },
    {
        "content": "<p>Good point! For smartphones it's pretty much uncharted territory. Because there's Android and iOS</p>",
        "id": 272120140,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645020539
    },
    {
        "content": "<p>(Although Eric found a solution for Android)</p>",
        "id": 272120181,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645020564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20unicode.20Chrome.20extension/near/272114469\">said</a>:</p>\n<blockquote>\n<p>Something like <a href=\"https://espanso.org/\">https://espanso.org/</a> seems to be flexible enough</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> This seems to do exactly what you want. I runs on Win, Mac, Linux. I guess you'd just have to write a configuration file.</p>",
        "id": 272121197,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645021042
    },
    {
        "content": "<p>Oh, they even have some sort of store: <a href=\"https://hub.espanso.org/\">https://hub.espanso.org/</a></p>",
        "id": 272121714,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645021235
    },
    {
        "content": "<p>I use it, it's great. Sample configuration file:</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">matches</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">trigger</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"/s/\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">replace</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"{</span><span class=\"nv\"> </span><span class=\"s\">sorry</span><span class=\"nv\"> </span><span class=\"s\">}\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(very useful for lean ...)</p>",
        "id": 272122078,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1645021417
    },
    {
        "content": "<p>Generating the whole list from the one in m17n-lean for instance would be a one-line <code>sed</code> command. The only issue I'm not sure about is choosing the trigger character not to interfere with other software, typically for LaTeX, but in any case switching it on and off is very quick with a hotkey.</p>",
        "id": 272122318,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1645021534
    },
    {
        "content": "<blockquote>\n<p>Toggle Key<br>\nThere are times when you may want to disable espanso to avoid an unwanted expansion. This can be easily accomplished by quickly double pressing the ALT key ( Option on MacOS ). You should then see a notification showing \"Espanso disabled\".<br>\nAt this point, espanso will be disabled and will not expand any match. To re-enable it, double press the ALT key again.</p>\n</blockquote>",
        "id": 272122490,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645021610
    },
    {
        "content": "<p>Funny that they chose the same method that I did: hitting ALT twice<br>\n(more precisely, I chose the same method that they did because they did it first <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> )</p>",
        "id": 272122576,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645021656
    },
    {
        "content": "<p>The <strong>only</strong> issue that I see is that there's no concept of \"escaping key\". It's all based on matches so people that use different escaping keys for unicode would have to have different configuration files</p>",
        "id": 272122959,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645021848
    },
    {
        "content": "<p>This would be really helpful for me. I'm not techy enough to get Gabriel's solution working on my laptop but right now I'm writing Lean code in rst files and constantly having to cut and paste from VS Code lean scratch files. </p>\n<p>Writing this it occurs to me that it's worth asking whether it's easy to make \\alpha work in rst files in e.g. VS Code.</p>",
        "id": 272125638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645023110
    },
    {
        "content": "<p>Ideally the extension would ask for more file extensions for which the abbreviations would be triggered so the user could add txt, rst, md etc. But I don't know if that's easy either</p>",
        "id": 272127807,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645024072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I think Gabriel seems to have left instructions for how to do so here -- <a href=\"https://github.com/leanprover/vscode-lean/issues/278#issuecomment-889720492\">https://github.com/leanprover/vscode-lean/issues/278#issuecomment-889720492</a></p>",
        "id": 272127881,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645024096
    },
    {
        "content": "<p>(Add rst instead of agda obviously)</p>",
        "id": 272127900,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645024104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20unicode.20Chrome.20extension/near/272122078\">said</a>:</p>\n<blockquote>\n<p>I use it, it's great. Sample configuration file:</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">matches</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">trigger</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"/s/\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">replace</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"{</span><span class=\"nv\"> </span><span class=\"s\">sorry</span><span class=\"nv\"> </span><span class=\"s\">}\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(very useful for lean ...)</p>\n</blockquote>\n<p>VScode already have you covered here. You can define as many code snippets as you want.</p>",
        "id": 272128256,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645024269
    },
    {
        "content": "<blockquote>\n<p>Would it not be possible to make the abbreviation part a separate git repository, then include it as a submodule here as well as upload it as a separate plugin? Then new users to Lean would have it no harder to install the plugin, and people who want to use ergonomic unicode input can install it as a separate plugin and use it in whatever language the choose.</p>\n</blockquote>\n<p>I think that's a neat idea. Writing unicode and communicating with Lean server seem like separate scopes enough to be in different plugins. It would also avoid duplication of code for doing the same thing in the Lean 3 and Lean 4 extensions.</p>",
        "id": 272128907,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645024542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20unicode.20Chrome.20extension/near/272128256\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20unicode.20Chrome.20extension/near/272122078\">said</a>:</p>\n<blockquote>\n<p>I use it, it's great. Sample configuration file:</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">matches</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">trigger</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"/s/\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">replace</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"{</span><span class=\"nv\"> </span><span class=\"s\">sorry</span><span class=\"nv\"> </span><span class=\"s\">}\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(very useful for lean ...)</p>\n</blockquote>\n<p>VScode already have you covered here. You can define as many code snippets as you want.</p>\n</blockquote>\n<p>You can also add extra completions to the lean extension in the vscode <code>settings.json</code> e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"lean.input.customTranslations\"</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"s2\">\"so\"</span><span class=\"o\">:</span> <span class=\"s2\">\"{ sorry }\"</span><span class=\"o\">},</span>\n</code></pre></div>\n<p>makes <code>\\so</code> complete to <code>{sorry}</code></p>",
        "id": 272135492,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645027300
    },
    {
        "content": "<p>The snippet mechanism is a more powerful version: <a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets\">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p>",
        "id": 272136236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645027555
    },
    {
        "content": "<p>but indeed a custom translation is enough for that sorry thing</p>",
        "id": 272136329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645027575
    },
    {
        "content": "<p>I should probably learn to use vscode a bit better ... It still makes sense to have a global option in order to type lean code in the zulip app, in email or whatever, even if it is less powerful</p>",
        "id": 272140574,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1645029331
    },
    {
        "content": "<p>Updates: I tried my approach and there were two problems:</p>\n<ul>\n<li>Simulating <code>backspace</code> is mysteriously slow and makes the OS stutter a bit, which is rather annoying</li>\n<li><code>pynput</code> triggers recent macOS' security system and requires root to run (thanks for the heads up <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span>!)<br>\nMy goal was to make something simpler, more focused and convenient for our use case, but it seems like those who want a system wide solution will have a better chance with the other alternatives posted above <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></li>\n</ul>",
        "id": 272161437,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645037772
    },
    {
        "content": "<p>What I do when I wanna type lean code up in a non Emacs text field is use a slightly modified version of <a href=\"https://github.com/tecosaur/emacs-everywhere\">https://github.com/tecosaur/emacs-everywhere</a> that just instantly drops me to some lean file in a lake project I have laying around just for this where I can type either my lean code or with the power of the lean input method just normal utf-8 in a lean comment, then I close it and what was in the buffer gets automatically copied to my clipboard so I can just paste it here. Maybe you could implement something similar with vscode? This seems a lot easier and more general purpose than having an extesion specific to one browser and you get all the benefits of a full lean editor for free.</p>\n<p>The only extra thing apart from the plugin (and my slight mod to make it lean specific) was that I had to register a custom keybinding in my window manager that opens my emacs in this specific state. I know from the readme that this is possible on both linux and macos but I dont have any clue about windows so maybe thats a dealbreaker here.</p>",
        "id": 272162032,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645038043
    },
    {
        "content": "<p>That's one possibility, yeah. But it's one step further away. I wrote the extension because I got tired of switching windows to type an \"α\" or a \"→\" (and also because I had never written one so I wanted to learn how). I wanted something as natural as possible.</p>",
        "id": 272163127,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645038509
    },
    {
        "content": "<p>If we're making a longer list I'll also throw <a href=\"https://github.com/glacambre/firenvim\">in fire.nvim</a> :) -- which will make every <code>&lt;input&gt;</code> element in your browser run a little embedded neovim, which you can then use lean.nvim's abbreviations for. That should work cross-platform in any browser at least (I've certainly used it not for Lean but just in general e.g. to write code in GitHub comments).</p>",
        "id": 272169445,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645041145
    },
    {
        "content": "<p>Could it behave more like the VScode extension by allowing partial matches? For example, I have to type an excruciating <code>\\backcong</code> to get <code>≌</code> instead of the already long <code>\\backc</code>.</p>",
        "id": 272179601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645046197
    },
    {
        "content": "<p>Do you mean the chrome extension?</p>",
        "id": 272179983,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645046403
    },
    {
        "content": "<p>Yes :)</p>",
        "id": 272181161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645046755
    },
    {
        "content": "<p>Sure</p>",
        "id": 272181397,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645046835
    },
    {
        "content": "<p>I'm making it robust to typos. For instance, if you type <code>\\sqry</code>, <code>sqrt</code> is still the longest match (three characters) so it's gonna replace the entire thing by <code>√</code></p>",
        "id": 272185894,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645049215
    },
    {
        "content": "<p>oops (testing)</p>",
        "id": 272186075,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645049310
    },
    {
        "content": "<p>Copying the logic of the vscode extension for matches seems like a good idea to me. Seeing as its written in some flavour of javascript can you just reuse the exact code? (maybe you are already doing this)</p>",
        "id": 272186362,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645049492
    },
    {
        "content": "<p>Yeah, I don't care what it does exactly as long as it does the same as the VScode extension.</p>",
        "id": 272186489,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645049560
    },
    {
        "content": "<p>Okay, you can update your extension <a href=\"https://github.com/arthurpaulino/chrome-lean-unicode\">https://github.com/arthurpaulino/chrome-lean-unicode</a><br>\nThe behavior is slightly different for partial matches, but I think it makes more sense this way.</p>\n<p>With the extension, if you type <code>\\ba</code> it replaces it with <code>≌</code> for you. In VS Code, it's replaced with <code>∽</code> (idk why)</p>",
        "id": 272187636,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645050072
    },
    {
        "content": "<p><code>\\backsim</code>? Both make sense, I guess</p>",
        "id": 272187793,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645050173
    },
    {
        "content": "<p>I believe it finds the shortest extension of what you typed</p>",
        "id": 272187830,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645050192
    },
    {
        "content": "<p>(Which, <code>backsim</code> is shorter than <code>backcong</code>)</p>",
        "id": 272187844,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645050205
    },
    {
        "content": "<p><code>lean.nvim</code> does what VSCode does here too</p>",
        "id": 272187854,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645050212
    },
    {
        "content": "<p><del>I see the commit says you're doing longest, right? I think that will have weird behavior for e.g. <code>\\a</code> no? That does alpha in other places, but now will do some very long thing starting with <code>a</code></del></p>",
        "id": 272188064,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645050331
    },
    {
        "content": "<p>Oh -- never mind, there's independently an abbreviation for \"a\", so that one will work</p>",
        "id": 272188087,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645050355
    },
    {
        "content": "<p>But some other similar example I suspect will be wrong</p>",
        "id": 272188153,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645050375
    },
    {
        "content": "<p>Right, <code>backsim</code>.<br>\nBut about the \"longest\", it's the longest match between what you type and the abbreviations available, not the longest of the matches of equal length</p>",
        "id": 272188212,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645050411
    },
    {
        "content": "<p>I'm gonna add <code>\\~==</code> for <code>≌</code> because I find it especially painful to write.</p>",
        "id": 272188278,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645050460
    },
    {
        "content": "<p>For <code>\\ba</code>, the extension picked <code>backcong</code> simply because of the order of visiting. All other abbreviations that start with <code>ba</code> have the same match length so none of them were able to beat the first one. This is easily adjustable if anyone wants this behavior though</p>",
        "id": 272188533,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645050599
    },
    {
        "content": "<p>Ah, wait. This can be flawed. If you type <code>\\xy</code> for an abbreviation <code>xy</code> and then the algorithm visits <code>xyz</code> first, it's gonna pick it because <code>xy</code> can't beat it. So it's actually necessary to pick the shortest abbreviation among those of maximal match length</p>",
        "id": 272189117,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645050936
    },
    {
        "content": "<p>Extension updated again <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <br>\nThanks for the input!</p>",
        "id": 272189932,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645051380
    },
    {
        "content": "<p>Don't worry! You'll get a lot more <code>\\qed</code>.</p>",
        "id": 272189982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645051413
    },
    {
        "content": "<p>Hi everyone,<br>\nI just fixed a bug that made the extension trigger on every URL if you tried to add another URL.<br>\nIf you use the extension, please update it to the most updated version on master: <a href=\"https://github.com/arthurpaulino/chrome-lean-unicode\">https://github.com/arthurpaulino/chrome-lean-unicode</a></p>",
        "id": 282627600,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652788265
    },
    {
        "content": "<p>I've submitted a PR to the espanso hub: <a href=\"https://github.com/espanso/hub/pull/50\">https://github.com/espanso/hub/pull/50</a> (source repo: <a href=\"https://github.com/gebner/espanso-lean\">https://github.com/gebner/espanso-lean</a>)</p>",
        "id": 303722926,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665609260
    }
]