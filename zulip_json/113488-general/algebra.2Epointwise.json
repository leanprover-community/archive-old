[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> pointed me to this file: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/pointwise.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/pointwise.lean</a><br>\nI didn't know that we had it, probably partly because all the instances are local, which means it's not used that often.</p>\n<p>Is there a reason these instances shouldn't be global? Can we add <code>simp</code> lemmas simplifying <code>has_inv.inv '' s</code> and <code>has_inv.inv ⁻¹' s</code> to these operations?</p>",
        "id": 202199340,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593283321
    },
    {
        "content": "<p>I think it's because sometimes there are other things you can do. Eg, <code>set X</code> is also a boolean algebra...</p>",
        "id": 202199401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593283394
    },
    {
        "content": "<p>Hmm, do you want to use the boolean algebra operations as <code>mul</code> and <code>add</code>? In that case I'm wondering whether my approach was better, just writing <code>s.mul t</code> instead of <code>s * t</code> for pointwise multiplication.</p>",
        "id": 202199496,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593283532
    },
    {
        "content": "<p>Well, the <code>pointwise</code> file also sets up <code>semimodule</code> instances etc... so you would need to duplicate a lot of api</p>",
        "id": 202199649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593283703
    },
    {
        "content": "<p>Maybe all the instances can be global, I don't know. I made them <code>local</code> because I was cautious.</p>",
        "id": 202199656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593283726
    },
    {
        "content": "<p>Does anyone see any issue with making these instances global?</p>",
        "id": 202201327,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593286018
    },
    {
        "content": "<p>I propose to change boolean algebras and <code>set</code>s to use <code>∁</code> for complement and <code>\\</code> for difference.</p>",
        "id": 202220335,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593320913
    },
    {
        "content": "<p>Then use <code>+</code>, <code>-</code>, <code>*</code> for pointwise operations on sets.</p>",
        "id": 202220336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593320938
    },
    {
        "content": "<p>I agree with Yury; when writing informal math I'm likely to use pointwise operations on sets without comment, but would be pretty explicit if i were using <code>+</code> and <code>*</code> to mean set operations</p>",
        "id": 202222418,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593325201
    },
    {
        "content": "<p>Please vote: for <code>s : set α</code> what should <code>- s</code> mean:<br>\n<span aria-label=\"one\" class=\"emoji emoji-0031-20e3\" role=\"img\" title=\"one\">:one:</span> the complement of <code>s</code><br>\n<span aria-label=\"two\" class=\"emoji emoji-0032-20e3\" role=\"img\" title=\"two\">:two:</span> the pointwise negation of <code>s</code>, i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∣</mo><mo>−</mo><mi>x</mi><mo>∈</mo><mi>s</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x \\mid -x \\in s\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">}</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo>−</mo><mi>x</mi><mo>∣</mo><mi>x</mi><mo>∈</mo><mi>s</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{-x \\mid x \\in s\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">}</span></span></span></span></p>",
        "id": 202328136,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593445283
    },
    {
        "content": "<p>what's the notation for the complement under <span aria-label=\"two\" class=\"emoji emoji-0032-20e3\" role=\"img\" title=\"two\">:two:</span> ?</p>",
        "id": 202328432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593445436
    },
    {
        "content": "<p>I thought we've already moved away from negation for set complements to C?</p>",
        "id": 202328528,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593445468
    },
    {
        "content": "<p>Floris is fighting back.</p>",
        "id": 202328603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593445499
    },
    {
        "content": "<p>Wait, when did this happen? (I want option 2)</p>",
        "id": 202328647,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593445520
    },
    {
        "content": "<p>Also related is what the notation should be for the complement operation in a boolean algebra</p>",
        "id": 202328797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593445593
    },
    {
        "content": "<p>Currently it's 1: <a href=\"https://github.com/leanprover-community/lean/blob/6830e10f2dd24b23aaa50b2ab93d957f6d8559b5/library/init/data/set.lean#L69\">https://github.com/leanprover-community/lean/blob/6830e10f2dd24b23aaa50b2ab93d957f6d8559b5/library/init/data/set.lean#L69</a></p>",
        "id": 202328800,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593445595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/algebra.2Epointwise/near/202328432\">said</a>:</p>\n<blockquote>\n<p>what's the notation for the complement under <span aria-label=\"two\" class=\"emoji emoji-0032-20e3\" role=\"img\" title=\"two\">:two:</span> ?</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/dT918OPjIESXJjHtz9j1xg9O/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dT918OPjIESXJjHtz9j1xg9O/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dT918OPjIESXJjHtz9j1xg9O/image.png\"></a></div>",
        "id": 202328974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593445680
    },
    {
        "content": "<p>It's a bit annoying that this discussion is spread over two streams.</p>",
        "id": 202329075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593445707
    },
    {
        "content": "<p>See: <a href=\"#narrow/stream/144837-PR-reviews/topic/3212.20compl.20notation\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/3212.20compl.20notation</a></p>",
        "id": 202329148,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593445741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>: for sets we already have <code>s.compl</code>. We could do something like a postfix <code>ᶜ</code> (superscript <code>c</code>)</p>",
        "id": 202329174,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593445755
    },
    {
        "content": "<p>But Mario's question is actually the relevant one. Nobody in his right mind would use <code>-s</code> to denote the complement of <code>s</code>.</p>",
        "id": 202329182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593445758
    },
    {
        "content": "<p>Thanks for the link to <a href=\"https://github.com/leanprover-community/mathlib/issues/3212\">#3212</a>. I did not see that PR yet.</p>",
        "id": 202329414,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593445866
    },
    {
        "content": "<p>I just saw <code>pointwise_mul_semiring</code>, which has union as \"addition\", and pointwise multiplication as \"multiplication\". This instance directly conflicts with having addition mean pointwise addition on sets.</p>\n<p>Is this an appropriate place to define <code>foo α := set α</code> and have <code>pointwise_mul_semiring [monoid α] : semiring (foo α)</code>?</p>",
        "id": 202391898,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593487977
    },
    {
        "content": "<p>Aah, you are right. This is in fact a useful notion, we used it in the perfectoid project. Certainly a type synonym would solve it. But I don't have a good name suggestion at the moment.</p>",
        "id": 202394408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593490993
    },
    {
        "content": "<p>If we would add the type synonym, that would still be annoying to work with, right?<br>\nFor <code>s : foo \\a</code> we still would get <code>f '' s : set \\a</code>. Do we have to duplicate set operations and instances? (<code>has_union (foo \\a)</code>, ...)</p>",
        "id": 202394502,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593491159
    },
    {
        "content": "<p>Hmm...</p>",
        "id": 202394797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593491600
    },
    {
        "content": "<p>I guess this is one reason why I kept all the instances as <code>def</code>s. Just let the user choose locally what they want to do.</p>",
        "id": 202394803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593491627
    },
    {
        "content": "<p>You can still do it with enough type annotations, <code>(f '' s  + g ''t : foo \\a)</code> or something.</p>",
        "id": 202394848,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593491644
    },
    {
        "content": "<p>Do we ever want to use <code>pointwise_add</code> and <code>pointwise_semiring</code> in the same declaration?</p>",
        "id": 202394860,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593491668
    },
    {
        "content": "<p>I don't know what the future will bring...<br>\nBut I can't think of such a situation right now.</p>",
        "id": 202395029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593491967
    },
    {
        "content": "<p>I made the integers as a quotient of nat^2 the other day and with algebra.pi_instances imported it gave nat^2 a 1 which corresponded to (1,1)=0 in Z</p>",
        "id": 202398212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593496954
    },
    {
        "content": "<p>That's a different pointwise though</p>",
        "id": 202398304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593497153
    },
    {
        "content": "<p>Floris is talking about pointwise addition of subsets of some additive monoid/group</p>",
        "id": 202398355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593497194
    }
]