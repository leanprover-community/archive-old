[
    {
        "content": "<p>These look defeq to me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n       <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span>\n         <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"n\">i</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span>\n      <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 239424988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621431369
    },
    {
        "content": "<p>Full error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"o\">[</span><span class=\"n\">equations_result</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n       <span class=\"n\">i.cases_on</span>\n         <span class=\"o\">(</span><span class=\"n\">id_rhs</span>\n            <span class=\"o\">(</span><span class=\"n\">CLCTinv</span> <span class=\"n\">r</span> <span class=\"n\">V</span>\n                 <span class=\"o\">((</span><span class=\"n\">nat_trans.op</span>\n                     <span class=\"o\">(</span><span class=\"n\">FiltrationPow.Tinv</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n                    <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">)))</span>\n                 <span class=\"o\">((</span><span class=\"n\">nat_trans.op</span>\n                     <span class=\"o\">(</span><span class=\"n\">FiltrationPow.cast_le</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                        <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n                    <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">⟶</span>\n               <span class=\"o\">(</span><span class=\"n\">CLC</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">FiltrationPow</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">))))</span>\n            <span class=\"o\">(</span><span class=\"n\">CLCTinv.ι</span> <span class=\"n\">r</span> <span class=\"n\">V</span>\n               <span class=\"o\">((</span><span class=\"n\">nat_trans.op</span>\n                   <span class=\"o\">(</span><span class=\"n\">FiltrationPow.Tinv</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n                  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">)))</span>\n               <span class=\"o\">((</span><span class=\"n\">nat_trans.op</span>\n                   <span class=\"o\">(</span><span class=\"n\">FiltrationPow.cast_le</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n                  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">)))))</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n            <span class=\"n\">i.cases_on</span>\n              <span class=\"o\">(</span><span class=\"n\">id_rhs</span>\n                 <span class=\"o\">((((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"bp\">⟶</span>\n                    <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"n\">double_complex.col_ι_f_1</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n                 <span class=\"n\">id_rhs</span>\n                   <span class=\"o\">((((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span>\n                      <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n                   <span class=\"gr\">sorry</span><span class=\"o\">)))]</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n       <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span>\n         <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"n\">i</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span>\n      <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 239425042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621431391
    },
    {
        "content": "<p>Ooh, is the trouble that I'm using <code>sorry</code>?</p>",
        "id": 239425394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621431533
    },
    {
        "content": "<p>What does <code>convert</code> leave behind?</p>",
        "id": 239425464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621431573
    },
    {
        "content": "<p>I'll try that in a second. Here's a log without <code>sorry</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"o\">[</span><span class=\"n\">equations_result</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n       <span class=\"n\">i.cases_on</span>\n         <span class=\"o\">(</span><span class=\"n\">id_rhs</span>\n            <span class=\"o\">(</span><span class=\"n\">CLCTinv</span> <span class=\"n\">r</span> <span class=\"n\">V</span>\n                 <span class=\"o\">((</span><span class=\"n\">nat_trans.op</span>\n                     <span class=\"o\">(</span><span class=\"n\">FiltrationPow.Tinv</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n                    <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">)))</span>\n                 <span class=\"o\">((</span><span class=\"n\">nat_trans.op</span>\n                     <span class=\"o\">(</span><span class=\"n\">FiltrationPow.cast_le</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                        <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n                    <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">⟶</span>\n               <span class=\"o\">(</span><span class=\"n\">CLC</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">FiltrationPow</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">))))</span>\n            <span class=\"o\">(</span><span class=\"n\">CLCTinv.ι</span> <span class=\"n\">r</span> <span class=\"n\">V</span>\n               <span class=\"o\">((</span><span class=\"n\">nat_trans.op</span>\n                   <span class=\"o\">(</span><span class=\"n\">FiltrationPow.Tinv</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n                  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">)))</span>\n               <span class=\"o\">((</span><span class=\"n\">nat_trans.op</span>\n                   <span class=\"o\">(</span><span class=\"n\">FiltrationPow.cast_le</span> <span class=\"n\">r'</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n                  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">↥Λ</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">)))))</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n            <span class=\"n\">i.cases_on</span>\n              <span class=\"o\">(</span><span class=\"n\">id_rhs</span>\n                 <span class=\"o\">((((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"bp\">⟶</span>\n                    <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"n\">double_complex.col_ι_f_1</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n                 <span class=\"n\">id_rhs</span>\n                   <span class=\"o\">((((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span>\n                      <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"n\">double_complex.col_ι_f_succ_succ</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))))]</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n       <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span>\n         <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"n\">i</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span>\n      <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 239425590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621431612
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">double_complex.col_ι_f_1</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"bp\">⟶</span>\n    <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">c.unop</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">CLCTinv.ι</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">double_complex.col_ι_f_succ_succ</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span>\n    <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">c.unop</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">SemiNormedGroup.rescale</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">!</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">CLCTinv.ι</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">double_complex.col_ι_f</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span>\n       <span class=\"o\">(((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">c.unop</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">CLCTinv.ι</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"n\">double_complex.col_ι_f_1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">double_complex.col_ι_f_succ_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 239425650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621431630
    },
    {
        "content": "<p>Using <code>by convert</code> gives the same error (but instantly) whereas without it Lean takes 20 seconds.</p>",
        "id": 239425769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621431679
    },
    {
        "content": "<p>This is instant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">double_complex.col_ι_f_0</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">0</span> <span class=\"bp\">⟶</span>\n    <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">c.unop</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">CLCTinv.ι</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">double_complex.col_ι_f_1</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"bp\">⟶</span>\n    <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">c.unop</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">CLCTinv.ι</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">double_complex.col_ι_f_succ_succ</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span>\n    <span class=\"o\">((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">c.unop</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">SemiNormedGroup.rescale</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">!</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">CLCTinv.ι</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">CLCFPTinv</span> <span class=\"n\">CLCFPTinv₂</span> <span class=\"n\">CLCFP</span> <span class=\"c1\">-- CLCTinv</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">double_complex</span> <span class=\"n\">col_complex_rescaled</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">double_complex.col_ι_f</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((((</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">col</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span>\n       <span class=\"o\">(((</span><span class=\"n\">col_complex_rescaled</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">BD.X</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">c.unop</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">double_complex.col_ι_f_0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"n\">double_complex.col_ι_f_1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">double_complex.col_ι_f_succ_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 239426262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621431849
    },
    {
        "content": "<p>How do I make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? Or have you solved the problem now?</p>",
        "id": 239426807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621432050
    },
    {
        "content": "<p>It's solved</p>",
        "id": 239428423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621432669
    },
    {
        "content": "<p>Just marking a bunch of stuff irreducible is enough to help Lean</p>",
        "id": 239428451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621432681
    }
]