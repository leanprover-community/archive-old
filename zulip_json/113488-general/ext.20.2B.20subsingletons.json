[
    {
        "content": "<p>Is there a particular reason that <code>ext</code> on a structure does not try to use subsingleton instances to eliminate unnecessary hypotheses from the generated lemma? (It only checks for <code>Prop</code>.)</p>",
        "id": 211331532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601079385
    },
    {
        "content": "<p><code>ext</code> only uses lemmas annotated with <code>@[ext]</code>, afik.</p>",
        "id": 211333114,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601081606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span>, Reid is talking about something slightly different. Annotating a structure with <code>@[ext]</code> runs some metaprogram that actually constructs the extensionality lemmas that the tactic <code>ext</code> will later use (somewhat confusing!). Reid is asking for that metaprogram to be smarter.</p>",
        "id": 211334067,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601082922
    },
    {
        "content": "<p>(It's possible that <code>@[ext]</code> on a structure should actually have a different name, like <code>@[generate_ext_lemma]</code>.)</p>",
        "id": 211334076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601082953
    },
    {
        "content": "<p>Oh, interesting. I was unaware of the <code>@[ext]</code> annotations in structures. I don't think it is necessary to change the name. I tend to prefer uniformity, even if at the cost of a tiny bit of ambiguity.</p>",
        "id": 211336494,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601086348
    },
    {
        "content": "<p>Looking at the code for <code>derive_struct_ext_lemma</code> it already seems to have a lot going so. So maybe adding subsingleton wouldn't make it much more complex, relatively speaking.</p>",
        "id": 211336608,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601086522
    },
    {
        "content": "<p>Do we have this kind of functionality implemented as more general functions in the tactic framework? For example, a \"clean this lemma\" function, to be called by multiple lemma generating tactics?</p>",
        "id": 211336687,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601086582
    },
    {
        "content": "<p>Sometimes... often resuable parts end up in <code>tactic.core</code>.</p>",
        "id": 211339405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601090477
    }
]