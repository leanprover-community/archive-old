[
    {
        "content": "<p>Chris asked today if <code>iff</code> was associative and a room full of mathematicians had no clue between them :-) We proved it by checking all 8 cases in Lean :-) </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">finish</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">finish</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I was surprised that <code>finish</code> didn't do it alone:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- example (P Q R : Prop) : ((P ↔ Q) ↔ R) ↔ (P ↔ (Q ↔ R)) := by finish -- fails</span>\n</pre></div>",
        "id": 130294374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532544531
    },
    {
        "content": "<p>I later found a better proof: if we break with convention and define true = 0 and false = 1 then iff is addition mod 2, and addition mod 2 is associative.</p>\n<p>Is it true constructively? I struggled, but then again I am certainly no expert.</p>",
        "id": 130294462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532544605
    },
    {
        "content": "<p>Here's one place I get stuck:</p>\n<div class=\"codehilite\"><pre><span></span>P Q R : Prop,\nHQPQ : Q → (P ↔ Q),\nHPQQ : (P ↔ Q) → Q,\nH : Q → P,\nHP : P\n⊢ Q\n</pre></div>\n\n\n<p>I eliminated R (WLOG I believe) and I can't see how to do this. I am now minded to look for a counterexample. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> to prove it's not constructively provable it would suffice to find some topological space with three subsets such that some random statement in topology is false, right?</p>",
        "id": 130294870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532545088
    },
    {
        "content": "<p>I think <code>tauto</code> should manage to prove it</p>",
        "id": 130294880,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532545104
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>done tactic failed, there are unsolved goals\nstate:\nP Q R : Prop,\na : P ↔ Q ↔ R,\na_1 : P,\na_2 : Q\n⊢ R\n</pre></div>",
        "id": 130294921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532545153
    },
    {
        "content": "<p>Is <code>tauto</code> constructive?</p>",
        "id": 130294937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532545186
    },
    {
        "content": "<p>Kevin, don't you have serious math to formalize?</p>",
        "id": 130294941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532545195
    },
    {
        "content": "<p>I think so</p>",
        "id": 130294942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532545195
    },
    {
        "content": "<p>Blame Chris. He pointed out that when a mathematician writes <code>A iff B iff C</code>, they mean <code>A iff B, and B iff C, so A iff C</code>, i.e. <code>iff.trans</code>. <code>iff.assoc</code> is a different question entirely :-) It's like the <code>1 &lt;= k &lt;= n</code> thing.</p>",
        "id": 130295020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532545249
    },
    {
        "content": "<p>Yes, I believe it sticks to classical lemmas and if your propositions are decidable, it can prove more</p>",
        "id": 130295036,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532545273
    },
    {
        "content": "<p>The original question is perfectly legit, it's the constructivist deviance that I frown upon.</p>",
        "id": 130295241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532545487
    },
    {
        "content": "<blockquote>\n<p>I later found a better proof: if we break with convention and define true = 0 and false = 1 then iff is addition mod 2, and addition mod 2 is associative.</p>\n</blockquote>\n<p>That sounds like a proof by transport of structure (-;</p>",
        "id": 130295283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532545536
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">em_of_iff_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">false</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">))),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">em_of_iff_assoc</span>\n</pre></div>",
        "id": 130298421,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532548391
    },
    {
        "content": "<p>[no axioms]</p>",
        "id": 130298440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532548423
    },
    {
        "content": "<p>Aah yes that's another way of resolving this</p>",
        "id": 130298446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532548429
    },
    {
        "content": "<p>I recall having this exact conversation with Kenny a while ago (prove LEM from iff assoc)</p>",
        "id": 130314672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532568229
    },
    {
        "content": "<p>it was xor assoc</p>",
        "id": 130323420,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532583364
    },
    {
        "content": "<p>Did you prove XOR assoc -&gt; em?</p>",
        "id": 130323717,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532583913
    },
    {
        "content": "<blockquote>\n<p>so here is a proof of LEM from xor assoc:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">xor</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">xor</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">xor</span> <span class=\"o\">(</span><span class=\"n\">xor</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">¬</span> <span class=\"n\">xor</span> <span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">np</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">np</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">xor</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">xor</span> <span class=\"n\">p</span> <span class=\"n\">true</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"n\">p</span> <span class=\"n\">true</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n<span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n</pre></div>\n\n\n</blockquote>\n<p><a href=\"#narrow/stream/116395-maths/subject/xor.20is.20not.20associative/near/125266318\" title=\"#narrow/stream/116395-maths/subject/xor.20is.20not.20associative/near/125266318\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/xor.20is.20not.20associative/near/125266318</a></p>",
        "id": 130323718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532583948
    },
    {
        "content": "<p>by Mario</p>",
        "id": 130323745,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532583963
    },
    {
        "content": "<p><code>xor</code> is associative because if you label false as 0 and true as 1 then it's addition mod 2. I thought it was funny that iff could be proved associative with the other labelling. It's almost like this is a proof strat and then you make all labellings and find out what each labelling proves :-)</p>",
        "id": 130327664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532591121
    },
    {
        "content": "<p>can we create a Kripke frame where ((p ↔ q) ↔ r) but not (p ↔ (q ↔ r))?</p>",
        "id": 130327717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532591203
    },
    {
        "content": "<p><code>and</code> is associative because multiplication is associative, and <code>or</code> is associative because multiplication is associative. <code>nand</code> is not associative (however it is commutative, answering a question which an UG asked me last Oct -- \"does commutative imply associative?\")</p>",
        "id": 130327883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532591548
    },
    {
        "content": "<p>Is a Kripke frame just a fancy name for a topological space in this context?</p>",
        "id": 130327886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532591562
    },
    {
        "content": "<p>Kripke frame is a semantics for constructive logic</p>",
        "id": 130327900,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532591597
    },
    {
        "content": "<p>I think topological space is another semantics</p>",
        "id": 130327903,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532591604
    },
    {
        "content": "<p>topos!</p>",
        "id": 130327904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532591611
    }
]