[
    {
        "content": "<p>Is the following result somewhere in mathlib? If not, are there results which make it less painful than proving it from scratch using lists?</p>\n<div class=\"codehilite\"><pre><span></span>def exists_of_subset_image {α : Type u} {β : Type v} {f : α → β} {s : finset β} {t : set α}\n  (h : ↑s ⊆ f &#39;&#39; t) : ∃s&#39; : finset α, ↑s&#39; ⊆ t ∧ s&#39;.image f = s\n</pre></div>",
        "id": 148072219,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1542751938
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_of_subset_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span><span class=\"n\">s&#39;</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">s&#39;</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">s&#39;</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"kn\">using</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">ih</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">empty_subset</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image_empty</span> <span class=\"bp\">_⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_insert</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert_subset</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">s&#39;</span><span class=\"o\">,</span> <span class=\"n\">hst</span><span class=\"o\">,</span> <span class=\"n\">hsi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_insert</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert_subset</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">hxt</span><span class=\"o\">,</span> <span class=\"n\">hst</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image_insert</span><span class=\"o\">,</span> <span class=\"n\">hsi</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148074485,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542754275
    },
    {
        "content": "<p>a simple induction</p>",
        "id": 148074490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542754282
    },
    {
        "content": "<p>Thanks! <code>finset.induction</code> makes this indeed quite easy to prove.</p>",
        "id": 148074765,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1542754564
    },
    {
        "content": "<p>can we call this finite_choice... &gt;?&lt;</p>",
        "id": 148074832,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542754640
    },
    {
        "content": "<p>Different question: should <code>finset.singleton</code> be protected? There are two <code>singleton</code>s if you open <code>finset</code>.</p>\n<div class=\"codehilite\"><pre><span></span>import data.finset\nopen finset\n#print singleton\n</pre></div>",
        "id": 148078119,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1542758565
    },
    {
        "content": "<p>so... don't open <code>finset</code>? /s</p>",
        "id": 148081655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542763573
    },
    {
        "content": "<p>or use <code>finset.singleton</code> anyway</p>",
        "id": 148082475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542765005
    },
    {
        "content": "<p>maybe it should be renamed to <code>single</code> or something, it's already far longer than it should be, namely <code>{x}</code></p>",
        "id": 148082487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542765039
    },
    {
        "content": "<p>in finset it has a prefix notation <code>ι</code>, you could use that</p>",
        "id": 148082509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542765117
    },
    {
        "content": "<p>Hi, possibly a range of <code>finset</code> questions coming up... :-)</p>",
        "id": 148198016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542926860
    },
    {
        "content": "<p>Why is <code>theorem insert.comm (a b : α) (s : finset α) : insert a (insert b s) = insert b (insert a s) := ...</code> marked as <code>@[simp]</code>?</p>",
        "id": 148198018,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542926877
    },
    {
        "content": "<p>This seems like a terrible idea, and is responsible for bad simplifications like:<br>\n<code>range (n + 1 + 1)</code> simplifying to <code>insert n (insert (n + 1) (range n))</code>.</p>",
        "id": 148198064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542926915
    },
    {
        "content": "<p>how does that not loop?</p>",
        "id": 148198073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542926982
    },
    {
        "content": "<p>That too. :-)</p>",
        "id": 148198074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542926991
    },
    {
        "content": "<p>Does mathlib have something to the effect of <code>finset.iota n m</code>, giving the finset of natural numbers <code>n, n+1, ..., m-1</code>?</p>",
        "id": 148198245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542927347
    },
    {
        "content": "<p>Oops, <code>iota</code> is the wrong name. I guess <code>finset.interval n m</code>?</p>",
        "id": 148198417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542927695
    },
    {
        "content": "<p>Hmm.. <code>data.list.basic</code> has a peculiarly named <code>range' s n</code>, giving the list <code>[s, s+1, ..., s+n-1]</code>.</p>",
        "id": 148198511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542927848
    },
    {
        "content": "<p>Okay, removing <code>@[simp]</code> on <code>finset.insert.comm</code> doesn't break anything, so if there are no complaints I'll PR it later.</p>",
        "id": 148198612,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542928119
    },
    {
        "content": "<p>IIRC Chris and Mario had a long discussion about the best way to do the bounds, when Chris was proving things about finite sums a while back</p>",
        "id": 148198721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542928337
    },
    {
        "content": "<p>So what happened to Chris's work on finite sums?</p>",
        "id": 148198726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542928360
    },
    {
        "content": "<p>Faced with talking to students again, I really want to make <code>finset.sum</code> more fun. :-)</p>",
        "id": 148198734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542928388
    },
    {
        "content": "<p>I'm wondering how people would feel about removing the <code>@[simp]</code> from </p>\n<div class=\"codehilite\"><pre><span></span>theorem range_succ : range (succ n) = insert n (range n) := ...\n</pre></div>\n\n\n<p>I feel like this is often unhelpful. (In fact, in <code>quadratic_reciprocity.lean</code> Chris has to write <code>- range_succ</code> many times to avoid it firing. Similarly in <code>order_of_element.lean</code>.)</p>\n<p>This would require either explicitly adding <code>range_succ</code> to the simp set in a few places, but not too many. (Three places across mathlib, and it saves many <code>simp [-range_succ]</code>s in <code>quadratic_reciprocity.lean</code>.)</p>",
        "id": 148200245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542931645
    },
    {
        "content": "<p>But in particular as soon as you have a sum of <code>range (n+1)</code>, this simp lemma may unhelpfully fire, which is confusing.</p>",
        "id": 148200257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542931682
    },
    {
        "content": "<p>Is Scott Morrison talking about <code>simp</code>? :P</p>",
        "id": 148200291,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542931706
    },
    {
        "content": "<p>I love <code>simp</code>. I want to use it as much as possible.</p>",
        "id": 148200293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542931724
    },
    {
        "content": "<p>Hence I want to remove bad <code>@[simp]</code> lemmas that get the maths wrong.</p>",
        "id": 148200294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542931736
    },
    {
        "content": "<p>I see</p>",
        "id": 148200300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542931754
    },
    {
        "content": "<p>I don't recall that conversation. I think it was Mario and Patrick. There's definitely a need to make finest.sum nicer, particularly with natural numbers. Also a need for a nice non commutative sum interface.</p>",
        "id": 148200457,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542932107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> , if we were going to introduce an <code>interval n m : finset nat</code>, and try to make doing sums over natural numbers work nicely with it, would you prefer <code>interval n m</code> includes <code>m</code>, or not?</p>",
        "id": 148201138,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542933555
    },
    {
        "content": "<p>Does anyone know if</p>\n<div class=\"codehilite\"><pre><span></span>lemma finset_sum_split [add_comm_monoid β] (s : finset α) (f : α → β) (P : α → Prop) [decidable_pred P] :\ns.sum f = (s.filter P).sum f + (s.filter (λ a, ¬ P a)).sum f := sorry\n</pre></div>\n\n\n<p>exists in mathlib?</p>",
        "id": 148201725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542934806
    },
    {
        "content": "<p>yes</p>",
        "id": 148201736,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542934826
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">filter_pos_add_filter_neg</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">finsupp.filter_pos_add_filter_neg :</span>\n<span class=\"cm\">  ∀ {α : Type u_1} {β : Type u_2} [_inst_1 : decidable_eq α] [_inst_2 : decidable_eq β] [_inst_3 : add_monoid β]</span>\n<span class=\"cm\">  (f : α →₀ β) (p : α → Prop) [_inst_4 : decidable_pred p] [_inst_5 : decidable_pred (λ (a : α), ¬p a)],</span>\n<span class=\"cm\">    finsupp.filter p f + finsupp.filter (λ (a : α), ¬p a) f = f</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 148201749,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542934887
    },
    {
        "content": "<p>oh wait</p>",
        "id": 148201752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542934898
    },
    {
        "content": "<p>they are not exactly the same</p>",
        "id": 148201753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542934911
    },
    {
        "content": "<p>I see. They're clearly related, but it's not obvious you could even prove mine from this, because of the <code>decidable_eq</code> hypotheses.</p>",
        "id": 148201796,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542934970
    },
    {
        "content": "<p>While on the subject, the <code>[_inst_5 : decidable_pred (λ (a : α), ¬p a)]</code> argument of <code>finsupp.filter_pos_add_filter_neg</code> is unnecessary.</p>",
        "id": 148201859,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542935111
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finset_sum_split</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_eq</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_union</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">filter_inter_filter_neg_eq</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">filter_union_filter_neg_eq</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 148201968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542935398
    },
    {
        "content": "<p>awesome, thank you!</p>",
        "id": 148202012,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542935422
    },
    {
        "content": "<p>in principle, it could be relevant at the use site... because decidability arguments are relevant</p>",
        "id": 148202015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542935423
    },
    {
        "content": "<p>oh, I see, you might want to give separate arguments that P and not P are decidable??</p>",
        "id": 148202017,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542935462
    },
    {
        "content": "<p>in principle...</p>",
        "id": 148202022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542935485
    },
    {
        "content": "<p>though it's not very likely especially when the arguments are provided by type class inference and not looking at the expected type</p>",
        "id": 148202070,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542935557
    },
    {
        "content": "<p>actually it might not be that unlikely, if both instances come from <code>prop_decidable</code></p>",
        "id": 148202176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542935878
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> , if we were going to introduce an <code>interval n m : finset nat</code>, and try to make doing sums over natural numbers work nicely with it, would you prefer <code>interval n m</code> includes <code>m</code>, or not?</p>\n</blockquote>\n<p>The notation for real intervals is Icc a b for intervals which are closed on both ends, and Ico for closed-open ones, and so on. All this is in <code>/data/set/intervals</code>. Ideally, you would use the same syntax prefixed with <code>finset.</code>, or something like that. And by the way, the only good convention to do sums is closed on the left and open on the right, i.e., $S_n f = \\sum_{i=0}^{n-1}  f(i)$.</p>",
        "id": 148212877,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542957211
    },
    {
        "content": "<p>Fancy Isabelle notation for these (I don't think this has been ported to Lean, or if there could be a parsing problem): <code>{a..b}</code> for the closed interval with endpoints <code>a</code> and <code>b</code>. And <code>{a&lt;..b}</code> for the open/closed version. And <code>{..&lt;b}</code> for the semiinfinite open one. And so on.</p>",
        "id": 148213145,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542957653
    },
    {
        "content": "<p>I wonder if we could do the actual maths notations for these... <code>[a,b)</code>, etc.</p>",
        "id": 148213855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542959038
    },
    {
        "content": "<p>Or the actual maths notations for these... <code>[a, b[,</code> etc.</p>",
        "id": 148214028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959367
    },
    {
        "content": "<p>nonono</p>",
        "id": 148214030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542959385
    },
    {
        "content": "<p>that will kill your editor</p>",
        "id": 148214031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542959398
    },
    {
        "content": "<p>trust me it's not worth it</p>",
        "id": 148214075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542959405
    },
    {
        "content": "<p>see also <a href=\"https://github.com/PatrickMassot/bigop/blob/master/src/tests.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/bigop/blob/master/src/tests.lean\">https://github.com/PatrickMassot/bigop/blob/master/src/tests.lean</a></p>",
        "id": 148214076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959410
    },
    {
        "content": "<p>Although Cyril convinced me that Sébastien is right and I should exclude the upper bound from the sum</p>",
        "id": 148214083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959459
    },
    {
        "content": "<p>I'm okay with <code>{a..&lt;b}</code> and friends. In metamath we used <code>(a ..^ b)</code> which is slightly less mnemonic</p>",
        "id": 148214091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542959476
    },
    {
        "content": "<p>there could be a parsing problem with <code>{a}</code>, but it might work as long as <code>...</code> doesn't mean anything else... oh</p>",
        "id": 148214133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542959528
    },
    {
        "content": "<p>There is also unicode <code>…</code></p>",
        "id": 148214140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542959567
    },
    {
        "content": "<p>In any case, it sounds like everyone is on board with the \"default\" being to not include the upper point.</p>",
        "id": 148214207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542959737
    },
    {
        "content": "<p>One million python users can't be wrong</p>",
        "id": 148214252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542959774
    },
    {
        "content": "<p>What convinced be is that is avoids some nat substractions. <em>That</em> is a killing argument</p>",
        "id": 148214254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542959781
    },
    {
        "content": "<p>I will try to fill in <code>interval n m</code> as a list/multiset/finset, and provide a good API for splitting these, into disjoint intervals or endpoint + other interval, for reindexing, etc.</p>",
        "id": 148214257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542959803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> How does this tie in to \"I'll stop working on maths in Lean for a while, to work a bit on infrastructure...\" (just curious)</p>",
        "id": 148214346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542959960
    },
    {
        "content": "<p>:-)</p>",
        "id": 148253177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543014180
    },
    {
        "content": "<p>Is there any reason why we don't have <code>sUnion</code> on <code>finset</code>? This seems like an obvious omission.</p>",
        "id": 148689585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543380688
    },
    {
        "content": "<p><code>finset.bind _ id</code>?</p>",
        "id": 148689646,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543380762
    },
    {
        "content": "<p>Great, thank you!</p>",
        "id": 148689656,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543380810
    },
    {
        "content": "<p>Is there no <code>preimage</code> for <code>finset</code>?</p>",
        "id": 148690310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543382077
    },
    {
        "content": "<p>you could use <code>finset.filter</code></p>",
        "id": 148690350,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543382162
    }
]