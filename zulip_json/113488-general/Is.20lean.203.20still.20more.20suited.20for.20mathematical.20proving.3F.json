[
    {
        "content": "<p>Is lean 3 still more suited for mathematical proving? I am doing nng, and I'm wondering if I should continue theorem proving in lean 3 or lean 4. Is mathlib4 at a good enough state to migrate also?</p>",
        "id": 279825741,
        "sender_full_name": "Joseph O",
        "timestamp": 1650635144
    },
    {
        "content": "<p>It depends on the level of mathematics you're aiming at. mathlib for Lean 3 already has a big stack of abstractions to support rather advanced mathematics (from what I recall Kevin saying that it's no longer limited to undergrad level math). But if you want to stick to the basics and build an API for the natural numbers (which is likely to already exist for Lean 3), then you should be fine with Lean 4. I'd also post such questions in the <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> stream</p>",
        "id": 279826345,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650635483
    },
    {
        "content": "<p>Like I plan on mainly proving algebraic stuff, with natural numbers.</p>",
        "id": 279826509,
        "sender_full_name": "Joseph O",
        "timestamp": 1650635549
    },
    {
        "content": "<p>Basically the situation is that if you use Lean 4 then you don't have access to Lean 3's maths library so you are missing probably tens of thousands of lines of code here <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/data/nat\">https://github.com/leanprover-community/mathlib/tree/master/src/data/nat</a> which corresponds to many many results and definitions about the naturals (stuff like Fibonacci sequence, a theory of digits, a theory of congruences modulo N etc). However if you're happy to make these definitions yourself (i.e. basically do the natural number game in Lean 4) then Lean 4 is fine.</p>",
        "id": 279827229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650635929
    },
    {
        "content": "<p>I would still advise you to use Lean 3. mathlib4 is still an experiment at this point and you won't get nearly as much community suppport if you stumble upon a problem.</p>",
        "id": 279827272,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650635953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Is.20lean.203.20still.20more.20suited.20for.20mathematical.20proving.3F/near/279827229\">said</a>:</p>\n<blockquote>\n<p>Basically the situation is that if you use Lean 4 then you don't have access to Lean 3's maths library so you are missing probably tens of thousands of lines of code here <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/data/nat\">https://github.com/leanprover-community/mathlib/tree/master/src/data/nat</a> which corresponds to many many results and definitions about the naturals (stuff like Fibonacci sequence, a theory of digits, a theory of congruences modulo N etc). However if you're happy to make these definitions yourself (i.e. basically do the natural number game in Lean 4) then Lean 4 is fine.</p>\n</blockquote>\n<p>I mean I would probably try and prove these lemmas myself, but they are definitely fun to play around with and use. Though on the other hand, lean 4 seems interesting too. But for now, I think I will probably use lean 3 for proving, and lean 4 for more general programming.</p>",
        "id": 279827820,
        "sender_full_name": "Joseph O",
        "timestamp": 1650636168
    },
    {
        "content": "<p>I’m also curious as to how Lean 4 differs from Lean 3 in terms of proving, both semantically and syntactically.</p>",
        "id": 279886262,
        "sender_full_name": "Joseph O",
        "timestamp": 1650666725
    },
    {
        "content": "<p>Re Lean 3 vs Lean 4: here are some key differences, mostly syntax changes.  <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">https://leanprover.github.io/lean4/doc/lean3changes.html</a> Also glance through this page to see what Lean 4 tactic proofs now look like: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html</a></p>",
        "id": 279904876,
        "sender_full_name": "Jason Rute",
        "timestamp": 1650687444
    }
]