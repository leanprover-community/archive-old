[
    {
        "content": "<p>Just noticed this. <a href=\"https://github.com/leanprover/lean/commit/16f28315eeddf996f85bff96954cd31a94aa4562\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/16f28315eeddf996f85bff96954cd31a94aa4562\">https://github.com/leanprover/lean/commit/16f28315eeddf996f85bff96954cd31a94aa4562</a> Is this something happening imminently or ages away? How badly will this break mathlib?</p>",
        "id": 123539240,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1520699085
    },
    {
        "content": "<p>heh, that's news to me. lean 3 had a good run</p>",
        "id": 123539336,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520699372
    },
    {
        "content": "<p>if-then-else moves from coercing from Prop to bool to traditional reflection using boolean-valued function</p>",
        "id": 123539391,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520699466
    },
    {
        "content": "<p>this design doc is very exciting, it seems to hold a lot of improvements for using lean as a programming language</p>",
        "id": 123539534,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520699843
    },
    {
        "content": "<p>Can anyone see anything which could be related to using Lean as a proof assistant in this design notes?</p>",
        "id": 123539628,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520700056
    },
    {
        "content": "<p>This looks really good :)</p>",
        "id": 123539677,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520700146
    },
    {
        "content": "<p>no, not in the sense the mathematicians in this channel are using lean, except for scott, since he uses many tactics</p>",
        "id": 123539678,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520700158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Not sure yet. I'll keep poring over it and let you know</p>",
        "id": 123539679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520700161
    },
    {
        "content": "<p>obviously all of mathlib is going to break since lean4 isn't going to have an algebraic hierarchy</p>",
        "id": 123539684,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520700219
    },
    {
        "content": "<p>and that's just one of many big problems</p>",
        "id": 123539685,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520700232
    },
    {
        "content": "<p>Moving the algebraic hierarchy from core to mathlib rather sounds like good news</p>",
        "id": 123539726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520700281
    },
    {
        "content": "<p>It was strange to see it in core</p>",
        "id": 123539727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520700289
    },
    {
        "content": "<p>And it currently prevent us from changing anything there</p>",
        "id": 123539737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520700312
    },
    {
        "content": "<p>well, i could understand why, having a model of integers and rational numbers is important for computing</p>",
        "id": 123539738,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520700338
    },
    {
        "content": "<p>it also means Leo is punting on redoing the algebraic hierarchy</p>",
        "id": 123539778,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520700387
    },
    {
        "content": "<p>ahhh, the new vm is going to support unboxed types...!</p>",
        "id": 123539844,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520700578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> You seem to have missed the \"incrementally rebuild core lib\" part :)</p>",
        "id": 123539950,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520700802
    },
    {
        "content": "<p>i did, but you've been holding out on this important piece of news!</p>",
        "id": 123540003,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520700901
    },
    {
        "content": "<p>I did expect someone in here to find it soon enough</p>",
        "id": 123540054,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520700966
    },
    {
        "content": "<p>Was it different when going from Lean2 to Lean3?</p>",
        "id": 123540055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520700988
    },
    {
        "content": "<p>We don't want to change the language, esp. syntax, this time (apart from fixing things). I think.</p>",
        "id": 123540060,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520701073
    },
    {
        "content": "<p>Would I see any difference then?</p>",
        "id": 123540105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520701154
    },
    {
        "content": "<p>Or is it only about Andrew-syle use of Lean?</p>",
        "id": 123540106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520701167
    },
    {
        "content": "<p>The parser will enable better tooling and mathy notation. Most other things will enable more powerful and faster tactics.</p>",
        "id": 123540207,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520701328
    },
    {
        "content": "<p>More math automation?</p>",
        "id": 123540210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520701378
    },
    {
        "content": "<p>only if someone like mario or scott decides to write a tactic to do so, i imagine</p>",
        "id": 123540220,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520701436
    },
    {
        "content": "<p>Is any time frame known for Lean 4?</p>",
        "id": 123540483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520702009
    },
    {
        "content": "<p>Kinda hard to say since we haven't even started yet</p>",
        "id": 123540522,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520702071
    },
    {
        "content": "<p>So we can at least say that it will not happen, say, within 1 month. Is the idea just to stop working on Lean 3 completely?</p>",
        "id": 123540533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520702126
    },
    {
        "content": "<p>No, we'll probably start on Monday</p>",
        "id": 123540623,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520702328
    },
    {
        "content": "<p>:)</p>",
        "id": 123540624,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520702329
    },
    {
        "content": "<p>So you finish the monad stuff and stop working in Lean 3?</p>",
        "id": 123540631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520702369
    },
    {
        "content": "<p>I wouldn't expect many new features for Lean 3 at least. Well, the important ones are on the lean4 list anyway.</p>",
        "id": 123540633,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520702386
    },
    {
        "content": "<p>How long did it take last time you rewrote Lean from scratch?</p>",
        "id": 123540683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520702447
    },
    {
        "content": "<p>I'm asking only out of curiosity, I'm very very far from having exhausted Lean 3 possibilities for math</p>",
        "id": 123540688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520702475
    },
    {
        "content": "<p>I'd have to check, I didn't participate in the Lean 3 rewrite. I still had a thesis to write in Lean 2.</p>",
        "id": 123540734,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520702639
    },
    {
        "content": "<p>This is only tangentially related, but would it be possible to get more devs from somewhere? Will MS pay for more? Can people apply for grant money for more? Or is there some problem of the form \"Leo doesn't trust anyone enough to mess with his code\"?</p>",
        "id": 123540779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520702755
    },
    {
        "content": "<p>Also only tangentially related, but is there any chance of some sort of \"stable release\" i.e. announce that what we currently have is called Lean 3.4?</p>",
        "id": 123540819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520702811
    },
    {
        "content": "<p>is that helpful for you if mathlib continues to keep up with nightly lean?</p>",
        "id": 123540863,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520702886
    },
    {
        "content": "<p>Yes, there will be a stable release before branching. I don't know if mathlib wants to stick with that or the new nightlies for random bug fixes.</p>",
        "id": 123540908,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520703005
    },
    {
        "content": "<p>That's great news about the stable release. I will be using Lean as part of my course</p>",
        "id": 123540918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520703064
    },
    {
        "content": "<p>in October, and if Lean 4 is still quite chaotic it will be very easy to explain to the students to use Lean 3.4</p>",
        "id": 123540921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520703090
    },
    {
        "content": "<p>There is enough in mathlib and Lean 3 for me to be able to do what I want to do</p>",
        "id": 123540922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520703110
    },
    {
        "content": "<blockquote>\n<p>This is only tangentially related, but would it be possible to get more devs from somewhere? Will MS pay for more? Can people apply for grant money for more? Or is there some problem of the form \"Leo doesn't trust anyone enough to mess with his code\"?</p>\n</blockquote>\n<p>I am curious about how MSR allocates funding for internal projects; I don't know how it works when you're self-funded by a large company</p>",
        "id": 123541568,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520704761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> Heh... so my comment about Lean4 turns out to be prophetic rather than funny! :)</p>",
        "id": 123542318,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520706504
    },
    {
        "content": "<p>IIRC the lean 3 rewrite took about a year, maybe a bit more</p>",
        "id": 123544573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520711985
    },
    {
        "content": "<p>The lean 4 plan there is basically the union of all the large scale lean projects currently under consideration. I expect it will take at least 6 months as a low estimate</p>",
        "id": 123544626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520712065
    },
    {
        "content": "<p>As far as \"will it break mathlib\", I would say probably yes, but in a good way - moving things out of core lib is music to my ears</p>",
        "id": 123544673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520712160
    },
    {
        "content": "<p>I honestly think that writing maths again from scratch might be a lot of fun. I have never seen mathematics grown from the axioms before. There are still huge chunks of mathlib that I haven't read properly. Has anyone in the world read the Matiysevich stuff, for example? I am a number theorist and I know the theory, and I know exactly what the statement of the main theorem is, but I have no idea how he is proving it. Some of the later code looks quite unlike anything I've seen before in Lean. If I had to code up that mathematics it would take me months. Is there a chance that that high-powered stuff will have to be substantially rewritten to port it to Lean 4, or might it just be a case of redoing the basics?</p>",
        "id": 123546023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520715454
    },
    {
        "content": "<p>My very uninformed guess from reading Leo's roadmap is that the high-powered stuff may not actually need a complete rewrite. I'm glad you see it as \"an opportunity, not a problem\".</p>",
        "id": 123546266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520715964
    },
    {
        "content": "<p>Eish! I go away for a few days (family visiting) and return to find the Lean world flipped upside down again. At what point do we get past the always-started-never-finished phase? That is, I've understood Lean 3 to be “experimental” since it began, and now Lean 4 is being started, but Lean 3 never officially dropped the label. Why not just continue incrementally developing Lean 3 using the same goals instead of starting over?</p>",
        "id": 123610181,
        "sender_full_name": "Sean Leather",
        "timestamp": 1520864216
    },
    {
        "content": "<p>I don't understand anything about the C++ code of Lean, but I think there is not much news here. We knew big changes were coming (at least <a href=\"https://github.com/leanprover/lean/issues/1601\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1601\">#1601</a>,  <a href=\"https://github.com/leanprover/lean/issues/1674\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1674\">#1674</a>,  <a href=\"https://github.com/leanprover/lean/issues/1692\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1692\">#1692</a>). I don't see how one could rewrite the parser from scratch without going through an unusable state.  So there is clearly a need for a separate branch doing that. Why not calling it Lean4? Also <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> told us the syntax should not change much this time. On top of that we learn that Mario and Johannes will be given complete freedom do handle mathlib instead of having some part of it stuck in core lib. It looks like the ideal solution to enjoy the greatness of all those people without the recent tension.</p>",
        "id": 123611142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520865827
    },
    {
        "content": "<p>And we can still use Lean 3 in the mean time</p>",
        "id": 123611182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520865848
    },
    {
        "content": "<p>Well said. Maybe we'll decide to call it Lean 3.5 after all in the end if there aren't many breaking changes</p>",
        "id": 123611306,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520866074
    },
    {
        "content": "<p>Though I'm not sure when \"let's temporarily shrink core lib\" became \"let's remove the algebraic hierarchy from core lib forever\" :)</p>",
        "id": 123611373,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520866135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I have nothing against anything you're saying. I just wonder if it's not possible to remove stuff, rather than start over and add it back. But <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> certainly knows better.</p>",
        "id": 123612679,
        "sender_full_name": "Sean Leather",
        "timestamp": 1520868095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> -- Leo has made it completely clear that he felt that \"now\" was not the time to be developing mathlib. Of course what he cannot control is the fact that you guys have made a system in which doing mathematics is quite fun, and hence it is simply inevitable that there will be people doing mathematics in Lean. I hope to have students publishing simple papers in undergraduate mathematics journals about how they have used Lean, for example, and this is not going away whatever Leo's opinion is [in fact I think this fits well with Leo's views because Leo likes one-off projects, and writing a small paper saying \"this compiles with Lean commit X and mathlib commit Y\" means Leo doesn't have to worry about breaking it]. The happy medium which I think we're currently trying to seek is that Mario and his team continue to develop mathlib but (a) try extremely hard not to bother Leo with requests, even reasonable ones such as \"please fix ^, it would take 2 minutes\" and (b) don't complain when Leo breaks stuff.</p>",
        "id": 123613435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520869209
    },
    {
        "content": "<p>On the other hand, if Lean 4 appears with a temporarily-shrunken core lib then I am almost sure that a bunch of people will immediately just add what has disappeared to mathlib and then there's every chance that they will edit it to make it what one might call \"better\". In my mind there is no doubt that Mario's opinion on how to write a mathematics library is an opinion well worth listening to and to be quite frank I suspect he knows more about this subject than Leo. Or, at least, one might argue that Mario knows how to write a library which mathematicians can use better than Leo does (although this is probably not a question Leo is even interested in).</p>",
        "id": 123613466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520869304
    },
    {
        "content": "<p>But at some point the question \"is Leo ready for mathlib yet?\" will come around again. For example, on the day Lean 4 is released. Will he be?</p>",
        "id": 123613513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520869358
    },
    {
        "content": "<p>I believe the only reason the algebraic hierarchy is in the core lib right now is that it's used by the C++ implementation of <code>norm_num</code>. So yes, in Lean 4 it may actually be realistic to move it to mathlib because it should be possible to build a high-performance <code>norm_num</code> in Lean.</p>",
        "id": 123616805,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520874526
    },
    {
        "content": "<p>Regarding the planned change to <code>decidability</code> and <code>ite</code>, are we going to keep <code>dite</code> with access to the assumption that the condition is true / false?</p>",
        "id": 123622134,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520882495
    },
    {
        "content": "<p>The changes to <code>decidable</code> and <code>ite</code> are the ones I am most dubious of. I do not think it would actually be better to define <code>decidable</code> as a bool plus a proof of <code>b = tt &lt;-&gt; p</code>, and the concerns that make this reasonable in Coq don't apply directly in lean (in particular because we don't use kernel computation as much). For <code>ite</code>, we already have <code>cond</code>, <code>ite</code> and <code>dite</code> and these three functions are needed regardless of any notations attached to them. But I don't see any obvious alternate way to interpret <code>if h : p then t else e</code> other than using <code>dite</code>, and anything that uses <code>bool</code> here will be too cumbersome. For the nondependent <code>if p then t else e</code>, it's not really a big deal if this is interpreted as <code>cond</code> or <code>ite</code>, but there should not be any relative performance penalty between the two in any case, and if there is this is a fault of the code generator not the functions.</p>",
        "id": 123629973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520895619
    },
    {
        "content": "<p>Note: if you want to write a <code>decidable p</code> program by defining a <code>bool</code> program and prove it is correct, you can do this by using <code>decidable_of_iff (my_bool = tt &lt;-&gt; p) &lt;proof&gt;</code> with essentially no performance penalty. There is no need to change the definition for this.</p>",
        "id": 123630039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520895732
    },
    {
        "content": "<p>In this situation, I think we can identify two changes: <code>ite</code> taking a bool instead of a decidable proposition and <code>decidable</code> being redefined. I think regardless of the definition of <code>decidable</code>, we can keep <code>if _ then _ else _</code> the same.  In the non dependent case, I can see how a boolean condition would make the condition easier to rewrite.</p>",
        "id": 123630108,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520895895
    },
    {
        "content": "<p>Coq is a lot more cumbersome in this regard. You end up writing something like <code>if Z_lt_dec a b</code> instead of <code>if h : a &lt; b</code>; the later is naturally a lot more readable (where <code>Z_lt_dec</code> is unsurprisingly something like <code>{a &lt; b} + {~a &lt; b}</code> which is just Coq notation for sumbools). There is a weird notation-al dissonance between props and their \"boolean\" (decidable) alter-egos in Coq</p>",
        "id": 123630553,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520896693
    },
    {
        "content": "<p>Yeah that's true. It's a really cool thing about Lean. It seems like just writing an obvious program is so much easier and that way of defining <code>if _ then _ else _</code> has something to do with it.</p>",
        "id": 123630761,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520897134
    },
    {
        "content": "<p>Notation is just too important, regardless of the amount of bikeshedding blame ending up being bestowed upon those partaking in the discussion :P. (I guess Iverson would agree!)</p>",
        "id": 123630871,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897325
    },
    {
        "content": "<p>Which is twice as amusing because then what on Earth was he thinking with APL.</p>",
        "id": 123630883,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897363
    },
    {
        "content": "<p>That's what I was about to ask. I only know Iverson from APL and APL is only an example of how to make a miserable mess of your syntax</p>",
        "id": 123630955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520897445
    },
    {
        "content": "<p>Well his Turing award lecture was named <code>Notation as a tool of thought</code> so one would <em>think</em> that he of all people would understand the importance.</p>",
        "id": 123631020,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897609
    },
    {
        "content": "<p>And then he goes on to explain what makes good notation with some very valid points.</p>",
        "id": 123631023,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897623
    },
    {
        "content": "<p>And then he proceeds to use APL to demonstrate those valid points and at this point everyone is like \"are you serious?\".</p>",
        "id": 123631069,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897647
    },
    {
        "content": "<p>Interesting. I haven't read it. I'll have a look.</p>",
        "id": 123631072,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520897664
    },
    {
        "content": "<p>My reference for mathematical notation is Dijkstra and his idea of \"letting the symbols do the work\"</p>",
        "id": 123631083,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520897714
    },
    {
        "content": "<p>I have mixed feelings about DIjkstra ^^.</p>",
        "id": 123631132,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897769
    },
    {
        "content": "<p>He wrote a note on his notational choices in EWD 1300: <a href=\"https://www.cs.utexas.edu/users/EWD/index13xx.html\" target=\"_blank\" title=\"https://www.cs.utexas.edu/users/EWD/index13xx.html\">https://www.cs.utexas.edu/users/EWD/index13xx.html</a></p>",
        "id": 123631143,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520897792
    },
    {
        "content": "<p>Why am I not one bit surprised that it's hand-written. He would also write computer programs in English... argh! :)</p>",
        "id": 123631156,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897829
    },
    {
        "content": "<p>Yeah you can take all his opinions as holy writ. What bothers you in his ideas?</p>",
        "id": 123631157,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520897834
    },
    {
        "content": "<p>:D</p>",
        "id": 123631161,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520897851
    },
    {
        "content": "<p>I love his handwriting :D</p>",
        "id": 123631164,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520897858
    },
    {
        "content": "<p>It's more like his personality and actions not coinciding with what he actually says.</p>",
        "id": 123631206,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897888
    },
    {
        "content": "<p>For example \"the humble programmer\".</p>",
        "id": 123631207,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897893
    },
    {
        "content": "<p>Humility was probably his weakest point :P.</p>",
        "id": 123631208,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520897903
    },
    {
        "content": "<p>Haha! Yeah but the humility he speaks of in that is something he did: he did assume his problems were too hard to just approach head on so he worked on reducing their intellectual demands</p>",
        "id": 123631231,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520897982
    },
    {
        "content": "<p>Have you seen his correspondence with Backus? For some reason my personal feelings towards Dijsktra make me like even his ideas less :(.</p>",
        "id": 123631350,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898194
    },
    {
        "content": "<p>No, where can I find it?</p>",
        "id": 123631355,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520898226
    },
    {
        "content": "<p>By \"his ideas\" do you mean Backus?</p>",
        "id": 123631358,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520898236
    },
    {
        "content": "<p>Nono, I mean Dijsktra.</p>",
        "id": 123631395,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898243
    },
    {
        "content": "<p><a href=\"https://medium.com/@acidflask/this-guys-arrogance-takes-your-breath-away-5b903624ca5f\" target=\"_blank\" title=\"https://medium.com/@acidflask/this-guys-arrogance-takes-your-breath-away-5b903624ca5f\">https://medium.com/@acidflask/this-guys-arrogance-takes-your-breath-away-5b903624ca5f</a></p>",
        "id": 123631398,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898245
    },
    {
        "content": "<p>Backus would talk about functional programming and liberation from von-neumman architecture and thinking in bytes.</p>",
        "id": 123631401,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898273
    },
    {
        "content": "<p>And Dijstrka would unleash a flurry of what is difficult to describe :).</p>",
        "id": 123631404,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898289
    },
    {
        "content": "<p>It's a fairly long chain of replies tho, which makes me dislike Dijsktra from a really silly personal standpoint.</p>",
        "id": 123631473,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898383
    },
    {
        "content": "<p>Putting personal feelings aside tho, objectively Dijsktra was an excellent computer scientist.</p>",
        "id": 123631492,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898424
    },
    {
        "content": "<p>That's interesting. I started off taking Dijkstra's word as holy gospel and followed his approach for my master's. It's been very enlightening for me to learn to disagree with him and to stop tearing down projects that I would not personally undertake</p>",
        "id": 123631554,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520898535
    },
    {
        "content": "<p>Specifically, I had to eventually dismiss his \"Computer Science is no more about computers than astronomy is about telescopes\" comment. Z3 is actually what led me there. Having fast computers makes such a difference in building large formal proofs. I had to rethink my views in the field</p>",
        "id": 123631582,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520898602
    },
    {
        "content": "<p>I think we also often somehow disregard that there exist proofs that are \"computational\" in their nature, which the 4-colour theorem is a prime example of. I am guessing they arise when your \"domain\" is constrained but still colossal.</p>",
        "id": 123631624,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898701
    },
    {
        "content": "<p>But perhaps Kevin or Patrick would be of different opinion.</p>",
        "id": 123631672,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898735
    },
    {
        "content": "<p>That kind of proof still bother me a bit. I think they are a valid certificate for their claim but I wonder if they limit the amount of insight that one can gain from reading it.</p>",
        "id": 123631718,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520898844
    },
    {
        "content": "<p>Does an alternative that doesn't need to check &lt;many&gt; cases exist yet?</p>",
        "id": 123631724,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520898881
    },
    {
        "content": "<p>Nope, not as far as I know.</p>",
        "id": 123631834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520899132
    },
    {
        "content": "<p>Although I think &lt;many&gt; went down from the original 2000 or so</p>",
        "id": 123631844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520899146
    },
    {
        "content": "<p>Not that I know of. My point is that I'm hesitant to accept the computational nature of the proof. I'm not sure how useful that particular fact is but a proof that is inscrutable proves one fact but if the proof can show people how to do mathematics or computer science, it does so more to advance the field. Admittedly if the theorem is referenced all the time but the proof is uninteresting, it still moves the field forward</p>",
        "id": 123631846,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520899163
    },
    {
        "content": "<p>I don't know much about proofs which are computational in nature, the proofs I know are all about building elaborate structures.</p>",
        "id": 123631849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520899201
    },
    {
        "content": "<p>This particular theorem is super-interesting!</p>",
        "id": 123631891,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899206
    },
    {
        "content": "<p>How enlightening was the proof for you?</p>",
        "id": 123631913,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520899257
    },
    {
        "content": "<p>Not one bit.</p>",
        "id": 123631920,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899265
    },
    {
        "content": "<p>What is so interesting about the theorem?</p>",
        "id": 123631976,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520899355
    },
    {
        "content": "<p>Its applications. People optimize compilers with it, people use it to cover areas with signal with it. It's a useful, therefore interesting??? theorem.</p>",
        "id": 123632039,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899459
    },
    {
        "content": "<p>It's not some claim about perfectoid spaces :P.</p>",
        "id": 123632044,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899485
    },
    {
        "content": "<p>I was not aware of that. That's pretty cool :) Do you know how it helps with compilers?</p>",
        "id": 123632057,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520899513
    },
    {
        "content": "<p>I think something to do with assigning variables to registers.</p>",
        "id": 123632058,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899527
    },
    {
        "content": "<p>To avoid spilling perhaps?</p>",
        "id": 123632060,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> At one point in the past Kevin told me he's not very fond of proofs that rely purely on human understanding of the world (such as commutativity of multiplication being explained \"geometrically\" by counting soldiers rows first / cols first and noting that their number doesn't change) - any observations in this regard?</p>",
        "id": 123632106,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899586
    },
    {
        "content": "<p>That makes sense. I'm still not sure where the planarity of the graph intervenes though</p>",
        "id": 123632107,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520899589
    },
    {
        "content": "<p>the trouble is intuition will only get you so far, and that's why appeals to informal proofs like counting soldiers is not ideal</p>",
        "id": 123632163,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520899712
    },
    {
        "content": "<p>That's a similar argument to Kevin's. I just wonder if you would accept \"simple\" proofs like that as proofs.</p>",
        "id": 123632168,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899738
    },
    {
        "content": "<p>Lean would of course not.</p>",
        "id": 123632169,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899742
    },
    {
        "content": "<p>Interesting, yes I do. I don't like proofs by analogy, not in technical texts anyway. I have no problems with proofs that purely shuffle symbols around. But I like them to be arranged in way that is obvious so that most of the proof is of the sort \"there is only one thing you can do now\" with as little surprises as possible. To me, it boils down to this: do you want to impress your audience or do you want to teach them something beyond this particular fact.</p>",
        "id": 123632180,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520899788
    },
    {
        "content": "<p>But it's still a proof... for a human, right?</p>",
        "id": 123632239,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899852
    },
    {
        "content": "<p>i would prefer something that does both? a well written paper interspersed with reasoning and formal proof</p>",
        "id": 123632240,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520899853
    },
    {
        "content": "<p>If I were to tell you that you can count soldiers from \"either perspective\" to get the same result, would you be convinced that this is the case for an arbitrary number of soldiers?</p>",
        "id": 123632291,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520899923
    },
    {
        "content": "<p>How would one formulate this kind of proof in Lean?</p>",
        "id": 123632321,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900015
    },
    {
        "content": "<blockquote>\n<p>But it's still a proof... for a human, right?</p>\n</blockquote>\n<p>Yes exactly. So you should have a <code>calc</code> block that spans pages and pages even if it's valid. You're losing people's attention. On the other hand don't, for the sake of being intuitive, jump into the rabbit hole that is the breaking down of equivalences into mutual implication or the analysis of multiple cases. I like efficiency in (human) formal reasoning</p>",
        "id": 123632323,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520900018
    },
    {
        "content": "<blockquote>\n<p>How would one formulate this kind of proof in Lean?</p>\n</blockquote>\n<p>I wouldn't even try but I'm curious about what you'd come up with</p>",
        "id": 123632366,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520900067
    },
    {
        "content": "<p>I am not sure. In general, if I were to call this a \"geometrical proof\", how would one begin in a mechanized / formalized setting.</p>",
        "id": 123632378,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900125
    },
    {
        "content": "<p>I would venture the opinion that it is impossible because its justification is not in any set of axiom but in an experience of space that is common to most humans.</p>",
        "id": 123632440,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520900255
    },
    {
        "content": "<p>I think the only proof of the \"counting soldiers in a rectangle\" which I can accept is induction on one of the sides. I was ranting about this in the finite sequences thread though -- I don't know whether the statement \"partition X into m disjoint subobjects each of size d -&gt; size of X is m*d\" should be a theorem about finite sets, finsets or fintypes. In reality it's a theorem about objects in a rectangle</p>",
        "id": 123632485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900313
    },
    {
        "content": "<p>And it is a big weakness. It's a bit of stage magic: you make it appear like you solved the problem but the only criterion is that \"people agree\"</p>",
        "id": 123632486,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520900314
    },
    {
        "content": "<p>Sounds very reasonable. Could one formulate a model of such intuitive understanding that would be consistent with our perception thereof? Like ZFC but... with more hand-waving :P.</p>",
        "id": 123632489,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900322
    },
    {
        "content": "<p>and I think it's a bit weird that one theorem in maths / reality threatens to become three in Lean.</p>",
        "id": 123632490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900336
    },
    {
        "content": "<p>Right. But that's what proofs are, by definition. \"People agree.\"</p>",
        "id": 123632498,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900391
    },
    {
        "content": "<p>Not any more.</p>",
        "id": 123632540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900404
    },
    {
        "content": "<p>Not in mathematics.</p>",
        "id": 123632545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900407
    },
    {
        "content": "<p>It's not?</p>",
        "id": 123632546,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900407
    },
    {
        "content": "<p>Oh, nice.</p>",
        "id": 123632547,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900411
    },
    {
        "content": "<p>I think it's going too fast. That's why I'm here.</p>",
        "id": 123632548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900417
    },
    {
        "content": "<p>I think what is commonly accepted as a proof in mathematics is \"the experts look at the techniques and figure that they should be enough\"</p>",
        "id": 123632553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900437
    },
    {
        "content": "<p>Ufffff...</p>",
        "id": 123632558,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900451
    },
    {
        "content": "<p>and then the rest of the people just say \"well the experts seem to believe it\"</p>",
        "id": 123632560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900462
    },
    {
        "content": "<p>I would venture the opinion that it's moving towards \"people agree on a fixed number of rules and once they agreed, you have to decide whether the rules have been followed\"</p>",
        "id": 123632565,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520900464
    },
    {
        "content": "<p>That doesn't sound reassuring.</p>",
        "id": 123632566,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900464
    },
    {
        "content": "<p>Patrick goes on about Scholze. But the number of people who have read all of his recent work is probably 0 (other than Scholze) now, because he's been branching out a bit. On the other hand, he has form, and some people have checked some of his stuff very carefully</p>",
        "id": 123632613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900539
    },
    {
        "content": "<p>so there's a certain amount of trust involved.</p>",
        "id": 123632616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900545
    },
    {
        "content": "<p>But he is not perfect even though he's a genius, and this is what makes me scared.</p>",
        "id": 123632619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900572
    },
    {
        "content": "<p>because mathematics is being done at a ludicrously quick rate at the minute, with it being so easy to knock up a pdf and stick it on ArXiv</p>",
        "id": 123632625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900610
    },
    {
        "content": "<p>Of course there's \"perfectoid space\" on Scholze's wiki page.</p>",
        "id": 123632726,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900782
    },
    {
        "content": "<p>So I guess you guys are, and this is a terminus technicus, \"in a pickle\".</p>",
        "id": 123632740,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900853
    },
    {
        "content": "<p>Checking proofs is apparently hard.</p>",
        "id": 123632742,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520900860
    },
    {
        "content": "<p>Well, I think that people don't think we are in a pickle.</p>",
        "id": 123632781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900889
    },
    {
        "content": "<p>and I am kind-of concerned that we might find out too late that some important thing was wrong and then everyone will have egg on their face.</p>",
        "id": 123632783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520900919
    },
    {
        "content": "<p>Here's my kind of formalization of soldiers-in-a-rectangle proof of commutativity:</p>\n<ul>\n<li>Why should we believe that counting from one direction or another should give the same number?<ul>\n<li>because it's the same soldiers</li>\n</ul>\n</li>\n<li>But why should counting the same soldiers in a different order give the same number?<ul>\n<li>Because that's what we mean by the \"same number\" (alternatively, you can push on this intuition but I will stick to conventional cardinality)</li>\n</ul>\n</li>\n<li>But how do we know we aren't double counting or something? That would clearly mess up the count<ul>\n<li>Because we are sweeping from one side to another in the count in some definite order, which prevents a double count</li>\n</ul>\n</li>\n</ul>\n<p>At this point, I see the formal proof clearly: it is a bijection between <code>fin m x fin n</code> and itself that counts lexicographically in two different ways</p>",
        "id": 123632784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520900922
    },
    {
        "content": "<p>On the other hand I am open to the opinion that I am just getting old. I am happy that FLT is proved but then again I had time to read the proof (I was a post-doc and it was in my area so I had to read it). But ever since then I've felt less and less convinced that people have been checking all the details of absolutely everything, however perhaps I'm just more paranoid and slower now.</p>",
        "id": 123632853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520901044
    },
    {
        "content": "<p>Meh but when you write down the bijection between fin m x fin n and fin (m x n) ... oh no you're right, you don't seem to need induction!</p>",
        "id": 123632904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520901132
    },
    {
        "content": "<p>But now you have to prove that if fin x and fin y are in bijective correspondence then x=y.</p>",
        "id": 123632907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520901149
    },
    {
        "content": "<p>Mario's proof is the categorification proof. Don't prove a * b = b * a in nat, prove A x B bijects with B x A in the category of sets.</p>",
        "id": 123632913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520901198
    },
    {
        "content": "<blockquote>\n<p>I'm just more paranoid and slower now.</p>\n</blockquote>\n<p>That sounds like a good thing to have in an audience. If the smartest of the smart are the ones reviewing the FLT proof, what will be left of that understanding once those people will have died? Will you need people dedicated to learning and understanding that particular proof and transmitting that understanding from generation to generation?</p>",
        "id": 123632956,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520901279
    },
    {
        "content": "<p>Remember Fermat had a beautiful proof that just barely didn't fit the margin in his notebook or what was it ;). Surely we can easily understand 17th century mathematics!</p>",
        "id": 123633187,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520901806
    },
    {
        "content": "<p>I think that's mathematician code for \"... and then magic happens ...\"</p>",
        "id": 123633232,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520901872
    },
    {
        "content": "<p>What sounds better is: Magician's code for \"... and then mathematics happens ...\".</p>",
        "id": 123633250,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520901952
    },
    {
        "content": "<p>Oh man, I'll be getting like 4 hours of sleep. Yey... off to bed, nite.</p>",
        "id": 123633303,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520902065
    },
    {
        "content": "<blockquote>\n<p>But now you have to prove that if fin x and fin y are in bijective correspondence then x=y.<br>\nMario's proof is the categorification proof. Don't prove a * b = b * a in nat, prove A x B bijects with B x A in the category of sets.</p>\n</blockquote>\n<p>The goal with that proof was to try to establish what formal proof underlies the confidence in the result given from the \"geometric proof\" of this theorem. But most of this is actually just pinning down what we mean when we say things. When I say there are 10 soldiers in a line, what does that mean? I guess I should be able to count up 10 times while naming the soldiers, but then 10 is defined in terms of itself which isn't good. Perhaps we have some internal conception of 10 as a number, and then we map this internal representation onto the soldiers; in that case it looks like we're talking about bijecting our set <code>A</code> of soldiers with <code>fin n</code> where <code>n : nat</code> is our abstract conception of numbers.</p>\n<p>So where is <code>fin n = fin m -&gt; n = m</code> hiding? I would argue it is in the intuitive notion that there are a well defined number of soldiers in the line in the first place, which is generally unchallenged. One may worry at this point that this is an empirical fact, that it just so happens that in our universe every time we count the same thing twice we get the same number (which obviously is false for a variety of reasons like miscounting), but we can push the theorem back to the platonic realm by counting our own abstract numbers, i.e. forming a bijection {1,...,n}-&gt;{1,...,m} and showing that always n=m in this case.</p>",
        "id": 123633304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520902068
    },
    {
        "content": "<p>^ This follows the \"intuitive\" notion of how cardinality is extended beyond finite. Just form a bijection with something nice (such as natural numbers) and then put your faith in the nice set.</p>",
        "id": 123633410,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520902239
    },
    {
        "content": "<p>I really need to sleep. Bai.</p>",
        "id": 123633418,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520902263
    },
    {
        "content": "<p>Some questions on the design notes:</p>\n<blockquote>\n<p><code>if-then-else</code> using <code>bool</code> instead of <code>Prop</code>. As soon as we started programming with Lean (version 3), it became clear that <code>if-then-else</code> with <code>Prop</code> creates more problems that it solves.</p>\n</blockquote>\n<p>Can anyone elaborate on the problems created?</p>\n<blockquote>\n<p>The elaborator already has support for a coercion from <code>Prop</code> to <code>bool</code> (for decidable propositions). The dependent <code>if H : p then t else e</code> may look cute, but it is unnecessary now that we have <code>match</code>.</p>\n</blockquote>\n<p>Doesn't the “now that we have <code>match</code>” statement apply equally well to the non-dependent <code>if-then-else</code>? Stated another way: why would you want <code>if-then-else</code> for non-dependent propositions if you don't want <code>if-then-else</code> for dependent propositions? (I'm not arguing one way or another, just trying to understand the logic.)</p>",
        "id": 123643461,
        "sender_full_name": "Sean Leather",
        "timestamp": 1520925173
    },
    {
        "content": "<p>I'm worried about those statements too. I wouldn't want to see those two <code>if-then-else-</code> disappear. More worrisome still is the introduction of <code>match</code> in the expression language. In Coq, they tend to make expressions larger than necessary. I really like that we're using auxiliary definitions instead</p>",
        "id": 123664272,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520963494
    },
    {
        "content": "<p>Uh? There is no planned change to <code>match</code>.</p>",
        "id": 123664331,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520963570
    },
    {
        "content": "<p>Glad to hear it! So what does Leo mean what he says those things?</p>",
        "id": 123664656,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520964056
    },
    {
        "content": "<p>In the \"SSA or SIL\" question in the design notes referring to LLVM IR vis Swift IL?</p>",
        "id": 123676054,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1520981474
    },
    {
        "content": "<p>SIL indeed stands for swift IL, SSA is static single assignment form in general. I think LLVM is off the table now</p>",
        "id": 123676114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520981556
    },
    {
        "content": "<blockquote>\n<p>I think LLVM is off the table now</p>\n</blockquote>\n<p>Yes? What disqualified it?</p>",
        "id": 123676509,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520982233
    },
    {
        "content": "<p>It's very complicated with its own gotchas, and it's unlikely to produce better results than just having our own IL</p>",
        "id": 123676702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520982599
    },
    {
        "content": "<p>Leo works with Nuno Lopes, who has done formalization of LLVM and I think is the source of this view</p>",
        "id": 123676768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520982653
    },
    {
        "content": "<p>That's interesting. I thought having that kind of formalization might be a good reason to use it</p>",
        "id": 123676776,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520982689
    },
    {
        "content": "<p>I think it's more like once you've formalized a big language you know all the little suboptimalities in it. Like how I now have a better understanding of lean's theory to see why non-transitive definitional equality is a problem</p>",
        "id": 123676834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520982779
    },
    {
        "content": "<p>plus we're not talking a formalization in a proof assistant, I think it comes in the form of papers and compiler optimization checking tools</p>",
        "id": 123676890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520982844
    },
    {
        "content": "<p>Ah ok. I thought you were talking of someone from the Vellvm project</p>",
        "id": 123677247,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520983470
    },
    {
        "content": "<p>If you target Swift IL, then you are implicitly saying that you are fine with LLVM IR since SIL is translated to LLVM.</p>",
        "id": 123677476,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1520983898
    },
    {
        "content": "<p>I think it's just being used for inspiration</p>",
        "id": 123677523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520983972
    },
    {
        "content": "<p>GHC's compilation is essentially \"System F core -&gt; STG -&gt; Cmm -&gt; (native | LLVM)\".  I would expect a similar flow would work well for Lean.</p>",
        "id": 123678090,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1520985063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@jhx</span> Do you think it will be problematic to use Haskell techniques in Lean even though Lean is strict by default?</p>",
        "id": 123678816,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520986386
    },
    {
        "content": "<p>It's true.  I could imagine Lean maps a system F like core directly to a low-level Cmm representation.  My understanding is that STG is provides a uniform closure representation and is where strictness analysis is performed prior to Cmm generation.</p>",
        "id": 123691650,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1521012954
    },
    {
        "content": "<blockquote>\n<p>Glad to hear it! So what does Leo mean what he says those things?</p>\n</blockquote>\n<p>Leo didn't write to get rid of <code>match</code>, in the (unpolished) document he writes that dependent if-then-else(<code>dite</code>) is not necessary anymore due to having <code>match</code> now. But I hope that we can implement <code>if h : p then a else b</code> with the parser in Lean4 ourself.</p>",
        "id": 123692580,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1521015019
    },
    {
        "content": "<p>I don't understand that comment either. AFAIK lean has had match since lean 1, what's new?</p>",
        "id": 123692631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521015133
    },
    {
        "content": "<p>My guess is that in later Lean versions <code>match</code> got improved support for the dependent case? But I also don't see how <code>match</code> should replace the dependent if case. The later also includes the construction of the decidable predicate.</p>",
        "id": 123692959,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1521015938
    },
    {
        "content": "<p>Assuming the decidable changes are implemented, should the <code>h</code> in <code>if h : p then a else b</code> syntax ensure <code>h</code> has type <code>p</code> (resp. <code>not p</code>)?  That syntax would then hide the underlying representation choice.</p>",
        "id": 123709552,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1521045015
    }
]