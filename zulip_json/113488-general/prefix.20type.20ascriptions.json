[
    {
        "content": "<p>Sometimes I've thought a type ascription or cast could be clearer in certain cases if the type came at the beginning rather than at the end like in <code>(x : t)</code>.  I know <code>show t, from x</code> exists, but it's rather long in comparison, and I don't find it to be very mnemonic for things that aren't proofs.  Borrowing an idea from <a href=\"http://www.lispworks.com/documentation/lw50/CLHS/Body/s_the.htm\">common lisp</a>, a possible alternative is <code>the t, x</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">y</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This isn't anything like a serious proposal. I just thought I'd mention it in case it's interesting to anyone, or in case anyone has other ways of writing the type first.</p>\n<p>For example, as a prefix it acts more like a coercion operator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">the</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Of course, there's no need for new notation for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>However, it's sort of nice how notation lets you avoid additional parentheses in both the type and the term.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:=</span> <span class=\"n\">the</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">17</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span>\n</code></pre></div>",
        "id": 254778151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632520318
    },
    {
        "content": "<p>(In the realm of mnemonic notation, it seems that <code>$</code> can generally be pronounced as \"of\", and if one wanted it'd make a reasonable notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>This goes against a quasi-rule, though, that infix notation should contain non-alphanumeric symbols.)</p>",
        "id": 254778680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632520581
    },
    {
        "content": "<p>Note that <code>show</code> has different elaboration rules to <code>:</code>, and can prevent lemmas matching if part of the statement.</p>",
        "id": 254779542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632520984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/prefix.20type.20ascriptions/near/254778151\">said</a>:</p>\n<blockquote>\n<p>Sometimes I've thought a type ascription or cast could be clearer in certain cases if the type came at the beginning rather than at the end like in <code>(x : t)</code>.</p>\n</blockquote>\n<p>It is important to note that having the type after the term/variable is not purely a stylistic decision. As Lean has dependent types, the type of a declaration has to come after its parameters and the binders keep this ordering for consistency's sake. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ex: the parameter needs to precede the `def`'s type</span>\n<span class=\"kd\">def</span> <span class=\"n\">paradox</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">~</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"c1\">-- without a parameter, the signature looks much like a binder</span>\n<span class=\"c1\">-- thus, binders and type ascriptions follow this order as well</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 254789766,
        "sender_full_name": "Mac",
        "timestamp": 1632527965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> It seems you think I'm suggesting replacing <code>:</code>?  I only mean to suggest that every once in a while readability can be improved if the type comes first, and this a possible way to accomplish it.</p>\n<p>Also, what does dependent types have to do with this? other than the fact that in dependent type theory there's a <code>x : t</code> convention? In each binder, neither the variable nor the type can refer to each other, so they could reasonably come in either order.  I follow you as far as there being many benefits to having so-called \"<a href=\"https://letoverlambda.com/index.cl/toc\">duality of syntax</a>\" where conceptually related things are written the same way.</p>",
        "id": 254791635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632529334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/prefix.20type.20ascriptions/near/254791635\">said</a>:</p>\n<blockquote>\n<p>I follow you as far as there being many benefits to having so-called \"<a href=\"https://letoverlambda.com/index.cl/toc\">duality of syntax</a>\" where conceptually related concepts are written the same way.</p>\n</blockquote>\n<p>That was pretty much my whole point. The reason the type comes after a variable in a binder or ascription is so it mirrors the fact that the type comes after a signature in a declaration (the later of which is necessary because of dependent types).</p>",
        "id": 254791901,
        "sender_full_name": "Mac",
        "timestamp": 1632529546
    },
    {
        "content": "<p>I dispute the claim that dependent types impose a restriction on the order of the grammar</p>",
        "id": 254818533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632556051
    },
    {
        "content": "<p>Why couldn't we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the</span> <span class=\"n\">vector</span> <span class=\"n\">n</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">of_zeros</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 254818612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632556109
    },
    {
        "content": "<p>I'm not saying it's better, but I don't see where the requirement that variables are introduced to the left of their use comes from</p>",
        "id": 254818667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632556191
    },
    {
        "content": "<p>In some ways it makes more sense to have <code>\\lam (the T, x), e</code> from a binding structure point of view since <code>x</code> binds in <code>e</code> but not in <code>T</code>; putting the variable after the type means that you can add <code>x</code> to the context reading strictly left to right without having to skip over <code>T</code>. (In some languages, the lambda is represented internally as <code>lam T (x. e)</code> to make this binding structure explicit.)</p>",
        "id": 254821545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632559027
    },
    {
        "content": "<p>I think what Mac was saying is that we can't have c++ style signatures for things due to dependent typing (i.e. no <code>a^n + b^n ≠ c^n theorem flt (a b c : ℕ) (hc : c ≥ 2) (h : a*b*c ≠ 0)</code>). But I agree with everyone else, I think this notation is nice.</p>",
        "id": 254824535,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632562042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> One could argue that type ascription notation is backwards for dependent type reasons, and having it is a concession to \"duality of syntax.\"  You can't write the function <code>def the (α : Type*) (x : α) := x</code> with reversed arguments.</p>\n<p>This might explain why every once in a while there's an expression where I feel like I'd rather put the type first.</p>",
        "id": 254866980,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632600701
    },
    {
        "content": "<p>I agree with everyone here that type ascriptions in the reverse order (i.e., <code>the Nat x</code> or, what I would like, just <code>Nat x</code> or <code>Nat(x)</code>) are useful, and, as <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> pointed out, more logical with respect to dependent type theory. I was simply noting the logic behind not doing them that  way is likely for \"duality of syntax\". Since types have to be written after the main signature a <code>def</code> for DTT, they are as written such in other places (bindings, type ascriptions, etc.) as well.</p>",
        "id": 254872328,
        "sender_full_name": "Mac",
        "timestamp": 1632605832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Sorry I'm still pulling on this thread about your claim that \"as Lean has dependent types, the type of a declaration has to come after its parameters.\"  In DTT, every term has a well-defined type, so there's no need for a type in a declaration.  Imagine a bizarro-Lean where terms come after the type in a type ascription.  Then this would be a valid way to write a definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>This also has the nice property that you are able to see the type near the <code>:=</code></p>",
        "id": 254891837,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632625197
    },
    {
        "content": "<p>(One problem with <code>Nat x</code> is that pi types have an evaluation rule in Lean, so you wouldn't be able to distinguish that kind of evaluation from a type ascription.  You could get <code>Nat(x)</code> to work if you make whitespace significant, making <code>Nat (x)</code> parse differently.)</p>",
        "id": 254892090,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632625419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> fair enough -- it would be more accurate to say that, if a declaration it has an explicit type, it has to come after its parameters. Also I would argue that, <em>technically</em>, that type still is coming after its parameters (just, in that case, in the body of the definition <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> .</p>",
        "id": 254892153,
        "sender_full_name": "Mac",
        "timestamp": 1632625452
    },
    {
        "content": "<p>In addition to Common Lisp, Idris also uses <code>the</code> for type ascription, and it's defined as the Identity function with an explicit type argument.</p>",
        "id": 254924672,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1632656382
    },
    {
        "content": "<p>I think that's exactly what <code>show</code> is defined as?</p>",
        "id": 254928850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632660532
    }
]