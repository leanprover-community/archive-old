[
    {
        "content": "<p>Back in ye olden days of Lean 2, there was an option to build Lean with the option <code>-k N</code> or <code>--keep-going N</code>. This would build Lean, and if there were <code>N</code> different files that raised at least one error, then the build would stop.</p>\n<p>I think a feature like this would be really useful for the Github Actions. Currently my workflow is</p>\n<ul>\n<li>Push a probably-broken commit to mathlib</li>\n<li>Wait for Github actions to raise an error</li>\n<li>Run <code>leanproject get-cache</code> and fix all errors in the file where the error was raised.</li>\n<li>Go to step 1.</li>\n</ul>\n<p>This workflow would speed-up quite a bit if Github actions showed the next 5-10 files with at least one error. The compilation after errors often still runs fine: usually it's a broken proof, and that raises 0 future errors (it might raise warnings of the form <code>imported a file containing 'sorry'</code>). If a definition/instance breaks, there will probably be many unrelated errors.</p>\n<p>Would it be possible / desirable to do this?</p>",
        "id": 208457194,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598740441
    },
    {
        "content": "<p>Maybe a more targeted version of this would be to only stop the build on an error in the main task?</p>",
        "id": 208457276,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598740546
    },
    {
        "content": "<p>Here is a commit that mentions the original <code>--keep-going</code>: <a href=\"https://github.com/leanprover-community/lean/commit/cfa9cd116cdb02668135fbb890e9d8d1ad962137\">https://github.com/leanprover-community/lean/commit/cfa9cd116cdb02668135fbb890e9d8d1ad962137</a></p>",
        "id": 208457278,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598740552
    },
    {
        "content": "<p>What do you mean by the main task?</p>",
        "id": 208457330,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598740585
    },
    {
        "content": "<p>The one that processes definitions, statements (but not proofs) of lemmas, other user commands</p>",
        "id": 208457343,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598740621
    },
    {
        "content": "<p>Another idea would be to try to not build a module that imports another module that had an error outside a proof</p>",
        "id": 208457360,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598740657
    },
    {
        "content": "<p>but continue to build the other parts of the import graph</p>",
        "id": 208457364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598740674
    },
    {
        "content": "<p><code>linja</code>!</p>",
        "id": 208457411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598740716
    },
    {
        "content": "<p>Oh yeah, something like that would be nice too</p>",
        "id": 208457500,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598740845
    },
    {
        "content": "<p>here's <code>make</code>'s <code>--keep-going</code> flag:</p>\n<div class=\"codehilite\"><pre><span></span><code>       -k, --keep-going\n            Continue as much as possible after an error.  While the target that failed, and those that depend on it, cannot  be  re‚Äê\n            made, the other dependencies of these targets can be processed all the same.\n</code></pre></div>",
        "id": 208457521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598740910
    }
]