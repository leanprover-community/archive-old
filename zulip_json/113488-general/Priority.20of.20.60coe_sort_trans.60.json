[
    {
        "content": "<p>It seems to me the priority of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_sort_trans\">docs#coe_sort_trans</a> should be lower than all other <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_to_sort\">docs#has_coe_to_sort</a> instances, in particular lower than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like.has_coe_to_sort\">docs#set_like.has_coe_to_sort</a>.</p>\n<p>I discovered this issue when I got a timeout in the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.fractional_ideal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">basis</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- timeout at `I`, recursively tries coercing `I` to a fractional ideal in the ideal quotient of adjoining a root to the polynomials over ... of S</span>\n</code></pre></div>\n<p>My proposed fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.fractional_ideal</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">coe_sort_trans</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">set_like.has_coe_to_sort</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">basis</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- nearly instant</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247928999,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627916113
    },
    {
        "content": "<p>Idem for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_fn_trans\">docs#coe_fn_trans</a></p>",
        "id": 247929794,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627916476
    },
    {
        "content": "<p>I'm worried that lowering these priorities is just a patch. <br>\nIf we have a type-class problem that is supposed to fail (which we often have), then the combination of these instances will still loop.<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/fractional_ideal.coe_to_fractional_ideal\">docs#fractional_ideal.coe_to_fractional_ideal</a> looks like a pretty dangerous instance, since neither <code>S</code> nor <code>P</code> can be inferred from the LHS.<br>\nIt doesn't quite fall in the description of <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#use%20has_coe_t\">https://leanprover-community.github.io/mathlib_docs/notes.html#use%20has_coe_t</a>, but maybe this loop is solved if we make <code>fractional_ideal.coe_to_fractional_ideal</code> an <code>has_coe_t</code>?</p>\n<p>I'm not against lowering the priorities you mentioned, I think that we should <em>also</em> remove this loop.</p>",
        "id": 247969854,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1627937469
    },
    {
        "content": "<p>Looks like turning it into a <code>coe_t</code> speeds stuff up quite a bit, regardless of whether we get into a loop, so here's <a href=\"https://github.com/leanprover-community/mathlib/issues/8529\">#8529</a>.</p>",
        "id": 248203623,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627985950
    }
]