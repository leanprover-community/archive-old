[
    {
        "content": "<p>Can we pretty print <code>ulift.up x</code> as <code>up x</code>, not <code>{ down := x}</code> while printing other terms <code>x : ulift α</code> as <code>x</code>?</p>",
        "id": 260614965,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636346870
    },
    {
        "content": "<p>(you're talking about the pretty-printer output, like in the tactic state view, right? is that really controlled by <code>has_repr</code>?)</p>",
        "id": 260650642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636374951
    },
    {
        "content": "<p>Probably yes, and I wonder if it's clever enough to tell <code>ulift.up x</code> from anything else.</p>",
        "id": 260650778,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636375016
    },
    {
        "content": "<p>No those two are different.</p>",
        "id": 260650842,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636375056
    },
    {
        "content": "<p>What does <code>has_repr</code> control?</p>",
        "id": 260650876,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636375074
    },
    {
        "content": "<p>Does <code>attribute [pp_using_anonymous_constructor] ulift</code> help?</p>",
        "id": 260650878,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636375075
    },
    {
        "content": "<p>The <code>has_repr</code> instance controls what <code>#eval ulift.up 42</code> prints.</p>",
        "id": 260650942,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636375096
    },
    {
        "content": "<p>And which function/class is responsible for <code>#print</code>/goals output?</p>",
        "id": 260650953,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636375109
    },
    {
        "content": "<p>Lean itself, I think</p>",
        "id": 260650999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636375154
    },
    {
        "content": "<p>Yup: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/pp.cpp\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/pp.cpp</a></p>",
        "id": 260651009,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636375163
    },
    {
        "content": "<p>It sounds like we want a variant of the attribute that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma/src\">src#sigma</a> has, <code>pp_using_anonymous_constructor</code>?</p>",
        "id": 260651020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636375173
    },
    {
        "content": "<p>Perhaps <code>pp_using_named_constructor</code>? It would need to be added <a href=\"https://github.com/leanprover-community/lean/blob/ace65343cf502bbfeee82a0bc54c47a76b2a3dfd/src/frontends/lean/pp.cpp#L894\">around here</a>.</p>",
        "id": 260651152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636375241
    },
    {
        "content": "<p>Note that the widget framework can also tweak how the tactic state is displayed. See the wonderful <a href=\"https://github.com/leanprover-community/mathlib/issues/5440\">#5440</a> that sadly was never merged for ideological reasons.</p>",
        "id": 260651231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636375295
    },
    {
        "content": "<p>In particular from <a href=\"https://github.com/leanprover-community/mathlib/issues/5440\">#5440</a>:</p>\n<blockquote>\n<p>Even better, I'd prefer it implemented as part of the pretty-printer so it interacted right with pp options.</p>\n</blockquote>\n<p>Having it only be part of widgets also stops it being used in error messages (although you could rightfully argue those should support widgets too)</p>",
        "id": 260651530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636375480
    },
    {
        "content": "<p>or by emacs users <img alt=\":emacs:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/17846.png\" title=\"emacs\"></p>",
        "id": 260652193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636375908
    },
    {
        "content": "<p>... although you could rightfully argue emacs should support widgets too <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 260652348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636376003
    },
    {
        "content": "<p>Sure, then at some point it comes down to organizational reasons like pretty-printing should be handled by the pretty-printer.</p>",
        "id": 260652652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636376208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> My actual use case is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite\">docs#opposite</a>. I am separating multiplicative opposite from category theory opposite, and I'd like to define the former as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">mul_opposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>With <code>pp_using_anonymous_constructor</code>, it prints <code>op x</code> as <code>⟨x⟩</code>. It would be nice to have <code>op x</code> instead. Currently I use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">mul_opposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">postfix</span> <span class=\"bp\">`ᵐᵒᵖ`</span><span class=\"o\">:</span><span class=\"n\">std.prec.max_plus</span> <span class=\"o\">:=</span> <span class=\"n\">mul_opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mul_opposite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_eq_op</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>as a workaround.</p>",
        "id": 260713389,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636402904
    },
    {
        "content": "<p>I understand.  It wouldn't be hard to implement (a <code>pp_using_named_constructor</code> attribute as Eric suggested sound like the best design), but I think the easiest approach here is to just wait for Lean 4.</p>",
        "id": 260771272,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636449394
    }
]