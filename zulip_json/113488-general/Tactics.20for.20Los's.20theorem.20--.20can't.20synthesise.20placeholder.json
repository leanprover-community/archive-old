[
    {
        "content": "<p>I'm trying to use tactics to do Los's theorem for the hyperreals -- e.g. you would have a goal <code>(¬ Q x ↔ {n : ℕ | ¬ Q ((quotient.out' x) n)} ∈ (@hyperfilter ℕ).sets)</code>, and a tactic called <code>transfer_not</code> would reduce it to the goal <code>(Q3 x ↔ {n : ℕ | Q3 ((quotient.out' x) n)} ∈ (@hyperfilter ℕ).sets)</code> -- similarly <code>transfer_and</code>, <code>transfer_exists</code>, so you can recursively reduce your goal to transfer for atomic formulae, and finally another tactic to sort that out. This doesn't work for any proposition <code>Q</code>, which is why we need tactics, rather than theorems. So I figured something like this should work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">hyperreal</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">trans_not</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"k\">have</span> <span class=\"n\">HImp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">((</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hyperfilter</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"o\">((</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hyperfilter</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">Hψ</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">HnQ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ultrafilter_iff_compl_mem_iff_not_mem</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">U</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">not_imp_not</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">Hψ</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HnQ</span><span class=\"o\">),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">HnSQ</span><span class=\"o\">,</span> <span class=\"n\">not_imp_not</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">Hψ</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"n\">ultrafilter_iff_compl_mem_iff_not_mem</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">U</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">HnSQ</span><span class=\"o\">)</span> <span class=\"bp\">⟩</span><span class=\"o\">],</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">HImp</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>But if I write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Q3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Q3</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">Q3</span> <span class=\"o\">((</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hyperfilter</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q3</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">Q3</span> <span class=\"o\">((</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hyperfilter</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"bp\">@</span><span class=\"n\">trans_not</span> <span class=\"n\">x</span> <span class=\"n\">Q3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>It tells me at the second-last line it can't synthesise the placeholder <code>Type ?</code> -- what placeholder does it need to synthesise? <code>trans_not</code> just needs a real number and a proposition, not a type.</p>",
        "id": 167749190,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1560163800
    },
    {
        "content": "<p>looks like you're reaching another level of enlightenment! :P</p>",
        "id": 167749504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560164144
    },
    {
        "content": "<p>what happens if you do it manually, i.e. substitute the content of your tactic?</p>",
        "id": 167749579,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560164206
    },
    {
        "content": "<p>It won't be an argument to <code>trans_not</code>, it will be something wrong inside <code>trans_not</code></p>",
        "id": 167749602,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560164253
    },
    {
        "content": "<blockquote>\n<p>what happens if you do it manually, i.e. substitute the content of your tactic?</p>\n</blockquote>\n<p>It works when I do that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Q3</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">Q3</span> <span class=\"o\">((</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hyperfilter</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q3</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">Q3</span> <span class=\"o\">((</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hyperfilter</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">HImp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q3</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">Q3</span> <span class=\"o\">((</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hyperfilter</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q3</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">Q3</span> <span class=\"o\">((</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hyperfilter</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">Hψ</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">HnQ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ultrafilter_iff_compl_mem_iff_not_mem</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">U</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">not_imp_not</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">Hψ</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">HnQ</span><span class=\"o\">),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">HnSQ</span><span class=\"o\">,</span> <span class=\"n\">not_imp_not</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">Hψ</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"n\">ultrafilter_iff_compl_mem_iff_not_mem</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">U</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">HnSQ</span><span class=\"o\">)</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">HImp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><code>no goals</code></p>",
        "id": 167772293,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1560182969
    },
    {
        "content": "<p>Perhaps there's an issue with the type of <code>P</code>?</p>",
        "id": 167773239,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1560183754
    },
    {
        "content": "<p>The type of <code>trans_not</code> does not make any sense</p>",
        "id": 167773816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560184240
    },
    {
        "content": "<p>it's mixing meta levels</p>",
        "id": 167773825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560184246
    },
    {
        "content": "<p>I think it might work if you just take <code>x</code> and <code>P</code> out</p>",
        "id": 167773941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560184344
    }
]