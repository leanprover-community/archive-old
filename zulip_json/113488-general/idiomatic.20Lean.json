[
    {
        "content": "<p>I am slowly learning the importance of writing \"idiomatic Lean\". </p>\n<p>I want to develop a theory of rank 1 valuations on fields. I already have a theory of arbitrary valuations on rings:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">valuation</span><span class=\"bp\">.</span><span class=\"n\">is_valuation</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span>  <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Γ-valued valuations on R -/</span>\n<span class=\"n\">def</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₀</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"err\">Γ</span> <span class=\"bp\">//</span> <span class=\"n\">valuation</span><span class=\"bp\">.</span><span class=\"n\">is_valuation</span> <span class=\"n\">v</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>with more details at</p>\n<p><a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/basic.lean#L75\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/basic.lean#L75\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/basic.lean#L75</a></p>\n<p>I am now interested in the case where (1) R is a field, (2) Gamma is the group of positive reals and (3) there exists some r in R such that v(r) is neither 0 nor 1, or equivalently the group homomorphism R^* -&gt; Gamma is non-trivial, or equivalently the induced topology on R is not discrete, or any number of other equivalent things.</p>\n<p>I would like to formalise this definition \"correctly\". I am not very good at this. I would imagine there are good and bad ways to do this. For starters, even though <code>with_zero Gamma</code> is the non-negative reals, I can't find the positive reals in mathlib. Are they there and I missed them? There is a big theory of valuations taking values in the non-negative reals, but there is also a theory of valuations taking values in <code>with_zero Gamma</code> which we already set up in the perfectoid project and it's in some sense a shame that I am going to have to make another nnreal as <code>with_zero posreal</code>. </p>\n<p>As for the statement that the valuation is non-trivial, this seems a bit artificial however I do it. Aah! In practice the kind of thing people need is a \"pseudouniformiser\", namely an element of the field whose valuation is strictly between 0 and 1. Maybe I will just assert that a pseudouniformiser exists. Does that sound crazy?</p>",
        "id": 169886469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562605592
    },
    {
        "content": "<p>I am also quite interested in suggestions how to bridge the gap between the theory developed for valuations taking values in <code>with_zero Gamma</code> and valuations taking values in <code>nnreal</code>.</p>",
        "id": 169888283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562606913
    },
    {
        "content": "<p>I think the way is to define valuations on some class that doesn't exists yet instead of <code>with_zero</code></p>",
        "id": 169890630,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562608602
    },
    {
        "content": "<p>O.o... major refactor of the entire perfectoid project...</p>",
        "id": 169890724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562608681
    },
    {
        "content": "<p>It's probably not that major.</p>",
        "id": 169891320,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562609054
    },
    {
        "content": "<p>Well... we have a <em>lot</em> of stuff on manipulating valuations, equivalences of valuations, replacing the value group with another group, extending valuations, defining the canonical valuation, etc... etc...</p>",
        "id": 169891723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562609327
    },
    {
        "content": "<p>The longer you leave it the worse it will get.</p>",
        "id": 170437011,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562664075
    },
    {
        "content": "<p>This would involve making a new class I think. Currently our class is <code>with_zero Gamma</code> with Gamma a totally ordered comm_group (group law <code>*</code>) and the group law extended to 0 by <code>0*x=0</code> and the order extended by letting <code>0</code> be <code>bot</code>. I have convinced myself this evening that we cannot go as general as totally ordered comm_monoids with 0 because then rings will start having extra valuations which we don't want (the adic spectrum of a ring is the equivalence classes of valuations and we definitely don't want that type to change up to anything more than an equiv). </p>\n<p>The two natural choices for a new class are (1) totally ordered comm_monoids with 0 and with the property that if you remove 0 then you get a group, or (2) totally ordered comm_monoids with 0 and with the property that if you remove 0 then you get a cancellative monoid (i.e. a submonoid of a group). The notion of equivalence, which we're always working with when it comes to valuations, means that we only really care about the image of the valuation. Two valuations are equivalent if their images in the respective with_zero Gamma's are isomorphic and the isomorphism commutes with the valuations.</p>\n<p>Somehow I am now coming to the conclusion that we just want to make a new mathematical object, a totally ordered comm_monoid with a 0 and with the property that everything non-zero cancels. </p>\n<blockquote>\n<p>It's probably not that major.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> the definition of a valuation is line 1 of the first file we import in the 10000+ line project. Can it really not be major? </p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 170490018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562705786
    },
    {
        "content": "<blockquote>\n<p>with the property that everything non-zero cancels</p>\n</blockquote>\n<p>This sounds suspiciously similar to the multiplication and division in a division ring or field</p>",
        "id": 170490621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562706259
    },
    {
        "content": "<p>How much do you actually use <code>Gamma</code> itself? Everything of interest seems to be happening in <code>with_zero Gamma</code> in your examples</p>",
        "id": 170490655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562706306
    },
    {
        "content": "<p>Would it work if you just had some <code>Gamma_0</code> being a typeclass like you said and use <code>units Gamma_0</code> in place of <code>Gamma</code>?</p>",
        "id": 170490755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562706384
    },
    {
        "content": "<p>For a valuation on a general commutative ring, the axioms of valuations imply that the stuff sent to zero is a prime ideal, which can reasonably be regarded as the kernel of the valuation; quotienting out by the kernel gives an integral domain A, and the valuation induces a (not necessarily injective) monoid map from A to this with_zero thing. The big difference between a division ring/field is that <code>with_zero Gamma</code> does not have an addition.</p>",
        "id": 170492136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562707704
    },
    {
        "content": "<p>An example one might keep in mind is {0} union {e^0,e^1,e^2,...} with 0&lt;e&lt;1.</p>",
        "id": 170492195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562707773
    },
    {
        "content": "<p>e.g. {0,1,1/2,1/4,1/8,...}</p>",
        "id": 170492214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562707789
    },
    {
        "content": "<p>We don't ever really care about Gamma. I guess one thing that shows up in some of the arguments is the subgroup of Gamma generated by the image of (R - stuff which got sent to zero).</p>",
        "id": 170492300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562707841
    },
    {
        "content": "<p>In fact given the valuation, to whatever target, one can in some sense reconstruct the correct Gamma by taking the field of fractions K of A the integral domain, and then letting Gamma be units(K)/units(A)</p>",
        "id": 170492348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562707899
    }
]