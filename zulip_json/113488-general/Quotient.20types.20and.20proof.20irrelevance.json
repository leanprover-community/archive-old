[
    {
        "content": "<p>Do I understand it correctly that quotient types in Lean require proof irrelevance of Prop? Specifically, this seems to follow from this proof in Core.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_rep</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exists</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q.inductionOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 310876547,
        "sender_full_name": "suhr",
        "timestamp": 1668793628
    },
    {
        "content": "<p>No, quotient types do not directly rely on proof irrelevance, although it is possible that the statement of <code>inductionOn</code> requires it because the generalized version of that statement only works on subsingletons (otherwise you have to use <code>Quot.lift</code> and prove that the choice you made is coherent with the relation).</p>",
        "id": 310906239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668799956
    },
    {
        "content": "<p>The lean 2 HoTT implementation of quotient types did not have proof irrelevance</p>",
        "id": 310906311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668799984
    },
    {
        "content": "<p>But at this point proof irrelevance is baked fairly deeply into the way lean 4 works, so it's a difficult counterfactual to consider today. Things that casually assume proof irrelevance are all over the place</p>",
        "id": 310906617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668800086
    },
    {
        "content": "<p>So, <code>Quot.ind</code> might depend on proof irrelevance, but generally you can use <code>Quot.lift</code> instead of <code>Quot.lift</code>? Is it possible to prove <code>Quot.ind</code> from <code>Quot.lift</code>?</p>\n<blockquote>\n<p>But at this point proof irrelevance is baked fairly deeply into the way lean 4 works, so it's a difficult counterfactual to consider today. Things that casually assume proof irrelevance are all over the place</p>\n</blockquote>\n<p>Sure. I just try to explain both quotients and proof irrelevance in a tutorial, so I need to know how things depend on each other.</p>",
        "id": 310908875,
        "sender_full_name": "suhr",
        "timestamp": 1668800963
    },
    {
        "content": "<p>you might need the dependent version of <code>Quot.lift</code></p>",
        "id": 310909067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668801031
    },
    {
        "content": "<p>I think <code>Quot.recOn</code> exists</p>",
        "id": 310909113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668801050
    },
    {
        "content": "<p>Quotient types without proof irrelevance behave rather differently to set-quotients, you would use different axioms to introduce them</p>",
        "id": 310909366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668801133
    },
    {
        "content": "<p>For the purpose of a tutorial, I would just introduce proof irrelevance first</p>",
        "id": 310909692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668801260
    },
    {
        "content": "<p>And <code>Quot.recOn</code> is implemented using <code>Quot.ind</code>. So I guess it really has proof irrelevance baked in.</p>\n<p>Anyway, thanks. I will probably indeed introduce proof irrelevance first.</p>",
        "id": 310910398,
        "sender_full_name": "suhr",
        "timestamp": 1668801528
    },
    {
        "content": "<p><code>Quot.recOn</code> could be an axiom and <code>Quot.ind</code> defined in terms of it; the current ordering is preferred because it is simpler</p>",
        "id": 310911520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668801882
    },
    {
        "content": "<p><code>Quot.ind</code> does not <em>depend</em> on proof irrelevance (it doesn't make sense to say an axiom depends on another axiom), it is just a weird axiom otherwise</p>",
        "id": 310911620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668801923
    },
    {
        "content": "<p>you can't use <code>Quot.ind</code> or indeed any axiom to prove proof irrelevance because it is a definitional equality. The best you can hope for is proving propositional proof irrelevance from <code>Quot.ind</code></p>",
        "id": 310911899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668802061
    },
    {
        "content": "<p>Well, I use “proof irrelevance” somewhat loosely, including the rejection of large elimination for types in Prop.</p>",
        "id": 310912313,
        "sender_full_name": "suhr",
        "timestamp": 1668802209
    },
    {
        "content": "<p>well quotients are definitely not small eliminators</p>",
        "id": 310912628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668802343
    },
    {
        "content": "<p>that's what <code>Quot.lift</code> / <code>Quot.recOn</code> is about</p>",
        "id": 310912679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668802368
    }
]