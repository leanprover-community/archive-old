[
    {
        "content": "<p>So, the problem here is <a href=\"https://github.com/leanprover-community/mathlib/blob/bc6581885486329188e370b511f6466dffabcb9d/src/data/polynomial/basic.lean#L84-L86\"><code>polynomial.smul</code></a>, which is:</p>\n<ol>\n<li><code>private</code>, which means I can't link to it with <code>docs#</code></li>\n<li>Defined using a pattern match, which makes it not reduce when unapplied</li>\n<li><code>irreducible</code>, which means that typeclass search is unable to unfold it to see there is no diamond</li>\n</ol>\n<p>If I replace it with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smul</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_finsupp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">p.to_finsupp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then the problem goes away.</p>\n<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, you pushed for making this irreducible - what would be the impact of removing that attribute? The change to make <code>polynomial</code> a structure didn't cause any trouble here, only the irreducibility of the operations.</p>",
        "id": 246819092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626941109
    },
    {
        "content": "<p>(I split this thread since the cause is very different, <a href=\"#narrow/stream/113488-general/topic/mul_action.20and.20has_scalar.20diamond/near/246400399\">original thread here</a>)</p>",
        "id": 246819324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626941329
    },
    {
        "content": "<p>You shouldn't have to unfold definitions (of non-instances) in order to prove that a diamond commutes. There are a lot of performance problems that arise when that becomes an option</p>",
        "id": 246819633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626941589
    },
    {
        "content": "<p>I'm not sure why it's private though</p>",
        "id": 246819717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626941651
    },
    {
        "content": "<p>You can see where lean gets stuck here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">has_scalar</span> <span class=\"n\">mul_action</span> <span class=\"n\">distrib_mul_action</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.distrib_mul_action</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">polynomial.distrib_mul_action</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- note: this works around the pattern match opacity, but typeclass resolution does essentially only `ext : 3`</span>\n  <span class=\"n\">ext</span> <span class=\"n\">u</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"bp\">•</span><span class=\"o\">)],</span>\n  <span class=\"c1\">-- `polynomial.smul ↑u p = polynomial.smul u p`</span>\n\n  <span class=\"n\">success_if_fail</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>  <span class=\"c1\">-- fails, as `smul` is irreducible</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">polynomial.smul</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246819914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626941851
    },
    {
        "content": "<p>The idea was to hide everything as much as possible, to make sure that people don't break the abstraction barrier and use the proper API. If it creates diamonds, though, I'm completely onboard with changing the definition.</p>",
        "id": 246821209,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1626942934
    },
    {
        "content": "<p>I'll make a PR (edit: <a href=\"https://github.com/leanprover-community/mathlib/issues/8392\">#8392</a>)</p>",
        "id": 246821369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626943065
    }
]