[
    {
        "content": "<p>Out of all the work done on creating Lean proofs manually, has anyone yet created a state machine or a grammar that probablistically describes \"what comes next\" in an elegant proof?  If not, what is the closest concept that someone has worked on?</p>\n<p>Here is a Qt Widgets C++ app I'm designing.  The purpose is for automated theorem discovery (eventually, but that's way down the road :))</p>\n<p><a href=\"/user_uploads/3121/dwCWxBtecmE4ehArFqbC8rca/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dwCWxBtecmE4ehArFqbC8rca/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dwCWxBtecmE4ehArFqbC8rca/image.png\"></a></div><p>It will build a state machine where edges are Regular expressions.  So for instance matching a variable is done transparently / parametrically, so that when code uses the ith occuring variable (named by a coder), the system knows this and so if the state machine is used as a proof generator, it will know to use the ith variable.  Yes, this is very naive, and maybe it should be ith variable of the jth type, or something.  But I'm not at implementing that part yet, so don't judge me on this description.</p>\n<p>Please be kind and only give positive or constructive feedback.  Thanks.</p>",
        "id": 235956574,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619256079
    },
    {
        "content": "<p>If you haven't already heard of it, you may be interested in <a class=\"stream\" data-stream-id=\"274007\" href=\"/#narrow/stream/274007-lean-gptf\">#lean-gptf</a>, for which there is a dedicated stream.</p>",
        "id": 235956831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619256372
    },
    {
        "content": "<p>Here is a video on GPTF: <a href=\"https://www.youtube.com/watch?v=zgGYyGkmWSw\">https://www.youtube.com/watch?v=zgGYyGkmWSw</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"zgGYyGkmWSw\" href=\"https://www.youtube.com/watch?v=zgGYyGkmWSw\"><img src=\"https://i.ytimg.com/vi/zgGYyGkmWSw/default.jpg\"></a></div>",
        "id": 235957310,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619256953
    },
    {
        "content": "<p>Also, more generally check out the stream <a class=\"stream\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving\">#Machine Learning for Theorem Proving</a></p>",
        "id": 235959175,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619259070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> I recommend instead watching the newer video.  It has the results in the paper and a demo of gptf.  <a href=\"https://m.youtube.com/watch?v=EXpmbAfBNnw\">https://m.youtube.com/watch?v=EXpmbAfBNnw</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"EXpmbAfBNnw\" href=\"https://m.youtube.com/watch?v=EXpmbAfBNnw\"><img src=\"https://i.ytimg.com/vi/EXpmbAfBNnw/default.jpg\"></a></div>",
        "id": 235959328,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619259259
    },
    {
        "content": "<p>Also, here is the paper: <a href=\"https://arxiv.org/abs/2102.06203\">https://arxiv.org/abs/2102.06203</a></p>",
        "id": 235959450,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619259409
    },
    {
        "content": "<p>GPTf is the closest thing to what you have described, since it is a pure language model predicting the tactic which best matches a given goal.  However, I should mention that <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> is working on a very general tactic framework which is able to combine tactics together to automatically discover proofs.  I have a lot of trouble describing his work, because I don’t fully understand it (and it isn’t all published), but I’ll post a list of resources.</p>",
        "id": 235959926,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619259986
    },
    {
        "content": "<p>I’m on my phone so I can’t link the exact list of resources, but it is in the middle of <a class=\"stream\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving\">#Machine Learning for Theorem Proving</a>&gt;reinforcement learning</p>",
        "id": 235960037,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619260155
    },
    {
        "content": "<p>Wait does the bot prove what the user asks it to prove or does it have its own desires?</p>",
        "id": 235961271,
        "sender_full_name": "Joachim Hauge",
        "timestamp": 1619261638
    },
    {
        "content": "<p>The former.  This is not science fiction.</p>",
        "id": 235961679,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619262098
    },
    {
        "content": "<p>(Although, a better bot would be able to prove that a false goal is actually false, and suggest useful modifications which would make it true.)</p>",
        "id": 235961724,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619262129
    },
    {
        "content": "<p>What about groupoid approaches to language transformation?  I thought one of type theories' tenets is that \"Mathematics is a Groupoid\" or something like that.  I know for a fact that Neural Nets can't outperform a naive algorithm at least for certain problems such as integer factorization.  Thus, it begs the question, why not use a deterministic algorithm for a generative language model?</p>",
        "id": 235962162,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619262555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/Has.20anyone.20tried.20making.20a.20.22grammar.22.20out.20of.20known.20proofs.3F/near/235961679\">said</a>:</p>\n<blockquote>\n<p>The former.  This is not science fiction.</p>\n</blockquote>\n<p>No I mean they say the bot continues what was already written so I was not sure if it has to inhabit a given type or it is picking its own goals.</p>",
        "id": 235962704,
        "sender_full_name": "Joachim Hauge",
        "timestamp": 1619263168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"403138\">@Joachim Hauge</span> ideally it does both things, but when you're starting out coding such a thing, you're not sure which comes first, the chicken or the egg.</p>",
        "id": 235963057,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619263486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"403138\">@Joachim Hauge</span> sorry.  I think I overreacted to what I though was a question about Skynet. :) I would encourage you to look at the talk (the one I posted above).  The objective of the agent is for a given goal state (local context plus goal) to predict the full tactic command string which comes next.  It does this by next word prediction.  It uses the same tools commonly used by machine translation models.</p>",
        "id": 235963281,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619263699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> Theorem proving is hard.  It essentially boils down to a very complicated search procedure.  You need good heuristics, tricks, algorithms, etc to guide this search.  There is a vast literature out their on hand-written deterministic ATP algorithms.  Most are for first order logic, but there are hammer systems which can turn Lean’s dependent type theory into first order logic.  Even then one starts to realize that theorem proving in practice is as much of an art as a science. One has to chose which few previously proven facts out of the thousands in the library to pass to the ATP.  This is called premise selection and it was where ML was first used in theorem proving to my knowledge.  We have since discovered that ML works pretty well as an end-to-end solution for theorem proving.  Of course even GPTf is utilizing carefully written hand-crafted tactics. Other approaches such as Daniel Selsam’s suggest that the user supplies high level ideas and tactics and lets the computer fill in the rest.  I think time will tell what approaches are best, but I’m more optimistic about machine learning than completely deterministic hand-written ATP systems for doing high level math.  Factorization is a special case and is not what most of interactive theorem proving is like.</p>",
        "id": 235963980,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619264430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span>  why are there no theorems on how to generate new theorems?</p>",
        "id": 235964529,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619265035
    },
    {
        "content": "<p>Depending on what you mean, the answer is either \"there are, but they are boring\", or \"because it's art\".</p>",
        "id": 235964567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619265110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> it is art I agree.  But there is also an art to creating new art</p>\n<p>Relatedly.  Suppose that you took a reduced single-string context-free grammar of statement.  That is not smallest grammar - as those are highly likely to be hard to compute.  But you just reduce the statement string like so:  S -&gt; aaaaaa gets reduced to the grammar G = {S -&gt; AAA, A -&gt; aa}.  In a reduced grammar, every substring occurs uniquely, you cannot find two occurences of ab for example, since we defined reduced to mean that B -&gt; ab had to be introduced to reduce the string.  Now that each substring occurs uniquely, a morphism of the statement (a morphism of the grammar) can be well-defined to be a substring substitution.  For example \"x + y\" =&gt; \"y + x\".  Every substitution is invertible.  So what you get is a groupoid where objects are single-string grammars, and morphisms are substring substitutions.  Just a thought...</p>\n<p>The substitution maps themselves can be thought of grammars though not context-free.  So what you get is a nice recursive use of grammar.  You can have morphisms of the morphisms of grammars and so on...  </p>\n<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> what are your thoughts on these grammar groupoids?</p>",
        "id": 235964855,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619265440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> There are a lot of interesting decision procedures for various fragments of math like additive groups.  Sometimes with a lot of work these get turned into tactics like <code>omega</code>.  This takes a lot of effort to do.  For some problems, like integer reasoning this effort is worth it.  For others, it is better to let a computer automatically discover the rules.  (I’m also excited for a future where the computer will automatically discover the algorithm for the rules, but that is further off.)</p>",
        "id": 235965276,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619265836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span>  the time is now.  Time to crack this boiled egg open :D</p>",
        "id": 235965513,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619266048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> As for your grammar, it looks like a mathematical formalism of rewriting or something similar, but in general rewriting is really hard.  There are special cases where we have explicit deterministic procedures for how to exactly rewrite one statement into another (like integer addition), but in general it is more of an art.  Does your theory provide ways to discover the order to apply rewriting rules in practice?</p>",
        "id": 235965828,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619266335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> the shortest route is usually preferred, as are shorter more elegant proofs.  Good question though, working on it !</p>",
        "id": 235965949,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619266474
    },
    {
        "content": "<p>Firstly, you transform the problem statement into variables that don't collide with any variables of lemmas you want to use.  Then say you're given, not the statement but for sake of simplicity, the expression S -&gt; x + x + x + x.  Reduced that looks like: G = {S -&gt; A + A, A -&gt; x + x}.  Apply a variable substituion into the variables of lemmas etc: G' = {S -&gt; A + A, A -&gt; a + a}.  An notation definition says that a + a = 2a.  Treat that as a grammar transformation to get G'' = {S-&gt; A + A, A -&gt; 2<em>a}.    Then apply inverse of a &lt;-&gt; x to get back into x land:  G''' = {S -&gt; A + A, A -&gt; 2</em>x}, now do the same thing with A's and you get G'''' = {S -&gt; 2<em>A, A -&gt;2</em>x}, but that grammar should be expanded since there is only one occurence of A.  You get G5 = {S -&gt; 2<em>2</em>x}, but literals get computed and you get G6 = {S -&gt; 4*x}.    That doesn't answer your question though, so let me think for a bit.</p>",
        "id": 235966526,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619267139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/113488-general/topic/Has.20anyone.20tried.20making.20a.20.22grammar.22.20out.20of.20known.20proofs.3F/near/235964529\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span>  why are there no theorems on how to generate new theorems?</p>\n</blockquote>\n<p>You can certainly enumerate all the true statements in reasonable logical theories. The issue I think is to identify when you have redundancy in your \"database\" of true statements.</p>",
        "id": 235967948,
        "sender_full_name": "Joachim Hauge",
        "timestamp": 1619268625
    },
    {
        "content": "<p>You could argue that mathlib is full of \"theorem-generating\" statements; for instance, <code>add_comm</code> generates theorems about commutativity for the naturals, integers, reals, ...</p>",
        "id": 235967989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619268717
    },
    {
        "content": "<p>Take as example the statement that group identity is unique.  We have (e: ident G) :=e: G,  forall x:G, x = e<em>x, x = x</em>e,  similarly for (d: ident G).  So the statement S : (e : ident G) (d : ident G) =&gt; e = d first gets its involved definitions expanded.  Then apply grammar reduction to get g = {S -&gt;  (e I e J e) (d I dJd), B -&gt; forall x H, C -&gt; x =  , D -&gt; B C, F -&gt;  \"H,\" , H -&gt; :G, I -&gt; F D, J -&gt; <em>x, Cx</em>}.  Now, from the reduced grammar, computing the statement symmetry d &lt;-&gt; e is more efficient.  But how do we conclude that d = e?   That's what I'm stuck on.  But I think we should treat each equality involved as grammar transformation.  That's my next guess.</p>",
        "id": 235975387,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1619275616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> you may be interested in <a href=\"https://en.m.wikipedia.org/wiki/Knuth–Bendix_completion_algorithm\">https://en.m.wikipedia.org/wiki/Knuth–Bendix_completion_algorithm</a></p>",
        "id": 235978698,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619277816
    },
    {
        "content": "<p>(Note that for many special cases there are good algorithms, but in general the word problem for groups is undecidable.)</p>",
        "id": 235978839,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619277918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> to stop Zulip eating all your <code>*</code>s and turning them into emphasis, making your text mathematics unreadable, enclose all code in <code> ` </code>'s (if inline) or in <code> ``` </code>'s (if a code block).</p>",
        "id": 235984012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619282493
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 235984773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619283112
    }
]