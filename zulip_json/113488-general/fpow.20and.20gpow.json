[
    {
        "content": "<p>For int powers, we use currently <code>gpow</code> and <code>fpow</code>. I guess <code>gpow</code> is for \"group power\" and <code>fpow</code> is for \"field power\"? Since we have groups with zeroes, the boundary between the two is not clear at all. Here is a random proof on <code>fpow</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fpow_nonneg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">gpow_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">pow_nonneg</span> <span class=\"n\">ha</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">]</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">gpow_neg_succ_of_nat</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">inv_nonneg.2</span> <span class=\"o\">(</span><span class=\"n\">pow_nonneg</span> <span class=\"n\">ha</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Yes, the proof uses <code>gpow</code> lemmas all over the place. And when I try to find a lemma, half of the time it is an fpow and half of the time it is a gpow, so automatic completion doesn't work well. What would you think of a serious clean-up, using <code>zpow</code> everywhere?</p>",
        "id": 259104242,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635258389
    },
    {
        "content": "<p>Having <code>gpow</code> and <code>fpow</code> made sense some time ago when they used separate definitions etc. I think that it makes much less sense now but there are situations when <code>fpow</code> lemmas need more assumptions. E.g., compare <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fpow_add\">docs#fpow_add</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gpow_add\">docs#gpow_add</a>.</p>",
        "id": 259104714,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635258561
    },
    {
        "content": "<p>What do you suggest for these lemmas?</p>",
        "id": 259104796,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635258593
    },
    {
        "content": "<p>We could have <code>zpow_add</code> for the first one, and when there is a special version for groups we could spell it <code>gzpow_add</code>. The point being that most lemmas wouldn't have the <code>g</code>, and that this would not break tab completion.</p>",
        "id": 259106940,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635259374
    },
    {
        "content": "<p>How about appending a <code>₀</code> for lemmas about groups with zero? That's what we've started doing elsewhere in the library.</p>",
        "id": 259107230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635259490
    },
    {
        "content": "<p>Many lemmas are true in general <code>div_inv_monoid</code>s.</p>",
        "id": 259107384,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635259557
    },
    {
        "content": "<p>Was about to bring up <code>₀</code>. This is the way forward.</p>",
        "id": 259107497,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635259592
    },
    {
        "content": "<p>For other cases, like truncated subtraction vs <code>add_group</code> subtraction, set lattice operations vs lattice operations, we changed the actual name of the operation, but I don't think there's a need for that here.</p>",
        "id": 259107712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635259681
    },
    {
        "content": "<p>So for Yury's example I would suggest <code>gpow_add → zpow_add</code> and <code>fpow_add → zpow_add₀</code>.</p>",
        "id": 259108041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635259810
    },
    {
        "content": "<p>With the zero used in general <code>div_inv_monoid</code>s, and only when disambiguation is needed? I think I like that.</p>",
        "id": 259108342,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635259934
    },
    {
        "content": "<p>While we're at it, can we also rename <code>gsmul</code> to <code>zsmul</code> for parallelism with <code>nsmul</code>?</p>",
        "id": 259109606,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635260410
    },
    {
        "content": "<p>Maybe in two separate PRs. This one will be painful enough :-)</p>",
        "id": 259110869,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635260855
    },
    {
        "content": "<p>Anne asked if there is some sort of general <code>cancellative_inv_monoid</code> where fpow makes sense. I tried to code it up but ran into issues, as part of giving matrices an fpow:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/8683#issuecomment-922407544\">https://github.com/leanprover-community/mathlib/pull/8683#issuecomment-922407544</a></p>",
        "id": 259121268,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635264956
    },
    {
        "content": "<p>On a related note; I was also wondering whether we want to make <code>ring.inverse</code> a field of <code>ring</code> so that we can just use <code>\\inv</code> on rings. In particular, it would be nice to unify <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_inv\">docs#matrix.has_inv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring.inverse\">docs#ring.inverse</a> such that <code>ring.inverse A.det • A.adjugate = ring.inverse A</code> was true by definition</p>",
        "id": 259137952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635271848
    },
    {
        "content": "<p>As in an actual field of the <code>ring</code> structure? I'm not a big fan because <code>ring.inverse</code> is nonalgebraic (e.g. it's not preserved by ring homomorphisms or computed componentwise in product instances)</p>",
        "id": 259155559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635279625
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9989\">#9989</a> (wow, 10000 is getting pretty close!)</p>",
        "id": 259159134,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635281545
    },
    {
        "content": "<p>Yes!! Who will be the lucky one?</p>",
        "id": 259159244,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635281606
    },
    {
        "content": "<p>Can you believe that we were at 6500 when I joined?</p>",
        "id": 259159298,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635281633
    },
    {
        "content": "<p>Can you believe that we were at 21 when I joined??</p>",
        "id": 259160871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635282153
    },
    {
        "content": "<p>What's happened here over the last four years is really quite extraordinary</p>",
        "id": 259160925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635282175
    },
    {
        "content": "<p>Anyone got a good PR lined up for <a href=\"https://github.com/leanprover-community/mathlib/issues/10000\">#10000</a> ?</p>",
        "id": 259161503,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635282397
    },
    {
        "content": "<p>I can make it Szemerédi regularity lemma, but it will wait for quite a while before being merged. Also, I don't want to spoil anyone else's opportunity on this one.</p>",
        "id": 259162418,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635282851
    },
    {
        "content": "<p>Maybe we should bump the version of mathlib to 0.2 or something xD <a href=\"https://github.com/leanprover-community/mathlib/blob/master/leanpkg.toml\">https://github.com/leanprover-community/mathlib/blob/master/leanpkg.toml</a></p>",
        "id": 259162462,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635282886
    },
    {
        "content": "<p>Oooh that would be nice.</p>",
        "id": 259162489,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635282901
    },
    {
        "content": "<p>/disclaimer I have no idea if that would subtly break anyones external project</p>",
        "id": 259162531,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635282929
    },
    {
        "content": "<p>I could do Schur-Zassenhaus, although it's still got some work left.</p>",
        "id": 259162810,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635283087
    },
    {
        "content": "<p>Maybe leanprover-community-bot will snipe it with an update nolints PR.</p>",
        "id": 259162857,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635283120
    },
    {
        "content": "<p>It might, because <code>data.list.sigma</code> earned its module docstring today.</p>",
        "id": 259162920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635283156
    },
    {
        "content": "<p>Can you beat the bot if you're really quick on the draw (e.g., line up two PRs and do one right after the other)?</p>",
        "id": 259163174,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635283207
    },
    {
        "content": "<p>Yup. The bot always does its PR at the same time, around 3 AM.</p>",
        "id": 259163261,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635283254
    },
    {
        "content": "<p>(don't know how to get the fancy true-for-all-timezones thingy)</p>",
        "id": 259163301,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635283285
    },
    {
        "content": "<p>I'd love to see Yury filling this 10000 spot with a nice complex analysis PR.</p>",
        "id": 259165069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635284267
    },
    {
        "content": "<p>Are we getting close to something big?</p>",
        "id": 259166165,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635284835
    },
    {
        "content": "<p>Yury did a version of Stokes which is enough to get some version of the Cauchy formula.</p>",
        "id": 259166619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635285080
    },
    {
        "content": "<p>I decided to sneak diagonalization in before the magic number. <a href=\"https://github.com/leanprover-community/mathlib/issues/9995\">#9995</a></p>",
        "id": 259195771,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1635313616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I want to do prove that the integral over <code>circle</code> is the same as <code>∫ x in a..(a + 2π), f x</code> first.</p>",
        "id": 259197524,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635315840
    },
    {
        "content": "<p>This will make the Cauchy formula proofs and statements more readable.</p>",
        "id": 259197573,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635315857
    },
    {
        "content": "<p>(currently I use <code>∫ x in -π..π, f x</code> a lot)</p>",
        "id": 259197584,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635315872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> You could still reserve the PR number (-;</p>",
        "id": 259198080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635316517
    },
    {
        "content": "<p>OK, reserved.</p>",
        "id": 259198315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635316744
    },
    {
        "content": "<p>Possibly, I'll swap <a href=\"https://github.com/leanprover-community/mathlib/issues/10000\">#10000</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/8903\">#8903</a> later.</p>",
        "id": 259198348,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635316791
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Happy birthday mathlib!! <span aria-label=\"birthday\" class=\"emoji emoji-1f382\" role=\"img\" title=\"birthday\">:birthday:</span></p>",
        "id": 259201858,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635319817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/fpow.20and.20gpow/near/259109606\">said</a>:</p>\n<blockquote>\n<p>While we're at it, can we also rename <code>gsmul</code> to <code>zsmul</code> for parallelism with <code>nsmul</code>?</p>\n</blockquote>\n<p>I'll do it once/if <a href=\"https://github.com/leanprover-community/mathlib/issues/9989\">#9989</a> is merged: there would be many conflicts between the two PRs, so not point making it now.</p>",
        "id": 259205022,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635322130
    },
    {
        "content": "<p>I vote for merging this, and merging it soon.</p>",
        "id": 259205219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635322276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/fpow.20and.20gpow/near/259162857\">said</a>:</p>\n<blockquote>\n<p>Maybe leanprover-community-bot will snipe it with an update nolints PR.</p>\n</blockquote>\n<p><span aria-label=\"robot\" class=\"emoji emoji-1f916\" role=\"img\" title=\"robot\">:robot:</span> missed <a href=\"https://github.com/leanprover-community/mathlib/issues/10000\">#10000</a> but did just claim the 10000th commit to master</p>",
        "id": 260132527,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635945623
    }
]