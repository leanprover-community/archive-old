[
    {
        "content": "<p>As mathlib grows, it seems like it becomes increasingly important to nail down <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> rules.</p>\n<p>Without looking at the docs for <code>sym2</code>, consider these two definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sym2.diag</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">sym2.is_diag</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>And these two lemmas</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_diag_diag</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sym2.is_diag</span> <span class=\"o\">(</span><span class=\"n\">diag</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- A</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">diag_is_diag</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">diag</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_diag</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>      <span class=\"c1\">-- B</span>\n</code></pre></div>\n<p>Which one would you expect to find in mathlib? <span aria-label=\"a\" class=\"emoji emoji-1f170\" role=\"img\" title=\"a\">:a:</span> or <span aria-label=\"b\" class=\"emoji emoji-1f171\" role=\"img\" title=\"b\">:b:</span>?<br>\nAt a glance, both these names look reasonable - but then you remember that the two lemmas have exactly the same statement!</p>\n<p>So which if any of these are rules?</p>\n<ol>\n<li>A lemma about <code>foo (bar x))</code> always called <code>foo_bar</code>?</li>\n<li>If a lemma can be written <code>(bar x).foo</code>, then it should be called <code>bar_foo</code></li>\n<li>If a lemma is pretty-printed as <code>(bar x).foo</code>, then it should be called <code>bar_foo</code> (this applies in fewer places than 2 does!)</li>\n<li>If a name begins with <code>is_</code> it should be used as a suffix</li>\n<li>If the type of <code>foo x</code> is <code>Prop</code> then <code>foo</code> should be used as a suffix</li>\n</ol>",
        "id": 246520191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626731594
    },
    {
        "content": "<p>I think naming, despite how often we use and suggest using dot notation, should follow left-to-right as if dot notation was turned off.</p>",
        "id": 246520454,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626731792
    },
    {
        "content": "<p>Right, my opinion is that 2 and 3 are bad ideas, but 4 and/or 5 might be good ideas. We have a precedent for using <code>_injective</code> as a suffix</p>",
        "id": 246520523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626731878
    },
    {
        "content": "<p>(I also think that <code>is_</code> naming is an antipattern. There are good counterpoints to my view, which state that <code>is_</code> should be Props and things without that prefix encode data.)</p>",
        "id": 246520569,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626731886
    },
    {
        "content": "<p>Why can't the lemma be called <code>diag.is_diag</code>? We use <code>monoid_hom.map_pow</code>.</p>",
        "id": 246520870,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626732071
    },
    {
        "content": "<p>(although <code>monoid_hom</code> is a Type while <code>diag</code> is not)</p>",
        "id": 246520901,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626732099
    },
    {
        "content": "<p>Oh, I think 2 is a good idea! We encourage everyone to enable and make use of dot notation wherever possible, so we ought to in the naming as well.</p>",
        "id": 246526938,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626736488
    },
    {
        "content": "<p>I think the best argument against 2 is that many existing lemmas are not named this way, so formally adopting 2 gives us a lot of \"renaming debt\".</p>",
        "id": 246526990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626736533
    },
    {
        "content": "<p>But I don't think this is a very good argument. We should either tackle the debt, or care less about consistency when there are historical leftovers.</p>",
        "id": 246527096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626736595
    },
    {
        "content": "<p>The main problem with option 2 is option 3 - many lemmas stated with dot notation do not show in the goal view using it, so the user will arrive at the wrong lemma name when guessing lemmas to solve their goal</p>",
        "id": 246528664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626738189
    },
    {
        "content": "<p>One thing that I like to take into account is whether we can support \"main object comes first\". This is one reason why I like <code>foo_injective</code>. You type <code>foo_</code> and get a bunch of useful facts about <code>foo</code>, among them <code>foo_injective</code>. Otherwise you end up with 327 lemmas all starting with <code>injective_</code> and they are about wildly diverse parts of the library.<br>\nDo others find this <code>foo_*</code> pattern useful? Can we distill it into a guideline that is less vague than my waffle?</p>",
        "id": 246544882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626756700
    },
    {
        "content": "<p>Is that rule 5?</p>",
        "id": 246548583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626761596
    },
    {
        "content": "<p>I partly agree with Johan, and I am a little worried about partly disagreeing.  My main reason for having (only something) against the <code>foo_*</code> rule is that it is not always easy to guess to which level of generality your main object should be.  I normally know if I am looking for an injectivity statement, I may not know if I should be looking for it when the main object is a <code>monoid_with_zero</code>,  <code>monoid</code>, <code>semigroup</code>... so the long list of <code>injective_*</code> could be appealing...</p>\n<p>Also, my native tongue is Italian and this affects word order: adjective (and genitive) tend to <em>follow</em> the corresponding name.  For instance \"an injective function\" is almost always \"una funzione iniettiva\" and similarly \"<code>n</code>'s successor\" is almost always \"il successore di <code>n</code>\".  This makes it somewhat hard for me to follow (and use) naming conventions.  I do think that they are great, but it will require quite a bit of effort to enforce them consistently, since, I for one, will make mistakes even when trying to follow the rules.</p>\n<p>An example where I am <em>always</em> confused is <code>nat.pred_succ</code> and <code>nat.succ_pred</code>: which one is the one that requires a positive assumptions, since otherwise it fails for <code>0</code>?  I never know...</p>",
        "id": 246549014,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626762071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.23naming.20and.20dot.20notation/near/246548583\">said</a>:</p>\n<blockquote>\n<p>Is that rule 5?</p>\n</blockquote>\n<p>I don't think it is necessarily restricted to <code>Prop</code>s. I don't have a concrete example of the top of my head, but <code>injective</code> could potentially be replace by some sort of data. Altough I guess that in such a scenario we are likely to use the name <code>foo.some_data</code>.</p>",
        "id": 246549594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626762787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/.23naming.20and.20dot.20notation/near/246549014\">said</a>:</p>\n<blockquote>\n<p>An example where I am <em>always</em> confused is <code>nat.pred_succ</code> and <code>nat.succ_pred</code>: which one is the one that requires a positive assumptions, since otherwise it fails for <code>0</code>?  I never know...</p>\n</blockquote>\n<p>Agreed... I'm also confused by that one (-;</p>",
        "id": 246549697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626762876
    },
    {
        "content": "<p>Johan, I am kind of happy that I am not the only one who finds the naming convention hard!</p>",
        "id": 246549928,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626763086
    },
    {
        "content": "<p>/jk: Maybe we need name lookup to treat the <code>_</code> delimited components as a multiset rather than a list.</p>",
        "id": 246552171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626765199
    },
    {
        "content": "<blockquote>\n<p>Although I guess that in such a scenario we are likely to use the name foo.some_data.</p>\n</blockquote>\n<p>I'd expect <code>foo.some_data</code> be reserved for when <code>foo</code> is a (family of) <del>types</del> sorts, since that's the situation when dot notation works</p>",
        "id": 246558030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626769872
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8416\">#8416</a> is an example of why I think 5 should be a rule</p>",
        "id": 247130707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627226160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/.23naming.20and.20dot.20notation/near/246549014\">said</a>:</p>\n<blockquote>\n<p>Also, my native tongue is Italian and this affects word order: adjective (and genitive) tend to <em>follow</em> the corresponding name.  For instance \"an injective function\" is almost always \"una funzione iniettiva\" and similarly \"<code>n</code>'s successor\" is almost always \"il successore di <code>n</code>\". </p>\n</blockquote>\n<p>This  order also fits pretty close to what I (as an native English speaker) would expect. I would expect <code>f.injective</code>for an injective function <code>f</code> (as ) and the successor of <code>n</code> to be written as <code>succ n</code>. I argue the former should use dot notation (even though, in Lean, due to it being a function, it usually can not) because injectivity is a property of  the function <code>f</code>, and properties are generally written with dot notation in CS.</p>\n<p>I would argue the latter shouldn't, because it is rightly understood as the application of the function <code>succ</code> on <code>n</code> (i.e., \"the successor of <code>n</code>\") rather than as \"<code>n</code>'s successor\" (which is what <code>n.succ</code> would mean). That is, I see <code>succ</code> in the same way I see <code>not</code>. I see <code>n.succ</code> is just as unnatural as <code>b.not</code> would be for some Boolean <code>b</code>. Admittedly though, <code>n.succ</code> can be more convenient to write in some complicated expressions (such as when chaining multiple <code>succ</code>s together).</p>",
        "id": 247237039,
        "sender_full_name": "Mac",
        "timestamp": 1627321751
    },
    {
        "content": "<p>Mac, what about something like inj_on? Is that a property of the set or of the function?</p>",
        "id": 247238353,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627322319
    },
    {
        "content": "<p>And what about when f is not a function, but has a coe_fn?</p>",
        "id": 247238429,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627322354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/.23naming.20and.20dot.20notation/near/247238353\">said</a>:</p>\n<blockquote>\n<p>Mac, what about something like inj_on? Is that a property of the set or of the function?</p>\n</blockquote>\n<p><code>inj_on</code> is relation between a function and a set, so it doesn't neatly fit into this model. How to properly name (and locate) relations has always been a hard problem in CS. The default solution tends to be to either to leave relations as a top-level functions or to stick it as a member of whichever object it is more convenient to add members (i.e., dot notation) to. As it stands, mathlib currently does the later by making it a member of <code>set</code>.</p>",
        "id": 247239088,
        "sender_full_name": "Mac",
        "timestamp": 1627322611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/.23naming.20and.20dot.20notation/near/247238429\">said</a>:</p>\n<blockquote>\n<p>And what about when f is not a function, but has a coe_fn?</p>\n</blockquote>\n<p>In such cases, I would gleefully use dot notation with it (i.e., have it be <code>f.injective</code>).</p>",
        "id": 247239270,
        "sender_full_name": "Mac",
        "timestamp": 1627322677
    },
    {
        "content": "<p>Note that this thread is not about where we should use dot notation, but how we should name lemmas when their statements do or could.</p>",
        "id": 247239624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627322805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I would argue that the standard for naming lemmas should be based on how its associated formally is standardly written.</p>",
        "id": 247239825,
        "sender_full_name": "Mac",
        "timestamp": 1627322885
    },
    {
        "content": "<p>If a lemma is written as <code>foo.injective</code> its name should be <code>foo_injective</code>. If it is written as <code>injective foo</code>, it should be named <code>injective_foo</code>. The naming and standard form should be consistent with one another.</p>",
        "id": 247240043,
        "sender_full_name": "Mac",
        "timestamp": 1627322975
    },
    {
        "content": "<p>Well, <code>foo.injective</code> is not supported by lean, and the naming guide requires that case very specifically to be named <code>foo_injective</code> already.</p>",
        "id": 247240242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627323046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.23naming.20and.20dot.20notation/near/247240242\">said</a>:</p>\n<blockquote>\n<p>the naming guide requires that case very specifically to be named <code>foo_injective</code> already.</p>\n</blockquote>\n<p>Unless I misunderstood the above conversation, I thought that was one one the key issues up for debate?</p>",
        "id": 247240395,
        "sender_full_name": "Mac",
        "timestamp": 1627323115
    },
    {
        "content": "<p>That does raise the point that maybe the name should be consistent with the <code>pp_no_dot_notation</code> attribute, or whatever attribute <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sqrt\">docs#real.sqrt</a> has</p>",
        "id": 247240454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627323128
    },
    {
        "content": "<p>No, <code>injective</code> specifically is the one that we have already established and recorded convention for in <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a></p>",
        "id": 247240498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627323151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.23naming.20and.20dot.20notation/near/247240498\">said</a>:</p>\n<blockquote>\n<p>No, <code>injective</code> specifically is the one that we have already established and recorded convention for in <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a></p>\n</blockquote>\n<p>Okay. Regardless, I still mostly agree with this. As ideally, for me, <code>injective f</code> would be written <code>f.injective</code> -- it is merely the limitations of Lean that prevent it from being so. Thus, it reasonable to name it after what it is conceptually natural even though it doesn't manifest that way in Lean.</p>",
        "id": 247240888,
        "sender_full_name": "Mac",
        "timestamp": 1627323324
    },
    {
        "content": "<p>Right, but the whole point of naming is that a new user should be able to look at the goal state and the set of naming rules, and guess what the lemma they want is called</p>",
        "id": 247241338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627323532
    },
    {
        "content": "<p>Asking the user to make a subjective judgement call for every definition would be a disaster</p>",
        "id": 247241377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627323553
    },
    {
        "content": "<p>Yes? I wasn't disagreeing with that or arguing otherwise?</p>",
        "id": 247241907,
        "sender_full_name": "Mac",
        "timestamp": 1627323848
    },
    {
        "content": "<p>My suggestion would manifest as two rules: 1) name things according to how they are formulated / pretty printed (ala suggestion 3) with the caveat of 2) name function properties as though they were written using dotation (i.e., make them a suffix -- which is a generalization of the existing mathlib <code>injective</code> naming rule).</p>",
        "id": 247242201,
        "sender_full_name": "Mac",
        "timestamp": 1627323995
    },
    {
        "content": "<p>I see an argument one way or the other is that typing in <code>whatever</code> will look for all the declarations starting with <code>whatever</code>. Could we do so that writing <code>_whatever</code> looks for declarations that contain <code>whatever</code> <em>anywhere</em>?</p>",
        "id": 247244366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627324937
    }
]