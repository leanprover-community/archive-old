[
    {
        "content": "<p><code>n : \\N</code>. What's the best way to separately consider the cases <code>n = 0</code>, <code>n = 1</code>, and <code>n \\ge 2</code>?</p>",
        "id": 274028085,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646336601
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 274028509,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646336775
    },
    {
        "content": "<p>What if I want to keep <code>n \\ge 2</code> as an assumption instead of dealing with <code>n.succ.succ</code>?</p>",
        "id": 274028597,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646336828
    },
    {
        "content": "<p>i made <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.two_le_iff\">docs#nat.two_le_iff</a> recently, although it's a bit clunky</p>",
        "id": 274028804,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646336913
    },
    {
        "content": "<p>another clunky way is <code>lt_trichotomy 1 n</code>, taking advantage that 1 &lt; n is defeq to 2 ≤ n, but also not perfeect</p>",
        "id": 274028923,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646336964
    },
    {
        "content": "<p>You can just <code>set m := n.succ.succ</code> and prove that <code>2 ≤ m</code> (this should be a one liner)</p>",
        "id": 274029954,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646337386
    },
    {
        "content": "<p><code>cases le_or_lt 2 n with h h</code></p>",
        "id": 274031138,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646337808
    },
    {
        "content": "<p><code>rcases lt_trichotomy 1 n with ((h2 : 2 ≤ n) | rfl | - | ⟨-, ⟨-⟩⟩)</code></p>",
        "id": 274049192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646346168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/more.20complicated.20case-splits/near/274049192\">said</a>:</p>\n<blockquote>\n<p><code>rcases lt_trichotomy 1 n with ((h2 : 2 ≤ n) | rfl | - | ⟨-, ⟨-⟩⟩)</code></p>\n</blockquote>\n<p>This looks about as readable as Malbolge</p>",
        "id": 274050388,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646346812
    },
    {
        "content": "<p>You must not read coq code often</p>",
        "id": 274050519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646346873
    },
    {
        "content": "<p>Felt like I didn't wanna cause another theorem prover war in the middle of a conference :b</p>",
        "id": 274050719,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646346984
    }
]