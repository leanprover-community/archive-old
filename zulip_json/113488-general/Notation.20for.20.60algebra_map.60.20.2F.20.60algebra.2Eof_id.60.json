[
    {
        "content": "<p>I've been finding myself writing <code>algebra_map R _</code> an awful lot, and I was wondering if it would be sensible to introduce a notation for it? My proposal would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`↑ₐ`</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>(I also wonder which of<code>algebra.of_id</code> and <code>algebra_map</code> should be the canonical spelling)</p>",
        "id": 216356787,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605107057
    },
    {
        "content": "<p>Note that we can make the two <code>_ _</code> implicit because of a marvellous change to Lean that was made about 3 months ago</p>",
        "id": 216357398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605107337
    },
    {
        "content": "<p>That already makes things a bit better.</p>",
        "id": 216357425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605107349
    },
    {
        "content": "<p>Using opt_params?</p>",
        "id": 216357854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605107576
    },
    {
        "content": "<p>Alternatively, we could add <code>instance [algebra R A] : has_coe_t R A := ⟨algebra_map R A⟩</code>, as I suggested <a href=\"https://github.com/leanprover-community/mathlib/pull/4824#discussion_r526062594\">in PR 4824</a></p>",
        "id": 217133655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605706040
    },
    {
        "content": "<p>That will be quite a refactor though</p>",
        "id": 217133819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605706119
    },
    {
        "content": "<p>I think one reason we didn't do that was that before widgets it could be a pain to know what a coercion was doing. That reason is no longer valid...</p>",
        "id": 217133861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605706151
    },
    {
        "content": "<p>This sounds potentially rather dangerous--instances for variables are already bad plus anything involving coercions is a headache.</p>",
        "id": 217134334,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605706387
    },
    {
        "content": "<p>The headache got a lot less because of widgets, I think</p>",
        "id": 217134689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605706593
    },
    {
        "content": "<p>But do you really want to rely on widgets ?</p>",
        "id": 217134705,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605706611
    },
    {
        "content": "<p>(asks the emacs user...)</p>",
        "id": 217134726,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605706628
    },
    {
        "content": "<p>Figuring out which coercion Lean successfully applied is just one head of the Lernaean Hydra of headaches that is coercions.</p>",
        "id": 217135657,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605707161
    },
    {
        "content": "<p>I think the original suggestion sounds good though.</p>",
        "id": 217135751,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605707199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20.60algebra_map.60.20.2F.20.60algebra.2Eof_id.60/near/217135657\">said</a>:</p>\n<blockquote>\n<p>Lernaean Hydra</p>\n</blockquote>\n<p>At first I thought you had mashed up \"learning Lean\" into a new word...</p>",
        "id": 217135997,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1605707336
    },
    {
        "content": "<p>Wouldn't it be nicer anyway for the pretty-printer to print <code>(x : A)</code> instead of <code>↑x</code>?</p>",
        "id": 217136089,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605707383
    },
    {
        "content": "<p>(Perhaps writing <code>(x : _)</code> when <code>A</code> is too big and can be inferred from context.)</p>",
        "id": 217136198,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605707417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20.60algebra_map.60.20.2F.20.60algebra.2Eof_id.60/near/217136089\">said</a>:</p>\n<blockquote>\n<p>Wouldn't it be nicer anyway for the pretty-printer to print <code>(x : A)</code> instead of <code>↑x</code>?</p>\n</blockquote>\n<p>That's an intriguing idea, I hadn't considered that before. Not sure if it should be the default. And the pretty printer can't really know whether the type is inferrable from context, I'm afraid.</p>",
        "id": 217136951,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1605707780
    },
    {
        "content": "<p>I think it could get annoying when you are trying to pretend the arrow doesn't exist</p>",
        "id": 217137729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605708195
    },
    {
        "content": "<p>but it definitely sounds like a useful option</p>",
        "id": 217137754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605708214
    },
    {
        "content": "<p>The <code>(x : A)</code> could be shortened, for big <code>A</code>, by folding <code>A</code> in the editor and revealing it on hover or something.</p>",
        "id": 217138118,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1605708369
    },
    {
        "content": "<p>There's some option to turn those arrows off completely, right? It always sounds appealing but I'm just too scared to do it :-)</p>",
        "id": 217147134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605712343
    },
    {
        "content": "<p>I think the <code>(x : A)</code> form would be useful mostly for having something you can copy&amp;paste back into Lean</p>",
        "id": 217147294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605712416
    },
    {
        "content": "<p>Oh that's true! Coercion arrows are probably the most common reason (at least for me) for failure of round-tripping from the pretty printer back to the elaborator .</p>",
        "id": 217147449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605712477
    },
    {
        "content": "<p>So it seems the choice is between:</p>\n<ul>\n<li><code>local notation `↑ₐ`:max x:max := algebra_map _ _ x</code>, write <code>↑ₐr = a</code>, and see <code>↑ₐr</code> in tactic states</li>\n<li><code>has_coe_t</code>, write <code>↑r = a</code> or <code>(r : A) = a</code>, but deal with seeing only <code>↑r</code> in the goal state until something changes in lean</li>\n<li>Do nothing, keep writing <code>algebra_map R A r</code></li>\n</ul>",
        "id": 217147841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605712643
    },
    {
        "content": "<p>The reason the R and A are explicit in <code>algebra_map</code> is because lean will very often not be able to infer them</p>",
        "id": 217149340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713215
    },
    {
        "content": "<p>so option 1 isn't an option</p>",
        "id": 217149347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713221
    },
    {
        "content": "<p>When <code>algebra_map</code> is invoked, the <code>R</code> can be inferred from the argument, right?</p>",
        "id": 217149436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605713250
    },
    {
        "content": "<p>And for something like <code>↑ₐr = a</code>, the <code>A</code> can be inferred from the RHS</p>",
        "id": 217149490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605713272
    },
    {
        "content": "<p>What's the type again? is it <code>R -&gt; A</code>?</p>",
        "id": 217149545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713284
    },
    {
        "content": "<p>That, but bundled as a ring hom</p>",
        "id": 217149582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605713292
    },
    {
        "content": "<p>yeah, lean won't like that</p>",
        "id": 217149602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713301
    },
    {
        "content": "<p>Because it's bundled?</p>",
        "id": 217149629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605713310
    },
    {
        "content": "<p>that complicates matters a lot</p>",
        "id": 217149654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713321
    },
    {
        "content": "<p>even without that you would get in trouble if you start nesting things, because both the input and output are unbound</p>",
        "id": 217149721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713347
    },
    {
        "content": "<p>you probably know the outermost type (at the equality or what have you) and the innermost type (the variables) but everything in between is hazy</p>",
        "id": 217149868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713409
    },
    {
        "content": "<p>and with a coe in the middle, you don't even know if the function is dependent</p>",
        "id": 217149938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713443
    },
    {
        "content": "<p>and the typeclass to look up depends on the types that you are trying to determine</p>",
        "id": 217150015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713479
    },
    {
        "content": "<p>so it's all very circular</p>",
        "id": 217150086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't agree. It used to be a lot of trouble, but Gabriel fixed it. In a similar context <code>mv_polynomial.aeval</code> now has the arguments <code>R</code> and <code>A</code> implicit, and it works fine in mathlib.</p>",
        "id": 217150099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605713517
    },
    {
        "content": "<p>We used it a ton in the Witt project, and it works.</p>",
        "id": 217150176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605713527
    },
    {
        "content": "<p>If the output is unbounded you can always use <code>(↑ₐr : A)</code></p>",
        "id": 217150214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605713547
    },
    {
        "content": "<p>lean works outside in, recall</p>",
        "id": 217150255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713570
    },
    {
        "content": "<p>so usually it's the input that is unbounded</p>",
        "id": 217150281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713581
    },
    {
        "content": "<p>except at the lhs of an equality</p>",
        "id": 217150321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713592
    },
    {
        "content": "<p>We could use <code>↑ₐ[R] r</code> notation too, if there need is there, although for the niche cases <code>(↑ₐ(r : R) : A)</code> is still shorter than <code>algebra_map R A r</code></p>",
        "id": 217150394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605713614
    },
    {
        "content": "<p>The only real way to know is to try it out</p>",
        "id": 217150880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713783
    },
    {
        "content": "<p>I'm not too fussed about notation, if the arrow makes you feel warm and fuzzy inside then go for it</p>",
        "id": 217150990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605713829
    },
    {
        "content": "<p>Maybe I'll try the <code>coe</code> version first</p>",
        "id": 217152541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605714449
    }
]