[
    {
        "content": "<p>I often really feel like the <code>existsi</code> tactic is slacking off. It is always moaning that it doesn't know the type of what I suggest, even though it knows exactly the type it is expecting to get. And now this!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">existsi_is_so_dumb</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">has_emptyc</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- new goal `⊢ has_emptyc (set α)` appears</span>\n  <span class=\"c1\">-- I mean -- what did you even try??</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147962582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542630465
    },
    {
        "content": "<p>It's not my favorite tactic</p>",
        "id": 147962659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542630549
    },
    {
        "content": "<p>it's more or less completely superceded by <code>refine</code></p>",
        "id": 147962674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542630583
    },
    {
        "content": "<p>I can see why:</p>\n<div class=\"codehilite\"><pre><span></span>meta def existsi : parse pexpr_list_or_texpr → tactic unit\n| []      := return ()\n| (p::ps) := i_to_expr p &gt;&gt;= tactic.existsi &gt;&gt; existsi ps\n</pre></div>\n\n\n<p>The type of <code>p</code> is elaborated with no other information from the target type</p>",
        "id": 147962760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542630687
    },
    {
        "content": "<p>The underlying <code>existsi</code> tactic is a bit more sophisticated, and it could have elaborated in the appropriate context</p>",
        "id": 147962824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542630763
    },
    {
        "content": "<p>Is this in core?</p>",
        "id": 147962852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542630816
    },
    {
        "content": "<p>yes</p>",
        "id": 147962854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542630819
    },
    {
        "content": "<p>still it's all just a long winded way of doing the same thing as <code>refine &lt;e1, e2, _&gt;</code></p>",
        "id": 147962858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542630827
    },
    {
        "content": "<p>Hmm, we could define a tactic <code>use e1 e2 ...</code> that is a wrapper around <code>refine</code>.</p>",
        "id": 147962914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542630858
    },
    {
        "content": "<p>It is both shorter and more readable than <code>existsi</code>.</p>",
        "id": 147962919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542630870
    },
    {
        "content": "<p>the point is that the extra flexibility in where to put the underscores is actually useful</p>",
        "id": 147962928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542630890
    },
    {
        "content": "<p>Of course, so <code>use</code> is for when you don't need that flexibility and you want some sort of beginner-friendly readable proof.</p>",
        "id": 147962953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542630935
    },
    {
        "content": "<p><code>existsi</code> is a rubbish name anyway. No mathematician knows what it means, it's not even a word. How about <code>use x := refine x _ _ _ _ ... _</code>. Can we do that? Beginner mathematicans would like it.</p>",
        "id": 147963409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542631489
    },
    {
        "content": "<p>or however it would work, is it just <code>use x := refine \\&lt; x,_\\&gt;</code>?, I don't know exactly how to make it work, all I know is that it would be better than existsi</p>",
        "id": 147963515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542631579
    },
    {
        "content": "<p>I don't know how to define <code>use x := refine \\&lt;x, _\\&gt;</code> in Lean. This involves making a tactic that takes an input, and I only ever write tactics by just writing them in tactic mode and then sticking a load of backticks and square brackets everywhere.</p>",
        "id": 147963708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542631818
    },
    {
        "content": "<p>So, what's the conclusion of that thread? Who is writing that <code>use</code> tactic?</p>",
        "id": 148044440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542725986
    },
    {
        "content": "<p>How about <code>meta def use := refine</code>?</p>",
        "id": 148044510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542726014
    },
    {
        "content": "<p>I think this is approximately right.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">pexpr_list_or_texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">refine</span> <span class=\"err\">$</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"err\">%%</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">mk_placeholder</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">existsi_is_so_dumb</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148045273,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542726700
    },
    {
        "content": "<p>how about we PR core</p>",
        "id": 148048724,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542729603
    },
    {
        "content": "<p>How about PRing </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">pexpr_list_or_texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">refine</span> <span class=\"err\">$</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"err\">%%</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">mk_placeholder</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">try</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n</pre></div>\n\n\n<p>to mathlib? I only added trying refl, just in case (I hope it's not too time consuming)</p>",
        "id": 148110505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542807875
    },
    {
        "content": "<p>Does it also solve the issue where <code>existsi</code> does not know the expected type. So if I type <code>existsi ⟨x, y⟩</code>, it fails because it doesn't know what type <code>⟨x, y⟩</code> is even though this should be inferrable from the goal.</p>",
        "id": 148110636,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542808042
    },
    {
        "content": "<p>It's meant to solve this issue, yes</p>",
        "id": 148110648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542808064
    },
    {
        "content": "<p>And it does on Kevin's examples</p>",
        "id": 148110650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542808070
    },
    {
        "content": "<p>Could you provide more examples?</p>",
        "id": 148110655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542808079
    },
    {
        "content": "<p>I never use it.</p>",
        "id": 148110725,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542808134
    },
    {
        "content": "<p>Here are my test cases so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">pexpr_list_or_texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">refine</span> <span class=\"err\">$</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"err\">%%</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">mk_placeholder</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">try</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">use</span> <span class=\"err\">∅</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">use</span> <span class=\"mi\">42</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">use</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">42</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 148111034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542808433
    },
    {
        "content": "<p>The first example is more interesting with <code>int</code> instead of <code>nat</code> since <code>existsi</code> fails in that case.</p>",
        "id": 148111139,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542808534
    },
    {
        "content": "<p>Only the first one works with <code>existsi</code>, even if you end the line with <code>; refl</code></p>",
        "id": 148111142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542808539
    },
    {
        "content": "<p>Right, replace nat by int in the first example</p>",
        "id": 148111157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542808560
    },
    {
        "content": "<p>Rob, would you mind PRing this? I can do it of course, but I don't want to claim any credit</p>",
        "id": 148111210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542808584
    },
    {
        "content": "<p>Yeah, I'll do it. It's a little hackish, but I couldn't think of a nicer one line solution off the top of my head. So, good enough!</p>",
        "id": 148111239,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542808626
    },
    {
        "content": "<p>Of course the real test would be to replace every use of <code>existsi</code> in mathlib, but that's more work, and probably not worth the trouble</p>",
        "id": 148111607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542809006
    },
    {
        "content": "<p>PRed. That's definitely not worth the trouble.</p>",
        "id": 148112078,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542809539
    },
    {
        "content": "<p>Thanks Rob! This looks much much better pedagogically</p>",
        "id": 148112151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542809609
    },
    {
        "content": "<p>And thanks Patrick too for helping to make it happen</p>",
        "id": 148112259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542809700
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/lVNrNYy6wJQaiT7sCVQo4wsi/if-you-give-a-mouse-a-cookie-HarperCollins.jpeg\" target=\"_blank\" title=\"if-you-give-a-mouse-a-cookie-HarperCollins.jpeg\">if-you-give-a-mouse-a-cookie-HarperCollins.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lVNrNYy6wJQaiT7sCVQo4wsi/if-you-give-a-mouse-a-cookie-HarperCollins.jpeg\" target=\"_blank\" title=\"if-you-give-a-mouse-a-cookie-HarperCollins.jpeg\"><img src=\"/user_uploads/3121/lVNrNYy6wJQaiT7sCVQo4wsi/if-you-give-a-mouse-a-cookie-HarperCollins.jpeg\"></a></div>",
        "id": 148114826,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542812065
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover/mathlib/pull/486\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/486\">https://github.com/leanprover/mathlib/pull/486</a>)</p>",
        "id": 148114844,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542812099
    },
    {
        "content": "<p>I don't see a big win over <code>exists</code> and <code>refine</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">42</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p><code>exists</code> and <code>refine</code> with the corner brackets is more flexible, since the corner brackets can handle structures with multiple arguments and nested structures. If you use <code>exact</code> with placeholders, squiggly lines well tell you what you need to fill in. You can use whatever tactics you want to discharge the final goal. Are there any advantages to <code>use</code>? Doesn't it just clutter the language?</p>",
        "id": 148117611,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1542814443
    },
    {
        "content": "<p>When you're proving <code>∃ x, P x</code> in tactic mode, and the proof of <code>P a</code> is long, you don't want to write <code>exact &lt;a, begin end&gt;</code>. You can write <code>refine &lt;a, _&gt;</code> and keep going. This tactic is exactly an abbreviation for that, that looks more natural. <code>use</code> is really a replacement for <code>existsi</code>,  except we can't change that.</p>",
        "id": 148119422,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542816094
    },
    {
        "content": "<p>Jeremy, the comparison is not with <code>exact</code> and <code>refine</code>. <code>use</code> is meant as a better behaved drop-in replacement of <code>existsi</code></p>",
        "id": 148119507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542816160
    }
]