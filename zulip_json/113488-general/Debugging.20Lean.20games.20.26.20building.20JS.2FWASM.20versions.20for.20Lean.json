[
    {
        "content": "<p>I'm currently packaging Lean games into NixOS, with some generic builder to deploy easily more Lean games (some code is around there: <a href=\"https://github.com/RaitoBezarius/nixexprs/blob/master/pkgs/tools/make-lean-game.nix\">https://github.com/RaitoBezarius/nixexprs/blob/master/pkgs/tools/make-lean-game.nix</a>).</p>\n<p>I have deployed the master branch of NNG on <a href=\"https://nng.lean.v6.lahfa.xyz\">https://nng.lean.v6.lahfa.xyz</a> (IPv6-only website sorry! Can make it available through IPv4 though upon request), though I am getting empty infoboxes everywhere.</p>\n<p>I admit that I have done something that I should not have, e.g. it produces the NNG game using Lean 3.24.0 when it asks for Lean 3.4.2, and it uses Lean 3.4.2 JS/WASM files in the browser with 3.24.0 olean files I guess (as the ZIP file must contain those).</p>\n<p>Though, I expect some kind of error, the thing is I get nothing, the editor, the world looks to be working fine, but when I do \"refl,\" on the first level, it just does nothing after a short \"Lean is busy...\", so I assume that there is something wrong with the Lean runtime.</p>\n<p>That's the first part of the question.</p>\n<p>For the second part, one way to test the previous hypothesis would be to produce JS/WASM files for Lean 3.24.0 and remake the NNG for 3.24.0, it appears to me that <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is maintainer on the Lean package on NixOS, I would like to ask: how much effort would be needed to add as an output the <code>lean_js_js.js, lean_js_wasm.js, lean_js_wasm.wasm</code> files in the Lean package? Or how can I produce them given the Lean package? I tried to poke around in the source code but didn't find really explicit stuff, I was planning to dig into the CMake files but maybe it is faster and better to just ask?</p>",
        "id": 225438225,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612659540
    },
    {
        "content": "<p>The <code>lean_js_*</code> files are available from the community Lean releases on GitHub, e.g. <a href=\"https://github.com/leanprover-community/lean/releases/tag/v3.26.0\">https://github.com/leanprover-community/lean/releases/tag/v3.26.0</a> (see <code>lean-3.26.0--browser.zip</code>).</p>",
        "id": 225438443,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612659859
    },
    {
        "content": "<p>Does any of the info <a href=\"https://github.com/leanprover-community/lean-web-editor\">here</a> help?</p>",
        "id": 225438446,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612659886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225438443\">said</a>:</p>\n<blockquote>\n<p>The <code>lean_js_*</code> files are available from the community Lean releases on GitHub, e.g. <a href=\"https://github.com/leanprover-community/lean/releases/tag/v3.26.0\">https://github.com/leanprover-community/lean/releases/tag/v3.26.0</a> (see <code>lean-3.26.0--browser.zip</code>).</p>\n</blockquote>\n<p>I could just copy them in the repo and follow the same workflow but hopefully I'm aiming at automating to \"produce\" the right Lean version end to end for those games, so I would just need to know how to derive them from source</p>",
        "id": 225438513,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612659977
    },
    {
        "content": "<p>If Lean in the browser gets stuck, you can sometimes figure out what's going wrong by looking in your browser's console.</p>",
        "id": 225438523,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612659995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225438523\">said</a>:</p>\n<blockquote>\n<p>If Lean in the browser gets stuck, you can sometimes figure out what's going wrong by looking in your browser's console.</p>\n</blockquote>\n<p>The console shows nothing alas</p>",
        "id": 225438540,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660040
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/nnbg3iISYNSU4kZVcWg7exq4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nnbg3iISYNSU4kZVcWg7exq4/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/nnbg3iISYNSU4kZVcWg7exq4/image.png\"></a></div>",
        "id": 225438542,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660058
    },
    {
        "content": "<p>(afaik the two \"unrelated\" errors are due to Chrome WASM impl and are indeed <em>unrelated</em>)</p>",
        "id": 225438591,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660087
    },
    {
        "content": "<p>Unfortunately I can't access your test website (I guess due to the IPv6 vs IPv4 thing). The screenshot you posted seems to indicate that Lean in the browser is working OK.</p>",
        "id": 225438598,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612660107
    },
    {
        "content": "<p>If you want to compile the JS/WASM versions of Lean 3 yourself, you could get inspiration from what's done in our CI: <a href=\"https://github.com/leanprover-community/lean/blob/master/.github/workflows/on-push.yml#L161\">https://github.com/leanprover-community/lean/blob/master/.github/workflows/on-push.yml#L161</a></p>",
        "id": 225438612,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612660153
    },
    {
        "content": "<p>There's also some docs <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/make/index.md#building-js--wasm-binaries-with-emscripten\">here</a> for building Lean with Emscripten, but they might be out of date.</p>",
        "id": 225438719,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612660328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225438719\">said</a>:</p>\n<blockquote>\n<p>There's also some docs <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/make/index.md#building-js--wasm-binaries-with-emscripten\">here</a> for building Lean with Emscripten, but they might be out of date.</p>\n</blockquote>\n<p>Awesome, that sounds like what I need</p>",
        "id": 225438864,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660613
    },
    {
        "content": "<p>Ah, my guess is Lean on your page is getting stuck because it can't find olean files with the right version so it's trying to compile everything...</p>",
        "id": 225438927,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612660732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225438598\">said</a>:</p>\n<blockquote>\n<p>Unfortunately I can't access your test website (I guess due to the IPv6 vs IPv4 thing). The screenshot you posted seems to indicate that Lean in the browser is working OK.</p>\n</blockquote>\n<p><a href=\"https://nng.lean.lahfa.xyz/\">https://nng.lean.lahfa.xyz/</a> should do the trick, unfortunately, the HTTPS cert is broken</p>",
        "id": 225438929,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225438927\">said</a>:</p>\n<blockquote>\n<p>Ah, my guess is Lean on your page is getting stuck because it can't find olean files with the right version so it's trying to compile everything...</p>\n</blockquote>\n<p>Wouldn't this print something on the console ideally? (maybe not)</p>",
        "id": 225438939,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225438927\">said</a>:</p>\n<blockquote>\n<p>Ah, my guess is Lean on your page is getting stuck because it can't find olean files with the right version so it's trying to compile everything...</p>\n</blockquote>\n<p>But that would make a lot of sense</p>",
        "id": 225439002,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660844
    },
    {
        "content": "<p>Compiling Lean 3.4.2 is a bit annoying it looks like due to GCC version constraints apparently ; so I will try to produce 3.24.0 JS/WASM files and use them in the final bundle</p>",
        "id": 225439010,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660881
    },
    {
        "content": "<p>But now, time to sleep</p>",
        "id": 225439013,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660885
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> !</p>",
        "id": 225439015,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612660890
    },
    {
        "content": "<p>Hmm, it's actually not getting stuck for me in Firefox, instead it's complaining about missing Lean files (which is another symptom of the olean versions not matching). [Annoyingly, the error popup sometimes ends up above the line with an error in it, which makes it impossible to see.]</p>\n<p><a href=\"/user_uploads/3121/FuCxKV9ysMQ-w-zFgFap-tt7/Screen-Shot-2021-02-06-at-8.30.03-PM.png\">Screen-Shot-2021-02-06-at-8.30.03-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FuCxKV9ysMQ-w-zFgFap-tt7/Screen-Shot-2021-02-06-at-8.30.03-PM.png\" title=\"Screen-Shot-2021-02-06-at-8.30.03-PM.png\"><img src=\"/user_uploads/3121/FuCxKV9ysMQ-w-zFgFap-tt7/Screen-Shot-2021-02-06-at-8.30.03-PM.png\"></a></div>",
        "id": 225439521,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612661506
    },
    {
        "content": "<p>ha! <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  :D Maybe that was my bug :')</p>",
        "id": 225439647,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612661700
    },
    {
        "content": "<p>Though, I'm now put at ease that the Lean runtime is doing something</p>",
        "id": 225439653,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612661734
    },
    {
        "content": "<p>Yeah, feel free to ping me if you get stuck again. I spent a fair bit of time debugging this kind of thing when I was playing around with the Lean web editor. I don't have experience with the NNG itself, but I imagine it's very similar.</p>",
        "id": 225439714,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612661837
    },
    {
        "content": "<p>Thanks a lot, will do tomorrow</p>",
        "id": 225439720,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612661877
    },
    {
        "content": "<p>A quick tip: if you want to access an IPv6 only website when your ISP doesn't support it for some reason, you can use the Tor Browser.</p>",
        "id": 225443596,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612670249
    },
    {
        "content": "<p>But Tor Browser doesn't support WASM because of security reasons <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 225443710,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612670515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225438225\">said</a>:</p>\n<blockquote>\n<p>For the second part, one way to test the previous hypothesis would be to produce JS/WASM files for Lean 3.24.0 and remake the NNG for 3.24.0, it appears to me that <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> is maintainer on the Lean package on NixOS, I would like to ask: how much effort would be needed to add as an output the <code>lean_js_js.js, lean_js_wasm.js, lean_js_wasm.wasm</code> files in the Lean package? Or how can I produce them given the Lean package? I tried to poke around in the source code but didn't find really explicit stuff, I was planning to dig into the CMake files but maybe it is faster and better to just ask?</p>\n</blockquote>\n<p>Not trivial, but not impossible either.  To get these files, you need to compile lean with emscripten.  (But we have emscripten in nixpkgs.)  If you want to upstream the nixos modules into nixpkgs, then I'd suggest to make a second <code>lean3-emscripten</code> derivation which compiles lean from source using emscripten.  If you just want it for personal use, then use <code>fetchurl { src = \"https://github.com/leanprover-community/lean/releases/download/v3.26.0/lean-3.26.0--browser.zip\"; ... }</code>.</p>",
        "id": 225452942,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612687502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225452942\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225438225\">said</a>:</p>\n<blockquote>\n<p>For the second part, one way to test the previous hypothesis would be to produce JS/WASM files for Lean 3.24.0 and remake the NNG for 3.24.0, it appears to me that <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> is maintainer on the Lean package on NixOS, I would like to ask: how much effort would be needed to add as an output the <code>lean_js_js.js, lean_js_wasm.js, lean_js_wasm.wasm</code> files in the Lean package? Or how can I produce them given the Lean package? I tried to poke around in the source code but didn't find really explicit stuff, I was planning to dig into the CMake files but maybe it is faster and better to just ask?</p>\n</blockquote>\n<p>Not trivial, but not impossible either.  To get these files, you need to compile lean with emscripten.  (But we have emscripten in nixpkgs.)  If you want to upstream the nixos modules into nixpkgs, then I'd suggest to make a second <code>lean3-emscripten</code> derivation which compiles lean from source using emscripten.  If you just want it for personal use, then use <code>fetchurl { src = \"https://github.com/leanprover-community/lean/releases/download/v3.26.0/lean-3.26.0--browser.zip\"; ... }</code>.</p>\n</blockquote>\n<p>Unfortunately, it seems like this step: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/CMakeLists.txt#L282\">https://github.com/leanprover-community/lean/blob/master/src/CMakeLists.txt#L282</a> makes it impossible to reproduce WASM/JS files without further patching of the source tree</p>",
        "id": 225493025,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612744582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Well chasing down the problem made me understood that it's nastier than what I thought, I am now trying locally to do make-lean-game which does lean --make and package everything in a ZIP ; but when I try locally without Nix except to provide Lean 3.24.0, it still fails with the same errors as the olean are incompatible</p>\n<p>I'm unsure if I can just open the olean and check which versions they are for, also, I get this message each time from leanpkg:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"n\">mismatch</span><span class=\"o\">:</span> <span class=\"n\">installed</span> <span class=\"n\">version</span> <span class=\"n\">is</span> <span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">package</span> <span class=\"n\">requires</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>Unsure what to do with this, can it really cause issue? To me, <code>leanpkg.toml</code> is only declarative stuff, right? As long as I indeed use Lean 3.24.0 for WASM/JS and Lean 3.24.0 for olean building, it should be just fine?</p>",
        "id": 225497994,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612751935
    },
    {
        "content": "<p>Here's a tarball of the locally, by hand, produced web source: <a href=\"/user_uploads/3121/u5Z3TwZeGfPG-gE39buibx5Z/local_nng_for_3-24-0.tar.gz\">local_nng_for_3-24-0.tar.gz</a></p>",
        "id": 225498083,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612752051
    },
    {
        "content": "<p>That warning can be safely ignored. I mention this in the <code>leanprover-community/lean-web-editor</code> README in <a href=\"https://github.com/leanprover-community/lean-web-editor#creating-a-customized-libraryzip\">this section</a>.</p>",
        "id": 225498432,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612752511
    },
    {
        "content": "<p>If you open an <code>.olean</code> file in e.g. vim, it should start with something like this: <code>oleanfile^@3.26.0, commit 5a5c139af3e9</code>.</p>",
        "id": 225498543,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612752685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225498543\">said</a>:</p>\n<blockquote>\n<p>If you open an <code>.olean</code> file in e.g. vim, it should start with something like this: <code>oleanfile^@3.26.0, commit 5a5c139af3e9</code>.</p>\n</blockquote>\n<p>Alright, I can see it in my olean</p>",
        "id": 225498591,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612752754
    },
    {
        "content": "<p>I also fixed somewhat the warning by following the exact path, with no further success</p>",
        "id": 225498600,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612752785
    },
    {
        "content": "<p>I also tried the maze game skeleton provided in <a href=\"https://github.com/kbuzzard/lean-game-skeleton\">https://github.com/kbuzzard/lean-game-skeleton</a> with the same errors (cannot import the user code seems like)</p>",
        "id": 225498681,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612752873
    },
    {
        "content": "<p>You're using commit Lean 3.24.0 <code>13007eb</code> to build the oleans and using the JS/WASM files from the GitHub release?</p>",
        "id": 225498705,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612752925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225498705\">said</a>:</p>\n<blockquote>\n<p>You're using commit Lean 3.24.0 <code>13007eb</code> to build the oleans and using the JS/WASM files from the GitHub release?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 225498772,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753022
    },
    {
        "content": "<p>I double-tripled-checked</p>",
        "id": 225498778,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753028
    },
    {
        "content": "<p>I'm trying with a Lean downloaded from elan now just in case</p>",
        "id": 225498798,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753074
    },
    {
        "content": "<p>tough luck :&gt;<br>\nIt's now working with the elan-downloaded Lean</p>",
        "id": 225498923,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753207
    },
    {
        "content": "<p>So the issue lies in the Nix packaged Lean</p>",
        "id": 225498937,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753231
    },
    {
        "content": "<p>I have an idea on what's going on</p>",
        "id": 225498942,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753242
    },
    {
        "content": "<p>The Nix packaged Lean has no commit git hash as the src is not provided with a <code>.git</code> so <code>lean -v</code> shows no commit githash even though it's the proper 3.24.0 version</p>",
        "id": 225498959,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753269
    },
    {
        "content": "<p>Generating olean this way produces olean with no commit marker in the start of the file</p>",
        "id": 225498970,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753283
    },
    {
        "content": "<p>IMHO, commit hash should not be embedded in the oleans, as long as there is a proper versioning scheme, am I wrong?</p>",
        "id": 225499044,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Shouldn't you use <code>fetchurl</code> and the tarball URLs for the src attr for the Lean package to inject the githash stuff? I will check if that actually fixes the bug</p>",
        "id": 225499124,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225498959\">said</a>:</p>\n<blockquote>\n<p>The Nix packaged Lean has no commit git hash as the src is not provided with a <code>.git</code> so <code>lean -v</code> shows no commit githash even though it's the proper 3.24.0 version</p>\n</blockquote>\n<p>Yep, I was just about to point this out.</p>",
        "id": 225499236,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612753534
    },
    {
        "content": "<p>I have built a quick override on the source tree to see if that's definitely the issue</p>",
        "id": 225499336,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612753625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225499044\">said</a>:</p>\n<blockquote>\n<p>IMHO, commit hash should not be embedded in the oleans, as long as there is a proper versioning scheme, am I wrong?</p>\n</blockquote>\n<p>There was some previous discussion (wow, in 2019) about removing the commit from the oleans or making Lean 3 less sensitive to the commit string in the oleans: <a href=\"#narrow/stream/113488-general/topic/Time.20to.20move.20to.203.2E5.3F/near/179100595\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Time.20to.20move.20to.203.2E5.3F/near/179100595</a></p>\n<p>I think at this point with Lean 4 on the horizon there's very little downside to this. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> what do you think?</p>",
        "id": 225499522,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612753858
    },
    {
        "content": "<p>Sounds like neither leaveDotGit = true; neither deepClone in addition can produce the proper sha1, unsure if I'm doing something wrong as those features are apparently non-deterministic</p>",
        "id": 225500053,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612754499
    },
    {
        "content": "<p>The easy solution could be to substitute the CMakeLists to give it the commit hash if needed at all, sounds like an easier solution</p>",
        "id": 225500063,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612754522
    },
    {
        "content": "<p>patching these two lines: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/CMakeLists.txt#L362-L363\">https://github.com/leanprover-community/lean/blob/master/src/CMakeLists.txt#L362-L363</a> seems to be enough I guess, I will try in a quick'n'dirty fashion</p>",
        "id": 225500149,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612754614
    },
    {
        "content": "<p>and… that's the win!</p>",
        "id": 225500610,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612755274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Hmm, it seems like that <code>leanpkg</code> always tries to update the revision of dependencies, is there a way to skip this kind of behavior? As fetching git repositories removes the dot git for determinism, would there a way to say: do not try to configure the dependencies and just build using what I give you?</p>",
        "id": 225535619,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612786758
    },
    {
        "content": "<p>I would just fetch the dependencies by hand and then call <code>lean --make src</code> manually.</p>",
        "id": 225535827,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612786875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Debugging.20Lean.20games.20.26.20building.20JS.2FWASM.20versions.20for.20Lean/near/225535827\">said</a>:</p>\n<blockquote>\n<p>I would just fetch the dependencies by hand and then call <code>lean --make src</code> manually.</p>\n</blockquote>\n<p>On each dependency?</p>",
        "id": 225535856,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612786898
    },
    {
        "content": "<p>Yes.  You can also do <code>lean --make src/ _target/deps/foo/src</code> to make everything at once.</p>",
        "id": 225540716,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612789515
    },
    {
        "content": "<p>Note that <code>lean --make src/ _target/deps/foo/src</code> will build <strong>everything</strong> in <code>foo</code>, which usually isn't necessary (e.g. there's a lot of mathlib that the NNG doesn't depend on). So <code>lean --make src</code> should be sufficient in most cases.</p>",
        "id": 225581623,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612806528
    }
]