[
    {
        "content": "<p>I see. Issue closed and thanks for the input!</p>",
        "id": 258799210,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634957908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 258799325,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634958064
    },
    {
        "content": "<p>I'll reiterate that <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> has been working on an Alectryon tool for Lean 3. There are plans to have similar or better tooling for Lean 4.</p>",
        "id": 258806519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634969971
    },
    {
        "content": "<p>Yes, I can probably announce now that I have a student working on Lean 4 integration</p>",
        "id": 258807179,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634971113
    },
    {
        "content": "<p>Ooh, that's great to hear!</p>",
        "id": 258807511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634971690
    },
    {
        "content": "<p>Alectryon is pretty much done, there's a couple things I need to finish off but I'm on holiday for a while so I can't press the finish button on it, but the branch that is inthe PR is a good first-order approximation of what its meant to be</p>",
        "id": 258809525,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634974766
    },
    {
        "content": "<p>Eric, does this \"pretty much done\" include go-to-definition links?</p>",
        "id": 258811073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634977288
    },
    {
        "content": "<p>Nope - it's currently at feature paritywith coq, that doesn't have them either. When I get back I'll try and investigate further but it really is a lot more convenient to do that in lean4, where I envision alectryon to basically run on lean4 apart from the already-existing python post processing</p>",
        "id": 258813140,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634980626
    },
    {
        "content": "<p>Are there something in lean just like Isabelle's Sledgehammer? That uses SMT solvers, for example, Z3 or CVC4 for finishing simple proofs.</p>",
        "id": 258817074,
        "sender_full_name": "Meow",
        "timestamp": 1634986375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> was she/he able to communicate with lean server? I am able to send one message and read the return. But when I try to send the second message, the <a href=\"https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/src/Lean/Data/Lsp/Communication.lean#L31\">server throws this exception</a>.</p>",
        "id": 258845349,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635027237
    },
    {
        "content": "<p>this is my current code in Python: <a href=\"https://gist.github.com/arthurpaulino/03c35f76cb5cf7c8d7762c3dcade9d86\">https://gist.github.com/arthurpaulino/03c35f76cb5cf7c8d7762c3dcade9d86</a></p>",
        "id": 258845421,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635027345
    },
    {
        "content": "<p>And this is the output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Content</span><span class=\"bp\">-</span><span class=\"n\">Length</span><span class=\"o\">:</span> <span class=\"mi\">568</span>\n\n<span class=\"o\">{</span><span class=\"s2\">\"result\"</span><span class=\"o\">:{</span><span class=\"s2\">\"serverInfo\"</span><span class=\"o\">:{</span><span class=\"s2\">\"version\"</span><span class=\"o\">:</span><span class=\"s2\">\"0.1\"</span><span class=\"o\">,</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Lean 4 Server\"</span><span class=\"o\">},</span><span class=\"s2\">\"capabilities\"</span><span class=\"o\">:{</span><span class=\"s2\">\"typeDefinitionProvider\"</span><span class=\"o\">:</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"s2\">\"textDocumentSync\"</span><span class=\"o\">:{</span><span class=\"s2\">\"willSaveWaitUntil\"</span><span class=\"o\">:</span><span class=\"n\">false</span><span class=\"o\">,</span><span class=\"s2\">\"willSave\"</span><span class=\"o\">:</span><span class=\"n\">false</span><span class=\"o\">,</span><span class=\"s2\">\"openClose\"</span><span class=\"o\">:</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"s2\">\"change\"</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">},</span><span class=\"s2\">\"semanticTokensProvider\"</span><span class=\"o\">:{</span><span class=\"s2\">\"range\"</span><span class=\"o\">:</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"s2\">\"legend\"</span><span class=\"o\">:{</span><span class=\"s2\">\"tokenTypes\"</span><span class=\"o\">:[</span><span class=\"s2\">\"keyword\"</span><span class=\"o\">,</span><span class=\"s2\">\"variable\"</span><span class=\"o\">,</span><span class=\"s2\">\"property\"</span><span class=\"o\">],</span><span class=\"s2\">\"tokenModifiers\"</span><span class=\"o\">:[]},</span><span class=\"s2\">\"full\"</span><span class=\"o\">:</span><span class=\"n\">true</span><span class=\"o\">},</span><span class=\"s2\">\"hoverProvider\"</span><span class=\"o\">:</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"s2\">\"documentSymbolProvider\"</span><span class=\"o\">:</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"s2\">\"documentHighlightProvider\"</span><span class=\"o\">:</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"s2\">\"definitionProvider\"</span><span class=\"o\">:</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"s2\">\"declarationProvider\"</span><span class=\"o\">:</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"s2\">\"completionProvider\"</span><span class=\"o\">:{</span><span class=\"s2\">\"triggerCharacters\"</span><span class=\"o\">:[</span><span class=\"s2\">\".\"</span><span class=\"o\">],</span><span class=\"s2\">\"resolveProvider\"</span><span class=\"o\">:</span><span class=\"n\">false</span><span class=\"o\">}}},</span><span class=\"s2\">\"jsonrpc\"</span><span class=\"o\">:</span><span class=\"s2\">\"2.0\"</span><span class=\"o\">,</span><span class=\"s2\">\"id\"</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"n\">Watchdog</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Cannot</span> <span class=\"n\">read</span> <span class=\"n\">LSP</span> <span class=\"n\">message</span><span class=\"o\">:</span> <span class=\"n\">Stream</span> <span class=\"n\">was</span> <span class=\"n\">closed</span>\n</code></pre></div>",
        "id": 258845481,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635027413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> We're at the very beginning, but we'll interface directly with Lean instead of going via the LSP</p>",
        "id": 258845496,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1635027467
    },
    {
        "content": "<p>With a Lean program to read from stdin?</p>",
        "id": 258846694,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635029287
    },
    {
        "content": "<p>Oops, I think I got it. My deadline for the stdout was too strict</p>",
        "id": 258847620,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635030842
    },
    {
        "content": "<p>There really shouldn't be any need for deadlines here :) . You should do blocking reads for the response header line and then for exactly as many bytes as indicated in the header (<a href=\"https://github.com/leanprover/lean4/blob/14fdb793f7bdc7358e2ff3bfbe536e7e2d4a32ee/src/Lean/Data/Lsp/Communication.lean#L28-L55\">https://github.com/leanprover/lean4/blob/14fdb793f7bdc7358e2ff3bfbe536e7e2d4a32ee/src/Lean/Data/Lsp/Communication.lean#L28-L55</a>).</p>",
        "id": 258864781,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1635060497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> I think there's something wrong with PyPI's <code>alectryon</code>. I tried running <code>alectryon --frontend lean3 test.lean</code> and it said:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>alectryon: error: argument --frontend: invalid choice: <span class=\"s1\">'lean3'</span> <span class=\"o\">(</span>choose from <span class=\"s1\">'coq'</span>, <span class=\"s1\">'coq+rst'</span>, <span class=\"s1\">'coq.io.json'</span>, <span class=\"s1\">'coq.json'</span>, <span class=\"s1\">'coqdoc'</span>, <span class=\"s1\">'json'</span>, <span class=\"s1\">'md'</span>, <span class=\"s1\">'rst'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But then I cloned the <code>alectryon</code> repository and installed it with <code>pip install -e .</code>. Then is suddenly worked.<br>\nPS: both versions were 1.4.0</p>",
        "id": 265930018,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640275841
    },
    {
        "content": "<p>I'll look into this:)</p>",
        "id": 265932106,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640277372
    },
    {
        "content": "<p>I don't think there's been a release since the preliminary support for Lean3 was merged; <span class=\"user-mention\" data-user-id=\"371318\">@Clément</span> will probably know more</p>",
        "id": 265935731,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640280052
    }
]