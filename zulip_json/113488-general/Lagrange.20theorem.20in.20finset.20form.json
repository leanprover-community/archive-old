[
    {
        "content": "<p>I've been trying to prove  a version of Lagrange's theorem so I don't have to deal with all this type theory as I work on theorems. What is the right way to make progress here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subgroup_fintype</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- library_search</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Version of Lagrange's theorem using the formalism of a closed subset</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">card_closed_subset_dvd_card</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">closed_under_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">closed_under_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">id_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"n\">finset.card</span> <span class=\"n\">s</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">s_subgroup</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">subgroup.mk</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s_subgroup</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fintype.card_subtype</span><span class=\"o\">,</span> <span class=\"c1\">--why does this fail</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">subgroup.mem_carrier</span><span class=\"o\">,</span> <span class=\"c1\">--why does this fail</span>\n   <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">subgroup.card_subgroup_dvd_card</span> <span class=\"n\">s_subgroup</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"o\">{</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span> <span class=\"o\">{</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span> <span class=\"o\">{</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279567750,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1650472077
    },
    {
        "content": "<p>That doesn't compile for me -- I get a failed to synthesize <code>⊢ fintype ↥s_subgroup</code>.</p>",
        "id": 279568324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650472325
    },
    {
        "content": "<p>I'm getting that in the web editor too, but it works fine for me in vscode</p>",
        "id": 279568537,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1650472413
    },
    {
        "content": "<p>Maybe I need more imports</p>",
        "id": 279568590,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1650472441
    },
    {
        "content": "<p>that's probably because you have an outdated version of mathlib on your computer. But it makes it difficult for me to debug</p>",
        "id": 279568652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650472452
    },
    {
        "content": "<p>The issue was that I was missing an instance I had defined, sorry, it should be fixed now</p>",
        "id": 279569061,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1650472640
    },
    {
        "content": "<p>My guess is that the rewrite is failing because of some constructivist nonsense. Lean is finding a different proof of finiteness and you're not using <code>convert</code> so rotten luck. I wrote <code>nat.card</code> for a reason you know ;-) I might be wrong though.</p>",
        "id": 279569957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650473066
    },
    {
        "content": "<p>In fact I would thoroughly recommend <code>nat.card</code> for use with finite groups. It is nonconstructive and returns the value 0 for infinite types, which is great in group theory because finite groups can't have size 0.</p>",
        "id": 279570088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650473135
    },
    {
        "content": "<p>Yeah, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s_subgroup</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s_subgroup</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>so the issue is that fintype stinks. <code>convert</code> works its way around the constructive mess because it knows that <code>fintype</code> is a subsingleton.</p>",
        "id": 279570404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650473293
    },
    {
        "content": "<p><code>rw ← subgroup.mem_carrier</code> fails because <code>rw</code> won't work under a binder; <code>simp_rw ← subgroup.mem_carrier,</code> works.</p>",
        "id": 279570485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650473345
    },
    {
        "content": "<p>Oh! Another reason you'll have real problems is <code>have s_subgroup : subgroup α := ...</code>: this <code>have</code> needs to be a <code>let</code> because you're defining data here.</p>",
        "id": 279570667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650473440
    },
    {
        "content": "<p>In fact changing that might fix up a whole bunch of stuff.</p>",
        "id": 279570698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650473455
    },
    {
        "content": "<p>I would strongly recommend against all this <code>tidy</code> stuff by the way. Use <code>tidy?</code> to find out what it's doing and do that instead; it's much quicker :-)</p>",
        "id": 279570970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650473590
    },
    {
        "content": "<p>The documentation for <code>let</code> and <code>have</code> seems to be exactly the same, can you explain to me in what way they behave differently?</p>",
        "id": 279572044,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1650473922
    },
    {
        "content": "<p><code>have a : \\N := 37</code> promptly forgets that <code>a = 37</code>, and you're just left with <code>a : nat</code> that you know nothing about.</p>",
        "id": 279578324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650476558
    },
    {
        "content": "<p>Btw, you also should not need <code>closed_under_inv</code> and <code>inv_mem</code>, right?</p>",
        "id": 279596194,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650485122
    },
    {
        "content": "<p>Note that <code>have</code> in tactic mode doesn't actually make lean forget, it just pretends it's forgotten until you conclude the tactic block</p>",
        "id": 279603371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650488805
    }
]