[
    {
        "content": "<p>I've been thinking again about serializing goals and expressions in Lean so that they can be deserialized into another Lean process. It seems that I should just be able to read off the <a href=\"https://github.com/leanprover-community/lean/blob/653bd21db3937a4b6d7f5629923bbcf0a836692f/library/init/meta/expr.lean#L85-L110\">internal representation of the expression</a>, but there are three main complexities:</p>\n<ul>\n<li>metavariables</li>\n<li>macros</li>\n<li>the elab flag</li>\n</ul>",
        "id": 211615510,
        "sender_full_name": "Jason Rute",
        "timestamp": 1601383715
    },
    {
        "content": "<p>As for metavariables, they can be serialized, (and maybe I also need to separately serialize their type?).  As for deserialization, this might be naive, but I think metavariables can be handled by making fresh metavariables when deserializing and replacing the old metavariables with those.  Any issues with this approach?</p>",
        "id": 211615515,
        "sender_full_name": "Jason Rute",
        "timestamp": 1601383723
    },
    {
        "content": "<p>As for macros, my understanding is that a macro is just a form of lazy evaluation which promises to expand in the expression later.  I notice if I pretty print the expressions that the macros seem to be evaluated.  Is there a way in lean to evaluate a macro expression into one without any macros?  (I need to do a bit more digging also and see how common it is to get macros in goals.  Maybe it is a rarity.)</p>",
        "id": 211615521,
        "sender_full_name": "Jason Rute",
        "timestamp": 1601383730
    },
    {
        "content": "<p>Last, for the elab flag, what is the elab flag set to for goal statements?  Is it always <code>tt</code>, always <code>ff</code>, or mixed?  Also, am I correct that that given an expression <code>e</code> there is no way to know which flag was used to create it?  Or is the idea that if I see a type <code>expr</code>, it is really <code>expr tt</code> since <code>tt</code> is the default?</p>",
        "id": 211615526,
        "sender_full_name": "Jason Rute",
        "timestamp": 1601383735
    },
    {
        "content": "<p>Note, it looks like this is going to be easier <a href=\"https://github.com/leanprover/lean4/blob/d66b6738ee90efc7bd9245ed80ba77d9613ad8cf/src/Lean/Expr.lean#L168-L182\">in Lean 4</a> since there are no macros or elab flag and it seems that expressions are pure data types.  (Also the hashing will make serialization possibly faster since one doesn't have to traverse the whole tree.)</p>",
        "id": 211615528,
        "sender_full_name": "Jason Rute",
        "timestamp": 1601383738
    },
    {
        "content": "<p><code>elab = ff</code> means pre-expression, i.e., an AST representation of the input.  You should probably only look at elaborated expressions: <code>elab = tt</code>.  Lean 4's Expr type is essentially the <code>elab = tt</code> variant.</p>",
        "id": 211616110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601384101
    },
    {
        "content": "<p>Just expand macros before serialization using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.unfold_all_macros\">docs#environment.unfold_all_macros</a></p>",
        "id": 211616195,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601384155
    },
    {
        "content": "<p>You might want to look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/io.serialize\">docs#io.serialize</a> for more efficient serialization of expressions.</p>",
        "id": 211616323,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601384208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/expanding.20and.20serializing.20expressions/near/211615526\">said</a>:</p>\n<blockquote>\n<p>Or is the idea that if I see a type <code>expr</code>, it is really <code>expr tt</code> since <code>tt</code> is the default?</p>\n</blockquote>\n<p>Exactly.</p>",
        "id": 211616403,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601384247
    },
    {
        "content": "<p>I forgot about the <code>io.serialize</code>.  I'll give it a try.</p>",
        "id": 211616568,
        "sender_full_name": "Jason Rute",
        "timestamp": 1601384334
    },
    {
        "content": "<p>Have a look at <a href=\"https://github.com/leanprover-community/mathlib/tree/mathlib-cache\">branch#mathlib-cache</a> (PR <a href=\"https://github.com/leanprover-community/mathlib/issues/2300\">#2300</a>), a prototype tactic written by my former student Keeley Hoek, which caches the results of <code>begin ... end</code> blocks to the filesystem, for faster recompilation.</p>",
        "id": 211696815,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601421294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <code>unfold_all_macros</code> doesn't seem to work always.  Here is a MWE based on my use case (I thought <code>revert_all</code> would be a convenient way to turn the goal with its local context into a single expression, which could then be serialized.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">unfold_macros_in_goal</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">env</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">goal</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"o\">:=</span> <span class=\"n\">env.unfold_all_macros</span> <span class=\"n\">goal</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">goal.to_raw_fmt</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">goal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">trivial_thm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">trivial_thm</span><span class=\"o\">,</span> <span class=\"c1\">-- puts delayed_abstraction macros in the goal (which I think build metavariables)</span>\n    <span class=\"n\">tactic.revert_all</span><span class=\"o\">,</span>    <span class=\"c1\">-- goal is ∀ (m : ℕ), ?m_1[m] = ?m_1[m]</span>\n    <span class=\"n\">unfold_macros_in_goal</span><span class=\"o\">,</span>  <span class=\"c1\">-- \"failed to expand macro\" error</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Moreover, if I try to serialize this goal I get the \"'unreachable' code was reached\" error.  Is this a bug, or is it just not possible to unfold/serialize some expressions?</p>",
        "id": 211702998,
        "sender_full_name": "Jason Rute",
        "timestamp": 1601426418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'll try to have a look.  By chance, is it easy to explain what it means to cache the result of a <code>begin...end</code> block?  Does it just cache the term proof?  Does it work for partial proofs, or just complete proofs?</p>",
        "id": 211703571,
        "sender_full_name": "Jason Rute",
        "timestamp": 1601427027
    },
    {
        "content": "<p>Just complete proofs, sorry. :-)</p>",
        "id": 211704614,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601428091
    },
    {
        "content": "<p>It just caches the entire proof term by serializing it. Subsequent executions of the tactic block first look for a cached file, and happily proceed to use the cached term if it typechecks.</p>",
        "id": 211704649,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601428146
    }
]