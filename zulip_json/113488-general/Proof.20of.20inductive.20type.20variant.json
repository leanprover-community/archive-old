[
    {
        "content": "<p>There are cases where I'd like to define something in terms of a particular variant of an inductive type for example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span><span class=\"n\">one</span>\n<span class=\"bp\">|</span><span class=\"n\">two</span>\n\n<span class=\"n\">def</span> <span class=\"n\">narrow</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n\n\n<p>But this does not work<br>\nI would like for the function's v parameter to accept only the objects of type Foo that are known to be Foo.one and not Foo.two.<br>\nIs there a way to do this?</p>",
        "id": 198552542,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1590268819
    },
    {
        "content": "<p>In your example there is no point because there is only one element that is <code>Foo.one</code>, namely <code>Foo.one</code>, so there is no need to pass it in</p>",
        "id": 198552617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590268945
    },
    {
        "content": "<p>Usually I would write such a function taking arguments for all the arguments of the appropriate constructor case</p>",
        "id": 198552625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590268974
    },
    {
        "content": "<p>There isn't (how would you even access the data of <code>v</code>?). You should put the constructor data in a separate structure.</p>",
        "id": 198552626,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1590268976
    },
    {
        "content": "<p>Or what Mario said</p>",
        "id": 198552633,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1590269008
    },
    {
        "content": "<p>You could also have <code>(v : Foo) (h : v = Foo.one) := ...</code> or more generally <code>(v : Foo) (h : \\exists a b, v = Foo.one a b) := ...</code></p>",
        "id": 198552639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269037
    },
    {
        "content": "<p>Thanks,<br>\nI'm thinking of using = <br>\nI'm not sure how I would do this with a structure and sill have a type that expresses two possibilities</p>",
        "id": 198552775,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1590269233
    },
    {
        "content": "<p>do you have a more realistic example?</p>",
        "id": 198552785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269254
    },
    {
        "content": "<p>I wouldn't recommend the <code>=</code> method because it's just more overhead over the pass the constructor arguments method</p>",
        "id": 198552828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269286
    },
    {
        "content": "<p>This is my code, I'm just sort of picking and poking until I learn lol</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Atom</span><span class=\"o\">}</span>\n    <span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span><span class=\"o\">}</span>\n    <span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Atom</span><span class=\"o\">}</span>\n    <span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">program</span><span class=\"o\">}</span>\n    <span class=\"kn\">inductive</span> <span class=\"n\">Subset</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Atom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">program</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">satisfied</span> <span class=\"o\">(</span><span class=\"n\">holds</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">truthy</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subset</span>\n    <span class=\"bp\">|</span> <span class=\"n\">unsatisfied</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">truthy</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Subset</span>\n</code></pre></div>\n\n\n<p>I'd like to define something that only accepts satisfied subsets. However, I'm realizing now that this would probably be better achieved through negation...</p>",
        "id": 198552857,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1590269395
    },
    {
        "content": "<p>Sebastian is suggesting to have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">constructor1_args</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">constructor1</span> <span class=\"o\">:</span> <span class=\"n\">constructor1_args</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">constructor2</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span>\n</code></pre></div>\n\n\n<p>where all the arguments of <code>constructor1</code> are packed into a data structure</p>",
        "id": 198552900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269418
    },
    {
        "content": "<p>Ah, that makes sense</p>",
        "id": 198552925,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1590269450
    },
    {
        "content": "<p>There are a lot of weird things in that example. Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for it?</p>",
        "id": 198552940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269469
    },
    {
        "content": "<p>Does <code>==</code> mean something other than its usual meaning in your code? Because the standard lean meaning is <code>heq</code> which you almost certainly don't want</p>",
        "id": 198552994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269547
    },
    {
        "content": "<p>No, I've been using heq because = didn't work when I tried to use it somewhere...<br>\nWhat's the difference?</p>",
        "id": 198553000,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1590269579
    },
    {
        "content": "<p>oh that means something is very wrong. <code>=</code> only accepts arguments of the same type, <code>==</code> accepts arguments of different types but asserts they are the same type</p>",
        "id": 198553022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269631
    },
    {
        "content": "<p>It's probably a better fit for <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> stream but we could go over your code, I think it would be helpful to you</p>",
        "id": 198553080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269728
    },
    {
        "content": "<p>Ah, I think I was using different types. Though in this case both arguments<br>\n are the same type</p>",
        "id": 198553081,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1590269730
    },
    {
        "content": "<p>Thanks, but I don't know if you could help because I mostly only have definitions and haven't done anything with them.</p>",
        "id": 198553200,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1590269945
    },
    {
        "content": "<p>that's <em>exactly</em> when we can be the most help</p>",
        "id": 198553208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269959
    },
    {
        "content": "<p>the definitions are the hardest part</p>",
        "id": 198553212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269967
    },
    {
        "content": "<p>and because you aren't proving anything you have no guidance from lean</p>",
        "id": 198553214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590269982
    },
    {
        "content": "<p>Hm, alright. I'd appreciate some help then :) should I create a new thread in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> ?</p>",
        "id": 198553358,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1590270183
    },
    {
        "content": "<p>yes, post your code and an informal description of what you are trying to define</p>",
        "id": 198554124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590271468
    }
]