[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , I am surprised by the simp lint behavior in the following example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">my_equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>     <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span>    <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inv</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">inv_fun</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right_inv</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">inv_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">my_equiv</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">my_equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">my_equiv</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">my_equiv_apply</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">my_equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c1\">-- does not complain that my_equiv.left_inv should not be a simp lemma</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">should_not_work</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">my_equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c1\">-- does rightly complain that should_not_work should not be a simp lemma</span>\n</code></pre></div>\n\n\n<p>I put an attribute <code>simp</code> on a field of a structure, here <code>my_equiv.left_inv</code>. But then I declare a simp normal form using a coercion, which means that <code>my_equiv.left_inv</code> will never fire. The linter doesn't complain about this, while it does if I the simp attribute is on a lemma saying exactly the same thing.</p>",
        "id": 195810856,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588235521
    },
    {
        "content": "<p>Mmh, the linting error would be on <code>my_equiv.left_inv</code> but I guess we don't lint that declaration because it is automatically generated.  <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Should we lint constructors and projections as well?</p>",
        "id": 195811144,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588235742
    },
    {
        "content": "<p>In the case of <code>simp</code> attributes, it is a conscious decision to put it on the field, not something done under the hood, so I think it would deserve being reported by the linter.</p>",
        "id": 195811318,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588235864
    },
    {
        "content": "<p>Maybe it should be a choice made for each linter, like we do for auto decls?</p>",
        "id": 195812463,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588236621
    },
    {
        "content": "<p>It doesn't make sense to check constructions for doc strings.</p>",
        "id": 195812483,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588236634
    },
    {
        "content": "<p>I think that's the only one, I'll just add the check there.  There are some declarations that we never want to look at like <code>sizeof</code> or the general inductive encoding.  Should we lint <code>brec_on</code> and company?</p>",
        "id": 195813506,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588237337
    },
    {
        "content": "<p>Is there really that much to gain though? Besides the simp linters, what do we expect to catch by linting these things? You can only fix them by changing a different declaration, and usually the error would show up there already, no?</p>",
        "id": 195813747,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588237519
    },
    {
        "content": "<p>I completely forgot that we already have an <code>auto_decls</code> flag in the linters to opt-in to auto decls.  I'll try to enable it for all linters where it seems reasonable.</p>",
        "id": 195814038,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588237742
    },
    {
        "content": "<p>Some (but not all) of the type class linters already had this flag set.</p>",
        "id": 195814076,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588237782
    },
    {
        "content": "<p>I forgot to mention this, but <code>my_equiv_apply</code> actually does not make <code>my_equiv.left_inv</code> redundant!  This is because <code>my_equiv_apply</code> is only defined for <code>Type 0</code>, while <code>my_equiv.left_inv</code> works in all universes.</p>",
        "id": 195940500,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588321207
    },
    {
        "content": "<p>My mistake, I should have put <code>Type*</code> everywhere. It doesn't change the output of the linter, though.</p>",
        "id": 195941229,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588322142
    },
    {
        "content": "<p>That's what <a href=\"https://github.com/leanprover-community/mathlib/issues/2580\" title=\"https://github.com/leanprover-community/mathlib/issues/2580\">#2580</a> is for. <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 195942417,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588323462
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 195942662,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588323669
    }
]