[
    {
        "content": "<p>I've come across an issue where having adding <code>is_prime I</code> to the context causes lean to timeout. This only became an issue after merging the latest master branch, and used to build just fine. This should be close to a MWE, when I uncomment the <code>is_prime</code> instance I get a <code>(deterministic) timeout</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"c1\">--[is_prime I]</span>\n  <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">I.quotient</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R'</span> <span class=\"o\">:=</span> <span class=\"n\">subring.to_comm_ring</span> <span class=\"n\">R'</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.comm_ring</span><span class=\"o\">,</span> <span class=\"c1\">-- timeout here</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217710461,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1606187992
    },
    {
        "content": "<p>What's the full MWE with imports and open namespaces?</p>",
        "id": 217710924,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606188511
    },
    {
        "content": "<p>Sorry, this should be a full example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.over</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ideal</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"c1\">--[is_prime I]</span>\n  <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">I.quotient</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R'</span> <span class=\"o\">:=</span> <span class=\"n\">subring.to_comm_ring</span> <span class=\"n\">R'</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.comm_ring</span><span class=\"o\">,</span> <span class=\"c1\">-- timeout here</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ideal</span>\n</code></pre></div>",
        "id": 217711639,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1606189393
    }
]