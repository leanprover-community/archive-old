[
    {
        "content": "<p>Is <code>eq_of_yield</code> provable? Do I need to lose computability with functional extensionality? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span> <span class=\"n\">utils</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">between</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">c_mapper</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span>       <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span>       <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">data</span>    <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">between</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">c_mapper</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">yield</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"n\">c_mapper</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">c_mapper</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"n\">m</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_of_yield</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">yield</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">yield</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 148032872,
        "sender_full_name": "Gavid Liebnich",
        "timestamp": 1542713108
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n\n<span class=\"n\">class</span> <span class=\"n\">c_mapper</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">yield</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c_mapper</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"n\">c_mapper</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">c_mapper</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"n\">m</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">not_yield_inj</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c_mapper</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">yield</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">yield</span> <span class=\"n\">m₂</span><span class=\"o\">),</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">H</span> <span class=\"n\">bool</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 148033325,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542713740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137673\">@Gavid Liebnich</span> it's false</p>",
        "id": 148033328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542713746
    },
    {
        "content": "<p>also function extensionality doesn't affect computability because it's a prop</p>",
        "id": 148033795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542714298
    },
    {
        "content": "<p>unlike some other constructive systems we have a proof irrelevant universe of propositions which are not used in computation</p>",
        "id": 148033820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542714349
    },
    {
        "content": "<p>Oh, thanks! I think It's starting to make sense now - of course it's not an injection, the <code>Πm, between 0 (n m) → ℕ</code> can be whatever mapping I want.</p>\n<p>So, if I were to define one such concrete mapping, for example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">mapper</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"bp\">ℕ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">indexed_mapper_is_c_mapper</span> <span class=\"o\">:</span>\n  <span class=\"n\">c_mapper</span> <span class=\"n\">mapper</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">n</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">h</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">data</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I could then prove (somehow)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">eq_of_yield</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">mapper</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">yield</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">yield</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span>\n</pre></div>\n\n\n<p>because the <code>data</code> of <code>c_mapper</code> would be the function <code>vector.data.nth</code>?</p>",
        "id": 148035327,
        "sender_full_name": "Gavid Liebnich",
        "timestamp": 1542716617
    },
    {
        "content": "<p>So the theorem is true if I give it two extensionally equivalent functions as <code>data</code>? For example, if I were to define a mapper that completely mirrors the <code>class</code>, that would make the theorem true by virtue of the functions used as <code>data</code> in <code>m1</code> and <code>m2</code> being equivalent? As such:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">mapper₂</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">between</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span>\n  <span class=\"n\">c_mapper</span> <span class=\"n\">mapper₂</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">n</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">h</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_of_yield</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">mapper₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">yield</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">yield</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Now the theorem is true?</p>",
        "id": 148035891,
        "sender_full_name": "Gavid Liebnich",
        "timestamp": 1542717437
    },
    {
        "content": "<p>just because it typechecks doesn't mean it's correct... I've corrected your code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">c_mapper_mapper₂</span> <span class=\"o\">:</span> <span class=\"n\">c_mapper</span> <span class=\"n\">mapper₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 148036999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542718739
    },
    {
        "content": "<p>it's <code>m.data x</code> not <code>x.1</code></p>",
        "id": 148037009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542718745
    },
    {
        "content": "<p>I think we would appreciate it if you check your questions before asking them</p>",
        "id": 148037037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542718762
    },
    {
        "content": "<p>I've proved both theorems:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">class</span> <span class=\"n\">c_mapper</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">mapper</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"bp\">ℕ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">c_mapper_mapper</span> <span class=\"o\">:</span> <span class=\"n\">c_mapper</span> <span class=\"n\">mapper</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c_mapper</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">yield</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"n\">c_mapper</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">c_mapper</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"n\">m</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">yield_inj</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">mapper</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">yield</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">yield</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"n\">m₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">m₁</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">yield</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_map</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_attach</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_range</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"n\">m₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">yield</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_map</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_attach</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_range</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m₁</span> <span class=\"k\">with</span> <span class=\"n\">n1</span> <span class=\"n\">h1</span> <span class=\"n\">d1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">m₂</span> <span class=\"k\">with</span> <span class=\"n\">n2</span> <span class=\"n\">h2</span> <span class=\"n\">d2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">=</span> <span class=\"n\">n2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">congr_arg</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">hy1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">hy2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">d1</span> <span class=\"k\">with</span> <span class=\"n\">L1</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">d2</span> <span class=\"k\">with</span> <span class=\"n\">L2</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">hy1</span> <span class=\"n\">hy2</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">ext_le</span> <span class=\"o\">(</span><span class=\"n\">H1</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">H2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi1</span> <span class=\"n\">hi2</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"o\">({</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">L1</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"bp\">⟩</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mapper</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">h3</span>\n    <span class=\"bp\">=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"o\">({</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">L2</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mapper</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hy2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span> <span class=\"bp\">▸</span> <span class=\"n\">hi2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">hy1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">hi1</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">yield</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_map&#39;</span><span class=\"o\">,</span> <span class=\"n\">c_mapper</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">nth</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coe</span> <span class=\"n\">lift_t</span> <span class=\"n\">has_lift_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">coe_t</span> <span class=\"n\">has_coe_t</span><span class=\"bp\">.</span><span class=\"n\">coe</span> <span class=\"n\">coe_b</span> <span class=\"n\">has_coe</span><span class=\"bp\">.</span><span class=\"n\">coe</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_attach</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_range</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">mapper₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">c_mapper_mapper₂</span> <span class=\"o\">:</span> <span class=\"n\">c_mapper</span> <span class=\"n\">mapper₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">yield_inj&#39;</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">mapper₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">yield</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">yield</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"n\">m₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">m₁</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">yield</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_map</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_attach</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_range</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"n\">m₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">yield</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_map</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_attach</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_range</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m₁</span> <span class=\"k\">with</span> <span class=\"n\">n1</span> <span class=\"n\">h1</span> <span class=\"n\">d1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">m₂</span> <span class=\"k\">with</span> <span class=\"n\">n2</span> <span class=\"n\">h2</span> <span class=\"n\">d2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">=</span> <span class=\"n\">n2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">congr_arg</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">hy1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">hy2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi1</span><span class=\"o\">,</span> <span class=\"n\">hi2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">hy1</span> <span class=\"n\">hy2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"o\">({</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">d1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mapper₂</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">h3</span>\n    <span class=\"bp\">=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"o\">({</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">d2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mapper₂</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hy2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hi2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">hy1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hi2</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">yield</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_map&#39;</span><span class=\"o\">,</span> <span class=\"n\">c_mapper</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">nth</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coe</span> <span class=\"n\">lift_t</span> <span class=\"n\">has_lift_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">coe_t</span> <span class=\"n\">has_coe_t</span><span class=\"bp\">.</span><span class=\"n\">coe</span> <span class=\"n\">coe_b</span> <span class=\"n\">has_coe</span><span class=\"bp\">.</span><span class=\"n\">coe</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_attach</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_range</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148037055,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542718787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137673\">@Gavid Liebnich</span></p>",
        "id": 148037125,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542718854
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> . I appreciate your help. The transition from nondependent <code>range</code> to the bounded mapping is a step I'm having difficulties with. There's a bit of magic in <code>convert</code> it would appear, I'll have to take a closer look. Thanks again, I'm going to step over the proofs.</p>",
        "id": 148037550,
        "sender_full_name": "Gavid Liebnich",
        "timestamp": 1542719296
    }
]