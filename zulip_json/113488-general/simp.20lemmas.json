[
    {
        "content": "<p>Can someone explain to me why set_of_eq_eq_singleton is not a simp lemma it seems like a decent candidate to me, or indeed if it should be?</p>",
        "id": 174204832,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1566892686
    },
    {
        "content": "<p>Same question for list.pairwise.nil !</p>",
        "id": 174220211,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1566906141
    },
    {
        "content": "<p><code>set_of_eq_eq_singleton</code> seems like a good candidate for a <code>simp</code>-lemma. You will notice that not everything is properly marked as a simp lemma. Feel free to make a PR.</p>\n<p>We don't usually mark non-equalities, like <code>list.pairwise.nil</code> as a simp-lemma. I don't think that <code>simp</code> solves things like <code>(0 : nat) &lt;= n</code>. <code>list.pairwise.nil</code>might be an exception, though: searching through mathlib, it's used quite frequently in <code>simp</code>.</p>",
        "id": 174241346,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566920538
    },
    {
        "content": "<p>Will do. Okay succ_pos was what I was thinking of also w.r.t. non-equality, but it seems like such lemmas marked simp are rare.</p>",
        "id": 174242238,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1566921101
    },
    {
        "content": "<p>I don't see any reason to limit <code>simp</code> to equations. In Isabelle, <code>simp</code> is often used to prove simple facts. Here is an example:</p>\n<div class=\"codehilite\"><pre><span></span>import data.nat.prime\nopen nat\n\nattribute [simp] nat.prime.ge_two\n\nexample (p : nat) (h : prime p) : p ≥ 2 :=\nby simp *\n</pre></div>\n\n\n<p>Better examples are that <code>abs (x^2)</code> and <code>abs (exp x)</code> should simplify to<code>x^2</code> and <code>exp x</code>, respectively, because the simplifier can show that these are nonnegative. In Isabelle, the simplifier is really good at proving theorems of the form <code>finite t</code>, where <code>t</code> is a subset of an arbitrary type, and this is really useful for conditional rewrites with sums and products. (It will also call <code>linarith</code> to dispel side conditions, which means that it can simplify <code>abs(x^2 + exp x + 7)</code>.)</p>\n<p>By the way, <code>library_search</code> fails on the example above because of the annoying issue with &gt;= and &lt;=. We should probably get in the habit of expressing all our theorems in the &lt;= form, in which case <code>library_search</code> works.</p>\n<div class=\"codehilite\"><pre><span></span>import data.nat.prime\nopen nat\n\n@[simp] theorem nat.prime.two_le (p : nat) (h : prime p) : 2 ≤ p :=\nnat.prime.ge_two h\n\nexample (p : nat) (h : prime p) : p ≥ 2 :=\nby library_search\n</pre></div>\n\n\n<p>But this doesn't replace the utility of using <code>simp</code> to do similar things. The point is that <code>simp</code> is a conditional simplifier, and so it is useful if it can show <code>p ≥ 2</code> when it is simplifying something like <code>p - 2 + 2</code> on <code>nat</code>.</p>",
        "id": 174373126,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1567005786
    }
]