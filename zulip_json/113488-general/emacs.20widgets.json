[
    {
        "content": "<p>As one of the emacs+Lean users (and, apparently, as the most recent to PR to <code>lean-mode</code>), I've been thinking a little about how to see some of those widgets that VSCode has.  I probably don't have any time to work on it myself in the short term, but maybe it's worth starting this topic to get some ideas how to do it.</p>\n<p>Here's one idea from a month ago:<br>\n<span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20talk.20on.20Zoom/near/201289405\">said</a>:</p>\n<blockquote>\n<p>It looks like emacs has a fairly extensible HTML renderer: <a href=\"https://github.com/emacs-mirror/emacs/blob/717b0341aafb9ae9b93395dba1192b12c4459f0c/lisp/net/shr.el\">https://github.com/emacs-mirror/emacs/blob/717b0341aafb9ae9b93395dba1192b12c4459f0c/lisp/net/shr.el</a>  It might be feasible to render widgets in emacs, as long as the markup is written carefully.</p>\n</blockquote>\n<p>I'm under the impression widgets are using javascript, which this package can't handle, unfortunately.  I remember seeing an emacs lisp implementation of javascript, but it seems like a rather big project to extend <code>shr.el</code> into a more fully-fledged web browser!</p>",
        "id": 207444424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597861892
    },
    {
        "content": "<p>Thinking a little outside the box, another way <code>lean-mode</code> could use widgets is to launch a web browser and communicate with it via a socket (maybe based right on top of <code>skewer-mode</code>).  Then, <code>lean-mode</code> would push widgets over to the browser to be rendered.  Clicking on things in-browser would send a message back to <code>lean-mode</code> to, for example, navigate to a definition, insert some text, or whatever other features I'm missing out on so don't know about them yet.</p>",
        "id": 207444436,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597861897
    },
    {
        "content": "<p>Widgets don't use javascript at all (unless you count the d3.js hacks people were dismissing in the other thread).  As long as you can execute some emacs code when the user clicks (presses enter?), then you shouldn't lose any features.</p>",
        "id": 207449306,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597864283
    },
    {
        "content": "<p>Oh, ok.  I made <code>lean-server-process-response</code> dump Lean server messages to a buffer, and I see some of the messages have widget entries (like <code>:widget (:column 11 :id 24227 :line 10)</code>), but there are a lot fewer than I expected.  Do you have to tell the Lean server to start sending more widget messages?  (And is there a specification for widgets somewhere?  I remember seeing a link to at least the Lean definitions of widgets at some point.)</p>",
        "id": 207455117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597867356
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/443\">lean#443</a></p>",
        "id": 207455292,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597867441
    },
    {
        "content": "<p>That's good to see the interaction is done via callbacks defined by <code>WidgetEventHandler</code>.</p>\n<p>But, looking at how styling works, the main complexity for the <code>shr.el</code> approach will be in translating all the HTML styling attributes and <code>tachyons.css</code> class names into emacs text styles, since it doesn't support CSS.  In case there are difficulties here, hopefully most of the styling is inessential for the UI of the widgets!</p>\n<p>The least-work approach seems to be using <code>skewer-mode</code> or one of the other packages that communicate with the web browser to render HTML.</p>\n<p>For a longer-term goal of getting widgets in emacs itself, I'd probably follow this plan:</p>\n<ol>\n<li>Write the emacs side of the widgets API.  (The \"controller\" in MVC, roughly.)</li>\n<li>Connect some<code>skewer-mode</code>-like browser-based UI to this.  This would help guide development for step 1.</li>\n<li>Once this all works, find another package (<code>shr.el</code>?) to render the elements within emacs.</li>\n</ol>\n<p>I think I'd be OK with an info view in an adjacent browser window, so I'm not sure I'd get to step 3, but I'd try to make sure step 1 is implemented in such a way that it'd be ready for whomever has the energy to figure it out.</p>",
        "id": 207457940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597868897
    }
]