[
    {
        "content": "<p>I just watched and enjoyed this talk: <a href=\"https://www.youtube.com/watch?v=HnOix9TFy1A\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=HnOix9TFy1A\">\"Type-Driven Program Synthesis\" by Nadia Polikarpova</a>. To a newbie like me, this kind of automation seems quite cool and mindblowing. Also, the way she described synthesizing programs as a search problem made me think of <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's <code>rewrite_search</code> demo.</p>\n<p>How much of this is useful / within reach for theorem proving? Presumably there are some restrictions (e.g. decidability?) on what this can be used on, but I haven't looked too hard at <a href=\"https://cseweb.ucsd.edu/~npolikarpova/publications/pldi16.pdf\" target=\"_blank\" title=\"https://cseweb.ucsd.edu/~npolikarpova/publications/pldi16.pdf\">the paper</a>. How different are \"refinement types\" from subtypes in lean? Here's <a href=\"https://bitbucket.org/nadiapolikarpova/synquid\" target=\"_blank\" title=\"https://bitbucket.org/nadiapolikarpova/synquid\">the \"Synquid\" repository</a> and <a href=\"http://comcom.csail.mit.edu/comcom/#Synquid\" target=\"_blank\" title=\"http://comcom.csail.mit.edu/comcom/#Synquid\">live demo</a>. I guess the work is from 2016, so maybe it's already been discussed pre-zulip?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"HnOix9TFy1A\" href=\"https://www.youtube.com/watch?v=HnOix9TFy1A\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=HnOix9TFy1A\"><img src=\"https://i.ytimg.com/vi/HnOix9TFy1A/default.jpg\"></a></div>",
        "id": 136245038,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540183759
    },
    {
        "content": "<p>I don't see why we couldn't do it in Lean</p>",
        "id": 136246221,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540186094
    },
    {
        "content": "<p>Refinement types are another way to express the same idea as subtypes, but the execution is different</p>",
        "id": 136246651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540187005
    },
    {
        "content": "<p>in particular, a refinement type is a subtype, in the sense that if <code>x : {v : T | stuff}</code> then <code>x : T</code>. Lean does not have subtyping in this sense</p>",
        "id": 136246700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540187050
    },
    {
        "content": "<p>Do we have coercion between a subtype and its carrier type?</p>",
        "id": 136246710,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540187103
    },
    {
        "content": "<p>In lean, this means you have to insert functions going back and forth, but since the VM erases proofs these functions disappear from generated code</p>",
        "id": 136246722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540187118
    },
    {
        "content": "<p>yes, there is a coe instance for subtype</p>",
        "id": 136246728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540187141
    },
    {
        "content": "<p>If you have <code>xs : list { v : T | stuff }</code>, I don't suppose <code>xs.map subtype.val</code> will reduce to <code>id</code>, will it?</p>",
        "id": 136246787,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540187260
    },
    {
        "content": "<p>unfortunately no. This is one place where I want compiler support for marking functions as \"VM identity functions\"</p>",
        "id": 136246832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540187319
    },
    {
        "content": "<p>same for <code>list.attach</code></p>",
        "id": 136246834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540187328
    },
    {
        "content": "<p>Haskell has the same trouble</p>",
        "id": 136246843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540187345
    }
]