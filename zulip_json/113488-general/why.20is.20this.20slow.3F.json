[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">multivariate_polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">associated</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">algebraic_closure</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">irred</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">big_ring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">irred</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">big_ideal</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">span</span> <span class=\"err\">$</span> <span class=\"err\">⋃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">irred</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">parsing took 0.154ms</span>\n<span class=\"cm\">elaboration of big_ideal took 7.53s</span>\n<span class=\"cm\">type checking of big_ideal took 9.17ms</span>\n<span class=\"cm\">decl post-processing of big_ideal took 11.1ms</span>\n<span class=\"cm\">compilation of algebraic_closure.big_ideal took 0.205ms</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">algebraic_closure</span>\n</pre></div>",
        "id": 134047650,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537091053
    },
    {
        "content": "<p>is there any way to make this faster?</p>",
        "id": 134047652,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537091057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 134047761,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537091284
    },
    {
        "content": "<p>This compiles in no time. I don't know the solution though.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">big_ideal</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">irred</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">span</span> <span class=\"err\">$</span> <span class=\"err\">⋃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">irred</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 134048125,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537092117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I suspect Chris's span is the wrong one, which means we will have to once again wait for the refactoring</p>",
        "id": 134049306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537094773
    },
    {
        "content": "<p>So what exactly is being refactored? Yeah I am putting \"research level\" coding on hold at the minute and thinking more about organisational stuff. The question of why it's slow is still of independent interest. What is causing the hold-up? Is it type class inference?</p>",
        "id": 134049357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537094904
    },
    {
        "content": "<p>if we specify that we're talking about the span as an ideal (which is this case) or that we're talking about the span as a k-module (which is not this case) then it would be more convenient</p>",
        "id": 134049370,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537094975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this another +1 for saying which ring we're talking about explicitly? </p>\n<p>I guess there is also now the option of making the \"ideal\" version of things into its own little interface -- e.g. ideal.span could mean \"the span of this subset of the ring R as an R-module\"</p>",
        "id": 134049729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537095775
    },
    {
        "content": "<p>I would love to be able to debug this sort of thing. Presumably the <code>by exact</code> insertion changes the elaboration strategy somehow. But in my mind this just raises a bunch of questions as to how it's working and how the change makes any difference.</p>",
        "id": 134049730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537095775
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">big_ideal&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"err\">$</span> <span class=\"err\">⋃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">irred</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">})</span>\n</pre></div>\n\n\n<p>is much quicker for me and seems to give the same answer.</p>",
        "id": 134049731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537095775
    },
    {
        "content": "<p>Stupid <code>#print notation ⋃</code> gives me a useless answer. I had to grep through the source code to find it's <code>set.Union</code>.</p>",
        "id": 134050085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537096633
    },
    {
        "content": "<p>So in future presumably <code>span</code> will take the ring as an explicit argument?</p>",
        "id": 134050127,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537096694
    },
    {
        "content": "<p>hopefully. Hey I got Kenny's version working quickly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">big_ideal&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">span</span> <span class=\"err\">$</span> <span class=\"err\">⋃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">irred</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 134050575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537097788
    },
    {
        "content": "<p>I'm hoping that <code>submodule</code> will as well.</p>",
        "id": 134050576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537097808
    },
    {
        "content": "<p>In your polynomial code, <code>module R (polynomial R)</code> takes precedence over <code>module (polynomial R) (polynomial R)</code> making it really difficult to talk about ideals of polynomial rings!</p>",
        "id": 134050582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537097850
    },
    {
        "content": "<p>Change it then. I didn't really think about that problem when I wrote it.</p>",
        "id": 134050723,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537098199
    },
    {
        "content": "<p>rofl</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">big_ideal&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">span</span> <span class=\"err\">$</span> <span class=\"err\">⋃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">irred</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">k</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>breaks it again -- apparently explictly telling Lean to use <code>big_ring k</code> rather than letting it work it out for itself is a bad idea. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what is going on here?</p>",
        "id": 134050770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537098324
    },
    {
        "content": "<p>Adding <code>instance : is_semiring_hom (mv_polynomial.C : k → big_ring k) := by apply_instance </code> speeds Kenny's original code up a bit.</p>",
        "id": 134050855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537098520
    }
]