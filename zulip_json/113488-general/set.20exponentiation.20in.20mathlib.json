[
    {
        "content": "<p>Is there any definition standing for <strong>set exponentiation</strong> in lean's mathlib?</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Function_(mathematics)#Set_exponentiation\">https://en.wikipedia.org/wiki/Function_(mathematics)#Set_exponentiation</a></p>",
        "id": 289031084,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1657358410
    },
    {
        "content": "<p><code>X → Y</code></p>",
        "id": 289031206,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657358559
    },
    {
        "content": "<p>I'm asking this, because I want to prove <code>Y ^ ∅ = { ∅ }</code> and <code>∅ ^ X  = ∅</code> .</p>",
        "id": 289031379,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1657358785
    },
    {
        "content": "<p>Or maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pi\">docs#set.pi</a></p>",
        "id": 289031532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657359029
    },
    {
        "content": "<p>Your second lemma is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pi_eq_empty\">docs#set.pi_eq_empty</a>, but your first lemma isn't true for that definition</p>",
        "id": 289031603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657359126
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.is_empty\">docs#function.is_empty</a> is one way you could state the second one. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.unique_of_is_empty\">docs#pi.unique_of_is_empty</a> is also a way to state the second one, although a bit harder to understand why</p>",
        "id": 289031614,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657359156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329691\">ZHAO Jinxiang</span> <a href=\"#narrow/stream/113488-general/topic/set.20exponentiation.20in.20mathlib/near/289031379\">said</a>:</p>\n<blockquote>\n<p>I'm asking this, because I want to prove <code>Y ^ ∅ = { ∅ }</code> and <code>∅ ^ X  = ∅</code> .</p>\n</blockquote>\n<p>They can't both be true :-)</p>",
        "id": 289032802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657360922
    },
    {
        "content": "<p>Lean uses type theory, not set theory: for example, the empty function is not equal to the empty type.</p>",
        "id": 289032835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657360973
    },
    {
        "content": "<p>What you probably want is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set.funs\">docs#Set.funs</a>. You can define set exponentiation as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">^</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Set.funs</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>and you can prove your theorems:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Y ^ ∅ = {∅}</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Set.ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_funs</span><span class=\"o\">,</span> <span class=\"n\">Set.is_func</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_singleton</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">Set.eq_empty</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.1</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">Set.mem_prod</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">Set.mem_empty</span> <span class=\"n\">_</span> <span class=\"n\">h.some_spec.some</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">Set.subset_def</span><span class=\"o\">,</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Set.mem_empty</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>∅ ^ X  = ∅</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">^</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Set.ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_funs</span><span class=\"o\">,</span> <span class=\"n\">Set.is_func</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">Set.eq_empty</span><span class=\"o\">,</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">b</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">Set.mem_prod</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Set.mem_empty</span> <span class=\"n\">_</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n    <span class=\"n\">subst</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">¬</span><span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">Set.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h.elim</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Set.mem_empty</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">Set.mem_empty</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">Set.mem_empty</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 289034371,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657363205
    },
    {
        "content": "<p>should you not instead do it by giving <code>Set</code> a <code>has_pow</code> instance? (also, Zhao, note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set\">docs#Set</a> is what you do _solely_ for set theory - for normal mathematics, you'd use a type)</p>",
        "id": 289037696,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657367852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/set.20exponentiation.20in.20mathlib/near/289037696\">said</a>:</p>\n<blockquote>\n<p>should you not instead do it by giving <code>Set</code> a <code>has_pow</code> instance?</p>\n</blockquote>\n<p>Of course, <code>has_pow</code> instance would be better, but I can't make it work for some reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">Set</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Set.funs</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">Y</span> <span class=\"c1\">-- failed to synthesize type class instance for `has_pow Set Set`</span>\n</code></pre></div>\n<p>Maybe I made some silly mistake?</p>",
        "id": 289038721,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657369311
    },
    {
        "content": "<p>it's a universe issue, <code>funs</code> is only defined on the same universe so Lean gets confused unless you specify everything:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Set.funs</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">Y</span>\n</code></pre></div>",
        "id": 289038881,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657369517
    },
    {
        "content": "<p>(the <code>.{u}</code>s are a bit redundant on the first one, but they're there to show a point)</p>",
        "id": 289038889,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657369549
    },
    {
        "content": "<p>Thinking about it, maybe this is a special case when local notation is better. Defining a <code>has_pow</code> instance would require type annotations for <code>∅</code> and <code>{...}</code> whenever Lean can't unambiguously infer the <code>Set</code> type for <code>has_pow</code> and it will make theorem statements uglier. And besides that, ZFC theory is pretty much exclusive regarding the rest of mathlib, so when working in set theory we usually don't need other <code>has_pow</code> instances anyway.</p>",
        "id": 289039259,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657370049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/set.20exponentiation.20in.20mathlib/near/289037696\">said</a>:</p>\n<blockquote>\n<p>should you not instead do it by giving <code>Set</code> a <code>has_pow</code> instance? (also, Zhao, note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set\">docs#Set</a> is what you do _solely_ for set theory - for normal mathematics, you'd use a type)</p>\n</blockquote>\n<p>More specifically, it's what you use solely for <em>ZFC set theory</em>. I don't think it's even used in mathlib outside of the file it's defined in.</p>",
        "id": 289049009,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657382285
    },
    {
        "content": "<p>Yeah haha, <code>set_theory/zfc.lean</code> is a leaf file</p>",
        "id": 289049205,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657382506
    }
]