[
    {
        "content": "<p>I've got the following context/goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_subring</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">a_property</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">b_property</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">S</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n       <span class=\"n\">a</span>\n       <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n       <span class=\"n\">b</span>\n       <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 129856041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531898074
    },
    {
        "content": "<p>For the record, here is my silly attempt to prove that subrings of comm rings are comm_ring:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 129856049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531898115
    },
    {
        "content": "<p>Somehow Lean turns R into a <code>semiring</code>, instead of a <code>comm_semigroup</code>... And therefore I can't apply <code>mul_comm</code>.</p>",
        "id": 129856089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531898170
    },
    {
        "content": "<p>For even more record:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_comm</span>      <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span>  <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">left_distrib</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">right_distrib</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">add_group</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">monoid</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>That was nice and easy... (and maybe with Scott's tactics it will become even easier!) but if I substitute <code>mul</code> for <code>add</code> it borks out.</p>",
        "id": 129856104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531898261
    },
    {
        "content": "<p>Fixed. Lean starts crying if I tell it that R is a ring and a comm_ring.</p>",
        "id": 129856212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531898507
    },
    {
        "content": "<p>And I understand why.</p>",
        "id": 129856214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531898515
    },
    {
        "content": "<p>It just means that I cannot use the <code>variables {R : Type} [ring R]</code> from the top of my file.</p>",
        "id": 129856255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531898549
    },
    {
        "content": "<p>If you put <code>{R} [comm_ring R]</code> in the statement instead of just <code>[comm_ring R]</code> it will override the <code>R</code> in the enclosing section</p>",
        "id": 129856779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531899669
    },
    {
        "content": "<p>OTOH, then I still can't use the <code>variables {S : set R} [is_subring S]</code> from the top of my file.</p>",
        "id": 129856844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531899762
    },
    {
        "content": "<p>What I would need is to somehow tell lean: \"Hey, in addition to all the other hypotheses, please extend the ring instance into a comm_ring instance.\"</p>",
        "id": 129856857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531899802
    },
    {
        "content": "<p>I don't understand what you are doing. Haven't you already done that in <a href=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/subring.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/subring.lean\">https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/subring.lean</a>?</p>",
        "id": 129857156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531900273
    },
    {
        "content": "<p>Not the bit on commutative rings.</p>",
        "id": 129857310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531900488
    },
    {
        "content": "<p>Only plain old rings</p>",
        "id": 129857317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531900506
    }
]