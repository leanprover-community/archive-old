[
    {
        "content": "<p>Why is it that in the following code <code>apply_instance</code> works ok in the proof of <code>rabbit</code>, but not in <code>cow</code>? The only difference is the presence of a couple of <code>intros</code>? This is presenting a bit of a stumbling block, is there relevant documentation that explains what's going on?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidable_precompose</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rabbit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">sum.inl</span><span class=\"o\">)</span>\n <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">sum.inl</span><span class=\"o\">)</span>\n <span class=\"o\">:=</span>\n <span class=\"kd\">begin</span>\n   <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">apply_instance</span>\n <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252789816,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1631281910
    },
    {
        "content": "<p>Instances are only recognized as such when they are left of the colon, as in <code>rabbit</code>. If you want to use instances that were introduced in the course of a proof, use <code>resetI</code>.</p>",
        "id": 252790212,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631282053
    },
    {
        "content": "<p>Reason: performance, there is a cache somewhere that is \"frozen\" once the proof starts.</p>",
        "id": 252790716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631282242
    },
    {
        "content": "<p>Ah, very good. And also very impenetrable. Is this somewhere in the docs?</p>",
        "id": 252790792,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1631282279
    },
    {
        "content": "<p>So what would be the idomatic way of proving <code>cow</code>?</p>",
        "id": 252790900,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1631282308
    },
    {
        "content": "<p>Beginning of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a>, for instance</p>",
        "id": 252790921,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631282316
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics\">https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics</a></p>",
        "id": 252790946,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631282323
    },
    {
        "content": "<p>So if I have this right, the trick is to add <code>I</code> strategically in the right place.</p>",
        "id": 252791119,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1631282387
    },
    {
        "content": "<p>replacing your <code>intros</code> with <code>introsI</code> should do the trick.</p>",
        "id": 252791246,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631282416
    },
    {
        "content": "<p>Uhm, <code>unknown identifier 'resetI'</code>. Are we talking Lean 3 or 4? I am on Lean 3.</p>",
        "id": 252791516,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1631282514
    },
    {
        "content": "<p>We're talking Lean 3. Are you using mathlib? Otherwise, there is a core version, but its syntax is less friendly.</p>",
        "id": 252791663,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631282563
    },
    {
        "content": "<p>That's it, we're not using <code>mathlib</code>. Although we might as well. Thanks.</p>",
        "id": 252791805,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1631282626
    },
    {
        "content": "<p>Otherwise, you may try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unfreeze_local_instances</span><span class=\"o\">,</span>\n<span class=\"n\">freeze_local_instances</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 252791938,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631282666
    },
    {
        "content": "<p>Actually, we are using <code>mathlib</code>. The machine sees <code>tactic.unfreeze_local_instances</code> but not <code>unfreeze_local_instances</code>, and knows nothing about <code>introsI</code>. Should I be <code>import</code>-ing something?</p>",
        "id": 252792471,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1631282881
    },
    {
        "content": "<p><code>import tactic</code>, maybe?</p>",
        "id": 252792634,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631282919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_precompose</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rabbit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">sum.inl</span><span class=\"o\">)</span>\n <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">sum.inl</span><span class=\"o\">)</span>\n <span class=\"o\">:=</span>\n <span class=\"kd\">begin</span>\n   <span class=\"n\">introsI</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">apply_instance</span>\n <span class=\"kd\">end</span>\n</code></pre></div>\n<p>works for me</p>",
        "id": 252792738,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631282971
    },
    {
        "content": "<p>I think <code>unfreeze_local_instances</code> is not in the interactive tactic namespace, I've always written <code>tactic.unfreeze_local_instances</code> (until the <code>I</code> stuff came along)</p>",
        "id": 252792782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631282994
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.unfreezingI\">docs#tactic.interactive.unfreezingI</a> is the preferred way to do <code>unfreeze_local_instances ... freeze_local_instances</code>. (This instance cache business is indeed very annoying. I believe Lean 4 thankfully dropped it.)</p>",
        "id": 252807765,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1631289144
    }
]