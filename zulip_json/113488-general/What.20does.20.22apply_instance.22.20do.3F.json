[
    {
        "content": "<p>I'm looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/order/filter/ultrafilter.html#ultrafilter.unique\">https://leanprover-community.github.io/mathlib_docs/order/filter/ultrafilter.html#ultrafilter.unique</a> and it has an argument <code>(hne : g.ne_bot . \"apply_instance\")</code>. What exactly is this doing?</p>",
        "id": 267469167,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641834697
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_instance\">tactic#apply_instance</a></p>",
        "id": 267469206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641834719
    },
    {
        "content": "<p>it will try to apply the tactic <code>apply_instance</code> if you dont provide a term for that variable.</p>",
        "id": 267469272,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641834733
    },
    {
        "content": "<p>But I suspect your question is actually \"what does <code>some_type . \"some_tactic\"</code> mean\", which is syntax for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/auto_param\">docs#auto_param</a></p>",
        "id": 267469318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641834755
    },
    {
        "content": "<p>So if I don't supply the theorem a <code>hne</code>, it's going to try to get one via instance search?</p>",
        "id": 267469885,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641835065
    },
    {
        "content": "<p>yep</p>",
        "id": 267469915,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641835081
    },
    {
        "content": "<p>I see.</p>",
        "id": 267469996,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641835118
    },
    {
        "content": "<p><code>auto_param</code>s are heavily used in the category theory library with the tactic <code>obviously</code> (which is essentially <code>tidy</code>) to automatically prove that simple diagrams commute. It's very useful.</p>",
        "id": 267470002,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641835125
    },
    {
        "content": "<p>I think I've seen it used to supply some default proofs that the composition in a category is associative and that the identity works as expected.</p>",
        "id": 267470133,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641835203
    },
    {
        "content": "<p>Yep: <code>(f ≫ g) ≫ h = f ≫ g ≫ h) . \"obviously\"</code></p>",
        "id": 267470248,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641835276
    },
    {
        "content": "<p>right, so if you omit that field, then lean will try to use prove associativity by itself using the tactic <code>obviously</code></p>",
        "id": 267470398,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641835344
    },
    {
        "content": "<p>Yeah, that's pretty cool.</p>",
        "id": 267470537,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641835419
    },
    {
        "content": "<p><code>(hne : g.ne_bot . \"apply_instance\")</code> is particularly unusual though since <code>[hne : g.ne_bot]</code> means almost the same thing</p>",
        "id": 267479327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641839107
    }
]