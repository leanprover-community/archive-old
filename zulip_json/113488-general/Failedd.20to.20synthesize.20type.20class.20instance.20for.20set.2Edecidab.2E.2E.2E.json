[
    {
        "content": "<p>In the following example,  I don't understand why lean failed to synthesize type class instance for <code>decidable (x ∈ s)</code> ?<br>\nWhat did I miss?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"err\">∅</span>\n</pre></div>",
        "id": 151749704,
        "sender_full_name": "AHan",
        "timestamp": 1544754525
    },
    {
        "content": "<p><code>if P then _ else _</code> requires <code>P</code> to be <code>decidable</code>, otherwise how will lean know which branch to take? <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\">Here's the discussion in TPiL</a>. One thing you could do is use </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n</pre></div>",
        "id": 151751109,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1544756679
    },
    {
        "content": "<p>Another way is to write the set without an if statement, i.e.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 151751350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544757117
    },
    {
        "content": "<p>Thanks a lot! <br>\nBoth solutions are nice!!</p>",
        "id": 151759037,
        "sender_full_name": "AHan",
        "timestamp": 1544771458
    },
    {
        "content": "<p>but the latter is nicer</p>",
        "id": 151761275,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544775285
    }
]