[
    {
        "content": "<p>I just managed to crash Lean, and realized it's been quite a while since the last time!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">wlog</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 131243767,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533914160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> This isn't really your problem in the end, but maybe it's possible to work around in <code>wlog</code>?</p>",
        "id": 131243856,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533914210
    },
    {
        "content": "<p>Oh nice! I absolutely agree -- Lean has been super-stable since they fixed some memory leak several months ago, it's been a joy to use. I do get the occasional segfault, almost always because my input file is garbage (e.g. I'm deleting hundreds of lines of a file and Lean just started to read a file which starts in the middle of a proof, or possibly even the middle of a word), and furthermore I've never been able to reproduce. It's very rare to get a reproducible segfault nowadays. I can reproduce here BTW.</p>",
        "id": 131244268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533914578
    },
    {
        "content": "<p>Found it</p>\n<div class=\"codehilite\"><pre><span></span>open tactic\nexample (x : ℕ) : true :=\nby do x ← get_local `x, revert_lst [x, x]\n</pre></div>",
        "id": 131833394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533918407
    },
    {
        "content": "<p>don't revert the same variable twice, I guess</p>",
        "id": 131833409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533918428
    },
    {
        "content": "<p>I remember my mother telling me that as a child</p>",
        "id": 131833419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533918451
    },
    {
        "content": "<p>note that using <code>revert x</code> twice causes a regular error in the second call</p>",
        "id": 131833424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533918465
    },
    {
        "content": "<p><code>revert_lst</code> has no docstring :-(</p>",
        "id": 131833506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533918560
    },
    {
        "content": "<p>presumably it reverts a list</p>",
        "id": 131833511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533918575
    },
    {
        "content": "<p>or a <code>lst</code></p>",
        "id": 131833614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533918671
    },
    {
        "content": "<blockquote>\n<p>don't revert the same variable twice, I guess</p>\n</blockquote>\n<p>I'll do what I want!</p>",
        "id": 131842254,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533929752
    },
    {
        "content": "<p>another wloggy segfault:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">wlog</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"c1\">-- segv</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(as you can guess this is the first time I used wlog, I was just trying things out)</p>",
        "id": 133463161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536261519
    },
    {
        "content": "<p>Dang! I don't remember putting segfault as one of the features</p>",
        "id": 133463196,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536261569
    },
    {
        "content": "<p>Can you edit the <code>mathlib</code> sources?</p>",
        "id": 133463264,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536261610
    },
    {
        "content": "<p>fixed</p>",
        "id": 133464351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536262834
    },
    {
        "content": "<p>What was the issue?</p>",
        "id": 133464363,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536262845
    },
    {
        "content": "<p>it triggered the <code>x &lt;= y</code> special case and assumed <code>n + n</code> was a variable</p>",
        "id": 133464406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536262879
    },
    {
        "content": "<p>I am not sure what happened after that, but possibly this got passed into <code>revert</code></p>",
        "id": 133464424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536262910
    },
    {
        "content": "<p>that's what caused the last segfault, at least</p>",
        "id": 133464482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536262939
    },
    {
        "content": "<p>I see. That was not a source of segfault I thought of</p>",
        "id": 133464486,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536262940
    },
    {
        "content": "<p>Did you add Kevin's example to the test suite?</p>",
        "id": 133464510,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536262958
    },
    {
        "content": "<p>I think <code>wlog</code> parsing is currently way too complicated. It should be broken up and documented</p>",
        "id": 133464520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536262982
    },
    {
        "content": "<p>That makes sense, I really don't understand the tactic anymore.</p>",
        "id": 133464532,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536263015
    },
    {
        "content": "<p>This test fails now:</p>\n<div class=\"codehilite\"><pre><span></span>example {x y z : ℕ} : true :=\nbegin\n  suffices : false, trivial,\n  wlog h : x ≤ y + z,\n  { guard_target x ≤ y + z ∨ x ≤ z + y,\n    admit },\n  { guard_hyp h := x ≤ y + z,\n    guard_target false,\n    admit }\nend\n</pre></div>\n\n\n<p>what the heck is this supposed to do?</p>",
        "id": 133464737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536263195
    },
    {
        "content": "<p>Can you show the state right after <code>wlog</code>?</p>",
        "id": 133464783,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536263255
    },
    {
        "content": "<p>it fails</p>",
        "id": 133464784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536263262
    },
    {
        "content": "<p>the error is <code>To generate cases at least two permutations are required, i.e. `using [x y, y x]` or exactly 0 or 2 variables</code> but the problem is that the given pattern <code>x ≤ y + z</code> has 3 variables</p>",
        "id": 133464841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536263296
    },
    {
        "content": "<p>It tries to prove false just to make sure that no call to <code>trivial</code> or assumption finishes the goal before we can see the result</p>",
        "id": 133464866,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536263324
    },
    {
        "content": "<p>Ah I see. That's from when we only considered two variables</p>",
        "id": 133464900,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536263372
    },
    {
        "content": "<p>It guessed <code>x</code> and <code>y</code>.</p>",
        "id": 133464914,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536263389
    },
    {
        "content": "<p>My question is, what is this supposed to do in the first place? It used to just take the last two variables and permute them, as you can see from the asserted target</p>",
        "id": 133464971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536263414
    },
    {
        "content": "<p>I'm surprised it hasn't failed before</p>",
        "id": 133464977,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536263420
    },
    {
        "content": "<p>It was previously just matching the list of variables against <code>(x :: y :: _)</code> i.e. &gt;= 2 vars, take the first 2</p>",
        "id": 133464999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536263459
    },
    {
        "content": "<p>I changed this to <code>[x, y]</code> and now this test fails</p>",
        "id": 133465010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536263473
    },
    {
        "content": "<p>Why are you changing it to <code>[x,y]</code>?</p>",
        "id": 133465041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536263516
    },
    {
        "content": "<p>You were the one suggesting we guess the last two variables of the pattern.</p>",
        "id": 133465126,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536263587
    },
    {
        "content": "<p>No, that's what it was doing before I touched it</p>",
        "id": 133465136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536263600
    },
    {
        "content": "<p>I don't understand why the code is written that way, but there is a test asserting this behavior</p>",
        "id": 133465154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536263641
    },
    {
        "content": "<p>I'm looking at master right now and what I see is <code>(x :: y :: _)</code>, not <code>[x, y]</code></p>",
        "id": 133465303,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536263784
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/tactic/wlog.lean#L203\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/tactic/wlog.lean#L203\">https://github.com/leanprover/mathlib/blob/master/tactic/wlog.lean#L203</a></p>",
        "id": 133465862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536264340
    },
    {
        "content": "<p>My mistake, I must have done something wrong</p>",
        "id": 133466307,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536264758
    },
    {
        "content": "<p>What happens if you switch it back to <code>(x :: y :: _)</code>?</p>",
        "id": 133466314,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536264776
    },
    {
        "content": "<p>then it works, although the behavior in that case is peculiar</p>",
        "id": 133466399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536264889
    },
    {
        "content": "<p>it just permutes the last two variables discovered in the term, which is a bit weirdly nondeterministic</p>",
        "id": 133466434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536264946
    },
    {
        "content": "<p>What would you expect it to do in this case?</p>",
        "id": 133466559,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536265056
    },
    {
        "content": "<p>fail, or do all permutations of the n variables</p>",
        "id": 133466711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536265190
    },
    {
        "content": "<p>permutations are now in mathlib. Does that help?</p>",
        "id": 133466801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536265237
    },
    {
        "content": "<p>Ooh, wait. They were already for a long time... it is the signs that are new.</p>",
        "id": 133466835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536265264
    },
    {
        "content": "<p>we already had <code>list.permutations</code></p>",
        "id": 133466842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536265274
    },
    {
        "content": "<p>I'm not sure if you recall but we have had that conversation before. You were in favor of guessing the variables, I was in favor of requiring that the user specify them</p>",
        "id": 133467037,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536265448
    },
    {
        "content": "<p>Actually both options are available here</p>",
        "id": 133467099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536265513
    },
    {
        "content": "<p>honestly I have no idea why it's so complicated. 2 variables seems to be special cased in the parsing, so <code>wlog h : x ≤ y + z using x y z</code> just fails (previously it would just permute <code>x</code> and <code>y</code>)</p>",
        "id": 133467319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536265703
    },
    {
        "content": "<p>Part of the problem is that I don't know the specification of the tactic, and the code is so ad hoc it's hard to tell what is intended and what is accident</p>",
        "id": 133467406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536265777
    },
    {
        "content": "<p>It's probably that I started it intending to support only two variables and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> probably didn't want to disturb too much</p>",
        "id": 133467904,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536266130
    },
    {
        "content": "<p>Do you want to settle on a specification now?</p>",
        "id": 133467916,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536266149
    },
    {
        "content": "<p>I'm trying to get one out of the docstring now</p>",
        "id": 133467987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536266185
    },
    {
        "content": "<p>There are I guess 24 combinations resulting from the parse:</p>\n<div class=\"codehilite\"><pre><span></span>wlog h? (: pat)? (:= r)? (using x y z)?\nwlog h? (: pat)? (:= r)? (using [x y z, z y x])?\n</pre></div>\n\n\n<ul>\n<li><code>h</code> is just a name. If it is omitted, the default name is <code>case</code> (Although from the code it looks like if <code>r</code> is the name of a local constant then it is renamed to <code>h</code>?)</li>\n</ul>",
        "id": 133468471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536266637
    },
    {
        "content": "<ul>\n<li>If <code>pat</code> and <code>r</code> are both omitted there is an error</li>\n<li>If <code>pat</code> is given but not <code>r</code> it becomes a subgoal</li>\n<li>If <code>r</code> is given but not <code>pat</code> it is reconstructed as the first disjunct of <code>r</code>'s type</li>\n</ul>",
        "id": 133468600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536266764
    },
    {
        "content": "<ul>\n<li>If <code>using</code> list is omitted it is inferred as the set of distinct variables in <code>pat</code></li>\n<li>If <code>using</code> is a list of variables then all permutations of those variables are considered</li>\n<li>If <code>using</code> is a nonempty list of permutations then the first permutation is considered as the list of variables (and the rest must actually be permutations)</li>\n<li>If <code>using</code> is an empty list of permutations it is treated as omitted</li>\n</ul>",
        "id": 133468776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536266955
    },
    {
        "content": "<p>Oh, I think this is the justification for the last two variables thing:</p>\n<div class=\"codehilite\"><pre><span></span>(4) `wlog : R x y using x y` and `wlog : R x y`\n  Produces the case `R x y ∨ R y x`. If `R` is ≤, then the disjunction discharged using linearity.\n  If `using x y` is avoided then `x` and `y` are the last two variables appearing in the\n  expression `R x y`. -/\n</pre></div>",
        "id": 133469008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267173
    },
    {
        "content": "<p>Yes, I think that was the entirety of the docstring before Johannes worked on <code>wlog</code></p>",
        "id": 133469052,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536267222
    },
    {
        "content": "<p>I guess this is to allow for when the relation is itself parameterized in some variables</p>",
        "id": 133469109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267252
    },
    {
        "content": "<p>I wonder whether we can use type information to eliminate some permutations</p>",
        "id": 133469133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267284
    },
    {
        "content": "<p>I think we can map those notations to a set of core parameters. Sometimes they are specified by the user, sometimes they have to be guessed. Working from there, we should say how they are guessed and what is done with those core parameters.</p>",
        "id": 133469134,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536267284
    },
    {
        "content": "<p>There is already a notion of core parameters, I think, which are used in <code>tactic.wlog</code> (noninteractive)</p>",
        "id": 133469179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267324
    },
    {
        "content": "<p>Ah good so now we're only struggling with parsing / guessing</p>",
        "id": 133469201,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536267350
    },
    {
        "content": "<p>Actually <code>R x y</code> was just a way of writing <code>x ≤ y</code> while not involving a specific relation.</p>",
        "id": 133469273,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536267384
    },
    {
        "content": "<p>Right, the parser is the behemoth</p>",
        "id": 133469274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267387
    },
    {
        "content": "<p>I think there was some example where a relation like <code>x = y [mod n]</code> came up</p>",
        "id": 133469287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267415
    },
    {
        "content": "<p>but even <code>has_le.le</code> can use variables, like the type or instance - we don't want to permute these</p>",
        "id": 133469307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267461
    },
    {
        "content": "<p>That's true</p>",
        "id": 133469395,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536267526
    },
    {
        "content": "<p>I was thinking we can use permutations for which the permuted relation is well typed, but this has exponential growth for large relations</p>",
        "id": 133469448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267587
    },
    {
        "content": "<p>Alternatively, we can require that permuted variables have the same type as each other, but maybe there are counterexamples where you permute a&lt;-&gt;b and c&lt;-&gt;d where <code>c : T a</code> and <code>d : T b</code></p>",
        "id": 133469562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267665
    },
    {
        "content": "<p>then again, in this case you will certainly be providing the permutation list explicitly so we don't have to guess it</p>",
        "id": 133469606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536267712
    },
    {
        "content": "<p>actually, <code>tactic.wlog</code> is also doing some fancy footwork, and it has no segfault protection of its own</p>",
        "id": 133470142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536268262
    },
    {
        "content": "<p>The signature is</p>\n<div class=\"codehilite\"><pre><span></span>meta def wlog (vars&#39; : list expr) (h_cases fst_case : expr) (perms : list (list expr)) : tactic unit\n</pre></div>\n\n\n<p>where <code>vars'</code> is the set of variables being permuted, <code>h_cases</code> is a local constant with the proof of the disjunction, <code>fst_case</code> is the pattern (with variables in the same order as the first permutation), and <code>perms</code> is a list of permutations of <code>vars'</code></p>",
        "id": 133470276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536268429
    },
    {
        "content": "<p>Is there a case for splitting off the case of two variables and having two tactics? What I actually want to do is <code>wlog degree f ≤ degree g</code>. Is that not possible? (my goal is symmetric in the polynomials <code>f</code> and <code>g</code>).</p>",
        "id": 133471151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536269313
    },
    {
        "content": "<p>It is possible, indeed the default behavior of wlog should do what you want</p>",
        "id": 133471336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536269488
    },
    {
        "content": "<p>if not, just put <code>using f g</code> at the end</p>",
        "id": 133471354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536269505
    },
    {
        "content": "<p>This example blows my mind:</p>\n<div class=\"codehilite\"><pre><span></span>  have h : p n i ∨ p i m ∨ p m i, from sorry,\n  wlog : p n i := h using n m i,\n</pre></div>\n\n\n<p>It infers the permutation list <code>[n m i, i m n, m i n]</code></p>",
        "id": 133471434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536269550
    },
    {
        "content": "<p>Oh! The example (and tactic) is actually broken, the test doesn't actually finish the proof so it doesn't notice</p>",
        "id": 133471727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536269890
    },
    {
        "content": "<p>It's sometimes baffling how much we can live with bugs in proof tactics</p>",
        "id": 133472124,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536270387
    }
]