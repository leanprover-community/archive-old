[
    {
        "content": "<p>Not sure if there's something like this in another stream - apologies if there is.  What tactics would you like to see written? (By tactics I also include broader metaprogramming constructs, not necessarily those which you would use to discharge proof obligations.)</p>",
        "id": 157348532,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1549023159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span>  told me he wanted to see a tactic to list lemmas in your current file which are unused by other lemmas. This helps in building theories which avoid spurious lemmas.</p>",
        "id": 157348681,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1549023374
    },
    {
        "content": "<p>The big missing tactics for me are <code>metis</code> and <code>omega</code>. <code>metis</code> is important for sledgehammer like operation, and is also useful as a standalone tool for fiddly goals. For <code>omega</code> there are various versions of <code>cooper</code> by Seul that can fill this role, but there is some work to be done to make them usable without a complicated setup and/or a PhD</p>",
        "id": 157348715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549023447
    },
    {
        "content": "<p>Most of the little tactics I can think of are already written and in mathlib</p>",
        "id": 157348793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549023492
    },
    {
        "content": "<p>Simon and I have been discussing the possibility of global analysis for linting and things, which could address your unused lemmas example</p>",
        "id": 157348828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549023570
    },
    {
        "content": "<p>but we are somewhat limited by what lean will give us here, unless we use an external tool like the olean viewer</p>",
        "id": 157348911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549023625
    },
    {
        "content": "<p>How about documentation generation? Is there something for that?</p>",
        "id": 157348921,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1549023645
    },
    {
        "content": "<p>I'm not entirely sure what the story is there. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Lean has some support for a leandoc tool but it's not all there; do you know what the commandline option actually does currently? Is lean 4 any different here?</p>",
        "id": 157348996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549023735
    },
    {
        "content": "<p>I've never used it. This should really be an external tool written in Lean in Lean 4.</p>",
        "id": 157349124,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1549023907
    },
    {
        "content": "<p>How about a tactic to convert term-style proofs into tactic style proofs?</p>",
        "id": 157360566,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1549034701
    },
    {
        "content": "<p>The recent move of mathlib removed the old community-wiki on github. I don't know where to find it now, but it contained a couple of such wishlists.</p>",
        "id": 157361590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549035511
    },
    {
        "content": "<p>Are you referring to this: <a href=\"https://github.com/leanprover-fork/mathlib-backup/wiki\" target=\"_blank\" title=\"https://github.com/leanprover-fork/mathlib-backup/wiki\">https://github.com/leanprover-fork/mathlib-backup/wiki</a></p>",
        "id": 157364387,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549037960
    },
    {
        "content": "<p>I think we could move it to <code>leanprover-community</code></p>",
        "id": 157364641,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549038136
    },
    {
        "content": "<p>Aaah, yes that's it. Should we just copy-paste it? Or is there some history that can/should be preserved?</p>",
        "id": 157371140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549043690
    },
    {
        "content": "<p>It can be preserved, I don't know if we want to. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You seem to have authored a wiki page with nothing on it on <code>leanprover-community/mathlib</code>. Do you mind if we overwrite it with the one we have in the backup?</p>",
        "id": 157373191,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549045431
    },
    {
        "content": "<p>That's news to me. Go ahead and overwrite it, I don't think I have touched the wiki</p>",
        "id": 157380444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549050804
    },
    {
        "content": "<p>Thanks! I just did. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> you should be able to see what you had before. Let me know if there's anything else to move from the old <code>leanprover-community/mathlib</code> (now located at <code>leanprover-fork/mathlib-backup</code>) to the new <code>leanprover-community/mathlib</code> (formerly <code>leanprover/mathlib</code>)</p>",
        "id": 157384217,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549053816
    },
    {
        "content": "<p>Here are another idea:<br>\n<code>symmetry at H</code> — replace the equality <code>H</code> with <code>H.symm</code> in the context</p>",
        "id": 157553473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549311442
    },
    {
        "content": "<p>I know this can be done with <code>replace</code>, but I think that it is intuitive to try this with <code>symmetry</code>, and it might be nice for beginners.</p>",
        "id": 157553509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549311477
    },
    {
        "content": "<p>This one is a really nice exercise for you: read the tactic writing tutorial and write it</p>",
        "id": 157553510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549311478
    },
    {
        "content": "<p>I agree. So let me try it once I finish my bureaucracy tomorrow.</p>",
        "id": 157553568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549311499
    },
    {
        "content": "<p>Hmmm, I guess there is a little bit of trouble, namely that <code>symmetry</code> is locked into core.</p>",
        "id": 157554153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549311962
    },
    {
        "content": "<p>Call it <code>symm</code></p>",
        "id": 157554518,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549312228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">spoilers</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">.</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;at&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">exp</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">typ</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">exp</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">get_app_fn</span> <span class=\"n\">typ</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">symm_for</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">const_name</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">r</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"n\">none</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">r</span> <span class=\"err\">%%</span><span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n   <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;symmetry&#39; failed, target is not a relation with symmetry.&quot;</span>\n   <span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 157554703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549312395
    },
    {
        "content": "<p>now make it work with arbitrary <code>loc</code>s</p>",
        "id": 157554737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549312428
    },
    {
        "content": "<p>what does that mean?</p>",
        "id": 157554802,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549312453
    },
    {
        "content": "<p>potentially several assumptions at the same time, and also the goal</p>",
        "id": 157554815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549312471
    },
    {
        "content": "<p>oh man</p>",
        "id": 157554824,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549312480
    },
    {
        "content": "<p>it's not difficult</p>",
        "id": 157554846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549312500
    },
    {
        "content": "<p>I always felt bad that I could not teach Chris and Kenny (or indeed anyone at Imperial) tactics, but they seem to have picked it up for themselves. Chris PR'ed a tactic last week :D</p>",
        "id": 157557483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549314591
    },
    {
        "content": "<p>I wouldn't say I've picked it up that well. It was a very straightforward tactic. I hope to do something less trivial at some point.</p>",
        "id": 157558769,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549315752
    },
    {
        "content": "<p>and I basically copied my tactic from the original one and modified it a tad</p>",
        "id": 157559955,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549316793
    },
    {
        "content": "<p>That's how these things start.</p>",
        "id": 157588341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549351937
    },
    {
        "content": "<p>Would it be useful to have a tactic that transforms a quantified expression into prenex normal form? Is that feasible?</p>",
        "id": 211853223,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601509047
    },
    {
        "content": "<p>It's probably just a bunch of the right simp lemmas. Shouldn't be very hard at all. You can set up a <code>prenex</code> simp attribute and <code>simp with prenex</code> should put things in that form. You just have to work out the lemmas to use.</p>",
        "id": 211855845,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1601511329
    },
    {
        "content": "<p>I was thinking of doing it from scratch as an exercise, but it is good to know it is feasible first :)</p>",
        "id": 211856063,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601511548
    }
]