[
    {
        "content": "<p>The <code>matrix</code> namespace in mathlib contains  some definitions that are actually about vectors. For example, <code>matrix.dot_product</code>. I guess this is mainly because vectors don't have their own type but are represented as <code>[fintype m] → m → α</code>.  Is there a good reason why is there no vector type defined to be <code>[fintype m] → m → α</code>? There is a type called <code>vector</code>, defined as <code>{l // l.length = n}</code>, but I don't think it is used very much.</p>",
        "id": 269768824,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1643390082
    },
    {
        "content": "<p>Given that they are just functions, there is no need.</p>",
        "id": 269769291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643390262
    },
    {
        "content": "<p>Wouldn't it be nice to be able to write <code>x.dot_product</code> etc.?</p>",
        "id": 269769506,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1643390326
    },
    {
        "content": "<p>That's what notation is for! No need to have us maintain yet another type.</p>",
        "id": 269769686,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643390391
    },
    {
        "content": "<p>I see, I didn't realize that too many types can become a problem. What about <code>set</code>? Do you think it should also be replaced by <code>α → Prop</code>?</p>",
        "id": 269770083,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1643390535
    },
    {
        "content": "<p>It <em>is</em> <code>α → Prop</code>.</p>",
        "id": 269770245,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643390590
    },
    {
        "content": "<p>But yes we've made it separate both because it's pretty foundational and also because we can overload some operations using this type synonym.</p>",
        "id": 269770333,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643390626
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/4406\">#4406</a></p>",
        "id": 269809648,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643407706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> In case it's interesting, <a href=\"https://github.com/leanprover-community/mathlib/pull/8810\">#8810</a> is what removed <code>fintype</code> constraints from the definition of <code>matrix</code>. The idea is that anything that needs the index type to be finite can add that constraint itself.</p>\n<p>I think it would be nice to have the ability to work with arbitrary-rank arrays, so <code>m -&gt; alpha</code>, <code>m -&gt; n -&gt; alpha</code>, and so on. I've done some experiments along these lines, by adding a new type of function arrow; a matrix is a <code>m =&gt; n =&gt; alpha</code>, for instance. This is what a matrix-vector multiply can look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">matvec</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">for</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">vsum</span> <span class=\"n\">for</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p><code>for</code> is like lambda for these, and <code>vsum</code> is a function that adds up along the first index</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vsum</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.sum</span> <span class=\"n\">finset.univ</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 269814705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643410549
    },
    {
        "content": "<p>This arrow is just a wrapper around the usual (non-dependent) function arrow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vec</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">30</span> <span class=\"o\">:=</span> <span class=\"n\">vec</span>\n</code></pre></div>",
        "id": 269815125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643410769
    },
    {
        "content": "<p>Oh, wow, so you have two proposals for vector types then: Reid's <code>tuple := fin n → α</code> and Kyle's <code>vec := ι → α</code>. I am starting to understand why Yaël tries to avoid introducing new types <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 269851796,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1643448183
    }
]