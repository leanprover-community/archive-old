[
    {
        "content": "<p>Is there any chance we can do something about errors like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">aeval</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">witt_structure_rat</span> <span class=\"n\">p</span> <span class=\"err\">Φ</span><span class=\"o\">)</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span>\n</code></pre></div>\n\n\n<p>Lean has correctly figured out the type... but by the time it didit's too late to check whether we can coerce to a function (if I understand the problem correctly). Maybe we can teach lean that there are second chances?</p>",
        "id": 198074366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589898790
    },
    {
        "content": "<p>Are you sure there aren't any funny metavariables lurking beneath the surface?</p>",
        "id": 198075233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589899088
    },
    {
        "content": "<p>There are</p>",
        "id": 198075294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589899112
    },
    {
        "content": "<p>But I want lean to not care about them, because it clearly figured out enough info to print this error message, and hence it should also be able to figure out the function.</p>",
        "id": 198075400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589899148
    },
    {
        "content": "<p>Oh, but then this is just the usual problem with coercions to function.</p>",
        "id": 198075534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589899202
    },
    {
        "content": "<p>Yes, maybe we should think about doing something about it.</p>",
        "id": 198075584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589899211
    },
    {
        "content": "<p>Yes, I know. Maybe I should have explained better.</p>",
        "id": 198075591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589899216
    },
    {
        "content": "<p>At the moment, this statement works... but I don't think it's very readable</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">witt_structure_rat_prop</span> <span class=\"o\">(</span><span class=\"err\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">idx</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">witt_structure_rat</span> <span class=\"n\">p</span> <span class=\"err\">Φ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">idx</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">witt_polynomial</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rename</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">))))</span> <span class=\"o\">:</span>\n     <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"err\">Φ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 198077325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589899878
    },
    {
        "content": "<p>My understanding is that currently Lean refuses to even consider the possibility of applying a coercion to function when the type in question contains metavariables. I think changing the behavior of instance search as discussed at <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/unusable.20arguments\">#general &gt; unusable arguments</a> is a prerequisite for changing this.</p>",
        "id": 198077706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589900016
    },
    {
        "content": "<p>Why this is a prerequisite? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is it hard to do the following?</p>\n<ul>\n<li>catch \"function expected\" error,</li>\n<li>try to fill class instance metavariables using instance search, </li>\n<li>if succeeded, try <code>has_coe_to_fun</code>?</li>\n</ul>",
        "id": 198085148,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589902910
    },
    {
        "content": "<p>That's what we do right now?</p>",
        "id": 198085325,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589902991
    },
    {
        "content": "<p>It's just that instance search doesn't work (for no good reason) if the type contains metavariables.</p>",
        "id": 198085402,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589903026
    },
    {
        "content": "<p>I'm not sure there is no good reason, but I also don't remember the exact supposed reason.</p>",
        "id": 198086047,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589903288
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/251\">lean#251</a> ?</p>",
        "id": 198087613,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589903919
    },
    {
        "content": "<p>Allowing mvars in the input problem sounds like a bad idea when you have overlapping instances. You really don't want to get a <em>different</em> solution when the elaborator hasn't resolved quite as many arguments as in a similar context.</p>",
        "id": 198088875,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589904432
    },
    {
        "content": "<p>Overlapping instances are always bad.  We're actively removing them from mathlib.</p>",
        "id": 198089078,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589904520
    },
    {
        "content": "<p>There's little difference in doing type class resolution in a polymorphic declaration and then instantiating the polymorphic declaration, or doing typeclass resolution where the type contains a metavariable.</p>",
        "id": 198089166,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589904568
    },
    {
        "content": "<p>Right, this is a good way to look at it.</p>",
        "id": 198089294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589904608
    },
    {
        "content": "<p>Maybe I should clarify: overlapping instances are ok if they are definitionally equal.  But they cause huge problems if they aren't.</p>",
        "id": 198089301,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589904613
    },
    {
        "content": "<p>In GHC type variables that are bound by the type signature of a polymorphic function are called \"rigid type variables\", and we should think of metavariables in instance search problems as \"rigid\" too.</p>",
        "id": 198089449,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589904688
    },
    {
        "content": "<p>At least, certainly the ones which existed prior to instance search. I'm still not entirely sure what Lean 3 implements.</p>",
        "id": 198089632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589904777
    },
    {
        "content": "<p>From what you describe: rigid = regular.</p>",
        "id": 198089652,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589904789
    },
    {
        "content": "<p>That is, exactly what <a href=\"https://github.com/leanprover-community/lean/issues/251\">lean#251</a> implements.</p>",
        "id": 198089674,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589904801
    },
    {
        "content": "<p>As opposed to temporary?</p>",
        "id": 198089715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589904822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/function.20expected/near/198089166\">said</a>:</p>\n<blockquote>\n<p>There's little difference in doing type class resolution in a polymorphic declaration and then instantiating the polymorphic declaration, or doing typeclass resolution where the type contains a metavariable.</p>\n</blockquote>\n<p>Sure, but I haven't heard of any issues yet where the elaborator applies an unexpected degree of polymorphism. Instanciveness of mvars is super-brittle on the other hand.</p>",
        "id": 198089720,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589904826
    },
    {
        "content": "<p>Anyways, the test looks good! You could also backport <a href=\"https://github.com/leanprover/lean4/blob/master/tests/elabissues/Reid1.lean\">https://github.com/leanprover/lean4/blob/master/tests/elabissues/Reid1.lean</a> but it looks essentially the same. I suspect we won't run into issues in practice, because our <code>has_coe_to_fun</code> instances are (mostly?) for type constructors applied to a bunch of variables, and so don't involve further matching. (We must already have determined the outermost type constructor of <code>e</code> to get to this point, so that we know it's not <code>-&gt;</code>, right?)</p>",
        "id": 198090189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589905025
    },
    {
        "content": "<p>By polymorphic I mean <code>def foo {α} := ... synthesize `has_one (α × α)` here ...</code>.  Sure, in a small example the user has a bit more control in the sense that we search for <code>has_one (α × α)</code> and not <code>has_one β</code>.  But over a large library, some definition will very likely infer the type class in the most general setting imaginable.</p>",
        "id": 198090220,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589905048
    },
    {
        "content": "<p>I really hope this works in practice! <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> This would be way more exciting than a lousy 2x speed increase <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 198090695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589905260
    },
    {
        "content": "<p>Ok, I'll build mathlib with the change and see what happens.</p>",
        "id": 198091820,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589905792
    },
    {
        "content": "<p>I tried to drop some of <code>: _ → _</code> and failed.</p>",
        "id": 198099782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589909087
    },
    {
        "content": "<p>Where?</p>",
        "id": 198099830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589909111
    },
    {
        "content": "<p>More precisely, I tried to drop <code>: _ → _</code> in line 405 of <code>group_theory/free_monoid_product</code> in the <code>free_monoid_prod</code> branch.</p>",
        "id": 198099895,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589909146
    },
    {
        "content": "<p>Sorry for not using <code>master</code> for the test.</p>",
        "id": 198100048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589909195
    },
    {
        "content": "<p>I think the test is not whether you can drop <code>: _ → _</code>, but whether you can replace arguments to things that will be coerced to functions by <code>_</code>s.</p>",
        "id": 198100297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589909293
    },
    {
        "content": "<p>Then we can go and make those arguments implicit.</p>",
        "id": 198100335,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589909308
    },
    {
        "content": "<p>The reason for making them explicit is that otherwise you'll need <code>: _ → _</code> everywhere.</p>",
        "id": 198100385,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589909340
    },
    {
        "content": "<p>And the problem is that the missing argument in my case is <code>[decidable_eq _]</code>.</p>",
        "id": 198100449,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589909377
    },
    {
        "content": "<p>In my experience even adding that <code>: _ → _</code> is not enough</p>",
        "id": 198100457,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589909381
    },
    {
        "content": "<p>Sorry, I meant <code>: α → β</code> with full types for <code>α</code> and <code>β</code>.</p>",
        "id": 198100553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589909410
    },
    {
        "content": "<p>With <code>pp.all</code> I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"bp\">@</span><span class=\"n\">free_monoid_product</span><span class=\"bp\">.</span><span class=\"n\">normalized</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">ι</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)))))</span>\n       <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">ι</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n             <span class=\"bp\">@</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n                  <span class=\"bp\">@</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)))))</span>\n          <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">free_monoid_product</span><span class=\"bp\">.</span><span class=\"n\">normalized</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">ι</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n             <span class=\"bp\">@</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n                  <span class=\"bp\">@</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)))))</span>\n          <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">free_monoid_product</span><span class=\"bp\">.</span><span class=\"n\">normalized</span><span class=\"bp\">.</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 198100683,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589909484
    },
    {
        "content": "<p>But even this is not enough! Since the problem is exactly that it fails to infer metavariables of <code>e</code> in <code>e x</code> from the expected type of <code>e</code> as a function.</p>",
        "id": 198100698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589909492
    },
    {
        "content": "<p>It needs to be, for example, <code>(e : equiv a b) x</code>.</p>",
        "id": 198100715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589909499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Works for me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">cons_eq_of_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">normalized</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">of</span> <span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">of_eq_of&#39;</span><span class=\"o\">,</span> <span class=\"n\">of&#39;_val</span><span class=\"o\">,</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">eta</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 198101082,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589909654
    },
    {
        "content": "<p>You can also remove fancier arrows:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">hom_eq</span> <span class=\"o\">⦃</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">normalized</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">⦄</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:</span>\n</code></pre></div>",
        "id": 198101253,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589909741
    },
    {
        "content": "<p>Or make some arguments implicit:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">lift_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 198101407,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589909837
    },
    {
        "content": "<p>Sorry, I created a branch but didn't switch to it.</p>",
        "id": 198101528,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589909882
    },
    {
        "content": "<p>Rebuilding</p>",
        "id": 198101604,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589909929
    },
    {
        "content": "<p>Just to make this clear: this is with <a href=\"https://github.com/leanprover-community/lean/issues/251\">lean#251</a></p>",
        "id": 198101706,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589909970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> You should hurry up with Lean 4, because Gabriel is solving all issues of Lean 3 without waiting.</p>",
        "id": 198103686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589910948
    },
    {
        "content": "<p>It works!!</p>",
        "id": 198103967,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589911073
    },
    {
        "content": "<p>This is really cool! As in: <span aria-label=\"cool\" class=\"emoji emoji-1f192\" role=\"img\" title=\"cool\">:cool:</span></p>",
        "id": 198287206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590037739
    },
    {
        "content": "<p>Now it's time for me to come back to <code>polynomial</code>s review...</p>",
        "id": 198287238,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590037794
    },
    {
        "content": "<p>But I'm getting headaches of the looming <code>mv_polynomial</code> refactor that is waiting for us now that we can have readable ring_hom versions of <code>C</code>, <code>eval</code>, <code>eval\\2</code>, <code>map</code>, <code>rename</code>, and all the other friends</p>",
        "id": 198287239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590037796
    },
    {
        "content": "<p>Hah, great minds think alike... (fools never differ...)</p>",
        "id": 198287279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590037817
    },
    {
        "content": "<p>It's really crazy how big the difference is between lean 3.11 (last week) and lean 3.14 (yesterday)</p>",
        "id": 198287309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590037897
    }
]