[
    {
        "content": "<p><a href=\"https://gist.github.com/petercommand/91e72613af95bde16baadf484abd1368\" target=\"_blank\" title=\"https://gist.github.com/petercommand/91e72613af95bde16baadf484abd1368\">https://gist.github.com/petercommand/91e72613af95bde16baadf484abd1368</a><br>\nlean fails to prove that this code terminates, but this code is structurally recursive</p>",
        "id": 148203856,
        "sender_full_name": "petercommand",
        "timestamp": 1542939487
    },
    {
        "content": "<p>and if I change <code>Prop</code> to <code>Type</code>, termination check succeeds</p>",
        "id": 148204024,
        "sender_full_name": "petercommand",
        "timestamp": 1542939848
    },
    {
        "content": "<p>looks like a bug</p>",
        "id": 148204028,
        "sender_full_name": "petercommand",
        "timestamp": 1542939876
    },
    {
        "content": "<p>well if you change <code>Prop</code> to <code>Type</code> then I suspect Lean is doing induction on <code>tup_order</code></p>",
        "id": 148204092,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542940037
    },
    {
        "content": "<p>which is not what you want</p>",
        "id": 148204093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542940043
    },
    {
        "content": "<p>wasn't I doing induction on <code>tup_order</code> when I use <code>Prop</code>?</p>",
        "id": 148204141,
        "sender_full_name": "petercommand",
        "timestamp": 1542940104
    },
    {
        "content": "<p>when you use <code>Prop</code>, the <code>tup_order</code> has no size, so there's no well-founded relation on it that Lean is using</p>",
        "id": 148204162,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542940152
    },
    {
        "content": "<p>if you see the error, you can see <code>⊢ prod.lex has_lt.lt has_lt.lt (p, q) (p, q)</code></p>",
        "id": 148204165,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542940164
    },
    {
        "content": "<p>Lean is trying to decrease the arguments of <code>tup_order</code> instead of the constructors of <code>tup_order</code></p>",
        "id": 148204168,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542940185
    },
    {
        "content": "<p>I'm still surprised it doesn't work. Shouldn't it be using <code>tup_order.rec</code> instead?</p>",
        "id": 148204221,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542940247
    },
    {
        "content": "<blockquote>\n<p>if you see the error, you can see <code>⊢ prod.lex has_lt.lt has_lt.lt (p, q) (p, q)</code></p>\n</blockquote>\n<p>what you do mean? the prod.lex in wf.lean?</p>",
        "id": 148204333,
        "sender_full_name": "petercommand",
        "timestamp": 1542940460
    },
    {
        "content": "<p>I'm surprised this still doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">tup_order</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_snd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_fst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_fst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_snd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tup_order</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)},</span>\n  <span class=\"n\">tup_order</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">base_snd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ord1</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">base_fst</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ord1</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">succ_fst</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">d</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trans</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">q</span><span class=\"o\">),(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">),(</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"n\">ord1</span> <span class=\"n\">t1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">succ_snd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trans</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">q</span><span class=\"o\">),(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">),(</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"n\">ord1</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tup_order</span>\n</pre></div>",
        "id": 148204344,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542940528
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 148204346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542940548
    },
    {
        "content": "<p>and I'm astonished that this doesn't work (swapping the order):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">tup_order</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_snd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_fst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_fst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_snd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tup_order</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span>\n  <span class=\"n\">tup_order</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">base_snd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ord1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">base_fst</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ord1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">succ_fst</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ord1</span> <span class=\"n\">t1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ⊢ prod.lex has_lt.lt has_lt.lt (c, d) (nat.succ c, e)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">succ_snd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ord1</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ⊢ prod.lex has_lt.lt has_lt.lt (c, d) (c, nat.succ d)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tup_order</span>\n</pre></div>",
        "id": 148204433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542940705
    },
    {
        "content": "<p>and what is it with this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">tup_order</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_snd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_fst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_fst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_snd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tup_order</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span>\n  <span class=\"n\">tup_order</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">base_snd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ord1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">base_fst</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ord1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">succ_fst</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n    <span class=\"n\">succ_fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ord1</span> <span class=\"n\">t1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- this : prod.lex has_lt.lt has_lt.lt (c, d) (nat.succ c, e)</span>\n<span class=\"c1\">-- ⊢ prod.lex has_lt.lt has_lt.lt (c, d) (nat.succ c, e)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ord1</span> <span class=\"o\">(</span><span class=\"n\">succ_snd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ord1</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ⊢ prod.lex has_lt.lt has_lt.lt (c, d) (c, nat.succ d)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tup_order</span>\n</pre></div>",
        "id": 148204488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542940843
    },
    {
        "content": "<p>If you want to do induction on recursively-defined propositions, you should use <code>induction</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tup_order_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">tup_order</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">h₂</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">case</span> <span class=\"n\">base_snd</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">succ_snd</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"c1\">-- ...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148217775,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1542965058
    },
    {
        "content": "<p>The equation compiler does not use <code>rec</code>: <a href=\"https://github.com/leanprover/lean/issues/1611\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1611\">https://github.com/leanprover/lean/issues/1611</a><br>\nIn this case, it tries to do well-founded induction on the size of the tuples <code>a</code>, <code>b</code>, and <code>c</code>.</p>",
        "id": 148217895,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1542965215
    },
    {
        "content": "<p>This strategy does not allow you to do recursion on proofs (since they have a constant size).  Another gotcha is that you can't recursion on propositions defined via nested induction.  One possible workaround is to change the universe of <code>tup_order</code> to <code>Type</code>, then there is a more sensible <code>sizeof</code>.</p>",
        "id": 148218019,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1542965356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">tup_order</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_snd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_fst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_fst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">},</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_snd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">},</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tup_order</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tup_order</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">tup_order</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hbc</span> <span class=\"o\">:</span> <span class=\"n\">tup_order</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tup_order</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">Hbc</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">tup_order</span><span class=\"bp\">.</span><span class=\"n\">base_snd</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">succ_snd</span> <span class=\"n\">Hab</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">tup_order</span><span class=\"bp\">.</span><span class=\"n\">base_fst</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">succ_fst</span> <span class=\"n\">Hab</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">tup_order</span><span class=\"bp\">.</span><span class=\"n\">succ_fst</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">succ_fst</span> <span class=\"o\">(</span><span class=\"n\">Hbc_ih</span> <span class=\"n\">Hab</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">tup_order</span><span class=\"bp\">.</span><span class=\"n\">succ_snd</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">succ_snd</span> <span class=\"o\">(</span><span class=\"n\">Hbc_ih</span> <span class=\"n\">Hab</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tup_order</span>\n</pre></div>",
        "id": 148247683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543003828
    },
    {
        "content": "<p>So can you never use the equation compiler to consume an inductive Prop?</p>",
        "id": 148247827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543004053
    },
    {
        "content": "<p>you're asking the wrong person...</p>",
        "id": 148247840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543004084
    },
    {
        "content": "<p>Can Mario never use the equation compiler to consume an inductive Prop?</p>",
        "id": 148247915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543004193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Reid wants to know if Kenny can never use the equation compiler to consume an inductive Prop.</p>",
        "id": 148248002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543004328
    },
    {
        "content": "<p>great</p>",
        "id": 148248022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543004370
    },
    {
        "content": "<blockquote>\n<p>So can you never use the equation compiler to consume an inductive Prop?</p>\n</blockquote>\n<p>It works just fine as long as you don't need recursion; pattern-matching is no problem.</p>",
        "id": 148250530,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1543008994
    }
]