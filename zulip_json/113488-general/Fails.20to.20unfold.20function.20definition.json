[
    {
        "content": "<p>Hi, does anyone know how I can unfold the definition of <code>evals_to</code> in the example below?</p>\n<p>I expected either <code>refl</code> or <code>rw</code> to complete the proof, both fail and <code>hint</code> doesn't help me either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n  <span class=\"c1\">--| add : term → term → term</span>\n  <span class=\"c1\">--| mul : term → term → term</span>\n  <span class=\"c1\">-- ...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evals_to</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">term.const</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">term.var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">evals_to</span> <span class=\"n\">n</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n  <span class=\"c1\">-- ...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">evals_to</span> <span class=\"mi\">100</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">term.const</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term.const</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">evals_to</span> <span class=\"c1\">-- works, completes the goal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">),</span> <span class=\"n\">evals_to</span> <span class=\"n\">n</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">term.const</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">env</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">evals_to</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278950006,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649933756
    },
    {
        "content": "<p><del>You have to do <code>cases n</code> first.</del> Oh wait, not sure</p>",
        "id": 278950066,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649933805
    },
    {
        "content": "<p>wait yes that works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">),</span> <span class=\"n\">evals_to</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term.const</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">env</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">evals_to</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278950203,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649933923
    },
    {
        "content": "<p>...but why?</p>",
        "id": 278950218,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649933946
    },
    {
        "content": "<p><code>delta evals_to</code> might work too</p>",
        "id": 278950411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649934041
    },
    {
        "content": "<p>That's because you defined <code>evals_to</code> by pattern-matching, so the equations are written in terms of the patterns. Namely there must be one for <code>evals_to 0 env (term.const c) y</code> and one for <code>evals_to (n + 1) env (term.const c) y</code>, and apparently Lean isn't smart enough to notice it can unify them.</p>",
        "id": 278950464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649934078
    },
    {
        "content": "<p>Have a look at <code>#print prefix evals_to.equations</code> to see what equations lean generated</p>",
        "id": 278951072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649934525
    },
    {
        "content": "<p>Oh yeah, it did generate <code>_eqn_1</code> and <code>_eqn_3</code> for the first case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">evals_to.equations._eqn_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">evals_to</span> <span class=\"mi\">0</span> <span class=\"n\">_x</span> <span class=\"o\">(</span><span class=\"n\">term.const</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">evals_to.equations._eqn_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"n\">_x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">evals_to</span> <span class=\"mi\">0</span> <span class=\"n\">_x</span> <span class=\"o\">(</span><span class=\"n\">term.var</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span> <span class=\"n\">_x_1</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n<span class=\"n\">evals_to.equations._eqn_3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">evals_to</span> <span class=\"n\">n.succ</span> <span class=\"n\">_x</span> <span class=\"o\">(</span><span class=\"n\">term.const</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">evals_to.equations._eqn_4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">evals_to</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">term.var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">evals_to</span> <span class=\"n\">n</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 278951495,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649934806
    },
    {
        "content": "<p>Welp, time to wrap some things in <code>cases n; { ... }</code>!</p>",
        "id": 278951583,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649934850
    },
    {
        "content": "<p>Thank you for clearing that up!</p>",
        "id": 278951592,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649934859
    }
]