[
    {
        "content": "<p>Refactoring <code>padic_norm</code>, I found this. Why does simp fail to fire here? My understanding was that if all the hypotheses for a simp lemma were present in the context, simp should fire.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.padic_norm</span>\n\n<span class=\"sd\">/-- For `p ≠ 0, p ≠ 1, `padic_val_nat p p` is 1. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">padic_val_nat_self'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">padic_val_rat_of_nat'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">padic_val_rat</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- For `p ≠ 0, p ≠ 1, `padic_val_rat p p` is 1. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">padic_val_rat_self'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">padic_val_rat</span> <span class=\"n\">p</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">padic_val_rat_of_nat'</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- simp, --failed to simplify</span>\n  <span class=\"n\">rw</span> <span class=\"n\">padic_val_nat_self'</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"c1\">-- Why does simp fail to fire this here?</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275118376,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1647121038
    },
    {
        "content": "<p>If I'm correct, the hypothesis should not simply be in context, but within the simp set.  Does adding <code>hp</code> inside the square brackets of <code>simp</code> work?</p>",
        "id": 275118540,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647121308
    },
    {
        "content": "<p>Does <code>simp [*, padic_val_rat_of_nat']</code> work? I think you need to explicitly include the context.</p>",
        "id": 275118542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647121311
    },
    {
        "content": "<p>There seems to be a more serious problem, that <code>padic_val_rat_of_nat'</code> causes <code>simp</code> to seemingly run forever. Is there a loop in the simp set somewhere when you include this?</p>",
        "id": 275118809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647121750
    },
    {
        "content": "<p>Ok, I see, I didn't realize it was necessary to actually include the context in simp. (The loop is probably because I'm refactoring this now).</p>",
        "id": 275118935,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1647121945
    },
    {
        "content": "<p>Other than <code>*</code>, another way to get <code>simp</code> to fill in additional hypotheses is to specify a <code>discharger</code>. In this case, <code>tactic.assumption</code> would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">padic_val_rat_of_nat'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 275118936,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647121951
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 275122317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647127892
    }
]