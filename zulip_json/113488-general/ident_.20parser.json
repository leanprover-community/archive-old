[
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Parse an identifier or a '_' -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ident_</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tk</span> <span class=\"s2\">\"_\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">`</span><span class=\"n\">_</span>\n</code></pre></div>\n<p>Would it be possible to make this parser also accept French-quoted hypotheses such as <code>‹x ≠ y›</code>?</p>",
        "id": 256582324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633615360
    },
    {
        "content": "<p>That wouldn't be a <code>parser name</code> any more</p>",
        "id": 256583466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633615777
    },
    {
        "content": "<p>What would <code>intro ‹x ≠ y›</code> mean?</p>",
        "id": 256583557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633615810
    },
    {
        "content": "<p>Hmm, that makes sense.</p>",
        "id": 256583645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633615844
    },
    {
        "content": "<p>So I guess I want a new kind of parser, that takes a name or a french quoted thingy.</p>",
        "id": 256583711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633615874
    },
    {
        "content": "<p>If this is regarding <code>library_search</code>, then it sounds like the problem is you're parsing a name but should be parsing an expression</p>",
        "id": 256583738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633615891
    },
    {
        "content": "<p>Presumbly <code>h x</code> should be valid in your intended use case too?</p>",
        "id": 256583770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633615906
    },
    {
        "content": "<p>hmmz, probably. This is quickly becoming too <code>meta</code>. But I guess <code>library_search using [h x]</code> is reasonable.</p>",
        "id": 256583920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633615951
    },
    {
        "content": "<p>how does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simpa\">tactic#simpa</a> parse the <code>using</code> clause?</p>",
        "id": 256584171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633616044
    },
    {
        "content": "<p>I think that's what you want here</p>",
        "id": 256584188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633616050
    },
    {
        "content": "<p><code>library_search using [t1, t2]</code> should probably just add <code>t1</code>, <code>t2</code> to the context if they aren't local constants already, then you don't have to change the main function at all</p>",
        "id": 256584189,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633616050
    },
    {
        "content": "<p>Would we need the kinda of metavariable avoidance used by <code>simpa</code> here?</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/f87478329d165cbd45631d806d5ae3ff061909a7/src/tactic/simpa.lean#L36-L54\">https://github.com/leanprover-community/mathlib/blob/f87478329d165cbd45631d806d5ae3ff061909a7/src/tactic/simpa.lean#L36-L54</a></p>",
        "id": 256584565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633616170
    },
    {
        "content": "<p>But <code>library_search</code> needs to filter it's results to see if they make use of <code>t1</code> and <code>t2</code>. Is that easy if they are arbitrary expressions?</p>",
        "id": 256584779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633616247
    },
    {
        "content": "<p>Parse an optional <code>tk \"using\" &gt;&gt; pexpr_list</code>, elaborate the list, <code>note_anon</code> anything in the list that isn't a local constant. Then you just have a list of local constants</p>",
        "id": 256584928,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633616293
    },
    {
        "content": "<p>If you say so... <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 256585020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633616329
    },
    {
        "content": "<p>Actually, this will cause trouble when it prints out what it finds at the end</p>",
        "id": 256587207,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1633617119
    }
]