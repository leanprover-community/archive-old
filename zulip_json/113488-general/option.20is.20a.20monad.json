[
    {
        "content": "<p>I read in Programming in Lean that option is a monad. I rolled my own <code>option</code> and decided to try and define a term of type <code>monad option</code>. I seem to have to fill in a bunch of fields, I've done half of them, and it's just dawned on me that none of them are proofs :-/ I have <code>map_const</code>, <code>seq_left</code> and <code>seq_right</code> left to do. But I'm not doing the right thing because I'm sure there should be proofs involved. Should I be proving it's a lawful monad?</p>",
        "id": 192572549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585765811
    },
    {
        "content": "<p>Yes</p>",
        "id": 192572602,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585765832
    },
    {
        "content": "<p><code>monad</code> is for programming, and programmers don't need proofs</p>",
        "id": 192573048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585766027
    },
    {
        "content": "<p>Kevin, what you're doing is called Haskell. To become Lean you need the lawfulness.</p>",
        "id": 192573200,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585766090
    },
    {
        "content": "<p>I was actually experimenting with things which I thought might be worth doing in the tutorial project</p>",
        "id": 192573266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585766126
    },
    {
        "content": "<p>but for some reason I thought a monad had about two fields and two proofs</p>",
        "id": 192573289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585766142
    },
    {
        "content": "<p>and currently I seem to have to prove <code>map_const_eq</code>, <code>_id_map</code>, <code>bind_pure_comp_eq_map</code>, <code>bind_map_eq_seq</code>, <code>pure_bind</code>, <code>bind_assoc</code> and I also have to guess definitions of <code>map_const</code>, <code>seq_left</code> and <code>seq_right</code></p>",
        "id": 192573425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585766198
    },
    {
        "content": "<p>this has got a bit out of hand.</p>",
        "id": 192573436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585766206
    },
    {
        "content": "<p>The category_theory monad would look more like what you expect</p>",
        "id": 192573515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585766251
    },
    {
        "content": "<p>Furthermore I have no idea what all the notation means in the goals :-) <code>x &gt;&gt;= pure ∘ f = f &lt;$&gt; x</code> ?</p>",
        "id": 192573523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585766255
    },
    {
        "content": "<p>but I don't know whether it is suitable for your purposes</p>",
        "id": 192573526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585766257
    },
    {
        "content": "<p>My purposes are trying to figure out if I can teach schoolkids what monads are</p>",
        "id": 192573550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585766276
    },
    {
        "content": "<p>At the VU, we just defined our own monad class.</p>",
        "id": 192573615,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585766291
    },
    {
        "content": "<p>To avoid all that stuff.</p>",
        "id": 192573625,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585766296
    },
    {
        "content": "<p>Two fields, <em>three</em> proofs.</p>",
        "id": 192573659,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585766318
    },
    {
        "content": "<p>What's with the burrito?</p>",
        "id": 192573698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585766345
    },
    {
        "content": "<p>Is one of them <code>(f &gt;&gt;= λ (_x : α → β), _x &lt;$&gt; x) = f &lt;*&gt; x</code></p>",
        "id": 192573708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585766353
    },
    {
        "content": "<p>Seriously?</p>",
        "id": 192573710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585766353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Search for monad and burrito</p>",
        "id": 192573726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585766365
    },
    {
        "content": "<p>And brew yourself a cup of coffee.... you'll have a long evening</p>",
        "id": 192573747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585766383
    },
    {
        "content": "<p><a href=\"https://duckduckgo.com/?t=ffab&amp;q=monad+burrito&amp;atb=v1-1&amp;ia=web\" title=\"https://duckduckgo.com/?t=ffab&amp;q=monad+burrito&amp;atb=v1-1&amp;ia=web\">https://duckduckgo.com/?t=ffab&amp;q=monad+burrito&amp;atb=v1-1&amp;ia=web</a></p>",
        "id": 192573837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585766421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Does Lean know what a burrito is?</p>",
        "id": 192573863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585766437
    },
    {
        "content": "<p>This is the original source: <a href=\"https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/\" title=\"https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/\">https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/</a></p>",
        "id": 192573882,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585766447
    },
    {
        "content": "<p>You could try proving that those are monads</p>",
        "id": 192573887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585766450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/option.20is.20a.20monad/near/192573837\" title=\"#narrow/stream/113488-general/topic/option.20is.20a.20monad/near/192573837\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://duckduckgo.com/?t=ffab&amp;q=monad+burrito&amp;atb=v1-1&amp;ia=web\" title=\"https://duckduckgo.com/?t=ffab&amp;q=monad+burrito&amp;atb=v1-1&amp;ia=web\">https://duckduckgo.com/?t=ffab&amp;q=monad+burrito&amp;atb=v1-1&amp;ia=web</a></p>\n</blockquote>\n<p>I commend you for using duckduckgo.</p>",
        "id": 192573924,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585766470
    },
    {
        "content": "<p>Reminds me of <a href=\"https://twitter.com/agnoster/status/44636629423497217\" title=\"https://twitter.com/agnoster/status/44636629423497217\">this</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/agnoster/status/44636629423497217\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/433743062221606912/KIL_MiBp_normal.jpeg\"></a><p><a href=\"https://twitter.com/wilshipley\" title=\"https://twitter.com/wilshipley\">@wilshipley</a> git gets easier once you get the basic idea that branches are homeomorphic endofunctors mapping submanifolds of a Hilbert space.</p><span>- Isaac Wolkerstorfer (@agnoster)</span></div></div>",
        "id": 192574240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585766628
    },
    {
        "content": "<p>Oh, I remember now. I've met those before, but I forgot.</p>",
        "id": 192574827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585766897
    },
    {
        "content": "<p>Today is the perfect day, and this is the perfect thread, to mention <a href=\"https://webapps.wesleyan.edu/redirector/emorehouse.web.wesleyan.edu?path=/silliness/burrito_monads.pdf\" title=\"https://webapps.wesleyan.edu/redirector/emorehouse.web.wesleyan.edu?path=/silliness/burrito_monads.pdf\">Burritos for the hungry mathematician</a></p>",
        "id": 192586491,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1585772002
    },
    {
        "content": "<p><a href=\"https://neoeinstein.github.io/monads-are-not-burritos/\" title=\"https://neoeinstein.github.io/monads-are-not-burritos/\">https://neoeinstein.github.io/monads-are-not-burritos/</a></p>",
        "id": 192590314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585773800
    },
    {
        "content": "<p>So it is a theorem in Lean, that what Leo de Moura thinks a monad is, is the same as what Scott Morrison thinks a monad is?</p>",
        "id": 192633580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585815715
    },
    {
        "content": "<p>Category theory is some weird way for type theory to formally verify programming languages or something.</p>",
        "id": 192633704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585815797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/option.20is.20a.20monad/near/192633580\" title=\"#narrow/stream/113488-general/topic/option.20is.20a.20monad/near/192633580\">said</a>:</p>\n<blockquote>\n<p>So it is a theorem in Lean, that what Leo de Moura thinks a monad is, is the same as what Scott Morrison thinks a monad is?</p>\n</blockquote>\n<p>Not sure if this has been done.</p>",
        "id": 192633749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585815839
    },
    {
        "content": "<p>Why is the Lean term <code>option.monad</code> a monad, Scott Morrison?</p>",
        "id": 192633865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585815922
    },
    {
        "content": "<p>One answer is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monad/types.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monad/types.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monad/types.lean</a></p>",
        "id": 192634078,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585816048
    },
    {
        "content": "<p>Which takes a type-level lawful monad and produces a category theoretic monad.</p>",
        "id": 192634094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585816063
    },
    {
        "content": "<p>But we \"just\" need to understand why <code>option</code> is an algebra object in the monoidal category of endofunctors of <code>Type</code>.</p>",
        "id": 192634171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585816098
    },
    {
        "content": "<p>Oh wow, so <code>monad</code> has this crazy evolution!</p>",
        "id": 192634907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585816604
    },
    {
        "content": "<p>Johannes got it into what a computer scientist thought a category was?</p>",
        "id": 192635082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585816742
    },
    {
        "content": "<p>If you wanted to prove that option was a monad purely in the category theoretic definition, you would start with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">functorial</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">Option</span> <span class=\"o\">:=</span> <span class=\"n\">of_type_functor</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">monad_Option</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">Option</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">η</span> <span class=\"o\">:=</span>\n    <span class=\"c1\">-- We need to provide `𝟭 Type ⟶ Option`,</span>\n    <span class=\"c1\">-- i.e. a natural transformation from the identity functor to the Option functor</span>\n    <span class=\"c1\">-- In components, this just means for each type `α` a morphism from `α` to `option α`.</span>\n    <span class=\"c1\">-- I can think of two good options, `some` and `none`.</span>\n    <span class=\"c1\">-- Let&#39;s guess `some` is the right answer!</span>\n    <span class=\"c1\">-- Hopefully the category theoretic automation is good enough we won&#39;t need to check naturality.</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"c1\">-- Indeed, the naturality proof was provided &quot;under the hood&quot;.</span>\n  <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Now we need to provide `Option ⋙ Option ⟶ Option`.</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Option</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Option</span><span class=\"o\">],</span>\n      <span class=\"c1\">-- There&#39;s only one sensible thing to do:</span>\n      <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Unfortunately, naturality doesn&#39;t happen automatically this time!</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- There appears to be a ridiculous lack of `simp` lemmas about the `option` functor...</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- We still need to prove that what we wrote down constituted an algebra in `Type ⥤ Type`:</span>\n  <span class=\"n\">left_unit&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_unit&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 192635598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585817061
    },
    {
        "content": "<p>I've given up there because people have neglected to prove the obvious simp lemmas about the <code>functor</code> and <code>is_lawful_functor</code> instances they biult for <code>option</code>.</p>",
        "id": 192635817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585817195
    },
    {
        "content": "<p>Maybe I should have just proved it was a functor by hand, and then the <code>monad</code> proof would be worked automatically.</p>",
        "id": 192635849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585817217
    },
    {
        "content": "<p>Scott, you look at those proofs and think <em>sigh, I must go and write more automation</em></p>",
        "id": 192636027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585817317
    },
    {
        "content": "<p>I think I look at them and say \"hey, we are five computer game puzzles away from proving that option is a monad, let's play some computer games\"</p>",
        "id": 192636110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585817376
    },
    {
        "content": "<p>Oh, actually the reason those proofs were breaking was that I wrote <code>{ app := λ α x, none, },</code> when I'd said in the comment that we were going to write <code>{ app := λ α x, some x, },</code></p>",
        "id": 192636207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585817404
    },
    {
        "content": "<p>Can you post a fixed version?</p>",
        "id": 192636275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585817457
    },
    {
        "content": "<p>Yes. Indeed, if you turn on case bashing then tidy just handles everything:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"c1\">-- We turn on case bashing, to case split on `option` hypotheses.</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">tidy</span><span class=\"o\">]</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">case_bash</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Option</span> <span class=\"o\">:=</span> <span class=\"n\">of_type_functor</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">monad_Option</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">Option</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">η</span> <span class=\"o\">:=</span>\n    <span class=\"c1\">-- We need to provide `𝟭 Type ⟶ Option`,</span>\n    <span class=\"c1\">-- i.e. a natural transformation from the identity functor to the Option functor</span>\n    <span class=\"c1\">-- In components, this just means for each type `α` a morphism from `α` to `option α`.</span>\n    <span class=\"c1\">-- I can think of two good options, `some` and `none`.</span>\n    <span class=\"c1\">-- Let&#39;s guess `some` is the right answer!</span>\n    <span class=\"c1\">-- Hopefully the category theoretic automation is good enough we won&#39;t need to check naturality.</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"c1\">-- Indeed, the naturality proof was provided &quot;under the hood&quot;.</span>\n  <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Now we need to provide `Option ⋙ Option ⟶ Option`.</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 192636315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585817486
    },
    {
        "content": "<p>Option is a monad!</p>",
        "id": 192636443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585817548
    },
    {
        "content": "<p>in just three lines, plus comments :-)</p>",
        "id": 192636479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585817569
    },
    {
        "content": "<p>Now what about the theorem that <code>_root_.monad</code> is a monad?</p>",
        "id": 192636509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585817585
    },
    {
        "content": "<p>this is so cool</p>",
        "id": 192636577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585817632
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span></p>",
        "id": 192636584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585817638
    },
    {
        "content": "<p>@Kevin, what do you mean? That's the proof Johannes wrote that I linked above.</p>",
        "id": 192636671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585817686
    },
    {
        "content": "<p>I see, so it's all there.</p>",
        "id": 192636679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585817697
    },
    {
        "content": "<p>Yes. To prove <code>option</code> is a category-theoretic monad you should of course just combine the fact people have proved it's a computer science monad already, and the generic translation to category-theoretic monads.</p>",
        "id": 192636758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585817758
    },
    {
        "content": "<p>The proof I wrote above is just for pedagogy.</p>",
        "id": 192636818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585817773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> would you ever need to import <code>category_theory.monad.types</code> when you are, say, writing meta code? Do you ever use <code>option.monad</code>? Presumably you use monads? What would happen if they were tagged <code>noncomputable</code>?</p>",
        "id": 192651350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585826899
    },
    {
        "content": "<p><code>option.monad</code> is used whenever you write <code>opt &gt;&gt;= f</code> where <code>opt : option A</code></p>",
        "id": 192651852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585827328
    },
    {
        "content": "<p>actually that's not quite correct because there is a <code>has_bind</code> superclass that provides that, but <code>monad</code> gives you other haskelly notations like <code>&lt;*&gt;</code> and <code>*&gt;</code></p>",
        "id": 192651859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585827340
    },
    {
        "content": "<p>actually <code>monad</code> is basically just the join of other typeclasses, so it doesn't contribute anything new but other functions are written to that interface. So for instance you can't write <code>return a : option A</code> without using <code>option.monad</code></p>",
        "id": 192652310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585827620
    },
    {
        "content": "<p>but you can write <code>pure a : option A</code> which is the name contributed by <code>applicative</code> (thank you haskell for having not one but two nonintuitive names for the same function), or of course <code>some a : option A</code></p>",
        "id": 192652392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585827714
    },
    {
        "content": "<p>I don't have a clue what <code>&gt;&gt;=</code> means. Is this notation commonly used? This is some meta thing, right? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 192652967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828132
    },
    {
        "content": "<p>and all the other funny emoticons like <code>&lt;*&gt;</code>?</p>",
        "id": 192653041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828192
    },
    {
        "content": "<p><code>a &gt;&gt;= \\lam b. f</code> means the same as <code>do b &lt;- a, f</code>, which is how you will normally see it</p>",
        "id": 192653046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828196
    },
    {
        "content": "<p>actually <code>do</code> notation is just syntax for the former</p>",
        "id": 192653114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828216
    },
    {
        "content": "<p>OK so I must confess that I have seen <code>b &lt;- a</code> before.</p>",
        "id": 192653115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828216
    },
    {
        "content": "<p>And what would happen if I made it noncomputable? Would anything break?</p>",
        "id": 192653157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828250
    },
    {
        "content": "<p>yes, everything would break</p>",
        "id": 192653168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828258
    },
    {
        "content": "<p>What exactly?</p>",
        "id": 192653178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828268
    },
    {
        "content": "<p>all tactics</p>",
        "id": 192653182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828272
    },
    {
        "content": "<p>All tactics?</p>",
        "id": 192653184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828273
    },
    {
        "content": "<p>rofl</p>",
        "id": 192653190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828277
    },
    {
        "content": "<p>taking away bind is like taking away function composition</p>",
        "id": 192653239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828315
    },
    {
        "content": "<p>But what would happen if Scott made his construction noncomputable?</p>",
        "id": 192653297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828324
    },
    {
        "content": "<p>you can have a function, but only one. two is too many</p>",
        "id": 192653301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828326
    },
    {
        "content": "<p>That said, <code>category_theory.monad.types</code> has very little impact if any on the lean programmer</p>",
        "id": 192653384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828370
    },
    {
        "content": "<p><code>monad Option</code> is not even the same monad as <code>monad option</code></p>",
        "id": 192653398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828381
    },
    {
        "content": "<p>because we don't use <code>category_theory.monad</code> for any of that</p>",
        "id": 192653422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828395
    },
    {
        "content": "<p>Hence the two Wikipedia pages I guess</p>",
        "id": 192653428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828398
    },
    {
        "content": "<p>Also, it should be noted that it is not an exact match (between Leo's monad and Scott's monad in the category of types) because of universe issues</p>",
        "id": 192653535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828451
    },
    {
        "content": "<p>Leo's monad has two universe parameters, Scott's has one</p>",
        "id": 192653588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828481
    },
    {
        "content": "<p>I don't care, I'm into ZFC</p>",
        "id": 192653616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828501
    },
    {
        "content": "<p>I know my small category from my large category</p>",
        "id": 192653643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828516
    },
    {
        "content": "<p>It matters here for more than size reasons</p>",
        "id": 192653676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828530
    },
    {
        "content": "<p>it's the difference between asking for a function <code>f : X -&gt; Y</code> and <code>f : X -&gt; X</code></p>",
        "id": 192653698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828547
    },
    {
        "content": "<p>Yes but the generic mathematician chooses to ignore these foundational issues</p>",
        "id": 192653773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828564
    },
    {
        "content": "<p>We work in Type in Type.</p>",
        "id": 192653790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828573
    },
    {
        "content": "<p>I'm saying it's more than that</p>",
        "id": 192653795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828575
    },
    {
        "content": "<p>We're careful not to press the bad self-destruct button in Type-in-Type.</p>",
        "id": 192653838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828602
    },
    {
        "content": "<p>Leo's monads literally contain objects that are not monads in Scott's sense because they don't have a multiplication</p>",
        "id": 192653849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828610
    },
    {
        "content": "<p>they have a <code>bind</code> operator but not a <code>join</code></p>",
        "id": 192653898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828638
    },
    {
        "content": "<p>Oh you're just saying that Johannes proved something about lawful monads?</p>",
        "id": 192653905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828640
    },
    {
        "content": "<p>which one are we talking about now?</p>",
        "id": 192653945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828661
    },
    {
        "content": "<p><code>monad</code> is a predicate on functions <code>F : Type u -&gt; Type v</code>. Crucially, unlike the category theory monad situation, you cannot iterate <code>F</code></p>",
        "id": 192654063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828725
    },
    {
        "content": "<p>So monads are like topoi, the word is used by different people to mean literally different things?</p>",
        "id": 192654075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585828731
    },
    {
        "content": "<p>The definition of category theory monad uses a function <code>mu : F (F X) -&gt; F X</code> which doesn't typecheck</p>",
        "id": 192654109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828755
    },
    {
        "content": "<p>(<code>mu</code> is also called <code>join</code> in the haskell tradition)</p>",
        "id": 192654137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828771
    },
    {
        "content": "<p>Instead, the \"multiplication operator\" is written in a sort of continuation passing style, <code>bind : F A -&gt; (A -&gt; F B) -&gt; F B</code>, which doesn't require iterating <code>F</code></p>",
        "id": 192654292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828841
    },
    {
        "content": "<p>The proof that <code>bind</code> and <code>join</code> are equivalent defines <code>join x = bind x id</code> but <code>id</code> doesn't typecheck here because one side is in <code>Type u</code> and the other is in <code>Type v</code></p>",
        "id": 192654492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585828933
    },
    {
        "content": "<p>I'm not sure how you could capture this in a category theory setting, since it is like you have two categories and some of the arrows in the diagram are spanning both categories</p>",
        "id": 192655049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585829258
    },
    {
        "content": "<p>Perhaps you could go for <code>Kleisli (F : Type u -&gt; Type v) := {obj := Type u, hom := \\lam A B, A -&gt; F B}</code> with bind as composition</p>",
        "id": 192655389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585829475
    },
    {
        "content": "<p>and the statement that <code>F</code> is a lawful monad is the same as the claim that this forms a category</p>",
        "id": 192655528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585829549
    },
    {
        "content": "<p>Do we know of any monad that intrinsically change universe? (i.e. where you can only define with v \\ne u)</p>",
        "id": 192665210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585834292
    },
    {
        "content": "<p>There was a time when <code>io</code> was a universe changing monad, although right now that's not necessary because it is implemented with meta constants</p>",
        "id": 192666375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585834852
    },
    {
        "content": "<p>there is a way to make the collection of all <code>monad_io</code>'s a universe changing monad</p>",
        "id": 192666543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585834927
    }
]