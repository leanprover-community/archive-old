[
    {
        "content": "<p>It seems we have a <code>list.rotate</code> to rotate a list to the left by a certain number, I might like to fill out the API by making a function to rotate to the right, or also rotate by an arbitrary integer. How should I go about this?</p>",
        "id": 299365421,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663450733
    },
    {
        "content": "<p>/poll &lt;Rotate options&gt;<br>\nDon't change anything<br>\nChange list.rotate to take an integer, refactor other appearances to use this<br>\nMake three functions named rotate, rotate_left, rotate_right<br>\nMake three functions named rotate_int, rotate, rotate_right<br>\nMake three functions named rotate, rotatel, rotater</p>",
        "id": 299365439,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663450757
    },
    {
        "content": "<p>Probably a bad idea, but you could go so far as declaring a <code>mul_action int (list a)</code> instance!</p>",
        "id": 299368528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663453427
    },
    {
        "content": "<p>do we have a <code>mul_action a $ list a</code> instance?</p>",
        "id": 299369150,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663453939
    },
    {
        "content": "<p>I feel like it'd be weird because the more natural smul instance is the nat instance, and I know those can coexist but imagine seeing <code>2 smul l</code> in the infoview and not knowing which it was</p>",
        "id": 299369206,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663454016
    },
    {
        "content": "<p>Since when was rotating by <code>1</code> the identity <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>?</p>",
        "id": 299369300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663454127
    },
    {
        "content": "<p>What about <code>mul_action (multiplicative int) (list a)</code> then? Given that <code>multiplicative int</code> seems to be the canonical infinite cyclic group in mathlib...</p>",
        "id": 299369903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663454794
    },
    {
        "content": "<p>Or <code>add_action int (list a)</code> which I (edit: incorrectly) presume doesn't exist</p>",
        "id": 299369922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663454831
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_action\">docs#add_action</a> would work fine, but I don't think it's a particularly sensible use of the typeclass here; not every <code> α →+ additive (End β)</code> is canonical enough to get a typeclass instance</p>",
        "id": 299370248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663455193
    },
    {
        "content": "<p>Yes sorry I meant <code>add_action</code> indeed!</p>",
        "id": 299385407,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663475052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/list.2Erotate/near/299368528\">said</a>:</p>\n<blockquote>\n<p>Probably a bad idea, but you could go so far as declaring a <code>mul_action int (list a)</code> instance!</p>\n</blockquote>\n<p>I think this is why I introduced <code>list.rotate</code>. It was something to do with Sylow theorems.</p>",
        "id": 315686196,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670965603
    },
    {
        "content": "<p>For Sylow you need an element of order p in a group whose order is a multiple of p to start the induction off, and one way to get it is by looking at all lists of length p the product of whose elements is 1 and then observing that rotation must have at least p fixed points because it has one fixed point and the number is congruent to 0 mod p</p>",
        "id": 315688494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670966474
    }
]