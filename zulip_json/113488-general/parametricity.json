[
    {
        "content": "<p>Hi, <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>,<br>\nI am debugging my -- very buggy -- parametricity plugin. Could you tell me the shortest way to get the name of an inductive type from the name of its recursor? (I found <code>environment.inductive_type_of</code> to get it from the name of a constructor, but I cannot find the same for the recursor, and taking just the namespace sounds dirty to me...)</p>",
        "id": 147487744,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541963436
    },
    {
        "content": "<p>Hm, it looks like there is no other (easy) option. You can analyse the type of the recursor, and try to get the inductive type from this, but this is not easy: there is an arbitrary number of parameters, I guess you need to analyse the motive to figure out what is a parameter and what is the actual inductive value...</p>",
        "id": 147488000,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541963999
    },
    {
        "content": "<p>For an arbitrary recursor accepted by <code>induction</code>, the type is a bunch of pis followed by <code>C a1 ... an</code> where <code>C</code> is a variable in the context. The type of this variable is a bunch of pis ending in <code>Type</code> or <code>Prop</code>, and the last argument should have the type <code>T b1 ... bn</code> where <code>T</code> is the type in question</p>",
        "id": 147491817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541970972
    },
    {
        "content": "<p>But if you know it's a builtin recursor the easiest way is just to knock off the last segment from the name</p>",
        "id": 147491835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971033
    },
    {
        "content": "<p>Oh wait, that doesn't work for the nondependent recursors. I think you can always look at the last pi in the type, which will have type <code>T b1 ... bn</code></p>",
        "id": 147491970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971229
    },
    {
        "content": "<p>for example:</p>\n<div class=\"codehilite\"><pre><span></span>inductive T (α : Type) : Type → Prop\n| mk1 : T nat\n| mk2 : T α\n\n#print T.rec\n-- protected eliminator T.rec : ∀ {α : Type} {C : Type → Prop},\n-- C ℕ → C α → ∀ {a : Type}, T α a → C a\n#check @T.drec\n-- T.drec : ∀ {α : Type} {C : Π (a : Type), T α a → Prop},\n-- C ℕ _ → C α _ → ∀ {a : Type} (n : T α a), C a n\n</pre></div>\n\n\n<p>Note that the last pi in the type has <code>T α a</code> as its domain, where <code>T</code> is what you want</p>",
        "id": 147492002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971309
    },
    {
        "content": "<p>Sure I know where to get the the type of the inductive from the type of the recursor, but I was looking for a primitive that I think is missing from the API... What does not work for nondependent recursors?</p>",
        "id": 147492061,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541971395
    },
    {
        "content": "<p>I think if we can figure it out there is no need for an API function</p>",
        "id": 147492067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971434
    },
    {
        "content": "<p>we can add it to mathlib</p>",
        "id": 147492068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971440
    },
    {
        "content": "<p>an API function would always be more efficient than retro-engineering... since the recursor is generated when the inductive type is added it should be indexed in the same way the constructors are...</p>",
        "id": 147492136,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541971510
    },
    {
        "content": "<p>the API function would do what I just said, this information is not stored</p>",
        "id": 147492146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971544
    },
    {
        "content": "<p>at least it would be coded in C++... meh I guess for my use case efficiency does not matter, but it's a matter of uniformity</p>",
        "id": 147492191,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541971589
    },
    {
        "content": "<p>anyway, take the number of parameters + 1 pis out, then take the next pi, take its head symbol, done</p>",
        "id": 147492196,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541971624
    },
    {
        "content": "<p>sure but you could say that about anything</p>",
        "id": 147492199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971626
    },
    {
        "content": "<p>oh + the number of constructors</p>",
        "id": 147492201,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541971645
    },
    {
        "content": "<p>well you can't get the constructors until you know the type...</p>",
        "id": 147492203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971677
    },
    {
        "content": "<p>oh right... so last pi then</p>",
        "id": 147492244,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541971695
    },
    {
        "content": "<p>right</p>",
        "id": 147492249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971712
    },
    {
        "content": "<blockquote>\n<p>sure but you could say that about anything</p>\n</blockquote>\n<p>Since the API function is there for constructors, it should also be there for anything that is generated by adding an inductive, such as recursors. I think none or both should be part of the core api, that is all I am saying.</p>",
        "id": 147492324,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541971861
    },
    {
        "content": "<p>I think that's reasonable, but, well, core is frozen</p>",
        "id": 147492390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541971999
    },
    {
        "content": "<p>Oh right, I forgot about that, sorry for the noise <span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span></p>",
        "id": 147492486,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541972167
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">trailing_pi_type_of</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">name</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">trailing_pi_type_of</span> <span class=\"n\">b</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span>\n   <span class=\"kn\">end</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">inductive_type_of_rec</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exceptional</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">decl</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">trailing_pi_type_of</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">exceptional</span><span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;inductive_type_of_rec: not a recursor &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">n</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 147493073,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541973424
    },
    {
        "content": "<p>or  for the second one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">inductive_type_of_rec</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exceptional</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"n\">decl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">trailing_pi_type_of</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 147493139,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541973590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I am confused by the output of <code>#print has_zero.zero</code> i.e. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>what construction is <code>[has_zero.zero c]</code> internally? I figured it is a \"macro\", but I cannot find its API... is it possible to get its expansion?</p>",
        "id": 147494991,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541977406
    },
    {
        "content": "<p>its a projection. so the projection data you get out of <code>environment</code> should tell you what the inductive is and which position of the constructor it is from. The macro hides a application of the recursor.</p>",
        "id": 147495052,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541977519
    },
    {
        "content": "<p>Nevermind, I was looking for <code>environment.unfold_all_macros</code></p>",
        "id": 147496075,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1541979613
    }
]