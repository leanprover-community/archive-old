[
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"kd\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How do I get the version of <code>subtype (range f)</code> that lives in <code>Type u</code>?</p>",
        "id": 248958760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628588791
    },
    {
        "content": "<p>I guess you need the \"first isomorphism theorem for ordinary functions\". But that probably isn't in mathlib yet.</p>",
        "id": 248959897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628589525
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">range'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">range'_equiv_subtype_range</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">range'</span> <span class=\"n\">f</span> <span class=\"bp\">≃</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quot.rec_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quot.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">y.2</span><span class=\"o\">),</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">classical.some_spec</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)],</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quot.induction_on</span> <span class=\"n\">x</span> <span class=\"bp\">$</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quot.sound</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">on</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">classical.some_spec</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)])</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 248960792,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628590115
    },
    {
        "content": "<p>Note that <code>subtype (set.range f)</code> is defeq abuse and should be <code>↥(set.range f)</code> or <code>subtype (∈ set.range f)</code></p>",
        "id": 248960992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628590287
    },
    {
        "content": "<p>Otherwise when you apply lemmas you get nonsense like <code>set.range f i</code> instead of <code>i ∈ set.range f</code></p>",
        "id": 248961028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628590320
    },
    {
        "content": "<p>Yeah, this definitional equality is a real footgun.  Some time ago I started a refactor to turn set into a structure, but I kind of ran out of steam in the middle.  <a href=\"https://github.com/leanprover-community/lean/compare/set_struct?expand=1\">https://github.com/leanprover-community/lean/compare/set_struct?expand=1</a> <a href=\"https://github.com/leanprover-community/mathlib/compare/set_struct?expand=1\">https://github.com/leanprover-community/mathlib/compare/set_struct?expand=1</a></p>",
        "id": 248961447,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628590587
    },
    {
        "content": "<p>I think it's kind of like the <code>additive</code> / <code>multiplicative</code> thing; it's a real footgun, but it's also necessary to work around the fact that structures don't have eta expansion (or whichever expansion I actually mean)</p>",
        "id": 248961656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628590757
    },
    {
        "content": "<p>Maybe this is something a linter could look out for</p>",
        "id": 248961749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628590806
    },
    {
        "content": "<p>Thanks Gabriel. I thought about using the quotient defined by <code>f</code> but I hoped it would already exist.</p>",
        "id": 248961815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628590874
    },
    {
        "content": "<p>Is <code>eq on f</code> the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.ker\">docs#setoid.ker</a>?</p>",
        "id": 248961835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628590892
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.quotient_ker_equiv_range\">docs#setoid.quotient_ker_equiv_range</a> looks like what you want</p>",
        "id": 248961918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628590926
    },
    {
        "content": "<p>Great!</p>",
        "id": 248961961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628590961
    },
    {
        "content": "<p>The set structure refactor was way less problematic than the additive/multiplicative one.  The main issues are:</p>\n<ul>\n<li>API churn, like you can't use <code>set.ext</code> for elements of <code>α → Prop</code> anymore.</li>\n<li>The unifier can't solve <code>x ∈ f =?= x ∈ set.mk ?m</code> anymore.  I think this can be fixed with a unification hint.  Lean 4 also does this out of the box.</li>\n<li>You can't do <code>inductive foo : α → set β</code> anymore.  But this is also no longer supported in Lean 4.</li>\n<li>I made <code>set.ext</code> protected, which requires quite a lot of inconsequential changes.</li>\n</ul>",
        "id": 248962264,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628591191
    },
    {
        "content": "<p>My understand was that such a refactor also stops <code>{x | x ∈ s} = s</code> being true by definition, which is what I assume is called structure eta-expansion?</p>",
        "id": 248962346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628591273
    },
    {
        "content": "<p>Right, but I don't think I ran into that problem.</p>",
        "id": 248962495,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628591369
    }
]