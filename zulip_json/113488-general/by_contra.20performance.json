[
    {
        "content": "<p>Here is a performance issue that is causing me problems.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">A_β</span> <span class=\"n\">B_β</span> <span class=\"n\">A_α</span> <span class=\"n\">B_α</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">B_β</span> <span class=\"bp\">*</span> <span class=\"n\">A_β</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">B_α</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">A_α</span> <span class=\"bp\">*</span> <span class=\"n\">B_β</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"n\">B_β</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">A_β</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">A_β</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Working in VSCode on my laptop, it takes a full 50 seconds for the <code>by_contra</code> tactic to finish processing. What is going on here?</p>",
        "id": 242651080,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1623700554
    },
    {
        "content": "<p>To explain what I mean more</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- by_contra,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Runs in less than a second. It feels like this should be equivalent to the tactic form, but something must be going on.</p>",
        "id": 242652920,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1623701463
    },
    {
        "content": "<p>This is clearly a decidability issue.</p>",
        "id": 242652948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623701483
    },
    {
        "content": "<p>Try adding <code>open_locale classical</code> before the lemma</p>",
        "id": 242652966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623701493
    },
    {
        "content": "<p>Or maybe <code>classical</code> as the first proof line</p>",
        "id": 242653002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623701517
    },
    {
        "content": "<p>open locale classical makes it much faster yes</p>",
        "id": 242653094,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1623701541
    },
    {
        "content": "<p>The thing is that <code>by_contra</code> requires decidability of the proposition you're proving, so it first tries to prove that decidability by typeclass inference. But that takes an awful while because it doesn't find anything, and it eventually falls onto excluded middle.</p>",
        "id": 242653315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623701662
    },
    {
        "content": "<p>It doesn't seem like it requires decidability to me.  <a href=\"https://leanprover-community.github.io/mathlib_docs/logic/basic.html#by_contra\">https://leanprover-community.github.io/mathlib_docs/logic/basic.html#by_contra</a> doesn't say anything about requiring decidability.</p>",
        "id": 242653986,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1623702009
    },
    {
        "content": "<p>That's the theorem <code>by_contra</code>, but you're using a tactic: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_contra%20/%20by_contradiction\">https://leanprover-community.github.io/mathlib_docs/tactics.html#by_contra%20/%20by_contradiction</a></p>",
        "id": 242654102,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623702078
    },
    {
        "content": "<p>The docs do say, though, that the tactic version requires decidability. Why should this be the case?</p>",
        "id": 242654121,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1623702091
    },
    {
        "content": "<p>In other words, why isn't the  <code>by_contra</code> tactic equivalent to <code>apply by_contra, intro,</code>?</p>",
        "id": 242654242,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1623702145
    },
    {
        "content": "<p>Who can pretend to understand constructivists?</p>",
        "id": 242654558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623702283
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/a5822ea47ebc52eec6323d8f1b60f6ec025daf99/library/init/meta/tactic.lean#L1477-L1483\">https://github.com/leanprover-community/lean/blob/a5822ea47ebc52eec6323d8f1b60f6ec025daf99/library/init/meta/tactic.lean#L1477-L1483</a> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 242654608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623702306
    },
    {
        "content": "<p>Probably my import I guess</p>",
        "id": 242655248,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1623702683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> this is the issue you discovered about two weeks ago, which is still on my job list to ask about here -- looks like I no longer need to.</p>",
        "id": 242658469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623704443
    },
    {
        "content": "<p>50 seconds to fail to prove <code>decidable_eq F</code> where <code>field F</code> sounds pretty extreme though. Using <code>open_locale classical</code> is probably the best workaround for this, but no typeclass search should be that bad</p>",
        "id": 242677882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623719813
    }
]