[
    {
        "content": "<p><strong>State of the convexity refactor</strong></p>\n<ul>\n<li>port convexity to vector spaces (<code>[module ùïú E]</code>)<ul>\n<li>redefine <code>segment</code> and <code>open_segment</code>. Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/9094\">#9094</a>.</li>\n<li>redefine <code>convex</code> and <code>convex_hull</code>. See <a href=\"https://github.com/leanprover-community/mathlib/issues/9058\">#9058</a>.</li>\n<li>redefine <code>convex_on</code> and <code>concave_on</code></li>\n<li>redefine <code>finset.center_mass</code></li>\n<li>redefine <code>std_simplex</code></li>\n<li>port the rest of the library</li>\n</ul>\n</li>\n<li>port convexity to affine spaces (<code>[module ùïú V] [affine_space V E]</code>). Very much not done.</li>\n</ul>",
        "id": 253162509,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631568080
    },
    {
        "content": "<p>Little update, <a href=\"https://github.com/leanprover-community/mathlib/issues/9058\">#9058</a> (finally!) compiles. It was much easier to generalize <code>convex</code> and <code>convex_hull</code> than <code>segment</code> and <code>open_segment</code> because somehow their properties are closer to the axioms and require less typeclass fuss.</p>",
        "id": 253162765,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631568186
    },
    {
        "content": "<p>BTw <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I think you should have your say on this, as you started <a href=\"https://github.com/leanprover-community/mathlib/issues/4787\">#4787</a>.</p>",
        "id": 253163102,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631568327
    },
    {
        "content": "<p>I failed to localize my porting efforts, created a huge mess, then failed to make it ready for review. So, I'm not sure that I should have a say on this. ;)</p>",
        "id": 253163285,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631568402
    },
    {
        "content": "<p>IMHO porting to affine spaces is not much harder than porting to modules.</p>",
        "id": 253163318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631568420
    },
    {
        "content": "<p>Oh that's not kindly worded for yourself! I would rather say that you opened <del>my eyes</del> a PR, sparked the idea in me, warned me of the monstruousity of the refactor, and then let me the opportunity to have a go myself!</p>",
        "id": 253163582,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631568537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/253163318\">said</a>:</p>\n<blockquote>\n<p>IMHO porting to affine spaces is not much harder than porting to modules.</p>\n</blockquote>\n<p>That's exactly what I thought, but one design decision I have done (which is very easily reversible, though) is that I allow convexity and stuff even the space has no negation.</p>",
        "id": 253163661,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631568582
    },
    {
        "content": "<p>And that's incompatible with affine spaces, right? It looks like generalization of convexity branches here and there's no common ancestor we can generalize to.</p>",
        "id": 253163828,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631568659
    },
    {
        "content": "<p>Here is a problem I can't solve without creating diamonds. You can define <code>convexity_space</code> to be a space with convex combinations <code>‚àÄ x y : R, 0 ‚â§ x ‚Üí 0 ‚â§ y ‚Üí x + y = 1 ‚Üí E ‚Üí E ‚Üí E</code> with some natural axioms.</p>",
        "id": 253163995,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631568734
    },
    {
        "content": "<p>Then you have two ways to go from <code>vector_space R E</code> to <code>convexity_space R E</code>.</p>",
        "id": 253164054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631568760
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 253164133,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631568808
    },
    {
        "content": "<p>One way is to use <code>module</code> structure and treat <code>R</code> as a semiring. Another is to use <code>affine_space</code> structure (but this needs subtraction).</p>",
        "id": 253164368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631568918
    },
    {
        "content": "<p>Oh, interesting. I will sleep on it.</p>",
        "id": 253164534,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631569008
    },
    {
        "content": "<p>While these two ways result in equal convexity structures, it seems that we can't make these structures defeq.</p>",
        "id": 253164629,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631569064
    },
    {
        "content": "<p>So, only one of the ways can be an instance.</p>",
        "id": 253164698,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631569085
    },
    {
        "content": "<p>Are you saying we should have <code>convexity_space</code>?</p>",
        "id": 253164780,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631569123
    },
    {
        "content": "<p>I'm having flashbacks to some old conversations:<br>\n<a href=\"#narrow/stream/116395-maths/topic/convexity\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/convexity</a><br>\n<a href=\"#narrow/stream/144837-PR-reviews/topic/3728.3A.20define.20ordered.20semimodules.20and.20generalize.20convexity.2E.2E.2E\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/3728.3A.20define.20ordered.20semimodules.20and.20generalize.20convexity.2E.2E.2E</a></p>",
        "id": 253167004,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1631570206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> No, I've described a half-solution to the problem. Since it doesn't solve the problem, I don't suggest we implement it.</p>",
        "id": 253168054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631570716
    },
    {
        "content": "<p>On the one hand, we can't have a notion of convexity that works both for modules over <code>nnreal</code> and for affine spaces without an abstraction like <code>convexity_space</code>.</p>",
        "id": 253168107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631570761
    },
    {
        "content": "<p>On the other hand, I'm not sure that we really need both.</p>",
        "id": 253168158,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631570772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/253167004\">said</a>:</p>\n<blockquote>\n<p>I'm having flashbacks to some old conversations:</p>\n</blockquote>\n<p>Pleas have flashbacks more often!</p>",
        "id": 253205781,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631602349
    },
    {
        "content": "<p>If we were to implement your half-solution, Yury, then I feel like the convex operation in a vector space should be inherited from the <code>module</code> side of things, rather than the <code>affine_space</code> one, because it is much closer to the axioms of a vector space.</p>",
        "id": 253206207,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631602641
    },
    {
        "content": "<p>Next up is <a href=\"https://github.com/leanprover-community/mathlib/issues/9247\">#9247</a>! It's just splitting <code>analysis.convex.basic</code> further.</p>",
        "id": 253734772,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631882128
    },
    {
        "content": "<p>Fantastic! That's easy to review (-;</p>",
        "id": 253737028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631883259
    },
    {
        "content": "<p><code>finset.center_mass</code> uses division, which makes it very restrictive. How much do people care about that division being there?</p>",
        "id": 253772242,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631897669
    },
    {
        "content": "<p>From my point of view,<br>\nPros: Doesn't require that the sum of the weights is 1, but merely that it's positive.<br>\nCons: Needs a field. Doesn't follow <code>affine_combination</code>.</p>",
        "id": 253772923,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631897964
    },
    {
        "content": "<p>It was written before <code>affine_combination</code>.</p>",
        "id": 253773231,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631898067
    },
    {
        "content": "<p>This looks as if we had taken <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_iff_div\">docs#convex_iff_div</a> to be the definition of convexity.</p>",
        "id": 253773250,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631898076
    },
    {
        "content": "<p>Feel free to change it.</p>",
        "id": 253773308,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631898097
    },
    {
        "content": "<p>Okay <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 253773331,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631898112
    },
    {
        "content": "<p>What do you think about renaming it <code>linear_combination</code>?</p>",
        "id": 253773505,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631898172
    },
    {
        "content": "<p>You can also introduce a proper type for <code>{x : Œπ ‚Üí‚ÇÄ R | (‚àÄ i, 0 ‚â§ x i) ‚àß x.sum (Œª i, id)}</code>.</p>",
        "id": 253773535,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631898182
    },
    {
        "content": "<p>This is the free object in the category of convex spaces.</p>",
        "id": 253773652,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631898228
    },
    {
        "content": "<p>See what we do about linear combinations in linear algebra.</p>",
        "id": 253773781,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631898270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/253773652\">said</a>:</p>\n<blockquote>\n<p>This is the free object in the category of convex spaces.</p>\n</blockquote>\n<p>Erhm... will look that up <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 253773848,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631898306
    },
    {
        "content": "<p>I mean that for any convex space and a map <code>f : Œπ ‚Üí E</code> you have a unique map from <code>g : {x : Œπ ‚Üí‚ÇÄ R | (‚àÄ i, 0 ‚â§ x i) ‚àß x.sum (Œª i, id)}</code> to <code>E</code> such that <code>g (single i x) = f x</code>.</p>",
        "id": 253775369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631898888
    },
    {
        "content": "<p>You can ignore the category theory language.</p>",
        "id": 253775400,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631898902
    },
    {
        "content": "<p>Ah! Did you mean to add an <code>= 1</code>?</p>",
        "id": 253775480,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631898936
    },
    {
        "content": "<p>I was stuck typechecking.</p>",
        "id": 253775520,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631898955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/253775369\">said</a>:</p>\n<blockquote>\n<p>I mean that for any convex space and a map <code>f : Œπ ‚Üí E</code> you have a unique map from <code>g : {x : Œπ ‚Üí‚ÇÄ R | (‚àÄ i, 0 ‚â§ x i) ‚àß x.sum (Œª i, id)}</code> to <code>E</code> such that <code>g (single i x) = f x</code>.</p>\n</blockquote>\n<p>Is this not exactly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/std_simplex\">docs#std_simplex</a>?</p>",
        "id": 253775672,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631899000
    },
    {
        "content": "<p>Aaah, <code>‚Üí‚ÇÄ</code> is <code>finsupp</code>.</p>",
        "id": 253775779,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631899048
    },
    {
        "content": "<p>Time for me to learn what that does.</p>",
        "id": 253775825,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631899065
    },
    {
        "content": "<p>This is one of the ways to speak about sums indexed by an infinite type.</p>",
        "id": 253776110,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631899180
    },
    {
        "content": "<p>Ah so that's actually a generalization of <code>std_simplex</code>!</p>",
        "id": 253776242,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631899217
    },
    {
        "content": "<p>Basically, we have</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs#finsupp</a>;</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a> - a dependent and more computable version;</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsum\">docs#finsum</a>;</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum\">docs#finset.sum</a>.</li>\n</ul>",
        "id": 253776299,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631899239
    },
    {
        "content": "<p>Yes.</p>",
        "id": 253776315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631899245
    },
    {
        "content": "<p>You allow <code>Œπ</code> to be infinite but require <code>f</code> to be zero outside of a finite set.</p>",
        "id": 253776379,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631899269
    },
    {
        "content": "<p>Unrelatingly, what do you think about defining <code>strict_convex_on</code>/<code>strict_concave_on</code>?</p>",
        "id": 253776553,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631899334
    },
    {
        "content": "<p>I have no time to do this. Feel free to define them.</p>",
        "id": 253776601,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631899353
    },
    {
        "content": "<p>Then you'll get a better version of mean inequalities for free.</p>",
        "id": 253776691,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631899373
    },
    {
        "content": "<p>Will do!</p>",
        "id": 253776700,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631899375
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9264\">#9264</a> is ready. It takes care of <code>is_extreme</code> and <code>is_exposed</code>.</p>",
        "id": 253873673,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1631976876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, you should have warned me about <a href=\"https://github.com/leanprover-community/mathlib/issues/9298\">#9298</a> <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 254387262,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632324824
    },
    {
        "content": "<p>Next up is <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a>! It takes care of <code>std_simplex</code> (yes, just as <a href=\"https://github.com/leanprover-community/mathlib/issues/9298\">#9298</a>) and <code>finset.center_mass</code>, which I'm renaming to <code>finset.linear_combination</code>. Ultimately, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.linear_combination\">docs#finset.linear_combination</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.affine_combination\">docs#finset.affine_combination</a> will take in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs#finsupp</a> and drop their <code>finset.</code> namespace.</p>",
        "id": 254426077,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632339567
    },
    {
        "content": "<p>We already have linear combinations with <code>finsupp</code>. They're used all over the place in <code>linear_independent</code></p>",
        "id": 254433833,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632342573
    },
    {
        "content": "<p>Wait, are they <em>defined</em>, or are they used ad hoc? I couldn't find the relevant declaration.</p>",
        "id": 254437363,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632343965
    },
    {
        "content": "<p>What do you think I should do, then?</p>",
        "id": 254437520,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632344040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/254387262\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>, you should have warned me about <a href=\"https://github.com/leanprover-community/mathlib/issues/9298\">#9298</a> <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>\n</blockquote>\n<p>Sorry about that. I was worried there were other PRs going on but I hadn't been following closely. :-(</p>",
        "id": 254441250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632345579
    },
    {
        "content": "<p>If it's made a mess of a bigger PR we can back it out.</p>",
        "id": 254441392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632345647
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent\">docs#linear_independent</a> uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.total\">docs#finsupp.total</a></p>",
        "id": 254444319,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632347213
    },
    {
        "content": "<p>We can bundle it even more into <code>(Œ± ‚Üí M) ‚Üí‚Çó[R] ((Œ± ‚Üí‚ÇÄ R) ‚Üí‚Çó[R] M)</code></p>",
        "id": 254444444,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632347285
    },
    {
        "content": "<p>For convexity, you actually need the restriction of this map to the standard simplex (which should be defined as <code>{x : Œ± ‚Üí‚ÇÄ R | (‚àÄ a, 0 ‚â§ x a) ‚àß x.sum (Œª a, id) = 1}</code>.</p>",
        "id": 254444819,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632347466
    },
    {
        "content": "<p>I expect you may need to add quite a few definitions / lemmas about <code>finsupp</code> to make manipulations of <code>finsupp</code> as convenient as those of unbundled functions and <code>finset.sum</code> (i.e., so that none of the existing proofs involving affine combinations become any more complicated as a result of using <code>finsupp</code>). I certainly expect a definition of <code>affine_combination</code> using <code>finsupp</code> will turn out to be cleaner in the end, but <code>finsupp</code> seemed harder to use than unbundled functions and <code>finset.sum</code> when I was originally defining <code>affine_combination</code>.</p>\n<p>There might be a question of whether <code>affine_combination</code> should use the affine subspace of <code>finsupp</code> where the sum of the weights is 1 (as opposed to using an arbitrary <code>finsupp</code> and a separate hypothesis about the sum of the weights on those lemmas that need it), but that could complicate things and I don't know if it would bring much practical benefit.</p>",
        "id": 254445723,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1632347909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/254441392\">said</a>:</p>\n<blockquote>\n<p>If it's made a mess of a bigger PR we can back it out.</p>\n</blockquote>\n<p>No, that's fine. I will just look petty by changing the name of the variable everywhere <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 254490105,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632380415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/254444319\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent\">docs#linear_independent</a> uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.total\">docs#finsupp.total</a></p>\n</blockquote>\n<p>Okay, so what is supposed to be the point of <code>linear_combination</code>? If it's really just <code>finsupp.total</code> without <code>finsupp</code>, maybe we can drop it altogether?</p>",
        "id": 254492611,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632381926
    },
    {
        "content": "<p>Part of the problem I suspect is that <code>finsupp.total</code> is hard to find vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.linear_combination\">docs#finset.linear_combination</a> which has a clearer name.</p>",
        "id": 254493692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632382567
    },
    {
        "content": "<p>I'm confused, what <code>linear_combination</code> are you even talking about?</p>",
        "id": 254493829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632382633
    },
    {
        "content": "<p>I renamed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.center_mass\">docs#finset.center_mass</a>. See <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a></p>",
        "id": 254498585,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632385093
    },
    {
        "content": "<p>Thanks for inadvertently affirming this choice <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 254498701,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632385155
    },
    {
        "content": "<p>Okay so <a href=\"https://github.com/leanprover-community/mathlib/issues/9356\">#9356</a> (<code>convex_on</code>, <code>concave_on</code> is also ready for review. It's independent of <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a> (<code>std_simplex</code>, <code>finset.center_mass</code>/<code>finset.linear_combination</code>) except for Jensen's inequality. If we could just decide what to do with <code>finset.center_mass</code>, this one could go through rather easily.</p>",
        "id": 254660564,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632467055
    },
    {
        "content": "<p>I'll take a look at these this afternoon.</p>",
        "id": 254664132,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632469304
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 254669805,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632472398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> I just spent some time looking over <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a> and left <a href=\"https://github.com/leanprover-community/mathlib/pull/9268#discussion_r715711362\">this comment</a>.</p>",
        "id": 254723210,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632497574
    },
    {
        "content": "<p>I have not looked at <a href=\"https://github.com/leanprover-community/mathlib/issues/9356\">#9356</a> beyond noting that it has a huge diff and technically does depend on <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a>. I note that you say that \"it's not much work to make it independent\". I suggest doing this work as it will make me review it!</p>",
        "id": 254723478,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632497683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, you have it!</p>",
        "id": 254768291,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632515613
    },
    {
        "content": "<p>It won't compile for the Jensen inequality part. I'll fix that tomorrow morning. The rest won't be affected and can be reviewed already.</p>",
        "id": 254768422,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632515668
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/9268#discussion_r715692515\">https://github.com/leanprover-community/mathlib/pull/9268#discussion_r715692515</a> is still an open remark. Are there further comments for <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a> ? Otherwise I think that one should be mergeable soonish.</p>",
        "id": 255038381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632745391
    },
    {
        "content": "<p>For me a resolution of <a href=\"https://github.com/leanprover-community/mathlib/pull/9268#pullrequestreview-763215418\">https://github.com/leanprover-community/mathlib/pull/9268#pullrequestreview-763215418</a> would help decide.</p>",
        "id": 255039076,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632745753
    },
    {
        "content": "<p>But I agree, this PR is certainly close.</p>",
        "id": 255039095,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632745763
    },
    {
        "content": "<p>To be honest, I think there are two options now:</p>\n<ul>\n<li>Merge as is and I'll change to using <code>finsupp.total</code> in another PR</li>\n<li>Change everything to use <code>finsupp.total</code></li>\n</ul>",
        "id": 255039347,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632745888
    },
    {
        "content": "<p>What's wrong with writing <code>s.sum (w ‚Ä¢ p)</code> instead of <code>finset.linear_combination p w</code> everywhere?</p>",
        "id": 255039426,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632745924
    },
    {
        "content": "<p>Missing glue <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 255039454,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632745941
    },
    {
        "content": "<p>I also think that <a href=\"https://github.com/leanprover-community/mathlib/issues/9356\">#9356</a> should be merged before now that it's been made independent from <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a>.</p>",
        "id": 255039482,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632745959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/255039454\">said</a>:</p>\n<blockquote>\n<p>Missing glue <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>Maybe I'm begin dense but your proposed definition is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">linear_combination</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">p</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>Isn't that defeq to <code>s.sum (w ‚Ä¢ p)</code>?</p>",
        "id": 255039628,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632746041
    },
    {
        "content": "<p>Basically we avoided making this definition in the linear algebra part of the library so introducing it here (with restrictive typeclasses) seems wrong to me.</p>",
        "id": 255039752,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632746088
    },
    {
        "content": "<p>Ah wait, you're still having <code>s : finset Œπ</code>. I thought you meant to switch to <code>finsupp</code>.</p>",
        "id": 255039789,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632746107
    },
    {
        "content": "<p>But what's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.total\">docs#finsupp.total</a> then?</p>",
        "id": 255039858,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632746145
    },
    {
        "content": "<p>The finitely-supported version.</p>",
        "id": 255039965,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632746180
    },
    {
        "content": "<p>Okay so I have <a href=\"https://github.com/leanprover-community/mathlib/tree/std_simplex_finsupp\">branch#std_simplex_finsupp</a> (currently a mess, feel free to help!) to change <a href=\"https://leanprover-community.github.io/mathlib_docs/find/std_simplex\">docs#std_simplex</a> to a set of <code>finsupp</code>s, hence relaxing the fintype assumption.</p>",
        "id": 255040107,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632746250
    },
    {
        "content": "<p>I should say that even as it stands I think this PR is a net positive so if others want to merge it as it stands, I will support that.</p>",
        "id": 255040109,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632746250
    },
    {
        "content": "<p>And I think that <code>affine_combination</code> and <code>liner_combination</code> shoudl be changed to using <code>finsupp</code> too.</p>",
        "id": 255040264,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632746321
    },
    {
        "content": "<p>Scope creep can destroy the best intentions. My 2c is to focus on one thing at a time.</p>",
        "id": 255040322,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632746356
    },
    {
        "content": "<p>Yes sure. So I think the answer here is to merge <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a></p>",
        "id": 255040395,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632746401
    },
    {
        "content": "<p>I'm keen to see this merged but question about <code>finset.linear_combination</code> is still unresolved, right?</p>",
        "id": 255040583,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632746489
    },
    {
        "content": "<p>I think you'll need to convince someone else to merge it or convince me that it is non-trivial to start writing <code>s.sum (w ‚Ä¢ p)</code> instead of <code>s.linear_combination p w</code>.</p>",
        "id": 255040599,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632746499
    },
    {
        "content": "<p>I'm fine with dropping <code>finset.linear_combination</code> altogether and use <code>s.sum (w ‚Ä¢ p)</code>. Then we can use <code>finsupp.total</code> when we want to switch to <code>finsupp</code>.</p>",
        "id": 255040790,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632746598
    },
    {
        "content": "<p>Right, I see the role of <code>finsupp</code> as completely orthogonal to the concerns of this PR.</p>",
        "id": 255040844,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632746623
    },
    {
        "content": "<p>The space of refactors is of high dimension <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 255040962,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632746662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span>  I've just been looking over <a href=\"https://github.com/leanprover-community/mathlib/issues/9356\">#9356</a> and I think it can be merged but I think the title is out of date because you already split out the generalisation of convexity (concavity) of functions.</p>",
        "id": 255085256,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632762971
    },
    {
        "content": "<p>Do you feel something along the lines of \"reorganise lemmas about convexity (concavity) of functions and generalise Jensen\" is about right?</p>",
        "id": 255085317,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632763001
    },
    {
        "content": "<p>What about adding plainly \"in lemmas\"?</p>",
        "id": 255085616,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632763118
    },
    {
        "content": "<p>Go for it!</p>",
        "id": 255085641,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632763129
    },
    {
        "content": "<p>I pulled the trigger.</p>",
        "id": 255085958,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632763256
    },
    {
        "content": "<p>Scary!</p>",
        "id": 255086041,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632763306
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/leanprover-community/mathlib/issues/9356\">#9356</a> is merged, I'll clean up <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a> tomorrow and hopefully it is mergeable soon.</p>",
        "id": 255116041,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632775054
    },
    {
        "content": "<p>In parallel (strictly speaking, this isn't part of the refactor), I'll define <code>strict_convex_on</code> and <code>strict_concave_on</code>.</p>",
        "id": 255116140,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632775090
    },
    {
        "content": "<p>Good thing that we split off <code>analysis.convex.function</code>. Strict convex/concave functions are about to inflate the number of line to 1.1k!</p>",
        "id": 255224239,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632838795
    },
    {
        "content": "<p>I've just opened</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9438\">#9438</a> (+194, ‚àí137): general cleanup of <code>analysis.convex.function</code></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9439\">#9439</a> (+18, ‚àí6): define strictly convex/concave functions</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9437\">#9437</a> (+531, ‚àí123) : provide all the API for strictly convex/concave functions<br>\nThe first two are independent and can be merged simultaneously.</li>\n</ul>",
        "id": 255251155,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632848326
    },
    {
        "content": "<p>I just noticed that <a href=\"https://github.com/leanprover-community/mathlib/issues/9356\">#9356</a> relaxed some <code>add_comm_group</code> typeclass assumptions to <code>add_comm_monoid</code>. I think we should possibly undo this because these monoids have a scalar action of a <code>ring</code> (in fact a <code>linear_ordered_field</code>) so they're actually groups and so this is not a more general situation and is just a bit more awkward.</p>",
        "id": 255268131,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632851844
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">module.add_comm_monoid_to_add_comm_group</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 255268282,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632851891
    },
    {
        "content": "<p>For an example of why this is more awkward note that I had to fix <a href=\"https://github.com/leanprover-community/mathlib/runs/3735088056\">this bors failure</a> with <a href=\"https://github.com/leanprover-community/mathlib/pull/9103/commits/49717380c4ea31ff2c3652b3bef223910194960e\">this commit</a>.</p>",
        "id": 255268629,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852005
    },
    {
        "content": "<p>However I claim the right fix is to revert <code>add_comm_monoid E</code> back to <code>add_comm_group E</code> <a href=\"https://github.com/leanprover-community/mathlib/blob/15f15a6e76f65b0b56938e3db831c2cde1431814/src/analysis/convex/combination.lean#L29\">here</a></p>",
        "id": 255268927,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852088
    },
    {
        "content": "<p>Do I have support to carry out this reversion?</p>",
        "id": 255269176,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852161
    },
    {
        "content": "<p>Oh okay, as soon as you have <code>ring R</code>... That's interesting.</p>",
        "id": 255269442,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632852243
    },
    {
        "content": "<p>Go for it. It might also simplify the structure of the files.</p>",
        "id": 255269540,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632852279
    },
    {
        "content": "<p>Exactly, <code>x - y = x + (-1)‚Ä¢y</code>.</p>",
        "id": 255269545,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852281
    },
    {
        "content": "<p>OK I'll push that fix for this file as part of <a href=\"https://github.com/leanprover-community/mathlib/issues/9103\">#9103</a></p>",
        "id": 255269648,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852317
    },
    {
        "content": "<p>Would you be available to hunt down any other examples of this introduced in <a href=\"https://github.com/leanprover-community/mathlib/issues/9356\">#9356</a>?</p>",
        "id": 255269727,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852344
    },
    {
        "content": "<p><del>Actually I think that was the only instance of this (introduced in <a href=\"https://github.com/leanprover-community/mathlib/issues/9356\">#9356</a>) so once <a href=\"https://github.com/leanprover-community/mathlib/issues/9103\">#9103</a> lands all should be well again <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></del></p>\n<p>This looks suspicious: <a href=\"https://github.com/leanprover-community/mathlib/pull/9356/files#diff-2c41777d2dc24191912a0713d599feb75a13f1f12ad4978dbba711b15e5d228bR461\">https://github.com/leanprover-community/mathlib/pull/9356/files#diff-2c41777d2dc24191912a0713d599feb75a13f1f12ad4978dbba711b15e5d228bR461</a></p>",
        "id": 255270105,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852481
    },
    {
        "content": "<p>And this <a href=\"https://github.com/leanprover-community/mathlib/pull/9356/files#diff-2c41777d2dc24191912a0713d599feb75a13f1f12ad4978dbba711b15e5d228bR605\">https://github.com/leanprover-community/mathlib/pull/9356/files#diff-2c41777d2dc24191912a0713d599feb75a13f1f12ad4978dbba711b15e5d228bR605</a></p>",
        "id": 255270441,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852596
    },
    {
        "content": "<p>Last one I think: <a href=\"https://github.com/leanprover-community/mathlib/pull/9356/files#diff-2c41777d2dc24191912a0713d599feb75a13f1f12ad4978dbba711b15e5d228bR644\">https://github.com/leanprover-community/mathlib/pull/9356/files#diff-2c41777d2dc24191912a0713d599feb75a13f1f12ad4978dbba711b15e5d228bR644</a></p>",
        "id": 255270525,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852613
    },
    {
        "content": "<p>I should have flagged these in review. Sorry about that.</p>",
        "id": 255270654,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632852664
    },
    {
        "content": "<p>Sorry these links are broken. What did you mean to show me?</p>",
        "id": 255283761,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632857359
    },
    {
        "content": "<p>I think they work if you click ‚ÄúLoad diff‚Äù on the file <code>analysis/convex/function.lean</code>. If you like you can ignore this and I‚Äôll create a PR tomorrow morning!</p>",
        "id": 255284263,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632857541
    },
    {
        "content": "<p>Okay, I'll wait for the PR!</p>",
        "id": 255284421,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632857616
    },
    {
        "content": "<p>Just so you know, this should be an easy fix as I've structured the files according to the instance on <code>ùïú</code>. So the fix should be as simple as looking for <code>section ordered_ring</code>, <code>section linear_ordered_field</code>, ... and modifying the <code>variables</code> that comes just after.</p>",
        "id": 255284692,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632857714
    },
    {
        "content": "<p>Great, that should make it very easy.</p>",
        "id": 255285183,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632857920
    },
    {
        "content": "<p>Or just look for <code>add_comm_monoid E</code>, <code>add_comm_monoid F</code>. Also very easy.</p>",
        "id": 255285274,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632857961
    },
    {
        "content": "<p>Would it make sense to put all the material about strictly convex functions in a new file?</p>",
        "id": 255321809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632874695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/255284421\">said</a>:</p>\n<blockquote>\n<p>Okay, I'll wait for the PR!</p>\n</blockquote>\n<p>I just created <a href=\"https://github.com/leanprover-community/mathlib/issues/9442\">#9442</a> for this. In the end I left the <code>monoid</code>s appearing here <a href=\"https://github.com/leanprover-community/mathlib/blob/d7abdff7d5abd82d0fbdf795e2a0766150e06c42/src/analysis/convex/function.lean#L461-L467\">https://github.com/leanprover-community/mathlib/blob/d7abdff7d5abd82d0fbdf795e2a0766150e06c42/src/analysis/convex/function.lean#L461-L467</a> unchanged because there is no compatibility between the action of the scalars and the structure on the types <code>E</code>, <code>Œ≤</code> (which incidentally suggests to me that there's room for improvement here).</p>",
        "id": 255356078,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1632901450
    },
    {
        "content": "<p>Great!</p>",
        "id": 255357439,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632902303
    },
    {
        "content": "<p>The room for improvement you're talking about is replacing <code>add_comm_monoid E</code> by <code>has_zero E</code>,<code>has_add E</code> (and same in the definition of <code>convex</code>), I think.</p>",
        "id": 255357509,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632902361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/255321809\">said</a>:</p>\n<blockquote>\n<p>Would it make sense to put all the material about strictly convex functions in a new file?</p>\n</blockquote>\n<p>I don't think so. The stuff is <strong>really</strong> similar and all the variants of the same lemma deserve to be a few lines apart. Instead, we could split along other criteria, like Jensen's stuff + maximum principle can earn its own file (albeit it's not many lines).</p>",
        "id": 255358483,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632902895
    },
    {
        "content": "<p>Without Jensen and maximum principle, we're at 993 lines. If we further remove the slope stuff (which is used for convexity from positive second derivative), we get down to 792.</p>",
        "id": 255359556,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632903502
    },
    {
        "content": "<p>For comparison, <code>analysis.convex.basic</code> was 1723 lines long before I started the refactor <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 255360053,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632903793
    },
    {
        "content": "<p>Just opened <a href=\"https://github.com/leanprover-community/mathlib/issues/9444\">#9444</a> (+114, ‚àí104) and <a href=\"https://github.com/leanprover-community/mathlib/issues/9445\">#9445</a> (+128, ‚àí102)! They do exactly the two splits I just proposed.</p>",
        "id": 255400486,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632922809
    },
    {
        "content": "<p>Thanks! <a href=\"https://github.com/leanprover-community/mathlib/issues/9445\">#9445</a> currently has merge conflicts.</p>",
        "id": 255408554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632925664
    },
    {
        "content": "<p>Solved <span aria-label=\"tools\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"tools\">:tools:</span></p>",
        "id": 255408984,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632925819
    },
    {
        "content": "<p>Does it make sense to move <code>convex_hull</code> to something like <code>analysis.convex.hull</code>?</p>",
        "id": 255590321,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633014403
    },
    {
        "content": "<p>or do we declare that <code>analysis.convex.basic</code> is short enough?</p>",
        "id": 255590602,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633014492
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/1066\">1066</a> is of course a very important number, but I don't think it hurts to make that file a bit shorter still. So yes, please split it further.</p>",
        "id": 255597416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633017030
    },
    {
        "content": "<p>I'm doing convex cones now.</p>",
        "id": 255628622,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633028250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> I was just having a quick look at <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a> again but I see you've marked it WIP (I guess till you fix the build). So I'm going to wait for now unless you'd like more input right now. OK?</p>",
        "id": 255862024,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633172118
    },
    {
        "content": "<p>Yeah, I'm still pondering. Sorry I should have marked it WIP a bit earlier.</p>",
        "id": 255862111,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633172200
    },
    {
        "content": "<p>No problem at all! I'll be ready when you are.</p>",
        "id": 255862122,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633172222
    },
    {
        "content": "<p>Incidentally I've just created <a href=\"https://github.com/leanprover-community/mathlib/issues/9499\">#9499</a> which will conflict but not much.</p>",
        "id": 255862147,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633172268
    },
    {
        "content": "<p>Oh yeah, maybe merge that before I do anything.</p>",
        "id": 255862202,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633172300
    },
    {
        "content": "<p>I'm happy either way, the conflicts will be simple to fix.</p>",
        "id": 255862212,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633172316
    },
    {
        "content": "<p>Proving <code>convex_hull_range_eq_exists_affine_combination</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/9499\">#9499</a> almost convinced me to attempt my own version of <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a> where we nuke <code>center_mass</code> and replace it <code>affine_combination</code> but in the end I decided that can wait.</p>",
        "id": 255862342,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633172420
    },
    {
        "content": "<p>So long as you are there, could you prove the following lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">affine_independent</span> <span class=\"bp\">ùïú</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">affine_span</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 255862343,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633172420
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Let me see. I'm about to head out for a run but I'll give it a go!</p>",
        "id": 255862378,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633172450
    },
    {
        "content": "<p>This is the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_independent\">docs#convex_independent</a>, but made affine.</p>",
        "id": 255862384,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633172463
    },
    {
        "content": "<p>Once we have it, I can make <code>affine.independent.convex_independent</code> a one-liner!</p>",
        "id": 255862406,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633172493
    },
    {
        "content": "<p>(feel free to change to change the typeclasses, they are probably not the full generality)</p>",
        "id": 255862477,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633172541
    },
    {
        "content": "<p>OK I've fired up VSCode and I'll see what I think. Here it is again in MWE form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.independent</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">affine_independent</span> <span class=\"bp\">ùïú</span> <span class=\"n\">p</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">affine_span</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255862606,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633172670
    },
    {
        "content": "<p>Sorry, outatime for now!</p>",
        "id": 255863285,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633173353
    },
    {
        "content": "<p>Here, <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span></p>",
        "id": 256714823,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633686675
    },
    {
        "content": "<p>What would be your definition of convex space?</p>",
        "id": 256714864,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633686704
    },
    {
        "content": "<p>Well, if we decided we could restrict to the case of needing negation I think the following:</p>",
        "id": 256714958,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633686739
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.combination</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">affine</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">affine_space</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convex</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">‚¶Ñ,</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">y</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">‚¶Ñ,</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">affine_map.line_map</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 256715027,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633686774
    },
    {
        "content": "<p>No, I meant a convex <strong>space</strong> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 256715083,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633686813
    },
    {
        "content": "<p>Am I right in thinking there isn't one kind of convex space but a hierarchy of them? Supposedly every kind of scalar action between <code>has_scalar</code> and <code>module</code> gives rise to a different kind of convex space.</p>",
        "id": 256715202,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633686865
    },
    {
        "content": "<p>What's a convex space?</p>",
        "id": 256715404,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633686967
    },
    {
        "content": "<p>A space where you can define convexity.</p>",
        "id": 256715766,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633687180
    },
    {
        "content": "<p>I don't have many references. That's the problem. Here's something on ncatlab: <a href=\"https://ncatlab.org/nlab/show/convex+space\">https://ncatlab.org/nlab/show/convex+space</a></p>",
        "id": 256716060,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633687316
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 256716210,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633687400
    },
    {
        "content": "<p>So basically it's a space which has <code>line_map</code>.</p>",
        "id": 256716386,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633687505
    },
    {
        "content": "<p>Then my definition would be the same!</p>",
        "id": 256716429,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633687530
    },
    {
        "content": "<p>More like a <code>segment_map</code> because you don't care about what's not between the points.</p>",
        "id": 256716449,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633687553
    },
    {
        "content": "<p>Right.</p>",
        "id": 256716528,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633687590
    },
    {
        "content": "<p>Do you think we should put convex combinations as a field of <code>convex_space</code> or construct it from <code>segment_map</code>?</p>",
        "id": 256716769,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633687746
    },
    {
        "content": "<p>I don't know. My null hypothesis would be to construct it from <code>segment_map</code> but I would not have a strong view here.</p>",
        "id": 256717290,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633688083
    },
    {
        "content": "<p>I think that the main difficulty with <code>convex_space</code> is not to define it and provide instances for an <code>affine_space</code> and a <code>module</code>. The main difficulty is that we unavoidably get a TC diamond for a <code>convex_space real E</code>: the instance going through <code>affine_space</code> can't be defeq to the instance going through <code>module</code>.</p>",
        "id": 256752840,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633705203
    },
    {
        "content": "<p>So, only one of these instances can be a global instance.</p>",
        "id": 256752963,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633705246
    },
    {
        "content": "<p>And more diamonds: probably you want to define a <code>convex_space</code> structure on the product of two spaces etc. If you get the product of two modules (or affine spaces), then probably the <code>segment_map</code> coming from <code>prod</code> won't be defeq to the <code>segment_map</code> coming from <code>module</code>/<code>affine_space</code>.</p>",
        "id": 256753173,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633705334
    },
    {
        "content": "<p>Oh, I hadn't thought about <code>prod</code>. The module instance for <code>prod</code> is well-behaved, right? I know you probably want <code>affine_space</code> -&gt; <code>convex_space</code> to be the global instance instead of <code>module</code> -&gt; <code>convex_space</code>, but I have the instinct that the <code>module</code> -&gt; <code>convex_space</code> instance is cleaner.</p>",
        "id": 256757477,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633707027
    },
    {
        "content": "<p>The best way to verify this is to make a one-field typeclass (just <code>segment_map</code>, no axioms), add instances, and try prove equality by <code>rfl</code>.</p>",
        "id": 256758104,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633707297
    },
    {
        "content": "<p>Will do!</p>",
        "id": 256758600,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633707506
    }
]