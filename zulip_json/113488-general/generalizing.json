[
    {
        "content": "<p>In VSCode, in a line like</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"kn\">using</span> <span class=\"n\">with_top_nat_induction</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">Itop</span> <span class=\"n\">generalizing</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>the keywords <code>using</code> and <code>with</code> are in blue, but not <code>generalizing</code>. Is there an easy fix to this?</p>",
        "id": 163687865,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1555619274
    },
    {
        "content": "<p>Same in Zulip, by the way</p>",
        "id": 163687920,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1555619293
    },
    {
        "content": "<p>The zulip highlighting is not so easy; that's coming from the third party pygments repo, although you could try submitting a PR. The vscode syntax highlighting is in <a href=\"https://github.com/leanprover/vscode-lean/blob/master/syntaxes/lean.json\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/syntaxes/lean.json\">https://github.com/leanprover/vscode-lean/blob/master/syntaxes/lean.json</a>, so you can add \"generalizing\" there</p>",
        "id": 163688149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555619521
    },
    {
        "content": "<p>this is not the only missing blue thing IIRC...</p>",
        "id": 163689203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555620384
    },
    {
        "content": "<p>indeed; my general impression is that most lean highlighting things are very out of date (e.g. lean 2)</p>",
        "id": 163689258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555620431
    },
    {
        "content": "<p>indeed</p>",
        "id": 163689291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555620470
    },
    {
        "content": "<p>and of course they are static, so they can't adapt to locally defined user commands and new tokens</p>",
        "id": 163689344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555620485
    },
    {
        "content": "<p>Long term, one might want the VSCode syntax highlighting to be partially based on information from the Lean compiler, like in the Idris REPL or Agda's HTML output. In that case, the parsing code for tactics could mark which words are \"keywords\" and it could automatically highlight those in blue without adding them to a static global list. Bit of work, though.</p>",
        "id": 163699720,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555630395
    },
    {
        "content": "<p>The main thing is that all of this type of stuff requires changes to core lean, which is currently a bit taboo since mainline development has been frozen.</p>",
        "id": 163699802,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555630471
    },
    {
        "content": "<p>Yeah, I think my suggestion is more of a Lean 4 suggestion</p>",
        "id": 163699812,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555630491
    },
    {
        "content": "<p>(Secretly I'm hoping <a href=\"https://github.com/leanprover-community/lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a> gets some traction in the meantime.)</p>",
        "id": 163699931,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555630603
    },
    {
        "content": "<p>I guess it's possible for the vscode syntax highlighter to communicate with the lean server? Not sure what is required in the <code>vscode-lean</code> extension for that</p>",
        "id": 163702266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555633316
    },
    {
        "content": "<blockquote>\n<p>(Secretly I'm hoping <a href=\"https://github.com/leanprover-community/lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a> gets some traction in the meantime.)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> If you want traction, I think we first need to merge some of the PRs and to make some binary releases.</p>",
        "id": 163715140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555652452
    },
    {
        "content": "<p>we're building up a healthy number of PRs in the meantime. We still need to work out the kinks in the build pipeline, but the progress has been encouraging</p>",
        "id": 163715701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555653429
    },
    {
        "content": "<p>I'm getting the nightly release working again. Then we can have a branch of mathlib that we can routinely test against new versions.</p>",
        "id": 163737787,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555683059
    }
]