[
    {
        "content": "<p>If I mark a recursive function <code>@[inline]</code>, will it get inlined? I'm asking because afaik some compilers don't support recursive inlining even in relatively straightforward cases. (My use case is <code>meta</code>, in case that affects the answer.)</p>",
        "id": 207039917,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597526445
    },
    {
        "content": "<p>Dumb question.  It seems from this stack overflow that recursive inclining is something like hard coding the first few cases up to a fixed depth before calling the recursive function.  Is that what you had in mind?  <a href=\"https://stackoverflow.com/questions/190232/can-a-recursive-function-be-inline\">https://stackoverflow.com/questions/190232/can-a-recursive-function-be-inline</a></p>",
        "id": 207044543,
        "sender_full_name": "Jason Rute",
        "timestamp": 1597533703
    },
    {
        "content": "<p>No, my use case is much simpler than general recursive inlining (as I realised when considering your question, so thanks for that). I have definitions of the form</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x&#39;</span>\n</code></pre></div>\n\n\n<p>and I'd like to be sure that the code generated for <code>g</code> is the same as if I'd replaced <code>f</code> by its definition manually. In GHC Haskell (which doesn't do recursive inlining ever), I think I'd have to write <code>f</code> as a non-recursive function with a recursive <code>where</code> clause, but Lean doesn't have those.</p>",
        "id": 207044970,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597534509
    },
    {
        "content": "<p>Why not write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">f&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 207045027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597534596
    },
    {
        "content": "<p>you could also use a tactic to perform the copy paste job</p>",
        "id": 207045084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597534725
    },
    {
        "content": "<p>Let's get concrete; I'm getting lost in my own abstractions. Here's a simpler version of the code I'm writing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">expr</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">match_pi</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">body</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"c1\">-- This is the recursive &#39;f&#39;.</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">count_binders</span> <span class=\"o\">(</span><span class=\"n\">match_binder</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">match_binder</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">count_binders</span> <span class=\"n\">body</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- This is &#39;g&#39;, where &#39;f&#39; should get inlined.</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">count_pis</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">count_binders</span> <span class=\"n\">match_pi</span>\n</code></pre></div>\n\n\n<p>This should ideally generate the same code as this hand-inlined version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">count_pis&#39;</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">count_pis&#39;</span> <span class=\"n\">body</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Optimisation steps to get there:</span>\n\n<span class=\"cm\">meta def count_pis := count_binders match_pi</span>\n\n<span class=\"cm\">==&gt; [inline count_binders]</span>\n\n<span class=\"cm\">meta def tmp : expr → ℕ := λ e,</span>\n<span class=\"cm\">match match_pi e with</span>\n<span class=\"cm\">| none := 0</span>\n<span class=\"cm\">| some body := tmp body + 1</span>\n<span class=\"cm\">end</span>\n\n<span class=\"cm\">==&gt; [inline match_pi and beta-reduce]</span>\n\n<span class=\"cm\">meta def tmp : expr → ℕ := λ e,</span>\n<span class=\"cm\">match (match e with | (pi _ _ _ body) := some body | _ := none end) with</span>\n<span class=\"cm\">| none := 0</span>\n<span class=\"cm\">| some body := tmp body + 1</span>\n<span class=\"cm\">end</span>\n\n<span class=\"cm\">==&gt; [nested matches (&quot;case-of-case&quot;)]</span>\n\n<span class=\"cm\">meta def tmp : expr → ℕ := λ e,</span>\n<span class=\"cm\">match e with</span>\n<span class=\"cm\">| (pi _ _ _ body) := tmp body + 1</span>\n<span class=\"cm\">| _ := 0</span>\n<span class=\"cm\">end</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>Mario, your suggestion, if I understand it correctly, achieves this goal, but only for the first iteration of the loop:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">count_binders&#39;</span> <span class=\"o\">(</span><span class=\"n\">match_binder</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">match_binder</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">count_binders&#39;</span> <span class=\"n\">body</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">count_binders&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">match_binder</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">match_binder</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">count_binders&#39;</span> <span class=\"n\">match_binder</span> <span class=\"n\">body</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">count_pis&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">count_binders&#39;&#39;</span> <span class=\"n\">match_pi</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Optimisation steps for count_pis&#39;&#39;:</span>\n\n<span class=\"cm\">meta def count_pis&#39;&#39; := count_binders&#39;&#39; match_pi</span>\n\n<span class=\"cm\">==&gt; [inline count_binders&#39;&#39;]</span>\n\n<span class=\"cm\">meta def count_pis&#39;&#39; := λ e,</span>\n<span class=\"cm\">match match_pi e with</span>\n<span class=\"cm\">| none := 0</span>\n<span class=\"cm\">| some body := count_binders&#39; match_binder body + 1</span>\n<span class=\"cm\">end</span>\n\n<span class=\"cm\">==&gt; [inline match_binder and beta-reduce]</span>\n\n<span class=\"cm\">meta def count_pis&#39;&#39; := λ e,</span>\n<span class=\"cm\">match (match e with | (pi _ _ _ body) := some body | _ := none end) with</span>\n<span class=\"cm\">| none := 0</span>\n<span class=\"cm\">| some body := count_binders&#39; match_pi body + 1</span>\n<span class=\"cm\">end</span>\n\n<span class=\"cm\">==&gt; [nested matches]</span>\n\n<span class=\"cm\">meta def count_pis&#39;&#39; := λ e,</span>\n<span class=\"cm\">match e with</span>\n<span class=\"cm\">| (pi _ _ _ body) := count_binders&#39; match_pi body + 1</span>\n<span class=\"cm\">| _ := 0</span>\n<span class=\"cm\">end</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>All iterations except the first will still call <code>count_binders'</code>, which in turn calls <code>match_pi</code>, so we've gained little.</p>",
        "id": 207073649,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597587937
    },
    {
        "content": "<p>I'd call this specialization more than inlining</p>",
        "id": 207073839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597588229
    },
    {
        "content": "<p>Fair. But then I'd call specialisation a form of inlining. :P</p>",
        "id": 207073915,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597588405
    },
    {
        "content": "<p>Well, you're specializing <code>count_binders</code>, presumably with the goal of next inlining <code>match_pi</code> (otherwise there's no gain)</p>",
        "id": 207073972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597588489
    },
    {
        "content": "<p>If this is the usual terminology, sure, I'll call it specialisation.</p>",
        "id": 207074415,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597589332
    },
    {
        "content": "<p>The inliner doesn't work across definitions generated by the equation compiler (<code>match</code>, <code>|</code>).   Aside from that, the <code>@[inline]</code> does what you want.  That is, after preprocessing, all references to definitions with <code>@[inline]</code> should be gone.</p>",
        "id": 207113095,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597648498
    },
    {
        "content": "<p>It should work if you write <code>count_binders</code> using <code>option.elim</code> or <code>option.rec</code> (because then it's a normal definition and can be substituted by the inliner).</p>",
        "id": 207113187,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597648563
    },
    {
        "content": "<p>That's very interesting, thanks! Then I should be able to get it to do what I want.</p>",
        "id": 207128411,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597661001
    },
    {
        "content": "<p>Followup <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>: does Lean actually optimise nested matching? Because otherwise the inlining doesn't do too much anyway.</p>",
        "id": 207135453,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597666386
    },
    {
        "content": "<p>Or rather, nested eliminator applications. Silly example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">option</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">none</span> <span class=\"n\">some</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">id</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Should optimise to: -/</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 207136348,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597667051
    },
    {
        "content": "<p>I'm afraid that there enough bugs there that you can't rely on it.  <code>set_option trace.compiler.preprocess true</code> and <code>set_option trace.compiler.optimize_bytecode true</code> are your friends.</p>",
        "id": 207142911,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597670614
    },
    {
        "content": "<p>Thanks again! When I rewrite everything without the equation compiler, inlining seems to work as intended. Unfortunately,  my use case is in the <code>tactic</code> monad and I get a lot of separately-compiled lambdas. This blocks any followup simplification, so the inlining doesn't do much. I think I'll just live with the inefficiency.</p>",
        "id": 207282830,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597768610
    }
]