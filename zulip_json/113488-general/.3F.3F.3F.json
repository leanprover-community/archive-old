[
    {
        "content": "<p>What am I supposed to investigate when Lean complains that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">fderiv</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">continuous_multilinear_map</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">continuous_multilinear_map</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and when the output with <code>pp.all</code> makes 174 lines, but still exactly identical between the type and the expected type?</p>",
        "id": 187754292,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1581244621
    },
    {
        "content": "<p>Can you try and get <code>convert</code> to tell you more information?</p>",
        "id": 187754393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581244805
    },
    {
        "content": "<p>I spent some time staring at <code>pp.all</code> output yesterday convinced that two terms were defeq, but it turned out that an errant <code>have</code> instead of <code>let</code> meant that some definition had been forgotten. The terms didn't look identical though. <code>pp.all</code> still gives you some <code>...</code> sometimes, right?</p>",
        "id": 187754403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581244863
    },
    {
        "content": "<p>I can not use <code>convert</code> in this situation. The offending line is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fderiv</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)))</span>\n      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">fderiv_const</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>where Lean complains that the left and right hand side don't have the same type, although with <code>pp.all</code> the two types it gives to me are the same.</p>\n<p>I got away with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">fderiv</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">))),</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">fderiv_const</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</pre></div>",
        "id": 187756923,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1581250569
    },
    {
        "content": "<p>If you really want to see if/how the types of the terms differ, you can compare the raw expr structures. Something like this; replace <code>f 0</code> with one side of the equality.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187757930,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581252796
    },
    {
        "content": "<p>I bet Gauss never had to do this</p>",
        "id": 187765189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581267305
    },
    {
        "content": "<p>I seem to have upset the lean gods... <a href=\"/user_uploads/3121/D6MzztwEVzUj6GoevsPDrPx2/image.png\">image.png</a> That's my prompt to sleep and worry about what the hell  is happening to my computer tomorrow</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/D6MzztwEVzUj6GoevsPDrPx2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/D6MzztwEVzUj6GoevsPDrPx2/image.png\"></a></div>",
        "id": 235120377,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618800079
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 235120449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618800196
    },
    {
        "content": "<p>that's literally it; restarting server didn't help. just giving up on it till tomororw :b</p>",
        "id": 235120463,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618800236
    },
    {
        "content": "<p>post the code</p>",
        "id": 235120466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618800242
    },
    {
        "content": "<p>not a picture of the code</p>",
        "id": 235120504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618800247
    },
    {
        "content": "<p><code>lemma test (f : nat → nat) : false := sorry</code></p>",
        "id": 235120540,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618800274
    },
    {
        "content": "<p>Can't reproduce. I suggest progressively replacing things: restart the server, restart VSCode, delete the file and recreate it, run <code>leanproject get-mathlib-cache</code>, delete your caches ~/.mathlib, delete caches in ~/.elan, reinstall elan. I would suspect that you won't need to get to the end of that list.</p>",
        "id": 235120656,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618800447
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (I hope this survives Zulip copy&amp;paste)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">​→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 235134951,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618815027
    },
    {
        "content": "<p>There's a U+200B (zero width space) in front of the arrow</p>",
        "id": 235135207,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1618815213
    },
    {
        "content": "<p>I don't know if Eric had the same invisible character, but I bet his problem was due to Unicode shenanigans as well.</p>",
        "id": 235135308,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618815273
    },
    {
        "content": "<p>may have been it to be fair; I have <a href=\"https://github.com/samhocevar/wincompose\">WinCompose</a> (highly recommended btw!) which has bindings to zwsp</p>",
        "id": 235148540,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618822838
    },
    {
        "content": "<p>honestly more than anything though it was funny :b I assumed it was a transient issue and after the overnight shutdown it's resolved itself, for what it's worth</p>",
        "id": 235148612,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618822872
    }
]