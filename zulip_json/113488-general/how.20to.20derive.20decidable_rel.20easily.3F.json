[
    {
        "content": "<p>say that I have these definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">sign_type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"bp\">|</span> <span class=\"n\">pos</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">sign_type</span> <span class=\"bp\">→</span> <span class=\"n\">sign_type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"n\">_</span>     <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">neg</span>  <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">pos</span>  <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span>   <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"n\">zero</span>  <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"n\">pos</span>   <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>clearly, this is a decidable_rel. I don't particularly want to list out all 9 cases again though, to do <code>of_true .../of_false ...</code>. is there some automatic way to generate <code>decidable_rel</code> for these sorts of declarations?</p>",
        "id": 276859296,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648467234
    },
    {
        "content": "<p>Your MWE doesn't compile but does <code>@[derive decidable]</code> work?</p>",
        "id": 276859650,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648467455
    },
    {
        "content": "<p><code>open sign_type</code> makes it work</p>",
        "id": 276859735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648467491
    },
    {
        "content": "<p>oops, sorry</p>",
        "id": 276859869,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648467562
    },
    {
        "content": "<p>neither <code>@[derive decidable]</code> nor <code>@[derive decidable_rel]</code> work</p>",
        "id": 276859913,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648467594
    },
    {
        "content": "<p>What's the import for the decidable derive handler?</p>",
        "id": 276859969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648467616
    },
    {
        "content": "<p>Probably <code>import tactic</code> is enough</p>",
        "id": 276860020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648467651
    },
    {
        "content": "<p>You might also want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">sign_type</span> <span class=\"bp\">→</span> <span class=\"n\">sign_type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">neg</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_pos</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">a</span> <span class=\"n\">pos</span>\n</code></pre></div>",
        "id": 276860206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648467783
    },
    {
        "content": "<p>Followed by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">le</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"o\">(</span><span class=\"n\">le.of_neg</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">le.zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"o\">(</span><span class=\"n\">le.of_pos</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 276860477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648467961
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">le</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">is_true</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 276860642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648468058
    },
    {
        "content": "<p>That last proof works for both definitions of <code>le</code></p>",
        "id": 276860977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648468239
    },
    {
        "content": "<p>How does <code>@[derive decidable_eq]</code> work today? Which derive handler is it using? (edit: ah, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.decidable_eq_derive_handler\">docs#tactic.decidable_eq_derive_handler</a>)</p>",
        "id": 276861855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648468764
    },
    {
        "content": "<p>I ended up going with the inductive approach and <code>λ a b, by cases a; cases b; exact is_false (by rintro ⟨⟩) &lt;|&gt; exact is_true (by constructor)</code>, but it would be nice if there was some other way to do this! I assume the metaprogramming thread is debugging this?</p>",
        "id": 276875250,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648475182
    },
    {
        "content": "<p>Honestly, I do not understand much of decidable, but I am always very fond of Johan's suggestion in one of the counterexamples.  Is what below useful?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--  The three element monoid. -/</span>\n<span class=\"kd\">@[derive [decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">sign_type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">sign_type</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inhabited</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">sign_type</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">sign_type</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">sign_type</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pos</span><span class=\"o\">⟩</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`-</span><span class=\"mi\">1</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span>\n\n<span class=\"sd\">/-- The order on `sign_type` is the one induced by the natural order on the image of `aux1`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">aux1</span> <span class=\"o\">:</span> <span class=\"n\">sign_type</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span>  <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"sd\">/-- A tactic to prove facts by cases. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">boom</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">⟨⟩}</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux1_inj</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">aux1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">boom</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">sign_type</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_order.lift</span> <span class=\"n\">aux1</span> <span class=\"bp\">$</span> <span class=\"n\">aux1_inj</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">has_le.le</span> <span class=\"o\">:</span> <span class=\"n\">sign_type</span> <span class=\"bp\">→</span> <span class=\"n\">sign_type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 276882601,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648478290
    },
    {
        "content": "<p>(Although I realize that the choice of -1 as notation for <code>neg</code> means that <code>-1 : ℤ</code> will not work, but <code>- 1 : ℤ</code> does!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> )</p>",
        "id": 276884208,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648478915
    },
    {
        "content": "<p>I just gave it a <code>has_neg</code> instance, that worked better I think! This is a neat idea, too</p>",
        "id": 276885009,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648479246
    },
    {
        "content": "<p>Slowly, this is crawling to become <code>zmod 3</code>...</p>",
        "id": 276885638,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648479476
    },
    {
        "content": "<p>Probably closer to <code>fin' 3</code></p>",
        "id": 276885759,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648479508
    },
    {
        "content": "<p>Sure, although, unless addition starts playing a role, it will be difficult to tell!</p>",
        "id": 276886534,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648479743
    },
    {
        "content": "<p>I mean, it is, it was just suggested in <a href=\"https://github.com/leanprover-community/mathlib/pull/12835\">#12835</a> to make it a separate type</p>",
        "id": 276888061,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648480303
    },
    {
        "content": "<p>because <code>sign : \\a \\to fin 3</code> is weird</p>",
        "id": 276888195,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648480354
    }
]