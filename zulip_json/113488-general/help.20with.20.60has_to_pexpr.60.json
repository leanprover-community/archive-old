[
    {
        "content": "<p>I'm not sure how to construct <code>has_to_pexpr</code> instances, and there are few useful examples around. In particular, I'd like to make the following work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"n\">nat_pexpr</span> <span class=\"o\">:</span> <span class=\"n\">has_to_pexpr</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">of_expr</span> <span class=\"err\">∘</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">reflect</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span>\n<span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"n\">int_pexpr</span> <span class=\"o\">:</span> <span class=\"n\">has_to_pexpr</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">of_expr</span> <span class=\"err\">∘</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">reflect</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">turkle</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">M</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"err\">%%</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n   <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"err\">%%</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">M</span><span class=\"o\">),</span>\n   <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"err\">%%</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">M</span><span class=\"o\">),</span>\n   <span class=\"n\">assertv</span> <span class=\"bp\">`</span><span class=\"n\">w</span> <span class=\"n\">t</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"n\">skip</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">turkle</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- This produces `w : 2^5 - 1 = int.of_nat 31`,</span>\n  <span class=\"c1\">-- but I want:</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">31</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198536535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590241604
    },
    {
        "content": "<p>I guess this is the <code>int_pexpr</code> instance's fault, but I don't know what to replace it with.</p>",
        "id": 198536605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590241686
    },
    {
        "content": "<p>Oh... maybe I undestand. I just have to calculate the binary digits of my integer, and build the <code>pexpr</code> out of <code>bit0</code> and <code>bit1</code> directly? (And put in a negative sign if the integer is negative...)</p>",
        "id": 198536894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590242155
    },
    {
        "content": "<p>Does this exist somewhere already? It seems like the sort of thing that someone would have wanted before me.</p>",
        "id": 198536935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590242177
    },
    {
        "content": "<p>Alternatively, adding <code>`[simp at w]</code> at the end of <code>turkle</code> achieves the desired result, so I'm going to leave this for now.</p>",
        "id": 198537541,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590243352
    },
    {
        "content": "<p>Presumably whatever is building <code>int.of_nat 31</code> already knows how to do the <code>bit0</code>/<code>bit1</code> part.</p>",
        "id": 198537596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590243422
    },
    {
        "content": "<p>You may want to look at the <code>has_reflect</code> instance for <code>nat</code>. I believe that's where the <code>bit0 / bit1</code> logic is. My guess is that <code>has_reflect</code> on <code>int</code> is done by pattern matching on the <code>int</code>, reflecting the <code>nat</code> and then applying the constructor. Instead, you can treat the <code>int</code> as a number in its own right and do the binary division and add a minus when necessary</p>",
        "id": 198544086,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1590254422
    },
    {
        "content": "<p>the <code>eval_expr</code> on the first line is completely unnecessary, just do <code>let M := 2^p-1</code></p>",
        "id": 198548977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590262939
    }
]