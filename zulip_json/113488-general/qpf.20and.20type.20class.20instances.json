[
    {
        "content": "<p>checking out qpf's I built a few things, but i'm not sure how to deal with typeclasses<br>\nI managed to invoke repr, but couldn't figure out if there is a way to build an instance has_repr alt,<br>\nif anyone has any ideas</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fix</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">equations</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fix</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">data</span> <span class=\"n\">alt</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">alt</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">alt</span>\n\n<span class=\"n\">def</span> <span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">from_l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">from_r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">alt</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">γ</span>\n<span class=\"o\">:=</span> <span class=\"n\">it</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">from_l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">from_r</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lrepr</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">rrepr</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">alt</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">it</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"s2\">&quot;alt.l &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"s2\">&quot;alt.r &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Don&#39;t know how to synthesize placeholder content</span>\n<span class=\"cm\"> or type class instances if i try to add type class instances like above. -/</span>\n<span class=\"c1\">-- instance repr : has_repr alt := ⟨alt.repr⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">l</span> <span class=\"s2\">&quot;foo&quot;</span><span class=\"o\">,</span> <span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">alt</span> <span class=\"n\">string</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">l</span> <span class=\"s2\">&quot;foo&quot;</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">repr</span> <span class=\"n\">repr</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">r</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 162752781,
        "sender_full_name": "matt rice",
        "timestamp": 1554639654
    },
    {
        "content": "<p>There’s not much meta information available able those data types but I’m planning on adding it. That should allow you to derive type classes like <code>has_repr</code></p>",
        "id": 162758473,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554649354
    },
    {
        "content": "<p>Sorry, I just understood you were asking something different.</p>",
        "id": 162758718,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554649686
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">has_repr</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">alt</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨@</span><span class=\"n\">alt</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span>\n</pre></div>",
        "id": 162758828,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554649827
    },
    {
        "content": "<p>instead of the instance you commented out</p>",
        "id": 162758830,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554649835
    },
    {
        "content": "<p>You were running into issues because the type parameters of <code>alt</code> are marked as implicit but they cannot be inferred.</p>",
        "id": 162758846,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554649877
    },
    {
        "content": "<p>I recommend you declare <code>alt</code> as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">data</span> <span class=\"n\">alt</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">alt</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">alt</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 162758862,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554649914
    },
    {
        "content": "<p>its type parameters will be explicit but your functions will only use them as implicit type parameters</p>",
        "id": 162758916,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554649944
    },
    {
        "content": "<p>nice that works, for the has_repr, will change the other</p>",
        "id": 162758948,
        "sender_full_name": "matt rice",
        "timestamp": 1554649990
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 162761544,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554653333
    }
]