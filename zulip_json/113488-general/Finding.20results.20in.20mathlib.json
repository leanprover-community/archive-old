[
    {
        "content": "<p>Hi everyone,</p>\n<p>when I am doing proofs in Coq I spend a non-negligible amount of time (or maybe the major part of my time) using the <code>Search</code> command, to list the theory of some definition(s) or find the \"best\" lemma to apply at key points in my proofs (for smaller lemmas I can almost always guess their name if they come from mathcomp). The little I did with lean led me to use the command <code>#find</code>, but it is so slow that it was faster to browse lean files directly and/or searching strings in files instead.</p>\n<p>My question to proficient users is: what is your way of finding results in mathlib?<br>\nDo you search strings? Do you read whole files? Do you use <code>#find</code>? Do you guess/remember names? Is there another way?</p>\n<p>One reason I ask is because <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Bad.20error.20reporting/near/223202521\">said</a>:</p>\n<blockquote>\n<p>I was talking to Cyril Cohen last week and he said that one reason he liked Coq more than Lean was that Coq's version of #find was so much quicker than Lean's, and I resisted the urge to say \"if you're using #find, you're doing it wrong\". I too had essentially forgotten that this existed!</p>\n</blockquote>\n<p>So what is the \"right\" way of doing it? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 229459001,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1615287979
    },
    {
        "content": "<p>I do regexp search through all mathlib with the built-in vscode search. It's almost instant, and it gives me what I am looking for most of the time. I'm not sure it can be called the right way of doing things, though (regexps never are) :-)</p>",
        "id": 229459336,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615288160
    },
    {
        "content": "<p>Not sure if I'd call myself \"proficient\" yet, but I generally start guessing the name ([naming conventions)[https://leanprover-community.github.io/contribute/naming.html]) and use ctrl+space in vscode to see if I find it; otherwise try the two search functions on <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a> or skim through the relevant mathlib <code>.lean</code></p>",
        "id": 229459532,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615288264
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">tactic#library_search</a> is often helpful (but can be slow)</p>",
        "id": 229459594,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615288288
    },
    {
        "content": "<p>And that, yeah, though it gives up if you're missing hypotheses in the exact form the lemma needs; sometimes <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#suggest\">tactic#suggest</a> does that better (but it's also very slow, and gives a lot of pointless suggestions)</p>",
        "id": 229459778,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615288387
    },
    {
        "content": "<p>(Case in point: I just tried to make <code>library_search</code> find a lemma on inequalities on <code>int</code>, made sure I had the <code>1 &lt; 4</code> hypothesis in scope, and still failed because that was <code>(1 : nat) &lt; 4)</code>, not <code>(1 : int) &lt; 4</code>.)</p>",
        "id": 229462826,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615289906
    },
    {
        "content": "<p>I hesitate to mention this because it is neither the established \"right way\" nor is it void of self promotion, but <a class=\"stream\" data-stream-id=\"274007\" href=\"/#narrow/stream/274007-lean-gptf\">#lean-gptf</a> (an experimental machine learned tactic suggestion tool for Lean) is halfway decent at finding theorems from <code>mathlib</code>. After installing as a dependency to your project, and after getting access to the API, then use <code>gptf</code> to suggest tactics.  Or tell <code>gptf</code> what type of tactic you would like with, e.g., <code>gptf {pfx := \"rw\"}</code> to get a rewrite tactic.  This is good for finding lemmas in <code>mathlib</code>.  (Note, <code>gptf</code> doesn't have special access to the library.  It just memorizes theorems in the course of its training, but it does it pretty well and can flexibly apply them.)</p>",
        "id": 229478362,
        "sender_full_name": "Jason Rute",
        "timestamp": 1615297528
    },
    {
        "content": "<p>Every trick I know has been mentioned other than the <code>hint</code> tactic. I use most of the above and I <em>never</em> use <code>#find</code>. Well spotted Cyril :-)</p>",
        "id": 229479266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615297874
    },
    {
        "content": "<p>To avoid piling on <code>#find</code> too much, let me say that I do find it useful for finding functions instead of theorems. Like, if I forget what <code>list.join</code> is called I can get it with <code>#find list (list _) â†’ list _</code>.  This probably works better because I use it relatively low in the import hierarchy so it isn't horribly slow.</p>",
        "id": 229483644,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1615299601
    }
]