[
    {
        "content": "<p>In a <a href=\"#narrow/stream/113488-general/topic/lean.20solver\" title=\"#narrow/stream/113488-general/topic/lean.20solver\">previous discussion</a> we talked about having <code>simp</code> do more. As an example, as well as <br>\n<code>lemma succ_pos (n : ℕ) : succ n &gt; 0 := ...</code><br>\nwe could have <br>\n<code>@[simp] lemma succ_pos_iff (n : ℕ) : succ n &gt; 0 ↔ true := ...</code><br>\nWhy don't we do this?</p>",
        "id": 175180571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567941105
    },
    {
        "content": "<p>It seems very appealing...</p>",
        "id": 175180609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567941124
    },
    {
        "content": "<p>They are equivalent; simp automatically applies eq_true_iff if you mark a non equality thing as <code>@[simp]</code></p>",
        "id": 175180742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567941434
    },
    {
        "content": "<p>Hmm, I can't seem to get this to work.</p>",
        "id": 175181904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567944035
    },
    {
        "content": "<p>Maybe something is different if you add the <code>[simp]</code> attribute later?</p>",
        "id": 175181923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567944114
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma succ_pos&#39; (n : ℕ) : succ n &gt; 0 := succ_pos n\nexample (n : ℕ) : succ n &gt; 0 := by simp\n</pre></div>\n\n\n<p>but this doesn't</p>\n<div class=\"codehilite\"><pre><span></span>attribute [simp] succ_pos\nexample (n : ℕ) : succ n &gt; 0 := by simp\n</pre></div>",
        "id": 175181980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567944229
    },
    {
        "content": "<p>No, that's not it.</p>",
        "id": 175182034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567944342
    },
    {
        "content": "<p>I think it's because the statement of <code>succ_pos</code> is <code>0 &lt; succ n</code>, which is not syntactically equal to <code>succ_pos'</code>.</p>",
        "id": 175191199,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567961018
    },
    {
        "content": "<p>Never use <code>&gt;</code></p>",
        "id": 175191266,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567961129
    },
    {
        "content": "<p>Could we just make <code>&gt;</code> notation? Even though it is already defined in core?</p>",
        "id": 175192598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567963942
    },
    {
        "content": "<p>How would people feel about a PR going through e.g. <code>data/nat/basic.lean</code> and flipping all the <code>&gt;</code> for <code>&lt;</code>?</p>",
        "id": 175202935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567982777
    },
    {
        "content": "<blockquote>\n<p>Could we just make <code>&gt;</code> notation? Even though it is already defined in core?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, unfortunately this nice idea doesn't seem to work. I get lots of ambiguous overload errors.</p>",
        "id": 175211570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567999138
    },
    {
        "content": "<p>We could make it a local(ized) notation in every file.</p>",
        "id": 175214732,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568005120
    },
    {
        "content": "<p>I think that won't work Floris, since</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">b</span> <span class=\"bp\">`&gt;`</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nnn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n</pre></div>\n\n\n<p>just won't compile in any file</p>",
        "id": 175215367,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568006282
    }
]