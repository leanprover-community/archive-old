[
    {
        "content": "<p>I was working with the following setup:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>For some reason I get a deterministic timeout whenever I do anything with <code>I</code>. For example: this gives a timeout:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>But also writing down <code>I.carrier</code> or a membership statement <code>p ∈ I</code> gives a timeout. Working over an <code>integral_domain α</code> or a <code>field α</code> also causes the timeout. However, in the following setup I do not get a timeout:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">carrier</span>\n</pre></div>\n\n\n<p>(While a <code>field</code> is just a <code>comm_ring</code> and <code>division_ring</code>, so there must be some weird instance kicking in or something)</p>\n<p>The problem is similar to the problem posted here: <a href=\"#narrow/stream/113488-general/topic/deterministic.20timeout.20with.20ideal.2Equotient.2Emk\" title=\"#narrow/stream/113488-general/topic/deterministic.20timeout.20with.20ideal.2Equotient.2Emk\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/deterministic.20timeout.20with.20ideal.2Equotient.2Emk</a>.<br>\nI tried increasing the class instance depth, and tried to find out what was happening using <code>trace.class_instances</code> but I could not manage to find the problem. Anybody any idea of why this may happen (and how one could fix it)?</p>",
        "id": 173206867,
        "sender_full_name": "Casper Putz",
        "timestamp": 1565792256
    },
    {
        "content": "<p>This is yet another type class issue. The temporary fix: <code>instance mpp : module (polynomial α) (polynomial α) := by apply_instance</code></p>",
        "id": 173238255,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565814003
    },
    {
        "content": "<p>So what is happening here? Making <code>mpp</code> an instance makes type class inference behave differently? Basically it finds it earlier? Could one use priorities to somehow fix this?</p>",
        "id": 173239753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565814969
    },
    {
        "content": "<p>The logs are migraine inducing, so I don't have an exact answer. But basically yeah, if <code>mpp</code> is the last instance added it's the first one tried, and the resolution path avoids some very costly search path. It's possible a local priority change could fix this instance, and I don't think we ever systematically adopted this idea from Floris (which we should): <a href=\"#narrow/stream/113488-general/topic/more.20type.20class.20inference.20issues/near/167026105\" title=\"#narrow/stream/113488-general/topic/more.20type.20class.20inference.20issues/near/167026105\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/more.20type.20class.20inference.20issues/near/167026105</a></p>",
        "id": 173240725,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565815563
    },
    {
        "content": "<p>Thanks Rob for the quick fix!</p>",
        "id": 173242551,
        "sender_full_name": "Casper Putz",
        "timestamp": 1565816801
    },
    {
        "content": "<p>Ah that makes sense. I agree about the migraine haha. I saw it doing some weird stuff like using <code>discrete_field.to_local_ring.to_comm_ring</code> instead of directly using that a field is  a commutative ring</p>",
        "id": 173242941,
        "sender_full_name": "Casper Putz",
        "timestamp": 1565817097
    },
    {
        "content": "<p>Hi Casper, if you're working on polynomials, and struggling with timeouts, you might be interested in completing the work I started on the <a href=\"https://github.com/leanprover-community/mathlib/tree/decidable_eq/src\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/decidable_eq/src\"><code>decidable_eq</code></a> branch, stripping out all the decidability conditions from polynomials and multivariable polynomials. Unfortunately I haven't had time to finish, but I hope it's mostly downhill from where I got up to --- just fix the remaining errors!</p>",
        "id": 173244290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565818197
    },
    {
        "content": "<p>I didn't realize you had already started this, I was going to propose it as a possible fix as well.</p>",
        "id": 173246008,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565819747
    },
    {
        "content": "<p>Hi Scott, I may actually do that! I think I will give it a look this weekend.</p>",
        "id": 173274218,
        "sender_full_name": "Casper Putz",
        "timestamp": 1565858328
    },
    {
        "content": "<p>I made quite a bit more progress on this now, but still have problems in <code>power_series.lean</code> and <code>free_comm_ring.lean</code>. Any help (feel free to commit direct to the <code>decidable_eq</code> branch) much appreciated.</p>",
        "id": 174758970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567487284
    },
    {
        "content": "<p>I can probably help with <code>power_series</code>, since I wrote it not too long ago.</p>",
        "id": 174759049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567487460
    },
    {
        "content": "<p>What kind of problems are you seeing?</p>",
        "id": 174759057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567487467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I already have errors for <code>mv_polynomial.C_add</code> on L52 of <code>mv_polynomial.lean</code></p>",
        "id": 174763862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567494632
    },
    {
        "content": "<p>For some reason Lean doesn't agree that <code>C a</code> is <code>single 0 a</code>, even though it's true by definition. If I then hit it with another <code>refl</code> it shuts up and moves on.</p>",
        "id": 174763896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567494685
    },
    {
        "content": "<p>Stupid Lean...</p>",
        "id": 174763899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567494691
    },
    {
        "content": "<p>Weird, that's working for me.</p>",
        "id": 174766356,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567497494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Where is the first error that you hit in power series?</p>",
        "id": 174767077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567498085
    },
    {
        "content": "<p>L581?</p>",
        "id": 174767078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567498086
    },
    {
        "content": "<p>I will try to fix <code>free_comm_ring.lean</code>. Did a bit already</p>",
        "id": 174767254,
        "sender_full_name": "Casper Putz",
        "timestamp": 1567498214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, the first error I see is in <code>/src/ring_theory/power_series.lean</code> at line 560:</p>\n<div class=\"codehilite\"><pre><span></span>/Users/scott/projects/lean/mathlib/src/ring_theory/power_series.lean:560:36: error: type mismatch at application\n  mul_inv_of_unit (1 - φ) ?m_1 h\nterm\n  h\nhas type\n  1 - coeff 0 φ = ↑u\nbut is expected to have type\n  coeff 0 (1 - φ) = ↑?m_1\n</pre></div>",
        "id": 174774103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567504838
    },
    {
        "content": "<p>I fixed the errors in <code>free_comm_ring.lean</code></p>",
        "id": 174776050,
        "sender_full_name": "Casper Putz",
        "timestamp": 1567506683
    },
    {
        "content": "<p>The biggest source of errors in <code>power_series.lean</code> seems to come from the fact that <code>single unit.star n</code> is no longer defeq to <code>n</code>, for <code>n : ℕ</code>...</p>",
        "id": 174782949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567513798
    },
    {
        "content": "<p>I'm not sure how that happened. Because this is a statement about <code>unit</code> and <code>nat</code>, which shouldn't be affected by polynomials going classical.</p>",
        "id": 174783023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567513829
    },
    {
        "content": "<p>basically you can't evaluate <code>single</code> anymore by defeq</p>",
        "id": 174783297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514069
    },
    {
        "content": "<p>But why not?</p>",
        "id": 174783309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514081
    },
    {
        "content": "<p>there is a proof of <code>n = n</code> by classical in there</p>",
        "id": 174783312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514087
    },
    {
        "content": "<p>This is stupid</p>",
        "id": 174783325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514101
    },
    {
        "content": "<p>it's something like <code>single unit.star n := if n = n then 1 else 0</code></p>",
        "id": 174783348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514116
    },
    {
        "content": "<p>where the <code>if</code> is no longer decidable because classical</p>",
        "id": 174783370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514139
    },
    {
        "content": "<p>solution: stop using defeq</p>",
        "id": 174783383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514151
    },
    {
        "content": "<p>use <code>simp</code></p>",
        "id": 174783398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514162
    },
    {
        "content": "<p>You might as well say, \"stop using definitions\"</p>",
        "id": 174783438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514172
    },
    {
        "content": "<p>not at all</p>",
        "id": 174783443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514177
    },
    {
        "content": "<p>And <code>simp</code> is slow... we learnt that.</p>",
        "id": 174783453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514184
    },
    {
        "content": "<p>use definitional equations</p>",
        "id": 174783454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514185
    },
    {
        "content": "<p>use <code>rw [single]</code></p>",
        "id": 174783474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514200
    },
    {
        "content": "<p>Yep, but this <code>single</code> is hidden behind 4 definitions...</p>",
        "id": 174783490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514224
    },
    {
        "content": "<p>And <code>rfl</code> used to blast through them</p>",
        "id": 174783503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514232
    },
    {
        "content": "<p>that's not a good thing</p>",
        "id": 174783511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514241
    },
    {
        "content": "<p>And now I need to <code>delta</code> 5 things, and than I can <code>rw finsupp.single_zero</code> or something silly like that.</p>",
        "id": 174783523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514257
    },
    {
        "content": "<p>Why are you unfolding 4 definitions?</p>",
        "id": 174783525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514258
    },
    {
        "content": "<p>you should only ever need to unfold one at most at a time</p>",
        "id": 174783543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514281
    },
    {
        "content": "<p>maybe two, but that's bad practice</p>",
        "id": 174783600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514297
    },
    {
        "content": "<p>4 is abuse</p>",
        "id": 174783602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514303
    },
    {
        "content": "<p>Because <code>power_series.C</code> is defined as <code>mv_power_series.C</code> which is defined as <code>mv_power_series.monomial 0</code>, and <code>power_series.monomial</code> is defined as <code>mv_power_series.monomial</code>, and I these definitions to commute by <code>rfl</code>.</p>",
        "id": 174783629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514339
    },
    {
        "content": "<p>What are you proving?</p>",
        "id": 174783650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514361
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coeff_C_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 174783679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514396
    },
    {
        "content": "<p>the proof should be <code>mv_power_series.coeff_C_zero</code></p>",
        "id": 174783741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514414
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">coeff_monomial&#39;</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">delta</span> <span class=\"n\">C</span> <span class=\"n\">mv_power_series</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">monomial</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 174783743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514415
    },
    {
        "content": "<p>that's one definition unfold</p>",
        "id": 174783758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514435
    },
    {
        "content": "<p>Your proof doesn't work</p>",
        "id": 174783804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514474
    },
    {
        "content": "<p>Because <code>single unit.star 0</code> is not defeq to <code>0</code></p>",
        "id": 174783827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514497
    },
    {
        "content": "<p>I'm not 100% on the exact definitions of everything here, but you should be able to unfold things until it's a statement about <code>mv_polynomial</code>, and then apply the appropriate lemma</p>",
        "id": 174783832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514504
    },
    {
        "content": "<p>Nope, even that doesn't work</p>",
        "id": 174783932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514570
    },
    {
        "content": "<p>This definition might be relevant:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The `n`th coefficient of a formal power series.-/</span>\n<span class=\"n\">def</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">power_series</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">mv_power_series</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"o\">()</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 174783965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514594
    },
    {
        "content": "<p>This used to be harmless, but now it is not</p>",
        "id": 174783977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514605
    },
    {
        "content": "<p>Because of that <code>single () n</code> tagging at the end</p>",
        "id": 174783985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514614
    },
    {
        "content": "<p>I can't understand why we can't have classical coefficients living together with a constructively decidable <code>unit</code> and <code>nat</code></p>",
        "id": 174784056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514651
    },
    {
        "content": "<p>I see this in the file now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coeff_monomial&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coeff_C_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">coeff_monomial&#39;</span> <span class=\"mi\">0</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>are you saying that the two <code>coeff</code>s are different here?</p>",
        "id": 174784067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514662
    },
    {
        "content": "<p>No, those <code>coeff</code>s are the same</p>",
        "id": 174784105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514710
    },
    {
        "content": "<blockquote>\n<p>I can't understand why we can't have classical coefficients living together with a constructively decidable unit and nat</p>\n</blockquote>\n<p>That's called accepting a <code>decidable_eq</code> instance, and we tried that</p>",
        "id": 174784106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514713
    },
    {
        "content": "<p>then what's the problem? they look defeq to me</p>",
        "id": 174784117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514729
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 174784127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514742
    },
    {
        "content": "<p>Yes...</p>",
        "id": 174784137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514749
    },
    {
        "content": "<p>But <code>power_series.C</code> is no longer defeq to <code>power_series.monomial 0</code></p>",
        "id": 174784199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514773
    },
    {
        "content": "<p>why? Did the definition change?</p>",
        "id": 174784213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514785
    },
    {
        "content": "<p>No</p>",
        "id": 174784221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514788
    },
    {
        "content": "<p>It says that it is defined as exactly that</p>",
        "id": 174784236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514805
    },
    {
        "content": "<p>Someone removed a <code>[decidable_eq α]</code>. Em tasol.</p>",
        "id": 174784240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514807
    },
    {
        "content": "<p>Over here it says</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The constant formal power series.-/</span>\n<span class=\"n\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">power_series</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">mv_power_series</span><span class=\"bp\">.</span><span class=\"n\">C</span>\n</pre></div>",
        "id": 174784270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514831
    },
    {
        "content": "<p>oh, I was looking at the wrong C</p>",
        "id": 174784314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514858
    },
    {
        "content": "<p>I mean... I can fix these errors, but the barrier between <code>mv_power_series unit</code> and <code>power_series</code> just got a lot bigger. Because we don't have good definitional reductions anymore.</p>",
        "id": 174784411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567514910
    },
    {
        "content": "<p>I see, so the problem is that there is no theorem <code>power_series.C a = monomial 0 a</code></p>",
        "id": 174784443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514942
    },
    {
        "content": "<p>if you had that it would be a single rw</p>",
        "id": 174784466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567514961
    },
    {
        "content": "<p>Aha... I guess that theorem was missing, because it used to be defeq...</p>",
        "id": 174784609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567515040
    },
    {
        "content": "<p>And the proof boils down to <code>single () 0 = 0</code>, which should be in finsupp</p>",
        "id": 174784644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567515075
    },
    {
        "content": "<p><code>single_zero</code></p>",
        "id": 174784725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567515127
    },
    {
        "content": "<p>Thanks for your patience</p>",
        "id": 174784964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567515336
    },
    {
        "content": "<p>so why does <code>decidable_eq</code> cause problem afterall?</p>",
        "id": 184363265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577516827
    },
    {
        "content": "<p>(I was pointed to this topic by <a href=\"https://github.com/leanprover-community/mathlib/issues/1391\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1391\">#1391</a>)</p>",
        "id": 184363269,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577516837
    }
]