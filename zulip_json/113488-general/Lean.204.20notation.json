[
    {
        "content": "<p>That notation would introduce ambiguity with the singleton set notation</p>",
        "id": 204640004,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595405676
    },
    {
        "content": "<p>Would the notation  <code>{p * q * p\\-1 * q\\-1 | p q : α}</code> work?</p>",
        "id": 204640157,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595405795
    },
    {
        "content": "<p>I would be equally happy with this, because that is another notation which is completely acceptable to mathematicians -- it's clear to read.</p>",
        "id": 204640242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595405882
    },
    {
        "content": "<p>It would require some C++ hacking though, apparenly binders cannot appear after the things they bind</p>",
        "id": 204640338,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595405961
    },
    {
        "content": "<p>No problem in Lean 4</p>",
        "id": 204640434,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595406042
    },
    {
        "content": "<p>Another notation question, this time where Lean is being too good:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Let G be a group</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"c1\">-- A mathematician:</span>\n<span class=\"c1\">-- &quot;The Abelianization *of G* is the quotient blah blah blah&quot;</span>\n<span class=\"c1\">-- Works in Lean 3:</span>\n<span class=\"n\">def</span> <span class=\"n\">abelianization</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_group</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">commutator</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Can&#39;t get it to work (maybe I&#39;m bad at variables?)</span>\n<span class=\"n\">def</span> <span class=\"n\">abelianization</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_group</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">commutator</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204640442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595406052
    },
    {
        "content": "<p>your <code>(G)</code> overrides the <code>G</code> outside</p>",
        "id": 204640591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595406210
    },
    {
        "content": "<p>so there is no <code>group</code> instance</p>",
        "id": 204640597,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595406213
    },
    {
        "content": "<p>I think that when a mathematician says \"let G be a group\" they still want access to the notation \"a <em>subgroup</em> of G is ...\" when making definitions like <code>subgroup</code>, rather than having the reader having to figure out that we're talking about a subgroup of a group as opposed to of a foo.</p>",
        "id": 204640906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595406438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20notation/near/204640338\">said</a>:</p>\n<blockquote>\n<p>It would require some C++ hacking though, apparenly binders cannot appear after the things they bind</p>\n</blockquote>\n<p>It's a giant mess and broken in many places, but I made syntax for set replacement notation work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">successors</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">successors_correct</span> <span class=\"o\">:</span> <span class=\"n\">successors</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>I chose to require parentheses around the expression to avoid backtracking and possibly ambiguity. It parses the expression before the binder, so Lean will do ugly things if <code>x</code> is a definition somewhere else.</p>",
        "id": 204645855,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595410119
    },
    {
        "content": "<p>Do we actually want this right now, or wait for <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span>?</p>",
        "id": 204645985,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595410224
    },
    {
        "content": "<p>I wouldn't classify it as high priority <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 204646025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595410262
    },
    {
        "content": "<p>does <code>{(x + 1) | x &lt; 0}</code> work? :P</p>",
        "id": 204646893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595411042
    },
    {
        "content": "<p>Not yet! Even <code>{(x + 1) | x : nat}</code> doesn't work yet. I'm trying to figure out whether I can get the parser to go back to parsing the expression after it has finished with the binders.</p>",
        "id": 204647221,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595411336
    },
    {
        "content": "<p>I don't need it. I am preparing a performance, not writing code. I can say \"I have been told by experts that we will be able to write it in this more familiar way in Lean 4\".</p>",
        "id": 204648428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595412277
    },
    {
        "content": "<p>Aha: we can parse every variable as being in the local scope, then use <code>patexpr_to_expr</code> to update the references.</p>",
        "id": 204648914,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595412683
    },
    {
        "content": "<p>After applying <code>patexpr_to_expr</code>, the rest was not too difficult:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">between_1_and_5</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">between_1_and_5_correct</span> <span class=\"o\">:</span> <span class=\"n\">between_1_and_5</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 204651691,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595415100
    },
    {
        "content": "<p>And here is the corresponding Lean 4 implementation (in two lines, after reimplementing the existing Lean 3 notations):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">new_frontend</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">quantifierBinder</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"s2\">&quot; : &quot;</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"n\">quantifierBinder</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">&quot; &lt; &quot;</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">quantifierBinder</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">&quot;∃&quot;</span> <span class=\"n\">quantifierBinder</span> <span class=\"s2\">&quot;, &quot;</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"err\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"err\">$</span><span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"err\">$</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">foldrM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Exists</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"err\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">$</span><span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"err\">$</span><span class=\"n\">P</span><span class=\"o\">)))</span> <span class=\"n\">P</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"err\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"err\">$</span><span class=\"n\">P</span><span class=\"o\">)</span>      <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"err\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"err\">$</span><span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"err\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;</span> <span class=\"err\">$</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"err\">$</span><span class=\"n\">P</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"err\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"err\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;</span> <span class=\"err\">$</span><span class=\"n\">e</span> <span class=\"bp\">∧</span> <span class=\"err\">$</span><span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">Set</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">sep</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"n\">macro</span> <span class=\"s2\">&quot;{&quot;</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">&quot; | &quot;</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">&quot;}&quot;</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">sep</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"err\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"err\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">&quot;{&quot;</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">&quot; | &quot;</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">quantifierBinder</span> <span class=\"s2\">&quot;}&quot;</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">({</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"err\">$</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"err\">$</span><span class=\"n\">e</span> <span class=\"o\">})</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">({</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">}</span>  <span class=\"c1\">-- ambiguous</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p><code>{a * b | a b}</code> without a type ascription looks pretty strange and probably shouldn't be allowed. The other interesting one is <code>{a | a &lt; 10}</code>, which can be read either way (filtering all <code>a</code> by a predicate vs. selecting <code>a</code> for all <code>a &lt; 10</code>) and thus is ambiguous. Not sure there is a good solution for that except for merging both notations into a single one that first tries one interpretation, then the other one.</p>",
        "id": 204653575,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595416936
    },
    {
        "content": "<p>Created PR <a href=\"https://github.com/leanprover-community/lean/issues/402\">lean#402</a>.</p>",
        "id": 204658165,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595420564
    }
]