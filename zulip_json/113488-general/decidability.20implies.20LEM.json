[
    {
        "content": "<p>how does decidability imply LEM? this is something that I struggle to understand</p>",
        "id": 247456590,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1627478089
    },
    {
        "content": "<p>Decidable means that given some true-false statement, there is a defined, executable algorithm to determine whether it is true or false. No in between. Decidability by definition means that the algorithm terminates, so you will get exactly one of either true or false. That's my understanding</p>",
        "id": 247456832,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627478214
    },
    {
        "content": "<p>Decidability of <em>all propositions</em> implies LEM</p>",
        "id": 247457004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627478290
    },
    {
        "content": "<p>Obviously the fact that natural numbers are decidably equal does not imply LEM generally</p>",
        "id": 247457051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627478317
    },
    {
        "content": "<p>Yes, I meant LEM for the class of propositions for which one has decidability</p>",
        "id": 247457540,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627478548
    },
    {
        "content": "<p>Sure, I was just making sure <span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> was aware of the distinction</p>",
        "id": 247457867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627478717
    },
    {
        "content": "<p>syntactically, it's a triviality: <code>psum p (~p)</code> implies <code>p \\/ ~p</code> by case split</p>",
        "id": 247458800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627479128
    },
    {
        "content": "<p>What's the relevance of psum?</p>",
        "id": 247458862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627479150
    },
    {
        "content": "<p>that's what <code>decidable p</code> is</p>",
        "id": 247458892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627479164
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable/src\">src#decidable</a> says otherwise</p>",
        "id": 247458929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627479183
    },
    {
        "content": "<p>I would write <code>sum</code> but that doesn't typecheck in lean for silly reasons</p>",
        "id": 247458947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627479192
    },
    {
        "content": "<p>They are isomorphic types</p>",
        "id": 247458987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627479209
    },
    {
        "content": "<p><del>If we're handwaving <code>decidable</code> as <code>psum</code> we may as well handwave it as <code>or</code></del></p>",
        "id": 247459005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627479215
    },
    {
        "content": "<p>No, because <code>psum</code> is a type and <code>or</code> is a prop</p>",
        "id": 247459030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627479227
    },
    {
        "content": "<p><code>decidable p</code> is not isomorphic to <code>p \\/ ~p</code></p>",
        "id": 247459130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627479258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/decidability.20implies.20LEM/near/247458947\">said</a>:</p>\n<blockquote>\n<p>I would write <code>sum</code> but that doesn't typecheck in lean for silly reasons</p>\n</blockquote>\n<p>Isn't one key difference between <code>decidable' (p : Prop) := psum p (~p)</code> and the real <code>decidable p</code> that <code>psum</code> is a normal <code>inductive</code> and  <code>decidable</code> is a <code>class inductive</code>?</p>",
        "id": 247537951,
        "sender_full_name": "Mac",
        "timestamp": 1627524898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> This should be functionally equivalent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">decidable'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">psum</span> <span class=\"n\">p</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">decidable'</span>\n</code></pre></div>",
        "id": 247538612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1627525832
    }
]