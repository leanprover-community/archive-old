[
    {
        "content": "<p>Is there a good way to take a string (e.g. \"simp, exact p\") and return the tactic that executes it in interactive mode?</p>",
        "id": 124695173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522970443
    },
    {
        "content": "<p>(I have some \"self-describing tactics\", which can print as a message \"what they did\" in terms of built-in tactics, and I would like to automatic verify they are producing correct output.)</p>",
        "id": 124695190,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522970515
    },
    {
        "content": "<p>I think the best I could do is something of type <code>string -&gt; parser (tactic unit)</code></p>",
        "id": 124696700,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522973494
    },
    {
        "content": "<p>I don't know how to run that in a tactic though ... unless we're parsing the parameters to the tactic. Is that good enough?</p>",
        "id": 124696748,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522973582
    },
    {
        "content": "<p>Unfortunately not. I'm deep inside a tactic by now.</p>",
        "id": 124696754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522973618
    },
    {
        "content": "<p>I think we'd need to plead with the developers to give us a <code>parser_state.mk</code> function</p>",
        "id": 124696801,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522973705
    },
    {
        "content": "<p>If I want to parse a <code>rw_rule</code>, followed by a <code>nat</code> (e.g. so I can write <code>some_tactic foo 1</code>, or <code>some_tactic ← foo 3</code>), what am I meant to do?</p>",
        "id": 124697368,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522974862
    },
    {
        "content": "<p>I've worked out that <code> (q : parse (rw_rule_p (parser.pexpr 0)))</code> will parse a single <code>rw_rule</code>.</p>",
        "id": 124697374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522974892
    },
    {
        "content": "<p>Is the <code>rw_rule</code> fed by the user through a <code>begin ... end</code> block?</p>",
        "id": 124697618,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522975436
    },
    {
        "content": "<p>yes</p>",
        "id": 124697661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522975480
    },
    {
        "content": "<p>I've decided that it's just as good to parse a list of rw_rules, and this seems to work out of the box.</p>",
        "id": 124697669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522975499
    },
    {
        "content": "<p><code>(q : parse rw_rules) (n : ℕ) </code></p>",
        "id": 124697683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522975525
    },
    {
        "content": "<p>Oh good then</p>",
        "id": 124697689,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522975535
    },
    {
        "content": "<p>I don't know if <code>n : ℕ </code> will work but if it doesn't, you can use <code>n : parse small_nat</code></p>",
        "id": 124697744,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522975593
    },
    {
        "content": "<p>Ah, I see, I just found <code>parse small_nat</code> in <code>conv</code>. Not bothering to use the parser for the nat seems okay.</p>",
        "id": 124697755,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522975636
    },
    {
        "content": "<p>Alright then :)</p>",
        "id": 124697809,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522975798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> knows the answer to this one. My first thought was either a <code>parser A -&gt; tactic A</code> lift, or the <code>with_input</code> function which is used to implement <code>format!</code>, but the first doesn't exist (you can make a parser from a tactic but not vice versa) and the second only works in the parser monad. There is no way to create a <code>parser_state</code> in lean that I can see (which corresponds to creating a C++ <code>parser</code> object), so I think parsing can only be done at parse time, not at tactic running time. (One <em>suuper</em> hacky way to maybe get this to work is to call <code>lean</code> using the <code>io</code> monad with a file that you create.)</p>",
        "id": 124698444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522977012
    },
    {
        "content": "<p>What Mario said</p>",
        "id": 124707373,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522997356
    }
]