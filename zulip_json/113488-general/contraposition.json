[
    {
        "content": "<p>Still looking at my first year undergraduate course tactics, I see:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">contrapose</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span> <span class=\"n\">hP</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span> <span class=\"n\">loc</span><span class=\"o\">)</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">tk</span><span class=\"o\">)</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">loc</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">contrapose</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span> <span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">tgt</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">contrapose</span> <span class=\"err\">%%</span><span class=\"n\">P</span> <span class=\"err\">%%</span><span class=\"n\">Q</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">push</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"k\">then</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">push_neg</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">]))</span> <span class=\"k\">else</span> <span class=\"n\">skip</span>\n</pre></div>\n\n\n<p>Of course we can already use <code>rw not_imp_not</code> or <code>rw ← not_imp_not</code> but you need to remember this name and the direction, and you don't have integration with <code>push_neg</code>. From a pedagogical point of view, I like to say in lectures: \"reasoning by contrapositive\" is an important technique, here is the Lean command to do that. In the same way we have <code>by_contradiction</code> and <code>exfalso</code> that are thin wrappers around the corresponding lemmas. </p>\n<p>How people would feel if I PRed it into mathlib? I ask before writing the PR because the process involves efforts to put things at the right location, and write tests.</p>",
        "id": 165462691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557663802
    },
    {
        "content": "<p>This sounds reasonable. A useful variant might be <code>contrapose h</code>. When  the goal is <code>Q</code> with <code>h : P</code> is in the local context, this reverts <code>h</code>, does your thing, and then intros <code>h : ¬ Q</code>.</p>",
        "id": 165466193,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557670136
    },
    {
        "content": "<p>I guess adding this wouldn't cost much, and can be ignored by users who don't want it</p>",
        "id": 165466276,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557670256
    },
    {
        "content": "<p>I'll try that</p>",
        "id": 165466287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557670280
    },
    {
        "content": "<p>By the way, are you sure the failure behavior is what you want? When the goal isn't an implies, your tactic either does nothing or reduces to <code>push_neg</code>. My instinct is that it should fail.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">contrapose</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span> <span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">contrapose</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span><span class=\"o\">,</span>\n   <span class=\"n\">when</span> <span class=\"n\">push</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">push_neg</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">]))</span>\n</pre></div>",
        "id": 165466892,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557671287
    },
    {
        "content": "<p>You are right, it should fail. I'll modify this</p>",
        "id": 165466896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557671316
    },
    {
        "content": "<p>Do we have a version of <code>when</code> where we get access to the assumption? (like when we do <code>if h : ... then ... else ...</code>)</p>",
        "id": 165467094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557671676
    },
    {
        "content": "<p>Oh, I didn't see you wrote some code</p>",
        "id": 165467107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557671701
    },
    {
        "content": "<p>I prefer the version I have now because it has a helpful error message</p>",
        "id": 165467178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557671786
    },
    {
        "content": "<p>Is there any advantage of <code>mk_app</code> instead of my <code>`[...]</code> (besides the fact that it looks more profesionnal)?</p>",
        "id": 165467209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557671882
    },
    {
        "content": "<p>Heh, I just noticed that <code>when</code> takes a decidable <code>Prop</code>. Figured it took a <code>bool</code>, but that's actually <code>whenb</code>.</p>",
        "id": 165467351,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557672056
    },
    {
        "content": "<blockquote>\n<p>Is there any advantage of <code>mk_app</code> instead of my <code>`[...]</code> (besides the fact that it looks more profesionnal)?</p>\n</blockquote>\n<p>That, and it avoids entering interactive parsing mode. Not a big difference.</p>",
        "id": 165467368,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557672089
    },
    {
        "content": "<p>Hum, I also need to learn how to assert stuff is Prop. The pattern <code>`(%%P → %%Q)</code> is not specific enough</p>",
        "id": 165467415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557672130
    },
    {
        "content": "<p><code>target &gt;&gt;= is_prop</code>?</p>",
        "id": 165467509,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557672296
    },
    {
        "content": "<p>I wanted to test P and Q, but maybe testing target would be good enough</p>",
        "id": 165467599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557672455
    },
    {
        "content": "<p>no, it's not good enough</p>",
        "id": 165467651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557672505
    },
    {
        "content": "<p>It will be fooled by goals that look like <code>forall x, P x</code></p>",
        "id": 165467661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557672529
    },
    {
        "content": "<p>(and <em>yes</em>, students will try <code>contrapose</code> on such goals)</p>",
        "id": 165467678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557672552
    },
    {
        "content": "<p>My wife asserts the goal's type is to mow the lawn. I'll read your explanations when I'll come back (there is also a tactic writing question in the choose thread, in case I'm too slow in the garden and you get bored).</p>",
        "id": 165467761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557672685
    },
    {
        "content": "<p>Ah, yeah. Easiest to just check both with <code>is_prop</code> then.</p>",
        "id": 165468143,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557673289
    },
    {
        "content": "<p>Lean complains <code>tactic 'infer_type' failed, given expression should not contain de-Bruijn variables, they should be replaced with local constants before using this tactic</code> when I try to use <code>is_prop</code> on <code>P</code> or <code>Q</code></p>",
        "id": 165473675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557682601
    },
    {
        "content": "<p>That should only happen on <code>Q</code> when there's a dependency. Your tactic can fail if <code>Q.has_var</code> is true. Otherwise, <code>is_prop</code> should succeed on both <code>P</code> and <code>Q</code>, and if it's true in both cases you have a nondependent implication.</p>",
        "id": 165477748,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557689376
    },
    {
        "content": "<p>Alternatively, you could try to unify the goal with an application of <code>implies</code>, but I think doing those checks is more straightforward.</p>",
        "id": 165477804,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557689457
    },
    {
        "content": "<p>I was not catching failure at the right level</p>",
        "id": 165477884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557689563
    },
    {
        "content": "<p>My current version is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">contrapose</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span> <span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"err\">?</span><span class=\"o\">):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">when</span> <span class=\"n\">hyp</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"o\">(</span><span class=\"n\">hyp</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">),</span>\n    <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">),</span>\n  <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;The goal is not an implication, and you didn&#39;t specify an assumption&quot;</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">tgt</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">is_prop</span> <span class=\"n\">P</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">is_prop</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"n\">err</span><span class=\"o\">,</span>\n                       <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">contrapose</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"n\">err</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">when</span> <span class=\"n\">push</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">push_neg</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">])),</span>\n  <span class=\"n\">when</span> <span class=\"n\">hyp</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"err\">$</span> <span class=\"n\">hyp</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n</pre></div>\n\n\n<p>I don't like the <code>get_or_else</code> where I already now the option is some. But I don't know better</p>",
        "id": 165477966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557689693
    },
    {
        "content": "<p>There's an error using <code>mk_app</code>, it needs <code>mk_mapp</code>. I think this is a bit cleaner:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">contrapose</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span> <span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"err\">?</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">revert</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">contrapose</span> <span class=\"n\">none</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n  <span class=\"n\">do</span> <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;The goal is not an implication, and you didn&#39;t specify an assumption&quot;</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">tgt</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">is_prop</span> <span class=\"n\">P</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">is_prop</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"n\">err</span><span class=\"o\">,</span>\n                       <span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">contrapose</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"n\">err</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">when</span> <span class=\"n\">push</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">push_neg</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">]))</span>\n</pre></div>",
        "id": 165478737,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557691053
    },
    {
        "content": "<p>The behavior of <code>contrapose h</code> will be funny if anything depends on <code>h</code>, but I think that's the user's problem.</p>",
        "id": 165478807,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557691130
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1015\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1015\">https://github.com/leanprover-community/mathlib/pull/1015</a> Thanks a lot for all your help Rob!</p>",
        "id": 165481188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557694733
    },
    {
        "content": "<p>No problem! I didn't notice before, but <code>is_prop</code> won't fail, it will just return true or false. So what you have now will give the error from <code>mk_mapp</code> if it gets a non-prop or dependent pi. If you only want to give the one error message, you should do something like this instead.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">contrapose</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span> <span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"err\">?</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">revert</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">contrapose</span> <span class=\"n\">none</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;The goal is not an implication, and you didn&#39;t specify an assumption&quot;</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">contrapose</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span><span class=\"o\">,</span>\n  <span class=\"n\">when</span> <span class=\"n\">push</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">push_neg</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">])))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"n\">err</span>\n</pre></div>",
        "id": 165482874,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557697425
    }
]