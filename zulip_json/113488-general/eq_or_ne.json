[
    {
        "content": "<p>Would these be a welcome addition? I find myself writing <code>by_cases ha : a ≠ 0</code> pretty often, and these would be convenient if one  wanted to use <code>rcases</code> or didn't want to have to <code>rw not_not at ha</code>. I think these would also be easier to find by \"guessing the name and using the autocomplete tool.\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_or_ne</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">em</span> <span class=\"bp\">$</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne_or_eq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_zero_or_ne_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne_zero_or_eq_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_or_eq</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 237023025,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1619927059
    },
    {
        "content": "<p>Why not use <code>by_cases a = 0</code>?</p>",
        "id": 237023238,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619927312
    },
    {
        "content": "<p>I do, but sometimes I find that it's more convenient to deal with the <code>ne</code> case first (i.e. if it is the trivial one).</p>",
        "id": 237023374,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1619927510
    },
    {
        "content": "<p>This is really nothing more than a question of \"are they worth adding for the convenience,\" there's no brilliance to these lemmas at all.</p>",
        "id": 237023472,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1619927641
    },
    {
        "content": "<p>I still would use <code>by_cases a=0, swap</code></p>",
        "id": 237023510,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619927646
    },
    {
        "content": "<p>IMO I don't mediately see a use case for these, but perhaps someone else knows of a situation where they would be worth it</p>",
        "id": 237023560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619927728
    },
    {
        "content": "<p>I don't think it is worth it, except possibly <code>(em p).swap</code> if we don't already have it. The others are just substitution instances of lemmas with longer names</p>",
        "id": 237029694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619934993
    },
    {
        "content": "<p>What about defining <code>by_cases_swap</code>?</p>",
        "id": 237033159,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619938942
    },
    {
        "content": "<p>I don't see any advantage to defining two tactics in a row as a composite tactic. Just use two tactics</p>",
        "id": 237034183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619940190
    },
    {
        "content": "<p>More tactics means more to learn. It is better to keep tactics orthogonal so they can be used compositionally</p>",
        "id": 237034241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619940268
    },
    {
        "content": "<p><code>eq_or_ne</code> would be nice because it would produce hypotheses that use <code>a ≠ b</code> instead of <code>not (a = b)</code></p>",
        "id": 237036227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619942718
    },
    {
        "content": "<p>One is a notation for the other so it doesn't change anything, right?</p>",
        "id": 237036299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619942792
    },
    {
        "content": "<p>you cannot do <code>h.symm</code> on <code>h : not (a = b)</code>, but you can on <code>h : a ≠ b</code>. I very often write <code>rw ← ne.def at h</code> after a <code>by_cases h : a = b</code>,  when <code>a = b</code> happens to be more convenient in the first case, but some lemma I want to use needs <code>b ≠ a</code> in the second case.</p>",
        "id": 237036731,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1619943353
    },
    {
        "content": "<p>Right. It's not just notation, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne\">docs#ne</a> is a type alias.</p>",
        "id": 237037216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619943909
    },
    {
        "content": "<p>Although it's been discussed before that we should just teach <code>by_cases</code> to perform that rewrite automatically</p>",
        "id": 237037303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619943981
    },
    {
        "content": "<p>Also, you can do <code>obtain (rfl|h) := eq_or_ne a b,</code>, which <code>by_cases</code> can't (as far as I know)</p>",
        "id": 237041161,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1619948493
    },
    {
        "content": "<p>Exactly, that's what I was referring to above when I mentioned <code>rcases</code>.</p>",
        "id": 237043038,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1619950673
    },
    {
        "content": "<p>Oh look, I didn't read :)</p>",
        "id": 237043108,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1619950736
    },
    {
        "content": "<p>I'm glad to see we had the same train of thought :)</p>",
        "id": 237043127,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1619950778
    },
    {
        "content": "<p>And the other aspect of convenience I had in mind is what Eric mentioned about having <code>a ≠ b</code> instead of <code>¬ a = b</code>.</p>",
        "id": 237043235,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1619950894
    },
    {
        "content": "<blockquote>\n<p>you cannot do h.symm on h : not (a = b), but you can on h : a ≠ b.</p>\n</blockquote>\n<p>You can do <code>ne.symm h</code> though, so this isn't a major inconvenience</p>",
        "id": 237046950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619955387
    },
    {
        "content": "<p>I did not realize that. Thanks for the tip, that will same me the <code>rw</code> line.</p>",
        "id": 237050256,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1619959139
    },
    {
        "content": "<p>What is the verdict on this? I am fine following Mario's opinion, but there seems to have been some feedback in favor of adding <code>eq_or_ne</code>.</p>",
        "id": 238008192,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1620535432
    },
    {
        "content": "<p>It's fine to add it, I don't think it's particularly necessary but mathlib is not minimalist</p>",
        "id": 238008262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620535488
    },
    {
        "content": "<p>Personally, since my original post, I have already had two circumstances where it would have been very convenient to have such a lemma to use with <code>obtain</code>/<code>rcases</code>.</p>",
        "id": 238008266,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1620535502
    },
    {
        "content": "<p>sorry to necro this, but is there any reason we did this but _only_ for <code>Prop</code>?</p>",
        "id": 242141439,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623279521
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_or_ne\">docs#eq_or_ne</a> - gosh, we really did do that.</p>",
        "id": 242145321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623282889
    },
    {
        "content": "<p>probably someone forgot to declare the variables and it picked up the variable declaration which is a Prop since it's logic.basic</p>",
        "id": 242145760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623283281
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7865\">#7865</a></p>",
        "id": 242146401,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623283858
    },
    {
        "content": "<p>I'm so sorry, that's exactly what happened - I didn't realize that <code>a</code> and <code>b</code> were declared as <code>Prop</code>. My bad, and thank you for catching and fixing this Eric.</p>",
        "id": 242159769,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1623301241
    }
]