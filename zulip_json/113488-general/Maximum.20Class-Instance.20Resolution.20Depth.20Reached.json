[
    {
        "content": "<p>This appeared when I tried to use <a href=\"http://quotient.mk\" target=\"_blank\" title=\"http://quotient.mk\">quotient.mk</a>. What does this mean and how can I fix this?</p>",
        "id": 171834726,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564213875
    },
    {
        "content": "<p>Sometimes it just means you need to increase the bound. Other times it means that something has gone haywire, and instances have been defined that cause the class resolution mechanism (which isn't very clever) to enter a loop.</p>",
        "id": 171835445,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564215116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132893\">@Ken Lee</span> In what context where you using quotients?</p>",
        "id": 171835488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564215147
    },
    {
        "content": "<p>Try <code>set_option class.instance_max_depth 50</code>.</p>",
        "id": 171835489,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564215151
    },
    {
        "content": "<p>A bunch of algebra? Or a simple equivalence relation?</p>",
        "id": 171835492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564215164
    },
    {
        "content": "<p>I was trying to define orbits under a group action.</p>",
        "id": 171835512,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564215230
    },
    {
        "content": "<blockquote>\n<p>Try <code>set_option class.instance_max_depth 50</code>.</p>\n</blockquote>\n<p>This hasn't worked</p>",
        "id": 171835572,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564215325
    },
    {
        "content": "<p>Try 100</p>",
        "id": 171835573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564215331
    },
    {
        "content": "<p>If that fails, it means something else is wrong.</p>",
        "id": 171835574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564215340
    },
    {
        "content": "<p>Also... orbits are already in mathlib. (Of course that doesn't forbid you from defining your own. But just so you know.)</p>",
        "id": 171835613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564215364
    },
    {
        "content": "<blockquote>\n<p>Try 100</p>\n</blockquote>\n<p>I tried 500. It still doesn't work.</p>",
        "id": 171835616,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564215384
    },
    {
        "content": "<p>Ok, then we need more context to figure out what went wrong.</p>",
        "id": 171835617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564215398
    },
    {
        "content": "<p>Did you make the<code>setoid</code> an instance?</p>",
        "id": 171835624,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564215427
    },
    {
        "content": "<blockquote>\n<p>Also... orbits are already in mathlib. (Of course that doesn't forbid you from defining your own. But just so you know.)</p>\n</blockquote>\n<p>I know haha was just seeing if I can define it in Lean</p>",
        "id": 171835626,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564215430
    },
    {
        "content": "<blockquote>\n<p>Did you make the<code>setoid</code> an instance?</p>\n</blockquote>\n<p>Yes <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 171835630,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564215461
    },
    {
        "content": "<blockquote>\n<p>Ok, then we need more context to figure out what went wrong.</p>\n</blockquote>\n<p>Should I post the entire code? I haven't written much</p>",
        "id": 171835699,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564215546
    },
    {
        "content": "<p>Yes. It might be that the instance depends on an argument that can't be inferred by type class resolution.</p>",
        "id": 171835709,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564215596
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u0</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">setoid</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">congr</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">congr_alt</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"bp\">→</span> <span class=\"n\">f₁</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"n\">x₂</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x1_eq_x2</span> <span class=\"n\">f1_eq_f2</span><span class=\"o\">,</span> <span class=\"n\">congr</span> <span class=\"n\">f1_eq_f2</span> <span class=\"n\">x1_eq_x2</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">action</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"o\">:</span> <span class=\"n\">action</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">action</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">action</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"n\">action</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"n\">action</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">GX</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">action</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span>\n    <span class=\"c1\">-- Refl</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">map_one</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Symm</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">gx_eq_y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n      <span class=\"k\">calc</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"n\">y</span>\n            <span class=\"bp\">=</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gx_eq_y</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"err\">∘</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">congr_alt</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">congr_alt</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"n\">inv_mul_self</span> <span class=\"n\">g</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">map_one</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">⟩</span>\n    <span class=\"o\">,</span>\n    <span class=\"c1\">-- Trans</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">gx_eq_y</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hy_eq_z</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n            <span class=\"k\">calc</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n                    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">h</span> <span class=\"err\">∘</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">congr_alt</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n            <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">GX</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">gx_eq_y</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n            <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">hy_eq_z</span>\n        <span class=\"bp\">⟩</span>\n  <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">orbits</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">GX</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">action</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">GX</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">100</span>\n\n<span class=\"n\">def</span> <span class=\"n\">orbit</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">GX</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">action</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">orbits</span> <span class=\"n\">GX</span> <span class=\"o\">:=</span> <span class=\"err\">⟦</span><span class=\"n\">x</span><span class=\"err\">⟧</span>\n</pre></div>",
        "id": 171835880,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564215877
    },
    {
        "content": "<blockquote>\n<p>Yes. It might be that the instance depends on an argument that can't be inferred by type class resolution.</p>\n</blockquote>\n<p>May I ask, what is type class resolution?</p>",
        "id": 171835945,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564216032
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">orbit</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">GX</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">action</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">orbits</span> <span class=\"n\">GX</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>works fine</p>",
        "id": 171836161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564216452
    },
    {
        "content": "<p>It's the process that fill in the arguments in square brackets.</p>",
        "id": 171836164,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564216463
    },
    {
        "content": "<p>oh don't forget to import <code>data.quot</code></p>",
        "id": 171836231,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564216596
    },
    {
        "content": "<p>So the problem was that type class inference didn't know which group action you meant. This information can however be inferred from the expected type (which type class resolution doesn't use). <code>quotient.mk'</code> puts the setoid argument in <code>{}</code> brackets instead of <code>[]</code> brackets, so it uses a different procedure to infer the argument, which does use the expected type.</p>",
        "id": 171836247,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564216681
    },
    {
        "content": "<p>btw have you looked at the file <code>group_theory.group_action</code>?</p>",
        "id": 171836287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564216739
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171836293,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564216764
    },
    {
        "content": "<blockquote>\n<p>So the problem was that type class inference didn't know which group action you meant. This information can however be inferred from the expected type (which type class resolution doesn't use). <code>quotient.mk'</code> puts the setoid argument in <code>{}</code> brackets instead of <code>[]</code> brackets, so it uses a different procedure to infer the argument, which does use the expected type.</p>\n</blockquote>\n<p>Aha thanks for the explanation</p>",
        "id": 171836356,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564216881
    },
    {
        "content": "<blockquote>\n<p>btw have you looked at the file <code>group_theory.group_action</code>?</p>\n</blockquote>\n<p>No i have not. Why do you ask? <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 171836404,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564216976
    },
    {
        "content": "<p>because group action is already defined there</p>",
        "id": 171836410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564216992
    },
    {
        "content": "<blockquote>\n<p>because group action is already defined there</p>\n</blockquote>\n<p>Yes I know. But I wanted to exercise my Lean skills!</p>",
        "id": 171836476,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564217114
    },
    {
        "content": "<p>ok so a difference is that in the official file, the group action is a <code>class</code></p>",
        "id": 171836534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564217232
    },
    {
        "content": "<p>while you made it a <code>structure</code></p>",
        "id": 171836535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564217237
    },
    {
        "content": "<p>I forget the difference between the two. Should I have defined it as a class instead? (if so, why?)</p>",
        "id": 171836651,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564217408
    },
    {
        "content": "<p>I put your file in a washing machine</p>",
        "id": 171836661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564217476
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u0</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span>\n\n<span class=\"n\">class</span> <span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"kn\">export</span> <span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">mul_smul</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"n\">action</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"n\">action</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"n\">action</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span>\n    <span class=\"c1\">-- Refl</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_smul</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Symm</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">gx_eq_y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">gx_eq_y</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_smul</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_self</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Trans</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">gx_eq_y</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hy_eq_z</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_smul</span><span class=\"o\">,</span> <span class=\"n\">gx_eq_y</span><span class=\"o\">,</span> <span class=\"n\">hy_eq_z</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">orbits</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"n\">action</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">orbit</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"n\">action</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">orbits</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"err\">⟦</span><span class=\"n\">x</span><span class=\"err\">⟧</span>\n</pre></div>",
        "id": 171836662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564217478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> should it be a class or a structure?</p>",
        "id": 171836667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564217509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132893\">@Ken Lee</span> was there a particular reason why you avoided <code>rw</code>?</p>",
        "id": 171836708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564217541
    },
    {
        "content": "<p>Ah this is nice, so we can write <code>g(x) = y</code> effectively.</p>",
        "id": 171836759,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564217661
    },
    {
        "content": "<p>But this is bad if you want a group to act on a set in lots of different ways.</p>",
        "id": 171836769,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564217721
    },
    {
        "content": "<p>yeah but then why does the official file use <code>class</code>?</p>",
        "id": 171836816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564217797
    },
    {
        "content": "<p>Because we haven't had that problem yet. I'm not sure of the best solution.</p>",
        "id": 171836824,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564217843
    },
    {
        "content": "<p>There is a mathlib issue about this.</p>",
        "id": 171836827,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564217858
    },
    {
        "content": "<p>Doesn't <code>structure</code> reflect better what we do in usual maths, \"a group action is a tuple ...\"? The actually action itself is important to keep, no?</p>",
        "id": 171836867,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564217887
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132893\">Ken Lee</span> was there a particular reason why you avoided <code>rw</code>?</p>\n</blockquote>\n<p>I dunno because I like term mode? <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 171836870,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564217937
    },
    {
        "content": "<blockquote>\n<p>I put your file in a washing machine</p>\n</blockquote>\n<p>So in the shrunken version of my file, types can only have at most one action on them?</p>",
        "id": 171836935,
        "sender_full_name": "Ken Lee",
        "timestamp": 1564218082
    },
    {
        "content": "<p>At most one action from the same group. Or at least it will be a pain to have multiple actions from the same group.</p>",
        "id": 171836979,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564218129
    },
    {
        "content": "<p>But we can use type wrappers to solve this problem.</p>",
        "id": 171837416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564219161
    },
    {
        "content": "<p>I'm not sure this will always be a good solution. What if it's an action of the reals on the reals? There's a lot of stuff to transfer from reals onto wrapped reals. And then I can't do <code>action1 x y + action2 x y</code>, because the wrappers will be different.</p>",
        "id": 171837540,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564219392
    },
    {
        "content": "<p>let's think about group cohomology <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 171837602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564219476
    },
    {
        "content": "<p>do we have two actions from the same group on the same module?</p>",
        "id": 171837603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564219488
    },
    {
        "content": "<p>Not in the generic case, right?</p>",
        "id": 171837617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564219530
    },
    {
        "content": "<p>I mean do we have examples of those</p>",
        "id": 171837780,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564219830
    },
    {
        "content": "<p>Probably yes, I can't immediately think of any.</p>",
        "id": 171837834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564219938
    },
    {
        "content": "<p>Tate twists</p>",
        "id": 171838515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564221329
    },
    {
        "content": "<p>According to Wiki the m-th Tate twist of V is V tensor Q_p(-1) m times</p>",
        "id": 171838572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564221476
    },
    {
        "content": "<p>If we want examples of this, I think we shouldn't look so far away. For any group (typically non-abelian), there is the action of <code>G</code> on itself by left multiplication and by conjugation. So there we have two actions.</p>",
        "id": 171839326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564222921
    },
    {
        "content": "<p>Of course this example is (somewhat) moot in the case of group cohomology, because you typically want the coefficients to be abelian.</p>",
        "id": 171839364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564222958
    },
    {
        "content": "<p>I have an MSc student who is going to work on group cohomology in Lean this coming year.</p>",
        "id": 171840346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564224799
    }
]