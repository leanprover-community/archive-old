[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> has suggested to replace the infamous <code>a</code> bug by the similar, but hopefully less common, <code>á¾°</code> bug.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/issues/4802\">#4802</a>, <a href=\"https://github.com/leanprover-community/lean/issues/490\">lean#490</a>, <a href=\"https://github.com/leanprover-community/lean/issues/437\">lean#437</a><br>\nI'd like to finally close this issue.  Any opinions?</p>",
        "id": 214734358,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603819595
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> for the implementation.</p>",
        "id": 214734395,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603819608
    },
    {
        "content": "<p>Would <code>not_the_a_bug</code> be any better or worse a name than <code>á¾°</code>?</p>",
        "id": 214734718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603819734
    },
    {
        "content": "<p>seeing <code>á¾°</code> appear in the tactic state is probably harder for a new user to look up than <code>not_the_a_bug</code></p>",
        "id": 214734776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603819760
    },
    {
        "content": "<p>The point is that no one will accidentally use <code>á¾°</code>, while accidental use of <code>a</code> is common</p>",
        "id": 214734860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819796
    },
    {
        "content": "<p>And Mario pointed out that we still want to support autogenerated names</p>",
        "id": 214734965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603819822
    },
    {
        "content": "<p>They are all over the place in your tactic state. You just don't want them to appear explicitly in proof scripts.</p>",
        "id": 214735009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603819843
    },
    {
        "content": "<p>But having <code>not_the_a_bug</code> in 10 different places in your tactic state would be visually annoying</p>",
        "id": 214735075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603819867
    },
    {
        "content": "<p>(Before the weird unicode alpha, I had suggested <code>xyzzy</code>, <code>deadbeaf</code>, and <code>fixme</code>.)</p>",
        "id": 214735147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603819901
    },
    {
        "content": "<p>We should probably add documentation for this somewhere, because it's really weird</p>",
        "id": 214735164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819910
    },
    {
        "content": "<p>I don't have any idea where to put the docs though except perhaps on the source line that introduces the binder name</p>",
        "id": 214735305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819955
    },
    {
        "content": "<p>I am also very keen to close this issue. It still trips people up. But my understanding is that it will be hard to fix mathlib -- is this correct?</p>",
        "id": 214735553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603820047
    },
    {
        "content": "<p>There is a PR underway</p>",
        "id": 214735659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603820093
    },
    {
        "content": "<p>Ah, Gabriel linked to it in OP: <a href=\"https://github.com/leanprover-community/mathlib/issues/4802\">#4802</a></p>",
        "id": 214735719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603820119
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-     by_contradiction,</span>\n<span class=\"gd\">-     have := min_fac_prime a,</span>\n<span class=\"gi\">+     by_contradiction hn,</span>\n<span class=\"gi\">+     have := min_fac_prime hn,</span>\n</code></pre></div>\n\n<p>Can we have <code>by_contradiction</code> name its hypothesis <code>h</code> by default?</p>",
        "id": 214735975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603820238
    },
    {
        "content": "<p>Right, and it fails after 2 minutes. How problematic is the change for mathlib? I thought Reid was saying that it would be an absolute pain.</p>",
        "id": 214735993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603820245
    },
    {
        "content": "<p>Does this change the name Lean uses to elaborate function arrows in general? If so, then <code>name.is_likely_generated_binder_name</code>, <code>name.is_likely_generated_binder_simple_name</code> and the associated library note in mathlib's <code>meta.expr</code> need to be updated to match.</p>",
        "id": 214736158,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1603820304
    },
    {
        "content": "<p>I think fixing mathlib will merely be annoying if you give yourself the option to just use <code>á¾°</code> when things look bleak otherwise.</p>",
        "id": 214736291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603820364
    },
    {
        "content": "<p>oh I didn't think of using the <code>â€¹M.mk âŸ¨x_a, x_fâŸ© = M.mk âŸ¨h_a, h_xâŸ©â€º</code> syntax, that could help too</p>",
        "id": 214736542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603820457
    },
    {
        "content": "<p>but you can see at <a href=\"https://github.com/leanprover-community/mathlib/pull/4802/files#diff-bd5a0541cce36467731f8b5c749edac7f2dea9835cbdbe17ec5b1b1b2b5fe89cL349\">https://github.com/leanprover-community/mathlib/pull/4802/files#diff-bd5a0541cce36467731f8b5c749edac7f2dea9835cbdbe17ec5b1b1b2b5fe89cL349</a> that things went a bit off track, in that an <code>apply</code> became a <code>simp *</code></p>",
        "id": 214737359,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603820820
    },
    {
        "content": "<p>TBH, the instance naming change is more painful than the á¾°.  Stuff that should work but doesn't:</p>\n<ul>\n<li><code>instance : functor (set : Type â†’ Type)</code></li>\n<li><code>instance (F : C â‡’ D) : faithful F.op</code></li>\n</ul>",
        "id": 214737800,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603821026
    },
    {
        "content": "<p>Were those named <code>a</code> before?</p>",
        "id": 214737896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603821070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214735975\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-     by_contradiction,</span>\n<span class=\"gd\">-     have := min_fac_prime a,</span>\n<span class=\"gi\">+     by_contradiction hn,</span>\n<span class=\"gi\">+     have := min_fac_prime hn,</span>\n</code></pre></div>\n\n<p>Can we have <code>by_contradiction</code> name its hypothesis <code>h</code> by default?</p>\n</blockquote>\n<p>Yeah, <code>by_contradiction</code> should also use choice.  PRs welcome.  <a href=\"https://github.com/leanprover-community/lean/issues/433\">lean#433</a>  But I'm not sure <code>h</code> is really an improvement over <code>á¾°</code>.</p>",
        "id": 214737976,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603821112
    },
    {
        "content": "<p>The instances were called <code>functor</code> and <code>faithful</code> before (in whatever namespace you happened to be at the moment).</p>",
        "id": 214738066,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603821140
    },
    {
        "content": "<p>Can we ensure that these tactics do not reuse an existing name instead of using weird unicode?</p>",
        "id": 214738134,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603821190
    },
    {
        "content": "<p>It would be nice to have a policy \"name your variables\" too.</p>",
        "id": 214738192,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603821218
    },
    {
        "content": "<p>(if you're going to use them by name)</p>",
        "id": 214738210,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603821228
    },
    {
        "content": "<p>This weird unicode alpha will encourage that policy</p>",
        "id": 214738299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603821253
    },
    {
        "content": "<p>An explicit \"don't do this character\" like <code>ðŸš«</code> might be even more effective...</p>",
        "id": 214738847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603821487
    },
    {
        "content": "<p>Of course, \"name your variables\" is easier said than done for tactics like <code>split_ifs</code>, which can sometimes generate a whole bunch of cases.</p>",
        "id": 214738862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603821490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214738847\">said</a>:</p>\n<blockquote>\n<p>An explicit \"don't do this character\" like <code>ðŸš«</code> might be even more effective...</p>\n</blockquote>\n<p>But I think this is not a legal identifier... So then you need french quotes around it.</p>",
        "id": 214739645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603821776
    },
    {
        "content": "<blockquote>\n<p>Yeah, by_contradiction should also use choice. PRs welcome. <a href=\"https://github.com/leanprover-community/lean/issues/433\">lean#433</a> But I'm not sure h is really an improvement over á¾°.</p>\n</blockquote>\n<p>The difference is that it's a user tactic. <code>á¾°</code> isn't supposed to be the canonical autogenerated name, only the one that is used in pi binders in tactics</p>",
        "id": 214739649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603821780
    },
    {
        "content": "<p>It's \"name your variables or don't refer to them by names\"</p>",
        "id": 214739671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603821789
    },
    {
        "content": "<p>What should <code>intro</code> do on <code>âŠ¢ âˆ€ x : á¾°, x = x</code>?</p>",
        "id": 214739787,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603821826
    },
    {
        "content": "<p>E.g., you can use <code>\\f&lt;type\\f&gt;</code></p>",
        "id": 214739797,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603821829
    },
    {
        "content": "<p><code>have</code> has a documented default name <code>this</code>, <code>by_cases</code> has a documented default name <code>h</code>, <code>by_contradiction</code> should also have a documented default name (perhaps <code>h</code> or <code>hn</code>)</p>",
        "id": 214739821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603821836
    },
    {
        "content": "<p>I think <code>intro</code> should introduce the variable in the binder, so that's one way to get a <code>á¾°</code> variable</p>",
        "id": 214740015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603821890
    },
    {
        "content": "<p>Can it use <code>default_name_1</code> if there is a variable named <code>default_name</code> in the context?</p>",
        "id": 214740016,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603821890
    },
    {
        "content": "<p>it already does that</p>",
        "id": 214740035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603821897
    },
    {
        "content": "<p>Then why do we have <code>a</code> bug?</p>",
        "id": 214740108,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603821922
    },
    {
        "content": "<p>because if you write <code>have : \\all a : nat, 0 &lt; 1 -&gt; a &lt; a</code>, <code>a</code> will have type <code>0 &lt; 1</code></p>",
        "id": 214740239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603821965
    },
    {
        "content": "<p>I'm not sure exactly when the decision is made on what to name the <code>0 &lt; 1</code> binder there. If it is at parse time (making a <code>pexpr</code>) then we don't have the context so we don't know what to avoid</p>",
        "id": 214740491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603822080
    },
    {
        "content": "<p>Right, this is exactly the issue</p>",
        "id": 214740581,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603822111
    },
    {
        "content": "<p>TIL <code>\\all</code> works for <code>\\forall</code></p>",
        "id": 214740741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603822183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214738862\">said</a>:</p>\n<blockquote>\n<p>Of course, \"name your variables\" is easier said than done for tactics like <code>split_ifs</code>, which can sometimes generate a whole bunch of cases.</p>\n</blockquote>\n<p>The catchall solution for such tactics is to give them an unstructured name list to pull from whenever they need a name</p>",
        "id": 214741068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603822321
    },
    {
        "content": "<p>that's what <code>induction</code> does, basically</p>",
        "id": 214741119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603822330
    },
    {
        "content": "<p>alternatively, we could have an <code>rcases</code> pattern style name list</p>",
        "id": 214741165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603822350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214734776\">said</a>:</p>\n<blockquote>\n<p>seeing <code>á¾°</code> appear in the tactic state is probably harder for a new user to look up than <code>not_the_a_bug</code></p>\n</blockquote>\n<p>From a totally naive POV, I agree that something more searchable than <code>á¾°</code> would be good... I think <code>xyzzy</code> could be a good choice because it's clear that it's a \"magic value\" from its usage elsewhere, without being something that people are likely to accidentally pick. Or maybe even something like <code>_unnamed</code>?</p>",
        "id": 214741664,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1603822566
    },
    {
        "content": "<p>Zulip search works just fine: <a href=\"#narrow/search/.E1.BE.B0\">https://leanprover.zulipchat.com/#narrow/search/.E1.BE.B0</a></p>",
        "id": 214741780,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603822640
    },
    {
        "content": "<p>Probably not now, but a possible future option could be a way to set this</p>",
        "id": 214742304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603822884
    },
    {
        "content": "<p>if you want to prevent people from using the name generated, just have it generate a different name every time. <code>a&lt;random number&gt;</code></p>",
        "id": 214742333,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603822894
    },
    {
        "content": "<p>these are the pretty printed names</p>",
        "id": 214742366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603822909
    },
    {
        "content": "<p>the unique name is already that</p>",
        "id": 214742400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603822921
    },
    {
        "content": "<p>Whatever name we choose will also show up in the proof state, even for \"finished\" proofs, and perhaps also in the types of hypotheses</p>",
        "id": 214742447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603822927
    },
    {
        "content": "<p>I don't want to be staring at a state trying to distinguish a23425.34 from a94674.1</p>",
        "id": 214742577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603822988
    },
    {
        "content": "<p>maybe don't use structures with 34 fields then <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 214742745,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603823049
    },
    {
        "content": "<p>ok. it sounds like you do occasionally want to use this name then.  i suggest \"gen1\", \"gen2\" etc like a lisp gensym. unicode-junk and nonsense like \"xyzzy\" will end up being annoying in the end</p>",
        "id": 214742799,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603823075
    },
    {
        "content": "<p>\"gen\" also hints at \"generated\" so it's a small clue what it is, and \"gen1\" is nowhere used in mathlib right now</p>",
        "id": 214742867,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603823110
    },
    {
        "content": "<p>Should we add a style linter that forbids á¾°?</p>",
        "id": 214742870,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603823111
    },
    {
        "content": "<p>is that going to show up in the types of hypotheses?</p>",
        "id": 214743049,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603823189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> I think Gabriel means that <code>git grep  \"á¾°\"</code> should return nothing.</p>",
        "id": 214743262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603823289
    },
    {
        "content": "<p>oh i get it. in that case yeah a style linter</p>",
        "id": 214743589,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603823421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> How hard is it to make <code>ðŸš«</code> a legal identifier?</p>",
        "id": 214743740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603823492
    },
    {
        "content": "<p>Not too hard.</p>",
        "id": 214743887,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603823541
    },
    {
        "content": "<p>Then that might be even better than this weird alpha, right?</p>",
        "id": 214743993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603823584
    },
    {
        "content": "<p>I wonder what would happen if we used <code>_</code></p>",
        "id": 214744114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603823631
    },
    {
        "content": "<p>You can't search for the emoji on zulip: <a href=\"#narrow/search/.F0.9F.9A.AB\">https://leanprover.zulipchat.com/#narrow/search/.F0.9F.9A.AB</a></p>",
        "id": 214744133,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603823637
    },
    {
        "content": "<p>âƒ </p>",
        "id": 214744249,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603823680
    },
    {
        "content": "<p>we could probably carve out an exception for <code>_</code> for whatever is causing <code>_x</code> to break, since nobody is going to name a structure field the empty string anyways</p>",
        "id": 214744349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603823731
    },
    {
        "content": "<p><code>â€¦</code></p>",
        "id": 214744506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603823805
    },
    {
        "content": "<p>Actually no.</p>",
        "id": 214744575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603823827
    },
    {
        "content": "<p>&lt;wrong comment removed&gt;</p>",
        "id": 214744619,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603823851
    },
    {
        "content": "<p>I would love to reserve <code>â€¦</code> for \"don't try type class inference on this variable, but make it into a goal\".</p>",
        "id": 214744641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603823862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214744619\">said</a>:</p>\n<blockquote>\n<p>if <code>git grep \"á¾°\"</code> returns nothing, then searching on zulip won't yield anything either, even if the search does work</p>\n</blockquote>\n<p>What do you mean? The linter should raise an error if <code>git grep \"crazy-alpha\"</code> returns something.</p>",
        "id": 214744776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603823918
    },
    {
        "content": "<p>interestingly the pretty-printer displays the identifier <code>_</code> as <code>_</code>, even though you can't actually write <code>_</code> to refer to <code>Â«_Â»</code></p>",
        "id": 214744799,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603823928
    },
    {
        "content": "<p>The search on zulip will point you to this thread</p>",
        "id": 214744802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603823929
    },
    {
        "content": "<p>that might still be too confusing though...</p>",
        "id": 214744830,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603823945
    },
    {
        "content": "<p>why not name it something long, just to discourage people from writing it. there's no need for it to be super short if it isn't part of a proof. like <code>autogenerated_variable_1</code></p>",
        "id": 214744983,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603824006
    },
    {
        "content": "<p>You will see it in the proof state often, and a long name will make whatever it appears in hard to read</p>",
        "id": 214745149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603824087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214744983\">said</a>:</p>\n<blockquote>\n<p>why not name it something long, just to discourage people from writing it. there's no need for it to be super short if it isn't part of a proof. like <code>autogenerated_variable_1</code></p>\n</blockquote>\n<p>Crazy alpha will also discourage people from writing it.</p>",
        "id": 214745364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603824177
    },
    {
        "content": "<p>And it is easy to lint against.</p>",
        "id": 214745380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603824186
    },
    {
        "content": "<p>We definitely do need to document this somewhere that's easy to find though.</p>",
        "id": 214745428,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603824212
    },
    {
        "content": "<p>Maybe we could hack the widget tactic state to display a friendly pop-up or something.</p>",
        "id": 214745473,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603824241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214742870\">said</a>:</p>\n<blockquote>\n<p>Should we add a style linter that forbids á¾°?</p>\n</blockquote>\n<p>How would we <code>nolint</code> a style linter?</p>",
        "id": 214747545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603825121
    },
    {
        "content": "<p>Adding a line in <code>copy-mod-doc-exceptions.txt</code> is currently the only supported way.</p>",
        "id": 214747833,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603825245
    },
    {
        "content": "<p>It shouldn't be too hard to grep for <code>@[nolint autogenerated_names]</code></p>",
        "id": 214748186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603825414
    },
    {
        "content": "<p>maybe with some rule like \"the nolint extends until the next double newline\"</p>",
        "id": 214748265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603825443
    },
    {
        "content": "<p>I guess we can do that</p>",
        "id": 214753969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603828054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Can we crowdsource the work for <a href=\"https://github.com/leanprover-community/mathlib/issues/4802\">#4802</a> ?</p>",
        "id": 214809215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603875612
    },
    {
        "content": "<p>There are two issues, right? The instance names and the a-bug?</p>",
        "id": 214809236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603875627
    },
    {
        "content": "<p>I'll now look at improving the instance naming heuristic, this should hopefully cut the work in half.</p>",
        "id": 214811701,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603877365
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/493\">lean#493</a></p>",
        "id": 214817630,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603880932
    },
    {
        "content": "<p>Are there any objections against merging <a href=\"https://github.com/leanprover-community/lean/issues/490\">lean#490</a>?  Since á¾° intentionally doesn't appear in mathlib, we can repaint this bikeshed later if we want to.</p>",
        "id": 214818419,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603881393
    },
    {
        "content": "<p>I'm OK with the result of both changes. Haven't studied their implementation closely though.</p>",
        "id": 214820462,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603882657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I fear that it will take a lot of work to get rid of all autogenerated variables. Maybe this is a crazy dream, but would it be possible to ask Lean to modify the source code and use  <code>á¾°</code> when it hits an error?</p>",
        "id": 214931882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603954867
    },
    {
        "content": "<p>I guess this is made more difficult by the fact that we also have the instance names changing independently.</p>",
        "id": 214931891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603954889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214931882\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> I fear that it will take a lot of work to get rid of all autogenerated variables. Maybe this is a crazy dream, but would it be possible to ask Lean to modify the source code and use  <code>á¾°</code> when it hits an error?</p>\n</blockquote>\n<p>I'm not sure what change you expect Lean to do.  Neither <code>á¾°</code> nor <code>a</code> should be used in the source code.  So there needs to be more than just superficial changes.</p>",
        "id": 214939644,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603961629
    },
    {
        "content": "<p>Can't we remove the <code>á¾°</code> incrementally? When we introduced the docstring linter, that PR also didn't add docstrings to every <code>def</code> in mathlib.</p>",
        "id": 214939742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603961692
    },
    {
        "content": "<p>Even though your effort is very noble, I feel like it will take you 2 months to fix all of mathlib.</p>",
        "id": 214939772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603961717
    },
    {
        "content": "<p>On the contrary, I feel like I'm making progress.  It's pretty mindless so I'm mostly limited by how fast I get back errors from CI.</p>",
        "id": 214940961,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603962444
    },
    {
        "content": "<p>If this is the attitude we have for the Lean 4 migration, then we can rebrand the \"community edition\" as \"eternal mathlib edition\".</p>",
        "id": 214941021,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603962483
    },
    {
        "content": "<p>Well, it there are 500 crazy alphas in mathlib, then we can crowdsource a sprint to get rid of them. Now I feel like it's harder to parallelize the work.</p>",
        "id": 214941330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603962642
    },
    {
        "content": "<p>I am prepared to put in some hours to get rid of the a bug, for sure. I don't understand how to embark on this at this point but I'm sure this can be explained to me</p>",
        "id": 214942338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603963296
    },
    {
        "content": "<p>When I last embarked upon a major mathlib refactor (with Scott, removing some deprecated import) I would fix a file and then compile locally, it seemed quicker than relying on CI.</p>",
        "id": 214942510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603963400
    },
    {
        "content": "<p>Ok, I'll leave it to you then.  BTW, linear algebra compiles now.</p>",
        "id": 214942539,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603963421
    },
    {
        "content": "<p>Ooh wow, then it's maybe going faster than I expected. Sorry for the misunderstanding.</p>",
        "id": 214942727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603963549
    },
    {
        "content": "<p>How can I help? My course finishes tomorrow so the amount of time I have for Lean will creep up a little more</p>",
        "id": 214945131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603964862
    },
    {
        "content": "<p>I'm trying to build this locally with <code>3.23.0</code>, but lean isn't showing any output.</p>",
        "id": 214958581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974127
    },
    {
        "content": "<p>Also, I don't see it in <code>top</code>, whereas usually it would eat up all available CPU</p>",
        "id": 214958604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974148
    },
    {
        "content": "<p>It looks like it simply hangs</p>",
        "id": 214958641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974175
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lean --version\nLean <span class=\"o\">(</span>version <span class=\"m\">3</span>.23.0, commit ed6accfb611b, Release<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214958817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974294
    },
    {
        "content": "<p>So it doesn't hang completely</p>",
        "id": 214958843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974306
    },
    {
        "content": "<p>But if I run <code>lean --make src/</code> there is no output at all, even after several minutes.</p>",
        "id": 214958882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974341
    },
    {
        "content": "<p>It works here and it works on CI.  Could you maybe try again?</p>",
        "id": 214959363,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603974664
    },
    {
        "content": "<p>Yes, I did. It also doesn't work in VScode</p>",
        "id": 214959380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974678
    },
    {
        "content": "<p>First I thought that I should maybe update <code>elan</code>. But as you can see above, I do have the correct version of Lean</p>",
        "id": 214959420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974710
    },
    {
        "content": "<p>Can you try <code>rm **/*.olean</code>?</p>",
        "id": 214959484,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603974746
    },
    {
        "content": "<p>Ooh, that seems to have done it</p>",
        "id": 214959563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974813
    },
    {
        "content": "<p>Does that mean the cache is poisened?</p>",
        "id": 214959574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603974823
    },
    {
        "content": "<p>This shouldn't happen actually.  The import code checks that the olean file comes from the same lean version.</p>",
        "id": 214962970,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603976735
    },
    {
        "content": "<p>I had even run <code>leanproject get-mathlib-cache</code> (after CI had finished its mathlib build)</p>",
        "id": 214963070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603976782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Now it's hanging on</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>mathlib_a/src/order/bounded_lattice.lean: saving olean\n</code></pre></div>",
        "id": 214964219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603977363
    },
    {
        "content": "<p>(For the second time in a row)</p>",
        "id": 214964257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603977371
    },
    {
        "content": "<p>Aha, apparently there was an <code>olean.lock</code> file blocking it</p>",
        "id": 214964589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603977543
    },
    {
        "content": "<p><code>src/ring_theory/witt_vector</code> compiles</p>",
        "id": 214967672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603979083
    },
    {
        "content": "<p>I will try to fix <code>ring_theory/*</code> and whatever else I meet on my way there</p>",
        "id": 214969104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603979760
    },
    {
        "content": "<p>Ok, it compiles (-;</p>",
        "id": 214970009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603980116
    },
    {
        "content": "<p>Now I'll try <code>lean --make src/algebraic_geometry/</code></p>",
        "id": 214970097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603980143
    },
    {
        "content": "<p>Done. Now I'm trying <code>lean --make src/category_theory/</code></p>",
        "id": 214971452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603980718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214971452\">said</a>:</p>\n<blockquote>\n<p>Done. Now I'm trying <code>lean --make src/category_theory/</code></p>\n</blockquote>\n<p>This works for me!</p>",
        "id": 214972294,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1603981072
    },
    {
        "content": "<p>Snap... your machine is faster...</p>",
        "id": 214972347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603981087
    },
    {
        "content": "<p>I think I started before you :)</p>",
        "id": 214972363,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1603981096
    },
    {
        "content": "<p>Mine is also just done</p>",
        "id": 214972366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603981098
    },
    {
        "content": "<p>Aah, ok</p>",
        "id": 214972371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603981101
    },
    {
        "content": "<p><code>lean --make src/data</code></p>",
        "id": 214972410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603981122
    },
    {
        "content": "<p><code>lean --make src/algebra</code></p>",
        "id": 214973641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603981636
    },
    {
        "content": "<p><code>lean --make src/computability/</code></p>",
        "id": 214973841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603981722
    },
    {
        "content": "<p><code>lean --make src/control/</code></p>",
        "id": 214974855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603982209
    },
    {
        "content": "<p><code>lean --make src/combinatorics/</code></p>",
        "id": 214975201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603982388
    },
    {
        "content": "<p><code>lean --make src/field_theory/</code></p>",
        "id": 214975396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603982467
    },
    {
        "content": "<p><code>lean --make src/geometry/</code></p>",
        "id": 214975586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603982555
    },
    {
        "content": "<p><code>lean --make src/number_theory/</code></p>",
        "id": 214976945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603983104
    },
    {
        "content": "<p><code>lean --make src/representation_theory/</code></p>",
        "id": 214977251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603983230
    },
    {
        "content": "<p><code>lean --make src/topology/</code></p>",
        "id": 214977332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603983248
    },
    {
        "content": "<p>Stuff in <code>src/topology/sheaves/sheaf_condition</code> is really way too slow</p>",
        "id": 214979024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603983832
    },
    {
        "content": "<p>If someone is looking for a little <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span> <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> challenge, then <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 214979126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603983857
    },
    {
        "content": "<p>Working on <code>lean --make src/group_theory/</code></p>",
        "id": 214979214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603983893
    },
    {
        "content": "<p><code>lean --make src/deprecated/</code><br>\n<code>lean --make src/dynamics/</code><br>\n<code>lean --make src/analysis/</code></p>",
        "id": 214979950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603984178
    },
    {
        "content": "<p><code>lean --make src/measure_theory/</code><br>\n<code>lean --make src/meta</code></p>",
        "id": 214980534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603984352
    },
    {
        "content": "<p><code>lean --make src/order/</code></p>",
        "id": 214980571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603984367
    },
    {
        "content": "<p><code>lean --make src/set_theory</code></p>",
        "id": 214980638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603984400
    },
    {
        "content": "<p><code>lean --make src/tactic/</code></p>",
        "id": 214980756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603984444
    },
    {
        "content": "<p>There's a whole bunch of tests failing.</p>",
        "id": 214981090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603984603
    },
    {
        "content": "<p><code>src/</code> is now building without errors</p>",
        "id": 214981121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603984621
    },
    {
        "content": "<p>Aha, those expected outputs are not so bad</p>",
        "id": 214983179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603985408
    },
    {
        "content": "<p>Fixed them</p>",
        "id": 214983189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603985412
    },
    {
        "content": "<p>Looks like everything builds now. Let's wait for the linter.</p>",
        "id": 214983705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603985591
    }
]