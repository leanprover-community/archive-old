[
    {
        "content": "<p>I don't understand why <code>𝕜</code> is an implicit argument in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.L2.inner_indicator_const_Lp_eq_set_integral_inner\">docs#measure_theory.L2.inner_indicator_const_Lp_eq_set_integral_inner</a> and is an explicit argument in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.L2.inner_indicator_const_Lp_eq_inner_set_integral\">docs#measure_theory.L2.inner_indicator_const_Lp_eq_inner_set_integral</a></p>",
        "id": 262701366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637844447
    },
    {
        "content": "<p>Both lemmas are in the same section, with <code>variables (𝕜)</code></p>",
        "id": 262701391,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637844478
    },
    {
        "content": "<p>If I drop <code>[is_scalar_tower...]</code> argument from the latter lemma, then <code>𝕜</code> becomes implicit there too.</p>",
        "id": 262701535,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637844570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 262703711,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637845856
    },
    {
        "content": "<p>This is interesting!</p>",
        "id": 262704437,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637846358
    },
    {
        "content": "<p>If you add a <code>dummy : 𝕜</code> argument right after the lemma name, then 𝕜 is correctly marked as implicit.</p>",
        "id": 262704478,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637846390
    },
    {
        "content": "<p>I believe this means the following happens: for every variable mentioned in the theorem statement, Lean will add all transitively referenced variables.  But not with the brackets that they have now, but with the brackets that they had when you declared <code>variables [inner_product_space 𝕜 E]</code>.</p>",
        "id": 262704835,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637846617
    },
    {
        "content": "<p>Is there any workaround (other than listing all arguments explicitly)?</p>",
        "id": 262705563,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637847029
    },
    {
        "content": "<p>If you're looking for workarounds, you just need to mention \\bbk in the theorem statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inner_indicator_const_Lp_eq_set_integral_inner</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">E</span> <span class=\"mi\">2</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hμs</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"n\">indicator_const_Lp</span> <span class=\"mi\">2</span> <span class=\"n\">hs</span> <span class=\"n\">hμs</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 262706243,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637847481
    },
    {
        "content": "<p>Do we have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of this weirdness?</p>",
        "id": 262723734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637857144
    }
]