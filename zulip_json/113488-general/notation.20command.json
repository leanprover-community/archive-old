[
    {
        "content": "<p>I am trying to set up Lean to check proofs in  NF set theory.   All you need to know about it is that it's a first-order <br>\ntheory with set membership,  pairing {a , b},  ordered pairs &lt;a, b&gt; etc.   So my questions would apply more or less to <br>\nsetting up any first-order theory inside Lean.   I tried to use a notation command to tell the parser how to parse {a , b} and &lt; a, b&gt;  but it didn't <br>\nwork, and the manual is a little too terse on the subject.   So, here's my non-working file.  Can anyone tell me how to fix it?</p>\n<p>universe u<br>\nset_option default_priority 100<br>\nreserve infix <code> ∈ </code> : 50<br>\nreserve infix <code> ⊆ </code> : 50<br>\nreserve infix <code> ∪ </code> : 50<br>\nreserve infix <code> ∩ </code> : 50<br>\nnotation:  <code>{</code> l:(foldr <code>, </code> (a, b), <code>}</code> ) := 1<br>\nnotation:  <code>⟨ </code> l:(foldr <code>, </code> (a, b), <code>⟩ </code> ) := 1<br>\nclass nf_model (α : Type u) :=<br>\nvariable {α : u}<br>\nsection nf_model<br>\nvariables nf_model:α <br>\nvariables x,y,z,u,v,a,b,R,S:α <br>\n(extensionality: ∀ {M:α }, ∀ a,b,x (x ∈ a ↔ x ∈ b) → a=b))<br>\n(binary_union: ∀ {M : α}, ∀ x (x ∈ a ∪ b ↔ x ∈ a ∨  x ∈ b))<br>\n(intersection: ∀ {M:α},  ∀ x (x ∈ a ∩  b ↔ x ∈ a ∧  x ∈ b))<br>\n(complement: ∀ {M:α},  ∀ x (x ∈ c(a) ↔ ¬ x ∈ a))<br>\n(implication: ∀ {M:α},  ∀ x (x ∈ imp(a,b) ↔ (x ∈ a → x ∈ b)))<br>\n(emptyset: ∀ {M:α},  ∀ x(¬ x ∈ \\phi))<br>\n(pairing: ∀ {M:α}, ∀ x y z (x ∈ {a,b} ↔ (x = a ∨  x = b)))<br>\n(ordered_pairs: ∀ {M:α}, ∀ x y (⟨ x, y ⟩ = {x,{x,y}}))<br>\n(Vdef: ∀ {M:α}, ∀ x ( x ∈ V)) <br>\n(relation_definition: ∀ {M:α}, Rel(X) ↔ ∀ z(z ∈ X →  ∃ a,b (z =⟨ a, b⟩ )))<br>\n(Cartesian_product: ∀ {M:α}), ∀ x,y,u (u ∈ x × y ↔ ∃ a,b (a ∈ x ∧ b ∈ y ∧ u = ⟨ a,b \\rangle))<br>\n(domain: ∀ {M:α}), ∀ R (Rel(R) → ∀ x(x ∈ dom(R) ↔ ∃ y(⟨ x, y ⟩ ∈ R))))<br>\n(inverse_relation: ∀ {M:α}), ∀ R (Rel(R) → ∀ x,y (⟨ x,y ⟩ ∈ inv(R) ↔ ⟨ y,x ⟩ ∈ R)))<br>\n(join: ∀ {M:α} ∀ R,S (Rel(R) ∧ Rel(S) → ∀ x ( x \\in join(R,S) \\iff<br>\n                        \\exists a,b,c (x = ⟨ a,c ⟩ ∧  ⟨ a,b ⟩  \\in R ∧ ⟨  b,c ⟩  \\in S))<br>\n(equality_relation: ∀ {M:α} ∀ x( x ∈ eq ↔ ∃ z(x = ⟨ z, z⟩ )))<br>\n(subset_definition: ∀ {M:α} ∀ x,y (x ⊆ y ↔ ∀ z(z ∈ x → z ∈ y)))<br>\n(subset_relation: ∀ {M:α} ∀ x,y (⟨ x, y ⟩ ∈ subset ↔ x ⊆ y))<br>\n(union: ∀ {M:α} ∀ x,y (x ∈ union(y) ↔ ∃ z (z ∈ y ∧ x ∈ z)))<br>\n(singleton_image: ∀ {M:α} ∀ R(Rel(R) → ∀ x,y (⟨ x, y ⟩ ∈ SI(R) ↔ ∃ a,b(x = {a,a}  ∧ y = {b,b} ∧ ⟨ a,b ⟩ ∈ R)))<br>\nend nf_model</p>",
        "id": 193749706,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1586761304
    },
    {
        "content": "<p>I suggest you start by not trying to use notation. Also, you can enclose Lean code on Zulip between <code> ```lean </code> and <code> ``` </code>.</p>",
        "id": 193749877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586761605
    },
    {
        "content": "<p>There are some other issues, like <code>variable</code> and <code>section</code> can't appear after <code>class ... :=</code> like that.</p>",
        "id": 193749932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586761687
    },
    {
        "content": "<p>Mainly though you seem to be missing a specification of what ∈ should mean, like <code>(elem : α -&gt; α -&gt; Prop)</code> or something.</p>",
        "id": 193750032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586761868
    },
    {
        "content": "<p>And similarly for <code>{ , }</code></p>",
        "id": 193750034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586761876
    }
]