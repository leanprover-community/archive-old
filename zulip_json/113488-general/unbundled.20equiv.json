[
    {
        "content": "<p>Is there no typeclass saying that a specified function has a two-sided inverse? Like <code>bijective f</code> but carrying data for the inverse. I tried to define this but noticed that simp doesn't like the lemma <code>f (inv f y) = y</code></p>",
        "id": 193427391,
        "sender_full_name": "David Wärn",
        "timestamp": 1586425313
    },
    {
        "content": "<p>you can create your own structure.</p>",
        "id": 193427521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586425386
    },
    {
        "content": "<p>That's <code>equiv</code></p>",
        "id": 193427931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586425639
    },
    {
        "content": "<p>however it bundles both functions inside the structure</p>",
        "id": 193427956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586425662
    },
    {
        "content": "<p>which plays better with simp lemmas like the one you gave</p>",
        "id": 193428027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586425691
    },
    {
        "content": "<p>this new structure would be a subsingleton, which might have some advantage</p>",
        "id": 193428058,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586425711
    },
    {
        "content": "<p><code>is_iso</code></p>",
        "id": 193433667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586429399
    },
    {
        "content": "<p>You might have to make sure <code>category_theory.types</code> is also imported, to hook in the right instance.</p>",
        "id": 193433787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586429459
    },
    {
        "content": "<p>I like this idea</p>",
        "id": 193436631,
        "sender_full_name": "David Wärn",
        "timestamp": 1586431324
    },
    {
        "content": "<p>How do I tell Lean to think of my function as a hom?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟶</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Here Lean complains that f is a <code>\\r</code> arrow and not an <code>\\h</code> arrow (unless I declare it as an <code>\\h</code> arrow to begin with)</p>",
        "id": 193436843,
        "sender_full_name": "David Wärn",
        "timestamp": 1586431461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> Weird... that shouldn't happen</p>",
        "id": 193438114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586432338
    },
    {
        "content": "<p>The problem is that it doesn't find the category instance...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">is_iso</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 193438406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586432541
    },
    {
        "content": "<p>Don't ask me why it doesn't...</p>",
        "id": 193438416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586432552
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">is_iso</span> <span class=\"kt\">Type</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span>\n</pre></div>",
        "id": 193438471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586432601
    },
    {
        "content": "<p><code>include</code> the instance? Isn't this often what we have to do?</p>",
        "id": 193438658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586432764
    },
    {
        "content": "<p><code>include category_theory.types</code> is invalid as <code>types</code> is not a parameter/variable</p>",
        "id": 193439279,
        "sender_full_name": "David Wärn",
        "timestamp": 1586433253
    },
    {
        "content": "<p><code>#print instances category</code> shows that the instance is in scope anyway</p>",
        "id": 193439321,
        "sender_full_name": "David Wärn",
        "timestamp": 1586433282
    },
    {
        "content": "<p>Even though it's in scope, it is sometimes not picked up because of universe issues.</p>",
        "id": 193439425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433342
    },
    {
        "content": "<p>Even</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">is_iso</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟶</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>doesn't work</p>",
        "id": 193439920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586433612
    },
    {
        "content": "<p>Hmm... that's a pity.</p>",
        "id": 193440440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586433915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> -- could you explain to me the difference between <code>{ }</code> brackets and the double braces I've seen you use?</p>",
        "id": 193440460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586433936
    },
    {
        "content": "<p>I never learnt this.</p>",
        "id": 193440467,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586433938
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_iso</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">β</span> <span class=\"n\">f</span>\n</pre></div>",
        "id": 193440625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586434014
    },
    {
        "content": "<p>works, but you can't replace the \\beta with an _, even if you supply the additional universe level <code>@is_iso.{0 1}</code>.</p>",
        "id": 193440657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586434042
    },
    {
        "content": "<p>a double brace argument is implicit but it doesn't get applied unless some argument coming after it also gets applied. For example if <code>f : \\all {{x y : A}}, A -&gt; A</code> then <code>f</code> results in just <code>@f</code>, while <code>f z</code> is elaborated to <code>@f _ _ z</code></p>",
        "id": 193441772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586434760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think <code>function.injective</code> is a good example.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"err\">\\</span><span class=\"k\">forall</span> <span class=\"o\">{{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}},</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>without the double braces <code>hf : function.injective f</code> would have type <code>f ?1 = f ?2 → ?1 = ?2</code>. And you would get two crazy meta-variable goals. But <em>with</em> the double braces, <code>hf : function.injective f</code> has type <code>\\forall {x y}, f x = f y → x = y</code>. Does that make sense?</p>",
        "id": 193441799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586434782
    },
    {
        "content": "<p>It is good for definitions that are hiding a forall, like <code>set.subset</code> and <code>function.injective</code></p>",
        "id": 193441878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586434813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/unbundled.20equiv/near/193440657\" title=\"#narrow/stream/113488-general/topic/unbundled.20equiv/near/193440657\">said</a>:</p>\n<blockquote>\n<p>works, but you can't replace the \\beta with an _, even if you supply the additional universe level <code>@is_iso.{0 1}</code>.</p>\n</blockquote>\n<p>This is really annoying and sad....</p>",
        "id": 193442201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586435023
    },
    {
        "content": "<p>This is the best I can do so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">epi_mono</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- We can define an `abbreviation` wrapper that</span>\n<span class=\"c1\">-- lifts honest functions to morphisms in the category `Type`.</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">as_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟶</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">as_hom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- If you don&#39;t mind some notation you can use fewer keystrokes:</span>\n\n<span class=\"kn\">notation</span>  <span class=\"bp\">`</span><span class=\"err\">↾</span><span class=\"bp\">`</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"mi\">200</span> <span class=\"o\">:=</span> <span class=\"n\">as_hom</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"err\">↾</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"err\">↾</span><span class=\"n\">g</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"err\">↾</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"err\">↾</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"err\">↾</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"err\">↾</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">inv</span> <span class=\"err\">↾</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 193446693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586437480
    }
]