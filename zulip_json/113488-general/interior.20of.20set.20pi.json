[
    {
        "content": "<p>Can any filter pro give a clean proof of the following (or is it already in mathlib?):<br>\nI just managed to prove that the interior of a finite product equals the product of the interiors, but it's possibly one of the ugliest Lean proofs I've ever written and I'm not sure I understand it to be quite honest.<br>\nP.S. I was surprised to note the forward direction <code>interior (pi I s) ⊆ I.pi (λ i, interior (s i))</code> works even without the fintype assumption <span aria-label=\"hurt\" class=\"emoji emoji-1f915\" role=\"img\" title=\"hurt\">:hurt:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.bases</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_pi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">I</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I.pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_pi</span><span class=\"o\">,</span> <span class=\"n\">mem_interior_iff_mem_nhds</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">is_topological_basis_pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">is_topological_basis_opens</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mem_nhds_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">htopen</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">mem_pi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hiF</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_pi</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">htopen</span> <span class=\"n\">i</span> <span class=\"n\">hiF</span><span class=\"o\">,</span> <span class=\"n\">H₁</span> <span class=\"n\">i</span> <span class=\"n\">hiF</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">function.update</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">this</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">simpa</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i'</span> <span class=\"n\">hi'F</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">function.update</span><span class=\"o\">,</span>\n        <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">eq_rec_heq</span> <span class=\"n\">h.symm</span> <span class=\"n\">x</span><span class=\"o\">,},</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">H₁</span> <span class=\"n\">_</span> <span class=\"n\">hi'F</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">is_open_univ</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)⟩,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">univ_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">eq_univ_iff_forall</span><span class=\"o\">],</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">function.update</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">this</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">simpa</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i'</span> <span class=\"n\">hi'F</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">function.update</span><span class=\"o\">,</span>\n        <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hi'F</span><span class=\"o\">,</span>\n          <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">H₁</span> <span class=\"n\">_</span> <span class=\"n\">hi'F</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">set_pi_mem_nhds</span> <span class=\"o\">(</span><span class=\"n\">finite.of_fintype</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249178788,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628721543
    },
    {
        "content": "<p>You shouldn't ever have to rw function.update, it has an API</p>",
        "id": 249180984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628723133
    },
    {
        "content": "<p>Hello! I am totally new here but excited to go down this rabbit hole!</p>",
        "id": 249184436,
        "sender_full_name": "Louis Andrew Newton",
        "timestamp": 1628726079
    },
    {
        "content": "<p>I have just watched this video on GPT-3 codex, and was wondering if the same approach could be used on the language of maths itself? Try and generate some Godel problem breaking AI :)</p>",
        "id": 249184555,
        "sender_full_name": "Louis Andrew Newton",
        "timestamp": 1628726220
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=SGUCcjHTmGY\">https://www.youtube.com/watch?v=SGUCcjHTmGY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"SGUCcjHTmGY\" href=\"https://www.youtube.com/watch?v=SGUCcjHTmGY\"><img src=\"https://uploads.zulipusercontent.net/3da32fa9597e2187e2af932f1ac92dd0744d7e83/68747470733a2f2f692e7974696d672e636f6d2f76692f53475543636a48546d47592f64656661756c742e6a7067\"></a></div>",
        "id": 249184556,
        "sender_full_name": "Louis Andrew Newton",
        "timestamp": 1628726221
    },
    {
        "content": "<p>Yeah I agree but I couldn't find an api version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.update_apply\">docs#function.update_apply</a> for dependent functions.</p>",
        "id": 249214467,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628761343
    },
    {
        "content": "<p>Ok I made that part slightly neater by explicitly making the case split I want rather than rewriting function to use split ifs, but the principle is the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.bases</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_pi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">I</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I.pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_pi</span><span class=\"o\">,</span> <span class=\"n\">mem_interior_iff_mem_nhds</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">is_topological_basis_pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">is_topological_basis_opens</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mem_nhds_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">htopen</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">mem_pi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hiF</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_pi</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">htopen</span> <span class=\"n\">i</span> <span class=\"n\">hiF</span><span class=\"o\">,</span> <span class=\"n\">H₁</span> <span class=\"n\">i</span> <span class=\"n\">hiF</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">function.update</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">i'</span> <span class=\"n\">hi'F</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">function.update_same</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">function.update_noteq</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n        <span class=\"n\">exact</span> <span class=\"n\">H₁</span> <span class=\"n\">_</span> <span class=\"n\">hi'F</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">is_open_univ</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)⟩,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">univ_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">eq_univ_iff_forall</span><span class=\"o\">],</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">H₂</span> <span class=\"o\">(</span><span class=\"n\">function.update</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">i'</span> <span class=\"n\">hi'F</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">function.update_noteq</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n        <span class=\"n\">exact</span> <span class=\"n\">H₁</span> <span class=\"n\">_</span> <span class=\"n\">hi'F</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">set_pi_mem_nhds</span> <span class=\"o\">(</span><span class=\"n\">finite.of_fintype</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249215221,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628761893
    },
    {
        "content": "<p>I'll work on that.</p>",
        "id": 249218882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628764836
    },
    {
        "content": "<p>Nice, I made a PR at, <a href=\"https://github.com/leanprover-community/mathlib/pull/8642\">https://github.com/leanprover-community/mathlib/pull/8642</a> feel free to push to that branch and overwrite the proof or just close it and make a new one if you find a better proof <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 249218982,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628764928
    },
    {
        "content": "<p>I wrote the proof below, but it reminded me of very overdue stuff I needed to fix in <code>order.filter.basis</code> to make it a bit simpler.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">set</span> <span class=\"n\">function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Inter_ite</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">)]:</span>\n<span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∉</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span> <span class=\"bp\">;</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_Inter_of_mem_infi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">mem_infi_iff'.mp</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">I_fin</span><span class=\"o\">,</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"n\">hV'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"k\">then</span> <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">hV</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">univ_mem_sets</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Inter_ite</span><span class=\"o\">,</span> <span class=\"n\">hV'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">image_projection_prod</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">univ</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset.antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Inter_subset</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">y_in</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">mem_Inter</span><span class=\"o\">,</span> <span class=\"n\">mem_preimage</span><span class=\"o\">],</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hv</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">function.update</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">update_same</span> <span class=\"n\">i</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">forall_update_iff</span> <span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">y_in</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hz</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pi_mem_nhds</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">I.pi</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhds_pi</span><span class=\"o\">,</span> <span class=\"n\">pi_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n          <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"n\">ht'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"n\">exists_Inter_of_mem_infi</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">mem_comap_sets</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">v</span> <span class=\"n\">hv</span> <span class=\"n\">hv'</span> <span class=\"n\">using</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mem_sets_of_superset</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"o\">((</span><span class=\"n\">Inter_subset_Inter</span> <span class=\"n\">hv'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">ht'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">bInter_subset_of_mem</span> <span class=\"n\">hi</span><span class=\"o\">),</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">image_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">image_projection_prod</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_univ_pi</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">mem_of_mem_nhds</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pi_mem_nhds_iff</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">I.pi</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pi_mem_nhds</span><span class=\"o\">,</span> <span class=\"n\">set_pi_mem_nhds</span> <span class=\"bp\">$</span> <span class=\"n\">finite.of_fintype</span> <span class=\"n\">I</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_pi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">I</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I.pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>  <span class=\"o\">[</span><span class=\"n\">mem_pi</span><span class=\"o\">,</span> <span class=\"n\">mem_interior_iff_mem_nhds</span><span class=\"o\">,</span> <span class=\"n\">pi_mem_nhds_iff</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 249219987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628765855
    },
    {
        "content": "<p>Note that the goal was not to reduce the total number of lines, but to get the lemmas that should be there.</p>",
        "id": 249220060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628765898
    },
    {
        "content": "<p>Note in particular how your <code>function.update</code> issue was not lack of API but Lean 3 being bad at unifying the motive in <code>forall_update_iff</code></p>",
        "id": 249220386,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628766139
    },
    {
        "content": "<p>I'll open a PR later</p>",
        "id": 249220561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628766296
    },
    {
        "content": "<p>I think it might make sense to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">:=</span>\n</code></pre></div>\n<p>as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">function.eval</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">function.eval</span> <span class=\"n\">k</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">:=</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.eval\">docs#function.eval</a>)</p>",
        "id": 249221713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628767247
    },
    {
        "content": "<p>I know this exists but in this context the name is really confusing. Here we really thing of it as a projection, not an evaluation.</p>",
        "id": 249224923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628769462
    },
    {
        "content": "<p>That contention between <code>eval</code> and <code>proj</code> has come up elsewhere too; we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.eval_add_monoid_hom\">docs#pi.eval_add_monoid_hom</a> but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.proj\">docs#linear_map.proj</a>.</p>",
        "id": 249225418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628769735
    }
]