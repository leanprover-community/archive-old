[
    {
        "content": "<p>Whatever happened to <code>ring_hom.of</code>? It used to upgrade a function to a <code>ring_hom</code>.</p>",
        "id": 252929693,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1631388094
    },
    {
        "content": "<p>Did it want an <code>is_ring_hom</code> instance? Those got nuked</p>",
        "id": 252929800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631388233
    },
    {
        "content": "<p>Ah. I have <code>eval z : polynomial R -&gt; R</code>. How do I turn it into a ring homomorphism?</p>",
        "id": 252929860,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1631388292
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/polynomial/eval.html#polynomial.eval_ring_hom\">https://leanprover-community.github.io/mathlib_docs/data/polynomial/eval.html#polynomial.eval_ring_hom</a> I think since some changes to the elaborator, we should just make <code>eval</code> a bundled ring hom.</p>",
        "id": 252929965,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631388430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Last time I tried to turn <code>polynomial.eval</code> into a bundled hom, I got bored by turning all <code>p.eval x</code> to <code>eval x p</code>.</p>",
        "id": 252942897,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631402998
    },
    {
        "content": "<p>Dot notation doesn't work well with this kind of bundled homs.</p>",
        "id": 252942947,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631403020
    },
    {
        "content": "<p>Will this be any different in Lean 4?</p>",
        "id": 252942953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631403035
    },
    {
        "content": "<p>It seems to me that stuff like <code>eval</code> should be \"maximally bundled\" so the user can forget things later on if they want, rather than having to build up from a bare function.</p>",
        "id": 252942997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631403116
    },
    {
        "content": "<p>For eval it might be easy. For things like det it is harder because the proofs about the monoid_homness aren't trivial.</p>",
        "id": 252944800,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631405344
    }
]