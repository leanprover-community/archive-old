[
    {
        "content": "<p>(optional) assignment for the people here who are too bored:<br>\nConsider this inductive type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">nested</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nest</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nested</span> <span class=\"bp\">→</span> <span class=\"n\">nested</span>\n</pre></div>\n\n\n<p>Level 1: Write a definition <code>nested.cases_on'</code> and prove its equational lemmas.<br>\nLevel 2: Prove that this type has decidable equality (no, <code>@[derive decidable_eq]</code> won't work).<br>\nLevel 3: Write a definition <code>mem</code> such that <code>mem x (nest L)</code> iff <code>list.mem x L</code> and prove that <code>mem</code> is well-founded.<br>\nLevel 4: Prove that this type is <code>denumerable</code> (i.e. constructively countable).</p>",
        "id": 130567187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532942920
    },
    {
        "content": "<p>(I've done levels 1-3 and will upload the code later)</p>",
        "id": 130567191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532942935
    },
    {
        "content": "<p>Should this be a structure?</p>",
        "id": 130567208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532942993
    },
    {
        "content": "<p>can you make it a structure?</p>",
        "id": 130567259,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532943011
    },
    {
        "content": "<p>I don't know. I only mention it because I am dimly aware that if you make something a structure then it does some of the work for you. And it only has one constructor...</p>",
        "id": 130567272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532943039
    },
    {
        "content": "<p>I'm not sure whether <code>inductive</code> or <code>structure</code> comes with more tools, but I don't think you can make this a structure</p>",
        "id": 130567285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532943072
    },
    {
        "content": "<p>I remember the days when I was bored. I have far too much to do nowadays to even contemplate being bored!</p>",
        "id": 130567296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532943116
    },
    {
        "content": "<p>Answers: <a href=\"https://github.com/kckennylau/Lean/blob/master/nested.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/nested.lean\">https://github.com/kckennylau/Lean/blob/master/nested.lean</a></p>",
        "id": 130569524,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532946340
    },
    {
        "content": "<p>here's a choice function:</p>",
        "id": 130586341,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532964396
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">choice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nested</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">nest</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"o\">{</span> <span class=\"n\">z</span> <span class=\"bp\">//</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nest</span> <span class=\"o\">[])</span>       <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">rfl</span> <span class=\"n\">H</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nest</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">))</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_def</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 130586343,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532964398
    },
    {
        "content": "<p>Somebody should collect up these puzzles which appear here occasionally and make a little challenge page somewhere.</p>",
        "id": 130626524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533021299
    },
    {
        "content": "<p>such as in your blog?</p>",
        "id": 130626588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533021368
    },
    {
        "content": "<p>someone pointed out to me that my type is the type of all finite trees</p>",
        "id": 130627160,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533022327
    },
    {
        "content": "<p>Do you want to write a guest post about this problem? I look at it and I think \"I'd like to work on that, but I am too busy trying to deal with the questions my UROP students are asking me\".</p>",
        "id": 130627630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533023219
    },
    {
        "content": "<p>I'm busy reading ANT and AM and all that :-)</p>",
        "id": 130627637,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533023235
    },
    {
        "content": "<p>I saw Mario explicitly pointing out in a conference talk that there was not enough number theory in mathlib. I say that we begin to concentrate on fixing this.</p>",
        "id": 130627647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533023274
    },
    {
        "content": "<p>I'd say that among all things, the theory of fin.dim. vector spaces is a prerequisite</p>",
        "id": 130627696,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533023318
    },
    {
        "content": "<p>What exactly do you need? I have several people working on this.</p>",
        "id": 130627699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533023333
    },
    {
        "content": "<p>determinant and trace, right</p>",
        "id": 130627702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533023341
    },
    {
        "content": "<p>I have several people working on det too</p>",
        "id": 130627709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533023354
    },
    {
        "content": "<p>Cayley-Hamilton would be great</p>",
        "id": 130627712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533023360
    },
    {
        "content": "<p>I mean, you know much more ANT than me</p>",
        "id": 130627713,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533023366
    },
    {
        "content": "<p>right, indeed, that's precisely what I'm a world expert in :-)</p>",
        "id": 130627715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533023380
    },
    {
        "content": "<p>then why are you asking me lol</p>",
        "id": 130627719,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533023391
    },
    {
        "content": "<p>I'm asking you to implement it ;-)</p>",
        "id": 130627720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533023401
    }
]