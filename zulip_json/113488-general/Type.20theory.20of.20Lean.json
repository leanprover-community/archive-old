[
    {
        "content": "<p>I just delivered my master's thesis on lean's type theory, and the talk was recorded: <a href=\"https://www.youtube.com/watch?v=3sKrSNhSxik\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=3sKrSNhSxik\">https://www.youtube.com/watch?v=3sKrSNhSxik</a> . It builds up the motivation for all the complexity in DTT, so if you have a basic understanding of how proof judgments are presented you should be able to follow it. The repo with the full thesis is <a href=\"https://github.com/digama0/lean-type-theory/releases\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory/releases\">https://github.com/digama0/lean-type-theory/releases</a> .</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"3sKrSNhSxik\" href=\"https://www.youtube.com/watch?v=3sKrSNhSxik\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=3sKrSNhSxik\"><img src=\"https://i.ytimg.com/vi/3sKrSNhSxik/default.jpg\"></a></div>",
        "id": 163918718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555952724
    },
    {
        "content": "<p>Congrats!</p>",
        "id": 163919331,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555953222
    },
    {
        "content": "<p><a href=\"http://phdcomics.com/comics/archive.php?comicid=590\" target=\"_blank\" title=\"http://phdcomics.com/comics/archive.php?comicid=590\">http://phdcomics.com/comics/archive.php?comicid=590</a></p>",
        "id": 163921544,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555954886
    },
    {
        "content": "<p>Who would have believed to see this before Lean 4?</p>",
        "id": 163921817,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555955051
    },
    {
        "content": "<p>Congrats!</p>",
        "id": 163990778,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1556026917
    },
    {
        "content": "<blockquote>\n<p>f == g -&gt; x == y -&gt; f x == g y is unprovable</p>\n</blockquote>\n<p>Oops, so that's why I couldn't do it when I tried recently. Do you know if this is consistent as an added axiom?</p>",
        "id": 163998787,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1556032398
    },
    {
        "content": "<p>Don't add axioms! It's not really how Lean works, and support for them is poor. If you need it, add a variable. But people in general try to avoid <code>heq</code> completely. Why do you think you need it at all?</p>",
        "id": 164012424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556041736
    },
    {
        "content": "<p>I agree that adding axioms is probably undesirable, but it would be interesting to see whether this one is consistent with Lean from a purely type-theoretical point of view</p>",
        "id": 164075006,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1556108135
    },
    {
        "content": "<p>It's consistent, because it follows from injectivity of pi</p>",
        "id": 164135260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556155775
    },
    {
        "content": "<p>Are you saying that adding injectivity of pi is sufficient to prove it? Is there a down side to having that axiom?</p>",
        "id": 164135468,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556156088
    },
    {
        "content": "<p>One downside, as Carlo mentioned to me, is that it breaks the types-as-sets model, and the types-as-cardinalities model</p>",
        "id": 164141399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556164957
    },
    {
        "content": "<p>plus axioms always have computation / canonicity troubles</p>",
        "id": 164141401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556164981
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">pi_injective₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β&#39;</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α&#39;</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">pi_injective₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β&#39;</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">β&#39;</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">heq_congr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β&#39;</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">pi_injective₁</span> <span class=\"o\">(</span><span class=\"n\">type_eq_of_heq</span> <span class=\"n\">h₁</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"n\">pi_injective₂</span> <span class=\"o\">(</span><span class=\"n\">type_eq_of_heq</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">β&#39;</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 164141757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556165510
    },
    {
        "content": "<blockquote>\n<p>Who would have believed to see this before Lean 4?</p>\n</blockquote>\n<p>That was a very narrow win...</p>",
        "id": 164180129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556205833
    },
    {
        "content": "<p>Do you have a release date for Lean 4?</p>",
        "id": 164182699,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556207387
    },
    {
        "content": "<p>We didn't need a release to see it</p>",
        "id": 164182809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556207426
    },
    {
        "content": "<p>What about functional extensionality over <code>heq</code>? I think it doesn't hold in pure CiC, but maybe it's provable in Lean's theory (or in Lean+<code>pi_injective</code>)? Something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">heq_funext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">g</span>\n</pre></div>",
        "id": 168054681,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560439016
    },
    {
        "content": "<p>This looks provable in Lean</p>",
        "id": 168055176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560439356
    },
    {
        "content": "<p>Here is my unoptimized proof</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">heq_funext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">type_eq_of_heq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">heq_of_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_heq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168055581,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560439635
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 168056685,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560440316
    },
    {
        "content": "<p>Golfed </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">heq_funext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">hfunext</span>\n</pre></div>",
        "id": 168056776,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560440371
    },
    {
        "content": "<p><span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> I was looking for this in <code>heq</code> parts of the library</p>",
        "id": 168056972,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560440498
    },
    {
        "content": "<p>Alternatively</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">heq_funext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>",
        "id": 168057117,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560440581
    },
    {
        "content": "<p><code>library_search</code> is still not my first instinct with these sorts of things, and it probably should be. Sometimes I think \"probably I need <code>import mathlib</code> for the search to work\".</p>",
        "id": 168058476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560441481
    },
    {
        "content": "<p>Of course, Chris' triumph should be seen within the context of the hours of pain he had when trying to deal with <code>heq</code> last year.</p>",
        "id": 168058579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560441552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Can the types of Lean be regarded as sets in some usual sense? I mean, in mathlib the <code>module</code> (vector space) axioms are defined by saying that the \"add\" and \"scalar multiplication\" functions are Lean functions. If I'm formalizing math that was originally defined with set theory, as a lot of math has been, can I just replace all sets with types? Or should I define set theory inside Lean in some particular way first.</p>",
        "id": 248716554,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1628343014
    },
    {
        "content": "<p>No, in general the sets you're not set operations (union, intersection... but not cartesian product or sum) with should be types.</p>",
        "id": 248718467,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628345876
    },
    {
        "content": "<p>I feel it would be useful to have a guide for how to formalize math that was previously defined in set theory.</p>",
        "id": 248718783,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1628346315
    },
    {
        "content": "<p>The one line summary is <code>Type</code> = set, <code>set</code> = subset.</p>",
        "id": 248719097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1628346771
    },
    {
        "content": "<p>i think it's hard to get too specific, but really the main guidance what Reid just said.</p>",
        "id": 248719103,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628346783
    },
    {
        "content": "<p>(I don't have anything to add for the general situation, Reid is right)</p>",
        "id": 248719587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628347493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241097\">Juho Kupiainen</span> <a href=\"#narrow/stream/113488-general/topic/Type.20theory.20of.20Lean/near/248718783\">said</a>:</p>\n<blockquote>\n<p>I feel it would be useful to have a guide for how to formalize math that was previously defined in set theory.</p>\n</blockquote>\n<p>The main trick is to realize you are lying to yourself. The math you are thinking of have not been \"previously defined in set theory\". They have been defined outside of any formal foundation. However they are usually expressed using a vocabulary that is inspired by set theory, but this is a very superficial connection with set theory. When using Lean you can mostly ignore foundational details (unless you want to formalize computer science). You'll get used to it very quickly.</p>",
        "id": 248726293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628356977
    },
    {
        "content": "<p>In particular, \"A ring is a set equipped with an addition, a multiplication...\" is what we say, \"A ring is a collection of stuff equipped with an addition...\" is what we mean, and \"A ring is a type equipped with...\" is what we say in Lean, but it's all the same thing.</p>",
        "id": 248729540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628361416
    }
]