[
    {
        "content": "<p>I'm trying to port old code from the perfectoid project and I need help from people who know how to handle the new ordered algebra lemmas. Nowadays, how do you prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.with_zero</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">γ'</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vy_lt</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ'</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">γ'</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 255867028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633176977
    },
    {
        "content": "<p>We are missing some lemmas <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_of_le_mul_left</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inv_mul_cancel_left₀</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left'</span> <span class=\"n\">hab</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_lt_left₀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_le_mul_left</span> <span class=\"n\">hc</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">γ'</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vy_lt</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ'</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">γ'</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">γ'</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">γ'</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_lt_left₀</span> <span class=\"n\">_</span> <span class=\"n\">vy_lt</span> <span class=\"n\">γ'.ne_zero</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">mul_inv_cancel_left₀</span> <span class=\"n\">γ'.ne_zero</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 255870387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633180325
    },
    {
        "content": "<p>In the mean time I got away with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">γ'</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vy_lt</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ'</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">γ'</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">mul_inv_lt_of_lt_mul'</span> <span class=\"n\">vy_lt</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255871339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633181268
    },
    {
        "content": "<p>But indeed it seems we are missing lemmas here.</p>",
        "id": 255871351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633181281
    },
    {
        "content": "<p>And I'm a bit disappointed we don't have more general lemmas.</p>",
        "id": 255871427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633181345
    },
    {
        "content": "<p>Do we have a lemma for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">γ'</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vy_lt</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ'</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ'</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Which is defeq?</p>",
        "id": 255871458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633181388
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span>\n<span class=\"n\">γ</span> <span class=\"n\">γ'</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span>\n<span class=\"n\">vy_lt</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ'</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">γ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n</code></pre></div>",
        "id": 255871540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633181450
    },
    {
        "content": "<p>I <em>think</em> you're past the current limit of the order refactor.</p>",
        "id": 255872730,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633182656
    },
    {
        "content": "<p>I think you're just missing an import for that action, <code>group_theory.group_action.units</code></p>",
        "id": 255873362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633183232
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.mul_action\">docs#units.mul_action</a></p>",
        "id": 255873367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633183242
    },
    {
        "content": "<p>With this import, the statement makes sense but library_search founds nothing</p>",
        "id": 255876795,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633186735
    },
    {
        "content": "<p>I think it might make sense to have a typeclass along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">group.ordered_smul</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_le_iff</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Which is true for the pointwise action on sets and subobjects, as well as your case. Maybe <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> can point out we already have that in one of the new <code>co(ntra)variant_class</code>es?</p>",
        "id": 255881781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633192060
    },
    {
        "content": "<p>Isn't it precisely the multiplicative scalar version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_ordered_sub\">docs#has_ordered_sub</a>?</p>",
        "id": 255881987,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633192268
    }
]