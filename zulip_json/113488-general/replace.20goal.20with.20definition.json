[
    {
        "content": "<p>This is something I run into again and again:<br>\nGiven a goal of some \"non-trivial\" form (eg: <code>A &lt;= B</code> for <code>A B : set α</code>),<br>\nhow do I make lean tell me what the goal means?</p>\n<p>as in: how to replace the goal with its definition without knowing what the definition is?<br>\nI've tried all kinds of rws/applys, but can't seem to figure out what <code>&lt;=</code> is supposed to mean. Lean surely knows. How do I make it tell me? The <em>very useful</em> go to definition feature only shows me the definition of <code>class has_le</code>, not the instance.</p>",
        "id": 261931443,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637244563
    },
    {
        "content": "<p>You can inspect in the goal in the infoview what <code>has_le</code> instance it is.</p>",
        "id": 261931812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637244732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456923\">@Leonard Wiechmann</span> In the case of notation, this can be a bit tricky. But if you have <code>foo x y z</code>, then you can do <code>unfold foo</code> to unfold the definition.</p>",
        "id": 261931868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637244759
    },
    {
        "content": "<p>With notation, you can use widgets in the infoview, like Yaël says, if you are using VSCode.</p>",
        "id": 261931932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637244784
    },
    {
        "content": "<p>Just click on the <code>≤</code> and drill down the popup windows. The popup windows also have buttons that allow you to \"go to definition\".</p>",
        "id": 261931998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637244819
    },
    {
        "content": "<p>I'm not quite sure what it's trying to tell me <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span><br>\n<a href=\"/user_uploads/3121/mz9OGzDtFKY1680x4eQD4Lw0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mz9OGzDtFKY1680x4eQD4Lw0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/mz9OGzDtFKY1680x4eQD4Lw0/image.png\"></a></div>",
        "id": 261932087,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637244849
    },
    {
        "content": "<p>Click on <code>preorder.to_has_le</code>. That's the next step.</p>",
        "id": 261932139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637244878
    },
    {
        "content": "<p>oh boy<br>\n<a href=\"/user_uploads/3121/XZ1QehelEJggVI22onye9HzW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XZ1QehelEJggVI22onye9HzW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XZ1QehelEJggVI22onye9HzW/image.png\"></a></div>",
        "id": 261932367,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637244971
    },
    {
        "content": "<p>unfold got rid of the notation, but I still don't have a \"useful\" goal:<br>\n<a href=\"/user_uploads/3121/mCCqtFktcIdwmIKmWu7W0Z1c/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mCCqtFktcIdwmIKmWu7W0Z1c/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/mCCqtFktcIdwmIKmWu7W0Z1c/image.png\"></a></div>",
        "id": 261932478,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637245031
    },
    {
        "content": "<p>That was a wrong turn <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> In the second box, click on the third subitem</p>",
        "id": 261932531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637245062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456923\">Leonard Wiechmann</span> <a href=\"#narrow/stream/113488-general/topic/replace.20goal.20with.20definition/near/261931443\">said</a>:</p>\n<blockquote>\n<p>I've tried all kinds of intros/rws/applys, but can't seem to figure out what <code>&lt;=</code> is supposed to mean.</p>\n</blockquote>\n<p>Did you try <code>intros x hx</code>?</p>",
        "id": 261932652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637245118
    },
    {
        "content": "<p>yep. I can only introduce one thing. (<code>A : set \\a</code>)</p>",
        "id": 261932758,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637245180
    },
    {
        "content": "<p>You can also do this with simp</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">≤</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">≤</span><span class=\"o\">)],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">⊆</span><span class=\"o\">)],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.subset</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261932814,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637245203
    },
    {
        "content": "<p>The <code>&lt;=</code> is whatever <code>partial</code> instance your function takes!</p>",
        "id": 261932854,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637245220
    },
    {
        "content": "<p>You should just delete that</p>",
        "id": 261932879,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637245236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/replace.20goal.20with.20definition/near/261932814\">said</a>:</p>\n<blockquote>\n<p>You can also do this with simp</p>\n</blockquote>\n<p>that's very useful, thanks!</p>",
        "id": 261932989,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637245302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/replace.20goal.20with.20definition/near/261932854\">said</a>:</p>\n<blockquote>\n<p>The <code>&lt;=</code> is whatever <code>partial</code> instance your function takes!</p>\n</blockquote>\n<p>I had a feeling, that was the issue.<br>\nBut without it, I'm having trouble getting <code>is_smallest</code> to choose the right partial order.<br>\n<a href=\"/user_uploads/3121/RW0SAy6XSVg6hm1m7KMhLh10/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RW0SAy6XSVg6hm1m7KMhLh10/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RW0SAy6XSVg6hm1m7KMhLh10/image.png\"></a></div>",
        "id": 261933206,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637245405
    },
    {
        "content": "<p>that's because Lean has no idea what you mean</p>",
        "id": 261933272,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637245440
    },
    {
        "content": "<p>yeah, I'm just giving it a function. It can't really know what I mean. So I have to tell it somehow.</p>",
        "id": 261933376,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637245479
    },
    {
        "content": "<p>You should help it by giving a type annotation (and help us by copying and pasting text not screenshots)</p>",
        "id": 261933378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637245481
    },
    {
        "content": "<p>sorry, I wanted to include the error messages</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_smallest</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">powerset_empty_smallest</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_smallest</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 261933489,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637245535
    },
    {
        "content": "<p>The normal way to write the argument of <code>is_smallest</code> is <code>(∅ : set α)</code></p>",
        "id": 261933523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637245557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/replace.20goal.20with.20definition/near/261933523\">said</a>:</p>\n<blockquote>\n<p>The normal way to write the argument of <code>is_smallest</code> is <code>(∅ : set α)</code></p>\n</blockquote>\n<p>oooooh, that's what emptyc is for!<br>\nok, <code>is_smallest (∅ : set α)</code> isn't giving me an error so far.<br>\nlet's see if I can make the proof work.<br>\nthanks!</p>",
        "id": 261933752,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637245657
    },
    {
        "content": "<p>ok, got it working! all of that notation is nice to look at, but really obfuscates what the hypotheses and the goal actually mean.<br>\nthanks everyone!</p>",
        "id": 261934846,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1637246102
    },
    {
        "content": "<p>The reason that using \"canonical\" notation is important, is that this is what all the <code>simp</code> lemmas are designed to use, and <code>simp</code> works up to syntactic equality so it matters.</p>",
        "id": 261942437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637249341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456923\">Leonard Wiechmann</span> <a href=\"#narrow/stream/113488-general/topic/replace.20goal.20with.20definition/near/261933489\">said</a>:</p>\n<blockquote>\n<p>sorry, I wanted to include the error messages</p>\n</blockquote>\n<p>The usual way I include error messages in code snippets is to put them in comments immediately after the failing command</p>",
        "id": 262002506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637275469
    }
]