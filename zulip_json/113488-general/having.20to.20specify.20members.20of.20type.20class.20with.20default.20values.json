[
    {
        "content": "<p>I am being forced to specify members of a type class with default values. MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.n_ary</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span> <span class=\"n\">option</span> <span class=\"n\">category_theory</span> <span class=\"n\">prod</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">β₁</span> <span class=\"n\">β₂</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">class</span> <span class=\"n\">kent_convergence_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">kent_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊔</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">kent_convergence_space</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">class</span> <span class=\"n\">limit_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">kent_convergence_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sup_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊔</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- f ⊔ g means f ∩ g</span>\n<span class=\"o\">(</span><span class=\"n\">kent_converges</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">hconv</span><span class=\"o\">,</span> <span class=\"n\">sup_converges</span> <span class=\"n\">hconv</span> <span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">limit_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">limit_space</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">converges</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">pure_converges</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_converges</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sup_converges</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The error that I get here is useless:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">sup_converges'</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊔</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊔</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I can fix the problem by adding <code>kent_converges := sorry</code> to the instance. But I want to avoid having to do this - hence the default implementation in <code>limit_space</code>.</p>",
        "id": 289090558,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657442286
    },
    {
        "content": "<p>Does using <code>old_structure_cmd</code> help?</p>",
        "id": 289093393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657446725
    },
    {
        "content": "<p>No. It seems to cause other problems.</p>",
        "id": 289094899,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657448821
    },
    {
        "content": "<p>Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> without <code>sorry</code>s?</p>",
        "id": 289095313,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657449414
    },
    {
        "content": "<p>Why are you making <code>limit_space</code> extend <code>kent_convergence_space</code> if that makes it have redundant fields?</p>",
        "id": 289102043,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657458201
    },
    {
        "content": "<p>The right thing to do here is to make <code>limit_space</code> extend <code>convergence_space</code> and write the instance <code>limit_space α → kent_convergence_space α</code>.</p>",
        "id": 289102105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657458249
    },
    {
        "content": "<p>This is what we do between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring\">docs#ring</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semiring\">docs#semiring</a>.</p>",
        "id": 289102145,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657458332
    },
    {
        "content": "<p>The rule of thumb is \"Don't have default Prop fields that do not depend on other default fields\" (\"Do not write default Prop fields\" would fail to explain <a href=\"https://leanprover-community.github.io/mathlib_docs/find/preorder.lt_iff_le_not_le\">docs#preorder.lt_iff_le_not_le</a>).</p>",
        "id": 289102208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657458418
    },
    {
        "content": "<p>Isn't what I am doing similar to what is done in monad? <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/control/monad.lean#L23\">https://github.com/leanprover-community/lean/blob/master/library/init/control/monad.lean#L23</a></p>",
        "id": 289104687,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657461481
    },
    {
        "content": "<blockquote>\n<p>The right thing to do here is to make limit_space extend convergence_space and write the instance limit_space α → kent_convergence_space α.</p>\n</blockquote>\n<p>I can do this, but that ruins the hierarchy that I wanted to make.</p>",
        "id": 289104741,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657461537
    },
    {
        "content": "<p>Those are Type-valued fields though. The implementation is important in Type, but not in Prop.</p>",
        "id": 289104768,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657461563
    },
    {
        "content": "<p>How does that \"ruin\" your hierarchy? The only differences with what you're doing now is that you have one field less and one instance more (<code>limit_space α → convergence_space α</code>).</p>",
        "id": 289104872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657461671
    },
    {
        "content": "<p>Well, this is just part of the hierarchy. There's two more levels after <code>limit_space</code>.</p>",
        "id": 289110162,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657468249
    },
    {
        "content": "<blockquote>\n<p>Those are Type-valued fields though. The implementation is important in Type, but not in Prop.</p>\n</blockquote>\n<p>How is this important?</p>",
        "id": 289110187,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657468304
    },
    {
        "content": "<p>I don't really agree with <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>' \"don't have default prop fields\" claim, we do it in a few places and it's normally harmless</p>",
        "id": 289110266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657468396
    },
    {
        "content": "<p>The only real downside seems to be whatever you're running into</p>",
        "id": 289110273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657468419
    },
    {
        "content": "<p>... and that the user is by default prompted with a goal that doesn't need solving.</p>",
        "id": 289110325,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657468481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/having.20to.20specify.20members.20of.20type.20class.20with.20default.20values/near/289110162\">said</a>:</p>\n<blockquote>\n<p>Well, this is just part of the hierarchy. There's two more levels after <code>limit_space</code>.</p>\n</blockquote>\n<p>I maintain my claim. My proposed fix is local.</p>",
        "id": 289110402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657468595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/having.20to.20specify.20members.20of.20type.20class.20with.20default.20values/near/289110266\">said</a>:</p>\n<blockquote>\n<p>I don't really agree with <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>' \"don't have default prop fields\" claim, we do it in a few places and it's normally harmless</p>\n</blockquote>\n<p>I specifically claimed that I was not advocating for \"Don't have default Prop fields\", but instead for \"Don't have default Prop fields that do not depend on other default fields\".</p>",
        "id": 289110710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657468944
    },
    {
        "content": "<p>Alright. I'll have to rethink my design (I'll try Yaël's suggestion). Thanks a lot guys.</p>",
        "id": 289115301,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657474776
    }
]