[
    {
        "content": "<p>Can I state the theorem \"... of the subgroup of the subgroup of ... G\" is a subgroup of G?</p>",
        "id": 207761430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598169353
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"k\">by</span> <span class=\"n\">library_search</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">K</span>\n</code></pre></div>",
        "id": 207762175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598170690
    },
    {
        "content": "<p>yes but I want an infinite chain of subgroups</p>",
        "id": 207762777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598171918
    },
    {
        "content": "<p>Oh!</p>",
        "id": 207763238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598172802
    },
    {
        "content": "<p>Of course you can still do it but maybe you want to set things up differently</p>",
        "id": 207763301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598172918
    },
    {
        "content": "<p>I wanted a similar type of dependent sequences in another context, but I couldn't figure out how to get it to work.</p>\n<p>Here's one thing I tried:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">A list of groups, where each is a subgroup of the previous</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">subgroup_chain</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">subgroup</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Drop last subgroup off the `subgroup_chain`.  FAILS: &quot;dependent pattern matching result is not a constructor application&quot;</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">sc_init</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span> <span class=\"n\">h</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">h</span> <span class=\"n\">G&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">h</span> <span class=\"n\">G&#39;</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">h</span> <span class=\"n\">G&#39;</span> <span class=\"o\">(</span><span class=\"n\">sc_init</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subgroup_sequence</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">sc_init</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 207765155,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598176408
    },
    {
        "content": "<p>I think what I was attempting is to simulate a coinductive definition with inductive types.  Ideally this would be a stream of subgroups (a.k.a. an infinite list).</p>",
        "id": 207765244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598176535
    },
    {
        "content": "<p>Isn't it possible to just have a <code>chain</code> in the partial order of subgroups?</p>",
        "id": 207765250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598176554
    },
    {
        "content": "<p>or a monotone function, if you want an infinite sequence</p>",
        "id": 207765301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598176587
    },
    {
        "content": "<p>In the other context, I found some type that everything could be a <code>set</code> in, solving the problem like you suggest, but I'm still wondering how to set up this kind of recursive definition.</p>",
        "id": 207765378,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598176685
    },
    {
        "content": "<p>In the coq odd order paper some technicalities were solved by making all groups subgroups of an ambient big group. But this trick cannot be used for eg rings</p>",
        "id": 207765675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598177128
    },
    {
        "content": "<p>I won't say this is the best implementation, but it fixes all the errors and avoids the universe bump:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">A list of groups, where each is a subgroup of the previous</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">subgroup_chain&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">G</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">punit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">subgroup_chain&#39;</span> <span class=\"n\">n</span> <span class=\"n\">G&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subgroup_chain</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"err\">Σ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">subgroup_chain&#39;</span> <span class=\"n\">n</span> <span class=\"n\">G</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">G&#39;</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">init&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">subgroup_chain&#39;</span> <span class=\"n\">n</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">G&#39;</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">G&#39;</span> <span class=\"o\">(</span><span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">init&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Drop last subgroup off the `subgroup_chain`.  FAILS: &quot;dependent pattern matching result is not a constructor application&quot;</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">init</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">G&#39;</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">init&#39;</span> <span class=\"n\">n</span> <span class=\"n\">G&#39;</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subgroup_sequence</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup_chain</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">subgroup_chain</span><span class=\"bp\">.</span><span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 207766368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598178272
    },
    {
        "content": "<p>I tried abstracting out the pattern, which is that these are lists whose elements have types that are constructed from the previous element in some way.  There is a type <code>α</code>, a function <code>tcons</code> of that takes terms of <code>α</code> to types that index allowable next terms in the list, and a function <code>mk</code> that takes these index terms back to terms of  <code>α</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">chains</span>\n\n<span class=\"n\">def</span> <span class=\"n\">chain_tcons</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">def</span> <span class=\"n\">chain_mk</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">chain_tcons</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">tcons</span> <span class=\"o\">:</span> <span class=\"n\">chain_tcons</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">chain_mk</span> <span class=\"n\">tcons</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">chain&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">punit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tcons</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">chain&#39;</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">chain</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">chain&#39;</span> <span class=\"n\">tcons</span> <span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">tcons</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mk</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">chain</span> <span class=\"n\">tcons</span> <span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tcons</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">chain</span> <span class=\"n\">tcons</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">chain</span> <span class=\"n\">tcons</span> <span class=\"n\">mk</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">init&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">chain&#39;</span> <span class=\"n\">tcons</span> <span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">chain</span> <span class=\"n\">tcons</span> <span class=\"n\">mk</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x&#39;</span> <span class=\"o\">(</span><span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">init&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"n\">def</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">init</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">chain</span> <span class=\"n\">tcons</span> <span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">chain</span> <span class=\"n\">tcons</span> <span class=\"n\">mk</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">init&#39;</span> <span class=\"n\">n</span> <span class=\"n\">C</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">tcons</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk</span><span class=\"o\">)</span>\n<span class=\"kn\">structure</span> <span class=\"n\">chain_seq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">chain</span> <span class=\"n\">tcons</span> <span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">chains</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">Group</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">subgroup_tcons</span> <span class=\"o\">:</span> <span class=\"n\">chain_tcons</span> <span class=\"n\">Group</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">G</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">s</span>\n<span class=\"n\">def</span> <span class=\"n\">subgroup_mk</span> <span class=\"o\">:</span> <span class=\"n\">chain_mk</span> <span class=\"n\">subgroup_tcons</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">G&#39;</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">G&#39;</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207795856,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598224390
    },
    {
        "content": "<p>I don't feel like I fully understand the pattern yet, but the code certainly type checks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 207795921,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598224475
    },
    {
        "content": "<p>By the way, the general technique for avoiding universe bumps in inductives is to realize that not all types can be used in the recursion, only those \"derived\" from the input by some \"small\" (i.e. in Type u) indexed family</p>",
        "id": 207796021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598224668
    },
    {
        "content": "<p>in this case the family is indexed by <code>nat</code></p>",
        "id": 207796022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598224678
    },
    {
        "content": "<p>here's another example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">rose_tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- bad</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">rose_tree</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rose_tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">rose_tree</span> <span class=\"n\">α</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rose_type</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rose_type</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rose_tree&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"c1\">-- good</span>\n<span class=\"err\">Σ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rose_type</span> <span class=\"n\">n</span> <span class=\"n\">α</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rose_tree&#39;</span><span class=\"bp\">.</span><span class=\"n\">leaf</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rose_tree&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">rose_tree&#39;</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rose_tree&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">rose_tree&#39;</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 207796411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598225218
    },
    {
        "content": "<p>the fact that it is a def after the transformation isn't the important part, it is the fact that <code>rose_tree'</code> only quantifies over <code>nat</code> instead of <code>Type u</code></p>",
        "id": 207796444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598225269
    },
    {
        "content": "<p>The only time this isn't possible is when you really take advantage of that type quantifier, as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pSet/src\">src#pSet</a>, and that's when you get the really big inductives that properly require a universe bump</p>",
        "id": 207796570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598225421
    },
    {
        "content": "<p>Thanks, I was wondering if the <code>nat</code> you introduced was the key here.</p>\n<p>The other setup I was looking at was defining a sequence of graphs, each having a vertex set derived from the previous, something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">deriv_verts</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">simple_graphs</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">|</span> <span class=\"n\">incl</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sym2</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">~</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">deriv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">simple_graphs</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph_on</span> <span class=\"o\">(</span><span class=\"n\">deriv_verts</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- then define a function f : ℕ → graphs somehow where f (n + 1) = deriv (f n)</span>\n</code></pre></div>\n\n\n<p>It turns out all the graphs can be thought of as being subgraphs of a complete graph on some other type, so it doesn't really matter, but I thought it was interesting how it wasn't clear how to reign in the universes.</p>",
        "id": 207796660,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598225629
    },
    {
        "content": "<p>I guess this is another way to set it up:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">Group</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subgroups</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Group</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Group</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">G&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">G</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">G&#39;</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">g&#39;</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"bp\">⟩</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subgroup_chain</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Group</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Group</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">subgroups</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>This simplifies things in that it doesn't need to represent the infinite chain as a limit of finite chains.</p>",
        "id": 207798042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598227963
    },
    {
        "content": "<p>you might have some type equalities to wrangle with that definition</p>",
        "id": 207798278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598228305
    }
]