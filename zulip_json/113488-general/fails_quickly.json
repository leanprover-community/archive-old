[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9123\">#9123</a> is failing at the moment because <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s linter <code>fails_quickly</code> found a problem with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_scalar\">docs#pi.has_scalar</a>: <a href=\"https://github.com/leanprover-community/mathlib/runs/3665752864\">https://github.com/leanprover-community/mathlib/runs/3665752864</a></p>\n<p>I recreated the typeclass search here, as indicated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>I must say I have no idea what to look for in the TC trace. <code>module.to_distrib_mul_action_with_zero</code> appears several times, but it doesn't seem to be looping. Could it just be that <code>fails_quickly</code> is a bit too severe?</p>",
        "id": 255028054,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632740223
    },
    {
        "content": "<p>(note to others: this problem exists only in the branch of <a href=\"https://github.com/leanprover-community/mathlib/issues/9123\">#9123</a> which adds <code>distrib_mul_action_with_zero</code>)</p>",
        "id": 255028451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632740408
    },
    {
        "content": "<p>Does that <code>example</code> time out or work? If it works, increasing the time limit in <code>fails_quickly</code> is probably OK.</p>",
        "id": 255030669,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1632741487
    },
    {
        "content": "<p>I think it's <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>'s linter, btw, not mine.</p>",
        "id": 255034850,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632743724
    },
    {
        "content": "<p>Whoops, yup, got that wrong.</p>",
        "id": 255034863,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632743736
    },
    {
        "content": "<blockquote>\n<p>(3) What error do you get?<br>\n(3a) If the error is \"tactic.mk_instance failed to generate instance\",<br>\nthere might be nothing wrong. But it might take unreasonably long for the type-class inference to<br>\nfail. Check the trace to see if type-class inference takes any unnecessary long unexpected turns.<br>\nIf not, feel free to increase the value in the definition of the linter <code>fails_quickly</code>.<br>\n(3b) If the error is \"maximum class-instance resolution depth has been reached\" there is almost<br>\ncertainly a loop in the type-class inference. Find which instance causes the type-class inference to<br>\ngo astray, and fix that instance.</p>\n</blockquote>",
        "id": 255084234,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1632762566
    },
    {
        "content": "<p>I believe the new classes and instances in <a href=\"https://github.com/leanprover-community/mathlib/pull/16123\">#16123</a> will require a bump of the <code>fails_quickly</code> linter timeout. In particular, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.nonempty\">docs#prod.nonempty</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_smul'\">docs#pi.has_smul'</a> trigger searches through a huge part of the algebraic hierarchy and I don't see a straightforward way to avoid that, nor do the extra instances change the search space in interesting ways beyond extending it a bit. So I think we should bump the <code>fails_quickly</code> timeout to something like 27500 or 30000 heartbeats.</p>",
        "id": 294669974,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1661173103
    },
    {
        "content": "<p>If there's no objection in the next couple of hours I'll assume it's fine to bump the timeout.</p>",
        "id": 295004999,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1661331545
    }
]