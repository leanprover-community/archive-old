[
    {
        "content": "<p>Just noticed the lemma <code>coe_coe</code>, which is tagged as <code>simp</code>, does this mean I need to be careful about tagging lemmas that make a double coercion into a single coercion with simp?</p>",
        "id": 125958400,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525202443
    },
    {
        "content": "<blockquote>\n<p>Just noticed the lemma <code>coe_coe</code>, which is tagged as <code>simp</code>, does this mean I need to be careful about tagging lemmas that make a double coercion into a single coercion with simp?</p>\n</blockquote>\n<p>yes</p>",
        "id": 125960662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525205715
    },
    {
        "content": "<p>What's the difference between <code>has_coe</code> and <code>has_coe_t</code>?</p>",
        "id": 125960853,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525205966
    },
    {
        "content": "<p>L37:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Auxiliary class that contains the transitive closure of has_coe. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<hr>\n<p>L94:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">coe_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">coe_t</span> <span class=\"o\">(</span><span class=\"n\">coe_b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 125960953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525206088
    },
    {
        "content": "<p>Maybe the type class coercion system uses this instance?</p>",
        "id": 125961550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525206925
    },
    {
        "content": "<p>curiously, this <code>has_coe_t</code> appears literally nowhere</p>",
        "id": 125961600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525206979
    },
    {
        "content": "<p>Did you check the C++ bit?</p>",
        "id": 125961607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525207004
    },
    {
        "content": "<p>maybe it's because of this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">coe_to_lift</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">coe_t</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 125961611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525207018
    },
    {
        "content": "<p>so my conjecture is that they use <code>has_coe_t</code> to do transitive stuff, and then make <code>has_lift_t</code> the interface</p>",
        "id": 125961620,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525207048
    },
    {
        "content": "<p>I remember Mario once saying something like he couldn't see the point of has_lift</p>",
        "id": 125961671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525207095
    },
    {
        "content": "<p>There's something about it in TPIL IIRC</p>",
        "id": 125961673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525207121
    },
    {
        "content": "<p>So I don't need to worry unless it's a <code>coe_t</code>. The reason I noticed is because the coercion from pnat to int is a coe_t obviously, so it was being rewritten by coe_coe.</p>",
        "id": 125961919,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525207490
    },
    {
        "content": "<p>Which means I need double the lemmas</p>",
        "id": 125962001,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525207573
    },
    {
        "content": "<p>Has_lift gives you access to the \\u uparrow notation but lean won't ever insert them for you if you're not has_coe</p>",
        "id": 125962030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525207674
    },
    {
        "content": "<p>But each lemma is twice as easy to prove <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125962081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525207741
    },
    {
        "content": "<p>You shouldn't need \"double the lemmas\", you just need to make sure that any simp lemmas LHS are already split up into multiple coe arrows</p>",
        "id": 125984523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525251486
    },
    {
        "content": "<p>But I also want the single arrows for rw's, because if I don't use simp, most of my coercions are single coercions</p>",
        "id": 125984671,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525251738
    },
    {
        "content": "<p>why are you using composite coercions to begin with?</p>",
        "id": 125984685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525251795
    },
    {
        "content": "<p>I honestly wish the parser inserted multiple coe arrows, but the best I can do to recreate that is <code>coe_coe</code></p>",
        "id": 125984693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525251841
    },
    {
        "content": "<p>but you can always write <code>((a:B):C)</code> to get multiple coe arrows inserted</p>",
        "id": 125984738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525251873
    },
    {
        "content": "<p>He wants to go from <code>pnat</code> to <code>int</code></p>",
        "id": 125987058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525256276
    },
    {
        "content": "<p>I can see that. But why? What is the simp lemma under consideration? Like I said, you can use <code>((n:nat):int)</code> to double-coerce</p>",
        "id": 125987205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525256547
    },
    {
        "content": "<p>But that means having to type ((n : nat):int) all the time, instead of just n.</p>",
        "id": 125987207,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525256581
    },
    {
        "content": "<p>all the time meaning only on the LHS of rules marked <code>[simp]</code></p>",
        "id": 125987218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525256605
    },
    {
        "content": "<p>in proofs you can do whatever</p>",
        "id": 125987222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525256630
    },
    {
        "content": "<p>but it is important to state your lemmas correctly</p>",
        "id": 125987263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525256655
    },
    {
        "content": "<p>But for any lemma marked simp, I also want it's single coercion corollary if I want to rewrite something.</p>",
        "id": 125987270,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525256709
    },
    {
        "content": "<p>like what?</p>",
        "id": 125987271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525256723
    },
    {
        "content": "<p>just <code>rw coe_coe</code></p>",
        "id": 125987314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525256777
    },
    {
        "content": "<p>I could do that too.</p>",
        "id": 125987315,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525256807
    },
    {
        "content": "<p>I think you underestimate the number of \"single coercion corollaries\"</p>",
        "id": 125987320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525256834
    },
    {
        "content": "<p>(hint: it's infinite)</p>",
        "id": 125987321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525256843
    },
    {
        "content": "<p>infinity doesn't exist</p>",
        "id": 125987359,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525256885
    },
    {
        "content": "<p>and neither do those corollaries, in mathlib</p>",
        "id": 125987364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525256902
    }
]