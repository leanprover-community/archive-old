[
    {
        "content": "<p>Please could someone help me fill in these holes in the docstring for <code>dsimp_config</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">dsimp_config</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">md</span>                        <span class=\"o\">:=</span> <span class=\"kn\">reducible</span><span class=\"o\">)</span> <span class=\"c1\">-- reduction mode: how aggressively constants are replaced with their definitions.</span>\n<span class=\"o\">(</span><span class=\"n\">max_steps</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>           <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"bp\">.</span><span class=\"n\">default_max_steps</span><span class=\"o\">)</span> <span class=\"c1\">-- The maximum number of steps allowed before failing.</span>\n<span class=\"o\">(</span><span class=\"n\">canonize_instances</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"c1\">-- [TODO] ???</span>\n<span class=\"o\">(</span><span class=\"n\">single_pass</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>        <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"c1\">-- [TODO] Does this mean that _each_ simp-lemma can only be used once?</span>\n<span class=\"o\">(</span><span class=\"n\">fail_if_unchanged</span>         <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"c1\">-- Don&#39;t throw if simp didn&#39;t do anything.</span>\n<span class=\"o\">(</span><span class=\"n\">eta</span>                       <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"c1\">-- allow eta-equivalence: `(λ x, F $ x) ↝ F`</span>\n<span class=\"o\">(</span><span class=\"n\">zeta</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>               <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"c1\">-- do zeta-reductions: `let x : a := b in c ↝ c[x/b]`.</span>\n<span class=\"o\">(</span><span class=\"n\">beta</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>               <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"c1\">-- do beta-reductions: `(λ x, E) $ (y) ↝ E[x/y]`.</span>\n<span class=\"o\">(</span><span class=\"n\">proj</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>               <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"c1\">-- reduce projections: `⟨a,b⟩.1 ↝ a` [TODO] I think?</span>\n<span class=\"o\">(</span><span class=\"n\">iota</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>               <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"c1\">-- reduce recursors for inductive datatypes: eg `nat.rec_on (succ n) Z R ↝ R n $ nat.rec_on n Z R`</span>\n<span class=\"o\">(</span><span class=\"n\">unfold_reducible</span>          <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"c1\">-- if tt, definitions with `reducible` transparency will be unfolded (delta-reduced)</span>\n<span class=\"o\">(</span><span class=\"n\">memoize</span>                   <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"c1\">-- [TODO] what is being memoised?</span>\n</pre></div>",
        "id": 135537467,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539174411
    },
    {
        "content": "<p>(I'm working through <code>init/meta</code> in the Lean source and adding all the missing docstrings)</p>",
        "id": 135537599,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539174575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> Is a copy of your Lean with docstring available online anywhere? It would be really useful.</p>",
        "id": 147772589,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542315248
    },
    {
        "content": "<p><a href=\"https://github.com/EdAyers/lean\" target=\"_blank\" title=\"https://github.com/EdAyers/lean\">https://github.com/EdAyers/lean</a></p>",
        "id": 147809879,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1542365859
    },
    {
        "content": "<p>Checkout the <code>doc</code> branch</p>",
        "id": 147809934,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1542365890
    },
    {
        "content": "<p>I use the build from that branch as my main lean executable</p>",
        "id": 147809977,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1542365999
    },
    {
        "content": "<p>Do you mean you added stuff besides docstrings?</p>",
        "id": 147810027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542366037
    },
    {
        "content": "<p>No I haven't added anything except docstrings on that branch</p>",
        "id": 147810032,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1542366051
    },
    {
        "content": "<p>(hopefully, no guarantees)</p>",
        "id": 147810043,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1542366067
    },
    {
        "content": "<p>It builds mathlib though so its probably fine. I didn't sneak in <code>false</code> as an axiom anywhere.</p>",
        "id": 147810057,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1542366106
    },
    {
        "content": "<p>I also can't guarantee that the docstrings I added aren't misleading, they are more a side-effect of me trying to understand the sourcecode</p>",
        "id": 147810108,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1542366162
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span></p>",
        "id": 147810263,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542366425
    }
]