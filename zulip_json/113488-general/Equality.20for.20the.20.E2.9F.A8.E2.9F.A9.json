[
    {
        "content": "<p>I'm trying to figure this one out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I think it should be pretty simple.</p>",
        "id": 320143979,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673234446
    },
    {
        "content": "<p>You need to specify what type you mean for the equality. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 320144248,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673234660
    },
    {
        "content": "<p><code>⟨⟩</code> is \"anonymous constructor syntax\", and it can construct values of any product-like type.</p>",
        "id": 320144357,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673234746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113488-general/topic/Equality.20for.20the.20.E2.9F.A8.E2.9F.A9/near/320144248\">said</a>:</p>\n<blockquote>\n<p>Ok hmm... here:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">),</span><span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">),</span><span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Now I'm trying to figure out the name of the axiom</p>",
        "id": 320144618,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673234982
    },
    {
        "content": "<p>oh, is this Lean 4?</p>",
        "id": 320144869,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673235195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113488-general/topic/Equality.20for.20the.20.E2.9F.A8.E2.9F.A9/near/320144869\">said</a>:</p>\n<blockquote>\n<p>oh, is this Lean 4?</p>\n</blockquote>\n<p>yeah sorry about that</p>",
        "id": 320144877,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673235206
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">),</span><span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span>\n</code></pre></div>",
        "id": 320144878,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673235206
    },
    {
        "content": "<p>What does by do?</p>",
        "id": 320144894,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673235232
    },
    {
        "content": "<p>starts tactic mode. <code>congr</code> is a tactic</p>",
        "id": 320144954,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673235254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113488-general/topic/Equality.20for.20the.20.E2.9F.A8.E2.9F.A9/near/320144954\">said</a>:</p>\n<blockquote>\n<p>starts tactic mode. <code>congr</code> is a tactic</p>\n</blockquote>\n<p>Now suppose I've got some more complex constituent equalities (p:x = y here).</p>",
        "id": 320144992,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673235307
    },
    {
        "content": "<p>how would I assemble them? would congr automatically know about these demonstrated constituent equalities?</p>",
        "id": 320145012,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673235348
    },
    {
        "content": "<p>I expect <code>congr</code> to break it into simpler subgoals for you</p>",
        "id": 320145127,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673235471
    },
    {
        "content": "<p>Ok thanks. This is good.</p>\n<p>Nonetheless if someone knows a closed form for this involving constituent equalities that would be much appreciated.</p>",
        "id": 320146407,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673236821
    },
    {
        "content": "<p>Like ??? here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">),</span><span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">???</span> <span class=\"n\">p</span> <span class=\"n\">Eq.refl</span>\n</code></pre></div>",
        "id": 320147783,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673238228
    },
    {
        "content": "<p><code>congr</code> applies congruence theorems, which have the form e.g. <code>a = b -&gt; c = d -&gt; (a, c) = (b, d)</code>. They are generated on the fly, but you can prove them by using <code>Eq.rec</code></p>",
        "id": 320147785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673238234
    },
    {
        "content": "<p><code>congr_arg</code> is a theorem which covers most cases of this</p>",
        "id": 320147846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673238279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Equality.20for.20the.20.E2.9F.A8.E2.9F.A9/near/320147785\">said</a>:</p>\n<blockquote>\n<p><code>congr</code> applies congruence theorems, which have the form e.g. <code>a = b -&gt; c = d -&gt; (a, c) = (b, d)</code>. They are generated on the fly, but you can prove them by using <code>Eq.rec</code></p>\n<p>like this?</p>\n</blockquote>\n<p>variable {X : Type}<br>\nvariable {x : X}<br>\nvariable {y : X}<br>\nvariable {p : x = y}<br>\ndef q : (⟨x, Unit.unit⟩ : Σ'(_:X),Unit) = ⟨y,Unit.unit⟩ := Eq.rec p Eq.refl</p>",
        "id": 320147850,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673238293
    },
    {
        "content": "<p>probably <code>p ▸ Eq.refl _</code> works</p>",
        "id": 320147866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673238326
    },
    {
        "content": "<p><code>▸</code> is a wrapper for <code>Eq.rec</code> which is better able to infer the higher order function argument (the \"motive\") in <code>Eq.rec</code></p>",
        "id": 320147999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673238492
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">),</span><span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">▸</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span>\n<span class=\"k\">#print</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>if you mouse over the <code>▸</code> in the proof it shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Eq.rec</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"o\">})</span> <span class=\"n\">y</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>where <code>fun x_1 h =&gt; { fst := x, snd := () } = { fst := x_1, snd := () }</code> is the \"motive\"</p>",
        "id": 320148036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673238563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Equality.20for.20the.20.E2.9F.A8.E2.9F.A9/near/320148036\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">),</span><span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">▸</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span>\n<span class=\"k\">#print</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>if you mouse over the <code>▸</code> in the proof it shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Eq.rec</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"o\">})</span> <span class=\"n\">y</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>where <code>fun x_1 h =&gt; { fst := x, snd := () } = { fst := x_1, snd := () }</code> is the \"motive\"</p>\n</blockquote>\n<p>hmm wow. ok this is great.</p>",
        "id": 320151994,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1673242742
    }
]