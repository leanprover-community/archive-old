[
    {
        "content": "<p>Alright so I got through the natural number game (skipping powers because I didn't care to do that).  I started reading the docs but found them impenetrable, so I switched over to just proving more stuff aimlessly.  I'm trying to make my own rings, but I'm running into some issues.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ring</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_id</span> <span class=\"o\">:</span> <span class=\"n\">ring</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_id</span> <span class=\"o\">:</span> <span class=\"n\">ring</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ring</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ring</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ring</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">add_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>To start I used <code>inductive</code>  because, having looked some lean source on github, it <em>seems</em> to be the way to make GADTs, however I'm skeptical that this is what I want since if this actually allows induction then I've made the integers, which is not my intention.  The inductive declaration compiles at least so I moved on to writing some axioms.  Immediately my first axiom <code>add_assoc</code> does not work.  It doesn't know what <code>add</code> is, which seems odd to me since I just declared it as one of the constructors.  Obviously I have no idea what I'm doing, but if someone could point me in the right way that would be much appreciated.</p>",
        "id": 256098929,
        "sender_full_name": "É Olive",
        "timestamp": 1633368741
    },
    {
        "content": "<p>You need to say \"open ring\" to make the constructors available, instead of having to say ring.add</p>",
        "id": 256099295,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633368878
    },
    {
        "content": "<p>Which doc did you try to read? You won't go anywhere by trying to randomly guess how to use Lean, there are too many possible combinations.</p>",
        "id": 256099310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633368887
    },
    {
        "content": "<p>But inductive and axiom isn't really the most flexible way to define rings.</p>",
        "id": 256099356,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633368908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Creating.20a.20new.20type/near/256099310\">said</a>:</p>\n<blockquote>\n<p>Which doc did you try to read? You won't go anywhere by trying to randomly guess how to use Lean, there are too many possible combinations.</p>\n</blockquote>\n<p>I am reading from both \"Theorem Proving in Lean\" and \"The Lean Reference Manual\".</p>",
        "id": 256099554,
        "sender_full_name": "É Olive",
        "timestamp": 1633368979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448275\">@É Olive</span> I think you didn't even define the integers, to be honest. Because you can't prove <code>2 + 2 = 2 * 2</code> in this type.</p>",
        "id": 256099576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633368986
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring\">docs#ring</a> might give you a peek into how mathlib does rings.</p>",
        "id": 256099630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633369009
    },
    {
        "content": "<p>Also, <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a> lists a bunch of things that you could do after the natural number game.</p>",
        "id": 256099681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633369039
    },
    {
        "content": "<p>If I were to add the ring axioms I could certainly prove that <code>(1+1) + (1+1) = (1+1) * (1+1)</code>.  It might be more accurate to say that I would just have a subring of the integers, not necessarily the integers themselves.</p>",
        "id": 256100067,
        "sender_full_name": "É Olive",
        "timestamp": 1633369197
    },
    {
        "content": "<p>Normally instead of introducing axioms, you would use a quotient type that defines equality such that those properties hold</p>",
        "id": 256107663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633371883
    },
    {
        "content": "<p>If you did that you'd end up with a construction analogous <del>to <code>free_comm_ring empty</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_comm_ring\">docs#free_comm_ring</a>)</del> to<code>free_ring empty</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_ring\">docs#free_ring</a>) I think</p>",
        "id": 256107792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633371935
    },
    {
        "content": "<p>Well presumably that's commutative right?  But if I'm understanding other than commutativity that then that is what I'm shooting for.  What is the difference between quotient types and axioms?</p>",
        "id": 256108139,
        "sender_full_name": "É Olive",
        "timestamp": 1633372049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448275\">É Olive</span> <a href=\"#narrow/stream/113488-general/topic/Creating.20a.20new.20type/near/256099554\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Creating.20a.20new.20type/near/256099310\">said</a>:</p>\n<blockquote>\n<p>Which doc did you try to read? You won't go anywhere by trying to randomly guess how to use Lean, there are too many possible combinations.</p>\n</blockquote>\n<p>I am reading from both \"Theorem Proving in Lean\" and \"The Lean Reference Manual\".</p>\n</blockquote>\n<p>The Lean reference manual is not meant for learning (as is clear from its name). Theorem proving in Lean should be much better. If this is too computer sciency for you then you can try Mathematics in Lean (which is far from complete but should keep you busy for some time).</p>",
        "id": 256108241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633372083
    },
    {
        "content": "<p>Whoops, I didn't check to see if you mentioned commutativity, and assumed you had. Edited.</p>",
        "id": 256110446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633372904
    },
    {
        "content": "<p><code>axiom</code>s allow you to create contradictions globally if you screw up, quotients at worst let you create types that are accidently isomorphic to <code>unit</code>.</p>",
        "id": 256110571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633372953
    },
    {
        "content": "<p>IIRC, mathlib contains no uses of <code>axiom</code></p>",
        "id": 256110668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633372991
    },
    {
        "content": "<p>I appreciate the modularity of matlib when it comes to constructing algebra, but I am really struggling to figure out how it actually builds anything.  Is there anywhere I can see some algebra built from first principles?</p>",
        "id": 256113748,
        "sender_full_name": "É Olive",
        "timestamp": 1633374120
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/semigroup\">docs#semigroup</a> and/or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semigroup/src\">src#semigroup</a></p>",
        "id": 256113921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633374176
    },
    {
        "content": "<p>or this tutorial:<br>\n<a href=\"https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/wednesday/algebraic_hierarchy.lean\">https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/wednesday/algebraic_hierarchy.lean</a></p>",
        "id": 256114501,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1633374387
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring\">docs#ring</a> is not <em>building</em> a semigroup, it's listing the requirements for something built elsewhere to be considered a semigroup.</p>",
        "id": 256116331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633375142
    },
    {
        "content": "<p>Oh!  Alright, that makes a lot of sense.  Ok I think I was stuck in the wrong sort of open world mindset here.  Not that that was the only problem, but I get how mathlib is working a lot better now.</p>",
        "id": 256117103,
        "sender_full_name": "É Olive",
        "timestamp": 1633375466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> has marked this topic as unresolved.</p>",
        "id": 256133021,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633381783
    }
]