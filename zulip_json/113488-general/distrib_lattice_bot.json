[
    {
        "content": "<p>I saw the todo about <a href=\"https://leanprover-community.github.io/mathlib_docs/order/bounded_lattice.html#disjoint_sup_left\"><code>disjoint_sup_left</code></a> and similar. What do you think of me defining <code>distrib_lattice_bot</code> for these lemmas to be general enough? I just hit a point where I wanted to use them in a <code>generalized_boolean_algebra</code>.</p>",
        "id": 247440586,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627466170
    },
    {
        "content": "<p>So I'm doing that on the branch <code>distrib_lattice_bot</code>and I've encountered this TODO in <code>order.boolean_algebra</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> TODO: if we had a typeclass for distributive lattices with `⊥`, we could make an alternative</span>\n<span class=\"cm\">constructor for `generalized_boolean_algebra` using `disjoint x (y \\ x)` and `x ⊔ (y \\ x) = y` as</span>\n<span class=\"cm\">axioms. -/</span>\n</code></pre></div>",
        "id": 247901823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627894747
    },
    {
        "content": "<p><code>inf_inf_sdiff</code> was easy, but I'm stuck on <code>sup_inf_sdiff : ∀ (a b : α), a ⊓ b ⊔ a \\ b = a</code>.</p>",
        "id": 247901901,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627894816
    },
    {
        "content": "<p>/me is writing a MWE</p>",
        "id": 247901936,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627894834
    },
    {
        "content": "<p>if anyone has a paper proof already...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.boolean_algebra</span>\n\n<span class=\"sd\">/-- A `distrib_lattice_bot` is a distributive with a least element. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">distrib_lattice_bot</span> <span class=\"n\">α</span> <span class=\"kd\">extends</span> <span class=\"n\">distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">semilattice_inf_bot</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">generalized_boolean_algebra_of_disjoint_sdiff_self_right_of_sup_sdiff_cancel_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">dlb</span> <span class=\"o\">:</span> <span class=\"n\">distrib_lattice_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sd</span> <span class=\"o\">:</span> <span class=\"n\">has_sdiff</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hdisjoint_sdiff_self_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">disjoint</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">\\</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hsup_sdiff_cancel_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">disjoint</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">generalized_boolean_algebra</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sup_inf_sdiff</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_inf_sdiff</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">disjoint.eq_bot</span> <span class=\"o\">((</span><span class=\"n\">hdisjoint_sdiff_self_right</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_left</span> <span class=\"n\">inf_le_right</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"n\">dlb</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">sd</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 247902161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627895055
    },
    {
        "content": "<p>that mwe errors with \"invalid 'structure' header, field 'le' from 'semilattice_inf_bot' has already been declared\"</p>",
        "id": 247902767,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627895740
    },
    {
        "content": "<p>Guess: <code>set_option old_structure_cmd true</code> might fix it? This is precisely the sort of thing it fixes.</p>",
        "id": 247902872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627895868
    },
    {
        "content": "<p>(Note that old structures are not in Lean 4 -- Leo is forcing us to build them manually because the way we've been using them in Lean 3 apparently creates massive objects behind the scenes. This will involve a re-think of the hierarchy but I am still hazy on the details and would rather not derail this thread.)</p>",
        "id": 247902945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627895963
    },
    {
        "content": "<p>ahh yes, thanks :)</p>",
        "id": 247902959,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627895969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/distrib_lattice_bot/near/247902945\">said</a>:</p>\n<blockquote>\n<p>This will involve a re-think of the hierarchy</p>\n</blockquote>\n<p>Uh...</p>",
        "id": 247904060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627897082
    },
    {
        "content": "<p>the note says <code>x ⊔ (y \\ x) = y</code> unconditionally, but you wrote <code>(x ⊔ y) \\ x = y</code> for disjoint <code>x y</code>; going to try the note's version</p>",
        "id": 247906598,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627899555
    },
    {
        "content": "<p>hmm, but to be fair the notes' version doesn't work in my mental model</p>",
        "id": 247906619,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627899589
    },
    {
        "content": "<p>(the unconditionalness anyways)</p>",
        "id": 247906630,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627899600
    },
    {
        "content": "<p>I think that maybe you need to assume <code>x \\ y ≤ x</code>. Also, <code>(x ⊔ y) \\ x = y</code> gives you the result for all elements that can be written as the sup of <code>a ⊓ a</code> and <code>a \\ b</code> for some <code>a</code>, <code>b</code>. But the only way I can think of to find these is precisely using <code>\\</code>...</p>",
        "id": 247911349,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627904388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/distrib_lattice_bot/near/247906598\">said</a>:</p>\n<blockquote>\n<p>the note says <code>x ⊔ (y \\ x) = y</code> unconditionally, but you wrote <code>(x ⊔ y) \\ x = y</code> for disjoint <code>x y</code>; going to try the note's version</p>\n</blockquote>\n<p>Wait but unconditionnally that's wrong. We don't have <code>(x ⊔ x) \\ x = x</code></p>",
        "id": 247911435,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627904472
    },
    {
        "content": "<p>yes, so your version is wrong :b</p>",
        "id": 247911561,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627904589
    },
    {
        "content": "<p><code>x ⊔ (x \\ x) = x</code> is right to me</p>",
        "id": 247911585,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627904607
    },
    {
        "content": "<p>Oh what I can't even bracket a statement properly.</p>",
        "id": 247911813,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627904793
    },
    {
        "content": "<p>Ah yeah I had my mental priority for inf too high.</p>",
        "id": 247911950,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627904930
    },
    {
        "content": "<p>And I thought it had to do with the following (spacially) lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">disjoint.sdiff_eq_of_sup_eq</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">\\</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">inf_eq_right.2</span> <span class=\"bp\">$</span> <span class=\"n\">le_sup_left.trans</span> <span class=\"n\">hs.le</span><span class=\"o\">,</span>\n<span class=\"n\">sdiff_unique</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hi.eq_bot</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 247912072,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627905042
    },
    {
        "content": "<p>But <code>x ⊔ (y \\ x) = y</code> is still not true...</p>",
        "id": 247912132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627905105
    },
    {
        "content": "<p>when is that not true? i live in a model of lattices where all lattices are like sets</p>",
        "id": 247912213,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627905200
    },
    {
        "content": "<p>wait nvm</p>",
        "id": 247912230,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627905229
    },
    {
        "content": "<p>yes of course</p>",
        "id": 247912235,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627905232
    },
    {
        "content": "<p>who wrote that note?</p>",
        "id": 247912254,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627905245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 247912268,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627905255
    },
    {
        "content": "<p>Not long ago, actually!</p>",
        "id": 247912276,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627905261
    },
    {
        "content": "<p>I swear he was online more recently than two weeks ago...</p>",
        "id": 247912365,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627905360
    },
    {
        "content": "<p>Yeah, he answered something today at 5 in the morning.</p>",
        "id": 247912435,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627905461
    },
    {
        "content": "<p>Hmm, I don't remember what I was thinking... let me see if I can dig up some notes later.</p>",
        "id": 247930468,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1627916774
    },
    {
        "content": "<p>I can't find my notes, so I think you can just delete that TODO for now. If I ever figure out what I meant I'll come back to this. Thanks for <a href=\"https://github.com/leanprover-community/mathlib/issues/8507\">#8507</a> by the way!</p>",
        "id": 247951684,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1627928317
    }
]