[
    {
        "content": "<p>Working on FLT-regular, I found another diamond that I am not sure how to correct. Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.fixed</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.primitive_element</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_separable</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">field.alg_hom.fintype</span> <span class=\"n\">K</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">alg_hom.fintype</span> <span class=\"n\">K</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">field.alg_hom.fintype</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.fintype</span> <span class=\"n\">K</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>Note that both <code>field.alg_hom.fintype</code> and <code>alg_hom.fintype</code> are instances, so this can causes problems (and indeed it did for me, I had to manually disable one instance).</p>\n<p>What should we do?</p>",
        "id": 261766146,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637144785
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/field.alg_hom.fintype\">docs#field.alg_hom.fintype</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_hom.fintype\">docs#alg_hom.fintype</a> for the lazy (like me)</p>",
        "id": 261766532,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637145046
    },
    {
        "content": "<p>Does one instance imply the other?</p>",
        "id": 261767086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637145401
    },
    {
        "content": "<p>Hmm, both seem reasonable enough, one is not a specialization of the other, and I don't really have the idea that one would be more useful than the other. So my suggestion would be to just add a note to the docstring saying \"use <code>local attribute [-instance]</code> if you get conflicts with the other\"</p>",
        "id": 261767125,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637145435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Another.20diamond/near/261767086\">said</a>:</p>\n<blockquote>\n<p>Does one instance imply the other?</p>\n</blockquote>\n<p>No, one uses assumptions on the extension <code>F/E</code> and the other assumptions on <code>K/E</code>.</p>",
        "id": 261767160,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637145467
    },
    {
        "content": "<p>Where does the diamond actually cause you trouble <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>?</p>",
        "id": 261767171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637145476
    },
    {
        "content": "<p>One way to solve this type of thing is to change lemmas to take dumber <code>[fintype _]</code> arguments</p>",
        "id": 261767230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637145504
    },
    {
        "content": "<p>Evil answer: make <code>fintype</code> a <code>Prop</code> so there can be no defeq diamonds</p>",
        "id": 261767239,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637145512
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/flt-regular/blob/9edcdd4682c0ab2df4eec72e7097039beec41dd0/src/ready_for_mathlib/discriminant/cyclotomic.lean#L48\">This</a> line doesn't work without</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">alg_hom.fintype</span>\n</code></pre></div>",
        "id": 261767292,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637145561
    },
    {
        "content": "<p>The problem is <code>rw [this]</code>, so maybe stating <code>this</code> differently it's enough.</p>",
        "id": 261767442,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637145663
    },
    {
        "content": "<p>Let me check the code...</p>",
        "id": 261767858,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637145949
    },
    {
        "content": "<p>Another solution is to add <code>letI : fintype (K →ₐ[ℚ] E) := ...</code> before you create <code>this</code>, and replace <code>...</code> with the instance you actually want</p>",
        "id": 261768434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637146315
    },
    {
        "content": "<p>Lean will use that one before doing a full search</p>",
        "id": 261768443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637146321
    },
    {
        "content": "<p>Wait hang on, why does Lean think <code>finite_dimensional ℚ (algebraic_closure ℚ)</code> is true anyway?</p>",
        "id": 261769884,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637147184
    },
    {
        "content": "<p>Pretty sure <code>algebraic_closure ℚ</code> is not generated by a single element, right?</p>",
        "id": 261769967,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637147242
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">is_cyclotomic_extension.finite_dimensional</span>\n<span class=\"c1\">-- is_cyclotomic_extension.finite_dimensional : ∀ (K L : Type*) [field K] [field L] [algebra K L], finite_dimensional K L</span>\n</code></pre></div>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 261770023,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637147279
    },
    {
        "content": "<p><code>pp.implicit</code>?</p>",
        "id": 261770544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637147622
    },
    {
        "content": "<p>Indeed, <code>pp.implicit</code> shows the term with <code>alg_hom.fintype</code> uses <code>is_cyclotomic_extension.finite_dimensional</code>, a lemma which is in fact, not true.</p>",
        "id": 261770704,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637147741
    },
    {
        "content": "<p>Oh, I assumed that <code>is_cyclotomic_extension.finite_dimensional</code> was true but was stated about some weird algebra/ring instance. Clearly there's a danger to sorrying lemmas!</p>",
        "id": 261770786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637147789
    },
    {
        "content": "<p>Fixing that instance to be actually true should fix this specific issue, but the generic one remains.</p>",
        "id": 261770855,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637147876
    },
    {
        "content": "<p>Another approach in this specific case is to replace the <code>have</code> line with <code>calc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">norm_zeta'_sub_one</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">norm</span> <span class=\"n\">ℚ</span> <span class=\"o\">((</span><span class=\"n\">zeta'</span> <span class=\"n\">p</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">char_zero_of_injective_algebra_map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpE</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">p.pos.ne</span> <span class=\"o\">(</span><span class=\"n\">cast_eq_zero.1</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_alg_closed.exists_root</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">degree_cyclotomic_pos</span> <span class=\"n\">p</span> <span class=\"n\">E</span> <span class=\"n\">p.pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span><span class=\"o\">,</span>\n\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">norm_eq_prod_embeddings</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_neg</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_sub</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_one</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_neg_one_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hodd.symm</span> <span class=\"o\">(</span><span class=\"n\">pnat.coe_inj.1</span> <span class=\"n\">hn.symm</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_mul_distrib</span><span class=\"o\">,</span> <span class=\"n\">prod_const</span><span class=\"o\">,</span> <span class=\"n\">card_univ</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.card</span><span class=\"o\">,</span> <span class=\"n\">finrank</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">totient_prime</span> <span class=\"n\">hp.out</span><span class=\"o\">,</span> <span class=\"n\">neg_one_pow_of_even</span> <span class=\"o\">(</span><span class=\"n\">even_of_prime_neq_two_sub_one</span> <span class=\"n\">hp.out</span> <span class=\"n\">hodd</span><span class=\"o\">),</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic'</span> <span class=\"n\">p</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cyclotomic'</span><span class=\"o\">,</span> <span class=\"n\">eval_prod</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">finset.prod_attach</span> <span class=\"n\">E</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">univ_eq_attach</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- The following line would still fail if we write `_` instead of the `(id _)` (or with no `@` at all).</span>\n    <span class=\"c1\">-- `(id _)` is a trick to disable instance search.</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">fintype.prod_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">zeta'.embeddings_equiv_primitive_roots</span> <span class=\"n\">p</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">zeta'.embeddings_equiv_primitive_roots_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cyclotomic'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">cyclotomic_eq_prod_X_sub_primitive_roots</span>\n    <span class=\"o\">((</span><span class=\"n\">is_root_cyclotomic_iff</span> <span class=\"n\">hpE</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hz</span><span class=\"o\">),</span> <span class=\"n\">eval_one_cyclotomic_prime</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261771635,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637148424
    },
    {
        "content": "<p>Ops, I thought <code>is_cyclotomic_extension.finite_dimensional</code> automatically included <code>[fintype S]</code>, thank's!</p>",
        "id": 261771952,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637148638
    },
    {
        "content": "<p>But I don't understand why Lean thinks  that<code>ℚ (algebraic_closure ℚ)</code> is a cyclotomic extension.</p>",
        "id": 261772045,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637148689
    },
    {
        "content": "<p>Look carefully, <code>is_cyclotomic_extension.finite_dimensional</code> doesn't include any <code>is_cyclotomic_extension</code> assumptions!</p>",
        "id": 261772321,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637148871
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 261772401,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637148944
    },
    {
        "content": "<p>So in <code>cyclotomic/basic.lean</code> you probably want to replace the start of <code>section fintype</code> with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"n\">S</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n</code></pre></div>",
        "id": 261772497,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637148992
    },
    {
        "content": "<p>I really like the idea of making <code>fintype</code> a Prop BTW, or, more precisely, making a Proppy <code>fintype</code> like we have <code>set.finite</code> (a Proppy <code>finset</code>).</p>",
        "id": 261779417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637153476
    },
    {
        "content": "<p>I think this is a very good idea!</p>",
        "id": 261782144,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637155049
    },
    {
        "content": "<p>I suspect if we had such a <code>finite</code> typeclass, then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite/src\">src#set.finite</a> could probably be defined in terms of it</p>",
        "id": 261782349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637155195
    },
    {
        "content": "<p>That is, replace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">set.finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">set.finite</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set.finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">finite</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 261782457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637155248
    },
    {
        "content": "<p>One thing to note: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#fin_cases\">tactic#fin_cases</a> works if it can find a <code>fintype</code> instance, but would not be able to do anything with <code>finite</code>.</p>",
        "id": 261850681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637183905
    },
    {
        "content": "<p>How does that work? It seems like the <code>fintype</code> instance is at the wrong \"level\"</p>",
        "id": 261851365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637184208
    }
]