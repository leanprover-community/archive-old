[
    {
        "content": "<p>I'm having a problem where Lean can figure out that an object is of type <code>{A // A.det = 1}</code>, but not recognize it as an object of type <code>special_linear_group</code>, even though that is precisely the definition (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/special_linear_group\">docs#special_linear_group</a>).</p>\n<p>Apologies for the long example.  The problem seems to turn up only after I've defined a coercion </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(you'll see that a similar example phrased without this coercion typechecks).  So maybe this is a bad coercion (... ambiguity between this coercion and the subtype coercion?).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.special_linear_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A ring homomorphism from `S` to `R` induces a group homomorphism from</span>\n<span class=\"sd\">`special_linear_group n S` to `special_linear_group n R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ring_hom.map_special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f.map_matrix</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">matrix.ring_hom.map_det</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g.2</span><span class=\"o\">]⟩,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> This typechecks! -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_special_linear_group</span> <span class=\"o\">⟨</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- The coercion homomorphism from `ℤ` to `R` induces a group homomorphism from</span>\n<span class=\"sd\">`special_linear_group n ℤ` to `special_linear_group n R`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_special_linear_group</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> This doesn't typecheck!</span>\n<span class=\"cm\">invalid type ascription, term has type</span>\n<span class=\"cm\">  {A // A.det = 1} : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  special_linear_group (fin a.succ) R : Type u_2</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">((⟨</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 225507825,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1612766267
    },
    {
        "content": "<p>I think the <code>: Type</code> versus <code>: Type u_2</code> is causing the error. Let me see...</p>",
        "id": 225521459,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612777813
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 225521579,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612777919
    },
    {
        "content": "<p>Another issue is the <code>has_coe</code>, which should be <code>has_coe_t</code> to avoid looping:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The coercion homomorphism from `ℤ` to `R` induces a group homomorphism from</span>\n<span class=\"sd\">`special_linear_group n ℤ` to `special_linear_group n R`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_special_linear_group</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 225521977,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612778176
    },
    {
        "content": "<p>Aha! Looks like <code>special_linear_group _ ℤ</code> is unfolded before the coercion is inserted, and then the system can't find a coercion <code>{A // A.det = (1 : ℤ)} → special_linear_group (fin a.succ) R</code>. If we use <code>show</code> instead of type ascription, the type doesn't get unfolded and it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.special_linear_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A ring homomorphism from `S` to `R` induces a group homomorphism from</span>\n<span class=\"sd\">`special_linear_group n S` to `special_linear_group n R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ring_hom.map_special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f.map_matrix</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">matrix.ring_hom.map_det</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g.2</span><span class=\"o\">]⟩,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> This typechecks! -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_special_linear_group</span> <span class=\"o\">⟨</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- The coercion homomorphism from `ℤ` to `R` induces a group homomorphism from</span>\n<span class=\"sd\">`special_linear_group n ℤ` to `special_linear_group n R`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_special_linear_group</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"k\">show</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 225522120,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612778300
    },
    {
        "content": "<p>I used to think that if <code>X : A</code> then <code>(X : B)</code> meant \"please coerce X to type B and then continue\", but it actually means \"oh, while we're here, please check that it makes sense to consider X as having type B\". If A and B are not defeq but there's a coercion from A to B then this coercion will happen, but if A and B are defeq then my impression is that it could well happen that Lean just checks that <code>(X : B)</code> makes sense but then keeps considering <code>X</code> as having type <code>A</code>.</p>",
        "id": 225524563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612779799
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- ↑a : ℤ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">newnat</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">newnat</span><span class=\"o\">)</span> <span class=\"c1\">-- a : ℕ</span>\n</code></pre></div>",
        "id": 225524690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612779883
    },
    {
        "content": "<p>Thanks Heather and Anne! I had never understood why \"sometimes (X : B) works and sometimes it doesn't\" -- maybe the issue is simply whether there is a non-trivial coercion or whether it's a defeq thing. I had seen it failing in the past. To be quite frank I wish it always meant \"OK now X has type B\", I think this <code>show B, from X</code> idiom is a workaround but it does look weird. Whyever would I want <code>(X : B)</code> to mean anything other than \"yes I mean X has type B\"?</p>",
        "id": 225524749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612779942
    },
    {
        "content": "<p>I've never understood <code>has_coe_t</code> either, but that's another story :-)</p>",
        "id": 225524998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780114
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(⟨</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- ⟨vec_cons v M, hM⟩ : {A // A.det = 1}</span>\n</code></pre></div>",
        "id": 225525400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780369
    },
    {
        "content": "<p><code>(X : B)</code> is just a hint for the elaborator. The <code>: B</code> doesn't show up in the resulting term at all. The type of this term will be whatever Lean infers as the type of the elaborated <code>X</code>. On the other hand, the <code>show ...</code> annotation does appear in the elaborated term.</p>",
        "id": 225525763,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1612780580
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constructor_with_right_type</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">constructor_with_right_type</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">hM</span> <span class=\"c1\">-- special_linear_group (fin a.succ) ℤ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">constructor_with_right_type</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 225525800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780604
    },
    {
        "content": "<p>But if B is not defeq to what the actual type of X is, then a coercion is inserted, so the notation really does change the term in that case.</p>",
        "id": 225525849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780647
    },
    {
        "content": "<p>All these little tricks which one picks up over the years -- and with Lean 4 some will be wrong, some will still work, and we'll need to pick up a bunch of new ones.</p>",
        "id": 225525996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780746
    },
    {
        "content": "<p>Presumably in Lean 4 I'll be able to write a macro to get (X : B) to mean (show B, from X), which is the thing which I think I've always wanted it to mean (and which Heather wanted it to mean above).</p>",
        "id": 225526120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780815
    },
    {
        "content": "<p>Another trick that works is to insert an <code>id</code>, as in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(((</span><span class=\"n\">id</span> <span class=\"o\">⟨</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 225526141,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612780829
    },
    {
        "content": "<p>again looks ugly :-/</p>",
        "id": 225526163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780851
    },
    {
        "content": "<p>but also good to know!</p>",
        "id": 225526168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Failure.20to.20identify.20two.20types/near/225525849\">said</a>:</p>\n<blockquote>\n<p>But if B is not defeq to what the actual type of X is, then a coercion is inserted, so the notation really does change the term in that case.</p>\n</blockquote>\n<p>Well, kind of. <code>(X : B)</code> is a preterm (unelaborated term). Elaboration \"changes\" the preterm into a term, regardless of whether there's a coercion or not. Elaborated <code>X</code> is never the same as unelaborated <code>X</code>.</p>",
        "id": 225526196,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1612780874
    },
    {
        "content": "<p>Don't ask me why it works, by the way. You don't understand Lean3, you just get used to it :-)</p>",
        "id": 225526212,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612780885
    },
    {
        "content": "<p>I guess the id trick works because id is id {alpha} and the elaboration hint tells Lean what alpha to use.</p>",
        "id": 225526250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780911
    },
    {
        "content": "<p>Yes, it builds stuff from the outside, so it chooses the type of <code>id</code> before it chooses the type of <code>⟨vec_cons v M, hM⟩</code>.</p>",
        "id": 225526337,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612780962
    },
    {
        "content": "<p>I think the <code>show B, from X</code> macro expands to something like <code>@id B X</code>, right?</p>",
        "id": 225526373,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1612780992
    },
    {
        "content": "<p>I love it when someone asks just the right question :-)</p>",
        "id": 225526376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612780996
    },
    {
        "content": "<p>Thank you <em>very</em> much, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> and all!  You never understand something until it's bit you ... I'd seen people use these <code>show ... from ...</code> and <code>id ... : ...</code> idioms before but without quite internalizing the use case.  The whole discussion was very instructive, for example this:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Failure.20to.20identify.20two.20types/near/225524563\">said</a>:</p>\n<blockquote>\n<p>I used to think that if <code>X : A</code> then <code>(X : B)</code> meant \"please coerce X to type B and then continue\", but it actually means \"oh, while we're here, please check that it makes sense to consider X as having type B\". If A and B are not defeq but there's a coercion from A to B then this coercion will happen, but if A and B are defeq then my impression is that it could well happen that Lean just checks that <code>(X : B)</code> makes sense but then keeps considering <code>X</code> as having type <code>A</code>.</p>\n</blockquote>",
        "id": 225590523,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1612810474
    }
]