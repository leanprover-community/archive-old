[
    {
        "content": "<p>I notice that in our schemes work, Kenny and I independently defined the concept of an open immersion between topological spaces.</p>",
        "id": 125377318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211331
    },
    {
        "content": "<p>I wrote</p>",
        "id": 125377327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211335
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">open_immersion</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Tα</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Tβ</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fcont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">finj</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">fopens</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">↔</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 125377411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211351
    },
    {
        "content": "<p>Kenny wrote</p>",
        "id": 125377452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211364
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">open_immersion</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">tX</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tY</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">continuous</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">tX</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">tY</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">φ</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125377475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211369
    },
    {
        "content": "<p>I don't think it would be too taxing to check that these two props were equivalent.</p>",
        "id": 125377929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211446
    },
    {
        "content": "<p>But I think there's an argument for putting this basic notion into mathlib</p>",
        "id": 125378082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211467
    },
    {
        "content": "<p>and before I wrote the PR</p>",
        "id": 125378100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211472
    },
    {
        "content": "<p>I realised I was going to have to understand better</p>",
        "id": 125378262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211495
    },
    {
        "content": "<p>about the relative advantages / disadvantages between chaining \"and\" vs making a structure</p>",
        "id": 125378523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211531
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-stacks-project/commit/a3e4acc5b443f02c1decf3db32260ff28e4dd855#diff-ad019596efa140984bbb88e365b57df7\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/commit/a3e4acc5b443f02c1decf3db32260ff28e4dd855#diff-ad019596efa140984bbb88e365b57df7\">https://github.com/kbuzzard/lean-stacks-project/commit/a3e4acc5b443f02c1decf3db32260ff28e4dd855#diff-ad019596efa140984bbb88e365b57df7</a></p>",
        "id": 125379302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524211656
    },
    {
        "content": "<p>They're both props, the structure version has the feature that it demands that you spell out which term is doing which of the three jobs that need doing, which may or may not be a good thing, and the \"and\" approach lets you write more compact code, constructing instances with pointy brackets, which may or may not be a good thing</p>",
        "id": 125379303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211659
    },
    {
        "content": "<p>you wrote both definitions</p>",
        "id": 125379310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524211662
    },
    {
        "content": "<p>You can use pointy brackets with either definition</p>",
        "id": 125379590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524211702
    },
    {
        "content": "<p>You're right Kenny, thanks.</p>",
        "id": 125379698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211720
    },
    {
        "content": "<p>All structure instances, in fact, can be written with pointy brackets instead of structure notation</p>",
        "id": 125379812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524211742
    },
    {
        "content": "<p>it's just that this is harder to read when there are many properties since order matters</p>",
        "id": 125380086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524211776
    },
    {
        "content": "<p>Were you to be getting a mathlib PR with a definition of an open immersion</p>",
        "id": 125380341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211807
    },
    {
        "content": "<p>which would you prefer?</p>",
        "id": 125380367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211812
    },
    {
        "content": "<p>the structure, I think</p>",
        "id": 125380414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524211819
    },
    {
        "content": "<p>OK thanks</p>",
        "id": 125380548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211834
    },
    {
        "content": "<p>Sorry Kenny, I could see that you had done the hard work in that tag (supplying the proof of the result below) so just assumed you'd written the definition.</p>",
        "id": 125381058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524211914
    },
    {
        "content": "<blockquote>\n<p>you wrote both definitions</p>\n</blockquote>\n<p>Ooohh, I never realized Kenny is only one schizophrenic identity of Kevin. That explains soo much...</p>",
        "id": 125382019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524212032
    },
    {
        "content": "<p>Our secret is out Kenny! Or should I say, Mr Hyde...</p>",
        "id": 125382178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524212054
    },
    {
        "content": "<p>In fact the far more mundane truth is that I write code, forget, and then write code again.</p>",
        "id": 125382277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524212081
    },
    {
        "content": "<p>right, I'm the constructivist version of Kevin</p>",
        "id": 125382278,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524212081
    },
    {
        "content": "<p>ha ha</p>",
        "id": 125382304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524212086
    },
    {
        "content": "<p>Yeah, the story of a first year working in scheme theory was sort of believable, but the constructivism stuff I should have realize this was completely impossible</p>",
        "id": 125383630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524212312
    },
    {
        "content": "<blockquote>\n<p>You can use pointy brackets with either definition</p>\n</blockquote>\n<p>OTOH, curly braces work much more nicely with the structure.  That is, you can write <code>{fcont := _, finj := _, fopens := _}</code>.  While with <code>∧</code>, you'd need <code>{left := _, right := {left := _, right := _}}</code>.</p>",
        "id": 125384461,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524212474
    },
    {
        "content": "<p>so <code>\\and</code> is redundant in Lean ;-)</p>",
        "id": 125391137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524213557
    }
]