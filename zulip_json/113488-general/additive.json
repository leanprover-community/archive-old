[
    {
        "content": "<p>From <code>group_theory.free_abelian_group</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">free_abelian_group</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">additive</span> <span class=\"err\">$</span> <span class=\"n\">abelianization</span> <span class=\"err\">$</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>The <code>additive</code> type alias means \"treat this multiplicative group as an additive group\". We also have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Reinterpret `x : α` as an element of `additive α`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">additive</span><span class=\"bp\">.</span><span class=\"n\">of_mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">additive</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>Now in the free abelian group file, we have these:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">abelianization</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"err\">$</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>This says \"I will construct an element of the additive group by giving you an element of the multiplicative group and letting the unifier do the work\" (<code>abelianization.of</code> spits out a term of type <code>abelianization X</code>). </p>\n<p>Here is a proposed alternative definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">additive</span><span class=\"bp\">.</span><span class=\"n\">of_mul</span> <span class=\"err\">$</span> <span class=\"n\">abelianization</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"err\">$</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>For me this is a better definition because it keeps up the pretence. But some people who understand Lean's internals far better than I do have gone with the original definition. Is my definition better in any way at all? I'd like to think that it could help e.g. the simplifier.</p>",
        "id": 204557037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595343107
    },
    {
        "content": "<p>My gut feeling, in which I don't have so much confidence, is that your change is an improvement, and it's basically always better to not make defeq work hard.</p>",
        "id": 204610242,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595370501
    },
    {
        "content": "<p>I ended up having a long conversation with Chris about this during which he convinced me that the entire file should be thrown away and replaced with a finsupp version :-/ I ended up doing nothing ::-/ Sorry I've been so unproductive so far</p>",
        "id": 204630161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595393363
    },
    {
        "content": "<p>No worries.</p>",
        "id": 204631625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595395822
    },
    {
        "content": "<p>Chris' suggestion sounds pretty good.</p>",
        "id": 204631627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595395828
    },
    {
        "content": "<p>I figured it might be for another PR though</p>",
        "id": 204631643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595395875
    }
]