[
    {
        "content": "<p>What's the recommendation for use of <code>@[continuity]</code> in light of <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement\">the \"continuity lemma statement\" library note</a>? Which of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.continuous_sqrt\">docs#real.continuous_sqrt</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.sqrt\">docs#continuous.sqrt</a> should be tagged with <code>@[continuity]</code>?</p>",
        "id": 306759110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666995538
    },
    {
        "content": "<p>Some other examples:</p>\n<table>\n<thead>\n<tr>\n<th>traditional</th>\n<th>library note</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.continuous_exp\">docs#real.continuous_exp</a> (attribute)</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.exp\">docs#continuous.exp</a> (no attribute)</td>\n</tr>\n<tr>\n<td><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.continuous_cos\">docs#real.continuous_cos</a>  (attribute)</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.cos\">docs#continuous.cos</a> (doesn't exist)</td>\n</tr>\n<tr>\n<td><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_continuous_neg.continuous_neg\">docs#has_continuous_neg.continuous_neg</a> (no attribute)</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.neg\">docs#continuous.neg</a> (attribute)</td>\n</tr>\n</tbody>\n</table>",
        "id": 306759279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666995612
    },
    {
        "content": "<p>Judging by the implementation of <code>continuity</code> it seems like it is able to handle the \"traditional\" version that is hard to use with <code>apply</code></p>",
        "id": 306759701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666995845
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"kn\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"bp\">`</span><span class=\"n\">continuity</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x.partition</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">continuous</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_prefix_of</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">x1.length</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">x2.length</span>\n</code></pre></div>\n<p>suggests we have equal numbers in each category</p>",
        "id": 306760302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666996130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, I seem to remember you wrote the library note; do you have any opinions here?</p>",
        "id": 307117815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667225408
    },
    {
        "content": "<p>The library note is meant to describe the correct design for human use. I don't know the inner details of the <code>continuity</code> tactic to know what is most convenient for it. If both of them work, I expect it doesn't matter that much for unary functions. For binary or n-ary functions I expect that we want the <code>@[continuity]</code> attribute on the lemmas that follow the library note, since this is the case where the elaborator will get confused if you don't follow the library note.</p>",
        "id": 307218977,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1667257528
    }
]