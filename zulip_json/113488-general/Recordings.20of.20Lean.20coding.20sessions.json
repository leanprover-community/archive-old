[
    {
        "content": "<p>Are there more videos of people coding in Lean besides <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>'s <a href=\"https://www.youtube.com/watch?v=MBukeiG2R0s&amp;t=645s\">series</a>?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"MBukeiG2R0s\" href=\"https://www.youtube.com/watch?v=MBukeiG2R0s&amp;t=645s\"><img src=\"https://uploads.zulipusercontent.net/e6e985e50d205cea505bbd715449ebad5b5fefdc/68747470733a2f2f692e7974696d672e636f6d2f76692f4d42756b656947325230732f64656661756c742e6a7067\"></a></div><p>Videos let you see how people approach problems, what tactics they try first, which idioms they use, and generally make you feel better about going slow or getting stuck. I watched quite a few of the Xena Project ones, and found them immensely beneficial. However, it would be good to get a more diverse perspective. Any recommendations?</p>",
        "id": 270658762,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1643940839
    },
    {
        "content": "<p>I think there might be some twitch streamers out there, although I forget who...</p>",
        "id": 270659752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643941651
    },
    {
        "content": "<p>LFTCM (lean for the curious mathematician) is a youtube series arising from an all-online conference with a lot of live coding</p>",
        "id": 270659830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643941714
    },
    {
        "content": "<p><a href=\"https://youtube.com/playlist?list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N\">https://youtube.com/playlist?list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N</a></p>",
        "id": 270659867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643941756
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I watched the infinitude of primes demo but haven't seen the rest. They were above my level at the time, but I expect they will be perfect now.</p>",
        "id": 270660254,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1643942125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Recordings.20of.20Lean.20coding.20sessions/near/270659752\">said</a>:</p>\n<blockquote>\n<p>I think there might be some twitch streamers out there, although I forget who...</p>\n</blockquote>\n<p>geohot <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span><br>\n(that was only a single stream, afaik)</p>",
        "id": 270680342,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643962121
    },
    {
        "content": "<p>So I've put about 25 short videos up in the last month of me just solving basic questions in algebra and analysis, and people watch them. I'd encourage other people to try, there is still not that much information out there about lean and this is a way to see examples</p>",
        "id": 270684694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643964740
    },
    {
        "content": "<p>I'll be switching to lean 4 and redoing them the moment we have a maths library. I use linarith and convert and obtain etc all over the place</p>",
        "id": 270684778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643964799
    },
    {
        "content": "<p>oh, that might be another way to approach the lean 4 tactic prioritization problem: gather a list of the tactics you use most commonly that don't exist</p>",
        "id": 270684932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643964880
    },
    {
        "content": "<p>(or just a list of the tactics you use period and I can filter out the ones that already exist)</p>",
        "id": 270685067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643964964
    },
    {
        "content": "<p>since the tactics you use in your videos will be closer to what people actually use on a daily basis rather than what is good for mathlib theory building</p>",
        "id": 270685157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965036
    },
    {
        "content": "<p>Linarith is all over week 2. One problem I face as an educator is what order to do stuff in. I've had great success this term doing basic undergraduate analysis really early -- like Patrick's tutorial. But to do the stuff which our students learn in the first term of analysis linarith is essential</p>",
        "id": 270685166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965048
    },
    {
        "content": "<p>Well I can guess the big ones, I'm more curious about the ones you use without thinking</p>",
        "id": 270685212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965078
    },
    {
        "content": "<p>And ring but we have that already</p>",
        "id": 270685229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965082
    },
    {
        "content": "<p>you might actually have to check your recordings to see if something is beneath notice</p>",
        "id": 270685288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965106
    },
    {
        "content": "<p>It's the ten basic tactics then linarith and normnum and ring</p>",
        "id": 270685292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965110
    },
    {
        "content": "<p>ten basic tactics?</p>",
        "id": 270685311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965128
    },
    {
        "content": "<p>do you actually have a curriculum and stick to it in the videos?</p>",
        "id": 270685326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965142
    },
    {
        "content": "<p>we already have norm_num and ring, and linarith was outsourced IIRC</p>",
        "id": 270685397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965196
    },
    {
        "content": "<p>Split use cases (and preferably rcases because it makes proofs shorter) left right intro rewrite apply exact have</p>",
        "id": 270685404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965198
    },
    {
        "content": "<p>Rintro obtain rcases would be a bonus</p>",
        "id": 270685484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965216
    },
    {
        "content": "<p>rcases is the other big one I think</p>",
        "id": 270685530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965227
    },
    {
        "content": "<p>and its variants</p>",
        "id": 270685542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965231
    },
    {
        "content": "<p>also cases; lean 4 has cases but it is very different</p>",
        "id": 270685586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965262
    },
    {
        "content": "<p>but maybe rcases is a suitable replacement</p>",
        "id": 270685610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965275
    },
    {
        "content": "<p>You can prove natural numbers are a semiring with just induction and rewrite and exact. To prove it's totally ordered you need use intro exact apply rewrite left right and cases</p>",
        "id": 270685676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965317
    },
    {
        "content": "<p>Lean 4 also doesn't have the extra bells and whistles of <code>use</code></p>",
        "id": 270685680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965318
    },
    {
        "content": "<p>Don't need them</p>",
        "id": 270685731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965328
    },
    {
        "content": "<p>it has <code>exists</code> (aka lean 3 <code>existsi</code>)</p>",
        "id": 270685741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965335
    },
    {
        "content": "<p>Existsi is fine other than the weird name</p>",
        "id": 270685760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965349
    },
    {
        "content": "<p>And then to start on analysis you immediately need norm_num ring and linarith</p>",
        "id": 270685832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965404
    },
    {
        "content": "<p>And then there are convenience tactics like convert which you can work around</p>",
        "id": 270685868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965436
    },
    {
        "content": "<p>Ext comes up with sets</p>",
        "id": 270685927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965450
    },
    {
        "content": "<p>ext is a complicated one</p>",
        "id": 270685948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965466
    },
    {
        "content": "<p><code>apply set.ext</code> is what I did in the old days</p>",
        "id": 270685988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965488
    },
    {
        "content": "<p><a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_C/Part_C.html\">https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_C/Part_C.html</a></p>",
        "id": 270686013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965501
    },
    {
        "content": "<p>nice</p>",
        "id": 270686034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965514
    },
    {
        "content": "<p>Those are the ones I've used so far and I suspect I need very little else</p>",
        "id": 270686039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965519
    },
    {
        "content": "<p>And the logic ones like by_cases are just to make their lives easier</p>",
        "id": 270686095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643965561
    },
    {
        "content": "<p>Of those in the list, the ones that don't exist yet or only in simplified forms are:</p>\n<ul>\n<li>cases (different)</li>\n<li>ext</li>\n<li>linarith</li>\n<li>nlinarith</li>\n<li>nth_rewrite</li>\n<li>obtain</li>\n<li>rcases</li>\n<li>refl (different)</li>\n<li>rintro</li>\n<li>simpa</li>\n<li>triv</li>\n<li>use</li>\n</ul>",
        "id": 270686579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643965849
    },
    {
        "content": "<p>I would order them as</p>\n<ul>\n<li>use</li>\n<li>linarith</li>\n<li>obtain</li>\n<li>rcases</li>\n<li>rintro</li>\n<li>simpa</li>\n<li>ext</li>\n<li>refl (different)</li>\n<li>cases (different)</li>\n<li>nlinarith</li>\n<li>nth_rewrite</li>\n<li>triv</li>\n</ul>",
        "id": 270689158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643967367
    },
    {
        "content": "<p>Although I don't really know what a different refl means</p>",
        "id": 270689179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643967382
    },
    {
        "content": "<p>I don't think I ever used <code>nth_rewrite</code> or <code>triv</code></p>",
        "id": 270689223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643967412
    },
    {
        "content": "<p>different refl means that lean 4 <code>rfl</code> is just <code>exact rfl</code>, not apply all <code>@{refl]</code> lemmas</p>",
        "id": 270697193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643971771
    },
    {
        "content": "<p>so for example you can't use it to prove <code>x &lt;= x</code></p>",
        "id": 270697211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643971788
    },
    {
        "content": "<p>I should also have put \"use (different)\" since as I mentioned <code>exists</code> exists</p>",
        "id": 270697508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643971941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Recordings.20of.20Lean.20coding.20sessions/near/270684694\">said</a>:</p>\n<blockquote>\n<p>So I've put about 25 short videos up in the last month of me just solving basic questions in algebra and analysis, and people watch them. I'd encourage other people to try, there is still not that much information out there about lean and this is a way to see examples</p>\n</blockquote>\n<p>I'm one of those people! I've probably seen about 15 in total (I watch them at night if I'm having trouble sleeping). Now I prove things like <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>, except slower and only about basic analysis.</p>\n<p>However, I'm wondering if there's some power user techniques that would make life easier. I recently learned about <code>convert</code> and <code>congr</code>, which were very helpful for proving equalities, and I discovered that <code>calc</code> + <code>ring</code>/<code>simp</code> can make things way easier like in <a href=\"https://github.com/leanprover-community/mathlib/pull/11814\">#11814</a>. It still feels like I might still be doing things the hard way, though. Is it worth learning <code>conv</code> mode? <code>rewrite_search</code>? Should I be using <code>show</code> more?</p>",
        "id": 270754477,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1643999628
    },
    {
        "content": "<p>Presumably the people who maintain Mathlib have figured out which tactics/patterns are useful and which aren't. It would be great to have a condensed \"advanced tactics for Mathlib\" guide, but putting one together would take time and effort (and might be obseleted in the next year). However, recording your screen while working on Mathlib is basically free (if you ignore the weirdness factor of being recorded), and would allow people like me to extract some useful bits of knowledge.</p>",
        "id": 270756444,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644000503
    },
    {
        "content": "<p>I've been recording writing up homework solutions for my number theory course this quarter, and students have been encouraging me to keep doing this since they find value in hearing what I'm thinking when writing them up, seeing how LaTeX works, and observing what happens when I get stuck. Maybe I should make a series for writing up those homework solutions in Lean as well...</p>",
        "id": 270758799,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644001504
    },
    {
        "content": "<p>I would say <code>conv</code> is definitely worth learning, and show is important too. I think rewrite search is really cool but don't know if anyone really uses it (I haven't found a situation yet)</p>",
        "id": 270759724,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644001929
    },
    {
        "content": "<p>Patrick the only reason <code>triv</code> is there is that I decide to introduce <code>true</code> and <code>false</code> very early on in my course, and needed an arbitrary tactic which proved a goal of <code>true</code> -- this is before the students have seen any terms from the library at all like <code>true.intro</code> or whatever. <code>nth_rewrite</code> is there because the canonical question for which it's the answer (\"hey, <code>rw</code> changed both my A's to B's instead of just one of them) comes up really early.</p>",
        "id": 270763481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644003906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Recordings.20of.20Lean.20coding.20sessions/near/270759724\">said</a>:</p>\n<blockquote>\n<p>I would say <code>conv</code> is definitely worth learning, and show is important too. I think rewrite search is really cool but don't know if anyone really uses it (I haven't found a situation yet)</p>\n</blockquote>\n<p>My first impression was that <code>{squeeze_}simp</code> could do a lot of what <code>rewrite_search</code> does. Not sure if that's correct.</p>",
        "id": 270764131,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644004232
    },
    {
        "content": "<p>I think once you learn <code>conv in (_)</code>, there's not much use for <code>nth_rewrite</code>. <code>nth_rewrite</code> is much easier to learn than <code>conv</code>, however.</p>",
        "id": 270764250,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644004315
    },
    {
        "content": "<p>That's why I teach nth_rewrite. They're having enough trouble in tactic mode at this point...</p>",
        "id": 270765150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644004771
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 270784731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644015670
    },
    {
        "content": "<p>I would say that <code>conv</code> is powerful but fairly niche. You can get by most of the time with just <code>rw</code> with sufficiently specified lemmas, and even if I use <code>conv</code> it is usually in simple ways like <code>conv { to_lhs, rw lem }</code></p>",
        "id": 270794029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644023226
    },
    {
        "content": "<p>you have to be facing a pretty hairy goal for <code>conv in (_*_) { ... }</code> to be preferable over the alternatives</p>",
        "id": 270794121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644023322
    },
    {
        "content": "<blockquote>\n<p>Should I be using <code>show</code> more?</p>\n</blockquote>\n<p><code>show</code> is useful for reminding the reader what the goal is which is useful in some kinds of pedagogical tactic style. However it has two other uses, useful even if your only reader is lean:</p>\n<ul>\n<li><code>show T, from lemma</code> is a way to resolve metavariables in the type of <code>lemma</code>. It is almost interchangeable with <code>(lemma : T)</code>, but you might find that <code>show</code> will work in places where type ascription doesn't seem to \"stick\" because <code>show</code> actually adds an identity function to the term, it's not only used in type inference, and this can sometimes make a difference. This is useful for <code>lemma</code>s that are very generic like <code>dec_trivial</code>, since these could be proving almost anything and you need to specify what you want to prove.</li>\n<li><code>show T</code> or more commonly <code>change T</code>, when the goal is <code>|- T'</code>, can be used to unfold or refold definitions, do beta reduction, or anything else as long as <code>T</code> and <code>T'</code> are definitionally equal. This is very powerful since rather than saying <em>what</em> you want to do as with <code>unfold defn</code>, you say  <em>where</em> you want to end up. It can be more verbose than other alternatives if the goal is large, although you can leave lots of underscores in the term. For  example if your goal is <code>x + 1 + 1 = (y + 1) - (1/1) + 2 * 2</code> you can just <code>change x + 2 = y + 4</code> and lean can prove that this is defeq to the goal.</li>\n</ul>",
        "id": 270794938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644024047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Recordings.20of.20Lean.20coding.20sessions/near/270794121\">said</a>:</p>\n<blockquote>\n<p>you have to be facing a pretty hairy goal for <code>conv in (_*_) { ... }</code> to be preferable over the alternatives</p>\n</blockquote>\n<p>I was using it to rewrite under summations mostly. <code>simp_rw</code> was unfolding some definitions IIRC, although maybe that was <code>simp</code>? I don't remember. Nice to know anyways.</p>",
        "id": 270809029,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644041860
    },
    {
        "content": "<p>I use <code>convert_to</code> pretty frequently, which I think does the same thing but is overkill when things are definitionally equal.</p>",
        "id": 270809130,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644041962
    },
    {
        "content": "<p>Another use case for <code>show</code> is when your goal is <code>P (x + 2 - 3 + y - x)</code> and you can use <code>rw (show x + 2 - 3 + y - x = y - 1, by ring)</code>. This is a nice way to get <code>ring</code> to do exactly the rearrangement you want within a term.</p>",
        "id": 270810800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644044481
    },
    {
        "content": "<p>Another use case for <code>show</code> is to select one among many open goals, for example if you want to handle them in a different order.</p>",
        "id": 270829962,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644071571
    },
    {
        "content": "<p>oh, <code>rw (show … = …, by …)</code> is neat. Probably better than the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">…</span> <span class=\"bp\">=</span> <span class=\"bp\">…</span> <span class=\"o\">:=</span> <span class=\"bp\">…</span><span class=\"o\">,</span>\n<span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>(or <code>rw  this</code>) idiom that I have been using so far.</p>",
        "id": 270830023,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644071648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Recordings.20of.20Lean.20coding.20sessions/near/270684694\">said</a>:</p>\n<blockquote>\n<p>So I've put about 25 short videos up in the last month of me just solving basic questions in algebra and analysis, and people watch them. I'd encourage other people to try, there is still not that much information out there about lean and this is a way to see examples</p>\n</blockquote>\n<p>Do you have any advice about software for recording/streaming lean proving videos? I've been thinking it might be fun to livestream a \"speedrun\" of Robbins' proof of Stirling's formula.</p>",
        "id": 270850920,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1644097562
    },
    {
        "content": "<p>You didn't ask me, but I've had a lot of success with OBS Studio to record parts of my screen along with video of me in the corner (the trickiest part was fiddling with the settings until it no longer got \"overloaded,\" which causes the framerate to drop). When I've needed to edit the video afterwards, I've used Blender of all things -- it was the easiest of all the programs I'd tried on Linux, though you have to look up how you actually export your video since it's not really self-explanatory.</p>",
        "id": 270851256,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644098077
    },
    {
        "content": "<p>I use OBS Studio too</p>",
        "id": 270851531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644098421
    },
    {
        "content": "<p>I never edit my videos, I can't be bothered / don't have enough time.</p>",
        "id": 270851590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644098458
    },
    {
        "content": "<p>Sometimes when I'm uploading stuff internally I edit the videos but then I use the infrastructure provided by our VLE (Panopto, in this case)</p>",
        "id": 270851653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644098527
    },
    {
        "content": "<p>I'd do videos / streams of developing doc-gen4 but 90 percent is me grepping through the compiler to find a function that tells me something I want so I don't think that'd be too interesting <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 270852377,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644099480
    },
    {
        "content": "<p>Yes, that seems like a trap you could fall into. My thinking is that, as long as you vocalize your thought process as you look for things, you remain at least somewhat engaging and instructional. I'm pretty good about vocalizing my thoughts even when no one is listening, so hopefully I can apply that and make something engaging.</p>",
        "id": 270853254,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1644100796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/Recordings.20of.20Lean.20coding.20sessions/near/270850920\">said</a>:</p>\n<blockquote>\n<p>Do you have any advice about software for recording/streaming lean proving videos? I've been thinking it might be fun to livestream a \"speedrun\" of Robbins' proof of Stirling's formula.</p>\n</blockquote>\n<p>This would be great! You'll have at least one viewer <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 270875908,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644132819
    }
]