[
    {
        "content": "<p>Hi, how can I expose a function defined in type class to the top-level? i.e., the way to_string is exposed.</p>",
        "id": 127674397,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1528314655
    },
    {
        "content": "<p>You can do <code>export has_to_string (to_string)</code></p>",
        "id": 127674462,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528314740
    },
    {
        "content": "<p>the function it exposes doesn't seem to the one I want. I have to provide the type parameter.</p>",
        "id": 127674583,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1528314925
    },
    {
        "content": "<p>I hope I can write <code>to_string 5</code> instead of <code>to_string nat 5</code></p>",
        "id": 127674595,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1528314958
    },
    {
        "content": "<p>ahh sorry, seem in my case, the type inference doesn't work; in other case it works well.</p>",
        "id": 127674650,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1528315000
    },
    {
        "content": "<p>I think there are two ways of doing that. Either you write a definition in the global namespace where you have fine control over implicit / explicit parameters or you use the following:</p>\n<div class=\"codehilite\"><pre><span></span>class my_algebra (a : Type) :=\n  (zero {} : a)\n</pre></div>\n\n\n<p>I haven't used it myself but I think it should work.</p>",
        "id": 127674679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528315081
    },
    {
        "content": "<p>(I just tried it. It works)</p>",
        "id": 127674742,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528315143
    },
    {
        "content": "<p>thanks! now it works.</p>",
        "id": 127674747,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1528315152
    },
    {
        "content": "<p>question: how to give the checker a hint for synthesis?</p>",
        "id": 127674821,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1528315214
    },
    {
        "content": "<p>Do you mean elaboration, i.e. inferring the type that are not explicitly required?</p>",
        "id": 127674837,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528315251
    },
    {
        "content": "<p>yes. But in my case it can't be inferred, so I want to give it a hint of the type.</p>",
        "id": 127674850,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1528315276
    },
    {
        "content": "<p>If your function is <code>foo</code>, <code>@foo</code> makes every implicit parameters (types, type class instances and others) explicit. It's a bit of all or nothing but there are ways to simplify if that comes up too often.</p>",
        "id": 127674922,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528315368
    },
    {
        "content": "<p>Sorry, my brain is currently working in Haskell. In Lean, if that comes up too often, you may have to make the parameter explicit. Before you get there, can give some type annotations in the form of <code>(expr : type)</code></p>",
        "id": 127675004,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528315497
    },
    {
        "content": "<p>For example if your function infers a type from its list argument but you provide an empty list, you can write <code>foo ([] : list a)</code> or <code>foo (@nil a)</code></p>",
        "id": 127675084,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528315563
    },
    {
        "content": "<p>yep! I just used annotation and it works well.</p>",
        "id": 127675179,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1528315693
    }
]