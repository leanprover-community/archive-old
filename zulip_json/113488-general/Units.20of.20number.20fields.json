[
    {
        "content": "<p>What is the best way to define the group of units of a number field <code>K</code>? I have tried to use <code>(number_field.ring_of_integers K)À£</code> but there are some issues when I want to coerce the units into <code>K</code>, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">number_field.ring_of_integers</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">number_field.ring_of_integers</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n   <span class=\"n\">units.ne_zero</span> <span class=\"n\">x</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">number_field.ring_of_integers</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n   <span class=\"n\">units.ne_zero</span> <span class=\"n\">x</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 316790435,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671469853
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">number_field.ring_of_integers</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">subtype.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">units.ne_zero</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 316793341,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671470698
    },
    {
        "content": "<p>You can also define it as a subgroup of <code>units K</code> via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.unit\">docs#set.unit</a> since we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/number_field.ring_of_integers.is_fraction_ring\">docs#number_field.ring_of_integers.is_fraction_ring</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/number_field.ring_of_integers.is_dedekind_domain\">docs#number_field.ring_of_integers.is_dedekind_domain</a></p>",
        "id": 316793583,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671470768
    },
    {
        "content": "<p>There must be a general lemma saying that when <code>A</code> is a domain and <code>K</code> is <strong>any localization</strong> of <code>A</code>, that the units of <code>A</code> are nonzero in <code>K</code>. I suppose mathlib knows that the number field is a localization of its ring of integers?</p>",
        "id": 316793771,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671470845
    },
    {
        "content": "<p>I think you should be able to do this a bit more concisely with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_ne_zero_iff\">docs#map_ne_zero_iff</a>, something like (untested) <code>(map_ne_zero_iff (is_localization.injective _ _)).mpr x.ne_zero</code></p>",
        "id": 316794019,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671470932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/Units.20of.20number.20fields/near/316793583\">said</a>:</p>\n<blockquote>\n<p>You can also define it as a subgroup of <code>units K</code> via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.unit\">docs#set.unit</a> since we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/number_field.ring_of_integers.is_fraction_ring\">docs#number_field.ring_of_integers.is_fraction_ring</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/number_field.ring_of_integers.is_dedekind_domain\">docs#number_field.ring_of_integers.is_dedekind_domain</a></p>\n</blockquote>\n<p>Yes, that looks like a good idea. I'll try that.</p>",
        "id": 316794121,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671470965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Units.20of.20number.20fields/near/316793771\">said</a>:</p>\n<blockquote>\n<p>There must be a general lemma saying that when <code>A</code> is a domain and <code>K</code> is <strong>any localization</strong> of <code>A</code>, that the units of <code>A</code> are nonzero in <code>K</code>. I suppose mathlib knows that the number field is a localization of its ring of integers?</p>\n</blockquote>\n<p>The last one yes: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/number_field.ring_of_integers.is_fraction_ring\">docs#number_field.ring_of_integers.is_fraction_ring</a></p>",
        "id": 316794122,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671470965
    },
    {
        "content": "<p>But maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.unit\">docs#set.unit</a> isn't usable yet because it lacks some API; for example <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Intersection.20of.20localisations/near/302954312\">this</a> hasn't been PR'd yet.</p>",
        "id": 316794577,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671471118
    },
    {
        "content": "<p>If you have a look in the flt-regular project we have some results about units.</p>",
        "id": 316798838,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671472547
    },
    {
        "content": "<p>In <code>number_theory/cyclotomic/Unit_lemmas.lean</code></p>",
        "id": 316799021,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671472587
    },
    {
        "content": "<p>(the file is a little mess)</p>",
        "id": 316799121,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671472609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/Units.20of.20number.20fields/near/316798838\">said</a>:</p>\n<blockquote>\n<p>If you have a look in the flt-regular project we have some results about units.</p>\n</blockquote>\n<p>It seems that the idea there is that <code>(ùìû K)À£</code> is the right object which I quite agree. I also  see a lot of things there that could be very useful for me. Is there any plan to PR these soon?</p>",
        "id": 316799840,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671472817
    },
    {
        "content": "<p>I now have all the tools to define the logarithmic embedding of units of a number field but we need to decide first what is the right way to look at units of number fields...</p>",
        "id": 316800331,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671472960
    },
    {
        "content": "<p>Not really, but feel free to use/PR anything you want!</p>",
        "id": 316802948,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671473900
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 316870098,
        "sender_full_name": "David Ang",
        "timestamp": 1671506769
    },
    {
        "content": "<p>After different trials, I think the following definition is the most convenient (at least for my needs).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">number_field.group_of_units</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">K</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">À£</span> <span class=\"bp\">|</span> <span class=\"n\">is_integral</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"n\">is_integral</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">‚Åª¬π</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 316945555,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671541502
    },
    {
        "content": "<p>Are you sure? Of course it depends on what you want to do, but maybe if the API for units is not good enough for <code>(ùìû K)À£</code> we should improve it.</p>",
        "id": 316959411,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671545512
    },
    {
        "content": "<p>Well, I have not committed to anything yet. I agree that <code>(ùìû K)À£</code> is also a valid choice and I am willing to develop the necessary API for it if we decide that it is the best choice. I guess seeing the units as a <code>subgroup KÀ£</code>(as above) is easier for me because I want to define the log embedding on <code>KÀ£</code> as  it might have other applications outside of the study of units, but maybe it is a bad design choice and I should  just define it only on <code>(ùìû K)À£</code>.</p>",
        "id": 316961033,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671545945
    },
    {
        "content": "<p>I agree it's useful to be able to see <code>(ùìû K)À£</code> as a subgroup of <code>KÀ£</code>, but maybe a coercion is enough. I think <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> , <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  and <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> wrote most of the work about units in flt-regular, maybe they have an opinion.</p>",
        "id": 316963502,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671546633
    },
    {
        "content": "<p>I somewhat agree with <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> that <code>(ùìû K)À£</code> seems a better choice, especiallly if you will need to speak about <code>S</code>-units or units in algebraic fields that are not finite over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>.</p>",
        "id": 317128963,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1671619713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/Units.20of.20number.20fields/near/316963502\">said</a>:</p>\n<blockquote>\n<p>I agree it's useful to be able to see <code>(ùìû K)À£</code> as a subgroup of <code>KÀ£</code>, but maybe a coercion is enough. I think <span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> , <span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span>  and <span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> wrote most of the work about units in flt-regular, maybe they have an opinion.</p>\n</blockquote>\n<p>I remember it being a pain to use, but I'd also vote for working with <code>(ùìû K)À£</code>.</p>",
        "id": 317136844,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1671622227
    },
    {
        "content": "<p>Why not just have both?</p>",
        "id": 317137574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671622492
    },
    {
        "content": "<p>One is a type, one is a term, probably the type is the thing to use in general but if the term is useful in one file then just make the term and a little API for it. But if you want a type (and you certainly will in many cases), you probably don't want to make the term as the primary object and then coerce it to a type because this just adds a layer of confusion. So the type <code>(ùìû K)À£</code> should probably be the primary thing but if the term of type <code>subgroup KÀ£</code> is useful in some places, use the term.</p>",
        "id": 317138001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671622618
    },
    {
        "content": "<p>Yes, this is what I am doing at the moment. I mainly use <code>(ùìû K)À£</code> as <strong>the</strong> group of units of a number field and I plan to use the <code>subgroup  KÀ£</code> only when it is more convenient (mainly when dealing with the logarithmic embedding). For the moment, I am using an equiv between the two but I might also add a coercion at some point.</p>",
        "id": 317145920,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671625415
    },
    {
        "content": "<p><code>units (ùìû K)</code> is still a term - there should probably be a thing that makes it into a subgroup of <code>K*</code>, but that in general, as opposed to just \"the units subgroup\" - I wonder if it's just <code>subgroup.map</code> or whatever.</p>",
        "id": 317241699,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671653915
    },
    {
        "content": "<p>You're never sad to have more information, though, because having lemmas proving that things are integral quickly does get annoying, in my experience.</p>",
        "id": 317241763,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671653940
    },
    {
        "content": "<p>I imagine it's something like <code>(units.map $ algebra_map (ùí™  K) K).range</code>?</p>",
        "id": 317430589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671734813
    },
    {
        "content": "<p>Yes, that is what I am using at the moment.</p>",
        "id": 317447558,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671741399
    },
    {
        "content": "<p>I think that's a fine idea. It might have to be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_t\">docs#has_coe_t</a> because it has the potential to loop: the target <code>_À£</code> has the same shape as the source <code>(ùìû _)À£</code> so depending on implementation details that I don't quite remember you could get an infinite loop of <code>(ùìû (ùìû (ùìû (ùìû (ùìû ...)))))À£ ‚Üí K</code>.</p>",
        "id": 317537830,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671792826
    },
    {
        "content": "<p>If you can write <code>(‚Üë(units.mk _ _) : KÀ£</code> and you don't get a timeout, everything should be fine.</p>",
        "id": 317538019,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671792885
    },
    {
        "content": "<p>There does not seem to be an infinite loop for the time being. I can write <code>(‚Üë(units.mk _ _) : KÀ£)</code> without any timeout... But I'll keep an eye on it and might get back to you if things get nasty.</p>",
        "id": 317612834,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1671816579
    }
]