[
    {
        "content": "<p>Hello world. I want to create an intrinsically typed DTLC implementation. a la <a href=\"https://repository.tudelft.nl/islandora/object/uuid:f0312839-3444-41ee-9313-b07b21b59c11\">https://repository.tudelft.nl/islandora/object/uuid:f0312839-3444-41ee-9313-b07b21b59c11</a></p>\n<p>I currently have the following code describing STLC, and want to extend it to DTLC. My issue is specifically in upgrading the custom <code>inductive Ty</code> to Lean's <code>Sort _</code> family, for all universes. Is there any way I can do this or have I hit the limits of Lean's expressiveness?</p>\n<p>I'm using Lean 4 btw.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Ty</span>\n    <span class=\"n\">abbrev</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b.type</span>\n<span class=\"kd\">end</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Cover</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">done</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">both</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t.type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">t</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"n\">t</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">Γ₃</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"n\">u</span> <span class=\"bp\">Γ₃</span>\n</code></pre></div>",
        "id": 261990918,
        "sender_full_name": "Sofia",
        "timestamp": 1637269697
    },
    {
        "content": "<p>If I let my type be a <code>Prop</code>, which isn't quite helpful here... I can get at least the first few.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp2</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp2</span> <span class=\"n\">t</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Exp2</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Exp2</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp2</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n<span class=\"c1\">--| app : Exp2 (t -&gt; u) Γ₁ -&gt; Exp2 t Γ₂ -&gt; Cover Γ₁ Γ₂ Γ₃ -&gt; Exp2 u Γ₃</span>\n</code></pre></div>\n<p>With the last failing because each <code>Γ</code> needs to be the same type, due to the definition of <code>Cover</code>.</p>",
        "id": 261992241,
        "sender_full_name": "Sofia",
        "timestamp": 1637270338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> <a href=\"#narrow/stream/113488-general/topic/Intrinsically.20typed.20DTLC.3F/near/261990918\">said</a>:</p>\n<blockquote>\n<p>I want to create an intrinsically typed DTLC implementation.</p>\n</blockquote>\n<p>This is considered very hard and personally, I don't see the point. Intrinsic STLC is nice because everything just falls into place. Intrinsic DTT very much doesn't fall into place, and any reduction in lines of code you might get will be paid for with many hours of bashing your head against a wall of mutual definitions (which Lean doesn't support well; Agda would be a better choice here). So if you can go extrinsic, do that.</p>\n<p>Specifically for this universe issue, I don't quite understand what you're trying to do. If your language has universes, you should model them with a corresponding <code>inductive</code>, not with Lean universes. <code>Prop</code> is certainly not the way to go since your expressions should be computationally relevant. Also note that in <code>Exp2</code>, you give your expressions Lean types rather than types from your language.</p>",
        "id": 261994936,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1637271639
    },
    {
        "content": "<p>The objective of <code>Exp2</code> is exactly \"Can I inherit Lean's types instead of creating my own?\"</p>",
        "id": 261995152,
        "sender_full_name": "Sofia",
        "timestamp": 1637271760
    },
    {
        "content": "<p>Okay, then I think the answer is no. This universe issue is one problem; a more fundamental one is that types do not have useful structure (or even equality). E.g. if you want to type a dependently-typed function, you need to substitute a value into the type of the body, but how do you substitute in a Lean type?</p>",
        "id": 261995913,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1637272154
    },
    {
        "content": "<p>Apply against a Pi?</p>",
        "id": 261996354,
        "sender_full_name": "Sofia",
        "timestamp": 1637272357
    },
    {
        "content": "<p>A friend linked me to <a href=\"https://pages.lip6.fr/Pierre-Evariste.Dagand/stuffs/thesis-2011-phd/thesis.pdf\">https://pages.lip6.fr/Pierre-Evariste.Dagand/stuffs/thesis-2011-phd/thesis.pdf</a> for implementing the type myself.</p>\n<p>Could you link to research demonstrating an intrinsically typed DTLC is \"considered very hard\"?</p>",
        "id": 261998329,
        "sender_full_name": "Sofia",
        "timestamp": 1637273249
    },
    {
        "content": "<p>I just tried to write down a type for the <code>lam</code> constructor that concludes <code>Exp (forall a, P a) Gamma</code> and I don't even see what that would sensibly look like. I'm not familiar enough with the ornaments stuff to say definitively whether that is a relevant reference, but I suspect it won't help.</p>\n<p>The issues with intrinsic DTT are folklore, so no specific references. Here's <a href=\"https://limperg.de/paper/msc-thesis/code/Source.Term.html#1675\">an example from my MSc thesis</a> if that helps. This is a very mildly dependently-typed language: no universes and only specific constructs where dependencies can occur, so the intrinsic style still kinda works. But for example the type of <code>fix</code> contains substitutions, which made everything afterwards a little painful, and it took me a number of attempts to arrive at a formulation that worked. I'm sure the extrinsic style would have been much more straightforward, if also slightly more boilerplatey.</p>",
        "id": 262002538,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1637275488
    },
    {
        "content": "<p>The ornaments paper specifies its own inductive type family, among other more interesting things.</p>\n<p>Thanks for the information. I'll still try for an intrinsic DTLC, but recognize I may just yield and use an extrinsic approach instead. If I get it working either way, I'll share the result.</p>",
        "id": 262042749,
        "sender_full_name": "Sofia",
        "timestamp": 1637312928
    },
    {
        "content": "<p>In my experience, trying something which is believed to be hard is a really good way of getting a deeper understanding of the difficulties. It might not turn into a paper, but it makes you a wiser person.</p>",
        "id": 262046648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637315764
    },
    {
        "content": "<p>This is the idea. :)</p>",
        "id": 262046781,
        "sender_full_name": "Sofia",
        "timestamp": 1637315869
    },
    {
        "content": "<p>Good luck! If you do succeed, I'll be very interested in the results.</p>",
        "id": 262083444,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1637336707
    }
]