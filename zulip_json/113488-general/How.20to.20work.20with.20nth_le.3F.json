[
    {
        "content": "<p>I feel very frustrated when dealing with <code>nth_le</code> due to the error <code>rewrite tactic failed, motive is not type correct</code>.  I get why the error occurs. What I don't know is how to workaround the problem.</p>\n<p>I can <code>rewrite</code> the list part, but it requires me to constantly use <code>list.nth_le_of_eq</code>, which doesn't seem ideal.  On the other hand, there doesn't seem to be a good way to <code>rewrite</code> the index part.</p>\n<p>How do you reason with <code>nth_le</code>? Thanks!</p>",
        "id": 216444637,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1605173038
    },
    {
        "content": "<p>I don't really have an answer to your question. Most of the time, we don't really use lists...<br>\nWould you mind explaining what your bigger goal is?</p>",
        "id": 216445135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605173386
    },
    {
        "content": "<p>I'm working on program verification. We use lists to represent some kind of values, program states, etc.</p>",
        "id": 216447866,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1605175114
    },
    {
        "content": "<p>Hmm, I'm afraid I can't help you with that.</p>",
        "id": 216448158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605175307
    },
    {
        "content": "<p>This is deep dependent type territory, of the wrong kind. I can vaguely imagine what goes wrong (the term and the type that depends on the term get out of sync), but I'd avoid the issue entirely by avoiding <code>nth_le</code>.</p>",
        "id": 216448314,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1605175405
    },
    {
        "content": "<p>See p. 64 of <a href=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\">The Hitchhiker's Guide to Logical Verification</a> for a discussion of alternatives.</p>",
        "id": 216448428,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1605175481
    },
    {
        "content": "<p>In general, you may be able to work around the <code>rewrite</code> error by constructing the motive yourself. <code>rewrite</code> ultimately generates an application of the recursion principle for equality, <code>eq.rec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eq.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span>\n  <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">ᾰ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">ᾰ</span>\n</code></pre></div>\n<p><code>C</code> is called the motive of the recursor and it determines where in your term the substitution is performed. <code>rewrite</code>, like similar mechanisms in other systems, uses a fairly simplistic method to infer these motives. If this fails, you get the 'motive is not type correct' error. To work around this, you can apply <code>eq.rec</code> directly and give a motive yourself.</p>\n<p>These proofs won't be pretty, though, and it may be better to refactor your code so that it involves less dependencies.</p>",
        "id": 216451081,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1605177226
    },
    {
        "content": "<p>You can also try using <code>simp_rw</code>, that usually will be able to hit all of the hidden terms as well. But <code>simp_rw [&lt;-...]</code> will probably not work, due to a loop.</p>",
        "id": 216488233,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605196960
    },
    {
        "content": "<p>That's what I've done to reason about <code>nth_le</code>. You might also want to structure your proofs to induct on the head and tail, which will avoid having to index.</p>",
        "id": 216488340,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605197007
    },
    {
        "content": "<p>I don't know if this is helpful at all, but I almost always use <code>fin</code> when I use <code>list.nth_le</code>,  for instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">all_zero</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i.1</span> <span class=\"n\">i.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and I have not had problems with it, but this isnt for all use cases</p>",
        "id": 216502299,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1605202910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360581\">@Sorawee Porncharoenwase</span> A nice trick to avoid using <code>nth_le</code> all the time is to instead quantify over <code>\\forall i a, l.nth i = some a -&gt; ...</code> which avoids the \"bad\" kind of dependent types in favor of a simple predicate. I used this a lot when I wrote the C semantics, so I can attest to its effectiveness in program verification contexts. If you have an example of where you are running into trouble I can show how it goes.</p>",
        "id": 216526611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605214246
    },
    {
        "content": "<p>Thanks everyone! This is helpful.</p>",
        "id": 216600788,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1605268614
    }
]