[
    {
        "content": "<p>I read the book about lean prover. There is some code like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_dvd</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_refl</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>I don't know why this theorem can be proved by &lt;1, simp&gt;. What does number 1 mean?<br>\nThank you for making it clear,</p>",
        "id": 133665638,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536590498
    },
    {
        "content": "<p>You see the <code>k</code> on the first line?</p>",
        "id": 133665724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536590543
    },
    {
        "content": "<p>To prove <code>n | n</code>, you have to provide a <code>k</code>. And this proof provides <code>1</code>.</p>",
        "id": 133665742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536590563
    },
    {
        "content": "<p>Afterwards, you have to prove <code>n = m * k</code>. And in your theorem <code>m</code> is <code>n</code>, and you just provided <code>k</code> is <code>1</code>.</p>",
        "id": 133665778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536590596
    },
    {
        "content": "<p>The proof is then <code>by simp</code>.</p>",
        "id": 133665788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536590606
    },
    {
        "content": "<p>Ok, thanks. I see it is trivial now.</p>",
        "id": 133665890,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536590677
    },
    {
        "content": "<p>By the way, is there any other way. I mean how can we write the code clearer.</p>",
        "id": 133666052,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536590774
    },
    {
        "content": "<p>Yes. This is called tactic mode.</p>",
        "id": 133666084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536590811
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_dvd</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_refl</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">existsi</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133666101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536590824
    },
    {
        "content": "<p>Oh, ok. How can we unfold the definition of \"|\", to make it appear like: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">\\</span><span class=\"n\">exists</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n</pre></div>",
        "id": 133666288,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536590980
    },
    {
        "content": "<p>I mean, to make it look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 133666491,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536591124
    },
    {
        "content": "<p>Do you mean you want to change what the goal looks like, inside the tactic block?</p>",
        "id": 133666552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536591186
    },
    {
        "content": "<p>Oh, yes</p>",
        "id": 133666565,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536591205
    },
    {
        "content": "<p>Two ways. One is that you can use <code>change</code> to change the goal to something definitionally equivalent, like</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">change</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>Of course, that depends on knowing what the unfolded form should be</p>",
        "id": 133666643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536591256
    },
    {
        "content": "<p>WHat is the second way</p>",
        "id": 133666803,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536591381
    },
    {
        "content": "<p>The other way is to use <code>unfold</code> or <code>dsimp</code> or related tactics to unfold the <code>∣</code> operation, but because it is notation in this case, you need to know the actual name of the operator, which is <code>has_dvd.dvd</code></p>",
        "id": 133666817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536591392
    },
    {
        "content": "<p>Then <code>has_dvd</code> is a class, so you also need to unfold the actual instance for <code>nat</code>. If you start with</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">unfold</span> <span class=\"n\">has_dvd</span><span class=\"bp\">.</span><span class=\"n\">dvd</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>then you'll see what the actual operation is in the goal window -- it's <code>nat.dvd</code></p>",
        "id": 133666938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536591492
    },
    {
        "content": "<p>I tried this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_refl</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But, I got error</p>",
        "id": 133666955,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536591513
    },
    {
        "content": "<p>So then you can unfold both at once with</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">unfold</span> <span class=\"n\">has_dvd</span><span class=\"bp\">.</span><span class=\"n\">dvd</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 133666979,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536591534
    },
    {
        "content": "<p>Yep, because you have to unfold <code>has_dvd.dvd</code> first.<br>\nIf you write <code>set_option pp.notation false</code> before your theorem, you can see what the notation really represents.</p>",
        "id": 133667037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536591571
    },
    {
        "content": "<p>Oh, I made it works now.<br>\nIt run fine</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_refl</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">has_dvd</span><span class=\"bp\">.</span><span class=\"n\">dvd</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133667112,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1536591606
    },
    {
        "content": "<p>you can write <code>dsimp [(∣)]</code> too</p>",
        "id": 133669697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536593541
    }
]