[
    {
        "content": "<p>I am trying to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">unop_ne_zero_iff</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.unop</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I would imagine that this is true by <code>not_iff_not.mpr (unop_eq_zero_iff α a)</code> or <code>by rw [not_iff_not, unop_eq_zero_iff]</code> but neither work. Digging a bit deeper:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">unop_ne_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.unop</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_iff_not</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">unop_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">opposite</span>\n</code></pre></div>\n<p>The above yields a goal of <code>0 = 0</code>. When I click on the infoview it says <code>Prop eq αᵒᵖ 0 0</code>, but nothing involving reflexivity or <code>eq_self_iff_true</code> works; trying <code>exact rfl</code> throws the error message <code>invalid type ascription, term has type ?m_2 = ?m_2 but is expected to have type 0 = 0</code>.</p>\n<p>The issue seems to be that the <code>0</code> on the LHS has attributes <code>has_zero.zero</code> and <code>opposite.has_zero α</code>, while the one on the RHS only has <code>has_zero.zero</code>. What is causing this, and is there no way to synthesize the two?</p>",
        "id": 239788213,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1621619188
    },
    {
        "content": "<p>I'd expect <code>iff.rfl</code> to close that goal</p>",
        "id": 239788592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621619402
    },
    {
        "content": "<p>What is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite.has_zero\">docs#opposite.has_zero</a> defined as?</p>",
        "id": 239788654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621619416
    },
    {
        "content": "<p>I had tried that as well</p>",
        "id": 239788759,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1621619471
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 239788794,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1621619497
    },
    {
        "content": "<p>That is <code>opposite.has_zero</code></p>",
        "id": 239788920,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1621619544
    },
    {
        "content": "<p>But I couldn't get that to reconcile either.</p>",
        "id": 239788941,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1621619555
    },
    {
        "content": "<p><code>local attribute [reducible] opposite</code> probably fixed it</p>",
        "id": 239789194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621619682
    },
    {
        "content": "<p>But is also probably not the right solution</p>",
        "id": 239789208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621619691
    },
    {
        "content": "<p>I had tried doing that originally since <code>unop_eq_zero_iff</code>has that attribute, but I get the error message <code>maximum class-instance resolution depth has been reached (the limit can be increased by setting option 'class.instance_max_depth') (the class-instance resolution trace can be visualized by setting option 'trace.class_instances')</code></p>",
        "id": 239789528,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1621619843
    },
    {
        "content": "<p>The type of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite.unop_eq_zero_iff\">docs#opposite.unop_eq_zero_iff</a> is wrong. It uses the instance <code>_inst_1</code> on the RHS (i.e. the instance <code>has_zero α</code> when it needs <code>has_zero αᵒᵖ</code>, but that doesn't even type-check when <code>opposite</code> is irreducible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.numerals</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">opposite.unop_eq_zero_iff</span>\n</code></pre></div>\n<p>Here is a fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">opposite</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">my_unop_eq_zero_iff</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.unop</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">unop_eq_zero_iff</span> <span class=\"n\">α</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">unop_ne_zero_iff</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.unop</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_iff_not</span><span class=\"o\">,</span> <span class=\"n\">my_unop_eq_zero_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">opposite</span>\n</code></pre></div>\n<p>(this also makes <code>α</code> implicit)</p>",
        "id": 239818191,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621634495
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7687\">#7687</a></p>",
        "id": 239819040,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621634985
    },
    {
        "content": "<p>I'll make a PR with a linter that type-checks the type of declarations later:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `check_type` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> TYPES DO NOT TYPE-CHECK: -/</span>\n<span class=\"c1\">-- algebra\\category\\Mon\\adjunctions.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">adjoin_zero_map</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">adjoin_one_map</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n\n<span class=\"c1\">-- algebra\\group\\with_one.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">with_zero.coe_add_hom_apply</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">with_one.coe_mul_hom_apply</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n\n<span class=\"c1\">-- algebra\\opposites.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">opposite.unop_eq_zero_iff</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">opposite.op_eq_zero_iff</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">opposite.unop_eq_one_iff</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">opposite.op_eq_one_iff</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n\n<span class=\"c1\">-- category_theory\\opposites.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">category_theory.nat_trans.op_app</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">category_theory.nat_trans.remove_left_op_app</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">category_theory.nat_trans.right_op_app</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to type check -/</span>\n</code></pre></div>",
        "id": 239820284,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621635789
    },
    {
        "content": "<p>Nice work!</p>",
        "id": 239859102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621674917
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/7694\">#7694</a> I added the linter and fixed these declarations in mathlib.<br>\nThere are still many automatically generated declarations that are ill-typed (<a href=\"https://gist.github.com/fpvandoorn/015ce16dbd42f3ec33f26f44ef031c3a\">Gist</a>). <br>\nThis is mostly types that are made <code>@[irreducible]</code>, but some definitions on it only work if it's not irreducible. There is a question what to do with these in Lean 4, since in Lean 4 we cannot make definitions irreducible, and then locally reducible. In earlier threads (<a href=\"#narrow/stream/270676-lean4/topic/mathport.3Airreducible\">like this one</a>), it seems that it is an open question whether we want to turn them into <code>constant</code> in Lean 4, or whether we want to make them a <code>def</code> (potentially with a new irreducibility setting?).</p>",
        "id": 239895960,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621713029
    },
    {
        "content": "<p>Thank you Floris!</p>",
        "id": 239929497,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1621752248
    }
]