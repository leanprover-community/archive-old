[
    {
        "content": "<p>why is the lean web editor slow? as a programmer i want to make a faster version of the lean web editor... but i want to know the reason why it's slow first. could anyone give me pointers, thanks in advance</p>",
        "id": 259371085,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1635418862
    },
    {
        "content": "<p>How much does one generally expect performance to decrease when running something in the browser via WASM?</p>",
        "id": 259371214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635418929
    },
    {
        "content": "<p>my guess is not significant unless the application is multithreaded or relies heavily on SIMD, as these are the features that WASM doesn't support. otherwise, WASM is pretty close to the hardware and I don't think it imposes much overhead</p>",
        "id": 259371430,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1635419046
    },
    {
        "content": "<p>Aah, is multithreading an issue?</p>",
        "id": 259371477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635419077
    },
    {
        "content": "<p>Because Lean is using that a lot.</p>",
        "id": 259371495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635419087
    },
    {
        "content": "<p>I would imagine it is also slow (at startup) because it presumably has to download mathlib oleans?</p>",
        "id": 259372340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635419527
    },
    {
        "content": "<p>An easy way to address that is to provide some user feedback about the download, so that it doesn't just look like lean startup time</p>",
        "id": 259406333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635435090
    },
    {
        "content": "<p>The startup time is an issue no matter whether it's downloading, wasm compilation, or lean runtime.  Adding a more informative progress message is a good thing, but doesn't fix the issue.</p>",
        "id": 259406986,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635435346
    },
    {
        "content": "<p>If we have a per-file olean cache, then the downloading could be done on-demand</p>",
        "id": 259407551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635435584
    },
    {
        "content": "<p>which helps if you only want to do some demlo with <code>ℕ</code></p>",
        "id": 259407701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635435625
    },
    {
        "content": "<p>but if you start with <code>import kitchen.sink</code> you're still stuck of course</p>",
        "id": 259407790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635435663
    },
    {
        "content": "<p>Storing the olean cache in the browser somewhere might help, but only if we make the online editor slower at updating mathlib</p>",
        "id": 259408524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635435966
    },
    {
        "content": "<p>I find gitpod to feel much faster than our own in-browser version, likely as that's not really running in a browser in the first place, but instead being streamed to one.</p>",
        "id": 259408633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436012
    },
    {
        "content": "<p>I am using links to the community web editor in teaching resources such as <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/logic/README.md\">this one</a> (see \"links for the impatient\"). Is there a way to instead link to some gitpoddery?</p>",
        "id": 259409485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635436369
    },
    {
        "content": "<p>In fact the community lean web editor does store the olean cache in the browser's IndexedDB, but since we update the oleans once a day, it doesn't help people who only use the web editor occasionally...</p>",
        "id": 259409509,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635436378
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> is thinking about working on a live editor version that works more like gitpod, where Lean is run a VM in the cloud.</p>",
        "id": 259409518,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635436381
    },
    {
        "content": "<p>I ask because I just <code>import tactic</code> at the top of every file, which is the proverbial kitchen sink import (I don't need to for the first couple of problem sheets, but we get onto <code>rintro</code> pretty quickly and I like the idea of a one size fits all import for tactics rather than importing some of them and then later having to import more as we get to <code>ring</code> etc)</p>",
        "id": 259409595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635436413
    },
    {
        "content": "<p>I suspect that an olean cache that supports just <code>import tactic</code> would be fairly small, but the web editor doesn't have great support at the moment for switching between different types of caches.</p>",
        "id": 259409974,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635436556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/lean.20web.20editor.20slow/near/259409485\">said</a>:</p>\n<blockquote>\n<p>I am using links to the community web editor in teaching resources such as <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/logic/README.md\">this one</a> (see \"links for the impatient\"). Is there a way to instead link to some gitpoddery?</p>\n</blockquote>\n<p>Sure, <a href=\"https://gitpod.io/#https://github.com/ImperialCollegeLondon/M40001_lean\">https://gitpod.io/#https://github.com/ImperialCollegeLondon/M40001_lean</a></p>",
        "id": 259410079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436594
    },
    {
        "content": "<p>then they have to log into something?</p>",
        "id": 259410133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635436620
    },
    {
        "content": "<p>Yes, just github I think</p>",
        "id": 259410157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436630
    },
    {
        "content": "<p>But bear in mind that gitpod has a usage quota (50 hours/month) unless:</p>\n<ul>\n<li>you pay money</li>\n<li>you convince them you are a professional open source developer</li>\n</ul>\n<p>The mathlib maintainers and probably most of the active contributors could quite easily argue this second point (I did), but I doubt your students can.</p>",
        "id": 259410236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436666
    },
    {
        "content": "<p>and I have no infoview :-/</p>",
        "id": 259410382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635436711
    },
    {
        "content": "<p>Oh, I think there's some setup too</p>",
        "id": 259410431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436730
    },
    {
        "content": "<p>Add this file to your repo:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/.gitpod.yml\">https://github.com/leanprover-community/mathlib/blob/master/.gitpod.yml</a></p>",
        "id": 259410516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436763
    },
    {
        "content": "<p>Looks like that refers to stuff in mathlib's <code>.docker/</code> too.</p>",
        "id": 259410576,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635436790
    },
    {
        "content": "<p>Good point</p>",
        "id": 259410597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436801
    },
    {
        "content": "<p>Then you want</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">leanprovercommunity/mathlib:gitpod</span>\n\n<span class=\"nt\">vscode</span><span class=\"p\">:</span>\n  <span class=\"nt\">extensions</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">jroesch.lean</span>\n\n<span class=\"nt\">tasks</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">. /home/gitpod/.profile &amp;&amp; leanpkg configure &amp;&amp; leanproject get-cache --fallback=download-all</span>\n</code></pre></div>",
        "id": 259410723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436824
    },
    {
        "content": "<p>or maybe <code>get-mathlib-cache</code></p>",
        "id": 259410774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635436844
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/pull/3\">https://github.com/ImperialCollegeLondon/M40001_lean/pull/3</a></p>",
        "id": 259410867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436880
    },
    {
        "content": "<p>Oh, good point</p>",
        "id": 259410882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436886
    },
    {
        "content": "<p>Since this isn't mathlib</p>",
        "id": 259410890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436891
    },
    {
        "content": "<p>and this will be as slow as the web editor presumably, if it's getting all the oleans</p>",
        "id": 259410913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635436899
    },
    {
        "content": "<p>It'd be good if this info was somewhere on the community website. Maybe <a href=\"https://leanprover-community.github.io/ci.html\">here</a> though it's not about CI.</p>",
        "id": 259411008,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635436925
    },
    {
        "content": "<p>It downloads them in a VM somewhere that's quite speedy and probably has a faster connection to azure</p>",
        "id": 259411009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436925
    },
    {
        "content": "<p>(I think it can be quite slow when used for the very first time by anyone)</p>",
        "id": 259411170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635437017
    },
    {
        "content": "<p>and what happens when I do that trick where I can wipe a hard drive using a malicious Lean file? The idea is that it's just some VM presumably?</p>",
        "id": 259411449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635437119
    },
    {
        "content": "<p>I have an infoview! Thanks Eric and everyone! It was much slower than the web editor but I guess I don't have to now wait again when I switch sheets :D</p>",
        "id": 259411622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635437182
    },
    {
        "content": "<p>Weird, the mathlib one seemed to start faster than yours does</p>",
        "id": 259412062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635437338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/lean.20web.20editor.20slow/near/259410236\">said</a>:</p>\n<blockquote>\n<p>The mathlib maintainers and probably most of the active contributors could quite easily argue this second point</p>\n</blockquote>\n<p>Oh, you think I can?</p>",
        "id": 259412074,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635437345
    },
    {
        "content": "<p>Worth a try for sure</p>",
        "id": 259412100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635437357
    },
    {
        "content": "<p><a href=\"https://www.gitpod.io/docs/professional-open-source\">https://www.gitpod.io/docs/professional-open-source</a></p>",
        "id": 259412132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635437373
    },
    {
        "content": "<p>WIll give it a try then!</p>",
        "id": 259412142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635437377
    },
    {
        "content": "<p>In the last 6 months you're <a href=\"https://github.com/leanprover-community/mathlib/graphs/contributors?from=2021-04-28&amp;to=2021-10-28&amp;type=c\">the 3rd most active contributor</a> so I think it's fair to claim you're a \"core contributor\"</p>",
        "id": 259412336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635437463
    },
    {
        "content": "<p>Oh what. I knew I had done quite a lot but not <strong>that</strong> much!</p>",
        "id": 259412623,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635437588
    },
    {
        "content": "<p>Funnily, I am the third according to each metric.</p>",
        "id": 259412706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635437626
    },
    {
        "content": "<p>FWIW, I have been trying to recompile many versions of Lean for emscripten and x86_64 in Nix for caching purpose, I have been doing it using emscripten v2+ which is supposedly a lot faster in terms of result than emscripten v1 (which the current Lean uses in its CI), this might induce a nice performance boost. I have also some patchs to detect when oleans are not provided and logging it in the JavaScript console.</p>\n<p>It compiles quite well now: <a href=\"https://github.com/RaitoBezarius/nixexprs/actions/runs/1403562933\">https://github.com/RaitoBezarius/nixexprs/actions/runs/1403562933</a> (using patched versions of Lean 3 source, patched versions of some JS libs and a very recent emscripten from upstream which included a patch for Nix).</p>\n<p>Web editors can be built directly from Nix (external libraries like mathlib or whatever are more or less supported using FOD derivations).</p>",
        "id": 259790754,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1635691093
    },
    {
        "content": "<p>If you don't mind making a PR to <code>leanprover-community/lean</code> with your improvements I'd be happy to take a look!</p>",
        "id": 259790845,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635691262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/lean.20web.20editor.20slow/near/259790845\">said</a>:</p>\n<blockquote>\n<p>If you don't mind making a PR to <code>leanprover-community/lean</code> with your improvements I'd be happy to take a look!</p>\n</blockquote>\n<p>I'd be definitely happy to do it, most of the patch to Lean is there: <a href=\"https://github.com/RaitoBezarius/nixexprs/blob/master/pkgs/science/lean/0001-cmake-emscripten-update-build-flags-for-emscripten-2.patch\">https://github.com/RaitoBezarius/nixexprs/blob/master/pkgs/science/lean/0001-cmake-emscripten-update-build-flags-for-emscripten-2.patch</a></p>\n<p>But that's emscripten v2 specific I think and it will not behave well with the current CI, so my plan is to get something stable on my infrastructure, slowly collecting feedback by using it (I'd like to make it easy to deploy Lean games with recent Lean / recent mathlib versions) and then make the switch on the Lean community CI if that makes sense as <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> seems to be the code owner of that part.</p>",
        "id": 259790906,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1635691372
    },
    {
        "content": "<p>(I did some work on the emscripten CI as well, but I agree that Gabriel's feedback would be much appreciated!)</p>",
        "id": 259790928,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635691438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/lean.20web.20editor.20slow/near/259790928\">said</a>:</p>\n<blockquote>\n<p>(I did some work on the emscripten CI as well, but I agree that Gabriel's feedback would be much appreciated!)</p>\n</blockquote>\n<p>(You're right, I have been seeing your work too!)</p>",
        "id": 259790976,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1635691481
    },
    {
        "content": "<p>But I'd like to improve a bit the lean-client-js-browser lib so I will be in your hands regarding this matter :)</p>",
        "id": 259790991,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1635691509
    },
    {
        "content": "<p>Also, open question but is the model where we use a binary Lean on the backend and expose it over an API, and, we send sync commands and all through the network and the frontend is only Monaco + some thin client API layer, something that was considered? I guess it was excluded for security reasons, but if we could have more or less safe sandboxes (à la Gitpod in fact), that would be something people would use right?</p>",
        "id": 259791059,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1635691644
    },
    {
        "content": "<p>I think it would definitely be used since it would likely be much faster to load. Assuming it gets set up then some questions to consider are how hard is it to maintain, and how much does it cost?</p>",
        "id": 259791252,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635691985
    },
    {
        "content": "<p>yeah and also could we make the web editor work on mobile? is it possible</p>",
        "id": 259799230,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1635702220
    },
    {
        "content": "<p>I haven't thought about this in probably more than a year, but my recollection is that to get the web editor working on mobile, we would have to port the editor from Monaco to something like <a href=\"https://codemirror.net/6/\">Codemirror 6</a> since Monaco was (is?) not so great with touchscreens.</p>",
        "id": 259803011,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635707318
    },
    {
        "content": "<blockquote>\n<p>But that's emscripten v2 specific I think and it will not behave well with the current CI, so my plan is to get something stable on my infrastructure, slowly collecting feedback by using it (I'd like to make it easy to deploy Lean games with recent Lean / recent mathlib versions) and then make the switch on the Lean community CI if that makes sense [...]</p>\n</blockquote>\n<p>Feel free to submit PRs!  Changing the emscripten build to use nix is fine with me as well if you'd prefer that.</p>",
        "id": 259839855,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635757088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/lean.20web.20editor.20slow/near/259839855\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But that's emscripten v2 specific I think and it will not behave well with the current CI, so my plan is to get something stable on my infrastructure, slowly collecting feedback by using it (I'd like to make it easy to deploy Lean games with recent Lean / recent mathlib versions) and then make the switch on the Lean community CI if that makes sense [...]</p>\n</blockquote>\n<p>Feel free to submit PRs!  Changing the emscripten build to use nix is fine with me as well if you'd prefer that.</p>\n</blockquote>\n<p>I will definitely do so! Only some oleans not being picked up debugging is left, and I'm afraid this has to do with timestamps (as Nix enforces UNIX timestamp 0), once this gets solved: deploying lean games web bundles might be as simple as this: </p>\n<p><a href=\"https://github.com/RaitoBezarius/nixexprs/blob/master/pkgs/science/lean/lean-games/nng.nix\">https://github.com/RaitoBezarius/nixexprs/blob/master/pkgs/science/lean/lean-games/nng.nix</a></p>",
        "id": 259855893,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1635768548
    }
]