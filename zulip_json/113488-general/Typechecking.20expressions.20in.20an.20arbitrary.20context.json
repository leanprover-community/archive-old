[
    {
        "content": "<p>Hey! For a tactic I'm writing, it would be useful to typecheck/normalise expressions in some context that isn't the current local context. I don't see a way to do that with the Lean primitives; any ideas?</p>",
        "id": 196711177,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588808237
    },
    {
        "content": "<p>you are right that this is not easy. Are you looking for a fix or a workaround?</p>",
        "id": 196711291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588808345
    },
    {
        "content": "<p>The workaround is to clear everything, construct a pi type and then use intro</p>",
        "id": 196711325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588808385
    },
    {
        "content": "<p>I imagine the fix wouldn't be easy, so I'll try the workaround for now. Thanks a lot!</p>",
        "id": 196712035,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588809003
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span>\n  <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"o\">[],</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_mvar</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">my</span> <span class=\"n\">new</span> <span class=\"n\">ctx</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mk_meta_var</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">trace_state</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"n\">gs</span>\n</code></pre></div>\n\n\n<p>By the way, if you replace <code>gs</code> with <code>e :: gs</code> on the last line, lean segfaults</p>",
        "id": 196712251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588809189
    },
    {
        "content": "<p>Awesome, thanks! (And the segfault is why I'm not touching the C++.)</p>",
        "id": 196714511,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588811032
    },
    {
        "content": "<p>Is this one of the known crashes, or a new one?</p>",
        "id": 196714602,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588811067
    },
    {
        "content": "<p>I would guess a new one. Working with expressions in unrelated local contexts in the same tactic state appears to be poorly supported, and it's also not a common thing to do from lean</p>",
        "id": 196716857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588813332
    }
]