[
    {
        "content": "<p>I am starting to formalize some automata theory. First issue: I would like to use the alphabet (Sigma - how to use the greek letter?) as an implicit parameter. First I defined</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">dfa</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">Sigma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dfa</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">final</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Sigma</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">dfa</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">word</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">Sigma</span>\n<span class=\"kd\">def</span> <span class=\"n\">lang</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">word</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">δ_star</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">dfa</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A.Q</span> <span class=\"bp\">→</span> <span class=\"n\">word</span> <span class=\"bp\">→</span> <span class=\"n\">A.Q</span>\n<span class=\"bp\">|</span> <span class=\"n\">q</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">δ_star</span> <span class=\"o\">(</span><span class=\"n\">A.δ</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">w</span>\n<span class=\"kd\">end</span> <span class=\"n\">dfa</span>\n</code></pre></div>\n<p>and this works fine but then I though I better factor this out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">basics</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">Sigma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">word</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">Sigma</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">lang</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">word</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">basics</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">dfa</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">Sigma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dfa</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">final</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Sigma</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">dfa</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">δ_star</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">dfa</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A.Q</span> <span class=\"bp\">→</span> <span class=\"n\">word</span> <span class=\"bp\">→</span> <span class=\"n\">A.Q</span>\n<span class=\"bp\">|</span> <span class=\"n\">q</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">δ_star</span> <span class=\"o\">(</span><span class=\"n\">A.δ</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">dfa</span>\n</code></pre></div>\n<p>and I get an error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">δ_star</span> <span class=\"o\">(</span><span class=\"n\">A.δ</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">w</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">w</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">list</span> <span class=\"n\">Sigma</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">word</span>\n</code></pre></div>\n<p>So what is the recommended way to do this?</p>",
        "id": 275798767,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1647608548
    },
    {
        "content": "<p>Did you write something in that box? It's just white empty for me</p>",
        "id": 275798925,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647608637
    },
    {
        "content": "<p>ah now!</p>",
        "id": 275799005,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647608669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> I think <code>Σ</code> is claimed by the foundations of DTT...</p>",
        "id": 275799069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647608705
    },
    {
        "content": "<p>So you'll have to use some unicode variant of it.</p>",
        "id": 275799101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647608719
    },
    {
        "content": "<p>Or is that not what you are asking?</p>",
        "id": 275799117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647608734
    },
    {
        "content": "<p><code>Sigma</code> is already an implicit parameter, in your example</p>",
        "id": 275799170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647608759
    },
    {
        "content": "<p>I think using <code>parameters</code> with implicit variables doesn't make a lot of sense, better to just use <code>variables</code></p>",
        "id": 275799252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647608783
    },
    {
        "content": "<p>Parameters are local to sections. Once the section is closed, the argument starts behaving like a regular variable instead of a parameter.</p>",
        "id": 275799338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647608840
    },
    {
        "content": "<p>Ok, I guess I am more thinking of something like a module parameter.</p>",
        "id": 275799482,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1647608893
    },
    {
        "content": "<p>Right, it doesn't work like that</p>",
        "id": 275799516,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647608911
    },
    {
        "content": "<p>Is there such a thing? Sigma is used by all the definitions in a section.</p>",
        "id": 275799526,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1647608916
    },
    {
        "content": "<p>No, we just rely on unification where possible, or write the type explicitly where not (as here)</p>",
        "id": 275799718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647609012
    },
    {
        "content": "<p>I suppose you could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">outer_scope_container_module</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">Sigma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"c1\">-- even better, make it explicit: (Sigma : Type)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">subsection_one</span>\n\n<span class=\"n\">blabla</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subsection_one</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">hi_Im_section_two</span>\n\n<span class=\"n\">more</span> <span class=\"n\">blabla</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">hi_Im_section_two</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">outer_scope_container_module</span>\n</code></pre></div>",
        "id": 275799753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647609020
    },
    {
        "content": "<p>But frankly, I would just use <code>variables</code>. It's the right thing 99% of the time.</p>",
        "id": 275799826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647609038
    },
    {
        "content": "<p>well right, you can do <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> as well</p>",
        "id": 275799838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647609043
    },
    {
        "content": "<p>In that case though it might be better to make it explicit, so that from outside the outer section (or whole module) you can specify it</p>",
        "id": 275799917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647609088
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">jmc</span><span class=\"bp\">@</span><span class=\"n\">atarrimbo</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">math</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">$</span> <span class=\"n\">rg</span> <span class=\"kd\">variable</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">14190</span>\n<span class=\"n\">jmc</span><span class=\"bp\">@</span><span class=\"n\">atarrimbo</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">math</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">$</span> <span class=\"n\">rg</span> <span class=\"kd\">parameter</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">311</span>\n</code></pre></div>",
        "id": 275799923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647609090
    },
    {
        "content": "<p>It will be suppressed from what you write inside the section either way</p>",
        "id": 275799946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647609103
    },
    {
        "content": "<p>I'd say <code>parameters</code> is best used when you have a bunch of implementation details that you don't intend to expose that share the same context (e.g. a fixed alphabet). It's not a good approximation of Agda/ML modules. (Or really an approximation at all.)</p>",
        "id": 275800247,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647609265
    },
    {
        "content": "<p>Ok I can't use Sigma as an implicit variable, but making is explicit really gets very ugly as in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dfa_lang</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">dfa</span> <span class=\"n\">Sigma</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lang</span> <span class=\"n\">Sigma</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"o\">,</span> <span class=\"n\">A.final</span> <span class=\"o\">(</span><span class=\"n\">δ_star</span> <span class=\"n\">Sigma</span> <span class=\"n\">A</span> <span class=\"n\">A.init</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275800282,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1647609284
    },
    {
        "content": "<p>I am not sure wether nested sections would work because I may want to use basics from different places.</p>",
        "id": 275800413,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1647609358
    },
    {
        "content": "<p>One trick is to make up a type class with all the parameters you need. Here's an explanation I recently sent to someone:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_local_data</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">deq</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cgez</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">my_local_data</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">my_local_data</span>\n\n<span class=\"c1\">-- In this section, you can refer to a, b, c, d, deq, and cgez.</span>\n<span class=\"c1\">-- Lean needs to find an instance of `my_local_data`.</span>\n<span class=\"c1\">-- It just uses the anonymous version declared above.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">cgez</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">transitivity</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_le_mul_left</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Outside the section, all the theorems depend on the structure.</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">bar</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">baz</span>\n\n<span class=\"c1\">-- You can then state an explicit version manually.</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_great_theorem</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">deq</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cgez</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">baz</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">deq</span><span class=\"o\">,</span> <span class=\"n\">cgez</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 275800943,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1647609614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113488-general/topic/using.20section.20parameters/near/275800282\">said</a>:</p>\n<blockquote>\n<p>Ok I can't use Sigma as an implicit variable, but making is explicit really gets very ugly as in </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dfa_lang</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">dfa</span> <span class=\"n\">Sigma</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lang</span> <span class=\"n\">Sigma</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"o\">,</span> <span class=\"n\">A.final</span> <span class=\"o\">(</span><span class=\"n\">δ_star</span> <span class=\"n\">Sigma</span> <span class=\"n\">A</span> <span class=\"n\">A.init</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I would make <code>Sigma</code> explicit in types and implicit in functions, as if you were programming in Haskell. You can do this by declaring <code>variables (Sigma : Type)</code> at first and then redeclaring <code>variables {Sigma}</code> (without a type) later to switch the implicitness as needed.</p>",
        "id": 275801073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647609706
    },
    {
        "content": "<p>Of course it would look a bit nicer if you could use a unicode Sigma as well</p>",
        "id": 275801728,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647610041
    },
    {
        "content": "<p>There's always French quotes for escaping the Sigma...</p>",
        "id": 275870781,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647642887
    }
]