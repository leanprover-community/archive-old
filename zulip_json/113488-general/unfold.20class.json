[
    {
        "content": "<p>hello everyone,<br>\nlemma Q2b : ¬is_total (set ℤ) (λ A B, A ⊆ B)<br>\nhow to unfold is_total?<br>\nthank you in advance!</p>",
        "id": 216839052,
        "sender_full_name": "blackxv",
        "timestamp": 1605511487
    },
    {
        "content": "<p>Does <code>unfold is_total</code> (in tactic mode) work?</p>",
        "id": 216839184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605511658
    },
    {
        "content": "<p><code>is_total</code> is a class, but you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Q2b</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">is_total</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216839242,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605511719
    },
    {
        "content": "<p>If not then try <code>cases h</code> if <code>h : is_total ...</code></p>",
        "id": 216839243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605511720
    },
    {
        "content": "<p>cases h works, thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Q2b</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">is_total</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Are there  some addional plugs to install in order to show lean code in a special style here?</p>\n<p>ok yeah, ```works.</p>",
        "id": 216839355,
        "sender_full_name": "blackxv",
        "timestamp": 1605511885
    },
    {
        "content": "<p>Code formatting is explained here: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216840753,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1605513277
    }
]