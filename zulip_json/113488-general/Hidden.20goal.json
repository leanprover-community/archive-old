[
    {
        "content": "<p>Just discovered this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">},</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">},</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₂</span> <span class=\"n\">at</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_div.div</span> <span class=\"n\">h₄</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span> <span class=\"n\">at</span> <span class=\"n\">h₄</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>After <code>replace {...}</code> only 1 goal is displayed. Then <code>rw</code> creates one extra goal, which is 2 goals in total and <code>;assumption</code> should close both goals. However, it seems like the second goal remains hidden and it needs to be closed with additional <code>assumption</code>. Is this a bug?</p>",
        "id": 279173185,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650122901
    },
    {
        "content": "<p>I suspect that this is expected behaviour in the sense that one of the new goals doesn't count as a goal produced by this tactic as understood by the semicolons combinator</p>",
        "id": 279173979,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650124210
    },
    {
        "content": "<p>Everything after <code>replace {...}</code> is a distraction. We can see that before <code>replace</code> there are 2 goals. Tactic <code>replace</code> creates additional goal, so 3 goals in total. Then, after <code>{...}</code> only 1 goal remains. That doesn't make sense to me.</p>",
        "id": 279174310,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650124682
    },
    {
        "content": "<p>Try adding some <code>skip</code>s</p>",
        "id": 279174559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650124942
    },
    {
        "content": "<p><code>;</code> makes the goal view behave strangely at the previous comma</p>",
        "id": 279174568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650124954
    }
]