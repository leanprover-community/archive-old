[
    {
        "content": "<p>what's the impact of the new has_pow typeclass being an out_param?</p>",
        "id": 124446352,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522480816
    },
    {
        "content": "<p>I'm not sure about this change. Sebastian suggested it and it was merged before we had much discussion about it, but I don't know if it's reasonable. <code>mathlib</code> already had and discarded an earlier typeclass proposal. In particular, the reals are going to have at least three power operations on them, and it's not clear to me how to disambiguate the typeclass search</p>",
        "id": 124446978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522482558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Would that be <code>monoid_pow</code>/<code>group_pow</code>/<code>real_pow</code> (or whatever class that last one is defined on)? Since each one is strictly more general in its out_param type than the ones before it, would it make sense to give them increasing instance priorities?</p>",
        "id": 124449165,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522488000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  I've started working on fixing mathlib after the has_pow change. Here's an example of a problem that arises:</p>\n<div class=\"codehilite\"><pre><span></span>variables {α : Type*} [group α]\ndef gpow : α → ℤ → α := sorry\ninstance group.has_pow : has_pow α ℤ := ⟨gpow⟩\n\nexample (a : α) : a ^ 0 = 1 := sorry -- failed to synth ⊢ has_pow α ℕ\nexample (a : α) : a ^ (0:ℕ) = 1 := sorry -- ok, coerces\nexample (a : α) : a ^ (0:ℤ) = 1 := sorry -- ok\n</pre></div>",
        "id": 124509461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522636438
    },
    {
        "content": "<p>Do out_params not propagate type information to the arguments for the purpose of avoiding the nat default for number literals?</p>",
        "id": 124509510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522636526
    },
    {
        "content": "<p>Okay, this update isn't going to happen today, I need to sleep. The change is generally making me put in more type ascriptions than before, but it wasn't disambiguating anything before so maybe that's reasonable. It's not going to be fun explaining why this happens though</p>",
        "id": 124520043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522661293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Hmm, this is certainly unexpected</p>",
        "id": 124520306,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522661918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Okay, it's unfortunate scheduling between the class inference and the coercion, which I don't think is a perfectly solvable problem in general. I don't know if we can do a better job for this common case, hmm.</p>",
        "id": 124546919,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522705101
    },
    {
        "content": "<p>Would you suggest to just remove the out_param (for now)?</p>",
        "id": 124547413,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522705905
    },
    {
        "content": "<p>My gut says that will perform better on the whole. We will have to give the type of things in that slot if they aren't derivable normally, but this will give more freedom to have multiple possibly incompatible power functions which are selected by type. I'll finish updating mathlib wrt the current version, and then if you change it to remove the out_param and I fix mathlib again we will have a basis for comparison.</p>",
        "id": 124550421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522710990
    },
    {
        "content": "<p>Okay, I'll remove it</p>",
        "id": 124567281,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522746382
    }
]