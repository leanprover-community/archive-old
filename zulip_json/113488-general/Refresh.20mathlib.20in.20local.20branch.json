[
    {
        "content": "<p>What is the preferred workflow for the following scenario? </p>\n<p>I have a branch <code>foo</code> of mathlib on my local machine created with <code>leanproject get -b mathlib:foo</code> that has a few commits, e.g. github would say <code>This branch is n commit ahead, m commits behind master.</code> where both <code>n</code> and <code>m</code> are strictly positive integers. I would like to use some newly added code from the master branch in mathlib. I assume from the point of view of <code>git</code> this means I should merge <code>master</code> into <code>foo</code>. Is there some way to use <code>leanproject</code> to get the fresh olean files as well? Is there some <code>leanproject</code> command/flag that will merge <code>master -&gt; foo</code> and get the oleans as well?</p>",
        "id": 212683837,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602161456
    },
    {
        "content": "<p>I think the current state of the art is:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git merge origin/master\ngit push\nsleep 2h\nleanproject up\n</code></pre></div>",
        "id": 212684092,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602161571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Refresh.20mathlib.20in.20local.20branch/near/212684092\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>sleep 2h\n</code></pre></div>\n\n</blockquote>\n<p>really?</p>",
        "id": 212684198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602161638
    },
    {
        "content": "<p>I usually checkout master, get-cache, return to my branch, then merge</p>",
        "id": 212684356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602161718
    },
    {
        "content": "<p>Yes, this waits for the github actions to finish and upload the oleans.  At the moment this takes a bit over an hour.</p>",
        "id": 212684366,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602161720
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git checkout master\nleanproject up\ngit checkout -\ngit merge master\n</code></pre></div>",
        "id": 212684430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602161754
    },
    {
        "content": "<p>It would be great if <code>get-cache</code> let me pass a commit-ish to avoid the pointless checkout</p>",
        "id": 212684443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602161760
    },
    {
        "content": "<p>Since AFAIK get-cache doesn't care about my local lean files anyway, all it does is ask git for the head commit</p>",
        "id": 212684531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602161792
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/issues/77\">mathlib-tools#77</a></p>",
        "id": 212684535,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602161794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> will <code>git checkout -</code> return to the original non-master branch <code>foo</code> or should I actually use <code>git checkout foo</code>?</p>",
        "id": 212684610,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602161843
    },
    {
        "content": "<p>As an extension, it would be cool if leanproject would automatically find all built parent commits of my branch and let me pick between their oleans</p>",
        "id": 212684660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602161870
    },
    {
        "content": "<p>I think Patrick's been a bit busy recently, but PRs are definitely welcome.</p>",
        "id": 212685808,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602162387
    },
    {
        "content": "<p>So I tried <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's suggestion, and <code>leanproject up</code> gives me the following error:</p>\n<p><code>Failed to parse line: '  git config pull.rebase false  # merge (the default strategy)'</code></p>",
        "id": 212685886,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602162445
    },
    {
        "content": "<p>Okay,</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git checkout master\ngit pull\nleanproject get-cache\ngit checkout foo\ngit merge master\n</code></pre></div>\n\n<p>seems to do the trick for me.</p>",
        "id": 212686299,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602162652
    },
    {
        "content": "<p>Might have a go at a PR once my open one (<a href=\"https://github.com/leanprover-community/mathlib-tools/pull/79\">https://github.com/leanprover-community/mathlib-tools/pull/79</a>) goes through, since that will make development easier for me</p>",
        "id": 212686595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602162753
    },
    {
        "content": "<p>The last line from <code>leanproject -h</code> is this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">upgrade</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span>    <span class=\"n\">Upgrade</span> <span class=\"n\">mathlib</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">dependency</span> <span class=\"n\">or</span> <span class=\"n\">as</span> <span class=\"n\">the</span> <span class=\"n\">main...</span>\n</code></pre></div>\n\n<p>What does <code>as the main...</code> mean?</p>",
        "id": 212686951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602162867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <code>git checkout -</code> changes to the previous branch (like <code>cd -</code>)</p>",
        "id": 212687378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602163021
    },
    {
        "content": "<p>I was going to post this in <code>new-members</code> but since this thread appears similar, at least to my git-newbie eyes, I thought of posting here!</p>\n<p>I just pulled mathlib to my branch and when I ran <code>leanproject get-cache</code> and obtained the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"kn\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">remote</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage.azureedge.net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"n\">e7e77761f15a95cd3569af1e76f0e56592851d4.tar.xz</span> <span class=\"n\">to</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">damiano</span><span class=\"bp\">/.</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"n\">e7e77761f15a95cd3569af1e76f0e56592851d4.tar.xz</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage.azureedge.net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"n\">e7e77761f15a95cd3569af1e76f0e56592851d4.tar.gz</span> <span class=\"n\">to</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">damiano</span><span class=\"bp\">/.</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"n\">e7e77761f15a95cd3569af1e76f0e56592851d4.tar.gz</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage.azureedge.net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"n\">e7e77761f15a95cd3569af1e76f0e56592851d4.tar.bz2</span> <span class=\"n\">to</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">damiano</span><span class=\"bp\">/.</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"n\">e7e77761f15a95cd3569af1e76f0e56592851d4.tar.bz2</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">GitHub</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">github</span> <span class=\"kn\">section</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"bp\">'</span><span class=\"n\">git</span> <span class=\"n\">config'</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">will</span> <span class=\"n\">use</span> <span class=\"n\">GitHub</span> <span class=\"k\">with</span> <span class=\"n\">no</span> <span class=\"n\">authentication</span>\n<span class=\"mi\">403</span> <span class=\"o\">{</span><span class=\"s2\">\"message\"</span><span class=\"o\">:</span> <span class=\"s2\">\"API rate limit exceeded for 45.86.225.93. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\"</span><span class=\"o\">,</span> <span class=\"s2\">\"documentation_url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"https://developer.github.com/v3/#rate-limiting\"</span><span class=\"o\">}</span>\n</code></pre></div>\n\n<p>Did I do something that I was not supposed to do?  How do I get the cache?</p>\n<p>Thank you!</p>",
        "id": 212689938,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602164094
    },
    {
        "content": "<p>The commit 6e7e776 <a href=\"https://github.com/leanprover-community/mathlib/search?q=6e7e77761f15a\">doesn't exist on the mathlib repo</a>, so it hasn't been built by CI. Maybe you need to push your branch?</p>",
        "id": 212690221,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602164215
    },
    {
        "content": "<p>What's the trailing error message about there? Are the oleans on both azure and github?</p>",
        "id": 212690274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602164249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Refresh.20mathlib.20in.20local.20branch/near/212690221\">said</a>:</p>\n<blockquote>\n<p>The commit 6e7e776 <a href=\"https://github.com/leanprover-community/mathlib/search?q=6e7e77761f15a\">doesn't exist on the mathlib repo</a>, so it hasn't been built by CI. Maybe you need to push your branch?</p>\n</blockquote>\n<p>I wanted to pull to my local branch the changes in <a href=\"https://github.com/leanprover-community/mathlib/issues/4527\">#4527</a>.  I am starting to realize that maybe I cannot do this, unless the PR has been merged?</p>",
        "id": 212690448,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602164313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Refresh.20mathlib.20in.20local.20branch/near/212690274\">said</a>:</p>\n<blockquote>\n<p>What's the trailing error message about there? Are the oleans on both azure and github?</p>\n</blockquote>\n<p>A long, long time ago we used to publish oleans as github releases</p>",
        "id": 212690494,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602164335
    },
    {
        "content": "<p>Is that code still there so that users can get oleans for those old releases?</p>",
        "id": 212690568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602164365
    },
    {
        "content": "<p>I think Rob copied all those oleans to azure, so we could probably remove that code.</p>",
        "id": 212690714,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602164422
    },
    {
        "content": "<p>Ah, there's already a PR: <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/76\">https://github.com/leanprover-community/mathlib-tools/pull/76</a></p>",
        "id": 212690999,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602164531
    },
    {
        "content": "<p>[I am quite lost: is the discussion about trailing error messages, azure and github relating to <code>API rate limit exceeded</code>?  Sorry if it isn't, but I am really confused...]</p>",
        "id": 212691125,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602164577
    },
    {
        "content": "<p>Yes - I asked that because the reason you had to ask your first question is because the error message doesn't say \"This isn't (yet) in the cache\", despite that being what's happening.</p>",
        "id": 212691369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602164672
    },
    {
        "content": "<p>Ah, ok, thanks for the explanation!!</p>",
        "id": 212691400,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602164690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Refresh.20mathlib.20in.20local.20branch/near/212690448\">said</a>:</p>\n<blockquote>\n<p>I wanted to pull to my local branch the changes in <a href=\"https://github.com/leanprover-community/mathlib/issues/4527\">#4527</a>.  I am starting to realize that maybe I cannot do this, unless the PR has been merged?</p>\n</blockquote>\n<p>You can pull those changes with <code>git fetch origin; git merge origin/erase_lead2</code> (assuming the community mathlib repo is called <code>origin</code> in your local repo). However, there won't be oleans for the resulting merge commit unless you either run <code>leanproject build</code> or push a new branch to the mathlib repo and then wait for CI to finish.</p>",
        "id": 212691427,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602164703
    },
    {
        "content": "<p>Ok, thanks for the explanation <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> !</p>",
        "id": 212691531,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602164754
    },
    {
        "content": "<p>By the way, for getting more comfortable with git, I recommend having a look at chapters 1-3 (and maybe 7) of <a href=\"https://git-scm.com/book/en/v2\">https://git-scm.com/book/en/v2</a>. At least for me it really helped me build up a mental model of what I was doing with all these strange commands.</p>",
        "id": 212692145,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602165028
    },
    {
        "content": "<p>Thank you for the reference manual!  I will look at it, since I feel that the discussion here should help me, but every time I pull or push something, I then have to go to my own private folder, well away from Git's reach to recover a file that I lost...</p>",
        "id": 212692518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602165198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Do you know \"You might have invented spectral sequences\"?</p>\n<p>Here is \"You might have invented git\": <a href=\"https://news.ycombinator.com/item?id=1342902\">https://news.ycombinator.com/item?id=1342902</a></p>",
        "id": 212693486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602165643
    },
    {
        "content": "<p>I will look at this as well: I do feel that I have no idea what is happening every time I type <code>git ...</code>!</p>",
        "id": 212693613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602165703
    },
    {
        "content": "<p>I found that providing coworkers with a git gui was a great way to have them go from \"I type magic on the command line\" to \"I understand how git works now\"</p>",
        "id": 212694173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602165914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  You should also remember that</p>\n<blockquote>\n<p>Git gets easier once you understand branches are homeomorphic endofunctors mapping submanifolds of a Hilbert space</p>\n</blockquote>",
        "id": 212695623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602166459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Refresh.20mathlib.20in.20local.20branch/near/212695623\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span>  You should also remember that</p>\n<blockquote>\n<p>Git gets easier once you understand branches are homeomorphic endofunctors mapping submanifolds of a Hilbert space</p>\n</blockquote>\n</blockquote>\n<p>In my current state, I am not even completely sure whether this is a joke or not... Ahaha</p>",
        "id": 212695799,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602166533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Don't worry, it's a joke</p>",
        "id": 212699447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602167991
    },
    {
        "content": "<p>That's a relief!  I was hoping that this was the case, but did not have the confidence to fully believe it!</p>",
        "id": 212699576,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602168029
    },
    {
        "content": "<p>Was it inspired by something like <a href=\"https://i.imgur.com/bzfQoQa.jpg\">this Haskell joke</a>?</p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/bzfQoQa.jpg\" title=\"this Haskell joke\"><img src=\"https://i.imgur.com/bzfQoQa.jpg\"></a></div>",
        "id": 212753657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602193920
    },
    {
        "content": "<p>Related blog post: <a href=\"https://web.archive.org/web/20101221025743/http://tartley.com/?p=1267\">https://web.archive.org/web/20101221025743/http://tartley.com/?p=1267</a></p>",
        "id": 212754146,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602194250
    },
    {
        "content": "<p>I'm surprised this blog post didn't make some sort of GIT pun (as in <a href=\"https://en.wikipedia.org/wiki/Geometric_invariant_theory\">https://en.wikipedia.org/wiki/Geometric_invariant_theory</a> )</p>",
        "id": 212755555,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602195125
    }
]