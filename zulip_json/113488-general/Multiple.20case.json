[
    {
        "content": "<p>I have a custom tactic named <code>muti_case</code> that I find myself using a lot. Today I just found out about <a href=\"https://github.com/leanprover-community/lean/commit/042d7e592f6e9356c3324beca1908419a423966e\">https://github.com/leanprover-community/lean/commit/042d7e592f6e9356c3324beca1908419a423966e</a> by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> which seems to be doing the same thing. I would love if this is a part of the core tactic. What's the status of this feature?</p>\n<p>Moreover, I think it would be useful to allow <code>*</code> as a case name too. It would for example allow us to write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"n\">b</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224158120,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1611740398
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/lean/issues/508\">leanprover-community/lean#508</a> for the PR)</p>",
        "id": 224158244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611740464
    },
    {
        "content": "<p>There's some existing discussion about this <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Allowing.20focussing.20on.20multiple.20goals.20in.20.60case.60/near/220358809\">in #metaprogramming / tactics</a></p>",
        "id": 224158444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611740589
    },
    {
        "content": "<p>the pr link is incorrect</p>",
        "id": 224158676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611740753
    },
    {
        "content": "<p>What's the actual tactic being proposed here?</p>",
        "id": 224158733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611740776
    },
    {
        "content": "<p>Improvements to <code>case</code></p>",
        "id": 224158743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611740788
    },
    {
        "content": "<p>I mean what does <code>multi_case</code> do</p>",
        "id": 224158760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611740801
    },
    {
        "content": "<p>Runs the tactic block on all matching cases</p>",
        "id": 224158898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611740882
    },
    {
        "content": "<p>Fixed the link, and attempted to guess what the broken lines of the PR were meant to me - I got this working locally in a now discarded buffer, then must have failed at copying things piecewise into lean core</p>",
        "id": 224159054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611741003
    },
    {
        "content": "<p>Here's my current definition of <code>muti_case</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[interactive]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">multi_case</span>\n  <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">list_of</span> <span class=\"n\">ident_</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident_</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">itactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">ns.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">tactic.interactive.case</span> <span class=\"n\">ns</span> <span class=\"n\">ids</span> <span class=\"n\">tac</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Pretty much, it allows you to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">multi_case</span> <span class=\"o\">[</span><span class=\"n\">case1a</span> <span class=\"n\">case1b</span><span class=\"o\">,</span> <span class=\"n\">case2a</span> <span class=\"n\">case2b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">{</span>\n  <span class=\"n\">tacs</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Instead of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">case1a</span> <span class=\"n\">case1b</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">{</span>\n  <span class=\"n\">tacs</span>\n<span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"n\">case2a</span> <span class=\"n\">case2b</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">{</span>\n  <span class=\"n\">tacs</span>\n<span class=\"o\">},</span>\n</code></pre></div>\n<p>The reason why I don't use <code>any_goals</code> or <code>any_goals</code> + <code>solve1</code> is that it often causes deterministic timeout for me. </p>\n<p>The PR by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> is better because it doesn't force variable naming in each subcase to be the same.</p>",
        "id": 224159194,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1611741097
    },
    {
        "content": "<p>Another difference is that in my version, within the <code>{}</code> you can see all the matching goals, rather than just the first one</p>",
        "id": 224159295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611741155
    },
    {
        "content": "<p>Ooh, that's very nice :)</p>",
        "id": 224159319,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1611741178
    },
    {
        "content": "<p>So your</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">multi_case</span> <span class=\"o\">[</span><span class=\"n\">case1a</span> <span class=\"n\">case1b</span><span class=\"o\">,</span> <span class=\"n\">case2a</span> <span class=\"n\">case2b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">{</span>\n  <span class=\"n\">tacs</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>is the linked PR's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"n\">case1a</span> <span class=\"n\">case1b</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">case2a</span> <span class=\"n\">case2b</span><span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">tacs</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 224159358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611741214
    },
    {
        "content": "<p>If you can see all the matching goals, then does that mean there is an additional <code>all_goals</code> wrapper before you can do things?</p>",
        "id": 224159522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611741322
    },
    {
        "content": "<p>oh you said this</p>",
        "id": 224159532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611741332
    },
    {
        "content": "<p>Ah, I seem to misunderstand your PR then. I thought it's exactly the same as mine, but apparently that's not the case.</p>\n<p>It's still a good improvement, IMO, and would be a better building block for my custom tactic.</p>",
        "id": 224159562,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1611741355
    },
    {
        "content": "<p>The motivation for my design was:</p>\n<ul>\n<li>To make the goal view helpful</li>\n<li>To make something like this work:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"n\">case1a</span> <span class=\"n\">case1b</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">case2a</span> <span class=\"n\">case2b</span><span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some_lemma</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">some_closing_lemma_1</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">some_closing_lemma_2</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 224159669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611741429
    },
    {
        "content": "<p>I think that it makes sense to bind the variables differently for different cases, as in the PR, but the names should be \"approximately the same\" and the tactic script run in each case should be the same, suggesting that the <code>all_goals</code> wrapper be built in</p>",
        "id": 224159694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611741450
    },
    {
        "content": "<p>If the all goals wrapper is built in, there's no nice way to say \"the proof for these two cases is almost but not quite identical\".</p>",
        "id": 224159765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611741490
    },
    {
        "content": "<p>I mean sure, you can use <code>&lt;|&gt;</code>, but that obfuscates which goal you're actually trying to work on</p>",
        "id": 224159773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611741503
    },
    {
        "content": "<p>I think of this multi-case more like a match branch with an or pattern</p>",
        "id": 224159803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611741538
    },
    {
        "content": "<p>I had a nasty time refactoring proofs a while back that used something like <code>simp [foo] &lt;|&gt; simp [bar]</code>, as I removed a simp lemma the first branch was relying on, but all I got was errors about the second branch not matching</p>",
        "id": 224159832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611741563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Multiple.20case/near/224159803\">said</a>:</p>\n<blockquote>\n<p>I think of this multi-case more like a match branch with an or pattern</p>\n</blockquote>\n<p>match branches with or are not a thing that exists today, right?</p>",
        "id": 224159948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611741615
    },
    {
        "content": "<p>They are in some languages, e,g:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Num</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Neg</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Pos</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Num</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"nc\">Num</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Neg</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pos</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224160261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611741765
    },
    {
        "content": "<p>You can also kind of do or-patterns in lean using wildcard matches</p>",
        "id": 224160421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611741851
    },
    {
        "content": "<p>Speaking of this, I have another tactic named <code>soft_case</code>. It's exactly like the current <code>case</code>, except that it is not wrapped with <code>solve1</code>. This allows us to dive into a case, <code>cases</code> on a variable in that case, go back up, and then <code>all_goals</code> at the parent level. E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">soft_case</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Would this be something useful to people?</p>",
        "id": 224183845,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1611755939
    },
    {
        "content": "<p><code>focus_case</code> is probably a better name, for consistency with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#focus\">tactic#focus</a></p>",
        "id": 224184424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611756179
    },
    {
        "content": "<p>The question is, what semantics would <code>focus_case</code> with multiple cases have?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- goals: A, B, C, D</span>\n<span class=\"n\">focus_case</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">},</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">},</span>\n    <span class=\"c1\">-- goals: A1, A2, C1, C2</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">-- what should the goal list be here?</span>\n</code></pre></div>\n<p>Ideally you'd reconstruct <code>A1, A2, B, C1, C2, D</code>, but I think the information to recover that simply doesn't exist</p>",
        "id": 224184971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611756409
    },
    {
        "content": "<p>I was also going to suggest something like <code>soft_case</code> to address <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's comment about cases that are almost but not quite the same. I think it could be implemented with an option on <code>case</code></p>",
        "id": 224185895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611756815
    },
    {
        "content": "<p>I also have a slight preference for <code>focus_case</code> being an option on <code>case</code> instead of a separate tactic, although I don't have a good suggestion for what sigil is appropriate. <code>case...</code>?</p>",
        "id": 224186308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611756975
    },
    {
        "content": "<p>Also, what would be the semantics of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">focus_case</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"o\">{</span>\n   <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">focus_case</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"o\">{</span>\n   <span class=\"c1\">-- wait, we already intro'd the variable as `n`?</span>\n<span class=\"o\">},</span>\n</code></pre></div>",
        "id": 224186408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757030
    },
    {
        "content": "<p>Renaming all the <code>n</code>s to <code>o</code>s would be fine, but it's not obvious to me that that would just work out of the box</p>",
        "id": 224186542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757087
    },
    {
        "content": "<p>If <code>focus_case</code> works as I suggested, where the <code>focus</code> part is built in, then in your example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- goals: A, B, C, D</span>\n<span class=\"n\">focus_case</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goals: A -&gt; A1, A2, also C -&gt; C1, C2</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">-- goals: A1, A2, B, C1, C2, D</span>\n</code></pre></div>\n<p>is doable</p>",
        "id": 224186575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757103
    },
    {
        "content": "<p>How does focus_case know where to reinsert the new goals into the goal list?</p>",
        "id": 224186628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757126
    },
    {
        "content": "<p>it is the one that deconstructed the list</p>",
        "id": 224186648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757138
    },
    {
        "content": "<p>That would require some way to inspect the A1 goal and ask \"did you come from A or C\", right?</p>",
        "id": 224186669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757150
    },
    {
        "content": "<p>No, it is essentially <code>list.bind</code></p>",
        "id": 224186698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757164
    },
    {
        "content": "<p>where goals that aren't being focused are just inserted as is into the new goal list</p>",
        "id": 224186748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757192
    },
    {
        "content": "<p>Oh, I see your point - you're ok because your proposed <code>focus_case</code> executes the tactic block on each goal</p>",
        "id": 224186751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757193
    },
    {
        "content": "<p>As opposed to executing it once against all goals</p>",
        "id": 224186815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757207
    },
    {
        "content": "<p>right, that way of working is annoying anyway; most tactics want to work on a single goal</p>",
        "id": 224186857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757236
    },
    {
        "content": "<p>especially with <code>focus_case</code> you can just chain several of them if you want to do different things in each case</p>",
        "id": 224186927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757267
    },
    {
        "content": "<p>The semantics of the double <code>focus_case</code> is the same as <code>case</code>: the variables get renamed on entry to the block</p>",
        "id": 224187092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757326
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- a_1 : nat</span>\n<span class=\"n\">focus_case</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"o\">{</span>\n   <span class=\"c1\">-- n : nat</span>\n   <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"c1\">-- n : nat, m := n</span>\n<span class=\"o\">},</span>\n<span class=\"n\">focus_case</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"o\">{</span>\n   <span class=\"c1\">-- o : nat, m := o</span>\n<span class=\"o\">},</span>\n</code></pre></div>",
        "id": 224187210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757393
    },
    {
        "content": "<p>So, my current code is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n   <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">foo</span> <span class=\"o\">},</span>\n   <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">},</span>\n   <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">bar0</span> <span class=\"o\">},</span>\n   <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">bar1</span> <span class=\"o\">},</span>\n   <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">baz</span> <span class=\"o\">},</span> <span class=\"c1\">--done</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I guess you're proposing I instead write that as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">focus_case</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">foo</span> <span class=\"o\">},</span>\n<span class=\"n\">focus_case</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">},</span>\n<span class=\"n\">focus_case</span> <span class=\"n\">A</span> <span class=\"o\">{</span> <span class=\"n\">bar0</span> <span class=\"o\">},</span>\n<span class=\"n\">focus_case</span> <span class=\"n\">B</span> <span class=\"o\">{</span> <span class=\"n\">bar1</span> <span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">baz</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 224187339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757441
    },
    {
        "content": "<p>The nice bit about my structure is that I can inspect the proof state without seeing goals C and D I don't care about</p>",
        "id": 224187467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757481
    },
    {
        "content": "<p>Whereas in your proposal, I either only see the proof state for <code>A</code>, or I see it for all goals</p>",
        "id": 224187492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757496
    },
    {
        "content": "<p>I think that should be fixed generally though</p>",
        "id": 224187577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757537
    },
    {
        "content": "<p>You'd consider that a flaw in the infoview?</p>",
        "id": 224187614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757557
    },
    {
        "content": "<p>that's a server goal reporting issue</p>",
        "id": 224187626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757560
    },
    {
        "content": "<p>if an interactive tactic block is called multiple times the goal view should show all of the incoming states</p>",
        "id": 224187719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757590
    },
    {
        "content": "<p>There's still a structuring argument that I'd like to wrap the A B part of the proof in braces to separate it from the C D part</p>",
        "id": 224187835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757652
    },
    {
        "content": "<p>Maybe there are other ways to achieve that</p>",
        "id": 224187949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757689
    },
    {
        "content": "<p>maybe that needs its own tactic</p>",
        "id": 224187961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757693
    },
    {
        "content": "<p><code>subcase</code>?</p>",
        "id": 224187974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757698
    },
    {
        "content": "<p><code>case_group</code>?</p>",
        "id": 224188083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757743
    },
    {
        "content": "<p><code>cases</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 224188112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757758
    },
    {
        "content": "<p><code>subcases</code> / <code>case_group</code> would have to be a <code>solve</code>-style tactic though, unless you're ok with it inserting remaining goals in a random place</p>",
        "id": 224188419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611757867
    },
    {
        "content": "<p>probably it would put all the new goals at the front</p>",
        "id": 224188516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757906
    },
    {
        "content": "<p>in particular, that means that <code>case_group [B, C] {}</code> can be used to reorder <code>A, B, C, D</code> to <code>B, C, A, D</code></p>",
        "id": 224188728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611757977
    },
    {
        "content": "<p>I thought about this a bit for <code>work_on_goals</code>, where it was particularly nasty because if you want to work on goals <code>0</code> and <code>2</code>, then <code>1</code> and <code>3</code>, you have to use <code>work_on_goals [0, 2] { }, work_on_goals [2, 3] { }</code> as after the first <code>work_on_goals</code> the goals have re-ordered!</p>",
        "id": 224189082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611758107
    },
    {
        "content": "<p>But I guess for named goals that problem goes away</p>",
        "id": 224189113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611758115
    }
]