[
    {
        "content": "<p>When I was building the complexes, I think I tried to make them a field all in one go, and there were problems which perhaps were something to do with neg or sub. <span class=\"user-mention\" data-user-email=\"di.gama@gmail.com\" data-user-id=\"110049\">@Mario Carneiro</span> showed me how to fix these problems by showing first that the complexes were an additive group and then only afterwards that they were a field. But I cannot remember what the problems were. Can anyone here guess? Was it something to do with defining sub or neg myself vs letting the system somehow do it for me? I now cannot really imagine how the system would do it for me.</p>",
        "id": 123459639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520538540
    },
    {
        "content": "<p>How am I supposed to finish of this triviality?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">cat</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span>\n<span class=\"err\">‚ä¢</span> <span class=\"o\">{</span><span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">Hom</span> <span class=\"n\">cat</span><span class=\"o\">,</span>\n     <span class=\"n\">identity</span> <span class=\"o\">:=</span> <span class=\"mi\">ùüô</span><span class=\"o\">,</span>\n     <span class=\"n\">compose</span> <span class=\"o\">:=</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"n\">cat</span><span class=\"o\">,</span>\n     <span class=\"n\">left_identity</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n     <span class=\"n\">right_identity</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n     <span class=\"n\">associativity</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"n\">cat</span>\n</pre></div>",
        "id": 130764601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533196699
    },
    {
        "content": "<p>It is just asking me whether sum structure <code>cat</code> is equal to the structure built from the fields of <code>cat</code>.</p>",
        "id": 130764615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533196728
    },
    {
        "content": "<p><code>congr</code> or <code>ext</code></p>",
        "id": 130764618,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533196737
    },
    {
        "content": "<p>To which I reply: \"Yes! Of course it is.\"</p>",
        "id": 130764621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533196742
    },
    {
        "content": "<p>oh no</p>",
        "id": 130764627,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533196747
    },
    {
        "content": "<p><code>cases cat</code></p>",
        "id": 130764628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533196749
    },
    {
        "content": "<p>then <code>dsimp</code></p>",
        "id": 130764629,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533196760
    },
    {
        "content": "<p>aha</p>",
        "id": 130764631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533196767
    },
    {
        "content": "<p>I'm not sure because this is not an MWE</p>",
        "id": 130764633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533196769
    },
    {
        "content": "<p><code>congr</code> failed, and <code>ext</code> did nothing.</p>",
        "id": 130764636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533196783
    },
    {
        "content": "<p>if <code>ext</code> did nothing, then it is because you don't have an extensionality lemma, i.e. the interface</p>",
        "id": 130764680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533196808
    },
    {
        "content": "<p><code>@[extensionality] lemma category.ext : ...</code></p>",
        "id": 130764686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533196824
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">op_op&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">opposites</span><span class=\"bp\">.</span><span class=\"n\">Opposite</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposites</span><span class=\"bp\">.</span><span class=\"n\">Opposite</span> <span class=\"n\">C</span> <span class=\"n\">cat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cat</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">cat</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">opposites</span><span class=\"bp\">.</span><span class=\"n\">Opposite</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span>\n<span class=\"kn\">end</span> <span class=\"c1\">-- We win!</span>\n</pre></div>",
        "id": 130764754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533196935
    },
    {
        "content": "<p>That worked.</p>",
        "id": 130764756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533196944
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 130764759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533196948
    },
    {
        "content": "<p>nice</p>",
        "id": 130764760,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533196952
    },
    {
        "content": "<p>My guess is that perhaps you wanted the<code> add_group</code> axioms to prove some other the other field axioms</p>",
        "id": 130765215,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533197685
    },
    {
        "content": "<p>add group?</p>",
        "id": 130765227,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533197708
    },
    {
        "content": "<p>What's the question?</p>",
        "id": 130765298,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533197789
    },
    {
        "content": "<p>you're replying to the message from March</p>",
        "id": 130765311,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533197814
    },
    {
        "content": "<p>I see.</p>",
        "id": 130765345,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533197869
    },
    {
        "content": "<p>Johan, I think you shouldn't need to directly call <code>unfreeze_local_instances</code>. What are you trying to do?</p>",
        "id": 130767424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533200873
    },
    {
        "content": "<p>Well, I tried to do the <code>cases cat</code> and it complained... it told me to <code>unfreeze</code> stuff, and I happily complied.</p>",
        "id": 130767475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533200910
    },
    {
        "content": "<p>I am trying to investigate how far the double <code>op</code> of a category <code>C</code> is from being defeq to <code>C</code>.</p>",
        "id": 130767488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533200951
    },
    {
        "content": "<p>Do you have a MWE I could try?</p>",
        "id": 130767489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533200952
    },
    {
        "content": "<p>Hmm, it depends on an old version of Scott's PR...</p>",
        "id": 130767500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533200967
    },
    {
        "content": "<p>If you have his PR checked out somewhere, I suppose you could copy paste my latest snippet.</p>",
        "id": 130767508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533200995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"https://github.com/jcommelin/lean-homotopy-theory/blob/playground/src/categories/op_op.lean\" target=\"_blank\" title=\"https://github.com/jcommelin/lean-homotopy-theory/blob/playground/src/categories/op_op.lean\">https://github.com/jcommelin/lean-homotopy-theory/blob/playground/src/categories/op_op.lean</a></p>",
        "id": 130768912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533203198
    },
    {
        "content": "<p>That's a file in a fork of a project by Reid, depending on an old version of Scott's PR.</p>",
        "id": 130768914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533203220
    },
    {
        "content": "<p>If you're being asked to unfreeze local instances then it's probably because you're doing cases on some random class -- that's when this happens to me. I think the last time it happened, Chris pointed out that I had access to all the things I wanted, with <code>cat.foo</code>, <code>cat.bar</code> etc, so I didn't need to unfreeze anything.</p>",
        "id": 130768988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533203343
    },
    {
        "content": "<p>Is unfreezing a bad thing to do?</p>",
        "id": 130769080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533203509
    },
    {
        "content": "<p><code>Opposite (Opposite C)</code> isn't going to be defeq to <code>C</code>. It's going to be provably equal, or isomorphic, but since we know those are both evil notions, in the end we probably just want to prove it's equivalent. (My intuition is that even proving the equality is just going to invite trouble later, when you rewrite along the equality.)</p>",
        "id": 130769237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533203739
    },
    {
        "content": "<p>Right. But it's pretty close to being defeq (whatever that means). As expected, there is nothing going into the proofs I just linked to.</p>",
        "id": 130769289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533203816
    },
    {
        "content": "<p>The CS people love stuff being defeq but because categories are one level up in the mathematical hierarchy from sets, it's basically never the right question to ask if they're isomorphic, let alone defeq</p>",
        "id": 130769490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533204082
    },
    {
        "content": "<p>Sure. But <code>op op</code> is somewhat special right? And I can imagine it would help a lot, in this special case.</p>",
        "id": 130769616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533204257
    },
    {
        "content": "<p>I don't think there is any harm in proving an equality of categories when it happens to be true. Of course there should be theorems saying equality implies isomorphism and isomorphism implies equivalence</p>",
        "id": 130879231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533364237
    },
    {
        "content": "<p>the main point is to not expect that equality is much stronger or easier to work with than these other two notions</p>",
        "id": 130879241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533364284
    },
    {
        "content": "<p>I agree. Just don't rewrite the source or target of a functor/natural transformation by an equation of categories and expect to be happy later. :-)</p>",
        "id": 130879244,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533364316
    },
    {
        "content": "<p>I think one way to handle this is to use a <code>have</code> subproof to show that some equality of categories holds (say an embedded op op cancellation), and then use <code>cast h</code> as a functor and have theorems about it</p>",
        "id": 130879337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533364461
    },
    {
        "content": "<blockquote>\n<p>I don't think there is any harm in proving an equality of categories when it happens to be true. Of course there should be theorems saying equality implies isomorphism and isomorphism implies equivalence</p>\n</blockquote>\n<p>Maybe the CS experience is different, but it's very rare for categories to be isomorphic in \"real life\" maths.</p>",
        "id": 130882057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533370560
    },
    {
        "content": "<p>I think it's about as common as equality of categories, like in this case</p>",
        "id": 130882101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533370597
    }
]