[
    {
        "content": "<p>This fails to generate <code>foo.mk.inj_eq</code>:</p>\n<div class=\"codehilite\"><pre><span></span>structure foo {α : Type} (β : α → α → Type) := (bar : Π (a : α), β a a)\n</pre></div>\n\n\n<p>Seems like a bug to me. Any thoughts on a workaround?</p>\n<p>Also, is it still good form to report bugs on the leanprover/lean Github? They're unlikely to get fixed until Lean 4 but there could be some use in reporting them.</p>\n<p>PS: This is a MWE so <code>def foo.bar {α : Type} (β : α → α → Type) := Π (a : α), β a a</code> won't do for my use case.</p>",
        "id": 157989557,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1549830153
    },
    {
        "content": "<p>I don't know the rules for what is guaranteed to be generated. If you get <code>rec</code> then you can make everything else yourself. I think there is very little point filling a bug, it won't be fixed in Lean 3 and Lean 4 is a complete rewrite</p>",
        "id": 157990248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549831262
    },
    {
        "content": "<p>What is the theorem you want?</p>",
        "id": 157990262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549831297
    },
    {
        "content": "<p>I want the structure itself. <code>*.mk.inj_eq</code> is an internal thing. I don't know how essential it is but I don't know how to prevent lean from trying to generate it.</p>",
        "id": 157990391,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1549831506
    },
    {
        "content": "<p>I don't understand this question at all. I'm looking through the source code for any mention of <code>mk.inj_eq</code></p>",
        "id": 157990476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549831651
    },
    {
        "content": "<p>I see <code>sigma.mk.inj_eq</code> but that is defined in the code base</p>",
        "id": 157990478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549831678
    },
    {
        "content": "<p>Oh!</p>",
        "id": 157990540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549831740
    },
    {
        "content": "<p>That's an odd one. This works, but I have no idea why.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">foo&#39;</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 157990551,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549831748
    },
    {
        "content": "<p>The structure itself fails to compile!</p>",
        "id": 157990557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549831754
    },
    {
        "content": "<p>I thought you were just complaining that an auxiliary lemma was not generated.</p>",
        "id": 157990563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549831777
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to generate auxiliary lemma &#39;foo.mk.inj_eq&#39;</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">assumption tactic failed</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type,</span>\n<span class=\"cm\">β : α → α → Type,</span>\n<span class=\"cm\">bar bar_1 : Π (a : α), β a a,</span>\n<span class=\"cm\">h : {bar := bar} = {bar := bar_1}</span>\n<span class=\"cm\">⊢ {bar := bar} = {bar := bar_1}</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 157990613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549831809
    },
    {
        "content": "<p>man, that assumption tactic looked like it was going to work fine.</p>",
        "id": 157990622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549831860
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- works fine ;-)</span>\n</pre></div>",
        "id": 157991226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549832920
    },
    {
        "content": "<p>Yep, it's disabled for classes, I just found this comment in  <code>lean/src/library/constructions/injective.h</code>:</p>\n<blockquote>\n<p>Generate injectivity lemmas <code>*.inj</code>, <code>*.inj_arrow</code> and <code>*.inj_eq</code>.<br>\nIf <code>gen_inj_eq</code> is false, then <code>*.inj_eq</code> lemma is not generated.<br>\nThe <code>*.inj_eq</code> lemma is used by the simplifier.<br>\nWe don't generate it for classes because they can be expensive to generate and are rarely used in this case.</p>\n</blockquote>\n<p>The bug is too deep in the code for me to figure out what's going on but I'd love to hear about it if someone knows.</p>\n<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Thanks! That's easier than I had imagined it would be.</p>",
        "id": 157991578,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1549833496
    },
    {
        "content": "<p>The problem isn't specific to the structure command at all.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span>  <span class=\"n\">foo&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">foo&#39;</span>\n</pre></div>\n\n\n<p>The tactic that (I think) is failing is actually implemented in Lean. (<a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L1610\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L1610\">https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L1610</a>) In principle one could poke around there and see what's going on. It's a little late for me to start messing with core though.</p>",
        "id": 157991812,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549833939
    }
]