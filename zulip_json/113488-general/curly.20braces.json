[
    {
        "content": "<p>Following up on the indentation linter, <a href=\"https://github.com/leanprover-community/mathlib/issues/10280\">#10280</a> adds a curly braces linter.<br>\nThis might be somewhat controversial. But I firmly believe that there is a net gain from having these linters. The way mathlib styles <code>{ .. }</code>-blocks is somewhat unusual compared to what is common in other languages. (But I've become very fond of our style!) Anyway, I think this linter will help newcomers to style their <code>{}</code> correctly.<br>\nIt comes with scripts that automatically reflow offending lines.</p>",
        "id": 261172760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636657424
    },
    {
        "content": "<p>What about <code>conv</code>? In the examples in the doc the syntax is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>For example <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv\">here</a></p>",
        "id": 261175168,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636658830
    },
    {
        "content": "<p>Hmm, then I propose that we update the doc</p>",
        "id": 261175772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636659132
    },
    {
        "content": "<p>Should spaces between closing curly braces be part of the linter?  I saw this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">p.num</span> <span class=\"bp\">*</span> <span class=\"n\">q.denom</span> <span class=\"bp\">≠</span> <span class=\"n\">q.num</span> <span class=\"bp\">*</span> <span class=\"n\">p.denom</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_iff_le_and_ne.elim_right</span> <span class=\"o\">⟨</span><span class=\"n\">h.left</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">this.elim_left</span> <span class=\"n\">h.right</span><span class=\"o\">)⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">lt_iff_le_and_ne.elim_left</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">tmp.left</span><span class=\"o\">,</span> <span class=\"n\">this.elim_right</span> <span class=\"n\">tmp.right</span><span class=\"o\">⟩</span> <span class=\"o\">}},</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10280/files#diff-a6293477a7756230fad4d65d40f466a069910ccef462a6698e5a7d5223fd8596R144\">https://github.com/leanprover-community/mathlib/pull/10280/files#diff-a6293477a7756230fad4d65d40f466a069910ccef462a6698e5a7d5223fd8596R144</a></p>",
        "id": 261182249,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636663281
    },
    {
        "content": "<p>Ideally, yes. But what about nested set-builder notation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- we want some singleton in `set (set X)`</span>\n<span class=\"n\">exact</span> <span class=\"o\">{{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">}}</span>\n</code></pre></div>",
        "id": 261182399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636663397
    },
    {
        "content": "<p>Oh, I see now, the rule is literally about lines ending or starting with <code>{</code> and <code>}</code>.  That seems like a nice and simple rule.</p>",
        "id": 261183212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636663997
    },
    {
        "content": "<p>If you can do bracket matching, one way to do it is to say that a space/comma/newline should follow a bracket whose matching pair is the first thing on the line. It still has false positives, but I don't think you can do better without using the ast data</p>",
        "id": 261184193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636664571
    },
    {
        "content": "<p>I'm inclined to go with the stupid simple thing that this PR does. It will catch most of the mistakes that I flag during PR reviews.</p>",
        "id": 261184652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636664881
    },
    {
        "content": "<p>If you did bracket matching, you'd probably also have to do string parsing, since for example <code>{{</code> is how you escape curly braces in <code>format!</code>.</p>",
        "id": 261185481,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636665468
    },
    {
        "content": "<p>no, because brackets still match</p>",
        "id": 261185624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636665572
    },
    {
        "content": "<p>It is possible to write unmatched brackets in comments but that is enough of an edge case that I don't think it is worth worrying about</p>",
        "id": 261185741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636665612
    },
    {
        "content": "<p>The brackets don't match in <code>format!</code> though, since it's <code>format!\"foo {{bar} baz\"</code> to get <code>foo {bar} baz</code></p>",
        "id": 261185802,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636665663
    },
    {
        "content": "<p>isn't it <code>format!\"foo {{bar}} baz\"</code>?</p>",
        "id": 261185856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636665714
    },
    {
        "content": "<p>What do you think about normalizing whether there's a comma at endings, like <code>}, }, }, },</code>?  While I'm usually one to include these, it seems like banning close curly, any number of spaces, comma, any number of spaces, curly wouldn't break anything.</p>",
        "id": 261185932,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636665749
    },
    {
        "content": "<p>even if what you wrote works I don't think it should be considered good style</p>",
        "id": 261185933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636665749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/curly.20braces/near/261185856\">said</a>:</p>\n<blockquote>\n<p>isn't it <code>format!\"foo {{bar}} baz\"</code>?</p>\n</blockquote>\n<p>That gives <code>foo {bar}} baz</code></p>",
        "id": 261185955,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636665768
    },
    {
        "content": "<p>clearly we need to fix that then</p>",
        "id": 261185972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636665781
    },
    {
        "content": "<p>or use <code>\\{</code></p>",
        "id": 261186009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636665816
    },
    {
        "content": "<p>Can format see the backslash escape though? It's getting a parsed string I believe.</p>",
        "id": 261186026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636665837
    },
    {
        "content": "<p>maybe <code>\\\\{</code> then</p>",
        "id": 261186097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636665862
    },
    {
        "content": "<p>some string parsers fall back to literal inclusion of the backslash, in which case it's not needed</p>",
        "id": 261186145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636665890
    },
    {
        "content": "<p>This would be a curly brace fix for <code>lean/library/init/meta/interactive_base.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parse_format</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">parser</span> <span class=\"n\">pexpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"o\">[]</span>            <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">to_fmt</span> <span class=\"bp\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">acc</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"sc\">'\\n'</span><span class=\"o\">::</span><span class=\"n\">s</span><span class=\"o\">)</span>     <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">parse_format</span> <span class=\"s2\">\"\"</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"n\">pure</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">to_fmt</span> <span class=\"bp\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">format.line</span> <span class=\"bp\">++</span> <span class=\"bp\">%%</span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"sc\">'{'</span><span class=\"o\">::</span><span class=\"sc\">'{'</span><span class=\"o\">::</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">parse_format</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"s2\">\"{\"</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"sc\">'{'</span><span class=\"o\">::</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.pexpr</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">s.as_string</span><span class=\"o\">,</span>\n   <span class=\"sc\">'}'</span><span class=\"o\">::</span><span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"n\">s.to_list</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"s2\">\"'}' expected\"</span><span class=\"o\">,</span>\n   <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">parse_format</span> <span class=\"s2\">\"\"</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"n\">pure</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">to_fmt</span> <span class=\"bp\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">to_fmt</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"bp\">%%</span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"sc\">'}'</span><span class=\"o\">::</span><span class=\"sc\">'}'</span><span class=\"o\">::</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">parse_format</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"s2\">\"}\"</span><span class=\"o\">)</span> <span class=\"n\">s</span>  <span class=\"c1\">-- new</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"sc\">'}'</span><span class=\"o\">::</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"'}}' expected\"</span>  <span class=\"c1\">-- new</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">parse_format</span> <span class=\"o\">(</span><span class=\"n\">acc.str</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 261186320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636666013
    },
    {
        "content": "<p>just what I was going to say</p>",
        "id": 261186344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636666027
    },
    {
        "content": "<p>(also this has to be fixed in mathport, which also parses format strings)</p>",
        "id": 261186379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636666055
    },
    {
        "content": "<p>Lean 3 complains about invalid escape sequences in strings, so it'd be <code>\\\\{</code> if you wanted to go that way</p>",
        "id": 261186502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636666141
    },
    {
        "content": "<p>I think I prefer the <code>{{ }}</code> escapes</p>",
        "id": 261186565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636666197
    },
    {
        "content": "<p>also it's simpler since you don't have to worry about escaping <code>\\</code></p>",
        "id": 261186626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636666225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I'm lost about what exactly this is now about. Would you mind pushing to the PR if you have improvements?</p>",
        "id": 261210183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636690027
    },
    {
        "content": "<p>This PR is already attracting merge conflicts. If people like this change, is it ok to defer improvements to a later PR?</p>",
        "id": 261212851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636693476
    },
    {
        "content": "<p>The <code>{{}}</code> escape thing is independent of this PR (and it has been PR'd as <a href=\"https://github.com/leanprover-community/lean/issues/650\">lean#650</a>)</p>",
        "id": 261213102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636693824
    },
    {
        "content": "<p>Aha, thanks for clarifying</p>",
        "id": 261213197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636693987
    },
    {
        "content": "<p>Would it be possible to have something like this accessible locally via, say, <code>leanproject format</code>?</p>",
        "id": 261248659,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636722317
    },
    {
        "content": "<p>Or something less dangerous, that allows formatting particular files. Because you usually don't want to have a PR that formats the whole repository <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 261249860,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636723004
    },
    {
        "content": "<p>What do people think of <a href=\"https://github.com/leanprover-community/mathlib/issues/10280\">#10280</a>. Objections against merging it?</p>",
        "id": 261546357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637004323
    },
    {
        "content": "<p>Fine to me!</p>",
        "id": 261553713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637007737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/curly.20braces/near/261175168\">said</a>:</p>\n<blockquote>\n<p>What about <code>conv</code>? In the examples in the doc the syntax is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>For example <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv\">here</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> where do I modify this example? I can't find the source.</p>",
        "id": 261750265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637133337
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/doc_commands.lean#L369-L417\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/doc_commands.lean#L369-L417</a></p>",
        "id": 261750529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637133626
    },
    {
        "content": "<p>Nice. So my script automatically fixed it already (-;</p>",
        "id": 261751224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637134463
    }
]