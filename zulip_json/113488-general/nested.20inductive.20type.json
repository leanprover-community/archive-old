[
    {
        "content": "<p>Is it possible to define a nested inductive type on a vector-like structure instead of lists?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">expression</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">dim</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"o\">)</span> <span class=\"n\">dim</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> omitted constraints on dim -/</span> <span class=\"o\">:</span> <span class=\"n\">expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">expression</span>\n</pre></div>\n\n\n<p>I get the following error: nested occurrence [...] contains variables that are not parameters.</p>",
        "id": 164436786,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1556529452
    },
    {
        "content": "<p>I think this is an inductive recursive type, since it depends on the <code>length</code> function for lists. I don't think this is possible.</p>",
        "id": 164437039,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556529715
    },
    {
        "content": "<p>This isn't an inductive recursive, but it's not a supported nested inductive. The easiest solution is to use <code>fin dim -&gt; expression</code> instead of <code>vector expression dim</code></p>",
        "id": 164437742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556530436
    },
    {
        "content": "<p>That works. Thanks!</p>",
        "id": 164443408,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1556536918
    },
    {
        "content": "<p>Follow up question:<br>\nIf I want to define a recursive function over expressions like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">of_fn</span> <span class=\"n\">idx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">...</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">expression_size</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I have to proof that the function application is decreasing for some arbitrary expression e, i.e. <code>expression_size e &lt; expression_size (a idx)</code>. However I don't have a proof that e comes from idx, ergo I cannot proof it.<br>\nThe only way around that I can think of is to use the recursor directly. Is there a more convenient way?<br>\n(I left out some details, expression is actually indexed over types)</p>",
        "id": 165623723,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1557841767
    },
    {
        "content": "<p>This is probably easier to define using <code>expression.rec_on</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expression</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">expression</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">e</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">idx</span> <span class=\"n\">f</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">of_fn</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">_</span>\n</pre></div>",
        "id": 165632127,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557847830
    }
]