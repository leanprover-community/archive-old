[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"err\">&#39;</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">frozen_name</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">frozen_name</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">)</span><span class=\"err\">&#39;</span> <span class=\"n\">is</span> <span class=\"n\">overloaded</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">overloading</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">currently</span> <span class=\"n\">supported</span> <span class=\"k\">in</span> <span class=\"n\">patterns</span>\n</pre></div>",
        "id": 125483415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524291919
    },
    {
        "content": "<p>use a local notation</p>",
        "id": 125483454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524291969
    },
    {
        "content": "<p>what did you write to get that?</p>",
        "id": 125483456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524292013
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">reduce</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₃</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"n\">L3</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">injections</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span> <span class=\"n\">L3</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">injections</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">hd1</span><span class=\"o\">)</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">reduce</span> <span class=\"n\">hd1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">hd2</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 125483501,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524292120
    },
    {
        "content": "<p>does it help to use <code>((x2,b2)::hd2 : list _)</code> instead?</p>",
        "id": 125483556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524292215
    },
    {
        "content": "<p>well, it doesn't, but list.cons worked</p>",
        "id": 125483605,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524292338
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem reduce.not : ∀ (L₁ L₂ L₃ : list (α × bool)) (x b), reduce L₁ ≠ L₂ ++ (x, b) :: (x, bnot b) :: L₃\n| [] L2 L3 _ _ := λ h, by simpa using (list.append_eq_nil.1 h.symm).2\n| ((x,b)::L1) L2 L3 x&#39; b&#39; := begin\n  dsimp [reduce],\n  cases r : reduce L1,\n  { dsimp [reduce], intro h,\n    have := congr_arg list.length h,\n    simp [-add_comm] at this,\n    exact absurd this dec_trivial },\n  cases hd with y c,\n  by_cases x = y ∧ ¬b = c; simp [reduce, h]; intro H,\n  { rw H at r,\n    exact reduce.not L1 ((y,c)::L2) L3 x&#39; b&#39; r },\n  rcases L2 with _|⟨a, L2⟩,\n  { injections, substs x&#39; y c b&#39;,\n    refine h ⟨rfl, _⟩,\n    cases b; exact dec_trivial },\n  { refine reduce.not L1 L2 L3 x&#39; b&#39; _,\n    injection H with _ H,\n    rw [r, H], refl }\nend\n</pre></div>\n\n\n<p>ah, I couldn't help myself</p>",
        "id": 125484552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524294530
    },
    {
        "content": "<p>thanksssss</p>",
        "id": 125484554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524294537
    },
    {
        "content": "<p>and I just realized that I only have two interface theorems</p>",
        "id": 125484611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524294706
    },
    {
        "content": "<p>and I don't have to change the rest</p>",
        "id": 125484612,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524294710
    },
    {
        "content": "<p>which is again a testimony of the theory of interface</p>",
        "id": 125484613,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524294717
    }
]