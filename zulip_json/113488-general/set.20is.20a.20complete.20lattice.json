[
    {
        "content": "<p>mathlib proof:</p>\n<div class=\"codehilite\"><pre><span></span>instance lattice_set : complete_lattice (set α) :=\n{ lattice.complete_lattice .\n  le           := (⊆),\n  le_refl      := subset.refl,\n  le_trans     := assume a b c, subset.trans,\n  le_antisymm  := assume a b, subset.antisymm,\n\n  lt           := λ x y, x ⊆ y ∧ ¬ y ⊆ x,\n  lt_iff_le_not_le := λ x y, iff.refl _,\n\n  sup          := (∪),\n  le_sup_left  := subset_union_left,\n  le_sup_right := subset_union_right,\n  sup_le       := assume a b c, union_subset,\n\n  inf          := (∩),\n  inf_le_left  := inter_subset_left,\n  inf_le_right := inter_subset_right,\n  le_inf       := assume a b c, subset_inter,\n\n  top          := {a | true },\n  le_top       := assume s a h, trivial,\n\n  bot          := ∅,\n  bot_le       := assume s a, false.elim,\n\n  Sup          := λs, {a | ∃ t ∈ s, a ∈ t },\n  le_Sup       := assume s t t_in a a_in, ⟨t, ⟨t_in, a_in⟩⟩,\n  Sup_le       := assume s t h a ⟨t&#39;, ⟨t&#39;_in, a_in⟩⟩, h t&#39; t&#39;_in a_in,\n\n  Inf          := λs, {a | ∀ t ∈ s, a ∈ t },\n  le_Inf       := assume s t h a a_in t&#39; t&#39;_in, h t&#39; t&#39;_in a_in,\n  Inf_le       := assume s t t_in a h, h _ t_in }\n</pre></div>\n\n\n<p>my proof:</p>\n<div class=\"codehilite\"><pre><span></span>instance lattice_set : complete_lattice (set α) :=\nlattice.complete_lattice_fun\n</pre></div>",
        "id": 125037337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523631440
    },
    {
        "content": "<p>I win</p>",
        "id": 125037338,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523631444
    },
    {
        "content": "<p>I guess <code>Sup</code> and <code>Inf</code> are defined differently now?</p>",
        "id": 125037562,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523631837
    },
    {
        "content": "<p>really?</p>",
        "id": 125037602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523631850
    },
    {
        "content": "<p>They should be equal.   However I don't think they are definitionally equal.  <code>Sup s a = (∃ b ∈ set.image (λ f, f a) s, b) = (∃ b, (∃ c, s c ∧ s c a = b) → b)</code> which is different</p>",
        "id": 125037907,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523632374
    },
    {
        "content": "<p>well one could prove that they are equal</p>",
        "id": 125037929,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523632399
    },
    {
        "content": "<p>simp lemma</p>",
        "id": 125037930,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523632403
    },
    {
        "content": "<p>This still doesn't give you definitional reduction.  If you want to prove <code>a ∈ Sup s</code>, you'll now always need to <code>simp</code> first.  There are quite a few places where we accept some additional complexity in order to guarantee good definitional reduction, the <code>lt</code> in preorder is another place.  We can define <code>lt</code> in terms of <code>le</code>, but we want it to reduce differently for natural numbers.</p>",
        "id": 125037988,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523632512
    },
    {
        "content": "<p>I see</p>",
        "id": 125037998,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523632555
    },
    {
        "content": "<p>Yes, for nat, <code>a&lt;b</code> is _defined_ to be <code>succ a &lt;= b</code> and if you know this you can write some neat obfuscated code :-)</p>",
        "id": 125038503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523633342
    },
    {
        "content": "<p>such as?</p>",
        "id": 125038512,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523633354
    },
    {
        "content": "<p>I believe I used this to do some golf question here a week or two ago. Either a question of Chris or of Nima.</p>",
        "id": 125038557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523633404
    },
    {
        "content": "<p>It just means that you never have to use the lemma <code>succ_le_of_lt</code></p>",
        "id": 125038813,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523633863
    },
    {
        "content": "<p>you can <code>match</code> or use the equation compiler to do case analysis and inductionon <code>&lt;</code>, with the definition following the default setup this would be not possible.</p>",
        "id": 125039063,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523634279
    }
]