[
    {
        "content": "<p>I guess this is because my current proof is \"evil\" and uses <code>cast</code> and such like, but see <a href=\"https://github.com/leanprover-community/flt-regular/blob/ed14a3030c3d6e00c7ca67719e0a0517f487fc9e/src/number_theory/cyclotomic/cyclotomic_units.lean#L145\">here</a> in FLT-regular. I'm not attached enough to make a MWE; but this is mildly annoying. <code>simp?</code> reports a lemma which, when I actually try to put into the <code>simp only</code>, is reported as an invalid simplification lemma.</p>",
        "id": 265804434,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640179692
    },
    {
        "content": "<p>ok, this came up again, this time in a more pressing need; I tried to replace one of the <code>conv</code> blocks in <a href=\"https://tqft.net/mathlib/ring_theory/polynomial/bernstein\">file#ring_theory/polynomial/bernstein</a> (line 338) with:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>debug stuff</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">bernstein_polynomial</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">mv_polynomial.aeval</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">pderiv</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_pow</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pderiv</span> <span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.aeval</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pderiv_mul</span><span class=\"o\">,</span> <span class=\"n\">pderiv_tt_x</span><span class=\"o\">,</span> <span class=\"n\">pderiv_tt_y</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n</div></div>\n<p>but <code>squeeze_simp</code> again fails with the same error on this</p>",
        "id": 266391351,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640823964
    },
    {
        "content": "<p>non-squeezed simps in <code>conv</code>s can die :(</p>",
        "id": 266392264,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640825062
    },
    {
        "content": "<p>I'm really sorry that <code>simp?</code> is so unreliable. I tried my best when implementing it in the C++, but I was very much out of my comfort zone. I don't know how to improve it.</p>",
        "id": 266404816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640843410
    },
    {
        "content": "<p>Still definitely beats trying to figure it out from show_term!</p>",
        "id": 266405614,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640844567
    },
    {
        "content": "<p><code>simp?</code> is great, imo. I just wish it preserved <code>at h</code></p>",
        "id": 266408526,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1640848759
    },
    {
        "content": "<p>I've figured it out! Woop! It's to do with namespacing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.squeeze</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">asda</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">int.asda</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">--open int</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tes</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">squeeze_simp</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">tes</span>\n</code></pre></div>\n<p>Uncomment that <code>open int</code>, and the <code>squeeze_simp</code> will fail.</p>",
        "id": 266475843,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640917915
    },
    {
        "content": "<p>Should I open an issue for this?</p>",
        "id": 266475881,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640917924
    },
    {
        "content": "<p>I've never used the github issues for mathlib</p>",
        "id": 266475885,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640917933
    },
    {
        "content": "<p>What happens if you rename one of the <code>asda</code> lemmas to <code>asdas</code> and then uncomment <code>open int</code>? (I'm not on my PC right now)<br>\nI suspect it's failing due to name ambiguity</p>",
        "id": 266479207,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640922894
    },
    {
        "content": "<p>exactly, this is the issue</p>",
        "id": 266479713,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640923611
    },
    {
        "content": "<p>i can't really rename <code>polynomial.map_one</code> and we have a global <code>map_one</code>, for instance</p>",
        "id": 266479726,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640923632
    },
    {
        "content": "<p>Then <code>simp</code> works but <code>squeeze_simp</code> doesn't?</p>",
        "id": 266479813,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640923798
    },
    {
        "content": "<p>yeah</p>",
        "id": 266480099,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640924166
    },
    {
        "content": "<p>submitted as <a href=\"https://github.com/leanprover-community/mathlib/pull/11196\">#11196</a></p>",
        "id": 266649137,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641181773
    },
    {
        "content": "<p>so there's been some progress on this; the reason we get match failed is on line 143 of <code>squeeze.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"n\">some</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get_proof_state_after</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">user_args</span> <span class=\"bp\">++</span> <span class=\"n\">simp_args</span><span class=\"o\">)),</span>\n</code></pre></div>\n<p>this essentially does <code>simp only [some_args]</code> in a separate tactic state, but this fails as in <code>some_args</code> you'll have the namespace clash and so the separate tactic state will have a namespace error</p>",
        "id": 267950224,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642118495
    },
    {
        "content": "<p>(thanks to Bhavik for discovering this). a suggested solution was to make a tactic that turns a name (e.g. <code>map_zero</code>) into all the possible names that it could be (so if it's unambigious, just <code>[map_zero]</code>, else something like <code>[_root_.map_zero, polynomial.map_zero]</code> (I guess it should be checked that these are all <code>simp</code> lemmas/passed in). this can then replace each name in <code>squeeze</code>, and then it _should_ just work fine. however, I don't have the skills to code this :/</p>",
        "id": 267950604,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642118670
    },
    {
        "content": "<p>ok, so there's quite a bit of progress on this in <a href=\"https://github.com/leanprover-community/mathlib/pull/11659\">#11659</a>, but would really appreciate some meta help here. i put the below comment on GH, but copy-pasted for ease:</p>\n<p>argh, I nearly got this to work, but I simply cannot figure out the last bit. I managed to know (well, guess) when a function is overloaded, and if it is, we prepend _root_ to its name, so that we don't get any namespace clashes. However, resolve_name' decides that it needs to strip the _root_, regardless; how do I get around this? Can I make a new resolve_name' that causes an overload on purpose so that it's forced to keep in _root_?</p>",
        "id": 269356085,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643165402
    },
    {
        "content": "<p>again, all I need is a <code>resolve_name'</code> that will keep in the <code>_root_</code>; i _think_ everything else works.</p>",
        "id": 269356103,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643165429
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/45SYdlD7HkF4Ese_jxUI9jjR/image.png\">image.png</a> ok, so if I manually write the <code>pexpr</code>s then it does work, but <code>render_simp_arg_list</code> undoes some of the work and removes the namespacing</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/45SYdlD7HkF4Ese_jxUI9jjR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/45SYdlD7HkF4Ese_jxUI9jjR/image.png\"></a></div>",
        "id": 269356693,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643166099
    },
    {
        "content": "<p>progress, I guess? would much appreciate any help</p>",
        "id": 269356696,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643166106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> I can try and help you tomorrow if you don't get it figured out by then <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 269357643,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643167287
    },
    {
        "content": "<p>yeah, would much appreciate that. i'm currently really tempted to literally turn names into <code>expr.const ff</code>s which feels outstandingly wrong</p>",
        "id": 269399249,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643198100
    },
    {
        "content": "<p>hmm, so okay, if you write <code>squeeze_simp [_root_.asda, int.asda]</code> (using my MWE from above), you get that the <code>simp_arg_list</code> has <code>expr</code>s with the constructor <code>local_const int.asda int.asda (...)</code>. So I tried replacing the <code>resolve_name'</code> in <code>name.to_simp_args</code> with <code>get_local</code>, but now there isn't a <code>int.asda</code> local; which makes sense, I guess, but then how did those original <code>expr</code>s appear?</p>",
        "id": 269429124,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643210884
    },
    {
        "content": "<p>I just found the time to sit with the problem. First, just to check if we have the same ideas, how do you expect the tactic to react in this scenario?</p>\n<p>Also, can a mod move this thread to <a class=\"stream\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics\">#metaprogramming / tactics</a> ?</p>",
        "id": 269429616,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643211080
    },
    {
        "content": "<p>hmm, it seems that in the <code>simp_arg_list</code> they are <code>pexpr</code>s, but if I use <code>get_local</code> I have no choice but to get <code>expr</code>s. Is there any way to get <code>pexpr</code>s?</p>",
        "id": 269429647,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643211091
    },
    {
        "content": "<p>I didn't know that was a stream!</p>",
        "id": 269429799,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643211139
    },
    {
        "content": "<p>The hope is that if you <code>squeeze_simp</code> when you have something like <code>int.asda, _root_.asda</code> in the used simpset, <code>squeeze_simp</code> doesn't just crash completely. currently I've got a semi-working thing that doesn't crash, but prints <code>try this: simp only [asda, asda]</code> so you have to guess namespaces</p>",
        "id": 269429897,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643211193
    },
    {
        "content": "<p>this also seems to work, but seems similarly wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">name.to_simp_args</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">simp_arg_type</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">expr.local_const</span> <span class=\"n\">ff</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr.var</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">do</span> <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">to_raw_fmt'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">simp_arg_type.expr</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>(ignore all the debugging stuff)</p>",
        "id": 269430915,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643211580
    },
    {
        "content": "<p>But we're expecting it so say <code>Try this: simp only [int.asda, asda, and_self]</code>, right?</p>",
        "id": 269431431,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643211793
    },
    {
        "content": "<p>(even after <code>open int</code>)</p>",
        "id": 269431478,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643211807
    },
    {
        "content": "<p>yes, with a <code>_root_</code> on the second <code>asda</code> because otherwise we'd get an overload resolution error</p>",
        "id": 269431550,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643211832
    },
    {
        "content": "<p>but honestly as long as it works, it's better than \"match failed\"</p>",
        "id": 269431638,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643211854
    },
    {
        "content": "<p>I think <code>name.to_simp_args</code> will need more information</p>",
        "id": 269431827,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643211931
    },
    {
        "content": "<p>doesn't it have the tactic state by virtue of being a tactic monad?</p>",
        "id": 269432223,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643212083
    },
    {
        "content": "<p>Right</p>",
        "id": 269433178,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643212332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/squeeze_simp.20-.20match.20failed.3F!/near/269429897\">said</a>:</p>\n<blockquote>\n<p>The hope is that if you <code>squeeze_simp</code> when you have something like <code>int.asda, _root_.asda</code> in the used simpset, <code>squeeze_simp</code> doesn't just crash completely. currently I've got a semi-working thing that doesn't crash, but prints <code>try this: simp only [asda, asda]</code> so you have to guess namespaces</p>\n</blockquote>\n<p>How did you accomplish this?</p>",
        "id": 269433800,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643212519
    },
    {
        "content": "<p>you can see in my branch right now, but I just hand-craft the <code>pexpr</code></p>",
        "id": 269433842,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643212539
    },
    {
        "content": "<p>Oops, I forgot to change branches (I was on <code>master</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> )</p>",
        "id": 269434089,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643212616
    },
    {
        "content": "<p>Alright, this is a good step. Now we need to do something about duplicated occurrences</p>",
        "id": 269435284,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643212983
    },
    {
        "content": "<p>Actually I think this is the best approach:</p>\n<blockquote>\n<p>a <code>resolve_name'</code> that will keep in the <code>_root_</code></p>\n</blockquote>",
        "id": 269445667,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643216708
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> to <a class=\"stream-topic\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/squeeze_simp.20-.20match.20failed.3F.21\">#metaprogramming / tactics &gt; squeeze_simp - match failed?!</a></p>",
        "id": 269451211,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643218822
    }
]