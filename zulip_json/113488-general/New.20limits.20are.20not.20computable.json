[
    {
        "content": "<p>The new limits in the category theory library are (intentionally I think) non-computable. Now, I'm working on a concrete category that has binary products I can't figure out how to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod.mk_le</span>  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">prod.mk</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x'</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">y'</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n<p>with the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">prod.mk</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⨯</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.of</span> <span class=\"n\">punit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"bp\">⨯</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">limits.prod.lift</span> <span class=\"o\">(</span><span class=\"n\">continuous_hom.const</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">continuous_hom.const</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"n\">a</span> <span class=\"n\">punit.star</span>\n</code></pre></div>\n\n<p>The issue is that it's not clear what the actual type of a product value is.</p>",
        "id": 211165127,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600969151
    },
    {
        "content": "<p>I was thinking about this too recently. Presumably one can use the fact that the forgetful functor to Type preserves limits, and the fact that the usual product of types satisfies the universal property of the categorical product. I havent had a chance to try it out though</p>",
        "id": 211166083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600969559
    },
    {
        "content": "<p>Could you provide a MWE? I can't seem to get the right imports to get your example to work</p>",
        "id": 211166281,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600969638
    },
    {
        "content": "<p>Yes, sorry about that. I'll make one up.</p>",
        "id": 211166832,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600969891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I think when you move the problem to the category of types, you still have the issue that binary products are not constructive there either</p>",
        "id": 211166941,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600969928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Is this better:</p>\n<div class=\"codehilite\" data-code-language=\"Clean\"><pre><span></span><code><span class=\"k\">import</span><span class=\"w\"> </span><span class=\"nc\">order.category.omega_complete_partial_order</span><span class=\"w\"></span>\n\n<span class=\"nc\">universes</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"></span>\n\n<span class=\"n\">namespace</span><span class=\"w\"> </span><span class=\"n\">category_theory</span><span class=\"w\"></span>\n\n<span class=\"n\">open</span><span class=\"w\"> </span><span class=\"n\">omega_complete_partial_order</span><span class=\"w\"> </span><span class=\"n\">limits</span><span class=\"w\"></span>\n\n<span class=\"k\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">has_binary_products</span><span class=\"w\"> </span><span class=\"err\">ω</span><span class=\"nc\">CPO</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"n\">u</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">has_limit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">exists_limit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"err\">⟨</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">cone</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"err\">ω</span><span class=\"nc\">CPO</span><span class=\"o\">.</span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">F</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"n\">walking_pair</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"err\">×</span><span class=\"w\"> </span><span class=\"nc\">F</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"n\">walking_pair</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"err\">π</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"></span>\n<span class=\"w\">                                   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">walking_pair</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">continuous_hom</span><span class=\"o\">.</span><span class=\"n\">of_mono</span><span class=\"w\"> </span><span class=\"n\">preorder_hom</span><span class=\"o\">.</span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                                   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">walking_pair</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">continuous_hom</span><span class=\"o\">.</span><span class=\"n\">of_mono</span><span class=\"w\"> </span><span class=\"n\">preorder_hom</span><span class=\"o\">.</span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                                   </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">is_limit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">⟨λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"err\">π</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"err\">π</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">⟨</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"err\">π</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">walking_pair</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">monotone</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"err\">π</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">walking_pair</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">monotone</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"err\">⟩</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">dsimp</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"n\">continuous_hom</span><span class=\"o\">.</span><span class=\"n\">continuous</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"err\">⟩</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">fac</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">rintros</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">⟨</span><span class=\"w\"> </span><span class=\"err\">⟩</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">uniq</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">intros</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">dsimp</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">category_theory</span><span class=\"o\">.</span><span class=\"n\">limits</span><span class=\"o\">.</span><span class=\"n\">has_binary_products</span><span class=\"o\">.</span><span class=\"n\">_match_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">←</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">⟩</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">noncomputable</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"nc\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ω</span><span class=\"nc\">CPO</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"n\">u</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">Y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">↥</span><span class=\"p\">(</span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"err\">⨯</span><span class=\"w\"> </span><span class=\"nc\">Y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ω</span><span class=\"nc\">CPO</span><span class=\"o\">.</span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">punit</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"n\">u</span><span class=\"mi\">+1</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">⟶</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"err\">⨯</span><span class=\"w\"> </span><span class=\"nc\">Y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">limits</span><span class=\"o\">.</span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">continuous_hom</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">continuous_hom</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"></span>\n<span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">punit</span><span class=\"o\">.</span><span class=\"n\">star</span><span class=\"w\"></span>\n\n<span class=\"n\">lemma</span><span class=\"w\"> </span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">mk_le</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"nc\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ω</span><span class=\"nc\">CPO</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"n\">u</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">Y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"err\">≤</span><span class=\"w\"> </span><span class=\"n\">prod</span><span class=\"o\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"err\">↔</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"err\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"err\">∧</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"err\">≤</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"></span>\n\n<span class=\"n\">end</span><span class=\"w\"> </span><span class=\"n\">category_theory</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211167313,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600970106
    },
    {
        "content": "<p>I think you're missing an import - maybe <code>import category_theory.limits.shapes.binary_products</code> at the top - but with that it works, thanks!</p>",
        "id": 211167496,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600970184
    },
    {
        "content": "<p>Ah! Sorry about that, my copy of mathlib isn't clean</p>",
        "id": 211167624,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600970249
    },
    {
        "content": "<p>No worries!</p>",
        "id": 211167675,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600970273
    },
    {
        "content": "<p>Any luck?</p>",
        "id": 211171931,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600972426
    },
    {
        "content": "<p>The following might get you on the right track. I'm sorry about how messy it is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.category.omega_complete_partial_order</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.binary_products</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">omega_complete_partial_order</span> <span class=\"n\">limits</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">product_cone</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">walking_pair</span> <span class=\"bp\">⥤</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">ωCPO.of</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">walking_pair.left</span> <span class=\"bp\">×</span> <span class=\"n\">F.obj</span> <span class=\"n\">walking_pair.right</span><span class=\"o\">),</span>\n                <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">X</span> <span class=\"k\">with</span>\n                                   <span class=\"bp\">|</span> <span class=\"n\">walking_pair.left</span>  <span class=\"o\">:=</span> <span class=\"n\">continuous_hom.of_mono</span> <span class=\"n\">preorder_hom.prod.fst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n                                   <span class=\"bp\">|</span> <span class=\"n\">walking_pair.right</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_hom.of_mono</span> <span class=\"n\">preorder_hom.prod.snd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n                                   <span class=\"kd\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">product_cone_is_limit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">walking_pair</span> <span class=\"bp\">⥤</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">product_cone</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s.π.app</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s.π.app</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">s.π.app</span> <span class=\"n\">walking_pair.left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s.π.app</span> <span class=\"n\">walking_pair.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n                    <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">continuous_hom.continuous</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">fac'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintros</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span> <span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n      <span class=\"n\">uniq'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">product_cone._match_1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">w</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_binary_products</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">has_limit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">has_limit.mk</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">product_cone_is_limit</span> <span class=\"n\">F</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">prod_lift</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.of</span> <span class=\"n\">punit.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"bp\">⨯</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"n\">limits.prod.lift</span> <span class=\"o\">(</span><span class=\"n\">continuous_hom.const</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">continuous_hom.const</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">prod.mk</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⨯</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod_lift</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">punit.star</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod.mk_le</span>  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">prod.mk</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x'</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">y'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⨯</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span> <span class=\"n\">ωCPO.of</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">limits.is_limit.cone_point_unique_up_to_iso</span> <span class=\"o\">(</span><span class=\"n\">limit.is_limit</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">product_cone_is_limit</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i.hom</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">i.hom</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">i.hom.monotone</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">product_cone</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">π.app</span> <span class=\"n\">walking_pair.left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">i.hom</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">product_cone</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">π.app</span> <span class=\"n\">walking_pair.left</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n              <span class=\"o\">(</span><span class=\"n\">i.hom</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">product_cone</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">π.app</span> <span class=\"n\">walking_pair.left</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_limit.cone_point_unique_up_to_iso_hom_comp</span><span class=\"o\">,</span> <span class=\"n\">binary_fan.π_app_left</span><span class=\"o\">,</span> <span class=\"n\">prod.mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">prod_lift</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≫</span> <span class=\"n\">binary_fan.fst</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">punit.star</span> <span class=\"bp\">≤</span>\n        <span class=\"o\">(</span><span class=\"n\">prod_lift</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"bp\">≫</span> <span class=\"n\">binary_fan.fst</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">punit.star</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod_lift</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">prod.lift_fst</span><span class=\"o\">,</span> <span class=\"n\">prod.lift_fst</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 211172012,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1600972456
    },
    {
        "content": "<p>There are obviously several (simp) lemmas missing here. Adding them should hopefully make this much less painful. Some of the messiness is also due to the fact that I was discovering what the wCPO category does on the fly.</p>",
        "id": 211172331,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1600972605
    },
    {
        "content": "<p>Thanks for putting the time! Actually, we could have gone with the category of preorders without losing the main points</p>",
        "id": 211172467,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600972672
    },
    {
        "content": "<p>fwiw, you can do <code>product_cone</code> for <code>cone (pair X Y)</code> and then use one of the constructors for has_binary_products to get the general case, which makes some of the definitions at the beginning easier</p>",
        "id": 211174081,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600973460
    },
    {
        "content": "<p>I agree though that constructing an explicit nice limit cone is the way to go</p>",
        "id": 211174120,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600973474
    },
    {
        "content": "<p>If you do it that way, in <code>has_binary_products</code> how to you convert from the limit shape <code>F</code> and <code>pair X Y</code>?</p>",
        "id": 211174822,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600973822
    },
    {
        "content": "<p><code>has_binary_products_of_has_limit_pair</code></p>",
        "id": 211175676,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1600974252
    },
    {
        "content": "<p>Yeah - this is what I meant by one of the constructors - I just couldn't remember the name off the top of my head!</p>",
        "id": 211179160,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600975906
    },
    {
        "content": "<p>Ok I managed to reformulate <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>'s solution to use <code>cone (pair X Y)</code></p>",
        "id": 211183418,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600978098
    },
    {
        "content": "<p>To be exact, the binary products definitions</p>",
        "id": 211183440,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600978119
    },
    {
        "content": "<p>You can then use <code>binary_fan.mk</code> to make it a bit nicer instead of needing an inline match</p>",
        "id": 211183553,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600978193
    },
    {
        "content": "<p>Can you elaborate?</p>",
        "id": 211183938,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600978379
    },
    {
        "content": "<p>I mean you can define <code>product_cone</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">product_cone</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">binary_fan</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"n\">binary_fan.mk</span>\n  <span class=\"o\">(</span><span class=\"n\">continuous_hom.of_mono</span> <span class=\"n\">preorder_hom.prod.fst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.of</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">continuous_hom.of_mono</span> <span class=\"n\">preorder_hom.prod.snd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 211184438,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600978674
    },
    {
        "content": "<p>Wow! So efficient!</p>",
        "id": 211184645,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600978775
    },
    {
        "content": "<p>I notice now it's pretty annoying to need the type signature of one of the morphisms to specify the cone point - maybe it's worth having <code>P</code> as an explicit argument to <code>binary_fan.mk</code></p>",
        "id": 211184767,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600978826
    },
    {
        "content": "<p>But yes there are lots of convenience constructors around these things!</p>",
        "id": 211184808,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600978848
    },
    {
        "content": "<p>And I keep taking the long way around!</p>",
        "id": 211184839,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600978866
    },
    {
        "content": "<p>Perhaps this is a sign that we need better documentation :)</p>",
        "id": 211184921,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600978919
    },
    {
        "content": "<p>We could probably have the same binary products for every concrete category, provided that the defining property is closed under products</p>",
        "id": 211184979,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600978934
    },
    {
        "content": "<p>On my side, I tempt to not read a lot of documentation</p>",
        "id": 211185009,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600978958
    },
    {
        "content": "<p>Ok I managed to shrink <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>'s proof to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod.mk_le</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">ωCPO.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">prod.mk</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x'</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">y'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⨯</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span> <span class=\"n\">ωCPO.of</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">ωCPO.of_prod_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i.hom</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">i.hom</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">i.hom.monotone</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">product_cone</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">π.app</span> <span class=\"n\">walking_pair.left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">product_cone</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">π.app</span> <span class=\"n\">walking_pair.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">continuous_hom.const_apply</span><span class=\"o\">,</span> <span class=\"n\">prod_lift_binary_fst</span><span class=\"o\">,</span> <span class=\"n\">prod_lift_binary_snd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">coe_comp</span><span class=\"o\">,</span> <span class=\"n\">is_limit.cone_point_unique_up_to_iso_hom_comp</span><span class=\"o\">,</span> <span class=\"n\">binary_fan.π_app_left</span><span class=\"o\">,</span> <span class=\"n\">prod.mk</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">ωCPO.of_prod_iso</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">i.hom</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">i.hom</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">i.inv.monotone</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">prod.mk</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">continuous_hom.const_apply</span><span class=\"o\">,</span> <span class=\"n\">prod_lift_binary_fst</span><span class=\"o\">,</span> <span class=\"n\">prod_lift_binary_snd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">coe_comp</span><span class=\"o\">,</span> <span class=\"n\">is_limit.cone_point_unique_up_to_iso_hom_comp</span><span class=\"o\">,</span> <span class=\"n\">binary_fan.π_app_left</span><span class=\"o\">,</span> <span class=\"n\">prod.mk</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">preorder_hom.prod.fst_to_fun</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">omega_complete_partial_order.continuous_hom.prod.fst_to_fun</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">preorder_hom.prod.snd_to_fun</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">omega_complete_partial_order.continuous_hom.prod.snd_to_fun</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">coe_comp</span> <span class=\"n\">ωCPO</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ωCPO.of</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"bp\">↥</span><span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"n\">Y</span> <span class=\"n\">_</span> <span class=\"n\">continuous_hom.prod.snd</span> <span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">coe_comp</span> <span class=\"n\">ωCPO</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ωCPO.of</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"bp\">↥</span><span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"n\">X</span> <span class=\"n\">_</span> <span class=\"n\">continuous_hom.prod.fst</span> <span class=\"n\">star</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ωCPO.of_prod_iso_prod_fst</span><span class=\"o\">,</span> <span class=\"n\">ωCPO.of_prod_iso_prod_snd</span><span class=\"o\">,</span> <span class=\"n\">prod_lift_prod_fst</span><span class=\"o\">,</span> <span class=\"n\">prod_lift_prod_snd</span><span class=\"o\">,</span> <span class=\"n\">continuous_hom.const_apply</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>With a few lemmas on top. I could probably shrink it further but I'd like to move on to my main proof</p>",
        "id": 211209892,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600997896
    }
]