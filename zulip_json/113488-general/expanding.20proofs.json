[
    {
        "content": "<p>I was given this example code, which I don't fully understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n.min_fac</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n.min_fac</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">n.min_fac_pos.ne'</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>the point of this is that we want to be able to get what the value \"originally\" was in the <code>match</code>. But to me, in the RHS, there are 3 terms (the nat <code>x</code>, the proof of equality, and the arbitrary output natural number) whilst on the left hand side wwe only provide it <code>min_fac</code> and <code>rfl</code>. What is this synrax doing, then?</p>",
        "id": 321612858,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673866963
    },
    {
        "content": "<p>The trailing <code>ℕ</code> is not an input, right? It's the return type of your match.</p>",
        "id": 321613215,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673867090
    },
    {
        "content": "<p>but that's not how match usually works, no?</p>",
        "id": 321613902,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673867327
    },
    {
        "content": "<p>If you don't specify the type of a match, then its type will be your goal, fi that's what you mean.</p>",
        "id": 321614175,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673867414
    },
    {
        "content": "<p>I haven't tested it here, but you should be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n.min_fac</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n.min_fac</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">n.min_fac_pos.ne'</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>if you want to avoid writing the expected type of the match expression.</p>",
        "id": 321614689,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673867612
    },
    {
        "content": "<p>this does work, I specified all the types to try understand what was going on</p>",
        "id": 321614980,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673867743
    },
    {
        "content": "<p>so I guess this match creates this dependent function <code>\\forall x, n.min_fac = x -&gt; nat</code> and then the left hand side \"provides values to it\"?</p>",
        "id": 321615124,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673867789
    },
    {
        "content": "<p>Yeah, and this is something you can verify:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n.min_fac</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n.min_fac</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">n.min_fac_pos.ne'</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def foo : ℕ → ℕ :=</span>\n<span class=\"cm\">λ (n : ℕ), foo._match_1 n n.min_fac _</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo._match_1</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def foo._match_1 : Π (n x : ℕ), n.min_fac = x → ℕ :=</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 321615320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673867873
    },
    {
        "content": "<p>I wrote about this syntax a little <a href=\"https://proofassistants.stackexchange.com/a/529/347\">here</a></p>",
        "id": 321616146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673868129
    },
    {
        "content": "<p>There's a small implementation detail that this match function has some extra arguments corresponding to values it depends on (<code>n</code> in this case)</p>",
        "id": 321616370,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673868220
    },
    {
        "content": "<p>This is called the <em>convoy pattern</em> in <a href=\"http://adam.chlipala.net/cpdt/html/MoreDep.html\">http://adam.chlipala.net/cpdt/html/MoreDep.html</a></p>\n<blockquote>\n<p>we can extend the match to return functions over the free variables whose types we want to refine</p>\n</blockquote>",
        "id": 321618960,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673869003
    }
]