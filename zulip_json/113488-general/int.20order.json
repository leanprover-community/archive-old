[
    {
        "content": "<p>Why is most of <a href=\"https://github.com/leanprover/mathlib/blob/master/data/int/order.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/int/order.lean\">https://github.com/leanprover/mathlib/blob/master/data/int/order.lean</a> commented out? Do we have these theorems elsewhere?</p>",
        "id": 133888086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848567
    },
    {
        "content": "<p>Do we usually keep commented code in mathlib?</p>",
        "id": 133888105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848580
    },
    {
        "content": "<p>Oh, it seems we have them in core <span class=\"emoji emoji-1f62e\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 133888255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what's this mess?</p>",
        "id": 133888272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848690
    },
    {
        "content": "<p>that is a <em>very</em> old file, ported from lean 2 I guess, and the theorems in it were either never updated or never needed, or appeared in other places (e.g. core) so they just stayed as is</p>",
        "id": 133889045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536849297
    },
    {
        "content": "<p>I'm pretty sure the whole file can be deleted</p>",
        "id": 133889074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536849326
    },
    {
        "content": "<p>on the plus side, it's good to see that the VSCode highlighting now understands that it is a comment; it used to try highlighting it since the nested comment at the start confused it</p>",
        "id": 133889152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536849386
    },
    {
        "content": "<p>github highlighting doesn't</p>",
        "id": 133889165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem coe_nat_pos {n : ℕ} (Hpos : #nat n &gt; 0) : ↑n &gt; 0 :=\n</pre></div>\n\n\n<p>we haven't had that notation since lean 2</p>",
        "id": 133889226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536849465
    },
    {
        "content": "<p>I wanted to make sure that all the theorems in the file have equivalents before deleting it</p>",
        "id": 133889367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536849581
    },
    {
        "content": "<p>Yeah, let's do that before Lean 4</p>",
        "id": 133889457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849636
    },
    {
        "content": "<p>is that an exercise I can outsource?</p>",
        "id": 133889497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536849677
    },
    {
        "content": "<p>It depends whether you're currently working on maths or the theory of computability of ordinal stuff :-p</p>",
        "id": 133889539,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849717
    },
    {
        "content": "<p>does linear algebra count as maths?</p>",
        "id": 133889914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536849982
    },
    {
        "content": "<p>Is it over a semiring?</p>",
        "id": 133889927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849997
    },
    {
        "content": "<p>lattice of submodules</p>",
        "id": 133889947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536850021
    },
    {
        "content": "<p>no semirings</p>",
        "id": 133889956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536850026
    },
    {
        "content": "<p>I'm sure there is a trick, but let's say yes</p>",
        "id": 133889970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536850052
    },
    {
        "content": "<p>Since I agree that semimodules have dubious worth, I plan to only generalize theorems from modules as needed</p>",
        "id": 133889984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536850077
    },
    {
        "content": "<p>Chris asked me if semifields existed yesterday. I asked him if every semiring could be embedded into a ring and he said he didn't think so, so I told him I had no clue what a semifield was. He suggested that you take the field axioms and then remove all the ones mentioning <code>-</code>. I suppose that's one way of making new structures! I wasn't even sure if this gave a well-defined definition (in the sense that there might be more than one way of axiomatising fields)</p>",
        "id": 133890168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536850216
    },
    {
        "content": "<blockquote>\n<p>github highlighting doesn't</p>\n</blockquote>\n<p>There's <a href=\"https://github.com/leanprover/Lean.tmbundle/pull/7\" target=\"_blank\" title=\"https://github.com/leanprover/Lean.tmbundle/pull/7\">an open PR</a> to fix the github highlighting; it probably needs to be updated for the most recent fixes to the VS code extension though.</p>",
        "id": 133890191,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536850242
    },
    {
        "content": "<p>Wow, this thread is degenerating quickly <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 133890291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536850323
    },
    {
        "content": "<p>PRed <a href=\"https://github.com/leanprover/mathlib/pull/348\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/348\">https://github.com/leanprover/mathlib/pull/348</a></p>",
        "id": 133892163,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536851890
    },
    {
        "content": "<p>me and Kenny are playing multiplayer lean</p>",
        "id": 133892911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536852214
    },
    {
        "content": "<p>lots of things are there that weren't there last week. I should take this to the cocalc thread</p>",
        "id": 133892928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536852238
    },
    {
        "content": "<p>Do we already have <code>{α : Type*} [linear_ordered_ring α] {a : α} (h : a ≠ 0) : a * a &gt; 0</code>. I can prove it but it should be there already</p>",
        "id": 133895614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536854794
    },
    {
        "content": "<p>I guess it should have a name like <code>mul_self_pos</code>, and I don't see it.</p>",
        "id": 133895853,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536855074
    },
    {
        "content": "<p>I don't think it's there, and it's good to have</p>",
        "id": 133895951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536855147
    },
    {
        "content": "<p>There's <code>mul_pos</code> and <code>mul_self_nonneg</code> but maybe you found a hole :-)</p>",
        "id": 133895952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536855149
    },
    {
        "content": "<p>Indeed I called it <code>mul_self_pos</code>.</p>",
        "id": 133896064,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536855258
    },
    {
        "content": "<p>approve</p>",
        "id": 133896078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536855275
    },
    {
        "content": "<p>Mario, do you want a PR or would it be quicker for you to add it yourself?</p>",
        "id": 133896082,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536855279
    },
    {
        "content": "<p>A PR would contains something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">linear_ordered_ring</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_self_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">H</span> <span class=\"n\">H</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_self_pos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">mul_self_nonneg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">mul_self_eq_zero_iff</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">linear_ordered_ring</span>\n</pre></div>",
        "id": 133896851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856132
    },
    {
        "content": "<p>Or even one more $</p>",
        "id": 133896882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856187
    },
    {
        "content": "<p>I didn't include that other lemma, but it's true in any domain</p>",
        "id": 133896885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536856191
    },
    {
        "content": "<p>do we have that <code>linear_ordered_ring</code> implies domain?</p>",
        "id": 133896957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856222
    },
    {
        "content": "<p>I mean, as an instance</p>",
        "id": 133896964,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856231
    },
    {
        "content": "<p>except for that pesky 0 != 1 thing</p>",
        "id": 133896965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536856233
    },
    {
        "content": "<p>OF course I see (and use) the lemma</p>",
        "id": 133896981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856255
    },
    {
        "content": "<p>oh wait, 0 &lt; 1 in a linorder ring so it's okay</p>",
        "id": 133896985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536856260
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/commit/46502df9a61b131ee5e9265ec2593ab87b654b94\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/46502df9a61b131ee5e9265ec2593ab87b654b94\">https://github.com/leanprover/mathlib/commit/46502df9a61b131ee5e9265ec2593ab87b654b94</a> Sometimes diff tries to be too clever...</p>",
        "id": 133897078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856346
    },
    {
        "content": "<p>I mean, both lemmas have a hypothesis <code>ha</code> about something named <code>a</code>, so they're basically the same lemma</p>",
        "id": 133897207,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536856521
    },
    {
        "content": "<p>I can hear my students saying that</p>",
        "id": 133897219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856547
    },
    {
        "content": "<p>you permuted two lemmas!</p>",
        "id": 133898099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536857499
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 133900919,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536860599
    }
]