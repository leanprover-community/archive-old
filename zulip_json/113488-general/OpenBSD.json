[
    {
        "content": "<p>I'm trying to install Lean on OpenBSD.<br>\nFirst, I had to remove <code>-ldl</code> from the flags because the build process breaks with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">library</span> <span class=\"bp\">-</span><span class=\"n\">ldl</span>\n</code></pre></div>\n<p>Ideally, the build process should detect this by itself, so I added the following to <code>src/CMakeLists.txt</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -308,6 +308,10 @@ if (EMSCRIPTEN)</span>\n     # no dlopen\n elseif((${CYGWIN} EQUAL \"1\") OR (${CMAKE_SYSTEM_NAME} MATCHES \"Windows\"))\n   # TODO(Jared): config dlopen windows support\n<span class=\"gi\">+elseif(${CMAKE_SYSTEM_NAME} MATCHES \"OpenBSD\")</span>\n<span class=\"gi\">+  # OpenBSD does NOT require -lcrypt, -ldl, or -lrt.</span>\n<span class=\"gi\">+  # The functions provided by these libraries are part of libc.</span>\n<span class=\"gi\">+  # See: https://www.openbsd.org/faq/ports/guide.html</span>\n else()\n   set(EXTRA_LIBS ${EXTRA_LIBS} dl)\n endif()\n</code></pre></div>\n<p>This solved the missing <code>dl</code> problem but then I hit this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[ 68%] Built target bin_lean\nlibc++abi: terminating with uncaught exception of type lean::exception: failed to locate Lean executable location\n</code></pre></div>\n<p>Apparently the builder is trying to find the Lean executable via <code>/proc</code>, and OpenBSD doesn't use/have procfs.</p>\n<p>Obs: Using <code>-j2</code> it went much further:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[ 98%] Linking CXX executable lean_js\n[ 98%] Built target lean_js\ngmake: *** [Makefile:166: all] Error 2\n</code></pre></div>\n<p>...but I suppose the problem is the same.</p>\n<p>Found a relevant discussion <a href=\"https://leanprover-community.github.io/archive/stream/113489-new-members/topic/SIGABRT.20while.20building.20Lean.html\">here</a>, but FreeBSD does have procfs.</p>\n<p>Any ideas how I could go about solving this?</p>",
        "id": 244282964,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624974414
    },
    {
        "content": "<p>Just to check, which version of Lean?</p>",
        "id": 244283366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624974555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> is our local BSD expert. But afaik it was always a bit tricky to get lean up and running on BSD.</p>",
        "id": 244283575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624974626
    },
    {
        "content": "<blockquote>\n<p>Just to check, which version of Lean?</p>\n</blockquote>\n<p>I just <code>git clone https://github.com/leanprover/lean</code> so I guess it's 3.  I'll try now with lean4.</p>",
        "id": 244284278,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624974876
    },
    {
        "content": "<p>The leanprover/lean repo is outdated.  You should be using <code>https://github.com/leanprover-community/lean</code> instead.</p>",
        "id": 244284510,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624974973
    },
    {
        "content": "<blockquote>\n<p>But afaik it was always a bit tricky to get lean up and running on BSD.</p>\n</blockquote>\n<p>Many times it's just a matter of getting rid of some bureaucratic linuxism here or there.  I'm hoping that it is the case with Lean.</p>",
        "id": 244284544,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624974990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/OpenBSD/near/244284510\">said</a>:</p>\n<blockquote>\n<p>The leanprover/lean repo is outdated.  You should be using <code>https://github.com/leanprover-community/lean</code> instead.</p>\n</blockquote>\n<p>It's a bit misleading that <a href=\"https://github.com/leanprover/lean#readme\"><code>leanprover/lean</code>s readme</a> starts with \"Important Lean 3.4.2 is the latest release. \". Should we reword that to prevent new users falling into this trap?</p>\n<p>(which would requiring getting Leo to un-archive the repo, edit the readme, then re-archive it)</p>",
        "id": 244284641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624975043
    },
    {
        "content": "<blockquote>\n<p>The leanprover/lean repo is outdated.</p>\n</blockquote>\n<p>Thanks!  Cloning that one to give it a try, also trying lean4..</p>",
        "id": 244284717,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624975081
    },
    {
        "content": "<p>Worth noting that Lean 4 is pre-release, substantially different from Lean 3 and has no libraries at the moment. So depending on what you want to do, it might not be super useful even if you get it to work on BSD. ;)</p>",
        "id": 244290225,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1624976934
    },
    {
        "content": "<p>Although you can use Nix to build Lean 4, so if Nix supports OpenBSD, that should work.</p>",
        "id": 244290435,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1624977018
    },
    {
        "content": "<p>No Nix for OpenBSD :(</p>",
        "id": 244292197,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624977723
    },
    {
        "content": "<p>About lean3 vs lean4, if I can get either of them working I'll be happy...</p>",
        "id": 244292244,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624977729
    },
    {
        "content": "<p><code>leanprover-community/lean</code> gives me the exact same problem as the outdated <code>leanprover/lean</code>.  I'll try lean4 now.</p>",
        "id": 244292354,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624977778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/OpenBSD/near/244283575\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132889\">Jean Lo</span> is our local BSD expert. But afaik it was always a bit tricky to get lean up and running on BSD.</p>\n</blockquote>\n<p>I'm far from an expert! I only made a lot of noise flailing around trying to get this to work around this time last year <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>I'm not sure if <span class=\"user-mention\" data-user-id=\"384773\">@Thanos Tsouanas</span> has also seen <a href=\"#narrow/stream/113488-general/topic/mystery.20mathlib.20errors.20in.20.60data.2Flist.60/near/198687133\">this conversation</a>, and the <a href=\"https://github.com/jlpaca/lean-freebsd/commit/d679a73ca8889e79a28dbf5a601ff4ba9c6aef1b\">patch</a> that replaced the bit of code that tries to follow the <code>/proc/&lt;pid&gt;/exe</code> symlink (which is causing the problem you are seeing) with  a <code>sysctl</code> call which works on BSD without procfs. That got  (the then-current version, 3.14.0, of) Lean to compile, but farther down the thread we discover that there seem to be other problems between 'producing a binary that runs' and 'producing a working Lean'.</p>\n<p>Hoping that this is of some help. Unfortunately that was as far as I got before I gave up for the time, so I'd love to know if this gets figured out!</p>",
        "id": 244306266,
        "sender_full_name": "Jean Lo",
        "timestamp": 1624982985
    },
    {
        "content": "<p>About lean4: I needed to tweak a few similar things here and there, but I cannot get past this point:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[ 82%] Built target leancpp\nerror: failed to locate application\n/cave/thanos/lean/lean4/build/release/stage1/bin/../share/lean/lean.mk:99: ../build/release/stage1/lib/temp/Init.depend: No such file or directory\nmake[7]: *** [/cave/thanos/lean/lean4/build/release/stage1/bin/../share/lean/lean.mk:51: ../build/release/stage1/lib/temp/Init.depend] Error 1\n</code></pre></div>\n<p>Not sure what this DEPS at line 99 of <code>lean.mk</code> is supposed to include, nor if a <code>Init.depend</code> file should really exist.</p>",
        "id": 244316397,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624987265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> , thanks for the link, I had not seen that conversation; I'll look into it and the corresponding patch.<br>\nDo you remember what problems were encountered \"farther down the thread\"?</p>",
        "id": 244316671,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624987365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384773\">Thanos Tsouanas</span> <a href=\"#narrow/stream/113488-general/topic/OpenBSD/near/244316671\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132889\">Jean Lo</span> , thanks for the link, I had not seen that conversation; I'll look into it and the corresponding patch.<br>\nDo you remember what problems were encountered \"farther down the thread\"?</p>\n</blockquote>\n<p>Unfortunately I don't have a lot to say beyond what is written down in the thread itself: that the compiled binary trips over when it tries to compile mathlib, that we tried to see if we could figure out what was wrong by looking at which unit tests it failed, and that we didn't come up with anything conclusive in the end, I think. There are <a href=\"#narrow/stream/113488-general/topic/mystery.20mathlib.20errors.20in.20.60data.2Flist.60/near/198692709\">test logs</a> posted in the thread, but since this is an old version of Lean, I suspect those logs are less enlightening than the ones that you can get by running the tests of the current version of Lean once it's built.</p>",
        "id": 244332323,
        "sender_full_name": "Jean Lo",
        "timestamp": 1624994031
    },
    {
        "content": "<p>Thanks!  Since <code>lean4</code> failed to build as well, I'll go back to <code>lean3</code>, try the FreeBSD patches on OpenBSD with possible adjustments and see if I can get it to compile and run those tests.  On it..</p>",
        "id": 244333039,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1624994303
    },
    {
        "content": "<p>I managed to build a binary but the test results are worse than the previous ones (which were both on an older version of lean and also on a different OS (FreeBSD):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>67% tests passed, 467 tests failed out of 1415\n</code></pre></div>\n<p>I'm attatching the fails. <a href=\"/user_uploads/3121/o0XO-j-KcMfvHY1KW7VIdsrA/OpenBSD_test_fails\">OpenBSD_test_fails</a></p>",
        "id": 244424452,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625060274
    },
    {
        "content": "<p>(How) can I get a more verbose output on those failed tests?</p>",
        "id": 244424527,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625060297
    },
    {
        "content": "<p><strong>Progress!</strong>  Turns out that all problems so far have been bit of linuxism here and there!  465 of those 467 failed tests was due to a non-posix flag to <code>diff</code>, so switching to GNU diff (available on OpenBSD as a package) we now have <strong>99% tests passed!</strong>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>99% tests passed, 2 tests failed out of 1415\n\nTotal Test time (real) = 612.87 sec\n\nThe following tests FAILED:\n          1 - style_check (Failed)\n        626 - leanruntest_async_map.lean (Failed)\n</code></pre></div>",
        "id": 244556497,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625141994
    },
    {
        "content": "<p>The first one, <code>style_check</code> isn't important cause all its errors are about the files I had to tamper with so it's easily fixable and inessential.</p>",
        "id": 244556615,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625142049
    },
    {
        "content": "<p>So there's currently exactly one failed test: <code>626 - leanruntest_async_map.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>626/1415 Testing: leanruntest_async_map.lean\n626/1415 Test: leanruntest_async_map.lean\nCommand: \"/usr/local/bin/bash\" \"./test_single.sh\" \"/cave/thanos/lean/lean/build/release/shell/lean\" \"async_map.lean\"\nDirectory: /cave/thanos/lean/lean/src/../tests/lean/run\n\"leanruntest_async_map.lean\" start time: Jul 01 09:00 -03\nOutput:\n----------------------------------------------------------\n-- testing async_map.lean\n-- using result from test_all.sh\nfailed async_map.lean\n&lt;end of output&gt;\nTest time =   0.03 sec\n----------------------------------------------------------\nTest Failed.\n\"leanruntest_async_map.lean\" end time: Jul 01 09:00 -03\n\"leanruntest_async_map.lean\" time elapsed: 00:00:00\n</code></pre></div>",
        "id": 244556797,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625142164
    },
    {
        "content": "<p><code>async_map.lean</code> is this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list.async_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">task.delay</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">task.get</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"n\">list.range</span> <span class=\"mi\">1000000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">async_map</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 244557258,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625142444
    },
    {
        "content": "<p>The output of the failed test doesn't seem particularly helpful.  Anybody can share some light on what this <code>async_map</code> is, if/how it is using the system, etc.?</p>",
        "id": 244557660,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625142664
    },
    {
        "content": "<p>Can you run <code>lean async_map.lean</code> and post the error you get?</p>",
        "id": 244557812,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625142744
    },
    {
        "content": "<p>Oh, I hadn't realized it was so simple to run those tests, thanks!</p>",
        "id": 244558750,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625143273
    },
    {
        "content": "<p>So, <code>lean async_map.lean</code> produced no standard output but got Segmentation fault.</p>",
        "id": 244558933,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625143356
    },
    {
        "content": "<p>Ok, somewhat of a success with this failed test too:<br>\nChanging the <code>1000000</code> of that <code>#eval</code> to a smaller number like <code>1000</code> completed the test successfully.<br>\nI changed it back to <code>1000000</code> but used <code>ulimit -Sd 8388608</code> and again, the test completes successfully.</p>",
        "id": 244577420,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625150626
    },
    {
        "content": "<p>So: with minor/insignificant tweaks <strong>lean3 compiles on OpenBSD and passes 100% of the tests!</strong> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 244577653,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625150698
    },
    {
        "content": "<p>One thing that might be worrying, but I am probably wrong: usually one would use <code>ulimit -Sd</code> to avoid \"out of memory\" errors, not segfaults.  However, this segfault went away this way.  It gives me the impression that there might be something wrong in the code that leads to an unnecessary segfault.</p>",
        "id": 244578439,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625150987
    },
    {
        "content": "<p>The segfault looks like a stack overflow to me.  On linux, we can detect the stack size (see <code>stackinfo.cpp</code> and <code>thread.cpp</code>) and throw an exception instead of overflowing.  Maybe this doesn't work on openbsd?</p>",
        "id": 244578857,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625151121
    },
    {
        "content": "<p>Hmmm I found two different <code>stackinfo.cpp</code>:<br>\n<code>tests/util/stackinfo.cpp</code> and <code>util/stackinfo.cpp</code><br>\nI think that the non-tests version should work on OpenBSD, it seems to be calling <a href=\"https://man.openbsd.org/getrlimit.2\">getrlimit(2)</a>.</p>",
        "id": 244579781,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625151455
    },
    {
        "content": "<p>Yeah, I'm just guessing here.  Can you run lean in a debugger and capture a stacktrace?</p>",
        "id": 244580397,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625151657
    },
    {
        "content": "<p>The <code>__APPLE__</code> version and the \"else\" version are identical, and should work correctly on OpenBSD.<br>\nBut I'm not sure this <code>stackinfo.cpp</code> is relevant when I'm running the tests, maybe the other one is?</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#if defined(LEAN_WINDOWS)</span>\n<span class=\"kt\">size_t</span> <span class=\"nf\">get_stack_size</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">LEAN_WIN_STACK_SIZE</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">lthread</span><span class=\"o\">::</span><span class=\"n\">get_thread_stack_size</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#elif defined (__APPLE__)</span>\n<span class=\"kt\">size_t</span> <span class=\"nf\">get_stack_size</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Retrieve stack size of the main thread.</span>\n        <span class=\"k\">struct</span> <span class=\"nc\">rlimit</span> <span class=\"n\">curr</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">getrlimit</span><span class=\"p\">(</span><span class=\"n\">RLIMIT_STACK</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">curr</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">throw_get_stack_size_failed</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">rlim_cur</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">lthread</span><span class=\"o\">::</span><span class=\"n\">get_thread_stack_size</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#else</span>\n<span class=\"kt\">size_t</span> <span class=\"nf\">get_stack_size</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Retrieve stack size of the main thread.</span>\n        <span class=\"k\">struct</span> <span class=\"nc\">rlimit</span> <span class=\"n\">curr</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">getrlimit</span><span class=\"p\">(</span><span class=\"n\">RLIMIT_STACK</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">curr</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">throw_get_stack_size_failed</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">rlim_cur</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">lthread</span><span class=\"o\">::</span><span class=\"n\">get_thread_stack_size</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#endif</span>\n</code></pre></div>",
        "id": 244580414,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625151662
    },
    {
        "content": "<p>(Is there a reason that the two <code>stackinfo.cpp</code> files are different, or have they just fallen out of sync?)</p>",
        "id": 244581200,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625151944
    },
    {
        "content": "<p>There's only one <code>stackinfo.cpp</code> file, and it's in <code>src/util/stackinfo.cpp</code>.  All of this is complete speculation, but a segfault that goes away with a ulimit change sounds very much like a stack overflow, and the detection code is not particularly portable.  I wouldn't be surprised if <code>save_stack_info</code> was miscompiled on openbsd, or if the thread stack size was not set correctly (or silently truncated by the wrong ulimit setting?).</p>",
        "id": 244590643,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625155684
    },
    {
        "content": "<blockquote>\n<p>There's only one <code>stackinfo.cpp</code> file, and it's in <code>src/util/stackinfo.cpp</code>.</p>\n</blockquote>\n<p>There are two:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/lean/blob/master/src/util/stackinfo.cpp\">https://github.com/leanprover-community/lean/blob/master/src/util/stackinfo.cpp</a></li>\n<li><a href=\"https://github.com/leanprover-community/lean/blob/master/src/tests/util/stackinfo.cpp\">https://github.com/leanprover-community/lean/blob/master/src/tests/util/stackinfo.cpp</a></li>\n</ul>",
        "id": 244634858,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625178618
    },
    {
        "content": "<p>Playing with different <code>ulimit</code> values I got some that it segfaults, one non-reproducable that SIGABRT'ed, and for small values it seem to be stuck (it was running 6 hours without any output).  Starting from values of about 2G it terminates successfully.</p>",
        "id": 244635185,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625178846
    },
    {
        "content": "<p>Some questions, in no particular order:<br>\n(a) Does it seem safe to assume that Lean should work fine on my system given that it passed 100% of the tests?<br>\n(b) On the <code>async_map</code> test, the number <code>1000000</code> has any particular reason behind it?  I mean.. would it serve the same purpose if it was changed to <code>100000</code> or to <code>10000000</code>?<br>\n(c) Still curious about the two <code>stackinfo.cpp</code>, which from <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> 's answer I suppose the second one shouldn't exist..?<br>\n(d) Any hopes in getting someone to apply the tweaks \"upstream\" so that installation on OpenBSD becomes trivial?  If so, who would be the right person to <del>bug</del>help with this?</p>",
        "id": 244638723,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625181220
    },
    {
        "content": "<p>The <code>tests</code> one is the the test (as the name implies), it's not used in lean.</p>",
        "id": 244667594,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625210573
    },
    {
        "content": "<p>The meaning of 1000000 is \"it should work for large lists\".  If it can be worked around by setting the correct ulimit, then I would leave the test as it is.</p>",
        "id": 244667695,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625210650
    },
    {
        "content": "<p>For other portability fixes, please file a PR at <a href=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a></p>",
        "id": 244667741,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625210669
    },
    {
        "content": "<p>Thanks a lot for the replies, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>! :D</p>\n<blockquote>\n<p>The tests one is the the test (as the name implies), it's not used in lean.</p>\n</blockquote>\n<p>Their methods of getting the stack size are different (trying to understand why), so when the tests are run, which of the two is used?</p>\n<blockquote>\n<p>The meaning of 1000000 is \"it should work for large lists\".</p>\n</blockquote>\n<p>Thought so!  I was wondering if there is something in mathlib (or some other widely used lib) that specifically demands \"around such a high number\" already.  I still think that the ulimit \"fix\" is more of a dirty hack than an actual fix.  Curious if on mac os it passes this test with a \"low\" ulimit like 1500000.</p>",
        "id": 244694846,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625228852
    },
    {
        "content": "<blockquote>\n<p>For other portability fixes, please file a PR</p>\n</blockquote>\n<p>Perfect, thanks again!</p>",
        "id": 244694967,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625228898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384773\">Thanos Tsouanas</span> <a href=\"#narrow/stream/113488-general/topic/OpenBSD/near/244694846\">said</a>:</p>\n<blockquote>\n<p>Their methods of getting the stack size are different (trying to understand why), so when the tests are run, which of the two is used?</p>\n</blockquote>\n<p>I'm not sure I see the difference.  Both the test as well as Lean core use <code>save_stack_info</code> to save a pointer to the start of the stack, and then use <code>get_used_stack_size</code> to see how far are now away from the original pointer (= how much stack space we've used).</p>\n<p>In either case, the test that fails for you makes no use of <code>src/tests/util/stackinfo.cpp</code> whatsoever.</p>",
        "id": 244700130,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625231676
    },
    {
        "content": "<p>Ah, I see now.  The tests one actually uses the core one, so the things that seemed to be missing, are actually there, just under the carpet.</p>\n<blockquote>\n<p>In either case, the test that fails for you makes no use of src/tests/util/stackinfo.cpp whatsoever.</p>\n</blockquote>\n<p>Perfect, so one less place to look for possible fixes.</p>",
        "id": 244724812,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625242356
    },
    {
        "content": "<p>If someone with access to a mac os system can check this particular test (<code>async_map</code>) with a few low <code>ulimit</code>values like 1500000, 1000000, etc. , I'd be grateful.</p>",
        "id": 244725040,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625242482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384773\">Thanos Tsouanas</span> <a href=\"#narrow/stream/113488-general/topic/OpenBSD/near/244577653\">said</a>:</p>\n<blockquote>\n<p>So: with minor/insignificant tweaks <strong>lean3 compiles on OpenBSD and passes 100% of the tests!</strong> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n</blockquote>\n<p>Is there any chance that you will build a port out of this?</p>",
        "id": 244725321,
        "sender_full_name": "Moritz Buhl",
        "timestamp": 1625242641
    },
    {
        "content": "<p>That's the idea but the best route is to first see if we can get those tweaks upstream.  I will file a PR as <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> suggested.  But first I'd like to use it a bit to see if it's usable/stable-ish.</p>",
        "id": 244734064,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1625247019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384773\">Thanos Tsouanas</span> <a href=\"#narrow/stream/113488-general/topic/OpenBSD/near/244577653\">said</a>:</p>\n<blockquote>\n<p>So: with minor/insignificant tweaks <strong>lean3 compiles on OpenBSD and passes 100% of the tests!</strong> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n</blockquote>\n<p>Love to see this! thanks so much for your work on this &amp; eagerly awaiting the fixes to be upstreamed.</p>",
        "id": 244804394,
        "sender_full_name": "Jean Lo",
        "timestamp": 1625317467
    },
    {
        "content": "<p>So, took a break to play the NNG, seemed to work great on my browser (though it seems that sometimes one needs to hit an extra enter to get an extra blank line, in order for it to register that it's complete).</p>\n<p>Now back on trying to run things on my own system.<br>\nI see elan is not available, but leanproject installed fine.<br>\nI tried running it inside the <code>tutorials</code> dir, the <code>leanproject check</code> runs fine and lies to my face with a <em>\"Everything looks fine.\"</em> message.<br>\nBut trying to run something like <code>leanproject build</code> I get:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Errno 2] No such file or directory: 'leanpkg'\n</code></pre></div>",
        "id": 246002558,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626288502
    },
    {
        "content": "<p>How/where/when is leanpkg normally installed?</p>",
        "id": 246002606,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626288531
    },
    {
        "content": "<p><code>leanpkg</code> comes with <code>lean</code>, you might try adding an alias to it.</p>",
        "id": 246002665,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626288568
    },
    {
        "content": "<p>Lean-mode seems to be working OK in Emacs, but I would like to install mathlib (even if it's in a \"manual\" way, and not auto-handled by elan/leanproject and whatnot).</p>",
        "id": 246002666,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626288568
    },
    {
        "content": "<p>Aaaaah!  Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , I had missed that!</p>",
        "id": 246002844,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626288647
    },
    {
        "content": "<p>I think you can have it point to <code>bin/leanpkg</code> in your <code>lean</code> directory.</p>",
        "id": 246002924,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626288695
    },
    {
        "content": "<p>Yes, that's what I did, and now <code>leanproject build</code> is downloading some stuff..</p>",
        "id": 246003152,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626288810
    },
    {
        "content": "<p>Still, would it be possible/sensible to simply install mathlib (and update it every now and then) somewhere under lean's path and use lean independently of the elan/leanproject toolchain?  (Via Emacs's lean-mode.)</p>",
        "id": 246003318,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626288873
    },
    {
        "content": "<p>It is possible with <code>leanproject global-install</code>, but not recommended since different projects can depend on different versions of mathlib.</p>",
        "id": 246003669,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626289067
    },
    {
        "content": "<p>So if elan was available for OpenBSD, elan would be the tool to organize all this for me, right?  Having various versions installed on my system (of lean, mathlib, etc.), and selecting the right one for each project based on the project's <code>leanpkg.toml</code>.  Is it more-or-less like this?</p>",
        "id": 246004440,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626289388
    },
    {
        "content": "<p>Yep, that's right! In case you haven't already seen it, there's a bit of explanation here: <a href=\"https://leanprover-community.github.io/toolchain.html\">https://leanprover-community.github.io/toolchain.html</a></p>",
        "id": 246005330,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626289771
    },
    {
        "content": "<p>Thanks!!  I had come across this website, but lost it afterwards and was looking for it!  Ehehe...  Btw, I think in this site the text about adding a symlink to <code>lean</code> should be altered to mention <code>leanpkg</code> as well.</p>",
        "id": 246006780,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626290462
    },
    {
        "content": "<p>Good idea! Do you mind making a PR? The source file is here: <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/templates/toolchain.md\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/templates/toolchain.md</a></p>",
        "id": 246007116,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626290543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384773\">Thanos Tsouanas</span> <a href=\"#narrow/stream/113488-general/topic/OpenBSD/near/246004440\">said</a>:</p>\n<blockquote>\n<p>So if elan was available for OpenBSD, elan would be the tool to organize all this for me, right?</p>\n</blockquote>\n<p>Don't expect too much.  elan downloads binary builds of lean (and we only build for amd64 linux and some other proprietary operating systems).  You can still use <code>elan</code> to manage locally-built versions of lean, but it's only half the fun.</p>",
        "id": 246008860,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626291340
    },
    {
        "content": "<p>There's no reason we couldn't distribute OpenBSD binaries though, if Thanos submits a suitable patch.</p>",
        "id": 246009003,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626291410
    },
    {
        "content": "<p>Oh wait, I guess it might be tricky to build with GitHub actions.</p>",
        "id": 246009072,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626291453
    },
    {
        "content": "<p>Yes, that's also the reason we don't have builds for aarch64 linux and aarch64 mac.</p>",
        "id": 246009210,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626291497
    },
    {
        "content": "<p>What is the deal with GitHub actions?  Sorry, I'm afraid I've only used github for personal projects so far, which is why I'm delaying the PR's here.  But getting on to it soon.</p>",
        "id": 246023130,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626297496
    },
    {
        "content": "<p>(And that <code>leanproject build</code> inside the tutorials is still compiling, so it really seems like a good idea to have binary versions available.. )</p>",
        "id": 246023261,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626297576
    },
    {
        "content": "<p>Once i'm done with the tutorials, in order to avoid recompiling the whole thing, could I simply copy the mathlib dir in some \"more general\" place and then add it to lean's path by editing <code>~/.lean/leanpkg.path</code> ?</p>",
        "id": 246023462,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626297694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384773\">Thanos Tsouanas</span> <a href=\"#narrow/stream/113488-general/topic/OpenBSD/near/246002558\">said</a>:</p>\n<blockquote>\n<p>I tried running it inside the <code>tutorials</code> dir, the <code>leanproject check</code> runs fine and lies to my face with a <em>\"Everything looks fine.\"</em> message.</p>\n</blockquote>\n<p>That's not a lie, that's you misunderstanding what this command is checking. And, as explained in the first paragraph of the <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/README.md\">README</a>:</p>\n<blockquote>\n<p>the tools described here won't give you anything if Lean itself is not available</p>\n</blockquote>",
        "id": 246025495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626298849
    },
    {
        "content": "<p>Hah, thanks, I was half-joking about the lying thing.  I wasn't expecting <code>leanproject</code> to actually come with lean/leanpkg included or anything like that; I just thought that missing... lean would be mentioned at least as a warning.</p>",
        "id": 246026544,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626299485
    },
    {
        "content": "<p>But it does make sense after your message, so thanks again!  I guess it checks the project directory itself and not the toolkit one might need to actually use such project.</p>",
        "id": 246026671,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626299551
    },
    {
        "content": "<p><del>never mind this sort of thing was already mentioned above</del></p>",
        "id": 246054143,
        "sender_full_name": "Julian Berman",
        "timestamp": 1626327766
    },
    {
        "content": "<p>Actually this check command could be removed since it fights an issue that is no longer present. As explained in <code>leanprojet -h</code>, it only checks that olean files (ie compiled lean files) are more recent than their source. Lean used to use timestamps to decide whether it should recompile stuff, and there were ways to mess up the timestamps without actually needing to recompile, hence wasting a lot of time and computing power.</p>",
        "id": 246061872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626335364
    },
    {
        "content": "<p>(I noticed also that in the source it checks both mathlib and core olean files, but in the description it mentions only mathlib ones.)<br>\nThanks for the explanation, and good to know that the to-compile-or-not-to-compile became more sophisticated!</p>",
        "id": 246334902,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1626543113
    },
    {
        "content": "<p>Any news on this?</p>",
        "id": 247872840,
        "sender_full_name": "Moritz Buhl",
        "timestamp": 1627845395
    },
    {
        "content": "<p>I think tagging <span class=\"user-mention\" data-user-id=\"384773\">@Thanos Tsouanas</span> to be sure he sees this is a good idea.</p>",
        "id": 247874230,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1627847524
    },
    {
        "content": "<p>I thought about the <code>get_exe_location</code> function a bit:<br>\nOpenBSD does not offer a way to locate the binary. It would be possible to use argv[0] and PATH (if argv[0] is only the binary name) or cwd (if it is a path). Getting argv0 to the utility function should be terrible. And all this for two locations where this function is called.<br>\nJava is using the environment variable <code>JAVA_HOME</code> in a similar way, is this an option for lean3?</p>",
        "id": 249209449,
        "sender_full_name": "Moritz Buhl",
        "timestamp": 1628757131
    },
    {
        "content": "<p>tb has this <a href=\"https://marc.info/?l=openbsd-ports&amp;m=162914200004765&amp;w=2\">https://marc.info/?l=openbsd-ports&amp;m=162914200004765&amp;w=2</a></p>",
        "id": 249779062,
        "sender_full_name": "Moritz Buhl",
        "timestamp": 1629234511
    },
    {
        "content": "<p>Thanks for tagging me <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, and sorry for the 4-month hiatus over here!<br>\nHappy and grateful to see that in the meantime tb created a Lean port for OpenBSD, as <span class=\"user-mention\" data-user-id=\"424625\">@Moritz Buhl</span> mentioned, making it so much easier to play with Lean natively!  (Lean v3.32.1 made it to the OpenBSD 7.0 release, and since last week OpenBSD-current has v3.35.1!)</p>",
        "id": 261445648,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636934408
    }
]