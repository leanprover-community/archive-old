[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">R</span> <span class=\"n\">R</span>\n</code></pre></div>\n\n\n<p>Error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">R</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 198588693,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590335668
    },
    {
        "content": "<p>why does <code>R R</code> give an error?</p>",
        "id": 198588695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590335674
    },
    {
        "content": "<p>oh I think this example makes the reason clearer:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 198588813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590335841
    },
    {
        "content": "<p>then where is my Russell's paradox?</p>",
        "id": 198588866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590335917
    },
    {
        "content": "<p>more nonsense:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">true</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 198588881,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590335959
    },
    {
        "content": "<p>In your first and second examples, <code>R</code> can't be applied to anything, since <code>R</code> is a <code>Prop</code>, not a Pi type. On the other hand, in your first example, given a term <code>r : R</code> it makes sense to write <code>r R</code>, but this doesn't return a <code>Prop</code>, it returns a proof of a <code>Prop</code> (specifically, a proof of <code>¬ R</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">r</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 198589852,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590337497
    }
]