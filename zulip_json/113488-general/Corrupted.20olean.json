[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16281\">#16281</a> is currently failing CI because <a href=\"https://tqft.net/mathlib/order/imp\">file#order/imp</a> has a corrupted olean. I tried merging master but that didn't fix anything. The file is absolutely fine in local. What do I do? <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 295866794,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661785140
    },
    {
        "content": "<p>Either <code>bors r+</code> and hope for the best (which should be fine, because bors will squash and rebase your changes and the corrupted olean won't be used), or open a separate rebased PR. The corrupted olean was generated by <code>nael</code>, which is no longer in use, so this shouldn't happen again.</p>",
        "id": 295958905,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1661793633
    },
    {
        "content": "<p>Wait, I think <code>62047e97143e5f2a97ce33208df9f80b7f6e7266</code> doesn't build:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"mi\">1252</span><span class=\"o\">:</span><span class=\"mi\">67</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">sup_sdiff_self_left</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">\\</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"mi\">1250</span><span class=\"o\">:</span><span class=\"mi\">67</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">sup_sdiff_self_right</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"bp\">\\</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 295961349,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1661794390
    },
    {
        "content": "<p>Yeah, I'm expecting this kind of error, so the corrupted file is annoying...</p>",
        "id": 295967602,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661796380
    },
    {
        "content": "<p>Next up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">hom</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"mi\">811</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">hom</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"mi\">806</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n</code></pre></div>\n<p>This is <code>order_iso.map_inf</code>.</p>",
        "id": 296001617,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1661807571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Please revert my commit after CI runs :) If it doesn't build after reverting, then I think you should just start another branch on top of current master.</p>\n<p>Edit: Never mind, my previous approach was not as hacky as it should have been. I just added and removed a  <code>rm src/order/imp.olean</code> build step to <code>build.yml</code>, so things should be working now.</p>",
        "id": 296003159,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1661808262
    },
    {
        "content": "<p>Note that when CI fails, the second call of <code>lean --make</code> to try to fix bad oleans doesn't run</p>",
        "id": 296076528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661856602
    }
]