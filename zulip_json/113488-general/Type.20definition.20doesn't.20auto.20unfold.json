[
    {
        "content": "<p>Hi all,</p>\n<p>I defined <code>mat n</code> as a shorthand for square real matrix with size n.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>But it doesn't seems to be unfolded by type elaborator? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">mat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>I tried add <code>@[reducible]</code> to definition of mat, but that makes everything unfold themselves and create more errors as well ...</p>",
        "id": 276945239,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648512725
    },
    {
        "content": "<p>Or is there better way to create type aliases?</p>",
        "id": 276945341,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648512853
    },
    {
        "content": "<p>It'd help to have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of what's causing that error, but it looks like <code>ℝ</code> isn't being included in the <code>mat</code> expression. (I'd expect to see <code>mat n ℝ →L[ℝ] ℝ</code>).</p>",
        "id": 276945432,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648512972
    },
    {
        "content": "<p>Oh sorry that was a typo, fixed</p>",
        "id": 276945447,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648513023
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.adjugate</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span> <span class=\"n\">finset</span> <span class=\"n\">matrix</span> <span class=\"n\">complex</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">real.nondiscrete_normed_field</span> <span class=\"n\">matrix.normed_group</span> <span class=\"n\">matrix.normed_space</span> <span class=\"c1\">-- introduce an arbitrary canonical instance of normed_group and normed_space.</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">variable</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">jacobi</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)]:</span>\n  <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"bp\">∘</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.trace</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f'comp</span> <span class=\"o\">:=</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"bp\">∘</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hmh</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f'det</span><span class=\"o\">:</span> <span class=\"n\">mat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">f1h</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f'A</span><span class=\"o\">:</span>  <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">f2h</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">f'det</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276945599,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648513221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431349\">@Shi Zhengyu</span> Practice making a truly <em>minimal</em> working example (see the instructions at <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>).  Here it would be something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">real.nondiscrete_normed_field</span> <span class=\"n\">matrix.normed_group</span> <span class=\"n\">matrix.normed_space</span> <span class=\"c1\">-- introduce an arbitrary canonical instance of normed_group and normed_space.</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">f'det</span><span class=\"o\">:</span> <span class=\"n\">mat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">f1h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f'det</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276946329,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648514077
    },
    {
        "content": "<p>And in answer to your questions:</p>\n<ul>\n<li>You don't want a type synonym here; it just causes headaches when Lean can't find the information it needs through the wall of a new variable definition.  If you hate writing out <code>matrix (fin n) (fin n) ℝ</code> over and over, you can use <em>notation</em>.</li>\n<li>I think you need some parentheses.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">real.nondiscrete_normed_field</span> <span class=\"n\">matrix.normed_group</span> <span class=\"n\">matrix.normed_space</span> <span class=\"c1\">-- introduce an arbitrary canonical instance of normed_group and normed_space.</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">mat</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">f'det</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">f1h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f'det</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276946548,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648514307
    },
    {
        "content": "<p>Also a bit of advice about your original problem, see below for a modified version:</p>\n<ul>\n<li>no need to restrict to the reals</li>\n<li><code>has_deriv_at</code> is typically more user-friendly than <code>deriv</code>+<code>differentiable</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.adjugate</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span>  <span class=\"n\">matrix.normed_group</span> <span class=\"n\">matrix.normed_space</span> <span class=\"c1\">-- introduce an arbitrary canonical instance of normed_group and normed_space.</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">mat</span><span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">𝕜</span>\n<span class=\"kd\">variable</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">variable</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">jacobi</span> <span class=\"o\">(</span><span class=\"n\">A₀</span> <span class=\"o\">:</span> <span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">A</span> <span class=\"n\">A₀</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"bp\">∘</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"n\">A₀</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276946851,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648514700
    },
    {
        "content": "<p>Finally, I think it would be better not to phrase it in terms of \"if <code>A</code> has this derivative then <code>det ∘ A</code> has that derivative\", but as a multivariable statement about the derivative of the determinant function.</p>",
        "id": 276947043,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648514958
    },
    {
        "content": "<p>Like this maybe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.adjugate</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.finite_dimension</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span>  <span class=\"n\">matrix.normed_group</span> <span class=\"n\">matrix.normed_space</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">mat</span><span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">𝕜</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">jacobi'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_fderiv_at</span>\n    <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">linear_map.to_continuous_linear_map</span> <span class=\"o\">((</span><span class=\"n\">matrix.trace</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">∘ₗ</span> <span class=\"o\">(</span><span class=\"n\">algebra.lmul_left</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">))))</span>\n    <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(I think <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> has worked on related things.)</p>",
        "id": 276947760,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648515764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431349\">@Shi Zhengyu</span>, is it a coincidence that you're working on this after I mentioned it in a thread last night?</p>",
        "id": 276962661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648535063
    },
    {
        "content": "<p>(I assumed you were working together!)</p>",
        "id": 276962677,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648535090
    },
    {
        "content": "<p>Don't let that dissuade you from working on it!</p>",
        "id": 276962866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648535323
    },
    {
        "content": "<p>Heather, how were you able to avoid a proof obligation in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_continuous_linear_map\">docs#linear_map.to_continuous_linear_map</a> above? (Edit: ah, I confused it with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.mk_continuous\">docs#linear_map.mk_continuous</a>)</p>",
        "id": 276962892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648535373
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13009\">#13009</a> was motivated by the assumption I was going to have to provide one</p>",
        "id": 276962962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648535418
    },
    {
        "content": "<p>I assumed <code>[complete_space 𝕜]</code></p>",
        "id": 276963005,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648535481
    },
    {
        "content": "<p>But indeed, the trace should be a bounded linear map without that assumption.</p>",
        "id": 276963101,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648535551
    },
    {
        "content": "<p>And so should left-multiplication in a normed algebra.</p>",
        "id": 276963111,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648535569
    },
    {
        "content": "<p>What's your opinion on the right way to state this; by creating <code>matrix.trace_clm</code>, <code>mstrix.adjugate_clm</code>, or by promoting the linear map to a continuous one at the last moment?</p>",
        "id": 276963844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648536213
    },
    {
        "content": "<p>I think <code>matrix.trace_clm</code> and <code>matrix.adjugate_clm</code> would be good to have.  (Over topological or uniform rings, whatever works, rather than normed rings.)</p>",
        "id": 276964053,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648536383
    },
    {
        "content": "<p>Er, wait -- the adjugate's not linear.</p>",
        "id": 276964105,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648536453
    },
    {
        "content": "<p>So just the trace one :)</p>",
        "id": 276964171,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648536497
    },
    {
        "content": "<p>Right, I already have a proof trace is continuous</p>",
        "id": 276964407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648536695
    },
    {
        "content": "<p>Then you should be good to go with making</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">matrix.trace</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">∘ₗ</span> <span class=\"o\">(</span><span class=\"n\">algebra.lmul_left</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>a \"native\" continuous linear map.</p>",
        "id": 276964724,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648536950
    },
    {
        "content": "<p>I think I'll let <span class=\"user-mention\" data-user-id=\"431349\">@Shi Zhengyu</span> have a go at that once <a href=\"https://github.com/leanprover-community/mathlib/pull/13009\">#13009</a> is merged, rather than treading on their toes</p>",
        "id": 276967461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648539089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Type.20definition.20doesn't.20auto.20unfold/near/276962661\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"431349\">Shi Zhengyu</span>, is it a coincidence that you're working on this after I mentioned it in a thread last night?</p>\n</blockquote>\n<p>Oh what a coincidence! we've been trying to formalize Cauchy's Interlace Theorem, but then we met difficulty and decided to turn to Jacobi's formula instead ... Can you point me to the thread you mentioned? Thanks!</p>",
        "id": 277045945,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648577995
    },
    {
        "content": "<p>Also I don't think we are writing code with high enough quality suitable for anything serious now, so it's more of a project for learning to read mathlib etc. :D</p>",
        "id": 277046240,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1648578160
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.matrix_trace\">docs#continuous.matrix_trace</a> now exists, along with all the other new matrix lemmas in the same file</p>",
        "id": 277692946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649058236
    }
]