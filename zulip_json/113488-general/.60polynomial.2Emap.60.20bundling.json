[
    {
        "content": "<p>I currently want to make <code>polynomial.map</code>  a ring hom. This loses no generality, as <code>map_ring_hom</code> requires the same TC arguments as <code>map</code>. This also brings the benefits of being able to use the general <code>ring_hom</code> and <code>ring_hom_class</code> lemmas with it; this is nice not only for generality, but also for current issues like <a href=\"https://github.com/leanprover-community/mathlib/pull/11196\">#11196</a> which means that whenever <code>polynomial</code> is open, <code>map_zero</code> and similar lemmas will just fail with <code>squeeze_simp</code>. however, we lose dot notation; as <code>map</code> would now be a ring_hom, you couldn't do <code>f.map g</code>. Not only that, but a conservative estimate says that I need to edit at most 93 files for this, which is a fair amount as there'll likely be non-dot notation based breakage too. Do people think this is a worthwhile thing to do? Or is there a better option? I was originally planning to protect <code>polynomial.map_zero/one/...</code>, but I feel like this seems silly considering <code>map</code> is a ring hom and doesn't even need these results.</p>",
        "id": 267529387,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641868041
    },
    {
        "content": "<p>Last time I tried to bundle eval map etc, dot notation was the reason i failed</p>",
        "id": 267544224,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641884806
    },
    {
        "content": "<p>Also, probably I tried to change too much in one branch</p>",
        "id": 267544253,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641884844
    },
    {
        "content": "<p>I think it's a great idea. When I made the big push to move deprecated imports towards the leaves I had to change stuff like this. What's the problem with <code>f.map g</code>? There's still a coercion to function</p>",
        "id": 267544942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641885494
    },
    {
        "content": "<p>The problem is that <code>polynomial.map</code> would no longer take an explicit argument of the form <code>(f : polynomial R)</code>.</p>",
        "id": 267546258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641886695
    },
    {
        "content": "<p>Can we define map_ring_hom, and then shortcut map to be applied version of it, taking f explicitly?</p>",
        "id": 267580760,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641907942
    },
    {
        "content": "<p>Hmm, what do you mean with that?</p>",
        "id": 267581087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641908124
    },
    {
        "content": "<p>if you mean something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `map f p` maps a polynomial `p` across a ring hom `f`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">map'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">polynomial</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">C.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eval₂_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">eval₂_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">eval₂_mul_noncomm</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">commute_X</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">},</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">eval₂_one</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">map'</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>then the <code>ring_hom</code> lemmas won't apply without unfolding (even <code>erw</code> isn't strong enough):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">],</span> <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267583687,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641909317
    },
    {
        "content": "<p>we can try make <code>map'</code> also the <code>simp</code>-normal form, but I don't think that's super scalable</p>",
        "id": 267583851,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641909413
    },
    {
        "content": "<p>it'd be nice if dot notation just tried to unfold <code>(a : X).y</code> to <code>X.y a</code>, inserting any coercions and such that are needed for it to work, but that's probably a huge breaking change somehow</p>",
        "id": 267584098,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641909517
    },
    {
        "content": "<p>does anyone know how it works in lean4?</p>",
        "id": 267584110,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641909524
    },
    {
        "content": "<p>Yeah, it's what I meant, why would you need a specialized map_zero lemma now?</p>",
        "id": 267584295,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641909595
    },
    {
        "content": "<p>because you need to <code>rw map</code> every time to access the <code>ring_hom</code> lemmas</p>",
        "id": 267584452,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641909627
    },
    {
        "content": "<p>i've closed the relevant pr <a href=\"https://github.com/leanprover-community/mathlib/pull/11161\">#11161</a> for now; if anyone comes up how to do this without a) losing dot notation and b) requiring a <code>rw</code> before being able to use <code>ring_hom_class</code> lemmas, please let me know and I'll happily pick it up again</p>",
        "id": 268040134,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642178930
    }
]