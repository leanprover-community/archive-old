[
    {
        "content": "<p>We've currently got three PRs open where someone has added a new super-class to an existing class, and then in unexpected places they've need to write an extra <code>@</code> to get a lemma to fire.</p>\n<p>These are at </p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/6786#discussion_r598341749\">https://github.com/leanprover-community/mathlib/pull/6786#discussion_r598341749</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/6797#discussion_r598307156\">https://github.com/leanprover-community/mathlib/pull/6797#discussion_r598307156</a> </li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/6775#discussion_r598005391\">https://github.com/leanprover-community/mathlib/pull/6775#discussion_r598005391</a></li>\n</ul>\n<p>Could we get e.g. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, or <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> to help diagnose?</p>",
        "id": 231254128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616376811
    },
    {
        "content": "<p>The same happened to me here <a href=\"https://github.com/leanprover-community/mathlib/pull/6746\">https://github.com/leanprover-community/mathlib/pull/6746</a></p>",
        "id": 231280989,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616404759
    },
    {
        "content": "<p>For <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> it looks like there is a subproblem with a diamond (<code>semiring -&gt; monoid_with_zero -&gt; has_zero</code> and <code>semiring -&gt; non_unital_non_assoc_semiring -&gt; has_zero</code>) that the elaborator needs to do a lot of work on. Somehow it doesn't use the rest of the expression to infer missing metavariables, instead choosing <code>nat</code> as a default value. I think the problem has turned from first-order to higher-order unification, and that higher-order unification makes some unfortunate choices here.</p>",
        "id": 231312220,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616420805
    },
    {
        "content": "<p>Could there be a cheap fix involving lowering or raising a priority?</p>",
        "id": 231313096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616421147
    },
    {
        "content": "<p>I expect that changing priorities would fix one half of usages and break the other half. It might well be possible that the fixed half is exactly the lemmas that are in mathlib now, and the broken half the ones that are added later.</p>",
        "id": 231313470,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616421310
    },
    {
        "content": "<p>Unification hints?</p>",
        "id": 231313531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616421332
    },
    {
        "content": "<p>I also think that there's a problematic diamond at play here.  But the issue is not related to higher-order unification, it is plain old first-order unification:</p>",
        "id": 231317751,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616422928
    },
    {
        "content": "<p>The first example in that PR requires unifying 0 and 0, which is obviously hard.</p>",
        "id": 231317806,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616422950
    },
    {
        "content": "<p>It's hard because these two come from the two edges of the diamond.  Essentially (skipping a few intermediate type classes):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">has_zero.zero</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">field.to_has_zero</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">has_zero.zero</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">monoid_with_zero.to_has_zero</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231318087,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616423061
    },
    {
        "content": "<p>The problem is that Lean needs to assign <code>?m_2 : field ?m_1</code> or <code>?m_3 : monoid_with_zero ?m_1</code>.<br>\nBut there is no obvious choice for <code>?m_2</code> or <code>?m_3</code>.  Or at least none that Lean could find by unfolding <code>field.to_has_zero</code>.</p>",
        "id": 231318519,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616423208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/add.20a.20new.20superclass.2C.20need.20some.20new.20.40s/near/231313531\">said</a>:</p>\n<blockquote>\n<p>Unification hints?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[unify]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unif_hint</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">unification_hint</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pattern</span> <span class=\"o\">:=</span> <span class=\"n\">non_unital_non_assoc_semiring.to_mul_zero_class</span> <span class=\"n\">α</span> <span class=\"bp\">≟</span>\n    <span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_class</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">constraints</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">α</span> <span class=\"bp\">≟</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231321367,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616424226
    },
    {
        "content": "<p>Unfortunately, unification hints are pretty broken in Lean 3.  For example, the hint above doesn't work if you replace <code>Type</code> by <code>Type*</code>...</p>",
        "id": 231321476,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616424259
    },
    {
        "content": "<p>That probably explains why I've never had any luck doing anything with a unification hint, as <code>Type*</code> is muscle memory at this point.</p>",
        "id": 231323066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616424818
    },
    {
        "content": "<p>AFAICT the Lean 4 unification hints have exactly the same bug.  I'm trying it out now.</p>",
        "id": 231323382,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616424918
    },
    {
        "content": "<p>I can't reconstruct this issue in Lean 4.  Mostly because Lean 4 will completely refuse to elaborate terms if it can't synthesize all instance arguments.  For example, you just can't use <code>cases le_or_gt _ _</code> in Lean 4.</p>",
        "id": 231333539,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616428076
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> for the explanation (which I have yet to digest) and especially for adding <a href=\"https://github.com/leanprover-community/mathlib/pull/6786/commits/7a913e262fb8c4453204e84fb382b40e8157b3af\">this commit</a> while I was tied up with other things. You saved me a  lot of time :-)</p>",
        "id": 231355454,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616435634
    },
    {
        "content": "<p>Something interesting happen in one of my PR, see <a href=\"https://github.com/leanprover-community/mathlib/pull/6831#discussion_r599508067\">https://github.com/leanprover-community/mathlib/pull/6831#discussion_r599508067</a></p>\n<p>If you don't want to look at the two PR here is what happened: in <a href=\"https://github.com/leanprover-community/mathlib/issues/6746\">#6746</a> I introduced <code>semi_normed_group</code>, and several lemmas stopped working. The solution was almost always to use some extra <code>@</code>. The PR got bigger and bigger, so I decided to split it, and in <a href=\"https://github.com/leanprover-community/mathlib/issues/6831\">#6831</a> I generalized  Lipschitz maps for <code>pseudo_emetric_space</code> (this was part of the other PR). Now, some of the problems appeared also in this PR (this is already interesting, since I thought they come from the new class <code>semi_normed_group</code>, while they come from  Lipschitz maps). Even more interesting, a new problem appeared (of the same nature), the one in the above comment. Now,  I know that it will disappear when everything is generalized to <code>semi_normed_group</code>, so I now think that also the other ones will go away if everything is stated in the correct generality.</p>",
        "id": 231461974,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616502938
    }
]