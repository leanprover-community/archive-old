[
    {
        "content": "<p>Maybe someone can help me here...</p>\n<p>I was interested in getting all of my Lean 4 code to export to a purely ASCII format so I tried using \"fun\" instead of the usual lambda. I got this error:</p>\n<p><code>Main.lean:6:21: error: expected '=&gt;'</code></p>\n<p>From  the input:</p>\n<p><code>#check fun (X : Type), X</code></p>",
        "id": 311195517,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1668987071
    },
    {
        "content": "<p>That's because the lean 4 syntax isn't a comma, it's =&gt;</p>",
        "id": 311196477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668987915
    },
    {
        "content": "<p>Thanks.</p>\n<p>Do you know ASCII equivalents of \\Pi and \\Sigma? What about \\exists and \\forall?</p>",
        "id": 311205390,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1668996768
    },
    {
        "content": "<p>I'm not sure there's any guarantee there'll always be one, certainly not for arbitrary notation, unless you're including writing out <code>Sigma.mk whatever</code>.</p>\n<p><code>\\exists</code> and <code>\\forall</code> are <code>exists</code> and <code>forall</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">exists</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span>     <span class=\"bp\">■</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"k\">#check</span> <span class=\"k\">forall</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span>     <span class=\"bp\">■</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"o\">(</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think <code>\\Sigma</code> doesn't have an ASCII equivalent, it's defined alongside <code>exists</code> and probably would be near there: <a href=\"https://github.com/leanprover/lean4/blob/1b73fa3fa1f65fd0e857525866426ad6421b1e50/src/Init/NotationExtra.lean#L84-L85\">https://github.com/leanprover/lean4/blob/1b73fa3fa1f65fd0e857525866426ad6421b1e50/src/Init/NotationExtra.lean#L84-L85</a> but not sure.</p>",
        "id": 311205926,
        "sender_full_name": "Julian Berman",
        "timestamp": 1668997326
    },
    {
        "content": "<p>the ascii equivalent of \\Sigma is <code>Sigma fun x : A =&gt; B x</code> ;)</p>",
        "id": 311206657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668998050
    },
    {
        "content": "<p>Also, you can use structure literals to do <code>Sigma.mk</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">({</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 311206746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668998171
    },
    {
        "content": "<p>but the real answer here is that lean 4 has made no serious attempt to be ASCII compatible after years of strong support for unicode insertion from supported editors. There used to be more ascii-equivalent syntax that has been removed over the years, like <code>(|x, y|)</code> for <code>⟨x, y⟩</code>.</p>",
        "id": 311206793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668998256
    },
    {
        "content": "<p>writing lean in all ascii is similar to trying to write a javascript program that doesn't use the letter <code>e</code></p>",
        "id": 311206887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668998340
    },
    {
        "content": "<p>That's pretty funny. </p>\n<p>Well, as long as I've come this far, I might as well ask if there's an analogue of Sigma fun for Pi. Maybe something like</p>\n<p><code>Pi  (a: A,b : B(a) )</code></p>",
        "id": 311208724,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669000417
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311208983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669000698
    },
    {
        "content": "<p>or, are you still asking about ascii equivalents?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311209032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669000784
    },
    {
        "content": "<p>yes, <code>forall</code> works on types too</p>",
        "id": 311209121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669000849
    },
    {
        "content": "<p>you could define <code>Pi</code> if you want it to look more similar to the other one though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"k\">Pi</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311209219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669000970
    },
    {
        "content": "<p>(don't let the syntax highlighting mislead you here, <code>Pi</code> isn't a keyword in lean 4 anymore, unlike lean 3)</p>",
        "id": 311209254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669001007
    },
    {
        "content": "<p>Thanks Mario. You have a pretty thorough knowledge!</p>",
        "id": 311211133,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669002906
    }
]