[
    {
        "content": "<p>Shouldn't <code>linarith</code> be able to take care of this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>",
        "id": 148096612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542790390
    },
    {
        "content": "<p>I thought it has been made clear that <code>linarith</code> doesn't deal with <code>nat</code></p>",
        "id": 148096896,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542790811
    },
    {
        "content": "<p>After <code>apply ha</code> it should be an easy target for <code>mono</code> but it doesn't work <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 148097084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542791131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> </p>\n<div class=\"codehilite\"><pre><span></span>import tactic.monotonicity\n\nexample (n : ℕ)\n(i : fin (n + 1 + 1))\n(a b : fin (n + 1))\n(ha : ¬a.val &lt; i.val)\n(h : b.val &lt; i.val)\n(H : a.val ≤ b.val)\n(a_1 : nat.succ (a.val) &gt; b.val) : false :=\nbegin\n  apply ha,\n  mono*,  -- does nothing :-(\n  exact calc a.val ≤ _ : H\n  ... &lt; _ : h,\nend\n</pre></div>",
        "id": 148097138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542791208
    },
    {
        "content": "<p>Change <code>nat.succ (a.val)</code> to <code>a.val + 1</code>.</p>",
        "id": 148097160,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542791246
    },
    {
        "content": "<p>This is the first thing I tried, but it changes nothing</p>",
        "id": 148097178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542791281
    },
    {
        "content": "<p>maybe stop (over)relying on tactics</p>",
        "id": 148097262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542791394
    },
    {
        "content": "<p>Oh, change <code>ha</code> to <code>a.val ≥ i.val</code>.</p>",
        "id": 148097310,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542791423
    },
    {
        "content": "<p>that works</p>",
        "id": 148097329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542791482
    },
    {
        "content": "<p>Kenny, the discussion is not really about how to prove that particular goal. It's about having a toolset which gets rid of hundred of stupid goals like this, that would otherwise break our proof flow and concentration</p>",
        "id": 148097395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542791547
    },
    {
        "content": "<p>There's something wrong with the routine that makes <code>linarith</code> work for <code>nat</code> and the part that deals with negated hypotheses, I'll look into it when I have a minute.</p>",
        "id": 148097485,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542791695
    },
    {
        "content": "<p>Nice! In the mean time, Johan can use <code>replace ha := le_of_not_lt ha ; linarith</code> to close that goal</p>",
        "id": 148097660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542791892
    },
    {
        "content": "<p>Or <code>apply ha; linarith</code>.</p>",
        "id": 148097675,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542791920
    },
    {
        "content": "<p>indeed</p>",
        "id": 148097682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542791935
    },
    {
        "content": "<p>Another <code>linarith</code>wishlist entry: if there is an assumption <code>abs x ≤ c</code>, convert it to <code>x ≤ c</code> and <code>-x ≤ c</code>.</p>",
        "id": 148099129,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542793790
    },
    {
        "content": "<p>There are various unfolding/preprocessing things like that, that <code>linarith</code> could do. Writing a separate tactic that unfolds <code>abs</code> would be very easy, and you could even add <code>meta def linarith' := unfold_abs; linarith</code> if you wanted. But I'm not sure that bundling all these things into the main tactic is a good idea.</p>",
        "id": 148101337,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542796584
    },
    {
        "content": "<p>There's now a PR open to fix Johan's problem, btw.</p>",
        "id": 148101362,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542796648
    },
    {
        "content": "<p>OK, I understand. I can definitely unfold it by hand when needed. I am just motivated by the principle of maximal laziness.</p>",
        "id": 148101659,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542797107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Cool! Thanks a lot.</p>",
        "id": 148104169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542800075
    },
    {
        "content": "<p>Now there is still the problem with <code>nat.succ _</code> vs <code>_ + 1</code>. Could that be fixed as well?</p>",
        "id": 148104182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542800106
    },
    {
        "content": "<p>Because then I could run <code>split_ifs with foo bar; {ext, simp, linarith}</code> and be done with it. Otherwise I need to explicitly <code>change</code> my goal for each goal. Or should I write a custom simp-lemma for this, that I use locally?</p>",
        "id": 148104248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542800171
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">δ_monotone</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148104284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542800249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> If you don't want to do it by hand, you can finish this and use it (or modify it to fit your purposes). Just use <code>unfold_abs; linarith</code> in place of <code>linarith</code>, or define an alias for that.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">le_and_le_of_abs_le</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_ordered_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">unfold_abs</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">local_context</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">le_and_le_of_abs_le</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">cases</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold_abs</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148104414,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542800402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> This falls into the same basket as Sebastien's request. There are lots of constants that can be unfolded or rewritten into a form that <code>linarith</code> will handle. I don't want to build them all in. You can just add <code>nat.succ_eq_add_one</code> to the <code>simp</code> call.</p>",
        "id": 148104502,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542800485
    },
    {
        "content": "<p>Ok, thanks, will do.</p>",
        "id": 148104578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542800579
    },
    {
        "content": "<blockquote>\n<p>maybe stop (over)relying on tactics</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Can you golf this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">δ_monotone</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">],</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>You can find it here: <a href=\"https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/simplex_category.lean#L33-L35\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/simplex_category.lean#L33-L35\">https://github.com/leanprover-community/mathlib/blob/simplicial/algebraic_topology/simplex_category.lean#L33-L35</a></p>",
        "id": 148104774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542800851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> So presumably goals of this form are also outside the scope of <code>linarith</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">h_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I have 7 goals that are all of this form or another... I would like to kill them all in one go.</p>",
        "id": 148105362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542801607
    },
    {
        "content": "<p>Sorry, I should paste context...</p>",
        "id": 148105382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542801641
    },
    {
        "content": "<p>So these are nats?</p>",
        "id": 148105384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542801649
    },
    {
        "content": "<p>What is the argument in maths?</p>",
        "id": 148105470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542801786
    },
    {
        "content": "<p>Um, <code>linarith</code> doesn't know anything about the relation between <code>fin</code> and <code>fin.val</code>, or anything about <code>fin.succ</code> or <code>fin.cast_succ</code>.</p>",
        "id": 148105480,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542801813
    },
    {
        "content": "<p>I am not sure you can ask <code>linarith</code> to start unfolding <code>fin.succ</code> or stuff like that</p>",
        "id": 148105484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542801821
    },
    {
        "content": "<p>There will be a never-ending list of things you want it to unfold.</p>",
        "id": 148105487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542801835
    },
    {
        "content": "<p>Basically, those are a bunch of random inequalities between distinct variables, not even all of the same type.</p>",
        "id": 148105530,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542801852
    },
    {
        "content": "<p>The only thing <code>linarith</code> will learn is that <code>j.val &lt; i.val</code>.</p>",
        "id": 148105541,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542801884
    },
    {
        "content": "<p>What about <code>x ∈ {a : ℕ | a &gt; 5}</code> ? That unfolds to an inequality, but it's surely not <code>linarith</code>'s job to figure that out.</p>",
        "id": 148105559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542801908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> there must be such a function in mathlib</p>",
        "id": 148105571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542801954
    },
    {
        "content": "<p>(or not)</p>",
        "id": 148105575,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542801960
    },
    {
        "content": "<p>(yes it’s decidable)</p>",
        "id": 148105617,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542801967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> right, see my last few comments. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span> Infinitely many things can unfold to linear inequalities. If <code>linarith</code> tries everything possible it will be unpredictable and slow.</p>",
        "id": 148105647,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542802072
    },
    {
        "content": "<p>Cool, I'm getting the hang of this! <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Thanks for your help. I'm starting to understand how to play with <code>linarith</code>.<br>\nAfter:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">simplicial_identity₁</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">ext1</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Before:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">simplicial_identity₁</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hja</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hja&#39;</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"n\">hja</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hia</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">H</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_trans</span> <span class=\"n\">hja</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">hja</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_trans</span> <span class=\"n\">H</span> <span class=\"n\">hja</span><span class=\"o\">),</span> <span class=\"n\">if_pos</span> <span class=\"n\">hja&#39;</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">hia</span><span class=\"o\">]},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">hja</span><span class=\"o\">],</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hia</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hia&#39;</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hia</span><span class=\"o\">,</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">hja&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"n\">hja</span>\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hia</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">hia&#39;</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"n\">hja&#39;</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">raise</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_of_veq</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hja&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">raise</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_trans</span> <span class=\"n\">hja</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hia&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">((</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">raise</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hia</span>\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">hia</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"n\">hja&#39;</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"n\">hia&#39;</span><span class=\"o\">]}}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148105717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542802160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Do you mean it should be provable by <code>dec_trivial</code>?</p>",
        "id": 148106009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542802531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Did the problem turn out to be <code>mono</code>?</p>",
        "id": 148122480,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542818899
    },
    {
        "content": "<p><code>linarith</code> doesn't use <code>mono</code> so the bug in <code>linarith</code> had nothing to do with <code>mono</code> (and is now fixed). But I'm still disappointed I can't get <code>mono</code> to help here</p>",
        "id": 148122892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542819252
    },
    {
        "content": "<p>You can try, what I posted right after pinging you is a MWE</p>",
        "id": 148123052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542819393
    },
    {
        "content": "<p>search for \"does nothing\" in this thread</p>",
        "id": 148123091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542819424
    },
    {
        "content": "<p>I wouldn't expect it to do anything in that case. What would you expect it to do?</p>",
        "id": 148124879,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542820990
    },
    {
        "content": "<p>I would expect it to close the goal</p>",
        "id": 148125029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542821130
    },
    {
        "content": "<p>You mean using mixed transitivity? It doesn’t do that. What it does is identify a monotonic function on either side of a relation. &lt; is that relation in your case but it doesn’t have a monotonic function on both sides.</p>",
        "id": 148128435,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542824591
    },
    {
        "content": "<p>If you want, you can treat &lt; as the monotonic function and -&gt; as the relation.</p>",
        "id": 148128458,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542824632
    },
    {
        "content": "<p>To do that, you need to do <code>revert h</code> before mono.</p>",
        "id": 148128569,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542824702
    },
    {
        "content": "<p>This is sad. We need something like <code>cc</code> for inequality, working together with <code>mono</code></p>",
        "id": 148131648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542827897
    },
    {
        "content": "<p>Maybe something like what I did for tfae would work for that</p>",
        "id": 148131680,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542827968
    },
    {
        "content": "<p>Except <code>tfae</code> doesn't work <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 148131689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542827990
    },
    {
        "content": "<p>The following is ridiculous but gives hope:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148131747,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542828036
    },
    {
        "content": "<p>This is the kind goal I hope some \"<code>cc</code> for inequalities\" would solve</p>",
        "id": 148131762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542828073
    },
    {
        "content": "<p>What is tricky for this kind of tactic is that one would expect it to work in the case of mixed transitivity which makes selecting a relation a bit more difficult. I could do it specifically for <code>&lt;</code> and <code>≤</code> to simplify things but it's a bit disappointing in terms of generality</p>",
        "id": 148131878,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542828206
    },
    {
        "content": "<p>But in the situations that you're showing, it seems like the kind of stuff <code>linarith</code> should handle</p>",
        "id": 148131995,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542828321
    },
    {
        "content": "<p>Patrick, can you elaborate on what you mean by \"cc for inequalities\"?</p>",
        "id": 148135817,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542832599
    },
    {
        "content": "<p>I think he more or less means solvable using linear order axioms, without any algebra.</p>",
        "id": 148135937,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542832711
    },
    {
        "content": "<p>But I think linarith does those.</p>",
        "id": 148135954,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542832744
    },
    {
        "content": "<p>Ah. Yeah, linarith does those. But I guess it requires some extra algebraic structure on the type that isn't always necessary.</p>",
        "id": 148136093,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542832885
    },
    {
        "content": "<p>And maybe preorder axioms and partial order axioms would be nice as well.</p>",
        "id": 148136290,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542833126
    },
    {
        "content": "<p>Indeed. A tactic for this kind of transitivity reasoning would be a nice project for someone who wants to learn about writing tactics. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 148136993,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542833966
    },
    {
        "content": "<p>Note, I haven't really looked into <code>mono</code> yet, so I'm not sure how much overlap there is.</p>",
        "id": 148136997,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542833984
    },
    {
        "content": "<p>There isn't much overlap actually. To implement this tactic, tfae would be more helpful. It calculates the transitive closure of implication on the local assumptions.</p>",
        "id": 148137165,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542834181
    },
    {
        "content": "<p>You replace implication by a preorder and you'd get what Patrick is talking about with the additional difficulty of handling <code>&lt;</code> properly</p>",
        "id": 148137182,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542834241
    },
    {
        "content": "<p>Ah, sure. Sounds reasonable enough.</p>",
        "id": 148137301,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542834376
    },
    {
        "content": "<p>I'd love to try to understand how to adapt <code>tfae</code> here, but again I don't think this would be reasonable before we get a deterministic behavior from <code>tfae</code></p>",
        "id": 148140643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542838603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I see someone has figured out the function in mathlib</p>",
        "id": 148181673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542900634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Wait, which function in mathlib are you referring to?</p>",
        "id": 148187179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542907440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <code>fin.succ_above</code></p>",
        "id": 148190141,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542911944
    },
    {
        "content": "<p>Aah, yes, I'm using that one. Was that answering a question of mine?</p>",
        "id": 148191135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542913653
    },
    {
        "content": "<p>Or maybe you just think it is confusing notation? It probably is...</p>",
        "id": 148191179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542913720
    },
    {
        "content": "<p>never mind, ignore me</p>",
        "id": 148191834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542914985
    },
    {
        "content": "<p>More requests: are these reasonable to expect from <code>linarith</code>?</p>\n<div class=\"codehilite\"><pre><span></span>n m : ℕ,\nh₁ : n &lt; m,\n⊢ n + 1 ≤ m\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>n m l : ℕ,\na_left : n ≤ l,\na_right : l &lt; n + (m - n)\n⊢ l &lt; m\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>a_left : n ≤ l,\na_right : l &lt; m\n⊢ l &lt; n + (m - n)\n</pre></div>",
        "id": 148254707,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543017543
    },
    {
        "content": "<blockquote>\n<p>The following is ridiculous but gives hope:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This is the kind of goal I hope some \"<code>cc</code> for inequalities\" would solve</p>\n</blockquote>\n<p>So like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">cc_inequality</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">transitivity</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cc_inequality</span>\n</pre></div>",
        "id": 148256879,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543022193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Your first question is <code>exact h1</code>, so I would hope that <code>linarith</code> could do it.  The second and third are nasty because they use nat-subtraction. I think we still need a <code>num_cast</code> tactic that would lift it to <code>int</code>, and then <code>linarith</code> could do the job.</p>",
        "id": 148263754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543037584
    },
    {
        "content": "<p>Cooper will kill these, if you're willing to use another dependency</p>",
        "id": 148265222,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543040839
    },
    {
        "content": "<p>Am I allowed to import <code>cooper</code> into <code>data.nat.basic</code>? :-)</p>",
        "id": 148265691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543041745
    },
    {
        "content": "<p>Thanks for the suggestion, I will try out cooper!</p>",
        "id": 148265692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543041753
    },
    {
        "content": "<p><code>linarith</code> will not prove any of those. Think of it as a tactic for linear rational inequalities.  If a goal over <code>int</code> is still provable when you replace <code>int</code> with <code>rat</code>, it will still work. Inequalities over <code>nat</code> are cast to inequalities over <code>int</code>, with extra assumptions that all atoms are nonnegative. Applications of nat subtraction are treated as atoms.</p>",
        "id": 148270921,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543053289
    },
    {
        "content": "<p>The first one isn't true in a dense order. The second ones involve properties of nat subtraction beyond nonnegativity.</p>",
        "id": 148270931,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543053321
    },
    {
        "content": "<p><code>cooper</code> isn't in mathlib, it's in Seul's repository. Use it, of course, but incorporating it into mathlib is a bigger discussion.</p>",
        "id": 148270979,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543053373
    },
    {
        "content": "<p>Would it be possible to edit <code>linarith</code> so that it automatically knows that variables coerced from nat are nonnegative? Compare:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">--works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- even this fails</span>\n</pre></div>",
        "id": 148271514,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1543054400
    },
    {
        "content": "<p><code>linarith</code> isn't a smart tactic. It does one thing (linear rational arithmetic) very well, and by coincidence, sometimes it can do things with <code>nat</code> and <code>int</code>. In your second example, it doesn't know any connection between <code>a</code> and <code>↑a</code>, and why should it? Instead of a cast, that could be <code>abs</code>, or <code>square</code>, or any nonnegative function. In the very special case when it sees an inequality over <code>nat</code>, it will cast it to <code>int</code> and add the nonnegativity hypotheses. But it won't go digging through the input looking for things it can learn are nonnegative. That's a kind of preprocessing that can be done separately.</p>",
        "id": 148273249,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543057630
    },
    {
        "content": "<p>The third example is a little different. It sees the <code>a &gt;= 0</code> hypothesis, and casts it to <code>int</code>. But the overall problem is in <code>rat</code>.</p>",
        "id": 148273254,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543057680
    },
    {
        "content": "<p>In general, there's no well-defined type of the \"overall problem,\" since you could have hypotheses over many different types.</p>",
        "id": 148273298,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543057732
    },
    {
        "content": "<p>It could try to guess what type to cast to, or it could cast to every type that appears. This wouldn't be so unreasonable.</p>",
        "id": 148273305,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543057788
    },
    {
        "content": "<p>Thanks for explaining! As always, there was a lot of complexity lurking here that I didn't appreciate.</p>",
        "id": 148283001,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1543076674
    },
    {
        "content": "<p>Linarith just failed me on a goal that seemed to me to be in its range of applicability. I know that it is not supposed to be extended further, but still I wanted to mention it here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">zou</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199178649,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590769935
    },
    {
        "content": "<p>By the way, <code>hint</code> is not really happy with this lemma, as it complains</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Cannot</span> <span class=\"n\">reify</span> <span class=\"n\">expr</span> <span class=\"o\">:</span>\n<span class=\"n\">false</span>\n</code></pre></div>",
        "id": 199178846,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590770025
    },
    {
        "content": "<p>it might be note-worthy that <code>apply h', linarith</code> succeeds</p>",
        "id": 199179093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590770158
    },
    {
        "content": "<p>What happens if you pushneg all the nots away first?</p>",
        "id": 199184325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590772703
    },
    {
        "content": "<p>If there are <code>n</code> disequalities in the context then <code>linarith</code> would have to run <code>2^n</code> times. \"Not equals\" isn't analogous to \"not less than\" in this context.</p>",
        "id": 199193519,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590777063
    },
    {
        "content": "<p>The same applies for = in a goal, except there can be at most one there.</p>",
        "id": 199193686,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590777135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/linarith/near/199178846\">said</a>:</p>\n<blockquote>\n<p>By the way, <code>hint</code> is not really happy with this lemma, as it complains</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Cannot</span> <span class=\"n\">reify</span> <span class=\"n\">expr</span> <span class=\"o\">:</span>\n<span class=\"n\">false</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>It seems that it is <code>omega</code> which prints this error message.</p>",
        "id": 199235969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590809705
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zou</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"c1\">-- prints &quot;Cannot reify expr : false&quot;</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199236017,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590809765
    },
    {
        "content": "<p>I can see where in <code>omega</code> to turn off printing this message (and just fail silently). Shall we do that?</p>",
        "id": 199236088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590809934
    },
    {
        "content": "<p>It shouldn't fail silently, it should fail with this as the error message rather than print + fail</p>",
        "id": 199236514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590810623
    },
    {
        "content": "<p>(it should also be fixed to be able to reify <code>false</code>)</p>",
        "id": 199236531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590810668
    },
    {
        "content": "<p>I'm curious if anything ever happened with this. I have run into this situation plenty of times: the target is false, and <code>omega</code> is strong enough to deduce that the hypotheses are inconsistent. I've been using the following (admittedly very idiosyncratic) pattern to deal with it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">suffices</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"bp\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">],</span>\n<span class=\"n\">omega</span>\n</code></pre></div>\n\n\n<p>It feels odd every time I do it because there must be a better way, but I haven't found it yet. Also, while <code>linarith</code> will often work in these situations, it's much more expensive than <code>omega</code> which is why I restrict it to deriving false from an obvious inconsistency just to enable <code>omega</code>.</p>",
        "id": 204820484,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1595521799
    },
    {
        "content": "<p>does it work to <code>revert</code> one of the hypotheses (maybe one that looks like an inequality?) and then call <code>omega</code>? That should be both shorter and faster than your solution with <code>linarith</code></p>",
        "id": 204820970,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595522007
    },
    {
        "content": "<p>Oh that's clever. Yes, it does work on the first example I found. It's certainly way better than invoking <code>linarith</code> but still seems a little odd that <code>omega</code> cannot be applied directly.</p>",
        "id": 204821360,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1595522176
    },
    {
        "content": "<p><code>omega</code> has many bugs and this is one of them. Unfortunately the person who wrote it is not available to fix it and it's a project. But <code>linarith</code> should not be slower than <code>omega</code> (when they both work). There are goals that <code>omega</code> should solve in principle that <code>linarith</code> can't.</p>",
        "id": 204822366,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595522638
    },
    {
        "content": "<p>I see. Well, I'm glad we at least have <code>omega</code> in the form it's in! My observation of <code>omega</code> being faster than <code>linarith</code> is anecdotal in that I haven't run any unit tests or anything to compare them. All I know is that when I first encountered the issue, my bloated proofs ran much better with <code>omega</code> than with <code>linarith</code>.  In any case, I am mostly happy to learn that I am not missing something simple about <code>omega</code> that is obvious to others. Thanks for the replies!</p>",
        "id": 204823100,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1595523006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/linarith/near/199178649\">said</a>:</p>\n<blockquote>\n<p>Linarith just failed me on a goal that seemed to me to be in its range of applicability. I know that it is not supposed to be extended further, but still I wanted to mention it here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">zou</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3786\">#3786</a> . I'm not giving in to peer pressure here! Mario needed branching preprocessors for something else, and handling disequality hypotheses was the simplest example of a branching preprocessor I could think of, so it was a good test. Don't go crazy with the new toy.</p>",
        "id": 207018711,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597492809
    }
]