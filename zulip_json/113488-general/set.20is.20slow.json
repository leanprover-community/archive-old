[
    {
        "content": "<p>the tactic <code>set</code> takes a long time to parse and elaborate:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- parsing took 399ms</span>\n<span class=\"c1\">-- elaboration of test_let took 139ms</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test_let</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- parsing took 1.38s</span>\n<span class=\"c1\">-- elaboration of test_set took 687ms</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test_set</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193429944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586426920
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"err\">«</span><span class=\"k\">let</span><span class=\"err\">»</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q₁</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;:=&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"k\">in</span>\n<span class=\"k\">match</span> <span class=\"n\">q₁</span><span class=\"o\">,</span> <span class=\"n\">q₂</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">definev</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">p</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">pose</span> <span class=\"n\">h</span> <span class=\"n\">none</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">define</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">u</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">u</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">define</span> <span class=\"n\">h</span> <span class=\"n\">e</span>\n<span class=\"kn\">end</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">h_simp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">((</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;:&quot;</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;:=&quot;</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">rev_name</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">opt_dir_with</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"k\">let</span> <span class=\"n\">vt</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">tp</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">mk_placeholder</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">pv</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">vt</span><span class=\"o\">),</span>\n   <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">pv</span><span class=\"o\">,</span>\n   <span class=\"n\">tp</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"n\">definev</span> <span class=\"n\">a</span> <span class=\"n\">tp</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"n\">when</span> <span class=\"n\">h_simp</span><span class=\"bp\">.</span><span class=\"n\">is_none</span> <span class=\"err\">$</span> <span class=\"n\">change&#39;</span> <span class=\"n\">pv</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">a</span> <span class=\"o\">[]))</span> <span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">wildcard</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"n\">rev_name</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">flip</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n     <span class=\"n\">do</span> <span class=\"n\">nv</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n        <span class=\"n\">pf</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">flip</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">nv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">nv</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">pv</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">assert</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n        <span class=\"n\">reflexivity</span>\n   <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n   <span class=\"kn\">end</span>\n</pre></div>",
        "id": 193430509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586427299
    },
    {
        "content": "<p>so by elimination <code>parse opt_dir_with</code> should be the problem?</p>",
        "id": 193430588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586427350
    },
    {
        "content": "<p>There are some things that can be cleaned up there, like using <code>mk_eq</code> instead of elaborating pre-expressions</p>",
        "id": 193430602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586427359
    },
    {
        "content": "<p>there is also <code>change'</code></p>",
        "id": 193430657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586427375
    },
    {
        "content": "<p>the <code>reflexivity</code> also looks suspicious</p>",
        "id": 193430867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586427536
    },
    {
        "content": "<p>what's the difference between <code>set a : b := c with d</code> and <code>let a : b := c, have d : a = c := rfl</code>?</p>",
        "id": 193431053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586427647
    },
    {
        "content": "<p>nothing</p>",
        "id": 193431228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586427766
    },
    {
        "content": "<p>actually not nothing, <code>set</code> also replaces occurrences of <code>c</code> with <code>a</code> in the hypotheses and goal if you use <code>!</code>, I think</p>",
        "id": 193431266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586427802
    },
    {
        "content": "<p>or if you don't use <code>!</code>?</p>",
        "id": 193431284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586427822
    },
    {
        "content": "<p>from looking at the code it seems it's the other way around</p>",
        "id": 193431309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586427840
    },
    {
        "content": "<p>I should mention that I'm seeing some significantly different profile results</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- parsing took 95.4ms</span>\n<span class=\"c1\">-- elaboration of test_let took 25ms</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test_let</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n\n<span class=\"c1\">-- parsing took 264ms</span>\n<span class=\"c1\">-- elaboration of test_set took 60.9ms</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test_set</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</pre></div>",
        "id": 193431534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586427972
    },
    {
        "content": "<p>are you using a chromebook or some similar low power device?</p>",
        "id": 193431565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586428009
    },
    {
        "content": "<p>I think my computer is 4x slower than others here</p>",
        "id": 193431623,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428056
    },
    {
        "content": "<p>which, if you factor that in, seems accurate</p>",
        "id": 193431635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428068
    },
    {
        "content": "<p>the difference is more like 10x here though</p>",
        "id": 193431641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586428074
    },
    {
        "content": "<p>399 ~ 95.4 x 4<br>\n139 ~ 25 x 4<br>\n1380 ~ 264 x 4<br>\n687 ~ 60 x 10??</p>",
        "id": 193431757,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428133
    },
    {
        "content": "<p>yeah, about 4 times</p>",
        "id": 193431763,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428139
    },
    {
        "content": "<p>okay, I'll just make the test 4x longer</p>",
        "id": 193431804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586428185
    },
    {
        "content": "<p>Intel(R) Core(TM) i5-7300U CPU @ 2.60 GHz 2.71 GHz 8.00 GB</p>",
        "id": 193431821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428196
    },
    {
        "content": "<p>That seems like a reasonable CPU.  Are you running a debug build of Lean?</p>",
        "id": 193431988,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586428286
    },
    {
        "content": "<p>why does it seem like I have only 4GB of RAM available?</p>",
        "id": 193432082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428333
    },
    {
        "content": "<p>when I open the task manager, it says I'm using ~3000 MB and that is ~80%</p>",
        "id": 193432104,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428353
    },
    {
        "content": "<p>hmm, if I go to the performance tab the it says I'm using 6.6 GB</p>",
        "id": 193432148,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428397
    },
    {
        "content": "<p>are you on windows?</p>",
        "id": 193432161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586428415
    },
    {
        "content": "<p>yeah</p>",
        "id": 193432171,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/set.20is.20slow/near/193431988\" title=\"#narrow/stream/113488-general/topic/set.20is.20slow/near/193431988\">said</a>:</p>\n<blockquote>\n<p>That seems like a reasonable CPU.  Are you running a debug build of Lean?</p>\n</blockquote>\n<p>what does this mean?</p>",
        "id": 193432177,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428427
    },
    {
        "content": "<p>windows does heap compression</p>",
        "id": 193432179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586428429
    },
    {
        "content": "<p>also I only have 2 cores and I think you guys have like 8 cores</p>",
        "id": 193432248,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428460
    },
    {
        "content": "<p>I have 2 cores and 4 threads</p>",
        "id": 193432263,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428474
    },
    {
        "content": "<p>Did you compile lean yourself?</p>",
        "id": 193432266,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586428475
    },
    {
        "content": "<p>no, I used elan</p>",
        "id": 193432276,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586428487
    },
    {
        "content": "<p>I don't think individual proofs are multithreaded though</p>",
        "id": 193432287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586428498
    },
    {
        "content": "<p>the parsing is surprisingly expensive here, and playing around with things it seems like <code>prod.mk</code> is more expensive than I would have guessed</p>",
        "id": 193433234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586429068
    },
    {
        "content": "<p>why would <code>prod.mk</code> be expensive at all?</p>",
        "id": 193433264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586429099
    },
    {
        "content": "<p>As I've posted in a private chat:<br>\nDid you know how the syntax for the tactic arguments is implemented?  When an interactive tactic has an argument of type <code>parse foo : α</code>, then <code>foo : parser α</code> is a metaprogram that is executed in the VM to parse the argument.  So you can make parsing as slow as you want by running arbitrary programs at parse time!</p>",
        "id": 193433328,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586429140
    },
    {
        "content": "<p>To make matters even worse, the VM compiler is run for every argument, every time you parse an interactive tactic.</p>",
        "id": 193433407,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586429177
    },
    {
        "content": "<p>also parsing seems to be in general slower than the last time I was here</p>",
        "id": 193433411,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586429178
    },
    {
        "content": "<p>even though I didn't use any new tactics</p>",
        "id": 193433450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586429207
    },
    {
        "content": "<p>(partly because I don't know them)</p>",
        "id": 193433456,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586429214
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n<span class=\"n\">local</span> <span class=\"kn\">postfix</span> <span class=\"bp\">`</span><span class=\"err\">?</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">9001</span> <span class=\"o\">:=</span> <span class=\"n\">optional</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">rev_name</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n  <span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;&lt;-&quot;</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">ident</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">))</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">rev_name</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n  <span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;&lt;-&quot;</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">ident</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">))</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- parsing took 950ms - 1.5s</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test_foo</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">foo</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">foo</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ×40</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- parsing took 161ms - 207ms</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test_bar</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">bar</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">bar</span> <span class=\"k\">with</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ×40</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193433744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586429435
    },
    {
        "content": "<p>note that <code>foo</code> and <code>bar</code> accept the <em>same</em> grammar</p>",
        "id": 193433813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586429480
    },
    {
        "content": "<p>Is there a typo in <code>test_bar</code>?  It should be <code>bar with</code> instead of <code>foo with</code>, right?</p>",
        "id": 193433830,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586429494
    },
    {
        "content": "<p>yes</p>",
        "id": 193433838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586429501
    },
    {
        "content": "<p>Indeed, it looks like there are two independent slowdowns, the parsing and the replacing. Mario seems to have a handle on the parsing. Using <code>set!</code> instead of <code>set</code> makes the elaboration times about the same for me. So <code>change'</code> is slow.</p>",
        "id": 193433844,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586429513
    },
    {
        "content": "<p>oh no</p>",
        "id": 193433926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586429564
    },
    {
        "content": "<p>what's the story here? <code>change'</code> is fixing something in <code>change with</code>?</p>",
        "id": 193433931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586429571
    },
    {
        "content": "<p><code>change with</code> gets things wrong when there are dependencies.</p>",
        "id": 193433998,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586429637
    },
    {
        "content": "<p>do you have an example?</p>",
        "id": 193434058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586429660
    },
    {
        "content": "<p>I would have assumed that since everything is defeq there are no problems with dependencies</p>",
        "id": 193434092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586429694
    },
    {
        "content": "<p>The example in the old PR is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193434257,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586429816
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/712\" title=\"https://github.com/leanprover-community/mathlib/pull/712\">https://github.com/leanprover-community/mathlib/pull/712</a></p>",
        "id": 193434268,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586429828
    },
    {
        "content": "<p>I don't remember the details.</p>",
        "id": 193434389,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586429887
    },
    {
        "content": "<p>is it just <code>at *</code> that has the problem? I tried <code>at h</code> and <code>at h |-</code> and <code>at a h |-</code> and they all work fine</p>",
        "id": 193434405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586429899
    },
    {
        "content": "<p><code>at h a</code> doesn't work.</p>",
        "id": 193434485,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586429944
    },
    {
        "content": "<p>hm. well to some extent I would expect <code>set</code> to be asymptotically slower than <code>let</code> because it has to examine the whole context on each new line, so an O(n^2) operation</p>",
        "id": 193434718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586430075
    },
    {
        "content": "<p>the parsing on the other hand is completely baffling</p>",
        "id": 193434855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586430175
    },
    {
        "content": "<p>On my machine the parsing makes a way bigger difference than the change.</p>",
        "id": 193434868,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586430183
    },
    {
        "content": "<p>inlining the parser helps some</p>",
        "id": 193434913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586430222
    },
    {
        "content": "<p>I tried <code>@[inline]</code> but it doesn't seem to work</p>",
        "id": 193434930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586430235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/set.20is.20slow/near/193433407\" title=\"#narrow/stream/113488-general/topic/set.20is.20slow/near/193433407\">said</a>:</p>\n<blockquote>\n<p>To make matters even worse, the VM compiler is run for every argument, every time you parse an interactive tactic.</p>\n</blockquote>\n<p>Whoever came up with that <span aria-label=\"information desk person\" class=\"emoji emoji-1f481\" role=\"img\" title=\"information desk person\">:information_desk_person:</span></p>",
        "id": 193436334,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586431157
    },
    {
        "content": "<p>The compilation overhead seems to be negligible, at least in Mario's example.  I've tried factoring out the parsers into separate definitions, it's not faster, and I still see the performance difference:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n<span class=\"n\">local</span> <span class=\"kn\">postfix</span> <span class=\"bp\">`</span><span class=\"err\">?</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">9001</span> <span class=\"o\">:=</span> <span class=\"n\">optional</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">optimize_bytecode</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">preprocess</span> <span class=\"n\">true</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo_core</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n<span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;&lt;-&quot;</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">ident</span><span class=\"o\">,</span>\n<span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">))</span><span class=\"err\">?</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">bar_core</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n<span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;&lt;-&quot;</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">ident</span><span class=\"o\">,</span>\n<span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">))</span><span class=\"err\">?</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">rev_name</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">bar_core</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">rev_name</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">foo_core</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n</pre></div>",
        "id": 193436517,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586431274
    },
    {
        "content": "<p>Weirdly enough, <code>foo_core</code> and <code>bar_core</code> only differ in two bytecode instructions...</p>",
        "id": 193436550,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586431292
    },
    {
        "content": "<p>Oh, no.. I think I know what is going on.  After the parser is finished, the result (for foo this is a value of type <code>option (option unit × string)</code>) is converted into an <code>expr</code> by calling <code>reflect</code>.  It's not <code>prod.mk</code> that is slow, but reflecting the product.</p>",
        "id": 193437048,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586431630
    },
    {
        "content": "<p>I saw the <code>reflectable</code> thing but I'm not exactly sure how it is implemented</p>",
        "id": 193437139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586431700
    },
    {
        "content": "<p>or what it's for. Is it like <code>decidable p</code> where the reflectable instance is the \"real\" parser and everything else is just window dressing?</p>",
        "id": 193437195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586431749
    },
    {
        "content": "<p>This is from <a href=\"https://github.com/leanprover-community/lean/issues/19\" title=\"https://github.com/leanprover-community/lean/issues/19\">lean#19</a> which was merged into 3.5...</p>",
        "id": 193437296,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586431806
    },
    {
        "content": "<p>so Kenny's claims about a performance regression are true?</p>",
        "id": 193437349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586431845
    },
    {
        "content": "<p>At least they're plausible.</p>",
        "id": 193437372,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586431864
    },
    {
        "content": "<p>Could someone eli5?</p>",
        "id": 193437410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586431883
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/180\" title=\"https://github.com/leanprover-community/lean/issues/180\">lean#180</a></p>",
        "id": 193442186,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586435010
    },
    {
        "content": "<p>thanks</p>",
        "id": 193443227,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586435657
    }
]