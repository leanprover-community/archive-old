[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quiv</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">of_equiv_card</span> <span class=\"n\">quiv</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If you try this, you'll get the incomprehensible error </p>\n<p><code>rewrite tactic failed, did not find instance of the pattern in the target expression\n  card (fin 1)</code></p>\n<p>Now, this is because the two fintype instances are different (see with <code>pp.implicit</code>). However, <code>fintype</code> is a subsingleton, so there should be a simple way to get around this, adn yet I can't seem to. I tried <code>equiv_rw</code> and other things that had <code>subsingleton</code> in the name, but got nowhere without using &gt;10 lines to deal with this. any advice?</p>",
        "id": 237312996,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620130730
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">of_equiv_card</span> <span class=\"n\">quiv.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237313254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620130846
    },
    {
        "content": "<p><code>convert</code> is the main tool for dealing with non-matching but subsingleton instances</p>",
        "id": 237313325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620130873
    },
    {
        "content": "<p>amazing, thank you!</p>",
        "id": 237313405,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620130915
    },
    {
        "content": "<p>why <code>of_equiv_card</code> flips things over, I do not know <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 237313559,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620130976
    },
    {
        "content": "<p>Oh, you should be using <code>card_congr</code> in the first place.</p>",
        "id": 237313657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620131029
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_congr</span> <span class=\"n\">quiv</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works fine</p>",
        "id": 237313725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620131054
    },
    {
        "content": "<p>You were actually creating the instance mismatch yourself by using <code>of_equiv_card</code>, which doesn't assume an existing <code>fintype</code> instance on the LHS, and instead generates one by transporting the <code>fintype</code> instance on the RHS over the <code>equiv</code>.</p>",
        "id": 237313830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620131113
    },
    {
        "content": "<p>ahh, I see - that's why there's two different lemmata for this</p>",
        "id": 237314006,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620131173
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_equiv_card\">docs#fintype.of_equiv_card</a> is so named because it is a lemma about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_equiv\">docs#fintype.of_equiv</a></p>",
        "id": 237314889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620131561
    }
]