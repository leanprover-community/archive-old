[
    {
        "content": "<p>Can anyone explain why the <code>nat.add</code>s are appearing here? I'd really prefer to stay in the hygenic world of <code>(+)</code>.</p>\n<div class=\"codehilite\"><pre><span></span>example (p : ℕ) (h : p ∈ range 2) : true :=\nbegin\n  cases h,\n  trivial,\n  cases h,\n  trivial,\n  cases h,\nend\n</pre></div>",
        "id": 159598673,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551348750
    },
    {
        "content": "<p>How insane is <code>@[simp] lemma nat.add_plus (a b : ℕ) : nat.add a b = a + b := rfl</code> as a simp lemma?</p>",
        "id": 159598721,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551348774
    },
    {
        "content": "<p>When I was doing cases on &lt; yesterday on your challenge problem this phenomenon occurred to me too.</p>",
        "id": 159603376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551350157
    },
    {
        "content": "<p>I was getting <code>nat.less_than_or_equals_to (nat.succ ...)</code>. In my case it was because <code>cases</code> was literally using the names of the constructors rather than using our nicer variants</p>",
        "id": 159604742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551351600
    },
    {
        "content": "<p>I realise I don't understand the <code>cases</code> tactic. It comes out nicer if you do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">range</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">range</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">range_core</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159605014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551351862
    },
    {
        "content": "<p>This is a result of how Lean unfolds definitions.  For example <code>2</code> is syntax for <code>bit0 1</code>, which reduces to <code>nat.add 1 1</code>, which reduces to <code>nat.succ (nat.add 1 0)</code>, and so on.  Here the unfolding happens due to unification, since <code>range</code> is defined by a pattern-match on <code>succ n</code>.  So we have to find some n such that <code>succ n = 2</code>.  And now Lean starts unfolding <code>2</code> until it sees a <code>succ</code>.</p>",
        "id": 159605401,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1551352259
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> .</p>",
        "id": 159650299,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551386569
    }
]