[
    {
        "content": "<p>Do we have something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nth_le_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nth_le</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">((</span><span class=\"n\">length_map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nth_le</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 126509555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245145
    },
    {
        "content": "<p>It feels a bit weird to stick a proof in the middle of the statement</p>",
        "id": 126509560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245169
    },
    {
        "content": "<p>Am I doing something wrong?</p>",
        "id": 126509561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245175
    },
    {
        "content": "<p>One approach I have used in the past is to have two proof arguments, but this makes rewriting produce proof obligations that look superfluous</p>",
        "id": 126509612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245263
    },
    {
        "content": "<p>And I don't know how to prove it</p>",
        "id": 126509615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245263
    },
    {
        "content": "<p>i.e. you would prove <code>nth_le (map f l) n H1 = f (nth_le l n H2) </code></p>",
        "id": 126509620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245301
    },
    {
        "content": "<p>You you mean adding <code>(H' : n &lt; length (map f l))</code>?</p>",
        "id": 126509621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245311
    },
    {
        "content": "<p>ok</p>",
        "id": 126509651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245322
    },
    {
        "content": "<p>I still don't know how to prove it though</p>",
        "id": 126509663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245340
    },
    {
        "content": "<p>Why is this not in mathlib? It looks like it would be useful for many proofs</p>",
        "id": 126509671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245389
    },
    {
        "content": "<p>I'm asking the same question</p>",
        "id": 126509672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245402
    },
    {
        "content": "<p>I would start with <code>nth</code></p>",
        "id": 126509674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245410
    },
    {
        "content": "<p>since that avoids the proof argument stuff</p>",
        "id": 126509675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245419
    },
    {
        "content": "<p>I also thought that</p>",
        "id": 126509676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245431
    },
    {
        "content": "<p>But I couldn't even state it <span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 126509677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245439
    },
    {
        "content": "<p>Because <code>f</code> doesn't want an <code>option α</code></p>",
        "id": 126509716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245453
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem nth_map (f : α → β) : ∀ l n, nth (map f l) n = (nth l n).map f\n| []       n     := rfl\n| (a :: l) 0     := rfl\n| (a :: l) (n+1) := nth_map l n\n\ntheorem nth_le_map (f : α → β) {l n} (H1 H2) : nth_le (map f l) n H1 = f (nth_le l n H2) :=\noption.some.inj $ by rw [← nth_le_nth, nth_map, nth_le_nth]; refl\n</pre></div>",
        "id": 126509823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245710
    },
    {
        "content": "<p><code>option.map</code> takes <code>f : A -&gt; B</code> to <code>map f : option A -&gt; option B</code></p>",
        "id": 126509824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245733
    },
    {
        "content": "<p><span class=\"emoji emoji-1f62e\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 126509827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245744
    },
    {
        "content": "<p>I was clearly missing that <code>option.map</code> piece</p>",
        "id": 126509881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245805
    },
    {
        "content": "<p>but probably not only that</p>",
        "id": 126509886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245812
    },
    {
        "content": "<p><code>option</code> is a functor</p>",
        "id": 126509887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245822
    },
    {
        "content": "<p>is this proven in mathlib / Lean?</p>",
        "id": 126509889,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526245837
    },
    {
        "content": "<p>yes, because every monad is a functor</p>",
        "id": 126509891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245848
    },
    {
        "content": "<p>and <code>option</code> is like the very first monad you write</p>",
        "id": 126509898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245872
    },
    {
        "content": "<p>you mean sentence</p>",
        "id": 126509900,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526245888
    },
    {
        "content": "<p>like when learning what monads are and examples, <code>option</code> is always the example</p>",
        "id": 126509942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526245927
    },
    {
        "content": "<p>Thank you very much Mario. I hope this will also be a good reference next time I'll hit this <code>option</code> stuff</p>",
        "id": 126509946,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245958
    },
    {
        "content": "<p>I still think you could put those two lemmas in mathlib</p>",
        "id": 126509947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526245971
    },
    {
        "content": "<p>I'm doing that now</p>",
        "id": 126509993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526246065
    },
    {
        "content": "<p>I definitely want more <code>nth</code> and <code>index_of</code> theorems, to make it easier to think of <code>list</code> as finitely supported functions on nat</p>",
        "id": 126510003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526246120
    },
    {
        "content": "<p>Great</p>",
        "id": 126510056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526246256
    },
    {
        "content": "<p>I was going after something like <code>reverse (range' a b) = map (lam x, ...) (range' a b)</code> and stuff like that</p>",
        "id": 126510097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526246333
    },
    {
        "content": "<p>And was also thinking about defining <code>int_range k n</code> same as <code>range'</code> but <code>k</code> is an integer</p>",
        "id": 126510108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526246401
    },
    {
        "content": "<p>and generalizing all the <code>range'</code> lemmas to this case</p>",
        "id": 126510154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526246424
    },
    {
        "content": "<p>That makes sense. I guess you could define <code>range'</code> generalized to any semiring, although it doesn't have the \"consecutivity\" property except in <code>nat</code> and <code>int</code></p>",
        "id": 126512722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526252169
    }
]