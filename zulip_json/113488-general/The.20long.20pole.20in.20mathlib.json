[
    {
        "content": "<p>I recently computed \"the long pole\" in mathlib --- the longest chain of transitive imports, weighted by the compilation time of each file. Given arbitrary parallelism, this would give us the compilation time of the entirety of mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">pi</span>    <span class=\"mi\">34</span><span class=\"bp\">.</span><span class=\"mi\">9626</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">integrals</span>    <span class=\"mi\">50</span><span class=\"bp\">.</span><span class=\"mi\">0778</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">interval_integral</span>   <span class=\"mi\">88</span><span class=\"bp\">.</span><span class=\"mi\">211</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">lebesgue</span> <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">6158</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">pi</span> <span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">3023</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">prod</span>   <span class=\"mi\">53</span><span class=\"bp\">.</span><span class=\"mi\">4363</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_integral</span>    <span class=\"mi\">39</span><span class=\"bp\">.</span><span class=\"mi\">7534</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">bochner</span> <span class=\"mi\">70</span><span class=\"bp\">.</span><span class=\"mi\">9691</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_to_l1</span>   <span class=\"mi\">47</span><span class=\"bp\">.</span><span class=\"mi\">3601</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">simple_func_dense</span>   <span class=\"mi\">72</span><span class=\"bp\">.</span><span class=\"mi\">6324</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">l1_space</span>    <span class=\"mi\">51</span><span class=\"bp\">.</span><span class=\"mi\">5644</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">lp_space</span>    <span class=\"mi\">147</span><span class=\"bp\">.</span><span class=\"mi\">01</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">mean_inequalities</span>   <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">5914</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">mean_inequalities</span>  <span class=\"mi\">36</span><span class=\"bp\">.</span><span class=\"mi\">4278</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">convex</span><span class=\"bp\">/</span><span class=\"n\">specific_functions</span>  <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">9636</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">pow</span>  <span class=\"mi\">124</span><span class=\"bp\">.</span><span class=\"mi\">392</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">trigonometric</span>    <span class=\"mi\">172</span><span class=\"bp\">.</span><span class=\"mi\">476</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">exp_log</span>  <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">8909</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">real_deriv</span> <span class=\"mi\">16</span><span class=\"bp\">.</span><span class=\"mi\">6262</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">conformal</span>  <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">4022</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">conformal_linear_map</span>  <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">4382</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">inner_product</span> <span class=\"mi\">225</span><span class=\"bp\">.</span><span class=\"mi\">452</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">sqrt</span> <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">66522</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">times_cont_diff</span>   <span class=\"mi\">115</span><span class=\"bp\">.</span><span class=\"mi\">127</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">mean_value</span>    <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">793</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">local_extr</span>    <span class=\"mi\">16</span><span class=\"bp\">.</span><span class=\"mi\">9887</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">deriv</span> <span class=\"mi\">87</span><span class=\"bp\">.</span><span class=\"mi\">9592</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">fderiv</span>    <span class=\"mi\">114</span><span class=\"bp\">.</span><span class=\"mi\">51</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">analytic</span><span class=\"bp\">/</span><span class=\"n\">basic</span> <span class=\"mi\">73</span><span class=\"bp\">.</span><span class=\"mi\">1241</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">formal_multilinear_series</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">70325</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">multilinear</span>   <span class=\"mi\">130</span><span class=\"bp\">.</span><span class=\"mi\">405</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">operator_norm</span> <span class=\"mi\">97</span><span class=\"bp\">.</span><span class=\"mi\">637</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">linear_isometry</span>   <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">22745</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">finite_dimensional</span>   <span class=\"mi\">58</span><span class=\"bp\">.</span><span class=\"mi\">8543</span>\n<span class=\"n\">field_theory</span><span class=\"bp\">/</span><span class=\"n\">finiteness</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">43609</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">finiteness</span>  <span class=\"mi\">27</span><span class=\"bp\">.</span><span class=\"mi\">3561</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">algebra_tower</span>   <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">1719</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">adjoin</span><span class=\"bp\">/</span><span class=\"n\">fg</span>   <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">21294</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">adjoin</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span>   <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">80635</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">basic</span>    <span class=\"mi\">72</span><span class=\"bp\">.</span><span class=\"mi\">7344</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">principal_ideal_domain</span>  <span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">6089</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">unique_factorization_domain</span> <span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">9805</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">integral_domain</span> <span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">11644</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">ring_division</span>   <span class=\"mi\">16</span><span class=\"bp\">.</span><span class=\"mi\">6944</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">div</span> <span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">952</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">monic</span>   <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">6841</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">reverse</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">24052</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">eval</span>    <span class=\"mi\">33</span><span class=\"bp\">.</span><span class=\"mi\">6065</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">degree</span><span class=\"bp\">/</span><span class=\"n\">definitions</span>  <span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">1174</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">monomial</span>    <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">8134</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">coeff</span>   <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">6286</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">basic</span>   <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">7989</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">/</span><span class=\"n\">basic</span>    <span class=\"mi\">77</span><span class=\"bp\">.</span><span class=\"mi\">746</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">non_unital_alg_hom</span>  <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">13058</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">basic</span>   <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">5372</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">tensor_product</span>   <span class=\"mi\">45</span><span class=\"bp\">.</span><span class=\"mi\">8692</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">bilinear_map</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">95732</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">basic</span>    <span class=\"mi\">92</span><span class=\"bp\">.</span><span class=\"mi\">5836</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp</span>   <span class=\"mi\">59</span><span class=\"bp\">.</span><span class=\"mi\">9861</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">module</span><span class=\"bp\">/</span><span class=\"n\">linear_map</span>   <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">07023</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_action_hom</span>    <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">23101</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_ring_action</span>   <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">2552</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">subring</span> <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">4688</span>\n<span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">subgroup</span>   <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">3691</span>\n<span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">submonoid</span><span class=\"bp\">/</span><span class=\"n\">center</span>   <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">91385</span>\n<span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">submonoid</span><span class=\"bp\">/</span><span class=\"n\">operations</span>   <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">3513</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">pointwise</span>   <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">32447</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">module</span><span class=\"bp\">/</span><span class=\"n\">basic</span>    <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">11838</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">big_operators</span><span class=\"bp\">/</span><span class=\"n\">basic</span> <span class=\"mi\">26</span><span class=\"bp\">.</span><span class=\"mi\">6518</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">abel</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">3525</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">norm_num</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">2906</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">rat</span><span class=\"bp\">/</span><span class=\"n\">cast</span>   <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">50179</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">int</span><span class=\"bp\">/</span><span class=\"n\">char_zero</span>  <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">92927</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">char_zero</span>   <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">30769</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">fintype</span><span class=\"bp\">/</span><span class=\"n\">basic</span>  <span class=\"mi\">26</span><span class=\"bp\">.</span><span class=\"mi\">5525</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">powerset</span>    <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">87303</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">lattice</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">63514</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">fold</span>    <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0229</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">basic</span>   <span class=\"mi\">34</span><span class=\"bp\">.</span><span class=\"mi\">6086</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">finset_ops</span>    <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">31185</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">erase_dup</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">25666</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">nodup</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">91105</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">powerset</span>  <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">57061</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">basic</span> <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">7305</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">perm</span>  <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">7846</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">erase_dup</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">60637</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">nodup</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">45075</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">pairwise</span>  <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">81794</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">sublists</span>  <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">30711</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">basic</span> <span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">1169</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">nat</span><span class=\"bp\">/</span><span class=\"n\">basic</span>  <span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">98537</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered_ring</span>    <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">1195</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">intervals</span><span class=\"bp\">/</span><span class=\"n\">basic</span>    <span class=\"mi\">16</span><span class=\"bp\">.</span><span class=\"mi\">4385</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered_group</span>   <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">7727</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered_monoid</span>  <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">291</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">/</span><span class=\"n\">prod</span>  <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">30827</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">opposites</span>   <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">50444</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">field</span>   <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">38681</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ring</span><span class=\"bp\">/</span><span class=\"n\">basic</span>  <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">85919</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">regular</span><span class=\"bp\">/</span><span class=\"n\">basic</span>   <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">31733</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">embedding</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">46166</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">equiv</span><span class=\"bp\">/</span><span class=\"n\">basic</span>    <span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">8946</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">function</span>   <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">41891</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">basic</span>  <span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">229</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">boolean_algebra</span>   <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">0211</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">bounded_lattice</span>   <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">16343</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">lattice</span>   <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">56701</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">rel_classes</span>   <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">19856</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">basic</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">60228</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">prod</span>   <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">839731</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">basic</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">567406</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">obviously</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">494836</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">tidy</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">568107</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">norm_cast</span>    <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">24841</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">hint</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">558297</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">interactive</span>  <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2318</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">dependencies</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">609335</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">core</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">68626</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">binder_matching</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">456182</span>\n<span class=\"kd\">meta</span><span class=\"bp\">/</span><span class=\"n\">expr</span>   <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">04582</span>\n<span class=\"kd\">meta</span><span class=\"bp\">/</span><span class=\"n\">rb_map</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">421523</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">defs</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">947617</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">61654</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">doc_commands</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">477453</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">fix_reflect_string</span>   <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">359337</span>\n</code></pre></div>",
        "id": 253932389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632044274
    },
    {
        "content": "<p>If anyone is interested I can post the longest chain starting at any given (or even all) files in mathlib.</p>",
        "id": 253932444,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632044302
    },
    {
        "content": "<p>If anyone sees something slow on that list that shouldn't really be needed for <code>data/real/pi</code>, feel free to PR changes that move things off this chain, or speed them up!</p>",
        "id": 253932482,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632044367
    },
    {
        "content": "<p>Here's a spanning tree of mathlib, for which each file's parent has been chosen as the slowest-to-compile-given-arbitrary-parallelism:</p>\n<p><a href=\"/user_uploads/3121/SzTF1YhQtjQRYkE4qxLPoVOw/Screen-Shot-2021-09-19-at-8.44.03-pm.png\">Screen-Shot-2021-09-19-at-8.44.03-pm.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SzTF1YhQtjQRYkE4qxLPoVOw/Screen-Shot-2021-09-19-at-8.44.03-pm.png\" title=\"Screen-Shot-2021-09-19-at-8.44.03-pm.png\"><img src=\"/user_uploads/3121/SzTF1YhQtjQRYkE4qxLPoVOw/Screen-Shot-2021-09-19-at-8.44.03-pm.png\"></a></div><p>I have a version in mathematica with tooltips that actually show the files names, but I don't have an easy to share version of that.</p>",
        "id": 253936297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632048390
    },
    {
        "content": "<p>It certainly looks like poor <code>π</code> needs to wait for a lot of stuff. Finite dimensional vector spaces, inner products, unique factorization domains.</p>",
        "id": 253938595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632050780
    },
    {
        "content": "<p>How did you obtain the data? Is it something we should set up a CI bot to do?</p>",
        "id": 253946556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632059380
    },
    {
        "content": "<p>I pulled the JSON file of mathlib build times from the CI stream (e.g. \"<a href=\"https://mathlib-bench.limperg.de/commit/10a620163757cd2cf745db99c686e9721a1d0d3b/json\">https://mathlib-bench.limperg.de/commit/10a620163757cd2cf745db99c686e9721a1d0d3b/json</a>\"), and then parsed all the mathlib files for <code>import</code> statements.</p>",
        "id": 253973715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632087545
    },
    {
        "content": "<p>It's written in mathematica, so not exactly deployable in CI, but it would be easy to translate if someone wanted to.</p>",
        "id": 253973799,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632087617
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/_RH2PL51yO-_cbXChYFsTz76/mathlib-imports.nb\">mathlib-imports.nb</a></p>",
        "id": 253973810,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632087633
    },
    {
        "content": "<p>Seems like <code>smul_eq_C_mul</code> in <code>data/polynomial/monomial</code> is the only reason that file can't import <code>data/polynomial/basic</code> directly instead of <code>data/polynomial/coeff</code>. I remember there being some kind of awkward interdependency between those, but I guess it's resolved now.</p>",
        "id": 253981628,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632096314
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9289\">#9289</a> was motivated by this analysis: we don't need the theory of finite dimensional vector spaces to develop pi.</p>",
        "id": 253987429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632102318
    },
    {
        "content": "<p>It reduces the long pole from 54.6 minutes to 51.6 minutes.</p>",
        "id": 253987441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632102347
    },
    {
        "content": "<p>Does the longest pole switch to something completely different when you make this change, or is most of it the same?</p>",
        "id": 253990911,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632106024
    },
    {
        "content": "<p>No, this one is going to be the long pole for a long time.</p>",
        "id": 253991958,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632107162
    },
    {
        "content": "<p>After <a href=\"https://github.com/leanprover-community/mathlib/issues/9292\">#9292</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/9293\">#9293</a> the long pole is down to 46.5 minutes.</p>",
        "id": 253996525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632112515
    },
    {
        "content": "<p>Here's a script, based on <code>get_axioms_used</code>, that will print the files used in all dependents of a given list of target theorems. If you run this on all theorems in <code>data.real.pi</code> you should get a lower bound on the files that are needed to actually prove the theorems, assuming you don't split any files up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.pi</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.get_dependents_aux</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span>\n  <span class=\"n\">name_set</span> <span class=\"bp\">×</span> <span class=\"n\">name_set</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">name_set</span> <span class=\"bp\">×</span> <span class=\"n\">name_set</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">fs</span><span class=\"o\">,</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">ns.contains</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fs</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">env.decl_olean</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">fs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">fs.insert</span> <span class=\"n\">f</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">env.get</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"n\">ns.insert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">process</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">name_set</span> <span class=\"bp\">×</span> <span class=\"n\">name_set</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">v.fold</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fs</span><span class=\"o\">,</span> <span class=\"n\">ns</span><span class=\"o\">))</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">e.is_constant</span> <span class=\"k\">then</span> <span class=\"n\">tactic.get_dependents_aux</span> <span class=\"n\">e.const_name</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">declaration.defn</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">process</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">declaration.thm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"n\">process</span> <span class=\"n\">v.get</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fs</span><span class=\"o\">,</span> <span class=\"n\">ns</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.get_dependents</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">name_set</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">prod.fst</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">ns.mfoldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">tactic.get_dependents_aux</span> <span class=\"n\">env</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk_name_set</span><span class=\"o\">,</span> <span class=\"n\">mk_name_set</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_dependents</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">real.pi_gt_3141592</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">real.pi_lt_3141593</span><span class=\"o\">],</span>\n  <span class=\"n\">s.fold</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"o\">())</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 253997791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632113966
    },
    {
        "content": "<p>Taking the diff from the \"long pole\" above yields the following list of files, which are imported but for which none of the theorems are used transitively:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_ring_action</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">non_unital_alg_hom</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">opposites</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered_group</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered_monoid</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered_ring</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">analytic</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">local_extr</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">conformal</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">convex</span><span class=\"bp\">/</span><span class=\"n\">specific_functions</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">mean_inequalities</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">conformal_linear_map</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">integrals</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">pow</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">sqrt</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">powerset</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">sublists</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">powerset</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">coeff</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">degree</span><span class=\"bp\">/</span><span class=\"n\">definitions</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">div</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">eval</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">monic</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">monomial</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">reverse</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">ring_division</span>\n<span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">submonoid</span><span class=\"bp\">/</span><span class=\"n\">center</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">tensor_product</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">pi</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">prod</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">l1_space</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">lp_space</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">simple_func_dense</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">bochner</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">interval_integral</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">mean_inequalities</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_integral</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_to_l1</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">lebesgue</span>\n<span class=\"kd\">meta</span><span class=\"bp\">/</span><span class=\"n\">expr</span>\n<span class=\"kd\">meta</span><span class=\"bp\">/</span><span class=\"n\">rb_map</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">adjoin</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">integral_domain</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">subring</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">unique_factorization_domain</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">binder_matching</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">core</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">dependencies</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">doc_commands</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">fix_reflect_string</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">hint</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">interactive</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">obviously</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">tidy</span>\n</code></pre></div>",
        "id": 253998003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632114119
    },
    {
        "content": "<p>Very interesting! Taking the files appearing in the long pile to <code>data.real.pi</code>, subtracting out Mario's list (everything that is actually needed), we get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_ring_action</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">opposites</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">analytic</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">inverse</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">local_extr</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">convex</span><span class=\"bp\">/</span><span class=\"n\">specific_functions</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">mean_inequalities</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">integrals</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">pow</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">powerset</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">sublists</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">powerset</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">tensor_product</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">pi</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">prod</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">l1_space</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">lp_space</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">simple_func_dense</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">bochner</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">interval_integral</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">mean_inequalities</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_integral</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_to_l1</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">lebesgue</span>\n<span class=\"kd\">meta</span><span class=\"bp\">/</span><span class=\"n\">expr</span>\n<span class=\"kd\">meta</span><span class=\"bp\">/</span><span class=\"n\">rb_map</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">subring</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">binder_matching</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">core</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">dependencies</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">doc_commands</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">fix_reflect_string</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">hint</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">interactive</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">obviously</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">tidy</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">infinite_sum</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">instances</span><span class=\"bp\">/</span><span class=\"n\">ennreal</span>\n</code></pre></div>",
        "id": 253998298,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632114372
    },
    {
        "content": "<p>we got different lists <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 253998337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632114427
    },
    {
        "content": "<p>These are the files that we are \"uselessly importing\" on the way to <code>data.real.pi</code>. In particular \"most of measure theory\".</p>",
        "id": 253998362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632114462
    },
    {
        "content": "<p>No -- this complement is exactly what is interesting. It's the stuff that, by doing a bit of splitting so we can only import what we really need, can be removed from the import dependencies of <code>data.real.pi</code>.</p>",
        "id": 253998437,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632114509
    },
    {
        "content": "<p>No, I mean I updated my list above to do basically the same calculation (I think) and got a different list of files</p>",
        "id": 253998457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632114541
    },
    {
        "content": "<p>mine doesn't have any topology</p>",
        "id": 253998465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632114550
    },
    {
        "content": "<p>Oh! I missed the edit above, soory.</p>",
        "id": 253998471,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632114560
    },
    {
        "content": "<p>Oh, maybe you are including the effect of those PRs</p>",
        "id": 253998482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632114586
    },
    {
        "content": "<p>I used latest master</p>",
        "id": 253998495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632114599
    },
    {
        "content": "<p>Yes, I was using a local branch which was the sup of today's PRs on this.</p>",
        "id": 253998540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632114610
    },
    {
        "content": "<p>So the difference between our lists is what I've already removed from the import dependencies of <code>data.real.pi</code>.</p>",
        "id": 253998556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632114629
    },
    {
        "content": "<p>Of course, my PRs have not finished CI, so are probably still horribly broken by missing imports. :-)</p>",
        "id": 253998590,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632114675
    },
    {
        "content": "<p>Also, I didn't include all of the theorems in <code>data.real.pi</code>, just the bound calculation</p>",
        "id": 253998602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632114692
    },
    {
        "content": "<p>Oh, and it makes a difference: all these files are added to the list when you add in the wallis product and leibniz series:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">big_operators</span><span class=\"bp\">/</span><span class=\"n\">finsupp</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">char_p</span><span class=\"bp\">/</span><span class=\"n\">invertible</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">invertible</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">opposites</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">extend_deriv</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">local_extr</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">convex</span><span class=\"bp\">/</span><span class=\"n\">combination</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">convex</span><span class=\"bp\">/</span><span class=\"n\">cone</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">convex</span><span class=\"bp\">/</span><span class=\"n\">specific_functions</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">mean_inequalities</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">dual</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">extend</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">hahn_banach</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">indicator_function</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">units</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">integrals</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">pow</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">equiv</span><span class=\"bp\">/</span><span class=\"n\">encodable</span><span class=\"bp\">/</span><span class=\"n\">lattice</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">equiv</span><span class=\"bp\">/</span><span class=\"n\">local_equiv</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">equiv</span><span class=\"bp\">/</span><span class=\"n\">nat</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">equiv</span><span class=\"bp\">/</span><span class=\"n\">ring</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">nat</span><span class=\"bp\">/</span><span class=\"n\">parity</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">opposite</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">coeff</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">derivative</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">eval</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">induction</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">conjugate_exponents</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">ereal</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">accumulate</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">intervals</span><span class=\"bp\">/</span><span class=\"n\">disjoint</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">intervals</span><span class=\"bp\">/</span><span class=\"n\">proj_Icc</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">pairwise</span>\n<span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">perm</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">linear_pmap</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">relator</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">borel_space</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">ae_eq_fun</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">ae_measurable_sequence</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">ess_sup</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">l1_space</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">lp_space</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">simple_func_dense</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">/</span><span class=\"n\">arithmetic</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">bochner</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">integrable_on</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">interval_integral</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">lebesgue</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">mean_inequalities</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_integral</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_to_l1</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">vitali_caratheodory</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measurable_space</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measurable_space_def</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">lebesgue</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">measure_space</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">measure_space_def</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">outer_measure</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">regular</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">stieltjes</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">pi_system</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">disjointed</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">archimedean</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">cofinite</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">countable_Inter</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">ennreal</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">extr</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">germ</span>\n<span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">liminf_limsup</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">ring_exp</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_with_zero</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">infinite_sum</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered</span><span class=\"bp\">/</span><span class=\"n\">liminf_limsup</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered</span><span class=\"bp\">/</span><span class=\"n\">proj_Icc</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">bases</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">dense_embedding</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">instances</span><span class=\"bp\">/</span><span class=\"n\">ennreal</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">instances</span><span class=\"bp\">/</span><span class=\"n\">ereal</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">local_extr</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">local_homeomorph</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">metric_space</span><span class=\"bp\">/</span><span class=\"n\">cau_seq_filter</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">semicontinuous</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">sequences</span>\n</code></pre></div>",
        "id": 253998833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632114958
    },
    {
        "content": "<p>which brings the list of unnecessary imports down to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_ring_action</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">analytic</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">inverse</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">powerset</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">sublists</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">powerset</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">tensor_product</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">pi</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">prod</span>\n<span class=\"kd\">meta</span><span class=\"bp\">/</span><span class=\"n\">expr</span>\n<span class=\"kd\">meta</span><span class=\"bp\">/</span><span class=\"n\">rb_map</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">subring</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">basic</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">binder_matching</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">core</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">dependencies</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">doc_commands</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">fix_reflect_string</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">hint</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">interactive</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">obviously</span>\n<span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">tidy</span>\n</code></pre></div>",
        "id": 253998943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632115082
    },
    {
        "content": "<p>but it also suggests that maybe the two halves of <code>data.real.pi</code> shouldn't be in the same file</p>",
        "id": 253999001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632115118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What is the difference between the length of the long pole and the length of an actual mathlib compile? Can we gain something by making lean aware of the long pole?</p>",
        "id": 254081844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632156946
    },
    {
        "content": "<p>The Wallis product argument could be rephrased to use the mean value theorem rather than the fundamental theorem of calculus (thus, no measure theory import), if we want to displace the precise position of the long pole.</p>",
        "id": 254098405,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632163545
    },
    {
        "content": "<p>I don't think it's particularly valuable to reduce the long pole at the cost of new mathematical arguments, unless they are independently \"better\".</p>",
        "id": 254113424,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632169942
    },
    {
        "content": "<p>I don't want to object to anyone using high powered maths to give easy proofs. :-)</p>",
        "id": 254113460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632169957
    },
    {
        "content": "<p>But, like in real life, if someone gave me a long-winded introduction to subject X, then gave an argument that didn't use it at all, I would be annoyed!</p>",
        "id": 254113572,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632170013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib/near/254081844\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> What is the difference between the length of the long pole and the length of an actual mathlib compile? Can we gain something by making lean aware of the long pole?</p>\n</blockquote>\n<p>I guess potentially we could.</p>\n<p>Currently the long pole analysis assumes infinite parallelism, in which case the build would be deterministic --- everything would compile as soon as it possibly could. In that idealisation the only way to speed things up is to shorten the long pole by changing the code.</p>\n<p>With finite parallelism, every time a core come free you have to make a choice between the new compilation units that become available.</p>\n<p>It's not immediately clear how to do a cheap computation on-the-fly to decide this. I guess at the beginning we could just assign each file a score \"total compilation time remaining after this file, assuming infinite parallelism\", and always pick the file with largest score. This would be pretty easy to implement. It would even be reasonable to simulate (e.g. and compare against the \"random\" and \"smallest score\" strategies to get a sense of value).</p>",
        "id": 254132873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632179718
    },
    {
        "content": "<p>Lean is also more finely parallelized than this - each proof is processed independently, although perhaps the advantage of this is dubious and I believe this is no longer done in lean 4. So this \"long pole\" model is maybe a little too coarse, although it's not entirely wrong to consider the cost of reading through the definitions and other objects involved in parsing a lean file (the single threaded part) since they contribute to this \"long pole\", but it is a bit untrue to put the elaboration cost of all the proofs in that metric.</p>",
        "id": 254147035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632191196
    },
    {
        "content": "<p>The per-declaration parallelisation is gone in Lean4, and I'm not sure it actually crosses file boundaries in Lean3 anyway. (Does anyone know for sure on this? That is, if <code>A</code> imports <code>B</code>, does compilation of <code>A</code> start once all the definitions on <code>B</code> are done, even if there are still proofs to <code>B</code> being worked on? Or does <code>A</code> not start until the <code>B</code> is completely finished?)</p>",
        "id": 254149543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632193583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib/near/254132873\">said</a>:</p>\n<blockquote>\n<p>With finite parallelism, every time a core come free you have to make a choice between the new compilation units that become available.</p>\n<p>It's not immediately clear how to do a cheap computation on-the-fly to decide this. I guess at the beginning we could just assign each file a score \"total compilation time remaining after this file, assuming infinite parallelism\", and always pick the file with largest score. This would be pretty easy to implement. It would even be reasonable to simulate (e.g. and compare against the \"random\" and \"smallest score\" strategies to get a sense of value).</p>\n</blockquote>\n<p>Right, I meant exactly this. The score is only an approximation of the \"real 16-core parallelism score\" because it makes a simplification in computing the score. But it might still be a better heuristic than \"pick something random\".</p>",
        "id": 254152105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632196375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib/near/254149543\">said</a>:</p>\n<blockquote>\n<p>The per-declaration parallelisation is gone in Lean4, and I'm not sure it actually crosses file boundaries in Lean3 anyway. (Does anyone know for sure on this? That is, if <code>A</code> imports <code>B</code>, does compilation of <code>A</code> start once all the definitions on <code>B</code> are done, even if there are still proofs to <code>B</code> being worked on? Or does <code>A</code> not start until the <code>B</code> is completely finished?)</p>\n</blockquote>\n<p>I made a simple test project to check whether lean does move on to lemmas in later files and it seems it does.<br>\nIn <a href=\"https://github.com/alexjbest/pole-test\">https://github.com/alexjbest/pole-test</a> there are two lean files <code>a</code> and <code>b</code>, each of which has two lemmas, the ones in <code>a</code> sleep for 10 and 20 seconds respectively. The ones in <code>b</code> just spam the CPU with dumb rfl statements. So running <code>lean -j2 src/b.lean</code> to check these files with 2 threads I see nothing happening to the CPU for 10 seconds, then 100% of one core, then 10 seconds later 200%, which I think shows lean is moving on to <code>b</code> with one thread while the longer lemma in <code>a</code> is still being processed. Of course this will look a bit different if your machine is fast enough to do the <code>b</code> lemmas in &lt; 10s.</p>",
        "id": 254223601,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632237117
    },
    {
        "content": "<p>Good to know! Thank you. In any case this behaviour is disappearing in Lean4, so we shouldn't plan around it. :-)</p>",
        "id": 254293161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632266788
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9344\">#9344</a> is a PR for a python implementation of this script.</p>",
        "id": 254494233,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632382856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span>, I see you closed the PR in favour of a PR to mathlibtools. It's perfect if this functionality ends up in <code>leanproject</code>, but be aware the quality standards for <code>leanproject</code> are going to much higher than the <code>scripts/</code> directory of mathlib. Perfect is the enemy of good: if this doesn't make it into <code>leanproject</code>, please do dump it into <code>scripts/</code>!</p>",
        "id": 254500109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632385866
    },
    {
        "content": "<p>A middle ground would be to just <code>import mathlibtools</code>, as something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">from</span> <span class=\"n\">mathlibtools.lib</span> <span class=\"kn\">import</span> <span class=\"n\">LeanProject</span>\n\n<span class=\"n\">proj</span> <span class=\"bp\">=</span> <span class=\"n\">LeanProject.from_path</span><span class=\"o\">(</span><span class=\"n\">Path</span><span class=\"o\">(</span><span class=\"s2\">\".\"</span><span class=\"o\">))</span>\n<span class=\"n\">graph</span> <span class=\"bp\">=</span> <span class=\"n\">proj.import_graph</span>\n</code></pre></div>",
        "id": 254501266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632386500
    },
    {
        "content": "<p>That might be the better choice anyway, in fact, as the json files this processes only really exist for mathlib</p>",
        "id": 254501440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632386608
    },
    {
        "content": "<p>The only downside is that the install instructions for mathlibtools don't make the import available on all platforms</p>",
        "id": 254501529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632386644
    },
    {
        "content": "<p>But if you use <code>pip</code> and not <code>pipx</code> it works fine</p>",
        "id": 254501576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632386678
    },
    {
        "content": "<p>Ok, I cracked and wrote a mathlib scheduler simulator.</p>\n<p>These graphs are based on a random scheduler.</p>\n<p>Compile time as function of max cores:<br>\n<a href=\"/user_uploads/3121/NmNXT--bG_Urn9alQhxrMsIB/Screen-Shot-2021-09-23-at-8.54.29-pm.png\">Screen-Shot-2021-09-23-at-8.54.29-pm.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NmNXT--bG_Urn9alQhxrMsIB/Screen-Shot-2021-09-23-at-8.54.29-pm.png\" title=\"Screen-Shot-2021-09-23-at-8.54.29-pm.png\"><img src=\"/user_uploads/3121/NmNXT--bG_Urn9alQhxrMsIB/Screen-Shot-2021-09-23-at-8.54.29-pm.png\"></a></div><p>Core usage with max 4/10/40 cores:<br>\n<a href=\"/user_uploads/3121/qYdwrHXH3QT3GzDt1wZhC11i/Screen-Shot-2021-09-23-at-8.50.31-pm.png\">Screen-Shot-2021-09-23-at-8.50.31-pm.png</a> <a href=\"/user_uploads/3121/NN9AS-48M85N0SkXl--cAN-z/Screen-Shot-2021-09-23-at-8.50.36-pm.png\">Screen-Shot-2021-09-23-at-8.50.36-pm.png</a> <a href=\"/user_uploads/3121/njV_vPYNCiSeOu6BuYECK60H/Screen-Shot-2021-09-23-at-8.50.43-pm.png\">Screen-Shot-2021-09-23-at-8.50.43-pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qYdwrHXH3QT3GzDt1wZhC11i/Screen-Shot-2021-09-23-at-8.50.31-pm.png\" title=\"Screen-Shot-2021-09-23-at-8.50.31-pm.png\"><img src=\"/user_uploads/3121/qYdwrHXH3QT3GzDt1wZhC11i/Screen-Shot-2021-09-23-at-8.50.31-pm.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NN9AS-48M85N0SkXl--cAN-z/Screen-Shot-2021-09-23-at-8.50.36-pm.png\" title=\"Screen-Shot-2021-09-23-at-8.50.36-pm.png\"><img src=\"/user_uploads/3121/NN9AS-48M85N0SkXl--cAN-z/Screen-Shot-2021-09-23-at-8.50.36-pm.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/njV_vPYNCiSeOu6BuYECK60H/Screen-Shot-2021-09-23-at-8.50.43-pm.png\" title=\"Screen-Shot-2021-09-23-at-8.50.43-pm.png\"><img src=\"/user_uploads/3121/njV_vPYNCiSeOu6BuYECK60H/Screen-Shot-2021-09-23-at-8.50.43-pm.png\"></a></div>",
        "id": 254515818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632394548
    },
    {
        "content": "<p>So far, trying different scheduling strategies gives no more than about a 10% variation. And \"random\" seems to be close to the best. :-)</p>",
        "id": 254516465,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632394879
    },
    {
        "content": "<p>hmmm, thanks a lot!</p>",
        "id": 254516608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632394953
    },
    {
        "content": "<p>Even though it's a bit disappointing that \"random\" is good enough</p>",
        "id": 254516630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632394967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> what are these graphs/what is the scheduler simulator? is it just working at file level granularity?</p>",
        "id": 254519188,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632396494
    },
    {
        "content": "<p>Here's another interesting way to cut the data: weight the files extra based on how much under-utilization there is. That is, if CPU utilization is 3 CPUs when 10 are available, then all three active files get 10/3 more \"effective time\" to their name. Files with the most effective time spent on them exist at cutpoints and decreases in the time spent there will have outsized benefits</p>",
        "id": 254519304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632396586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, yes, it's just working at file level. I keep track of a set of files remaining. Each entry is a filename, a time to compile that file, and a list of remaining dependencies. Whenever there is a CPU available and at least one file with no remaining dependencies, I pass the list of such files to the \"scheduler\" function to pick which one to start work on.</p>",
        "id": 254600798,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632429353
    },
    {
        "content": "<p>Mario's suggestion, top 20 by utilisation-weighted compilation time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">interval_integral</span>   <span class=\"mi\">912</span><span class=\"bp\">.</span><span class=\"mi\">659</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">simple_func_dense</span>   <span class=\"mi\">717</span><span class=\"bp\">.</span><span class=\"mi\">784</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">bochner</span> <span class=\"mi\">698</span><span class=\"bp\">.</span><span class=\"mi\">796</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_to_l1</span>   <span class=\"mi\">535</span><span class=\"bp\">.</span><span class=\"mi\">138</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">prod</span>   <span class=\"mi\">533</span><span class=\"bp\">.</span><span class=\"mi\">549</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">integrals</span>    <span class=\"mi\">511</span><span class=\"bp\">.</span><span class=\"mi\">95</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">pow</span>  <span class=\"mi\">417</span><span class=\"bp\">.</span><span class=\"mi\">861</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_integral</span>    <span class=\"mi\">400</span><span class=\"bp\">.</span><span class=\"mi\">362</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">lp_space</span>    <span class=\"mi\">373</span><span class=\"bp\">.</span><span class=\"mi\">746</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">quadratic_form</span>   <span class=\"mi\">331</span><span class=\"bp\">.</span><span class=\"mi\">299</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">l1_space</span>    <span class=\"mi\">255</span><span class=\"bp\">.</span><span class=\"mi\">831</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">hausdorff</span>    <span class=\"mi\">244</span><span class=\"bp\">.</span><span class=\"mi\">415</span>\n<span class=\"n\">geometry</span><span class=\"bp\">/</span><span class=\"n\">euclidean</span><span class=\"bp\">/</span><span class=\"n\">circumcenter</span> <span class=\"mi\">236</span><span class=\"bp\">.</span><span class=\"mi\">834</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">inner_product</span> <span class=\"mi\">227</span><span class=\"bp\">.</span><span class=\"mi\">198</span>\n<span class=\"n\">geometry</span><span class=\"bp\">/</span><span class=\"n\">manifold</span><span class=\"bp\">/</span><span class=\"n\">times_cont_mdiff</span>  <span class=\"mi\">221</span><span class=\"bp\">.</span><span class=\"mi\">865</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">clifford_algebra</span><span class=\"bp\">/</span><span class=\"n\">equivs</span>  <span class=\"mi\">217</span><span class=\"bp\">.</span><span class=\"mi\">447</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">lebesgue</span> <span class=\"mi\">207</span><span class=\"bp\">.</span><span class=\"mi\">226</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">trigonometric</span>    <span class=\"mi\">192</span><span class=\"bp\">.</span><span class=\"mi\">349</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">decomposition</span><span class=\"bp\">/</span><span class=\"n\">lebesgue</span>   <span class=\"mi\">181</span><span class=\"bp\">.</span><span class=\"mi\">744</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">measure_space</span>    <span class=\"mi\">166</span><span class=\"bp\">.</span><span class=\"mi\">835</span>\n</code></pre></div>",
        "id": 254601485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632429608
    },
    {
        "content": "<p>I'm not sure that it is that interesting ---  mostly we're just seeing that the rest of mathlib is done by the time we get to integration.</p>",
        "id": 254601595,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632429650
    },
    {
        "content": "<p>I think the measure space library generally opts to introduce a notion and prove everything about it all in one file, so it ends up being a long sequence of files, each depending on one file before it, and not much parallelism is possible.</p>",
        "id": 254811629,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632548864
    },
    {
        "content": "<p>As an example, I found it pretty surprising that the file in which we define a product measure already imports \"everything\" about Lebesgue measure. I would have thought that the basic construction would come much earlier. (e.g. even in a context where integration isn't set up, so Fubini/Tonelli would happen in a later file).</p>",
        "id": 254811742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632548979
    },
    {
        "content": "<p>What can we do to detect such \"short poles\" in mathlib? That is, linear sequences of files with high compile time</p>",
        "id": 254811824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632549046
    },
    {
        "content": "<p>This is a version of the spanning tree, where the y-coordinate of a node gives the time to reach that file under infinite parallelism, and the parent of each node is the last-to-start import.</p>\n<p><a href=\"/user_uploads/3121/vWAif9iwHih8CSnvPD48gLNA/mathlib-spanning-tree.png\">mathlib-spanning-tree.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vWAif9iwHih8CSnvPD48gLNA/mathlib-spanning-tree.png\" title=\"mathlib-spanning-tree.png\"><img src=\"/user_uploads/3121/vWAif9iwHih8CSnvPD48gLNA/mathlib-spanning-tree.png\"></a></div>",
        "id": 254814761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632552172
    },
    {
        "content": "<p>Part of the problem is that Bochner integration imports L1 space which imports Lp space, which imports the function of raising a real number to the p-th power, which imports all of calculus.</p>\n<p>We have a construction of the exponential which doesn't use calculus:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/data.complex.exponential\">docs#data.complex.exponential</a><br>\nWould it be worth adding the definition of powers to this file, too?  Then measure theory could be compiled in parallel to calculus rather than after it.</p>",
        "id": 254840814,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632577353
    },
    {
        "content": "<p>This sounds great! It does seem like we should be able to do a lot of integration theory without calculus.</p>",
        "id": 254849557,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632585091
    },
    {
        "content": "<p>Is the correct version of that link <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp\">docs#complex.exp</a>?</p>",
        "id": 254849788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632585282
    },
    {
        "content": "<p>I think Heather wanted to link to a file. I guess we could potentially have file#data.complex.exponential ?</p>",
        "id": 254858334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632593011
    },
    {
        "content": "<p>It seems a reasonable first step might be to break <code>analysis/mean_inequalities</code> into separate files, so it's easier to pinpoint exactly which lemmas about <code>has_pow ℝ ℝ</code> are really needed.</p>",
        "id": 254875759,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632609140
    },
    {
        "content": "<p>Yes -- note that it's possible that some proofs currently use calculus but wouldn't have to, like I wouldn't be surprised if there's a more direct proof of convexity.</p>",
        "id": 254875824,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632609241
    },
    {
        "content": "<p>Another possibility is</p>\n<ul>\n<li>define <code>[Lp_class f g]</code> where <code>f</code> and <code>g</code> are a pair of inverse functions from <code>ℝ≥0∞</code> to itself satisfying ... some list of properties</li>\n<li>define <code>Lp_space</code> to take <code>(f : ℝ≥0∞ → ℝ≥0∞) (g : ℝ≥0∞ → ℝ≥0∞) [Lp_class f g]</code> rather than <code>p</code></li>\n<li>check that <code>[Lp_class id id]</code> and define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> to be <code>Lp_space id id</code></li>\n<li>much later in the hierarchy, check that <code>[Lp_class (λ x, x ^ p) (λ x, x ^ (1 / p))]</code></li>\n</ul>",
        "id": 254876142,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632609540
    },
    {
        "content": "<p>Hmm, I feel like this is too far a compromise. Mathlib compiling fast is nice, and I don't mind changing from one mathematically plausible definition to another to achieve this, but <code>[Lp_class]</code> doesn't really have a leg to stand on mathematically. :-)</p>",
        "id": 254876483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632609881
    },
    {
        "content": "<p>There would actually be one other use for <code>Lp_class</code>.  It is rather a pain currently that when people work with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, the squaring involved is raising to the <code>(2:ℝ≥0∞)</code> power rather than the nat-2 power.  One has to mess around with power-cast lemmas, usually explicitly because it's a bit beyond the capabilities of <code>norm_cast</code>. This would let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> be defined with nat-2 powers.</p>",
        "id": 254876734,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632610142
    },
    {
        "content": "<p>I feel like changing the proof of convexity of the exponential (and rpow) to use a direct computation (like the first answer there: <a href=\"https://math.stackexchange.com/questions/1583000/convexity-of-exponential-function\">https://math.stackexchange.com/questions/1583000/convexity-of-exponential-function</a>) and isolating the use of calculus in analysis.special_functions.pow is the simpler approach.</p>",
        "id": 254877115,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632610532
    },
    {
        "content": "<p>But I agree that the ennreal power in L2 is a pain :)</p>",
        "id": 254877181,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632610589
    },
    {
        "content": "<p>OK, let's do that!  Maybe we just need to sit down and figure out the right simp-lemmas to improve working in L2.</p>",
        "id": 254877217,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632610635
    },
    {
        "content": "<p>I'd thought I could try working on this today, but I seem to be in a no-ssh-allowed internet environment for a little while, and working on mathlib may just be too painful.</p>",
        "id": 254877229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632610653
    },
    {
        "content": "<p>I have started working on isolating calculus in analysis/special_functions. Currently, all proofs of continuity of exp, log and the trigonometric functions use the existence of derivatives. Then continuity of exp is used for the definition of the real log, which is used in the definition of complex log, cpow, etc.<br>\nI am replacing the proofs of continuity by direct ones in order to get a definition of all those objects without using derivatives.</p>",
        "id": 254915354,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632647609
    },
    {
        "content": "<p>Do we need the continuity for Lp spaces, though?</p>",
        "id": 254932095,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632663479
    },
    {
        "content": "<p>i don't know? i am not sure that I get what you ask.<br>\nI have observed that in order to define log (and everything that depends on it), we currently use continuity of the exponential: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.log\">docs#real.log</a> uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp_order_iso\">docs#real.exp_order_iso</a>, whose surjectivity is proven through continuity. Hence I have made that continuity derivative-free. You want to avoid talking about continuity in those definitions?</p>",
        "id": 254932445,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632663804
    },
    {
        "content": "<p>What is our proof that a function defined by a power series <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>a</mi><mi>n</mi></msub><msup><mi>z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_n a_nz^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is continuous where the power series converges? [I mean, what does it use?]</p>",
        "id": 254932515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632663863
    },
    {
        "content": "<p>I see, you're right, continuity seems like the easiest proof of surjectivity.  I can think of three approaches to get continuity:</p>\n<ul>\n<li>directly as you've done</li>\n<li>via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/analytic_at.continuous_at\">docs#analytic_at.continuous_at</a> as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> suggests</li>\n<li>prove that convex implies continuous (useful to have in any case)</li>\n</ul>",
        "id": 254949002,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1632678772
    },
    {
        "content": "<p>Oh, do we not have the last one?</p>",
        "id": 254952863,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632682224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>, please note I have <a href=\"https://github.com/leanprover-community/mathlib/issues/9340\">#9340</a> open, which splits the development of trigonometry across several files. This seems likely to conflict with what you're doing, so perhaps you could either have a look at my PR, or base your work on top of it?</p>",
        "id": 254968278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632696112
    },
    {
        "content": "<p>Indeed, I now have a big pile of conflicts because I split that file in a different way. That merge will be fun.</p>",
        "id": 255009577,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632730153
    },
    {
        "content": "<p>Sorry. :-( If it is too painful I can abandon mine. I'd prefer that content-ful PRs get priority over merely re-arranging PRs, of course.</p>",
        "id": 255011551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632731246
    },
    {
        "content": "<p>No problem. I'll deal with it.</p>",
        "id": 255011981,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632731502
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib/issues/9340\">#9340</a> is already merged into master anyway, so it's a bit late to abandon it :)</p>",
        "id": 255012123,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632731590
    },
    {
        "content": "<p>Looks like <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> is also modifying those files in <a href=\"https://github.com/leanprover-community/mathlib/issues/9405\">#9405</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/9406\">#9406</a> . I'll come back to this in a few days, when the special_functions folder stabilizes a bit.</p>",
        "id": 255039799,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632746112
    },
    {
        "content": "<p>Hi, did I miss some refactoring going on?</p>",
        "id": 255040168,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632746280
    },
    {
        "content": "<p>A big sweepy swoop!</p>",
        "id": 255040238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632746301
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9405\">#9405</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/9406\">#9406</a> are small PRs, I can redo them on top of any large refactor (though if the refactor is not ready yet, then I'd prefer to merge these, then help merging master).</p>",
        "id": 255040312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632746349
    },
    {
        "content": "<p>The refactor is not ready yet, because I did not see another PR that got merged recently and split many files. I will need time to fix my branch. You should go ahead with your PRs.</p>\n<p>The story is that I want to remove the dependence on derivatives in the definitions of the various special functions, which means removing derivatives from some proofs of continuity. Then all the files should be split into two, one of which does not import calculus.</p>",
        "id": 255040612,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632746509
    },
    {
        "content": "<p>The end goal, which relates this to the title of the thread, is to remove calculus from the imports of lp_space in measure theory</p>",
        "id": 255040738,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1632746567
    },
    {
        "content": "<p>Note that I'd like to have <code>exp</code> redefined in terms of power series from <code>analytic_at</code> some day.</p>",
        "id": 255041343,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632746833
    },
    {
        "content": "<p>And use the same definition for real numbers, complex numbers, and any Banach algebra.</p>",
        "id": 255041515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632746894
    },
    {
        "content": "<p>Though others may not agree.</p>",
        "id": 255041910,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632747068
    },
    {
        "content": "<p>previous discussion on this: <a href=\"#narrow/stream/113488-general/topic/exponential.20in.20banach.20algebras/near/248773988\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/exponential.20in.20banach.20algebras/near/248773988</a></p>",
        "id": 255043098,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632747588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> would it be possible to produce the same kind of spanning tree you showed above in that thread, applied to <a href=\"https://github.com/leanprover-community/mathlib/tree/pow_split\">branch#pow_split</a> ? In that branch, most of measure theory does not import derivatives.</p>",
        "id": 256384553,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1633513777
    },
    {
        "content": "<p>Sure!</p>",
        "id": 256384612,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633513803
    },
    {
        "content": "<p>Ah, maybe not, <a href=\"https://mathlib-bench.limperg.de/commit/ab7d25193590b63a2380632018cfb3c8616accdf\">https://mathlib-bench.limperg.de/commit/ab7d25193590b63a2380632018cfb3c8616accdf</a> is down, and I don't have a local copy.</p>",
        "id": 256384782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633513907
    },
    {
        "content": "<p>(These are the build times for files on master --- this won't really be accurate for analysing a different branch: we'll just use a different import graph, and pretend the compile times of individual files haven't changed.)</p>",
        "id": 256384888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633513952
    },
    {
        "content": "<p>I created and deleted files in that branch</p>",
        "id": 256384943,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1633513988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, any idea why the build time bot logs are offline?</p>",
        "id": 256384960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633514002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>, it may not actually matter that much --- it will be a matter of whether you've shortened the long pole, rather than sped up individual files.</p>",
        "id": 256385014,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633514035
    },
    {
        "content": "<p>i.e. you will still see all the benefit of removing imports, when we look at the cumulative time to reach a given file.</p>",
        "id": 256385079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633514062
    },
    {
        "content": "<p>Right, having an inaccurate time for a few changed files won't matter much.</p>",
        "id": 256385141,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1633514106
    },
    {
        "content": "<p>But if you want that level of meaningfulness, we'd have to ask Jannis if he can run the bot on your branch.</p>",
        "id": 256385152,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633514112
    },
    {
        "content": "<p>I'll check tomorrow if his site has come back online, but probably won't have further time tonight.</p>",
        "id": 256385225,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633514159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib/near/256384960\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span>, any idea why the build time bot logs are offline?</p>\n</blockquote>\n<p>They occasionally die for unknown reasons. I've restarted the service; thanks for the ping!</p>\n<p>I've also started a build of bc09898fabb811d5da516a854aff52eaa98a14e7 for comparison. <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> is this the right commit?</p>",
        "id": 256389184,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1633516235
    },
    {
        "content": "<p>yes, that's the right one. Thanks!</p>",
        "id": 256389718,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1633516584
    },
    {
        "content": "<p>Okay, subject to the timing data being dodgy as described above, <a href=\"https://github.com/leanprover-community/mathlib/tree/pow_split\">branch#pow_split</a> should reduce the infinite-core compile time from 45.9 minutes to 43.6 minutes!</p>",
        "id": 256390247,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633516891
    },
    {
        "content": "<p>Nice!</p>",
        "id": 256390250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633516892
    },
    {
        "content": "<p>Thanks for the computation. I expected a bigger effect than a 2min improvement :)</p>",
        "id": 256390372,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1633516962
    },
    {
        "content": "<p>Call it a 5% improvement? That sounds pretty good!</p>",
        "id": 256390412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633516992
    },
    {
        "content": "<p>When Jannis' build comes back I can give you a more accurate number.</p>",
        "id": 256390466,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633517032
    },
    {
        "content": "<p>Ah wait do you need per-file timings from the branch build?</p>",
        "id": 256390573,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1633517078
    },
    {
        "content": "<p>Yes, that's what would let me do something more accurate.</p>",
        "id": 256390596,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633517095
    },
    {
        "content": "<p>Okay, then I'll have to set that up real quick.</p>",
        "id": 256390625,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1633517115
    },
    {
        "content": "<p>But I don't think it matters too much. In any case, I'm off to bed for today.</p>",
        "id": 256390630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633517116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Here are the timings for the <code>pow_split</code> branch: <a href=\"/user_uploads/3121/TYzbNX-mbiVskVInJMAPy57l/pow-split-timings.txt\">pow-split-timings.txt</a></p>",
        "id": 256636348,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1633635031
    }
]