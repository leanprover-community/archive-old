[
    {
        "content": "<p>I'm trying to decide if I should introduce a predicate <code>is_lie_submodule</code> (in the course of formalising some basic facts about normalizers of Lie subalgebras).</p>\n<p>Simplifying my situation, I'm looking for opinions on whether I should prefer <code>is_lie_submodule_iff_exists</code> or <code>is_lie_submodule_iff_exists'</code> in the snippet below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.lie.submodule</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lie_ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lie_algebra</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">lie_ring_module</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lie_module</span> <span class=\"n\">R</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Is it helpful to introduce this? -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">submodule.is_lie_submodule</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">⁆</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lie_submodule.coe_submodule_is_lie_submodule</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">lie_submodule</span> <span class=\"n\">R</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_lie_submodule</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">N.lie_mem</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">submodule.is_lie_submodule_iff_exists</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.is_lie_submodule</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">lie_submodule</span> <span class=\"n\">R</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"o\">{</span> <span class=\"n\">lie_mem</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">p</span> <span class=\"o\">},</span> <span class=\"n\">exact</span> <span class=\"n\">lie_submodule.coe_to_submodule_mk</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">N.coe_submodule_is_lie_submodule</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Alternative version of `is_lie_submodule_iff_exists` that obviates the need for any other</span>\n<span class=\"cm\">lemmas or defs. Is this preferable, e.g., because we get a simpler API? -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">submodule.is_lie_submodule_iff_exists'</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">⁆</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">lie_submodule</span> <span class=\"n\">R</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"o\">{</span> <span class=\"n\">lie_mem</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">p</span> <span class=\"o\">},</span> <span class=\"n\">exact</span> <span class=\"n\">lie_submodule.coe_to_submodule_mk</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">N.lie_mem</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 227088411,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613823962
    },
    {
        "content": "<p>It looks like you probably want <code>submodule.to_lie_submodule (S : submodule R M) (h : sorry) := { map_lie := h, ..S}</code> to promote submodules into lie submodules</p>",
        "id": 227088668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613824255
    },
    {
        "content": "<p>Without actually answering your question directly</p>",
        "id": 227088676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613824266
    },
    {
        "content": "<p>Agreed; in fact I have  done this in my actual local work.</p>",
        "id": 227088756,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613824352
    },
    {
        "content": "<p>Though I haven't followed the details, I believe that we have had some refactoring associated with issues like whether to prefer bundled subgroups <code>subgroup</code> or the (deprecated?) <code>is_subgroup</code>. I am hoping that anyone involved in that may have experience to share.</p>",
        "id": 227088810,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613824427
    },
    {
        "content": "<p>Note however that I am only proposing a <code>def</code> and not a <code>class</code> for <code>is_lie_submodule</code>. I think it definitely would be a mistake to make <code>submodule.is_lie_submodule</code> a class and start down the path of having lemmas that prove results for <code>submodule</code>s which happen to carry an instance of <code>submodule.is_lie_submodule</code> etc.</p>",
        "id": 227088859,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613824456
    },
    {
        "content": "<p>I think this ties in closely with design questions about linear_map and friends too, but for now it probably makes sense to just continue the existing design.</p>",
        "id": 227088895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613824526
    },
    {
        "content": "<p>I'm all in favour of adhering to existing design but for now I can't see which way that guides me on this point.</p>",
        "id": 227088966,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613824580
    },
    {
        "content": "<p><code>is_lie_submodule</code> seems questionable to me, given it's not phrased in terms of a hypothetical <code>is_submodule</code></p>",
        "id": 227088976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613824610
    },
    {
        "content": "<p>Oh I see; yeah maybe that's enough to persuade me.</p>",
        "id": 227089021,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613824669
    },
    {
        "content": "<p>On the other hand, that's not an argument against also adding <code>is_submodule</code></p>",
        "id": 227089074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613824707
    },
    {
        "content": "<p>Indeed!</p>",
        "id": 227089076,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613824715
    },
    {
        "content": "<p>OK thanks. I'm going to forge ahead and not introduce <code>is_lie_submodule</code> but I'm all ears if anyone else shows up in this thread, especially anyone involved in the <code>is_subgroup</code> vs. <code>group</code> war.</p>",
        "id": 227089088,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613824747
    },
    {
        "content": "<p>But then you also need is_submonoid, is_sub_mul_action</p>",
        "id": 227089094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613824750
    },
    {
        "content": "<p>It did occur to me that <code>is_lie_submodule</code> is bascially <code>lie_submodule.lie_mem</code> so we could probably use some magical metaprogramming to auto-generate all this stuff if we wanted it.</p>",
        "id": 227089182,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613824829
    },
    {
        "content": "<p>Something I could see being useful is metaprogramming to generate <code>lie_submodule extends submodule</code> from a definition of <code>is_lie_submodule extends is_submodule</code></p>",
        "id": 227089348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613825069
    },
    {
        "content": "<p>Sure. Presumably we could go either way though? As in: humans define everything in the bundled fashion (<code>lie_submodule</code>, <code>submodule</code>, <code>submonoid</code>, ...) and computers generate the <code>is_</code> world for us, together with all the links OR vice-versa: humans work in the <code>is_</code> world and computers generate all the bundled stuff + links.</p>",
        "id": 227089567,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613825322
    },
    {
        "content": "<p>The bundled version has a lot of boilerplate about coercions</p>",
        "id": 227089681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613825463
    },
    {
        "content": "<p>Theoretically a lot of that could be auto-generated too though, right? I mean maybe all that boilerplate is a smell that we humans should be making definitions in the clean <code>is_</code> world and computers should be populating the bundled world based on that (including all the boilerplate)? Anyway, I'm waffling and I need to help unpack the shopping now.</p>",
        "id": 227090079,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613825896
    },
    {
        "content": "<p>Let me try and recall what happened with groups. There were two things which got deprecated: the class <code>is_group_hom</code>, a predicate on functions between groups, and the class <code>is_subgroup</code>, a predicate on subsets of a group. My memory is that the problem with is_group_hom was that type class inference would spot that f circ g was a group hom but it wouldn't spot that lam x, f (g x) was. There were similar problems with persuading type class inference to play well with is_subgroup. So the classes were abandoned. I don't think there's any use for <code>is_group_hom</code> any more? However my understanding is that <code>is_subgroup</code> turns out to be useful predicate, and the reason it sits in <code>deprecated</code> is simply that it should be turned into a def. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how close am I to the truth here? What is the plan with the deprecated stuff?</p>",
        "id": 227092300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613828324
    },
    {
        "content": "<p>I think the use of <code>is_subgroup</code> should be minimized but not necessarily eliminated, and <code>is_group_hom</code> too. The main place these come up is when you have a set appear independently of a subgroup structure and want to say it is a subgroup; you can do this with <code>\\ex s : subgroup, s = X</code> but this still amounts to having an <code>is_subgroup</code> definition kicking around.</p>\n<p>The issue with type class inference is that using set, resp. function syntax for sets causes problems if you have any bound variables, because typeclass inference does not handle higher order goals. Also <code>\\circ</code> makes everything worse because it's reducible so if this appears in your goal then you already have bound variables in the goal. As long as you don't use bound variables and only ever build things \"structurally\", typeclass inference works, and bundled subgroups/homs have the necessary discipline to ensure that you only ever build structured things.</p>",
        "id": 227093321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613829569
    },
    {
        "content": "<p>Thank you both for these helpful remarks. The comments about typeclass inference not handling higher order goals and so having problems with bound variables, though not directly related to my issue, are interesting.</p>",
        "id": 227096174,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613832984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/subobject.20predicates/near/227093321\">said</a>:</p>\n<blockquote>\n<p>The main place these come up is when you have a set appear independently of a subgroup structure and want to say it is a subgroup; you can do this with <code>\\ex s : subgroup, s = X</code> but this still amounts to having an <code>is_subgroup</code> definition kicking around.</p>\n</blockquote>\n<p>This is basically exactly my situation. I want to state the Lie algebra equivalent of <code>subgroup.normal_in_normalizer</code> (which I've only just thought to look up!).</p>",
        "id": 227096460,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613833341
    },
    {
        "content": "<p>Looking at this now though I see that <code>subgroup.normal_in_normalizer</code> defines an instance of the <code>Prop</code>-valued <code>subgroup.normal</code> which looks like an error to me since <code>subgroup.normal</code> is a structure and not a class.</p>",
        "id": 227096485,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613833388
    },
    {
        "content": "<p>I'll be taking this up properly tomorrow. I'll attempt not to introduce <code>is_lie_submodule</code> but I'll take Mario's <em>\"minimized but not necessarily eliminated\"</em> remark as permission to propose it if I think it makes sense.</p>",
        "id": 227096741,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613833647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/subobject.20predicates/near/227096485\">said</a>:</p>\n<blockquote>\n<p>Looking at this now though I see that <code>subgroup.normal_in_normalizer</code> defines an instance of the <code>Prop</code>-valued <code>subgroup.normal</code> which looks like an error to me since <code>subgroup.normal</code> is a structure and not a class.</p>\n</blockquote>\n<p><code>normal</code> is a class, afaik. But it is debatable whether it should be.</p>",
        "id": 227097062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613833969
    },
    {
        "content": "<p>Oh you're quite right, I missed this on the very next line below the definition of <code>subgroup.normal</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">normal</span>\n</code></pre></div>",
        "id": 227097106,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613834024
    },
    {
        "content": "<p>Yeah, don't you love the way they do that -- it's to catch people out :-) The correct way to check is not to look at the definition in mathlib but to do <code>#print normal</code> and look at the attributes at the top. They do it with topological spaces too.</p>",
        "id": 227097181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613834070
    },
    {
        "content": "<p>Ah sure I'm used to being caught out and I'll remember this in future!</p>",
        "id": 227097213,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613834122
    },
    {
        "content": "<p>Actually I think it's not to catch people out -- I asked Johannes a very long time ago why <code>topological_space</code> was defined as a structure and then given the class attribute, but I did not understand his reply (I would probably have more of a chance now -- I think it was to do with structure projections or fields or the right kind of brackets or wanting to prove that topological spaces are a lattice...)</p>",
        "id": 227097227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613834152
    },
    {
        "content": "<p>I think these aren't ok anymore in lean 4</p>",
        "id": 227097316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613834236
    },
    {
        "content": "<p>Given that it's more work to apply the attribute later, Chesterton's fence would suggest they had a good resaon.</p>",
        "id": 227097317,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613834238
    },
    {
        "content": "<p>The effect of applying them later is that the fields of the structure get <code>()</code> binders instead of <code>[]</code></p>",
        "id": 227097330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613834270
    }
]