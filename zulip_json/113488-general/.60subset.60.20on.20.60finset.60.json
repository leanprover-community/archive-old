[
    {
        "content": "<p>It seems that we can't use <code>finset.subset</code> with <code>calc</code>: I tried to add <code>@[trans]</code> and <code>@[refl]</code> attributes but some <code>set</code> proofs stop working. What do you think about switching to <code>≤</code> and <code>&lt;</code> in <code>finset</code>?</p>",
        "id": 195302473,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587847946
    },
    {
        "content": "<p>We already use it, e.g., for <code>submonoid</code>s.</p>",
        "id": 195302478,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587847967
    },
    {
        "content": "<p>When Kenny told me to use <code>&lt;</code> and <code>\\le</code> for ideals I was kind of horrified -- but then when I realised that actually using the given lattice structure stuff was a good idea, I really came around to this way of thinking. The only issue of course is that it's confusing for newcomers. It's a bit like to_additive -- one could envisage an entirely new lattice class where \\subset and \\subseteq are used...and we <em>really</em> don't want to go there! If we had some sort of fix for this notational issue, where mathematicians use different notation to mean the same thing in different situations -- then you might not even be asking this question. But as far as I can see we don't have a good answer to this. I would definitely object if people told me to use * for every group, but using &lt; for every lattice, or at least most of them, sounds like a great idea. I would even be in favour of using it for sets, and also using map and comap instead of image and preimage.</p>",
        "id": 195302691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587848359
    },
    {
        "content": "<p>Independent of that, I'm surprised that adding the attributes causes problems. What exactly broke?</p>",
        "id": 195302761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587848425
    },
    {
        "content": "<p><code>simp</code> doesn't solve <code>s ⊆ s</code>, <code>s : set α</code>, anymore</p>",
        "id": 195302917,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587848742
    },
    {
        "content": "<p>If you add the refl attribute then refl will solve it, right?</p>",
        "id": 195303054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587848949
    },
    {
        "content": "<p>The advantage of switching to the lattice notation is that you then only need to learn what all the lemmas are called once</p>",
        "id": 195303123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587849016
    },
    {
        "content": "<p>It seems that <code>@[refl]</code> on <code>finset</code> took over <code>@[refl]</code> on `set.</p>",
        "id": 195303125,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587849017
    },
    {
        "content": "<p>Just to be clear -- adding the attributes to finset lemmas is breaking set proofs?</p>",
        "id": 195303191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587849135
    },
    {
        "content": "<p>Yes, see <a href=\"https://github.com/leanprover-community/mathlib/runs/618516722\" title=\"https://github.com/leanprover-community/mathlib/runs/618516722\">https://github.com/leanprover-community/mathlib/runs/618516722</a></p>",
        "id": 195303265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587849312
    },
    {
        "content": "<p>Probably Lean uses only the head symbol <code>has_subset.subset</code> to decide which lemma should be applied.</p>",
        "id": 195303318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587849383
    },
    {
        "content": "<p>Is this fixable in 3.10?</p>",
        "id": 195304291,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587851156
    },
    {
        "content": "<p>Calc blocks are expanded in the parser, so this is hard to fix that way.  The best I can offer is the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_subset</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">transitive</span> <span class=\"o\">((</span><span class=\"err\">⊆</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">⊆</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">assumption</span>\n</pre></div>\n\n\n<p>And then declare the appropriate instances.</p>",
        "id": 195322836,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1587887651
    },
    {
        "content": "<p>With these calc blocks one might also want the analogues of lt_of_le_of_lt to work</p>",
        "id": 195325702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587892461
    },
    {
        "content": "<p>So it's easier to just use <code>le</code>/<code>lt</code>.</p>",
        "id": 195341446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587918236
    },
    {
        "content": "<p>I think so</p>",
        "id": 195343224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920858
    },
    {
        "content": "<p>I've started moving <code>finset</code> to <code>le/lt</code> and realized that for <code>multiset</code> we have both <code>subset</code> and <code>le</code>, and they have different meaning.</p>",
        "id": 196693063,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588797145
    },
    {
        "content": "<p>Why not just leave <code>multiset</code> alone?</p>",
        "id": 196693140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588797181
    },
    {
        "content": "<p>I guess that with <code>subset</code>, multisets aren't a partial order (and hence not a lattice), because they don't satisfy antisymmetry</p>",
        "id": 196693364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588797293
    },
    {
        "content": "<p>But it is transitive...</p>",
        "id": 196693801,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588797500
    },
    {
        "content": "<p>right, it's a preorder. But I thought the idea was that we should use &lt;= for lattices, even when mathematicians use <code>\\subseteq</code></p>",
        "id": 196693843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588797538
    }
]