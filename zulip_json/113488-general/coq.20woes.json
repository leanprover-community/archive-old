[
    {
        "content": "<p>I'm stuck on trying to understand something in a Coq proof. Any experts on here who can spare a few minutes to help?</p>",
        "id": 125609345,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524556879
    },
    {
        "content": "<p>The issue is partially at <a href=\"https://github.com/spl/formal_binders/blob/master/ML_Core_Infrastructure.v#L423-L431\" target=\"_blank\" title=\"https://github.com/spl/formal_binders/blob/master/ML_Core_Infrastructure.v#L423-L431\"><code>typ_open_types</code></a>, which uses <a href=\"https://github.com/spl/formal_binders/blob/master/ML_Core_Definitions.v#L78-L81\" target=\"_blank\" title=\"https://github.com/spl/formal_binders/blob/master/ML_Core_Definitions.v#L78-L81\"><code>typ_body</code></a>.</p>",
        "id": 125609411,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524556989
    },
    {
        "content": "<p>There is an <code>exists</code> in <code>typ_body</code>, and I'm trying to figure out how it is used in the proof of <code>typ_open_types</code>.</p>",
        "id": 125609462,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524557061
    },
    {
        "content": "<p>Is there a coq chatroom like this one?</p>",
        "id": 125609466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557079
    },
    {
        "content": "<p>Of course I cannot help at all, I was just wondering.</p>",
        "id": 125609469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557091
    },
    {
        "content": "<p>There's certainly a mailing list, right?</p>",
        "id": 125609470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557097
    },
    {
        "content": "<blockquote>\n<p>Is there a coq chatroom like this one?</p>\n</blockquote>\n<p>No idea.</p>",
        "id": 125609474,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524557104
    },
    {
        "content": "<blockquote>\n<p>There's certainly a mailing list, right?</p>\n</blockquote>\n<p>I don't want to sign up for one if I don't have to. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 125609483,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524557123
    },
    {
        "content": "<p>I'm trying to translate this into Lean.</p>",
        "id": 125609486,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524557136
    },
    {
        "content": "<p>I've been doing fine so far, but this part has me a bit stuck.</p>",
        "id": 125609531,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524557175
    },
    {
        "content": "<p>You need to help me help you on this one, because it uses some non-standard stuff :). So from looking at the thing, your <code>typ_body</code> is now some <code>L</code> for which <code>K</code>. Then they do <code>pick_freshes</code>? What is that :)? And is <code>poses</code> some variation on <code>pose</code>?</p>",
        "id": 125610071,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558150
    },
    {
        "content": "<blockquote>\n<p>You need to help me help you on this one, because it uses some non-standard stuff <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span>.</p>\n</blockquote>\n<p>Absolutely!</p>",
        "id": 125610073,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558171
    },
    {
        "content": "<p><code>pick_freshes</code> is a tactic.</p>",
        "id": 125610085,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558187
    },
    {
        "content": "<p><code>poses</code> is another tactic.</p>",
        "id": 125610087,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558198
    },
    {
        "content": "<p>Ooh, now it's all clear then!</p>",
        "id": 125610088,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558211
    },
    {
        "content": "<p><code>LibTactic.v</code> I believe. I usually <code>grep</code> for it.</p>",
        "id": 125610089,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558211
    },
    {
        "content": "<p>Alright, let's see :).</p>",
        "id": 125610091,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558221
    },
    {
        "content": "<p>What does <code>introv [L K]</code> mean?</p>",
        "id": 125610139,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558271
    },
    {
        "content": "<p>It destructs the existential into two parts.</p>",
        "id": 125610141,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558282
    },
    {
        "content": "<p>Right, thought so.</p>",
        "id": 125610144,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558292
    },
    {
        "content": "<p>Your <code>introv [L K] WT</code> basically first <code>intros T Us</code>.</p>",
        "id": 125610153,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558324
    },
    {
        "content": "<p>And <code>rewrite*</code> and <code>apply*</code> just pull hypotheses from the context, right?</p>",
        "id": 125610159,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558343
    },
    {
        "content": "<p>Yes.</p>",
        "id": 125610161,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558353
    },
    {
        "content": "<p>... which makes it difficult to figure out what's getting used.</p>",
        "id": 125610204,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558381
    },
    {
        "content": "<p>Btw, I don't think <code>LibTactics.v</code> has these <code>pick_freshes</code>. It might be coming from something home-baked there?</p>",
        "id": 125610205,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558381
    },
    {
        "content": "<p>There's a <code>Metatheory</code> import there, whatever that is.</p>",
        "id": 125610209,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558406
    },
    {
        "content": "<p>Oh, <code>pick_freshes</code> comes from <code>Metatheory_var.v</code> or <code>Metatheory_fresh.v</code>.</p>",
        "id": 125610210,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558409
    },
    {
        "content": "<p>Err, or <code>Metatheory_Env.v</code>.</p>",
        "id": 125610220,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558426
    },
    {
        "content": "<p>Correction: <code>ML_Core_Infrastructure.v</code>.</p>",
        "id": 125610277,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558491
    },
    {
        "content": "<p>Also, I meant <code>Lib_Tactic.v</code> in this project.</p>",
        "id": 125610293,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558576
    },
    {
        "content": "<p><a href=\"https://github.com/spl/formal_binders/blob/master/ML_Core_Infrastructure.v#L113-L117\" target=\"_blank\" title=\"https://github.com/spl/formal_binders/blob/master/ML_Core_Infrastructure.v#L113-L117\"><code>pick_fresh</code> and <code>pick_freshes</code></a></p>",
        "id": 125610344,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558632
    },
    {
        "content": "<p><a href=\"https://github.com/spl/formal_binders/blob/master/Lib_Tactic.v#L32-L33\" target=\"_blank\" title=\"https://github.com/spl/formal_binders/blob/master/Lib_Tactic.v#L32-L33\"><code>poses</code></a></p>",
        "id": 125610349,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558649
    },
    {
        "content": "<p>I think I get the gist of those. What I'm currently struggling with is what happens to the <code>L</code> and <code>K</code>. Do they get used and how?</p>",
        "id": 125610420,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558762
    },
    {
        "content": "<p>Because <code>K</code> is a function, right? Something like this out of <code>typ_body</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">forall</span> <span class=\"n\">Xs</span><span class=\"o\">,</span> <span class=\"n\">fresh</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"n\">Xs</span> <span class=\"o\">-&gt;</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">typ_open_vars</span> <span class=\"n\">T</span> <span class=\"n\">Xs</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125610490,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558903
    },
    {
        "content": "<p><code>pick_fresh</code> and <code>poses</code> don't seem to do anything funny to them, so <code>rewrite* (@typ_substs_intro Xs). apply* typ_substs_types</code> so it's either of these two invocations.</p>",
        "id": 125610498,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558915
    },
    {
        "content": "<p>I agree.</p>",
        "id": 125610503,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558923
    },
    {
        "content": "<p>Yes, <code>K</code> is a function.</p>",
        "id": 125610509,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524558948
    },
    {
        "content": "<p>I think the culprit is <a href=\"https://github.com/spl/formal_binders/blob/master/ML_Core_Infrastructure.v#L380-L386\" target=\"_blank\" title=\"https://github.com/spl/formal_binders/blob/master/ML_Core_Infrastructure.v#L380-L386\"><code>typ_substs_intro</code></a>.</p>",
        "id": 125610548,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524558964
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Lemma</span> <span class=\"n\">typ_substs_intro</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">Xs</span> <span class=\"n\">Us</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">fresh</span> <span class=\"o\">(</span><span class=\"n\">typ_fv</span> <span class=\"n\">T</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">typ_fv_list</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">Xs</span><span class=\"o\">)</span> <span class=\"n\">Xs</span> <span class=\"o\">-&gt;</span>\n  <span class=\"n\">types</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">Xs</span><span class=\"o\">)</span> <span class=\"n\">Us</span> <span class=\"o\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">typ_open</span> <span class=\"n\">T</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"n\">typ_substs</span> <span class=\"n\">Xs</span> <span class=\"n\">Us</span> <span class=\"o\">(</span><span class=\"n\">typ_open_vars</span> <span class=\"n\">T</span> <span class=\"n\">Xs</span><span class=\"o\">).</span>\n</pre></div>",
        "id": 125610566,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524559052
    },
    {
        "content": "<p>(So sacrilege: pasting Coq onto a Lean forum...)</p>",
        "id": 125610591,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524559082
    },
    {
        "content": "<p>Right, so the last apply in the original proof is probably discharging one of the unresolved arguments of rewrites resulting from rewriting <code>typ_subst_intro</code>.</p>",
        "id": 125610674,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524559207
    },
    {
        "content": "<p>(BTW, it would be nice if I could run this. I tried, fixed a few things, but <code>coqc Lib_ListFacts.v</code> doesn't finish in several hours.)</p>",
        "id": 125610679,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524559237
    },
    {
        "content": "<p>Well that's the overarching problem of reading Coq. (Btw, even <code>rewrite*</code> is non-standard.)</p>",
        "id": 125610760,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524559336
    },
    {
        "content": "<p>Still, we rewrite <code>(typ_open T Us)</code> with <code>typ_subst Xs Us (typ_open_vars T Xs)</code>, we have <code>Xs Us T</code> from rewriting, there should be 2 new obligations, <code>fresh (...)</code> and <code>types ...</code>. Either of these may have been discharged by some form of <code>assumption</code> resulting from <code>rewrite*</code>, leaving the last one for the final <code>apply</code>.</p>",
        "id": 125610828,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524559452
    },
    {
        "content": "<p>So my confusion comes down to this (I think): when <code>typ_body</code> is destructed into <code>L</code> and <code>K</code> as <code>forall Xs, fresh L n Xs -&gt; type (typ_open_vars T Xs)</code>, is <code>K</code> being used, and, if so, how does <code>fresh L n Xs </code> get instantiated since nothing is known about <code>L</code>?</p>",
        "id": 125610833,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524559489
    },
    {
        "content": "<p>It doesn't necessarily need to be instantiated for <code>K</code> to still be used.</p>",
        "id": 125610946,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524559698
    },
    {
        "content": "<p>I don't think the <code>rewrite*</code> or <code>apply*</code> would go beyond defeq or some form of <code>assumption</code> (resulting from the <code>*</code> suffix).</p>",
        "id": 125610966,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524559757
    },
    {
        "content": "<p>You can still use <code>K</code> to discharge <code>Pi_Xs, _ -&gt; _</code> which is what I think ends up happening.</p>",
        "id": 125611013,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524559828
    },
    {
        "content": "<p><code>typ_subst_intro</code> expects <code>fresh (typ_fv T \\u typ_fv_list Us) (length Xs) Xs</code>. Where does that come from?</p>",
        "id": 125611076,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524559929
    },
    {
        "content": "<p>It's probably either <code>Fr</code> or <code>Fr'</code>, resulting from <code>pick_freshes</code> and <code>assumption</code>'d from the <code>rewrite*</code> call.</p>",
        "id": 125611153,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524560050
    },
    {
        "content": "<p>Ah, right.</p>",
        "id": 125611178,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524560117
    },
    {
        "content": "<p><code>apply* typ_substs_types</code> then most likely solves <code>types (length Xs) Us</code></p>",
        "id": 125611236,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524560167
    },
    {
        "content": "<p>Can logically <code>K</code> and <code>L</code> help with that? let's see. So they basically map a \"parameterized\" fresh name to a parameterized type?</p>",
        "id": 125611248,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524560216
    },
    {
        "content": "<p>It is most likely the case that it's the very last tactic (<code>apply*</code>) that uses <code>K</code> in the <code>Pi</code> form.</p>",
        "id": 125611293,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524560286
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">rewrite</span><span class=\"o\">*</span> <span class=\"o\">(@</span><span class=\"n\">typ_substs_intro</span> <span class=\"n\">Xs</span><span class=\"o\">).</span> <span class=\"k\">apply</span><span class=\"o\">*</span> <span class=\"n\">typ_substs_types</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Lemma</span> <span class=\"n\">typ_substs_types</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">Xs</span> <span class=\"n\">Us</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">types</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">Xs</span><span class=\"o\">)</span> <span class=\"n\">Us</span> <span class=\"o\">-&gt;</span>\n  <span class=\"n\">type</span> <span class=\"n\">T</span> <span class=\"o\">-&gt;</span>\n  <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">typ_substs</span> <span class=\"n\">Xs</span> <span class=\"n\">Us</span> <span class=\"n\">T</span><span class=\"o\">).</span>\n</pre></div>",
        "id": 125611304,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524560327
    },
    {
        "content": "<blockquote>\n<p>You can still use <code>K</code> to discharge <code>Pi_Xs, _ -&gt; _</code> which is what I think ends up happening.</p>\n</blockquote>\n<p>I don't understand this.</p>",
        "id": 125611313,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524560372
    },
    {
        "content": "<p>It's as you said, there is no reasonable way to instantiate it. So we can just end up assuming the argument comes from someplace.</p>",
        "id": 125611446,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524560548
    },
    {
        "content": "<p>Aka. the goal transforming to <code>fresh L n Xs -&gt; type (typ_open_vars T Xs)</code> (or <code>fresh L n Xs |- type (...)</code>)</p>",
        "id": 125611464,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524560607
    },
    {
        "content": "<p>I'm thinking it would help me to understand <code>poses</code>/<code>pose</code> better.</p>",
        "id": 125611572,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524560758
    },
    {
        "content": "<p>And to figure out where <code>Fr</code> comes from.</p>",
        "id": 125611630,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524560789
    },
    {
        "content": "<p>I think <code>Fr</code> and <code>Fr'</code> are related to the other hypothesis?</p>",
        "id": 125611637,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524560816
    },
    {
        "content": "<p>At least if <code>pick_freshes</code> doesn't ever mess with either <code>L</code> or <code>K</code>.</p>",
        "id": 125611647,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524560832
    },
    {
        "content": "<p>Which it doesn't seem to becasue its argument is a subterm of the other hypothesis (<code>length Us</code>).</p>",
        "id": 125611652,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524560851
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Ltac</span> <span class=\"n\">pick_freshes_gen</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">Fr</span> <span class=\"o\">:=</span> <span class=\"n\">fresh</span> <span class=\"s2\">&quot;Fr&quot;</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">beautify_fset</span> <span class=\"n\">L</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"k\">destruct</span> <span class=\"o\">(</span><span class=\"n\">var_freshes</span> <span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">as</span> <span class=\"o\">[</span><span class=\"n\">Y</span> <span class=\"n\">Fr</span><span class=\"o\">]).</span>\n</pre></div>",
        "id": 125611702,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524560902
    },
    {
        "content": "<p>Does that introduce <code>Fr</code>? It's used by <code>pick_freshes</code>.</p>",
        "id": 125611708,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524560922
    },
    {
        "content": "<p>Oh, and I think <code>pick_freshes</code>/<code>pick_freshes_gen</code> might get <code>L</code> from the assumptions.</p>",
        "id": 125611730,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524560996
    },
    {
        "content": "<p>Via <code>gather_vars</code>.</p>",
        "id": 125611776,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561009
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Ltac</span> <span class=\"n\">gather_vars</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"o\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{{</span> <span class=\"n\">x</span> <span class=\"o\">}})</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"o\">=&gt;</span> <span class=\"n\">dom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">trm</span> <span class=\"o\">=&gt;</span> <span class=\"n\">trm_fv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"o\">=&gt;</span> <span class=\"n\">typ_fv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">list</span> <span class=\"n\">typ</span> <span class=\"o\">=&gt;</span> <span class=\"n\">typ_fv_list</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"o\">=&gt;</span> <span class=\"n\">env_fv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">sch</span> <span class=\"o\">=&gt;</span> <span class=\"n\">sch_fv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"n\">constr</span><span class=\"o\">:(</span><span class=\"n\">A</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">B</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">C</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">D</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">E</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">F</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">G</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">H</span><span class=\"o\">).</span>\n</pre></div>",
        "id": 125611781,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561040
    },
    {
        "content": "<p>I suppose the <code>gather_vars</code> tactic could also be getting something from <code>K</code>.</p>",
        "id": 125611793,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561080
    },
    {
        "content": "<p>Right, so <code>Fr</code> comes from <code>pick_freshes</code> and includes <code>L</code> in the free variable finite set.</p>",
        "id": 125611916,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561244
    },
    {
        "content": "<p>1) <code>pose</code> introduces <code>h := t : T</code>, a bit like <code>let</code> in lean. <code>poses</code> is their homebrew thing for transforming the introduced <code>h</code> into <code>h : T</code> without <code>t</code>.</p>",
        "id": 125611959,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524561345
    },
    {
        "content": "<p>I think the <code>K</code> obligation of <code>fresh L n Xs</code> <em>could</em> be satisfied by <code>Fr</code> by narrowing down the union of finite sets to extract only <code>L</code>.</p>",
        "id": 125612021,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561446
    },
    {
        "content": "<p>... the finite set created by <code>gather_vars</code>, which scours the assumptions for variables.</p>",
        "id": 125612030,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561477
    },
    {
        "content": "<p>Wouldn't that require something more magical than what <code>rewrite*</code> or <code>apply*</code> can do?</p>",
        "id": 125612065,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524561483
    },
    {
        "content": "<p>Yes.</p>",
        "id": 125612079,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561503
    },
    {
        "content": "<p>There are other tactics that do that, but, to think of it, they're not being used here, are they?</p>",
        "id": 125612094,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561544
    },
    {
        "content": "<p>Other homemade tactics, I mean.</p>",
        "id": 125612101,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561553
    },
    {
        "content": "<p>So maybe I'm jumping ahead of myself.</p>",
        "id": 125612106,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561575
    },
    {
        "content": "<p>Right, so here's the thing.</p>",
        "id": 125612109,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524561592
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">poses</span> <span class=\"n\">Fr&#39;</span> <span class=\"n\">Fr</span><span class=\"bp\">.</span>\n<span class=\"n\">rewrite</span> <span class=\"o\">(</span><span class=\"n\">fresh_length</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>  <span class=\"n\">Fr</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">WT</span><span class=\"o\">,</span> <span class=\"n\">Fr&#39;</span><span class=\"bp\">.</span>\n<span class=\"n\">rewrite</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">typ_substs_intro</span> <span class=\"n\">Xs</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">apply</span><span class=\"bp\">*</span> <span class=\"n\">typ_substs_types</span>\n</pre></div>",
        "id": 125612151,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524561604
    },
    {
        "content": "<p>The only non-standard one is <code>poses</code> which doesn't do much beyond <code>pose</code> (according to its definition).</p>",
        "id": 125612163,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524561637
    },
    {
        "content": "<p><code>rewrite(*)</code> and <code>apply*</code> are standard in the sense that they cannot call anything magical.</p>",
        "id": 125612172,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524561663
    },
    {
        "content": "<p>The only remaining tactic is <code>pick_freshes (length Us) Xs</code> which can order you a pizza for what we know.</p>",
        "id": 125612231,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524561726
    },
    {
        "content": "<p>Well, I have a vague understanding of what <code>pick_freshes</code> does. It looks at <em>all</em> of the assumptions and picks out all the <code>vars</code> it can find, so that it can choose a free variable not in the resultant finite set of <code>vars</code>.</p>",
        "id": 125612251,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561776
    },
    {
        "content": "<p>And, if I understand <code>fresh \"Fr\"</code> correctly, <code>pick_freshes</code> is creating the assumption <code>Fr</code>, which is later used by <code>poses</code>.</p>",
        "id": 125612268,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524561823
    },
    {
        "content": "<p>Right. Let's say you have <code>p : Prop</code>. <code>pose p</code> then introduces <code>P := p : Prop</code>. <code>poses p</code> also calls <code>clearbody P</code> which gives you <code>p, P : Prop</code> in the context.</p>",
        "id": 125612351,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524561948
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">rewrite</span> <span class=\"o\">(</span><span class=\"n\">fresh_length</span> <span class=\"o\">_</span> <span class=\"o\">_</span> <span class=\"o\">_</span>  <span class=\"n\">Fr</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">WT</span><span class=\"o\">,</span> <span class=\"n\">Fr&#39;</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Lemma</span> <span class=\"n\">fresh_length</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">xs</span> <span class=\"n\">L</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fresh</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"n\">xs</span> <span class=\"o\">-&gt;</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"n\">xs</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 125612424,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524562061
    },
    {
        "content": "<p>Right, this fully applies <code>fresh_length</code> so you have <code>n = length xs</code>, you make this rewrite in both <code>WT</code> and <code>Fr'</code>.</p>",
        "id": 125612474,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524562127
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Definition</span> <span class=\"n\">list_for_n</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kn\">Set</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">list</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"n\">L</span> <span class=\"o\">/\\</span> <span class=\"n\">list_forall</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span> <span class=\"kn\">Definition</span> <span class=\"n\">types</span> <span class=\"o\">:=</span> <span class=\"n\">list_for_n</span> <span class=\"n\">type</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 125612482,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524562145
    },
    {
        "content": "<p>That's where the rewritten <code>length</code> assumptions are used, I believe.</p>",
        "id": 125612495,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524562173
    },
    {
        "content": "<p>That = <code>types</code>.</p>",
        "id": 125612499,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524562182
    },
    {
        "content": "<p>As in here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Lemma</span> <span class=\"n\">typ_substs_intro</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">Xs</span> <span class=\"n\">Us</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">fresh</span> <span class=\"o\">(</span><span class=\"n\">typ_fv</span> <span class=\"n\">T</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">typ_fv_list</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">Xs</span><span class=\"o\">)</span> <span class=\"n\">Xs</span> <span class=\"o\">-&gt;</span>\n  <span class=\"n\">types</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">Xs</span><span class=\"o\">)</span> <span class=\"n\">Us</span> <span class=\"o\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">typ_open</span> <span class=\"n\">T</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"n\">typ_substs</span> <span class=\"n\">Xs</span> <span class=\"n\">Us</span> <span class=\"o\">(</span><span class=\"n\">typ_open_vars</span> <span class=\"n\">T</span> <span class=\"n\">Xs</span><span class=\"o\">).</span>\n</pre></div>",
        "id": 125612567,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524562247
    },
    {
        "content": "<p><code>types</code> is simple enough then, it's a filtered vector, conceptually</p>",
        "id": 125612582,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524562302
    },
    {
        "content": "<p><code>typ_substs_types</code> however is <code>_ -&gt; type (typ_substs Xs Us T)</code>, so there's no way for <code>apply*</code> to resolve <code>types</code> with it</p>",
        "id": 125612705,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524562528
    },
    {
        "content": "<p>So I was wrong wrt. what the last <code>apply*</code> pertains to it seems.</p>",
        "id": 125612758,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524562610
    },
    {
        "content": "<p>Yes, I think so. After <code>rewrite* (@typ_substs_intro ...)</code>, you get <code>type (typ_substs ...)</code> in the goal.</p>",
        "id": 125612814,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524562685
    },
    {
        "content": "<p>Right, so that one is magically discharged.</p>",
        "id": 125612824,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524562725
    },
    {
        "content": "<p>... which is fulfilled by <code>apply* typ_substs_types</code></p>",
        "id": 125612829,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524562736
    },
    {
        "content": "<p>Are you sure there isn't more magic being done by <code>rewrite*</code> and/or <code>apply*</code>? Do those use the <code>Hint</code>s that are all over the place in this project?</p>",
        "id": 125612906,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524562866
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ git grep Hint <span class=\"p\">|</span> wc -l\n     <span class=\"m\">204</span>\n</pre></div>",
        "id": 125612911,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524562899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110027\">@Moses Schönfinkel</span> I have to go prepare lunch and feed my kid. Sorry. I'll be back on later. Feel free to leave any insightful and illuminating thoughts here for me to read upon my return. <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 125613182,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524563373
    },
    {
        "content": "<p>I'm sure the moderators will have shut this thread down by then ;-)</p>",
        "id": 125613470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563914
    },
    {
        "content": "<p>Can / should I migrate this to a separate stream? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 125613746,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524564366
    },
    {
        "content": "<p>For example <code>maths</code> is this completely random topic that few here care about and has its own stream.. errrm :).</p>",
        "id": 125613761,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524564473
    },
    {
        "content": "<p>:-) I have no idea -- as I'm sure you are aware, I was not being remotely serious.</p>",
        "id": 125613807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524564515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> I'll take a closer look when I get home, I have some teaching to do</p>",
        "id": 125613940,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524564833
    },
    {
        "content": "<p>Thanks. Lunch is over. I'll continue looking at it in the meantime, at least until the moderators or Kevin shut me down. If that happens, I'm sure I'll lose my mind, since I will no longer be able to voice my confusion publicly. <span class=\"emoji emoji-1f4a9\" title=\"poop\">:poop:</span></p>",
        "id": 125615229,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524567428
    },
    {
        "content": "<p>Annotated:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Lemma</span> <span class=\"n\">typ_open_types</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">T</span> <span class=\"n\">Us</span><span class=\"o\">,</span>\n  <span class=\"n\">typ_body</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"n\">T</span> <span class=\"o\">-&gt;</span>\n</pre></div>\n\n\n<p><code>Definition typ_body n T := exists L, forall Xs, fresh L n Xs -&gt; type (typ_open_vars T Xs).</code></p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">types</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"n\">Us</span> <span class=\"o\">-&gt;</span>\n</pre></div>\n\n\n<p><code>Definition types := list_for_n type.</code></p>\n<p><code>Definition list_for_n (A : Set) (P : A -&gt; Prop) (n : nat) (L : list A) := n = length L /\\ list_forall P L.</code></p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">typ_open</span> <span class=\"n\">T</span> <span class=\"n\">Us</span><span class=\"o\">).</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n  <span class=\"n\">introv</span> <span class=\"o\">[</span><span class=\"n\">L</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">WT</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p><code>L : vars</code> (a.k.a. <code>FinSet</code>)</p>\n<p><code>K : forall Xs, fresh L n Xs -&gt; type (typ_open_vars T Xs)</code></p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">pick_freshes</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">Us</span><span class=\"o\">)</span> <span class=\"n\">Xs</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>Creates an assumption named <code>Fr</code> defined as the union of all finite sets of variables in the context for some list. That is, I think <code>Fr : fresh L (length Us) Xs</code> because <code>destruct (var_freshes L n) as [Y Fr]</code> and <code>Lemma var_freshes : forall L n, { xs : list var | fresh L n xs }.</code></p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">poses</span> <span class=\"n\">Fr&#39;</span> <span class=\"n\">Fr</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>Copies <code>Fr</code> to <code>Fr'</code>.</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">rewrite</span> <span class=\"o\">(</span><span class=\"n\">fresh_length</span> <span class=\"o\">_</span> <span class=\"o\">_</span> <span class=\"o\">_</span>  <span class=\"n\">Fr</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">WT</span><span class=\"o\">,</span> <span class=\"n\">Fr&#39;</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p><code>Lemma fresh_length : forall xs L n, fresh L n xs -&gt; n = length xs.</code></p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">rewrite</span><span class=\"o\">*</span> <span class=\"o\">(@</span><span class=\"n\">typ_substs_intro</span> <span class=\"n\">Xs</span><span class=\"o\">).</span>\n</pre></div>\n\n\n<p><code>Lemma typ_substs_intro : forall Xs Us T,\n  fresh (typ_fv T \\u typ_fv_list Us) (length Xs) Xs -&gt;\n  types (length Xs) Us -&gt;\n  (typ_open T Us) = typ_substs Xs Us (typ_open_vars T Xs).</code></p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">apply</span><span class=\"o\">*</span> <span class=\"n\">typ_substs_types</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p><code>Lemma typ_substs_types : forall Xs Us T,\n  types (length Xs) Us -&gt;\n  type T -&gt;\n  type (typ_substs Xs Us T).</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Qed</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 125616072,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524569329
    },
    {
        "content": "<p>See <a href=\"https://gist.github.com/spl/a204842b476cc46fb1b879ee2baedfbd\" target=\"_blank\" title=\"https://gist.github.com/spl/a204842b476cc46fb1b879ee2baedfbd\">https://gist.github.com/spl/a204842b476cc46fb1b879ee2baedfbd</a> for an easier-to-read and updated version of the above.</p>",
        "id": 125616985,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524571029
    },
    {
        "content": "<p>Okay, I believe I have a better handle on what's going on.</p>",
        "id": 125617573,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524572239
    },
    {
        "content": "<p>I've found where <code>L</code> and <code>K</code> are used.</p>",
        "id": 125617576,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524572263
    },
    {
        "content": "<p>There is definitely more magic being applied here than meets the eye.</p>",
        "id": 125617617,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524572295
    },
    {
        "content": "<p>I believe the <code>fresh</code> properties are being manipulated into their expected forms using the magic in <code>Metatheory_Fresh.v</code>.</p>",
        "id": 125617635,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524572348
    },
    {
        "content": "<p>I couldn't explain the technical mechanism, but I believe it has to do with all the <code>Hint</code>s to get certain tactics to perform automagically.</p>",
        "id": 125617695,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524572421
    },
    {
        "content": "<p>In particular, for <code>fresh</code>, it's:</p>\n<div class=\"codehilite\"><pre><span></span>Metatheory_Fresh.v:Hint Extern 1 (fresh _ _ _) =&gt; fresh_solve.\n</pre></div>",
        "id": 125617702,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524572446
    },
    {
        "content": "<p>Also, there's this dark magic underlying <code>pick_freshes</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">(** [gather_vars_with F] return the union of all the finite sets</span>\n<span class=\"c\">  of variables [F x] where [x] is a variable from the context such that</span>\n<span class=\"c\">  [F x] type checks. In other words [x] has to be of the type of the</span>\n<span class=\"c\">  argument of [F]. The resulting union of sets does not contain any</span>\n<span class=\"c\">  duplicated item. This tactic is an extreme piece of hacking necessary</span>\n<span class=\"c\">  because the tactic language does not support a &quot;fold&quot; operation on</span>\n<span class=\"c\">  the context. *)</span>\n</pre></div>",
        "id": 125617835,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524572691
    },
    {
        "content": "<p>Used as so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Ltac</span> <span class=\"n\">gather_vars</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"o\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{{</span> <span class=\"n\">x</span> <span class=\"o\">}})</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"o\">=&gt;</span> <span class=\"n\">dom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">trm</span> <span class=\"o\">=&gt;</span> <span class=\"n\">trm_fv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"o\">=&gt;</span> <span class=\"n\">typ_fv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">list</span> <span class=\"n\">typ</span> <span class=\"o\">=&gt;</span> <span class=\"n\">typ_fv_list</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"o\">=&gt;</span> <span class=\"n\">env_fv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">gather_vars_with</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">sch</span> <span class=\"o\">=&gt;</span> <span class=\"n\">sch_fv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"n\">constr</span><span class=\"o\">:(</span><span class=\"n\">A</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">B</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">C</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">D</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">E</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">F</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">G</span> <span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"n\">H</span><span class=\"o\">).</span>\n</pre></div>",
        "id": 125617855,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524572741
    },
    {
        "content": "<p>And (it just clicked for me) that is how <code>typ_fv</code> and <code>typ_fv_list</code> are appearing.</p>",
        "id": 125617906,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524572803
    },
    {
        "content": "<p>Sorry I didn't manage to get around to using my computer yesterday! :(</p>",
        "id": 125659086,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524639079
    },
    {
        "content": "<p>I progressed a bit further, as you can see. I'm slightly better at systematically reverse engineering Coq proofs now. Thanks for that! <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125659347,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524639641
    },
    {
        "content": "<p>What a wonderful world this would be if you could run it :-\\.</p>",
        "id": 125659582,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524640198
    },
    {
        "content": "<p>I've reverted to working on my Lean version of this proof. I have an idea of how to do the part of the <code>fresh</code> manipulation that is implemented with hidden dark magic in Coq, and I'm trying to work it out, in Lean, without magic.</p>",
        "id": 125660053,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524641094
    },
    {
        "content": "<p>You can also try Lean, with magic.</p>",
        "id": 125660224,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524641450
    },
    {
        "content": "<p>You mean, by writing tactics? I've avoided that so far, just so I can get a handle on how to do the proofs.</p>",
        "id": 125660234,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524641504
    },
    {
        "content": "<p>Yeah. I'm not entirely sure how useful learning it would be as of right now, given Lean 4 might (will?) change that.</p>",
        "id": 125660331,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524641692
    },
    {
        "content": "<p>That unknown future always seems to hang in the air, doesn't it? The possibility of change infects one's thoughts.</p>",
        "id": 125660442,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524641928
    },
    {
        "content": "<p>Apparently, Coq has changed a lot over the years, too. This project was supposed to work with 8.1, and now, with 8.8, it just compiles for more hours than I've been willing to wait.</p>",
        "id": 125660520,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524642090
    },
    {
        "content": "<p>When mathematicians hear talks about the great things that have been achieved using computer proof checkers</p>",
        "id": 125660564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524642156
    },
    {
        "content": "<p>then the odd order theorem is always mentioned as one of the jewels in the crown</p>",
        "id": 125660567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524642174
    },
    {
        "content": "<p>(before Kepler it was _the_ jewel)</p>",
        "id": 125660572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524642181
    },
    {
        "content": "<p>and apparently that no longer compiles in Coq current</p>",
        "id": 125660577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524642190
    },
    {
        "content": "<p>so I have heard</p>",
        "id": 125660579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524642194
    },
    {
        "content": "<p>if either if you are in a position to formally verify this rumour I'd appreciate it</p>",
        "id": 125660584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524642219
    },
    {
        "content": "<p><a href=\"https://github.com/math-comp/odd-order\" target=\"_blank\" title=\"https://github.com/math-comp/odd-order\">https://github.com/math-comp/odd-order</a> is 8 days old. Maybe it's an update.</p>",
        "id": 125660643,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524642334
    },
    {
        "content": "<p>Anyway, that's what I got from the first page of a Google search. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125660693,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524642391
    },
    {
        "content": "<p>Hmm, seems like it's working again.</p>",
        "id": 125660745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524642488
    },
    {
        "content": "<p>I heard this rumour on the ssreflect mailing list about a year ago</p>",
        "id": 125660750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524642506
    },
    {
        "content": "<p>Sounded pretty broken back then</p>",
        "id": 125660751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524642513
    },
    {
        "content": "<p>They were talking about distributing the proof with an old version of Coq inside a docker package. Just to make sure people could easily return to a version that compiles.</p>",
        "id": 125660763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524642558
    },
    {
        "content": "<p>All the better if it actually compiles with the latest release!</p>",
        "id": 125660765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524642579
    },
    {
        "content": "<blockquote>\n<p>They were talking about distributing the proof with an old version of Coq inside a docker package. Just to make sure people could easily return to a version that compiles.</p>\n</blockquote>\n<p>I just discovered <a href=\"https://github.com/proofengineering/coq-docker\" target=\"_blank\" title=\"https://github.com/proofengineering/coq-docker\">https://github.com/proofengineering/coq-docker</a></p>",
        "id": 125661171,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524643435
    },
    {
        "content": "<p>Et voilà! I just figured out <a href=\"https://github.com/proofengineering/coq-docker/issues/1\" target=\"_blank\" title=\"https://github.com/proofengineering/coq-docker/issues/1\">how to install Coq 8.1</a> and built the Coq project. <span class=\"emoji emoji-1f423\" title=\"hatching chick\">:hatching_chick:</span></p>",
        "id": 125663903,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524648690
    },
    {
        "content": "<p>They occasionally prove false in Coq, right? And then of course things get patched. Do the patches extend back as far as things like 8.1? I know that this might all sound trivial to CS people but mathematicians, who are still in my view extremely skeptical about this formal proof verification thing, are not going to be too impressed by \"proof of odd order theorem in a system which can also prove anything\".</p>",
        "id": 125664059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524648966
    },
    {
        "content": "<p><a href=\"https://github.com/clarus/falso\" target=\"_blank\" title=\"https://github.com/clarus/falso\">https://github.com/clarus/falso</a></p>",
        "id": 125664078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524649057
    },
    {
        "content": "<p>8.1 &lt; 8.4.6</p>",
        "id": 125664079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524649060
    },
    {
        "content": "<blockquote>\n<p>which can also prove anything</p>\n</blockquote>\n<p>only on tuesdays</p>",
        "id": 125664080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524649062
    },
    {
        "content": "<p>only if you use a type with 256 constructors</p>",
        "id": 125664121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524649096
    },
    {
        "content": "<p>For my purpose, I'm just trying to figure out what some Coq proof does and translate that to Lean. So, since we <em>never</em> prove false in Lean, there shouldn't be any problem, right?</p>",
        "id": 125664193,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524649230
    },
    {
        "content": "<p>I guess so!</p>",
        "id": 125664204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524649281
    },
    {
        "content": "<p>Great. I can walk through the proof in CoqIde now. But it doesn't show the magic happening behind the scenes.</p>",
        "id": 125665013,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524650798
    },
    {
        "content": "<p>Oh, but I can remove the <code>*</code> from <code>rewrite*</code> to see the subgoals. <span class=\"emoji emoji-1f4a1\" title=\"light bulb\">:light_bulb:</span></p>",
        "id": 125665098,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524650943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Remember you also can't trust that pesky hardware Lean runs on!</p>",
        "id": 125667062,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524654794
    },
    {
        "content": "<p>And... my Coq woes are over! I have successfully translated this particular Coq proof into Lean. <span class=\"emoji emoji-1f64c\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 125668364,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524657312
    }
]