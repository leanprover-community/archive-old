[
    {
        "content": "<p>This question might be too vague to answer. I have a fixed type <code>X</code> and I am doing a lot of work with functions from <code>{U : set X // P U}</code> to <code>Type*</code> (for example, <code>X</code> might be a topological space and the functions might assign a type to each open set in <code>X</code>, but I also consider more general possibilities for <code>P</code>, e.g. <code>P</code> might say \"<code>U</code> is in a fixed basis for the topological space\"). I seem to have three different ways to set up such functions.</p>",
        "id": 125265237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076355
    },
    {
        "content": "<p>1) I could look at functions on subtypes, as I wrote above. I don't do this. I think subtypes are messy and would be forever taking them apart.</p>",
        "id": 125265251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076377
    },
    {
        "content": "<p>2) I could define my functions as <code>lam {U} (H : P U), ...</code></p>",
        "id": 125265280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076432
    },
    {
        "content": "<p>3) I could define my functions as <code>lam U [H : P U], ...</code></p>",
        "id": 125265322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076450
    },
    {
        "content": "<p>I don't like (3) because it relies on the type class inference system and for my own types P it would rely on my getting the system to work.</p>",
        "id": 125265336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076483
    },
    {
        "content": "<p>I used to be using (4) <code>lam U (H : P U)</code> but I just got sick of constantly writing U when it could be inferred from HU, so I just switched to (2).</p>",
        "id": 125265360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076528
    },
    {
        "content": "<p>I am now looking at (2) thinking \"ugh, my functions are supposed to be eating open sets and they're now eating proofs, that looks a bit weird\"</p>",
        "id": 125265371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076549
    },
    {
        "content": "<p>I like (2). Same number of arguments, but you don't have to rely on type classes. So long as you always have a proof of <code>P U</code> to hand.</p>",
        "id": 125265469,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524076677
    },
    {
        "content": "<p>Are there any arguments for or against any of (1) to (4)? I am 99.9% convinced that I could get any of (1), (2) or (4) working. I simply don't know whether I could get (3) working; in my mind it would be by far the \"riskiest\" approach. These functions are everywhere in my code and I am constantly coming up with proofs that various sets have property <code>P</code>; in the case <code>P</code> is \"I am an open set\" then some of these are in mathlib. I would probably have to go around making a whole bunch of things instances, and even then I'm not convinced that I would be able to cover everything (e.g. these functions might show up as part of structures, where the proof of <code>P U</code> is somewhere else in the structure and I am not 100 percent convinced that type class inference can get me to it).</p>",
        "id": 125265532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076749
    },
    {
        "content": "<p>I used (4) for open sets and (2) for bases of open sets, and both worked fine, so I switched to (2) because it made my code shorter.</p>",
        "id": 125265593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076807
    },
    {
        "content": "<p>...and possibly slightly less readable -- e.g. open sets like <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>(</mo><mi>V</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">f^{-1}(V)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> (which was easy to read) have now been removed and replaced by hypotheses like \"I am a lemma in mathlib saying the pre-image of an open set under a continuous function is open\".</p>",
        "id": 125265703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076949
    },
    {
        "content": "<p>On the other hand I am using type class inference for rings (the functions map open sets to rings) and sometimes it just doesn't work and it's easier to do the <code>@</code> dance than try to figure out why it didn't work.</p>",
        "id": 125265721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524076990
    },
    {
        "content": "<p>(1) has no advantages other than proving things like injectivity where the function has to be <code>α → β</code>, but I don't think you want to do that. (4) does have the advantage of readability. <code>some _</code> is a nightmare in this regard.</p>",
        "id": 125265734,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524077034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> it's amazing how we went from knowing nothing about type theory to having an opinion on them</p>",
        "id": 125265779,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077068
    },
    {
        "content": "<p>yes.</p>",
        "id": 125265780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077075
    },
    {
        "content": "<p>I've learnt so much this year.</p>",
        "id": 125265784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077079
    },
    {
        "content": "<p>the best way to learn maths is indeed to play with them</p>",
        "id": 125265795,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077097
    },
    {
        "content": "<p>people just learn symbols without the meanings</p>",
        "id": 125265805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077108
    },
    {
        "content": "<p>(x+y)^2 = x^2+2xy+y^2</p>",
        "id": 125265810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077115
    },
    {
        "content": "<p>I am very much in two minds about whether I want my code to be readable though.</p>",
        "id": 125265811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077119
    },
    {
        "content": "<p>means nothing</p>",
        "id": 125265812,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077119
    },
    {
        "content": "<p>but whenever you are told to expand it, you go from left to right</p>",
        "id": 125265819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077134
    },
    {
        "content": "<p>here it means \"about 6 invocations of the axioms of a ring\" :-)</p>",
        "id": 125265829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077154
    },
    {
        "content": "<p>i think you should not worry too much about your code being readable in tactic mode</p>",
        "id": 125265831,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524077160
    },
    {
        "content": "<p>i don't think there's any way to understand tactic mode without going through the proofs line by line</p>",
        "id": 125265888,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524077199
    },
    {
        "content": "<p>Technically Coq is all tactic mode and you can write readable proofs just fine :).</p>",
        "id": 125265901,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524077234
    },
    {
        "content": "<p>chlipala disagrees :)</p>",
        "id": 125265962,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524077288
    },
    {
        "content": "<p>I think I read some quote by Paulson arguing that readability was super-important</p>",
        "id": 125265965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077293
    },
    {
        "content": "<p>and that's the biggest difference between the isabelle style and the coq style</p>",
        "id": 125265968,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524077301
    },
    {
        "content": "<p>I see.</p>",
        "id": 125265970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077308
    },
    {
        "content": "<p>Adam Disagrees and then writes CPDT, which has yet to be deciphered :).</p>",
        "id": 125265972,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524077308
    },
    {
        "content": "<p>well, readability is definitely important, but do you want to make a second pass over all your proofs?</p>",
        "id": 125266045,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524077410
    },
    {
        "content": "<p>you can write out many of the intermediate steps with show, have, and give many comments, and that is certainly great</p>",
        "id": 125266060,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524077444
    },
    {
        "content": "<p>The last big proof I wrote (compactness of a certain topological space), every few lines I wrote down what the goal was (in mathematical language) and what I was going to do next.</p>",
        "id": 125266138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077528
    },
    {
        "content": "<p>So \"unreadable\" proof but readable comments</p>",
        "id": 125266142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077540
    },
    {
        "content": "<p>in isabelle some authors go so far as to write a latex proof in the comments next to the formal derivation</p>",
        "id": 125266222,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524077674
    },
    {
        "content": "<p>in isabelle one forgets computability</p>",
        "id": 125266226,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077692
    },
    {
        "content": "<p>In the future there will be files which humans read which will look like beautifully typeset mathematics and which will unfold into computer-checked proofs.</p>",
        "id": 125266580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078153
    },
    {
        "content": "<p>I hope to see it before I die.</p>",
        "id": 125266586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078162
    },
    {
        "content": "<p>perhaps... you have to wonder why coq and isabelle never took off. well, maybe people just need to be exposed to it more</p>",
        "id": 125266609,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524078219
    },
    {
        "content": "<p>Speaking of readability, I just wrote a proof like that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eventually_bdd_above_iff_exists_eventually_le</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">eventually_bdd_above</span> <span class=\"n\">F</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">eventually</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">eventually_bdd_above</span> <span class=\"n\">F</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">eventually</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">su</span><span class=\"o\">,</span> <span class=\"n\">suF</span><span class=\"o\">,</span> <span class=\"n\">tu</span><span class=\"o\">,</span> <span class=\"n\">tuH</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">eventually</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">tu</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">upwards_sets</span> <span class=\"n\">F</span> <span class=\"n\">suF</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hy</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">tuH</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"bp\">_</span> <span class=\"n\">Hy</span><span class=\"o\">)</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">tu</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">eventually</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">eventually_bdd_above</span> <span class=\"n\">F</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Ht</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">bdd_above</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hy</span><span class=\"o\">),</span>\n    <span class=\"n\">induction</span> <span class=\"n\">Hy</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">},</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>and then I compacted it to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">su</span><span class=\"o\">,</span> <span class=\"n\">suF</span><span class=\"o\">,</span> <span class=\"n\">tu</span><span class=\"o\">,</span> <span class=\"n\">tuH</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">tu</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">upwards_sets</span> <span class=\"n\">F</span> <span class=\"n\">suF</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span><span class=\"o\">,</span> <span class=\"n\">tuH</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"bp\">_</span> <span class=\"n\">Hy</span><span class=\"o\">))</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Ht</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">},</span> <span class=\"n\">Ht</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">y</span> <span class=\"n\">Hy</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Hy</span> <span class=\"k\">in</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">Hx</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n</pre></div>\n\n\n<p>Do you have an opinion on the readability of both, and which one I should keep?</p>",
        "id": 125266776,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1524078449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> They're reasonably well established in a few specific areas, almost exclusively related to software verification. Are you talking widespread adoption by mathematicians and in general, people who use formal apparatus of any kind?</p>",
        "id": 125266974,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524078719
    },
    {
        "content": "<p>i like non-compacted proofs, although the mathlib developers disagree with me <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 125267209,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524078973
    },
    {
        "content": "<p>I think it depends on your audience.</p>",
        "id": 125267224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078995
    },
    {
        "content": "<p>If you want to get it into mathlib then if you wrote the long one they would squish it down to the short one themselves</p>",
        "id": 125267229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524079017
    },
    {
        "content": "<p>If you want to explain to a bunch of undergraduates how Lean works then I would definitely not recommend the short one</p>",
        "id": 125267240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524079042
    },
    {
        "content": "<p>there is plenty of space for big proofs in TPIL and similar works</p>",
        "id": 125267303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524079115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110027\">@Moses Schönfinkel</span> yes. it doesn't even have that many inroads into high-assurance software, which is all written in things like MISRA C</p>",
        "id": 125267345,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524079172
    },
    {
        "content": "<p>For simple statements like this I prefer the later proof (btw: you can even reduce it more: <code>λy Hy, let ⟨x, Hx⟩ := Hy in  ~&gt; λy ⟨x, Hx⟩,</code>). But the more complicated the proof itself is, especially when the proof goes over a couple of lines, I prefer the more elaborate one.</p>",
        "id": 125267350,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524079185
    },
    {
        "content": "<p>In fact Johannes taught me a valuable lesson regarding this sort of thing (which you already know Sebastian) -- it's a very good exercise, at some point in your Lean career, to start trying to write the shortest proofs you possibly can.</p>",
        "id": 125267433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524079262
    },
    {
        "content": "<p>because this game just teaches you stuff, or perhaps teaches you to appreciate certain things</p>",
        "id": 125267442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524079284
    },
    {
        "content": "<p>which you might otherwise miss.</p>",
        "id": 125267448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524079293
    },
    {
        "content": "<p>Agreed. To be able to compactify the proof, I needed to understand much more of what is going on.</p>",
        "id": 125267549,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1524079437
    },
    {
        "content": "<p>The problem with compact proofs is of course, that it is hard to ever change the definition of constants. As the often rely on definitional equality. There using automation has a big advantage, as it is often configurable like the simplifier.</p>",
        "id": 125267682,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524079639
    },
    {
        "content": "<p>compact proofs / programs are painful to me. as someone who was tasked with fixing an old scientific c program from the 80s for several months, terseness is the great enemy</p>",
        "id": 125267683,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524079647
    },
    {
        "content": "<p>What about having the goal that people could learn stuff from reading proofs?</p>",
        "id": 125267849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524079844
    },
    {
        "content": "<p>In ordinary maths this is a pretty important idea</p>",
        "id": 125267852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524079856
    },
    {
        "content": "<p>Of course we could completely separate the explanation of a theorem from its proof using Lean. But that wouldn't help people learning how to convince Lean that something is true</p>",
        "id": 125267932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524079928
    },
    {
        "content": "<p>What about having the goal that in between the incomprehensible lines of Lean code there are comments explaining what is going on, so people can learn from the comments?</p>",
        "id": 125269848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524082208
    },
    {
        "content": "<p>I think readability is extremely important for people to have confidence in formalisations. I am sure you all know the paper by Pollack, \"How to believe a machine-checked proof\": <a href=\"http://www.brics.dk/RS/97/18/BRICS-RS-97-18.pdf\" target=\"_blank\" title=\"http://www.brics.dk/RS/97/18/BRICS-RS-97-18.pdf\">http://www.brics.dk/RS/97/18/BRICS-RS-97-18.pdf</a></p>",
        "id": 125269853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524082212
    },
    {
        "content": "<p>I think he has very good points</p>",
        "id": 125269859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524082222
    },
    {
        "content": "<p>For example, if the statement of Ramanujan's conjecture uses modular forms, then I need to understand the formalisation of the definition of modular forms as well. And if they are defined as sections of some line bundle on a modular curve, then I need to understand those as well...</p>",
        "id": 125269962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524082391
    },
    {
        "content": "<p>If there is one typo in those definitions... then the proof of Ramanujan's conjecture might not actually be a proof.</p>",
        "id": 125269972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524082417
    },
    {
        "content": "<p>That is why theorems with simple statements should have extremely readable and simple formalisations</p>",
        "id": 125270026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524082452
    },
    {
        "content": "<p>And afterwards, there might be theorems that say the statement is equivalent to some other statement using involved definitions, which you then go on to prove...</p>",
        "id": 125270044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524082496
    },
    {
        "content": "<p>On the other hand, maybe my rant does not have much bearing on readability of <em>proofs</em>...</p>",
        "id": 125270068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524082530
    }
]