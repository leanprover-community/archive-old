[
    {
        "content": "<p>When using <code>to_string expr</code> in metaprograming, is there a way to force Lean to use the pretty printer?<br>\nI would like to get the target into a string in pretty printed format.</p>",
        "id": 196743001,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1588841755
    },
    {
        "content": "<p>You can use <code>tactic.pp</code></p>",
        "id": 196743678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588842168
    },
    {
        "content": "<p>Very stupid example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">fred</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">pp</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">fred</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196744394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588842633
    },
    {
        "content": "<p>In case you're still afraid of monadic combinators,  you can avoid the <code>&gt;&gt;=</code> by using:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span> <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"kn\">print</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">pp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"kn\">print</span>\n</code></pre></div>",
        "id": 196744569,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588842726
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 196774799,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1588860303
    }
]