[
    {
        "content": "<p>Is the below expected behaviour? It is what tripped up <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/refactor.20of.20group_theory.2Ecoset.20and.20friends/near/203243565\">here</a>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n\n<span class=\"c1\">-- subgroup.subtype : Π {G : Type u_1} [_inst_1 : group G] (H : subgroup G), ↥H →* G</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subgroup</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  type mismatch at application</span>\n<span class=\"cm\">  subtype (λ (n : ℕ), n = n)</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  λ (n : ℕ), n = n</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ℕ → Prop : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  subgroup ?m_1 : Type ?</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ 2 + 2 = 5</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">subgroup</span>\n</code></pre></div>",
        "id": 203296154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594228850
    },
    {
        "content": "<p>Can this be fixed in C++ by making <code>{ // }</code> notation for <code>_root_.subtype</code> explicitly?</p>",
        "id": 203297640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594229564
    },
    {
        "content": "<p>This might be an easy first C++ PR.</p>",
        "id": 203297714,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1594229614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Another fix might be to make <code>submodule.subtype</code> a <code>protected</code> def</p>",
        "id": 203297721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594229618
    },
    {
        "content": "<p>Or rename it</p>",
        "id": 203318988,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1594240336
    }
]