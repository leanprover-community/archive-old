[
    {
        "content": "<p>We currently have three different ways to talk about matrix inverses, respectively (with regards to the title):</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_inv\">docs#matrix.has_inv</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring.inverse\">docs#ring.inverse</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/inv_of\">docs#inv_of</a></li>\n</ul>\n<p>The first two of these satisfy <code>M⁻¹ = ring.inverse M</code> in all circumstances, suggesting it's somewhat unecessary to have both. Arguably <code>ring.inverse</code> is the better spelling, since many statements about it generalize.</p>\n<p>Should we eliminate <code>matrix.has_inv</code>? To make it less painful, could we introduce a notation for <code>ring.inverse</code>?</p>",
        "id": 260728585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636410750
    },
    {
        "content": "<p>(maybe <code>M⁻¹ᵎ</code>?)</p>",
        "id": 260728923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636410931
    },
    {
        "content": "<p>Hmm, do we have any instances of <code>has_inv</code> on a <code>monoid_with_zero</code> that is not prop-eq to <code>ring.inverse</code>?</p>",
        "id": 260755243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636435449
    },
    {
        "content": "<p>Should every <code>monoid_with_zero</code> just come with a <code>inv</code> field? That would unify your first two bullet points.</p>",
        "id": 260755261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636435484
    },
    {
        "content": "<p>At least, I wouldn't want to give up the notation <code>M⁻¹</code> too easily.</p>",
        "id": 260760485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636440996
    },
    {
        "content": "<p>You could even define it on monoids and send non invertible things to 1, which would of course break everything but might be a better solution because it's more general. Instead of 1/0=0 we'd have 1/0=1</p>",
        "id": 260761303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636441701
    },
    {
        "content": "<p>That would be annoying for matrices because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.inv_def\">docs#matrix.inv_def</a> would no longer be true</p>",
        "id": 260781197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636455386
    },
    {
        "content": "<p>Yes and all the weird arguments that computer scientists give for x/0=0 of the form \"some lemmas like (a+b)/c=a/c+b/c don't need the hypothesis that c!=0\" will all break as well</p>",
        "id": 260783511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636456901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/.60M.E2.81.BB.C2.B9.60.20vs.20.60ring.2Einverse.20M.60.20vs.20.60.E2.85.9FM.60/near/260755261\">said</a>:</p>\n<blockquote>\n<p>Should every <code>monoid_with_zero</code> just come with a <code>inv</code> field? That would unify your first two bullet points.</p>\n</blockquote>\n<p>At which point it probably should just extend <code>div_inv_monoid</code>, and then we get integer powers of matrices too</p>",
        "id": 260783939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636457146
    },
    {
        "content": "<p>Would we then add a <code>has_faithful_inv</code> typeclass that states that the inv is equal to <code>ring.inverse</code>? Or does that become part of <code>monoid_with_zero</code> too?</p>",
        "id": 260784058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636457205
    },
    {
        "content": "<p>The danger we run into by adding that field (and requiring it to match ring.inverse) is that lots of <code>semiring</code> structures either become noncomputable or require decidable equality</p>",
        "id": 260784110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636457236
    },
    {
        "content": "<p>I'm not sure whether adding a field to dedup is super worth it</p>",
        "id": 260784255,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636457304
    },
    {
        "content": "<p>I wonder if we can just overload the notation</p>",
        "id": 260784369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636457379
    },
    {
        "content": "<p>Lean4 should deal with overloaded notation better too, right?</p>",
        "id": 260784400,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636457399
    },
    {
        "content": "<p>Here's an idea that I had tonight:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">h.unit</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>In this way <code>ring.inverse</code> is defined for <em>every</em> monoid, not just monoid_with_zero's. Also <code>ring.inverse</code> agrees with <code>has_inv</code> for every <code>group_with_zero</code>.<br>\nIf we want to be very evil, we could even add <code>has_inv</code> to the definition of <code>monoid</code>, and add an axiom that requires it to behave according to this rule. That way we can get the defeq that we would like to have whenever we care.</p>",
        "id": 261751071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637134293
    },
    {
        "content": "<p>It might then even be possible to unify <code>x⁻¹</code>, <code>ring.inverse x</code> and <code>⅟x</code>.</p>",
        "id": 261751147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637134361
    },
    {
        "content": "<p>We should call it an <code>unverse</code>. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> <span aria-label=\"nauseated\" class=\"emoji emoji-1f922\" role=\"img\" title=\"nauseated\">:nauseated:</span></p>",
        "id": 261751329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637134583
    },
    {
        "content": "<p>What I like is that it's an involution, and it agrees with <code>x⁻¹</code> for fields.</p>",
        "id": 261751370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637134661
    },
    {
        "content": "<p>Yeah it's a better junk value than 0 or 1!</p>",
        "id": 261753380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637136535
    },
    {
        "content": "<p>That definition doesn't satisfy <code>unverse M = unverse M.det • M.adjugate</code>, unlike today's <code>ring.inverse</code></p>",
        "id": 261753611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637136747
    },
    {
        "content": "<p>Sure, it also doesn't satisfy <code>unverse (x * y) = unverse y * unverse x</code>.</p>",
        "id": 261753760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637136886
    },
    {
        "content": "<p>I'd claim those are both quite desirable properties</p>",
        "id": 261753874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637136973
    },
    {
        "content": "<p>Well <code>ring.inverse (ring.inverse x) = x</code> is also quite desirable. And that one is currently false.</p>",
        "id": 261753996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637137089
    },
    {
        "content": "<p>And getting a unified approach to <code>x⁻¹</code>, <code>ring.inverse x</code> and <code>⅟x</code> also seems like a win to me.</p>",
        "id": 261754026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637137135
    },
    {
        "content": "<p>Debates about junk values are difficult for me to take seriously because in practice you only use these theorems above in situations where they're mathematically meaningful. We had this sort of discussion with square roots of negative real numbers once (should it be 0 or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mo>−</mo><mi>x</mi></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{-x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.205em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.835em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">−</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-2.795em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.205em;\"><span></span></span></span></span></span></span></span></span>) and ultimately one side convinced the other but in practice I bet there's nowhere where anyone relies on the actual choice we made, the hypothesis that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x\\geq0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is always there in practice and it's just a question of when you have to feed a theorem <code>x</code> and when you have to feed it <code>hx</code></p>",
        "id": 261754355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637137403
    },
    {
        "content": "<p>Do we have any places in mathlib today where we talk about partial inverses on monoids?</p>",
        "id": 261754373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637137433
    },
    {
        "content": "<p>Kevin, there are a surprising number of results on the matrix inverse that don't need to assume the matrix is invertible</p>",
        "id": 261754474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637137488
    },
    {
        "content": "<p>Which is thanks to 0 being a particularly convenient junk value</p>",
        "id": 261754530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637137519
    },
    {
        "content": "<p>Eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_nonsing_inv\">docs#matrix.det_nonsing_inv</a></p>",
        "id": 261754574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637137562
    },
    {
        "content": "<p>Note that <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> would also work with <code>unverse</code></p>",
        "id": 261754697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637137654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.60M.E2.81.BB.C2.B9.60.20vs.20.60ring.2Einverse.20M.60.20vs.20.60.E2.85.9FM.60/near/261754373\">said</a>:</p>\n<blockquote>\n<p>Do we have any places in mathlib today where we talk about partial inverses on monoids?</p>\n</blockquote>\n<p>Not that I'm aware of. In practice they will either be groups, or have a zero, I guess.</p>",
        "id": 261754836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637137749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.60M.E2.81.BB.C2.B9.60.20vs.20.60ring.2Einverse.20M.60.20vs.20.60.E2.85.9FM.60/near/261754474\">said</a>:</p>\n<blockquote>\n<p>Kevin, there are a surprising number of results on the matrix inverse that don't need to assume the matrix is invertible</p>\n</blockquote>\n<p>Right -- and I'm sure this is very exciting from a CS point of view -- but my point is that as a mathematician I won't be using those junk lemmas, and if I have <code>A : matrix n n R</code> and <code>hA : is_invertible A</code> then I don't care at all whether a random lemma true for invertible matrices and whose truth value for non-invertible matrices depends on junk wants me to pass <code>A</code> or <code>hA</code>, I'll just pass whatever one conforms to the fashions of mathlib at that time.</p>",
        "id": 261759320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637140751
    },
    {
        "content": "<p>The problems is that you might need to pass a proof that <code>A ^ n</code> is invertible. And you don't have that in the context.</p>",
        "id": 261760135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637141248
    },
    {
        "content": "<p>So then you need to remember how to turn <code>hA</code> into a proof that powers of <code>A</code> are invertible.</p>",
        "id": 261760164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637141267
    },
    {
        "content": "<p>And maybe you actually need to show that <code>A ^ n / (B * B)</code> is invertible, and then it becomes annoying.</p>",
        "id": 261760231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637141295
    },
    {
        "content": "<p>So it's a lot easier if the junk values align well.</p>",
        "id": 261760244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637141305
    },
    {
        "content": "<p>No more annoying than how formalisation usually looks!</p>",
        "id": 261760254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637141312
    },
    {
        "content": "<p>99 times out of 100 we're passing math-necessary requirements to lemmas</p>",
        "id": 261760318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637141363
    },
    {
        "content": "<p>If you have <code>hA : invertible A</code> then you can just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inv_of\">docs#inv_of</a> all the time, and you never need a junk value</p>",
        "id": 261760713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637141600
    },
    {
        "content": "<p>Sure, inv isn't an involution currently, but inv_inv_inv is the same as inv</p>",
        "id": 261785008,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637156564
    },
    {
        "content": "<p>When I was defining matrix.fpow, I played around with making inv a noop when the matrix wasn't invertible. But that led to more of the API requiring the proof of invertability to be valid. So I stuck with 0</p>",
        "id": 261785333,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637156737
    },
    {
        "content": "<p>So, while we might have the proof of invertability somewhere, for ease of use, I think it's better to defer needing it until as late as possible</p>",
        "id": 261785446,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637156794
    },
    {
        "content": "<p>I think that unifying <code>x⁻¹</code>, <code>ring.inverse x</code> and <code>⅟x</code> outweighs the cons.</p>",
        "id": 261788380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637158160
    },
    {
        "content": "<p>Keeping the \"junk goes to zero\" definition unifies all the existing uses of those things</p>",
        "id": 261797293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637161869
    },
    {
        "content": "<p>It's only when talking about partial inverses in monoids without zero that the junk value changes, but it seems we don't bother to talk about those (yet)</p>",
        "id": 261797350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637161899
    },
    {
        "content": "<p>Currently we can't say <code>p : R</code> is invertible in some random ring <code>R</code>, and have it's inverse be defeq to <code>p⁻¹</code> when specializing to <code>R = ℚ</code>.</p>",
        "id": 261798808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637162435
    },
    {
        "content": "<p>Oh I agree; but if we added an <code>inv</code> field to <code>monoid_with_zero</code> we could</p>",
        "id": 261799124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637162548
    },
    {
        "content": "<p>Your proposal is to add it to <code>monoid</code> and change the default, but I'm arguing that we don't gain anything by doing that instead of <code>monoid_with_zero</code>, so that's not (yet) worth it</p>",
        "id": 261799226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637162587
    },
    {
        "content": "<p>Hmm, that's true</p>",
        "id": 261799613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637162731
    },
    {
        "content": "<p>Until someone needs inverses in monoids. I'm not sure that will not happen.</p>",
        "id": 261799672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637162758
    },
    {
        "content": "<p>Then we can add <a href=\"https://www.jstor.org/stable/2308576\">https://www.jstor.org/stable/2308576</a> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 261799818,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637162818
    },
    {
        "content": "<p>I think the pseudo-inverse is something different so we're off the hook</p>",
        "id": 261800282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163019
    },
    {
        "content": "<p>Unless we want to remove any requirements on the junk value</p>",
        "id": 261800341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163046
    },
    {
        "content": "<p>And remember that adding this field to every <code>monoid_with_zero</code>, as well as further confusing the mathematicians, has this problem:<br>\n<span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.60M.E2.81.BB.C2.B9.60.20vs.20.60ring.2Einverse.20M.60.20vs.20.60.E2.85.9FM.60/near/260784110\">said</a>:</p>\n<blockquote>\n<p>The danger we run into by adding that field (and requiring it to match ring.inverse) is that lots of <code>semiring</code> structures either become noncomputable or require decidable equality</p>\n</blockquote>",
        "id": 261800918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163255
    }
]