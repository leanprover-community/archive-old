[
    {
        "content": "<p>the current mathlib compile time is 4 hours, so it's time for the speed-up project to return. current statistics:</p>\n<div class=\"codehilite\"><pre><span></span><code>645.0 src/analysis/special_functions/trigonometric.lean\n472.0 src/data/polynomial.lean\n382.0 src/data/multiset.lean\n367.0 src/analysis/special_functions/pow.lean\n300.0 src/data/mv_polynomial.lean\n290.0 src/category_theory/limits/shapes/binary_products.lean\n284.0 src/analysis/normed_space/multilinear.lean\n270.0 src/topology/metric_space/hausdorff_distance.lean\n268.0 src/linear_algebra/basic.lean\n254.0 src/data/dfinsupp.lean\n240.0 src/analysis/calculus/deriv.lean\n234.0 src/geometry/manifold/mfderiv.lean\n224.0 src/category_theory/comma.lean\n220.0 src/data/complex/exponential.lean\n216.0 src/data/finset.lean\n212.0 src/linear_algebra/basis.lean\n211.0 src/data/padics/padic_numbers.lean\n211.0 src/analysis/analytic/basic.lean\n208.0 src/ring_theory/power_series.lean\n205.0 src/analysis/calculus/times_cont_diff.lean\n</code></pre></div>\n\n\n<p>(<a href=\"https://gist.github.com/kckennylau/ed020e947bc2501f54d7f944b6bac2b9\">raw data</a>, <a href=\"https://gist.github.com/kckennylau/14c550307b0d9f3ef3f38367038eda0f\">sorted</a>)</p>",
        "id": 197425746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589382316
    },
    {
        "content": "<p>Somewhat related: <a href=\"https://github.com/leanprover-community/mathlib/issues/2276\">#2276</a></p>",
        "id": 197426004,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589382432
    },
    {
        "content": "<p>I'm certainly in favor of a speed-up project! But just to be sure: you're not actually compiling mathlib for 4 hours, right? There's no reason to take longer than CI.</p>\n<p>If you want to build: commit and push to a random branch of mathlib. In under 2 hours, <code>leanproject get-cache</code> should offer you a bunch of fresh oleans.</p>",
        "id": 197426165,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589382494
    },
    {
        "content": "<p>And it uses almost none of your own cpu. :)</p>",
        "id": 197426220,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589382527
    },
    {
        "content": "<p>I actually compiled mathlib for 4 hours</p>",
        "id": 197427683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589383161
    },
    {
        "content": "<p>which agrees with the time <a href=\"#narrow/stream/113538-travis\">here</a></p>",
        "id": 197427719,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589383176
    },
    {
        "content": "<p>I guess CI uses multithreads</p>",
        "id": 197427742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589383186
    },
    {
        "content": "<p>I have no idea what the build time bot is, I don't read that stream. But the oleans for that commit were available 1:48 after it landed on the staging branch: <a href=\"https://github.com/leanprover-community/mathlib/runs/669462271\">https://github.com/leanprover-community/mathlib/runs/669462271</a></p>",
        "id": 197428684,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589383478
    },
    {
        "content": "<p>so CI must use 2 threads!</p>",
        "id": 197428793,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589383515
    },
    {
        "content": "<p>I was surprised how long the build-time-bot is taking now. (It was offline for a while in february/march, and got much worse when I restarted it.)</p>",
        "id": 197428980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> oh and how would you feel if I replaced all your <code>by tidy</code> with manual labour?</p>",
        "id": 197429033,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589383590
    },
    {
        "content": "<p>I'm not going to stand in the way of this happening.</p>",
        "id": 197429123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383633
    },
    {
        "content": "<p>But it would make me very sad. :-)</p>",
        "id": 197429131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383638
    },
    {
        "content": "<p>Theorem provers future usefulness depends on them being able to carry their own weight.</p>",
        "id": 197429181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383668
    },
    {
        "content": "<p>i.e. to handle for themselves a great deal of the tedious plumbing in between the mathematical ideas and the underlying logic.</p>",
        "id": 197429271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383700
    },
    {
        "content": "<p>(I said \"future usefulness\" to emphasise the complete use-less-ness of all current theorem provers!)</p>",
        "id": 197429337,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383737
    },
    {
        "content": "<p>I'm not claiming at all that <code>tidy</code> is the answer. It is obviously lame and dumb and slow.</p>",
        "id": 197429373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383756
    },
    {
        "content": "<p>But it makes me sad that we're thinking \"how do we avoid using automation\", rather than \"what do we need to do before this sort of automation is viable\"?</p>",
        "id": 197429436,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383788
    },
    {
        "content": "<p>I'd much prefer that we put effort into making <a href=\"https://github.com/leanprover-community/mathlib/issues/2300\">#2300</a> viable than writing \"boilerplate\".</p>",
        "id": 197429640,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383872
    },
    {
        "content": "<p>Also --- just making <code>tidy</code> faster is probably low hanging fruit.</p>",
        "id": 197429944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589383994
    },
    {
        "content": "<p>I suspect that amongst the subsidiary tactics <code>tidy</code> calls, <code>auto_cases</code>, and <code>simp</code> are the killers. But it would be good to know where it spends its time.</p>",
        "id": 197430040,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589384040
    },
    {
        "content": "<p>per byte data:</p>\n<div class=\"codehilite\"><pre><span></span><code>0.04807339449541284 src/topology/category/Top/adjunctions.lean\n0.020389546351084812 src/category_theory/elements.lean\n0.015910462500685795 src/category_theory/limits/shapes/binary_products.lean\n0.015718349928876246 src/analysis/normed_space/hahn_banach.lean\n0.014868532998419965 src/analysis/special_functions/pow.lean\n0.014746689923095219 src/category_theory/limits/over.lean\n0.013920285544318858 src/analysis/complex/basic.lean\n0.013886572143452876 src/category_theory/limits/shapes/constructions/limits_of_products_and_equalizers.lean\n0.013393418570530287 src/measure_theory/probability_mass_function.lean\n0.013363333985521423 src/algebra/homology/homology.lean\n0.012804698972099854 src/category_theory/graded_object.lean\n0.012802926383173296 src/topology/sheaves/presheaf.lean\n0.012098366541015976 src/algebra/category/Module/monoidal.lean\n0.011772905842098594 src/category_theory/limits/shapes/wide_pullbacks.lean\n0.011354838709677418 src/category_theory/adjunction/limits.lean\n0.011281224818694601 src/category_theory/pempty.lean\n0.010924593658406609 src/topology/metric_space/cau_seq_filter.lean\n0.010811648079306072 src/category_theory/currying.lean\n0.010690172543135784 src/data/padics/padic_integers.lean\n0.010124164278892072 src/algebraic_geometry/stalks.lean\n</code></pre></div>\n\n\n<p>(<a href=\"https://gist.github.com/kckennylau/cc14edf26842ac3ecd8f54bb26858f4b\">full data</a>)</p>",
        "id": 197431224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589384458
    },
    {
        "content": "<p>the most ideal count is per \"lemma/def\" right</p>",
        "id": 197431320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589384491
    },
    {
        "content": "<p>I don't understand why it matters to <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  that it takes hours to compile.</p>",
        "id": 197431518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589384560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197431518\">said</a>:</p>\n<blockquote>\n<p>I don't understand why it matters to <span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span>  that it takes hours to compile.</p>\n</blockquote>\n<p>I'm not the only one:<br>\n<span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113538-travis/topic/build.20time.20bot/near/197357348\">said</a>:</p>\n<blockquote>\n<p>The links are working again. I have no idea why the build times are so much worse than they used to be. Mathlib grew?</p>\n</blockquote>",
        "id": 197431748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589384607
    },
    {
        "content": "<p>per declarations:</p>\n<div class=\"codehilite\"><pre><span></span><code>38.0 src/number_theory/sum_four_squares.lean\n27.8 src/topology/metric_space/completion.lean\n26.2 src/topology/category/Top/adjunctions.lean\n26.15 src/algebra/category/Group/biproducts.lean\n23.0 src/category_theory/products/basic.lean\n22.666666666666668 src/data/padics/hensel.lean\n22.2 src/category_theory/limits/shapes/constructions/limits_of_products_and_equalizers.lean\n22.1 src/analysis/normed_space/hahn_banach.lean\n16.7 src/topology/category/TopCommRing.lean\n16.54 src/category_theory/elements.lean\n15.7 src/measure_theory/simple_func_dense.lean\n14.95 src/category_theory/limits/functor_category.lean\n14.9 src/category_theory/monad/algebra.lean\n14.75 src/data/zsqrtd/basic.lean\n12.971428571428572 src/data/matrix/notation.lean\n12.725 src/analysis/calculus/extend_deriv.lean\n12.4 src/category_theory/limits/over.lean\n12.363636363636363 src/geometry/manifold/basic_smooth_bundle.lean\n11.95 src/analysis/complex/polynomial.lean\n11.7 src/analysis/complex/basic.lean\n</code></pre></div>\n\n\n<p>(<a href=\"https://gist.github.com/kckennylau/41242df750190f48ce206d43a615e7e7\">full data</a>)</p>",
        "id": 197437373,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589386750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197427683\">said</a>:</p>\n<blockquote>\n<p>I actually compiled mathlib for 4 hours</p>\n</blockquote>\n<p>What kind of CPU did you use?<br>\nDid anyone tried to compile mathlib using AMD-based ThreadRipper?</p>",
        "id": 197439386,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589387607
    },
    {
        "content": "<p>Kenny has a machine that is very slow for unknown reasons</p>",
        "id": 197439704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589387750
    },
    {
        "content": "<p>he consistently measures times that are about double everyone else</p>",
        "id": 197439774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589387776
    },
    {
        "content": "<p>but I can see why that might incentivize him to speed up things more. I actually think that the move to all-CI and downloaded oleans has decoupled us from the pressures of improving compile times a bit too much. If we aren't careful this will be 6 hours in a few months</p>",
        "id": 197439961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589387868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197439774\">said</a>:</p>\n<blockquote>\n<p>he consistently measures times that are about double everyone else</p>\n</blockquote>\n<p>so does <a href=\"#narrow/stream/113538-travis\">build time bot</a></p>",
        "id": 197440009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589387882
    },
    {
        "content": "<p>I see nothing in that stream?</p>",
        "id": 197440257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589387991
    },
    {
        "content": "<p>I thought the build time bot died</p>",
        "id": 197440294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388003
    },
    {
        "content": "<p>we are using github actions now for builds, so the timing would have to adapt to that</p>",
        "id": 197440414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388053
    },
    {
        "content": "<p>You might have to click \"more topics\" if you muted some of the spammier topics there.</p>",
        "id": 197440597,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589388147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239718\">build time bot</span> <a href=\"#narrow/stream/113538-travis/topic/build.20time.20bot/near/197408593\">said</a>:</p>\n<blockquote>\n<p>Building master at <a href=\"https://github.com/leanprover-community/mathlib/commit/51e2b4ccef20e49bc24ef86a6afe6e48196abbcf\">https://github.com/leanprover-community/mathlib/commit/51e2b4ccef20e49bc24ef86a6afe6e48196abbcf</a> takes 246m47.805s</p>\n<p>--profile output at <a href=\"https://tqft.net/lean/mathlib/51e2b4ccef20e49bc24ef86a6afe6e48196abbcf.log\">https://tqft.net/lean/mathlib/51e2b4ccef20e49bc24ef86a6afe6e48196abbcf.log</a></p>\n</blockquote>",
        "id": 197440675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589388191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197439961\">said</a>:</p>\n<blockquote>\n<p>but I can see why that might incentivize him to speed up things more. I actually think that the move to all-CI and downloaded oleans has decoupled us from the pressures of improving compile times a bit too much. If we aren't careful this will be 6 hours in a few months</p>\n</blockquote>\n<p>Is the CI running default/common hardware or custom powerful hardware?</p>",
        "id": 197440896,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388289
    },
    {
        "content": "<p><a href=\"https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#cloud-hosts-for-github-hosted-runners\">https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#cloud-hosts-for-github-hosted-runners</a></p>",
        "id": 197440935,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589388311
    },
    {
        "content": "<p>Okay so that's the default GH Actions hardware</p>",
        "id": 197440970,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388327
    },
    {
        "content": "<p>I have to try to compile mathlib on this <a href=\"https://www.packet.com/cloud/servers/c3-medium/\">https://www.packet.com/cloud/servers/c3-medium/</a> just for reference</p>",
        "id": 197441135,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388393
    },
    {
        "content": "<p>CI machines tend to be slower than regular machines because they are time sharing with other CI projects</p>",
        "id": 197441238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388441
    },
    {
        "content": "<p>but they also happen in parallel so it's not that relevant how long it takes unless you want to decrease latency</p>",
        "id": 197441354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388484
    },
    {
        "content": "<p>Yes, they're most likely virtualized under some baremetal stuff and some CI projects must steal CPU</p>",
        "id": 197441358,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197441354\">said</a>:</p>\n<blockquote>\n<p>but they also happen in parallel so it's not that relevant how long it takes unless you want to decrease latency</p>\n</blockquote>\n<p>But like, more cores would decrease the total amount of time, right?</p>",
        "id": 197441428,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388522
    },
    {
        "content": "<p>sure</p>",
        "id": 197441464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388542
    },
    {
        "content": "<p>I don't know how much mathlib compilation would benefit of parallelism</p>",
        "id": 197441471,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388544
    },
    {
        "content": "<p>it benefits greatly</p>",
        "id": 197441490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388556
    },
    {
        "content": "<p>lean is fully parallel and will use all your cores</p>",
        "id": 197441507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388566
    },
    {
        "content": "<p>So an ThreadRipper 3990X with 64 cores / 128 threads would make Lean very much instant, I guess</p>",
        "id": 197441641,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388605
    },
    {
        "content": "<p>In exchange of the mere amount of 4K EUR…</p>",
        "id": 197441705,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388635
    },
    {
        "content": "<p>Does anyone own one of those?</p>",
        "id": 197441721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388641
    },
    {
        "content": "<p>I personally don't, but I know sysadmin people who has one of them and I'm looking to own one for some general work / projects</p>",
        "id": 197441862,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388698
    },
    {
        "content": "<p>I know that scott has access to some high quality hardware that he has been using for the build time bot, but apparently something has recently got a lot worse and it's not clear if it's mathlib, the build system, or scott's machine</p>",
        "id": 197441887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388709
    },
    {
        "content": "<p>Maybe that's something that an university can afford, I guess or you'd found it in HPC clusters but don't know how hard would it be to compile mathlib on those</p>",
        "id": 197441964,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388729
    },
    {
        "content": "<p>There was some not-so-serious talk at Lean Together about buying one of these things with grant money and setting up a fast compile server.</p>",
        "id": 197441984,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589388739
    },
    {
        "content": "<p>But that takes someone with sysadmin experience to keep running correctly.</p>",
        "id": 197442027,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589388764
    },
    {
        "content": "<p>I know that in the cloud/DevOps landscape, CNCF just give out access to a $25K/month account of ressources on <a href=\"http://Packet.com\">Packet.com</a>: <a href=\"https://www.cncf.io/community/infrastructure-lab/\">https://www.cncf.io/community/infrastructure-lab/</a> which everyone can ask for if the demand is sound</p>",
        "id": 197442281,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388852
    },
    {
        "content": "<p>Also, don't know how much Microsoft would be interested into giving infra for free to mathlib (?), I know that it's a Lean Prover community project, but as it's a big one… (?)</p>",
        "id": 197442472,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589388933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197441135\">said</a>:</p>\n<blockquote>\n<p>I have to try to compile mathlib on this <a href=\"https://www.packet.com/cloud/servers/c3-medium/\">https://www.packet.com/cloud/servers/c3-medium/</a> just for reference</p>\n</blockquote>\n<p>My prediction is somewhere in the vicinity of 30 minutes</p>",
        "id": 197445903,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589390178
    },
    {
        "content": "<p>My ancient hardware manages to compile in about 50 minutes. I have 16 threads.</p>",
        "id": 197446026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589390225
    },
    {
        "content": "<p>So I hope modern hardware would be able to get &lt; 20 minutes</p>",
        "id": 197446085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589390247
    },
    {
        "content": "<p>25min on my Ryzen 3700X (8 cores, 16 threads). I'm doing some timings with 1 and 8 cores right now to measure the speedup. Still, the usual caveat applies: what scales up to 16 threads does not necessarily scale up to 128 threads. There is no substitute for benchmarks.</p>",
        "id": 197446501,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589390415
    },
    {
        "content": "<p>It'd be good if someone with more C++ knowledge than me could take a look at <a href=\"https://github.com/leanprover-community/lean/issues/58\">lean#58</a> and other timing output issues so that we could get more accurate per-file / per-declaration timings. Has the profiling situation improved in Lean 4?</p>",
        "id": 197447021,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589390586
    },
    {
        "content": "<p>Right, I don't think there is any doubt that there is plenty more than 8 available parallelism for most or all of the build.</p>",
        "id": 197447184,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589390612
    },
    {
        "content": "<p>One interesting test would be to hack lean to skip all proofs, and see how much faster it gets. That should be an upper bound on the parallelism</p>",
        "id": 197447384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589390692
    },
    {
        "content": "<p>It doesn't help nearly as much as you might assume.  The definitions take a lot of time as well, and parsing the proofs is surprisingly expensive.</p>",
        "id": 197447459,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589390743
    },
    {
        "content": "<p>There's still module-parallelism, though, which is controlled by the width of the import structure</p>",
        "id": 197447487,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589390756
    },
    {
        "content": "<p>category theory is almost entirely definitions, at least at top level--I'm not sure how much parallelism is gained by floating out proofs</p>",
        "id": 197447702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589390856
    },
    {
        "content": "<p>Don't Prop parts of definitions get floated out as proofs?</p>",
        "id": 197447800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589390891
    },
    {
        "content": "<p>maybe that's not until the tactic is finished running though</p>",
        "id": 197447828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589390906
    },
    {
        "content": "<p>I guess I'm not sure at what point that happens <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 197447842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589390912
    },
    {
        "content": "<p>It should be possible for <code>tidy</code> to make sure this happens</p>",
        "id": 197447889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589390941
    },
    {
        "content": "<p>Like if I have <code>def X : Thing := { str := blah blah, prop := by tidy }</code> how much work gets floated out</p>",
        "id": 197447907,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589390951
    },
    {
        "content": "<p>Is it possible that the elaboration of <code>str</code> even depends on what happens inside <code>tidy</code>?</p>",
        "id": 197447934,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589390966
    },
    {
        "content": "<p>My impression at one point was that it is possible</p>",
        "id": 197447948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589390974
    },
    {
        "content": "<p>You could wrap <code>tidy</code> in <code>prove_goal_async</code>.</p>",
        "id": 197447967,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589390984
    },
    {
        "content": "<p>interesting!</p>",
        "id": 197447983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589390994
    },
    {
        "content": "<p>that is a string that I believe has not appeared on Zulip before</p>",
        "id": 197448053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391011
    },
    {
        "content": "<p>For example, this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_thing</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197448202,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391101
    },
    {
        "content": "<p>I think it's mostly unfortunate that it works, though</p>",
        "id": 197448217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391107
    },
    {
        "content": "<p>You can't float this goal because it is <code>?m = 3</code></p>",
        "id": 197448422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589391201
    },
    {
        "content": "<p>how would you generalize it?</p>",
        "id": 197448446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589391211
    },
    {
        "content": "<p>I don't want to float it, I want to get an error.</p>",
        "id": 197448490,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391238
    },
    {
        "content": "<p>but that will break things</p>",
        "id": 197448595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589391266
    },
    {
        "content": "<p>because that feature is used for sure</p>",
        "id": 197448609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589391276
    },
    {
        "content": "<p>unless you mean that you want <code>tidy</code> specifically to complain when given goals with metavariables</p>",
        "id": 197448695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589391325
    },
    {
        "content": "<p>I think those things should be broken.</p>",
        "id": 197448719,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391334
    },
    {
        "content": "<p>there are other tactics like <code>refine_struct</code> where this is kind of the point</p>",
        "id": 197448753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589391356
    },
    {
        "content": "<p>It actually makes it quite difficult to use interactively when Lean is trying to prove things about your incomplete definition, I found</p>",
        "id": 197448755,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391357
    },
    {
        "content": "<p>I guess we want both options (-;</p>",
        "id": 197448877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589391399
    },
    {
        "content": "<p>for example, Lean won't just tell you it can't infer something because what if it somehow magically gets fixed by a proof obligation involving <code>tidy</code></p>",
        "id": 197448894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391408
    },
    {
        "content": "<p>I can't remember exactly how this comes up, but I remember being very frustrated by those <code>. obviously</code> annotations</p>",
        "id": 197448985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391448
    },
    {
        "content": "<p>to the point where it was easier to just add the missing fields in by hand to get Lean to stop doing annoying things</p>",
        "id": 197449018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391479
    },
    {
        "content": "<p>I wonder how much stuff would actually break, though.</p>",
        "id": 197449077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391495
    },
    {
        "content": "<p>I can definitely see the issue; if you write <code>{ x := _ }</code> and there is an autoparam on <code>p := by tidy</code> you won't get any message saying what <code>x</code> should be</p>",
        "id": 197449117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589391519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> You don't want to change the behaviour of structures in general, right? Only <code>. obviously</code>?</p>",
        "id": 197449192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589391561
    },
    {
        "content": "<p>So maybe that should wrap in <code>prove_goal_async</code>?</p>",
        "id": 197449230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589391586
    },
    {
        "content": "<p>I confirm that <code>prove_goal_async</code> works as advertised regarding goals with metavariables (which is also apparent from the source):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">tidy&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">prove_goal_async</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">tidy</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_thing</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- don&#39;t know how to synthesize placeholder</span>\n  <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy&#39;</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197449288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391604
    },
    {
        "content": "<p>then an added bonus is you can replace <code>prove_goal_async</code> by <code>def prove_goal_async' : tactic unit -&gt; tactic unit := pure ()</code> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 197449408,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391680
    },
    {
        "content": "<p>Er maybe use sorry or something I meant</p>",
        "id": 197449581,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589391757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197441984\">said</a>:</p>\n<blockquote>\n<p>There was some not-so-serious talk at Lean Together about buying one of these things with grant money and setting up a fast compile server.</p>\n</blockquote>\n<p>So is this funding-constrained or sysadmin-constrained or both?</p>",
        "id": 197461933,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589397173
    },
    {
        "content": "<p>I think sysadmin-constrained</p>",
        "id": 197462057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589397239
    },
    {
        "content": "<p>Results of my parallel compilation 'experiment':</p>\n<div class=\"codehilite\"><pre><span></span><code>#threads | time    | speedup\n1        | 2:32:15 | 1\n8        |   31:54 | 4.77\n16       |   25:57 | 5.87\n</code></pre></div>\n\n\n<p>Commands used to produce these number:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cd &lt;mathlib dir&gt;\n$ rm **.olean\n$ time leanpkg build -- --threads=&lt;N&gt; --memory=16000\n</code></pre></div>\n\n\n<p>Processor: Ryzen 7 3700X (8 cores, 16 threads)</p>\n<p>There may be some noise because I was using the computer during those runs (and also I didn't do multiple runs or anything, so major grain of salt).</p>",
        "id": 197474875,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589402506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197461933\">said</a>:</p>\n<blockquote>\n<p>So is this funding-constrained or sysadmin-constrained or both?</p>\n</blockquote>\n<p>It's clearly sysadmin-constrained, so we didn't even look into the funding details.</p>",
        "id": 197484546,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589408473
    },
    {
        "content": "<p>seems like the sort of thing where you might be able to turn funding into a sysadmin</p>",
        "id": 197484948,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589408745
    },
    {
        "content": "<p>One fast processor could be within a grant budget. It's one trip to one conference, no big deal. Hiring personnel is another story.</p>",
        "id": 197485195,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589408887
    },
    {
        "content": "<p>If you know a sysadmin who will work for pennies, then maybe we could talk!</p>",
        "id": 197485227,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589408918
    },
    {
        "content": "<p>But tomorrow, it's bedtime.</p>",
        "id": 197485241,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589408931
    },
    {
        "content": "<p>(I have in fact pinged a few underemployed sysadmin folks, I'll come back here if I get any bites)</p>",
        "id": 197485332,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589409000
    },
    {
        "content": "<p>Do we really need a professional sysadmin to set up a Github Actions runner? I just looked into it and it doesn't seem very complicated at all. If we rent one or two virtual servers (~50Eur/month for 16 virtual cores), I can probably set up the OS and Github runner application myself.</p>\n<p>The only snag is that Github doesn't recommend using self-hosted runners with public repos. Apparently you can execute arbitrary code by creating a PR, which is not so great.</p>",
        "id": 197488791,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589411492
    },
    {
        "content": "<p>it's like any maintenance job. You are not needed at all for several months, and then oh god everything is broken and it needs to be fixed now and no one knows how anything works</p>",
        "id": 197488939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411578
    },
    {
        "content": "<p>if you're volunteering to be the sysadmin that works for pennies, I'm sure people here appreciate the work</p>",
        "id": 197489347,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411855
    },
    {
        "content": "<p>I don't understand half of the things you said, so I certainly couldn't do it</p>",
        "id": 197489362,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411877
    },
    {
        "content": "<p>I don't know where on the spectrum of skill you draw the line of \"professional sysadmin\"</p>",
        "id": 197489423,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411894
    },
    {
        "content": "<p>many (most?) of us here are \"professional mathematicians\" who choose do a bunch of mathematical work for free</p>",
        "id": 197489439,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411909
    },
    {
        "content": "<p>Okay, if someone gets me some money to rent a suitable virtual server, I can set up a Github runner on it. I can also maintain it for the time being; I still have 3.5 years left on my PhD. I've run my own private virtual server for a couple of years (with a way more complex configuration) and it's really not much work for pretty decent uptime. Besides, should the server ever be down for long, Github should just fall back to its own runners.</p>",
        "id": 197496325,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589417733
    },
    {
        "content": "<p>However, see my message above for security concerns. These apply to any third-party Github runner, regardless of whether that runner is a virtual server or a physical box. One solution would be to restrict PR creation to people who have commit-to-non-master-branch rights (if Github allows this). This would at least prevent complete strangers from hijacking the runner.</p>",
        "id": 197497497,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589418860
    },
    {
        "content": "<p>For reference, the machine running the <a href=\"#narrow/stream/113538-travis/topic/build.20time.20bot\"><code>build-time-bot</code></a> stream is an 18 core 2.3GHz Xeon W. The build-time-bot runs with <code>-j1</code> for reproducibility.</p>",
        "id": 197497520,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589418891
    },
    {
        "content": "<p>Compiling mathlib on this machine never maxs out the processors. The highest I see watching <code>top</code> is about 1500%. (Which sounds close to maxing out, but with hyperthreading we need to get to 3600% to count as maxing out?)</p>",
        "id": 197497722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419145
    },
    {
        "content": "<p>As far as I can see, nothing changed in how <code>build-time-bot</code> works during the gap that it wasn't running.</p>",
        "id": 197497728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419168
    },
    {
        "content": "<p>During that gap, the build times appear to have jumped from 86m21.607s to 234m12.034s, which seems pretty worrying.</p>",
        "id": 197497800,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419273
    },
    {
        "content": "<p>How long a gap was that?</p>",
        "id": 197497806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589419289
    },
    {
        "content": "<p>January 23, commit 96ee2a6979b5bd20bee9de497d77fcd7f562ed4f</p>",
        "id": 197497822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419320
    },
    {
        "content": "<p>to</p>",
        "id": 197497824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419321
    },
    {
        "content": "<p>also, is this data recorded somewhere other than in a zulip stream, possibly with graphs?</p>",
        "id": 197497862,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589419324
    },
    {
        "content": "<p>April 8, commit 732f7109c5cb2ece35481c200faa38fbbb4dc995</p>",
        "id": 197497865,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419333
    },
    {
        "content": "<p>Sorry!</p>",
        "id": 197497867,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419337
    },
    {
        "content": "<p>My script ends with <code>zulip-send ...</code></p>",
        "id": 197497894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419394
    },
    {
        "content": "<p>(I stopped working on this shortly after getting the bare minimum working, because it seems that day-to-day variation was random enough to not be that helpful identifying bad commits.)</p>",
        "id": 197497970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419465
    },
    {
        "content": "<p>I see</p>",
        "id": 197497976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589419486
    },
    {
        "content": "<p>ok, I'm now keeping a local copy</p>",
        "id": 197498057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197497722\">said</a>:</p>\n<blockquote>\n<p>Compiling mathlib on this machine never maxs out the processors. The highest I see watching <code>top</code> is about 1500%. (Which sounds close to maxing out, but with hyperthreading we need to get to 3600% to count as maxing out?)</p>\n</blockquote>\n<p>Afaiu, these numbers are pretty meaningless in the first place because you can 'max out' a system by busy-waiting on a lock or queue. For my 8- and 16-core load, I get perfect 8x and 16x system load, but not nearly the same speedup.</p>",
        "id": 197498122,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589419705
    },
    {
        "content": "<p>The log files are all <a href=\"https://tqft.net/lean/mathlib/\">here</a>, but they're not terribly useful due to the bugs in Lean's profiling output. I was going to suggest pulling the numbers from the HTML of the Zulip archive of the build-time-bot thread, but we're not archiving the travis stream.</p>",
        "id": 197498126,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589419713
    },
    {
        "content": "<p>Interesting, <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>.  I definitely don't get full load. For quite a while at the beginning of building mathlib it sits at about 600%, and then in the later half of building it slowly decays as well.</p>",
        "id": 197498154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419800
    },
    {
        "content": "<p>This had made me think that the numbers were pretty good, and were actually reflecting the width of the import graph.</p>",
        "id": 197498200,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589419819
    },
    {
        "content": "<p>it's okay, I can write a zulip bot to consume the output of Scott's zulip bot</p>",
        "id": 197498277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589419927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197498154\">said</a>:</p>\n<blockquote>\n<p>Interesting, <span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span>.  I definitely don't get full load. For quite a while at the beginning of building mathlib it sits at about 600%, and then in the later half of building it slowly decays as well.</p>\n</blockquote>\n<p>That seems broadly consistent with the numbers <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197474875\">here</a>.</p>",
        "id": 197498617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589420459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Can you retrospectively bisect the jump? Was it a gradual increase, or some commit multiplied the build time by a factor of 2?</p>",
        "id": 197502245,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589425829
    },
    {
        "content": "<p>I was thinking about that... I only used <code>git bisect</code> a few times, and it scares me attempting to run it with a multi-hour test!</p>",
        "id": 197502261,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589425868
    },
    {
        "content": "<p>But I can try by hand.</p>",
        "id": 197502265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589425872
    },
    {
        "content": "<p>If you don't want to run <code>git bisect</code>, you can just emulate weekly builds.</p>",
        "id": 197502312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589425926
    },
    {
        "content": "<p>Or daily</p>",
        "id": 197502315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589425929
    },
    {
        "content": "<p>Using <code>git checkout master@{2020-03-30}</code></p>",
        "id": 197502342,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589426037
    },
    {
        "content": "<p>If you can add unix users to this server, you can add a user for me, and I'll run the script.</p>",
        "id": 197502815,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589426673
    },
    {
        "content": "<p>I don't have a good VPS (i.e., with reasonably good CPU&amp;RAM) at hand right now because UoT doesn't issue unix accounts to post-docs.</p>",
        "id": 197502893,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589426780
    },
    {
        "content": "<p>Unfortunately that machine is not easily internet accessible via ssh.</p>",
        "id": 197502991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589426965
    },
    {
        "content": "<p>Hmm, the <code>master@{2020-03-30}</code> trick doesn't work with a fresh clone, making it hard to use in my script.</p>",
        "id": 197503373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589427579
    },
    {
        "content": "<p>What is the command line &amp; the error message?</p>",
        "id": 197503420,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589427649
    },
    {
        "content": "<p><code>warning: Log for 'master' only goes back to Thu, 14 May 2020 13:38:49 +1000.</code></p>",
        "id": 197503474,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589427757
    },
    {
        "content": "<p>How do you <code>git clone</code>?</p>",
        "id": 197503495,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589427799
    },
    {
        "content": "<p>Probably you have something like <code>--depth</code>.</p>",
        "id": 197503502,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589427823
    },
    {
        "content": "<p>Just <code>git clone https://github.com/leanprover-community/mathlib.git</code></p>",
        "id": 197503552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589427863
    },
    {
        "content": "<p>Try <code>git fetch --unshallow</code></p>",
        "id": 197503564,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589427897
    },
    {
        "content": "<p>Probably something in <code>git config</code> makes <code>git clone</code> create shallow clones by default.</p>",
        "id": 197503602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589427954
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">git</span> <span class=\"n\">fetch</span> <span class=\"c1\">--unshallow</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"c1\">--unshallow on a complete repository does not make sense</span>\n</code></pre></div>",
        "id": 197503646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589427972
    },
    {
        "content": "<p>I don't think that's the issue. See <a href=\"https://stackoverflow.com/questions/34799426/git-log-for-master-only-goes-back-to-date-bug\">https://stackoverflow.com/questions/34799426/git-log-for-master-only-goes-back-to-date-bug</a></p>",
        "id": 197503650,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589427979
    },
    {
        "content": "<p>Ah, I'm sorry.</p>",
        "id": 197503663,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589428024
    },
    {
        "content": "<p>Another answer suggests <code>git checkout </code>git rev-list -1 --before=\"Jan 17 2014\" master`</p>",
        "id": 197503739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589428129
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> git checkout <span class=\"sb\">`</span>git rev-list -1 --before<span class=\"o\">=</span><span class=\"s2\">&quot;2020-01-30&quot;</span> master<span class=\"sb\">`</span>\n</code></pre></div>\n\n\n<p>works for me</p>",
        "id": 197503762,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589428187
    },
    {
        "content": "<p>Ok, I think I've got something working. We should start seeing some messages on the build-time-bot stream about commits in that missing period.</p>",
        "id": 197503879,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589428342
    },
    {
        "content": "<p>I can't find this stream.</p>",
        "id": 197505281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589430593
    },
    {
        "content": "<p>Does <a href=\"#narrow/stream/113538-travis/topic/build.20time.20bot\">this link</a> work?</p>",
        "id": 197505377,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589430713
    },
    {
        "content": "<p>Yes, I was looking for stream name. It's a bit weird to have stream <code>travis</code> with valuable information when we don't use travis anymore.</p>",
        "id": 197505565,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589430980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could you please rename the stream to \"Continuous integration\", or simply \"CI\"?</p>",
        "id": 197505828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589431548
    },
    {
        "content": "<p>Will build-bot still work after rename?</p>",
        "id": 197505892,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589431579
    },
    {
        "content": "<p>Oooh, good question</p>",
        "id": 197505897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589431594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197503879\">said</a>:</p>\n<blockquote>\n<p>Ok, I think I've got something working. We should start seeing some messages on the build-time-bot stream about commits in that missing period.</p>\n</blockquote>\n<p>It's maybe worth checking in particular the commits where we bump Lean's version, since these are the most likely to change something in the whole building process.</p>",
        "id": 197520321,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589442850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197437373\">said</a>:</p>\n<blockquote>\n<p>per declarations:</p>\n<div class=\"codehilite\"><pre><span></span><code>38.0 src/number_theory/sum_four_squares.lean\n27.8 src/topology/metric_space/completion.lean\n26.2 src/topology/category/Top/adjunctions.lean\n26.15 src/algebra/category/Group/biproducts.lean\n23.0 src/category_theory/products/basic.lean\n22.666666666666668 src/data/padics/hensel.lean\n22.2 src/category_theory/limits/shapes/constructions/limits_of_products_and_equalizers.lean\n22.1 src/analysis/normed_space/hahn_banach.lean\n16.7 src/topology/category/TopCommRing.lean\n16.54 src/category_theory/elements.lean\n15.7 src/measure_theory/simple_func_dense.lean\n14.95 src/category_theory/limits/functor_category.lean\n14.9 src/category_theory/monad/algebra.lean\n14.75 src/data/zsqrtd/basic.lean\n12.971428571428572 src/data/matrix/notation.lean\n12.725 src/analysis/calculus/extend_deriv.lean\n12.4 src/category_theory/limits/over.lean\n12.363636363636363 src/geometry/manifold/basic_smooth_bundle.lean\n11.95 src/analysis/complex/polynomial.lean\n11.7 src/analysis/complex/basic.lean\n</code></pre></div>\n\n\n<p>(<a href=\"https://gist.github.com/kckennylau/41242df750190f48ce206d43a615e7e7\">full data</a>)</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>elaboration: tactic execution took 107s\nnum. allocated objects:  31\nnum. allocated closures: 39\n107093ms   100.0%   tactic.step\n107093ms   100.0%   scope_trace\n107093ms   100.0%   _interaction\n107093ms   100.0%   tactic.istep._lambda_1\n107093ms   100.0%   tactic.istep\n107093ms   100.0%   tactic.seq\n107005ms    99.9%   tactic.to_expr\n106830ms    99.8%   tactic.interactive.exact\n106830ms    99.8%   _private.4130977991.all_goals_core._main._lambda_2\n106830ms    99.8%   interaction_monad.monad._lambda_9\n106830ms    99.8%   all_goals_core\n106830ms    99.8%   tactic.all_goals\n  263ms     0.2%   tactic.interactive.haveI\n  263ms     0.2%   _interaction._lambda_2\n  263ms     0.2%   tactic.interactive.have._lambda_1\n   88ms     0.1%   tactic.exact\nelaboration of prime_sum_four_squares took 130s\n</code></pre></div>",
        "id": 197533436,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589451361
    },
    {
        "content": "<p><code>prime_sum_four_squares</code> used <code>ring</code> 8 times...</p>",
        "id": 197534494,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589451946
    },
    {
        "content": "<p>According to your profiling output, no time is spent inside <code>ring</code>.</p>",
        "id": 197534654,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589452052
    },
    {
        "content": "<p>that's the result of <code>lean --profile</code></p>",
        "id": 197534717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589452091
    },
    {
        "content": "<p>I'm afraid if I even add one byte to the file I'll get deterministic timeout</p>",
        "id": 197534728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589452108
    },
    {
        "content": "<p>the point is, I don't know which profile result corresponds to which one</p>",
        "id": 197534743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589452126
    },
    {
        "content": "<p>I'm just saying, it looks like all of the time is spent on term mode elaboration, not on ring.</p>",
        "id": 197534759,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589452138
    },
    {
        "content": "<p>I'm saying, this can't be the corresponding profiling result, because there is no <code>ring</code> there</p>",
        "id": 197534780,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589452161
    },
    {
        "content": "<p>How to hide tactic runtime for beginners: use <code>by exact (by ring)</code> instead of <code>by ring</code>.  Then it shows up as <code>to_expr</code> instead of <code>ring</code>.</p>",
        "id": 197535148,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589452401
    },
    {
        "content": "<p>ok so it might still be because of the <code>ring</code></p>",
        "id": 197535246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589452464
    },
    {
        "content": "<p>this line:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"n\">hm0</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n</code></pre></div>\n\n\n<p>hid everything</p>",
        "id": 197535255,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589452476
    },
    {
        "content": "<p>You guys should stop writing such obfuscated term mode proofs... why not simply write <code>begin haveI ... end</code>?</p>",
        "id": 197535842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589452924
    },
    {
        "content": "<p>Then your tools will work better :-)</p>",
        "id": 197544481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589458954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197485227\">said</a>:</p>\n<blockquote>\n<p>If you know a sysadmin who will work for pennies, then maybe we could talk!</p>\n</blockquote>\n<p>Well, here I am :-)</p>",
        "id": 197554716,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589463462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197489423\">said</a>:</p>\n<blockquote>\n<p>I don't know where on the spectrum of skill you draw the line of \"professional sysadmin\"</p>\n</blockquote>\n<p>mathlib's Lean project is thankfully not a usual software company project, also, we could benefit from help from other communities which also do \"reproducibility stuff\" like Nix/NixOS and by extension the NLnet/NGI Zero foundations: <a href=\"https://www.ngi.eu/ngi-projects/ngi-zero/\">https://www.ngi.eu/ngi-projects/ngi-zero/</a></p>",
        "id": 197555104,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589463623
    },
    {
        "content": "<p>cool! Basically all of our communities' software problems should be already solved in other contexts, learning from such solutions is great</p>",
        "id": 197555314,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589463711
    },
    {
        "content": "<p>[Quoting…]<br>\nThat's a good idea. Maybe tomorrow I will look up these commits, but if someone wants to provide me a list that would be great.</p>",
        "id": 197558739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589465189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Voila:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">git log --oneline -- leanpkg.toml</span>\n<span class=\"go\">81f97bdf chore(*): move to lean-3.11.0 (#2632)</span>\n<span class=\"go\">a223bbb6 chore(*): switch to lean 3.10.0 (#2587)</span>\n<span class=\"go\">99245b33 chore(*): switch to lean 3.9.0 (#2449)</span>\n<span class=\"go\">597704ac chore(*): switch to lean 3.8.0 (#2361)</span>\n<span class=\"go\">bc84a205 chore(leanpkg.toml): Lean 3.7.2c (#2203)</span>\n<span class=\"go\">e719f8ee chore(*): switch to lean 3.7.1c (#2106)</span>\n<span class=\"go\">78ffbae0 chore(*): switch to lean 3.6.1 (#2064)</span>\n<span class=\"go\">6845aaa6 chore(*): bump Lean version to 3.5.1c (#1958)</span>\n<span class=\"go\">c1e594bc feat(meta, logic, tactic): lean 3.4.2: migrate coinductive_predicates, transfer, relator (#610)</span>\n<span class=\"go\">78f19497 refactor(*): move everything into `src` (#583)</span>\n<span class=\"go\">bcec475a chore(leanpkg.toml): update version to 3.4.1</span>\n<span class=\"go\">78d28c5c fix(*): update to lean</span>\n<span class=\"go\">03d5bd97 fix(*): update to lean</span>\n<span class=\"go\">22e671c5 fix(travis.yml): fix travis setup for new nightlies</span>\n<span class=\"go\">81264ec7 fix(leanpkg.toml): remove lean_version</span>\n<span class=\"go\">c87f1e6e fix(*): finish lean update</span>\n<span class=\"go\">5717986f fix(*): update to lean</span>\n<span class=\"go\">4320c417 chore(*): rename stdlib to mathlib</span>\n<span class=\"go\">deb16814 refactor(*): import content from lean/library/data and library_dev</span>\n</code></pre></div>",
        "id": 197561003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589465594
    },
    {
        "content": "<p>May I please draw your attention to: <br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/2685#issuecomment-629088455\">https://github.com/leanprover-community/mathlib/pull/2685#issuecomment-629088455</a><br>\ncc: <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 197658511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589529692
    },
    {
        "content": "<p>Kudos to Mario! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"top hat\" class=\"emoji emoji-1f3a9\" role=\"img\" title=\"top hat\">:top_hat:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"cake\" class=\"emoji emoji-1f370\" role=\"img\" title=\"cake\">:cake:</span></p>",
        "id": 197658546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589529720
    },
    {
        "content": "<p>I don't understand what your link has to do with this topic and what Mario has to do with your link</p>",
        "id": 197658710,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589529818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Oops, fixed. Sorry.</p>",
        "id": 197659004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589529978
    },
    {
        "content": "<p>indeed there are ways to solve this issue without removing <code>by tidy</code> from the category theory library</p>",
        "id": 197659188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589530089
    },
    {
        "content": "<p>my solutions only dealt with the surface of the problem</p>",
        "id": 197659202,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589530104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197497800\">said</a>:</p>\n<blockquote>\n<p>During that gap, the build times appear to have jumped from 86m21.607s to 234m12.034s, which seems pretty worrying.</p>\n</blockquote>\n<p>Did we ever confirm whether the build time really tripled over those 3 months?</p>",
        "id": 197670785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589537110
    },
    {
        "content": "<p>I can try building on a decent machine too.</p>",
        "id": 197670792,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589537120
    },
    {
        "content": "<p>Maybe you can build both commits 3 times?</p>",
        "id": 197670835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537150
    },
    {
        "content": "<p>Well I was going to start with once, but okay</p>",
        "id": 197670847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589537160
    },
    {
        "content": "<p>With -j6 if you have 8 cores</p>",
        "id": 197670848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537160
    },
    {
        "content": "<p>Why 6?</p>",
        "id": 197670894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589537167
    },
    {
        "content": "<p>So that your other process move to the other threads, and hopefully don't influence the timing too much?</p>",
        "id": 197670920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537187
    },
    {
        "content": "<p>I just wanted to figure out first whether the change was real or caused by some other undiagnosed change</p>",
        "id": 197670922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589537188
    },
    {
        "content": "<p>Oh, well, I was going to do it on a cloud VM</p>",
        "id": 197670945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589537207
    },
    {
        "content": "<p>But it should be reliable enough to test for a 3x difference</p>",
        "id": 197670960,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589537222
    },
    {
        "content": "<p>It seems the build times did triple over those three months.</p>",
        "id": 197676234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589541136
    },
    {
        "content": "<p>I've been building a random sample of intermediate commits, and so far it looks like a fairly steady increase. I haven't pinned down any big jumps.</p>",
        "id": 197676260,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589541169
    },
    {
        "content": "<p>If I type <code>import analyis.complex.polynomial</code> and wait for the yellow bars to disappear, then it takes 3 seconds on lean 3.4.2, and 22 seconds on lean 3.11.0 with a full set of oleans. Lean seems to have got slower, I doubt it's mathlib getting slower that fast.</p>",
        "id": 197685649,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589547230
    },
    {
        "content": "<p>How much did the file change?</p>",
        "id": 197685964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589547382
    },
    {
        "content": "<p>Hard to tell. The file has a lot of dependencies, which may have changed.</p>",
        "id": 197686009,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589547415
    },
    {
        "content": "<p>Before, Lean used to check the file dates to see if it needed to recompile something. Now, it has to compute the md5 of all the files. Could that make up for the difference?</p>",
        "id": 197686045,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589547437
    },
    {
        "content": "<p>What Lean version was that change?</p>",
        "id": 197686177,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589547510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197686045\">said</a>:</p>\n<blockquote>\n<p>Before, Lean used to check the file dates to see if it needed to recompile something. Now, it has to compute the md5 of all the files. Could that make up for the difference?</p>\n</blockquote>\n<p>Then this kind of difference should disappear on very fast disks I suppose (SSD/NVMe), right?</p>",
        "id": 197686193,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589547527
    },
    {
        "content": "<p>Here are my timings, btw</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">cat</span> <span class=\"n\">jan23</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">apr8</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">.</span><span class=\"n\">log</span>\n<span class=\"n\">configuring</span> <span class=\"n\">mathlib</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">lean</span> <span class=\"c1\">--make src</span>\n<span class=\"mi\">25449</span><span class=\"bp\">.</span><span class=\"mi\">26</span><span class=\"n\">user</span> <span class=\"mi\">63</span><span class=\"bp\">.</span><span class=\"mi\">32</span><span class=\"n\">system</span> <span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">20</span><span class=\"n\">elapsed</span> <span class=\"mi\">1754</span><span class=\"err\">%</span><span class=\"n\">CPU</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">avgtext</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"n\">avgdata</span> <span class=\"mi\">8817328</span><span class=\"n\">maxresident</span><span class=\"o\">)</span><span class=\"n\">k</span>\n<span class=\"mi\">3240</span><span class=\"n\">inputs</span><span class=\"bp\">+</span><span class=\"mi\">140592</span><span class=\"n\">outputs</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"n\">major</span><span class=\"bp\">+</span><span class=\"mi\">8338993</span><span class=\"n\">minor</span><span class=\"o\">)</span><span class=\"n\">pagefaults</span> <span class=\"mi\">0</span><span class=\"n\">swaps</span>\n<span class=\"n\">configuring</span> <span class=\"n\">mathlib</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">lean</span> <span class=\"c1\">--make src</span>\n<span class=\"mi\">33719</span><span class=\"bp\">.</span><span class=\"mi\">78</span><span class=\"n\">user</span> <span class=\"mi\">55</span><span class=\"bp\">.</span><span class=\"mi\">97</span><span class=\"n\">system</span> <span class=\"mi\">43</span><span class=\"o\">:</span><span class=\"mi\">36</span><span class=\"bp\">.</span><span class=\"mi\">39</span><span class=\"n\">elapsed</span> <span class=\"mi\">1290</span><span class=\"err\">%</span><span class=\"n\">CPU</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">avgtext</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"n\">avgdata</span> <span class=\"mi\">10324836</span><span class=\"n\">maxresident</span><span class=\"o\">)</span><span class=\"n\">k</span>\n<span class=\"mi\">0</span><span class=\"n\">inputs</span><span class=\"bp\">+</span><span class=\"mi\">160088</span><span class=\"n\">outputs</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">major</span><span class=\"bp\">+</span><span class=\"mi\">3256318</span><span class=\"n\">minor</span><span class=\"o\">)</span><span class=\"n\">pagefaults</span> <span class=\"mi\">0</span><span class=\"n\">swaps</span>\n</code></pre></div>",
        "id": 197686215,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589547542
    },
    {
        "content": "<p>lean-3.5.1 is fifteen seconds, so the jump seems to have been from 3.4 to 3.5</p>",
        "id": 197686287,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589547588
    },
    {
        "content": "<p>This is on a VM that claims to have 32 \"processors\"</p>",
        "id": 197686365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589547610
    },
    {
        "content": "<p>and running without any <code>-j</code> flag. The total work did not increase that much: certainly not by 3x...</p>",
        "id": 197686464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589547664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197686365\">said</a>:</p>\n<blockquote>\n<p>This is on a VM that claims to have 32 \"processors\"</p>\n</blockquote>\n<p>cat /proc/cpuinfo ?</p>",
        "id": 197686474,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589547671
    },
    {
        "content": "<p>Yes, (do you really want the whole thing?)</p>",
        "id": 197686514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589547680
    },
    {
        "content": "<p>It's 32 approximate copies of</p>\n<div class=\"codehilite\"><pre><span></span><code>processor       : 31\nvendor_id       : AuthenticAMD\ncpu family      : 23\nmodel           : 1\nmodel name      : AMD EPYC 7401P 24-Core Processor\nstepping        : 2\nmicrocode       : 0x1000065\ncpu MHz         : 1996.248\ncache size      : 512 KB\nphysical id     : 31\nsiblings        : 1\ncore id         : 0\ncpu cores       : 1\napicid          : 31\ninitial apicid  : 31\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 13\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm rep_good nopl cpuid extd_apicid tsc_known_freq pni pclmulqdq ssse3 fma cx16 sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy svm cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw topoext perfctr_core ssbd ibpb vmmcall fsgsbase tsc_adjust bmi1 avx2 smep bmi2 rdseed adx smap clflushopt sha_ni xsaveopt xsavec xgetbv1 virt_ssbd arat npt nrip_save arch_capabilities\nbugs            : fxsave_leak sysret_ss_attrs null_seg spectre_v1 spectre_v2 spec_store_bypass\nbogomips        : 3992.49\nTLB size        : 1024 4K pages\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 40 bits physical, 48 bits virtual\npower management:\n</code></pre></div>",
        "id": 197686546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589547696
    },
    {
        "content": "<p>Just the non-repetitive part</p>",
        "id": 197686553,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589547698
    },
    {
        "content": "<p>but, obviously an \"AMD EPYC 7401P 24-Core Processor\" has more than one core per cpu, so some of the numbers must be lies</p>",
        "id": 197686670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589547740
    },
    {
        "content": "<p>And this is a virtualized machine?</p>",
        "id": 197686696,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589547754
    },
    {
        "content": "<p>Yep</p>",
        "id": 197686702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589547758
    },
    {
        "content": "<p>So, how probable is it that you actually get some CPU shares stolen from noisy neighbors?</p>",
        "id": 197686759,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589547791
    },
    {
        "content": "<p>I could try building the same commits again to estimate the variance.</p>",
        "id": 197686763,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589547793
    },
    {
        "content": "<p>No idea</p>",
        "id": 197686771,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589547799
    },
    {
        "content": "<p>Also, kind of surprising to have 32 × 24 exposed in a VM :'D, I'm not sure the OS is able to use them properly, except if it's well configured (NUMA stuff, etc. I suppose)</p>",
        "id": 197686950,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589547867
    },
    {
        "content": "<p>No, it's not 32 cpus.</p>",
        "id": 197687503,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589548112
    },
    {
        "content": "<p>It's 32 cores?</p>",
        "id": 197687525,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589548123
    },
    {
        "content": "<p>Weird</p>",
        "id": 197687533,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589548126
    },
    {
        "content": "<p>I assume I get some subset of 32 cores from some physical machine that has a total of 24*N cores for some N.</p>",
        "id": 197687558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589548139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I have no idea how much a compile costs... but it might be interesting to rebuild those two commits, to get an idea of the variance.</p>",
        "id": 197688316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589548479
    },
    {
        "content": "<p>Are we talking about $0.05 or $5.00?</p>",
        "id": 197688349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589548498
    },
    {
        "content": "<p>Around $0.20 I guess, I don't mind doing more builds.</p>",
        "id": 197688518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589548562
    },
    {
        "content": "<p>If I had that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>24</mn><mo>×</mo><mn>36</mn></mrow><annotation encoding=\"application/x-tex\">24 \\times 36</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span></span></span></span> core server, though... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 197688567,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589548579
    },
    {
        "content": "<p><a href=\"https://www.packet.com/cloud/servers/c2-medium-epyc/\">https://www.packet.com/cloud/servers/c2-medium-epyc/</a><br>\nThe EPYC is there, with spot pricing $0.50 per hour, so… depends on the mathlib's times!</p>",
        "id": 197688640,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589548622
    },
    {
        "content": "<p>I'm surprised... it seems that the Apr8 build takes about as long in the cloud as on my ancient box</p>",
        "id": 197688648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589548628
    },
    {
        "content": "<p>But I don't know anything about hardware</p>",
        "id": 197688665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589548635
    },
    {
        "content": "<p>if you feel ambitious: <a href=\"http://stanford.edu/~sadjad/gg-paper.pdf\">http://stanford.edu/~sadjad/gg-paper.pdf</a></p>",
        "id": 197688675,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1589548639
    },
    {
        "content": "<p>How does</p>\n<div class=\"codehilite\"><pre><span></span><code>processor       : 15\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 26\nmodel name      : Intel(R) Xeon(R) CPU           E5540  @ 2.53GHz\nstepping        : 5\nmicrocode       : 0x1d\ncpu MHz         : 2043.367\ncache size      : 8192 KB\nphysical id     : 1\nsiblings        : 8\ncore id         : 3\ncpu cores       : 4\napicid          : 23\ninitial apicid  : 23\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 11\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt lahf_lm pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid dtherm ida flush_l1d\nbugs            : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit\nbogomips        : 5066.73\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 40 bits physical, 48 bits virtual\npower management:\n</code></pre></div>\n\n\n<p>look?</p>",
        "id": 197688714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589548666
    },
    {
        "content": "<p>Is that reasonable stuff, or as ancient as I think it is?</p>",
        "id": 197688727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589548677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197688675\">said</a>:</p>\n<blockquote>\n<p>if you feel ambitious: <a href=\"http://stanford.edu/~sadjad/gg-paper.pdf\">http://stanford.edu/~sadjad/gg-paper.pdf</a></p>\n</blockquote>\n<p>Wow, I didn't know that was actually feasible to get really cheap stuff on AWS Lambda, my customers get insane bills for stupid workloads so I advise them to move back to 8/16-cores servers</p>",
        "id": 197688902,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589548769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197688727\">said</a>:</p>\n<blockquote>\n<p>Is that reasonable stuff, or as ancient as I think it is?</p>\n</blockquote>\n<p>It's 2009 stuff I believe, it's not that bad, it's just old compared to EPYC 7501P which is 2017</p>",
        "id": 197689093,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589548856
    },
    {
        "content": "<p>But I still build mathlib in 50 minutes: w00t!</p>",
        "id": 197689127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589548878
    },
    {
        "content": "<p>But it could be we're not using well the newest hardware too :-)</p>",
        "id": 197689136,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589548885
    },
    {
        "content": "<p>Or we won't benefit from newer hardware which could be also a conclusion</p>",
        "id": 197689152,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589548893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197689127\">said</a>:</p>\n<blockquote>\n<p>But I still build mathlib in 50 minutes: w00t!</p>\n</blockquote>\n<p>Used server hardware is awesome :-)</p>",
        "id": 197689193,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589548919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197688675\">said</a>:</p>\n<blockquote>\n<p>if you feel ambitious: <a href=\"http://stanford.edu/~sadjad/gg-paper.pdf\">http://stanford.edu/~sadjad/gg-paper.pdf</a></p>\n</blockquote>\n<p>Wow, this looks super neat (and knowing Keith Winstein, I assume it really is super neat) and probably fairly well-suited to theorem proving, too.</p>",
        "id": 197689736,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589549174
    },
    {
        "content": "<p>here's the latest master, for comparison</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">time</span> <span class=\"n\">leanpkg</span> <span class=\"n\">build</span> <span class=\"mi\">2</span><span class=\"bp\">&gt;&amp;</span><span class=\"mi\">1</span> <span class=\"bp\">|</span> <span class=\"n\">tee</span> <span class=\"n\">build</span><span class=\"bp\">.</span><span class=\"n\">log</span>\n<span class=\"n\">configuring</span> <span class=\"n\">mathlib</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">lean</span> <span class=\"c1\">--make src</span>\n<span class=\"mi\">41010</span><span class=\"bp\">.</span><span class=\"mi\">11</span><span class=\"n\">user</span> <span class=\"mi\">69</span><span class=\"bp\">.</span><span class=\"mi\">07</span><span class=\"n\">system</span> <span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">51</span><span class=\"n\">elapsed</span> <span class=\"mi\">1618</span><span class=\"err\">%</span><span class=\"n\">CPU</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">avgtext</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"n\">avgdata</span> <span class=\"mi\">12982540</span><span class=\"n\">maxresident</span><span class=\"o\">)</span><span class=\"n\">k</span>\n<span class=\"mi\">29432</span><span class=\"n\">inputs</span><span class=\"bp\">+</span><span class=\"mi\">169064</span><span class=\"n\">outputs</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">major</span><span class=\"bp\">+</span><span class=\"mi\">4857077</span><span class=\"n\">minor</span><span class=\"o\">)</span><span class=\"n\">pagefaults</span> <span class=\"mi\">0</span><span class=\"n\">swaps</span>\n</code></pre></div>",
        "id": 197690867,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589549685
    },
    {
        "content": "<p>I'll start another round of builds now</p>",
        "id": 197690976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589549718
    },
    {
        "content": "<p>Yeah, implementing that paper for a another project I contribute to has been on my TODO list for quite awhile. It takes ~5 hours to build and run all the integration tests, and I'm in love with the idea that maybe I could run it in 5 minutes by paying a few dollars. Of course, I never got around to it because adding a new build system to a project big enough to take 5 hours to build and test... one does not simply walk into Mordor.</p>",
        "id": 197692167,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1589550078
    },
    {
        "content": "<p>On a positive note... the witt vector file is now really responsive. And this used to crash and timeout like crazy with <code>lean-3.old</code></p>",
        "id": 197693622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589550652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Could you run my <a href=\"#narrow/stream/113488-general/topic/Self-hosted.20Github.20runner/near/197597106\">benchmark script</a> with a few thread counts (e.g. <code>1 2 4 8 16 32</code>)? That would give us some more comparable data for this particular (virtualised) processor.</p>",
        "id": 197695101,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589551264
    },
    {
        "content": "<p>Hmm, it looks like the 1-core build would take 10+ hours and I usually don't leave this machine on overnight.</p>",
        "id": 197695313,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589551350
    },
    {
        "content": "<p>Fair enough. Any data you can get is good data. I'm particularly interested in 4/8/12/16/20 cores. My own experiments seem to indicate that anything above 8 is a waste of time; it would be very helpful if you could test this hypothesis.</p>",
        "id": 197696787,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589551993
    },
    {
        "content": "<p>Yes, that sounds like a good thing to test.</p>",
        "id": 197697351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589552230
    },
    {
        "content": "<p>Regarding the <code>tidy</code> hate on this thread: I just looked at Scott's latest profiling results.  The total mathlib build time is 322 minutes.  Tidy only takes 14 minutes out of that (4.4%).</p>",
        "id": 197710165,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589557123
    },
    {
        "content": "<p>Here are the results from both sets of my runs. The numbers appear pretty stable, actually.</p>\n<div class=\"codehilite\"><pre><span></span><code>jan23/build.log:configuring mathlib 0.1\njan23/build.log:&gt; lean --make src\njan23/build.log:25449.26user 63.32system 24:14.20elapsed 1754%CPU (0avgtext+0avgdata 8817328maxresident)k\njan23/build.log:3240inputs+140592outputs (8major+8338993minor)pagefaults 0swaps\njan23/build2.log:configuring mathlib 0.1\njan23/build2.log:&gt; lean --make src\njan23/build2.log:25641.07user 55.08system 24:26.19elapsed 1752%CPU (0avgtext+0avgdata 8397940maxresident)k\njan23/build2.log:0inputs+140592outputs (0major+7927068minor)pagefaults 0swaps\napr8/build.log:configuring mathlib 0.1\napr8/build.log:&gt; lean --make src\napr8/build.log:33719.78user 55.97system 43:36.39elapsed 1290%CPU (0avgtext+0avgdata 10324836maxresident)k\napr8/build.log:0inputs+160088outputs (0major+3256318minor)pagefaults 0swaps\napr8/build2.log:configuring mathlib 0.1\napr8/build2.log:&gt; lean --make src\napr8/build2.log:33780.71user 51.32system 43:47.52elapsed 1287%CPU (0avgtext+0avgdata 10402992maxresident)k\napr8/build2.log:0inputs+160064outputs (0major+3603219minor)pagefaults 0swaps\nmaster/build.log:configuring mathlib 0.1\nmaster/build.log:&gt; lean --make src\nmaster/build.log:41010.11user 69.07system 42:17.51elapsed 1618%CPU (0avgtext+0avgdata 12982540maxresident)k\nmaster/build.log:29432inputs+169064outputs (0major+4857077minor)pagefaults 0swaps\nmaster/build2.log:configuring mathlib 0.1\nmaster/build2.log:&gt; lean --make src\nmaster/build2.log:40334.56user 62.32system 42:33.54elapsed 1581%CPU (0avgtext+0avgdata 13151128maxresident)k\nmaster/build2.log:0inputs+169032outputs (0major+4809347minor)pagefaults 0swaps\n</code></pre></div>",
        "id": 197710852,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589557411
    },
    {
        "content": "<p>(All the <code>build</code>s preceded all the <code>build2</code>s, so probably there wasn't some adversarial tenant on the same hardware who did work during just the <code>apr8</code> builds.)</p>",
        "id": 197713144,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589558427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197685649\">said</a>:</p>\n<blockquote>\n<p>If I type <code>import analyis.complex.polynomial</code> and wait for the yellow bars to disappear, then it takes 3 seconds on lean 3.4.2, and 22 seconds on lean 3.11.0 with a full set of oleans. Lean seems to have got slower, I doubt it's mathlib getting slower that fast.</p>\n</blockquote>\n<p>I think I can reproduce this (I'll let you know when 3.11.0 finishes importing the file)</p>",
        "id": 197713915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589558759
    },
    {
        "content": "<p>okay, the difference is not that drastic for me over the versions I have, but still substantial: ~4.5 s / ~8s / ~14.5s for the three versions above</p>",
        "id": 197714050,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589558815
    },
    {
        "content": "<p>I tried using <code>lean --export</code> on a file with just this import as a proxy for the size of the part of mathlib reachable from that module, and it increased by less than 20% over that range.</p>",
        "id": 197714564,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589559057
    },
    {
        "content": "<p>What work does Lean have to do when importing a module? Also, is that work saved when importing the same module twice during the same <code>lean --make</code> session?</p>",
        "id": 197714742,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589559142
    },
    {
        "content": "<p>Mostly typechecking the contents of the olean files, right? I assume that deserializing them and updating the environment is fast?</p>",
        "id": 197714780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589559161
    },
    {
        "content": "<p>Is it possible more dependencies were added to <code>analysis.complex.polynomial</code> between these versions? A rough proxy for this is the number of declarations in the environment. <code>run_cmd do e ← tactic.get_env, tactic.trace $ e.fold 0 $ λ _, nat.succ</code></p>",
        "id": 197715082,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589559330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197714742\">said</a>:</p>\n<blockquote>\n<p>Also, is that work saved when importing the same module twice during the same <code>lean --make</code> session?</p>\n</blockquote>\n<p>Apparently not! My setup:<br>\n<code>tmp.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n</code></pre></div>\n\n\n<p><code>tmp2.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">tmp</span>\n</code></pre></div>\n\n\n<p><code>lean --make tmp.lean</code> takes ~15s. Subsequent <code>lean --make tmp2.lean</code> takes ~15s. Removing oleans and a direct <code>lean --make tmp2.lean</code> takes ~30s!</p>",
        "id": 197715527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589559526
    },
    {
        "content": "<p>In Lean 3.4.2/mathlib jan23 each individual file takes ~4.75s while together they take ~6.75s--not sure what to make of that.</p>",
        "id": 197715845,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589559682
    },
    {
        "content": "<p>Lean 3.7.2/mathlib apr8 is similar: each file takes ~8s with both taking ~12s</p>",
        "id": 197716000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589559752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197715082\">said</a>:</p>\n<blockquote>\n<p><code>run_cmd do e ← tactic.get_env, tactic.trace $ e.fold 0 $ λ _, nat.succ</code></p>\n</blockquote>\n<p>49084 / 52933 / 55112. This is also similar to what I was trying to measure with <code>lean --export</code> (though that one also takes into account the sizes of expressions).</p>",
        "id": 197716448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589559962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197715527\">said</a>:</p>\n<blockquote>\n<p><code>lean --make tmp.lean</code> takes ~15s. Subsequent <code>lean --make tmp2.lean</code> takes ~15s. Removing oleans and a direct <code>lean --make tmp2.lean</code> takes ~30s!</p>\n</blockquote>\n<p>This sounds like something that can be fixed <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> And it might save us some seconds (-;</p>",
        "id": 197716861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589560131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197715082\">said</a>:</p>\n<blockquote>\n<p>Is it possible more dependencies were added to <code>analysis.complex.polynomial</code> between these versions? A rough proxy for this is the number of declarations in the environment. <code>run_cmd do e ← tactic.get_env, tactic.trace $ e.fold 0 $ λ _, nat.succ</code></p>\n</blockquote>\n<p>I did the same test for <code>computability.halting</code> and got 1 second for 3.4.2, 5 seconds for 3.5.1 and 6 seconds for 3.11.0 I don't think this part of the library has changed that much. It doesn't import much apart from the rest of the computability code.</p>",
        "id": 197716872,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589560134
    },
    {
        "content": "<p>Based on the perf report it really seems to be building the environment that takes most of the time</p>",
        "id": 197718452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589560655
    },
    {
        "content": "<p>Is there no convenient way to do some basic accounting of calls to malloc?</p>",
        "id": 197720463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589561539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197714742\">said</a>:</p>\n<blockquote>\n<p>What work does Lean have to do when importing a module? Also, is that work saved when importing the same module twice during the same <code>lean --make</code> session?</p>\n</blockquote>\n<p>Two main things: deserializing the olean files into in-memory data structures (this results in a list of \"modifications\"), and then applying these modifications in order to produce the environment.  No type checking happens here.  But just all the inserting takes quite a bit of time.</p>",
        "id": 197722022,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589562260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197722022\">said</a>:</p>\n<blockquote>\n<p>But just all the inserting takes quite a bit of time.</p>\n</blockquote>\n<p>Yes, I'm seeing that. Do you have a better idea for understanding what changed than modifying these three different versions of Lean to add some profiling output?</p>",
        "id": 197722938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589562691
    },
    {
        "content": "<p>Is there an easy way to figure out the dependencies?  It would be interesting to see if the olean file size changed.</p>",
        "id": 197723499,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589562947
    },
    {
        "content": "<p>The line count of <code>lean --export</code> went up by about 20%</p>",
        "id": 197723645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589563013
    },
    {
        "content": "<p>which as I understand it is essentially the total size of the environment (okay, not including some stuff like attributes maybe?)</p>",
        "id": 197723681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589563035
    },
    {
        "content": "<p>Did I read your numbers correctly?  This is the time taken by a file containing just <code>import analysis.complex.polynomial</code>:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>3.4.2</th>\n<th>3.7.2</th>\n<th>3.11.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>Jan 23</td>\n<td>Apr 8</td>\n<td>Today</td>\n</tr>\n<tr>\n<td></td>\n<td>4.75s</td>\n<td>8s</td>\n<td>15s</td>\n</tr>\n</tbody>\n</table>",
        "id": 197723788,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589563090
    },
    {
        "content": "<p>| 3.4.2 | 3.7.2 | 3.11.0 |</p>",
        "id": 197723887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589563150
    },
    {
        "content": "<p>Ooh pretty</p>",
        "id": 197724276,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589563340
    },
    {
        "content": "<p>And it took me just 5 minutes to get the markdown right...</p>",
        "id": 197724302,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589563354
    },
    {
        "content": "<blockquote>\n<p>not including some stuff like attributes maybe</p>\n</blockquote>\n<p>Attributes are a possible explanation, that's why I'm curious.</p>",
        "id": 197724406,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589563403
    },
    {
        "content": "<p>TIL about <code>openat</code></p>",
        "id": 197725308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589563835
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ tail -n 1 {jan23,apr8,master}/wc.log\n==&gt; jan23/wc.log &lt;==\n  156411   602930 43606276 total\n\n==&gt; apr8/wc.log &lt;==\n  196482   723773 48700194 total\n\n==&gt; master/wc.log &lt;==\n  191842   780908 48442515 total\n</code></pre></div>\n\n\n<p>produced by <code>strace -o strace.log -e trace=openat ~/.elan/toolchains/leanprover-community-lean-3.11.0/bin/lean tmp.lean</code> (or <code>open</code> for previous versions) followed by<br>\n<code>wc $(grep ^open strace.log | grep -v ENOENT | cut -d '\"' -f 2 | grep '.olean$' | sort | uniq) | tee wc.log</code></p>",
        "id": 197725547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589563933
    },
    {
        "content": "<p>The part between 3.7.2 and 3.11.0 is worrying.  That's just one month.  I see just one thing that could have an effect on import times: namely string literals in the VM (3.9.0).  This should actually reduce olean size and improve import speed, but who knows.</p>",
        "id": 197725883,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589564100
    },
    {
        "content": "<p>I guess I could try bisecting but I'm worried I might just get some numbers between 8 and 15</p>",
        "id": 197726015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589564162
    },
    {
        "content": "<p>So the olean size stayed the same between 3.7.2 and 3.11.0, but importing now takes twice as long?</p>",
        "id": 197726092,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589564189
    },
    {
        "content": "<p>So it seems!</p>",
        "id": 197726135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589564218
    },
    {
        "content": "<p>Do you want to see some <code>perf report</code> output?</p>",
        "id": 197726172,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589564239
    },
    {
        "content": "<p>It's probably not that illuminating beyond what you already know...</p>",
        "id": 197726186,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589564249
    },
    {
        "content": "<p>Please.</p>",
        "id": 197726200,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589564264
    },
    {
        "content": "<p>I want to pass it to <code>nvim -d</code>.</p>",
        "id": 197726280,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589564286
    },
    {
        "content": "<p>This is super low tech, but <a href=\"https://gist.github.com/rwbarton/bebc2b4c48f03feda09664167fc48b0d\">https://gist.github.com/rwbarton/bebc2b4c48f03feda09664167fc48b0d</a></p>",
        "id": 197726529,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589564410
    },
    {
        "content": "<p>Hmm, the appearance of <code>memcpy</code> is intriguing</p>",
        "id": 197726632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589564460
    },
    {
        "content": "<p><code>module_ext::~module_ext</code> is also new.  Did we get new docstrings in the last month?</p>",
        "id": 197727343,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589564791
    },
    {
        "content": "<p>I added the module <code>init.meta.case_tag</code> with a docstring.</p>",
        "id": 197727764,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589564965
    },
    {
        "content": "<p>Surely there are some, e.g., <a href=\"https://github.com/leanprover-community/mathlib/commit/9f33b7dd6d4beee9f89c815b21e31cafacd3b8c3#diff-7060ca01fd0d49ccfb27ecb48f8fe0f6L9\">https://github.com/leanprover-community/mathlib/commit/9f33b7dd6d4beee9f89c815b21e31cafacd3b8c3#diff-7060ca01fd0d49ccfb27ecb48f8fe0f6L9</a></p>",
        "id": 197727781,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589564972
    },
    {
        "content": "<p>Are docstrings slow??</p>",
        "id": 197727790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589564977
    },
    {
        "content": "<p>That's one thing that has vastly increased in the last couple of months...</p>",
        "id": 197727993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589565059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197727790\">said</a>:</p>\n<blockquote>\n<p>Are docstrings slow??</p>\n</blockquote>\n<p>A docstring is about as slow as a declaration.</p>",
        "id": 197728636,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565354
    },
    {
        "content": "<p>But module doc strings might be much slower.  Did we get new module doc strings?</p>",
        "id": 197728922,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565453
    },
    {
        "content": "<p>Yes, I linked one above for example</p>",
        "id": 197728946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589565462
    },
    {
        "content": "<p>I don't know whether we got many of them though</p>",
        "id": 197728966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589565470
    },
    {
        "content": "<p>I have a theory.</p>",
        "id": 197729150,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565536
    },
    {
        "content": "<p>Also, I see about a 1.5x difference between apr8 and master with Chris's second suggestion <code>computability.halting</code>, which relies on a lot less of mathlib, so it would be a lot easier to bisect with that one</p>",
        "id": 197729217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589565564
    },
    {
        "content": "<p>Do you see what is wrong with the following definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nl\">module_ext</span> <span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"n\">environment_extension</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">module_name</span><span class=\"o\">&gt;</span> <span class=\"n\">m_direct_imports</span><span class=\"p\">;</span>\n    <span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">modification</span> <span class=\"k\">const</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">m_modifications</span><span class=\"p\">;</span>\n    <span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span>        <span class=\"n\">m_module_univs</span><span class=\"p\">;</span>\n    <span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span>        <span class=\"n\">m_module_decls</span><span class=\"p\">;</span>\n    <span class=\"n\">name_set</span>          <span class=\"n\">m_module_defs</span><span class=\"p\">;</span>\n    <span class=\"n\">name_set</span>          <span class=\"n\">m_imported</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unordered_map</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"n\">pos_info</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m_module_docs</span><span class=\"p\">;</span>\n    <span class=\"n\">name_map</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span>     <span class=\"n\">m_decl2olean</span><span class=\"p\">;</span>\n    <span class=\"n\">name_map</span><span class=\"o\">&lt;</span><span class=\"n\">pos_info</span><span class=\"o\">&gt;</span>        <span class=\"n\">m_decl2pos_info</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 197729465,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565653
    },
    {
        "content": "<p>It's in C++?</p>",
        "id": 197729519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589565677
    },
    {
        "content": "<p>What happens when you copy this structure?</p>",
        "id": 197729607,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565720
    },
    {
        "content": "<p>No idea (see above)</p>",
        "id": 197729657,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589565735
    },
    {
        "content": "<p>modifications are shared?</p>",
        "id": 197729661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565738
    },
    {
        "content": "<p>The field <code>m_module_docs</code> is copied as well, including all module docs.</p>",
        "id": 197729664,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> No that's good.  That's what we should do with the module docs as well.</p>",
        "id": 197729702,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565762
    },
    {
        "content": "<p>when does this get copied?</p>",
        "id": 197729733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565778
    },
    {
        "content": "<p>what is the string key of the module doc map?</p>",
        "id": 197729823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565811
    },
    {
        "content": "<p>why isn't it a name key?</p>",
        "id": 197729846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565820
    },
    {
        "content": "<p>The key is the module file name, I removed the comment that explains this.  Lean doesn't know about <code>data.nat</code> when it imports something, it only knows the filename.</p>",
        "id": 197729971,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565879
    },
    {
        "content": "<p>It gets copied every time you insert a module doc string, or update any of the other fields.  Every declaration updates the <code>m_decl2pos_info</code> field...</p>",
        "id": 197730062,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565918
    },
    {
        "content": "<p>is that because this is the <code>environment</code> object that is functionally updated?</p>",
        "id": 197730194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565967
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 197730232,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589565985
    },
    {
        "content": "<p>I thought there would be a lot more sharing than this</p>",
        "id": 197730245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565989
    },
    {
        "content": "<p>this looks more appropriate for a \"baked\" environment object, once the file is complete</p>",
        "id": 197730298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589566018
    },
    {
        "content": "<p>but maybe there isn't any such concept in the C++</p>",
        "id": 197730350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589566042
    },
    {
        "content": "<p><code>vector</code> is a reference, not sure about any of the others</p>",
        "id": 197730353,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589566044
    },
    {
        "content": "<p>wait is it? I don't even know</p>",
        "id": 197730378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589566053
    },
    {
        "content": "<p>I think it's just owned data</p>",
        "id": 197730394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589566067
    },
    {
        "content": "<p>I don't know if the <code>name_set</code>s can be functionally shared</p>",
        "id": 197730497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589566102
    },
    {
        "content": "<p><code>std::vector</code> and <code>std::unordered_map</code> are owned.  The <code>name_set</code> is fine.</p>",
        "id": 197730844,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589566269
    },
    {
        "content": "<p>How about</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">persistent_map</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"n\">pos_info</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m_module_docs</span><span class=\"p\">;</span>\n</code></pre></div>\n\n\n<p>then? Not sure what the C++-ism for <code>persistent_map</code> is</p>",
        "id": 197731201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589566477
    },
    {
        "content": "<p>It would be better if the map contained <code>vector</code> for all files other than the current one and a <code>list</code> for the current file</p>",
        "id": 197731267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589566519
    },
    {
        "content": "<p>We typically use <code>rb_map</code>.  I'll try to code something up in the next few minutes.</p>",
        "id": 197731274,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589566522
    },
    {
        "content": "<p>Is there a specific Lean version bump that it would be useful to benchmark both sides of?</p>",
        "id": 197731921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589566808
    },
    {
        "content": "<p>Give me a few seconds, then you can benchmark a PR.</p>",
        "id": 197732632,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589567108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  <a href=\"https://github.com/leanprover-community/lean/issues/241\">lean#241</a></p>",
        "id": 197733396,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589567471
    },
    {
        "content": "<p>It's on 3.12, will mathlib already build with that? I ignored that discussion</p>",
        "id": 197733451,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589567518
    },
    {
        "content": "<p>alternatively, should it apply to 3.11?</p>",
        "id": 197733593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589567585
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2681\">#2681</a></p>",
        "id": 197733613,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589567594
    },
    {
        "content": "<p>It should also apply to 3.11</p>",
        "id": 197733626,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589567601
    },
    {
        "content": "<p>maybe for benchmarking purposes it is better for me to build it on 3.11 then</p>",
        "id": 197733658,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589567620
    },
    {
        "content": "<p>Apparently I'm building with some version of g++ that produces a <em>heck</em> of a lot of warnings on the Lean code base</p>",
        "id": 197734553,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589568043
    },
    {
        "content": "<p>oh, I guess I didn't have to go and build all of mathlib, but that's what I'm doing apparently.</p>",
        "id": 197737949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589569537
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>39417.19user 56.41system 35:53.47elapsed 1833%CPU (0avgtext+0avgdata 12875252maxresident)k\n8inputs+169048outputs (0major+3965789minor)pagefaults 0swaps\n</code></pre></div>",
        "id": 197741550,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589570634
    },
    {
        "content": "<p>down from 42:17.51elapsed ... <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 197741613,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589570650
    },
    {
        "content": "<p>That's a 1/6 improvement!</p>",
        "id": 197741675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589570688
    },
    {
        "content": "<p>import <code>analysis.complex.polynomial</code> is down to 6 seconds, which is more or less in line with mathlib growth</p>",
        "id": 197741789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589570741
    },
    {
        "content": "<p>Does this also include the <code>simp</code> improvements? Or is it only the module-doc fix?</p>",
        "id": 197741974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589570830
    },
    {
        "content": "<p>Since you've already compiled mathlib, could you check something for me?  Does <code>module_doc_strings</code> still return the doc strings in the same order.  (Go to some file with multiple module doc strings like <code>data.set.intervals.basic</code> and call the function at the end of the file.)</p>",
        "id": 197742054,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589570875
    },
    {
        "content": "<p>that is just <a href=\"https://github.com/leanprover-community/lean/issues/241\">lean#241</a> cherry-picked to 3.11.0</p>",
        "id": 197742122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589570889
    },
    {
        "content": "<p>So that's maybe another 25%?  3.13 is going to be a nice release.</p>",
        "id": 197742190,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589570929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197742054\">said</a>:</p>\n<blockquote>\n<p>Since you've already compiled mathlib, could you check something for me?  Does <code>module_doc_strings</code> still return the doc strings in the same order.  (Go to some file with multiple module doc strings like <code>data.set.intervals.basic</code> and call the function at the end of the file.)</p>\n</blockquote>\n<p>How do I call it?</p>",
        "id": 197742233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589570951
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">module_doc_strings</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span>\n</code></pre></div>",
        "id": 197742287,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589570984
    },
    {
        "content": "<p>Yes, same output</p>",
        "id": 197742521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589571118
    },
    {
        "content": "<p>Great!</p>",
        "id": 197742570,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589571124
    },
    {
        "content": "<p>I guess the thing to do now is to try to build <a href=\"https://github.com/leanprover-community/lean/issues/241\">lean#241</a> with <a href=\"https://github.com/leanprover-community/mathlib/issues/2681\">#2681</a></p>",
        "id": 197750627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589575784
    },
    {
        "content": "<p>or vice versa I suppose</p>",
        "id": 197750631,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589575791
    },
    {
        "content": "<p>oh, the other speedups are in 3.13 but the recent pr is only for 3.12, I see</p>",
        "id": 197752012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589576620
    },
    {
        "content": "<p>Wow, 3.13 is really going to be very nice</p>",
        "id": 197752159,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589576695
    },
    {
        "content": "<p>Yeah, no major change in speed for the 3.12 PR.</p>",
        "id": 197757662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589580243
    },
    {
        "content": "<p>Well done, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>! It's fantastic we've caught and fixed this.</p>",
        "id": 197771307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589595560
    },
    {
        "content": "<p>I didn't follow the analysis of what had gone wrong in the C++, but it sounds like we were doing something accidentally quadratic (in the number of docstrings)?</p>",
        "id": 197771359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589595614
    },
    {
        "content": "<p>When I build current lean master I get the following warning:</p>\n<div class=\"codehilite\"><pre><span></span><code>                 from /path/lean/src/util/sexpr/option_declarations.h:11,\n                 from /path/lean/src/library/equations_compiler/elim_match.cpp:9:\n/path/lean/src/util/name.h: In member function ‘lean::list&lt;lean::elim_match_fn::lemma&gt; lean::elim_match_fn::process(const lean::elim_match_fn::problem&amp;)’:\n/path/lean/src/util/name.h:87:40: warning: ‘*((void*)(&amp; fn_name)+8).lean::name::m_ptr’ may be used uninitialized in this function [-Wmaybe-uninitialized]\n   87 |     ~name() { if (m_ptr) m_ptr-&gt;dec_ref(); }\n      |                          ~~~~~~~~~~~~~~^~\n/path/lean/src/library/equations_compiler/elim_match.cpp:520:24: note: ‘*((void*)(&amp; fn_name)+8).lean::name::m_ptr’ was declared here\n  520 |         optional&lt;name&gt; fn_name;\n      |                        ^~~~~~~\n</code></pre></div>\n\n\n<p>Is this anything I should worry about?</p>",
        "id": 197776249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589603336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/speed-up.20project.20returns/near/197776249\">said</a>:</p>\n<blockquote>\n<p>When I build current lean master I get the following warning:</p>\n<div class=\"codehilite\"><pre><span></span><code>                 from /path/lean/src/util/sexpr/option_declarations.h:11,\n                 from /path/lean/src/library/equations_compiler/elim_match.cpp:9:\n/path/lean/src/util/name.h: In member function ‘lean::list&lt;lean::elim_match_fn::lemma&gt; lean::elim_match_fn::process(const lean::elim_match_fn::problem&amp;)’:\n/path/lean/src/util/name.h:87:40: warning: ‘*((void*)(&amp; fn_name)+8).lean::name::m_ptr’ may be used uninitialized in this function [-Wmaybe-uninitialized]\n   87 |     ~name() { if (m_ptr) m_ptr-&gt;dec_ref(); }\n      |                          ~~~~~~~~~~~~~~^~\n/path/lean/src/library/equations_compiler/elim_match.cpp:520:24: note: ‘*((void*)(&amp; fn_name)+8).lean::name::m_ptr’ was declared here\n  520 |         optional&lt;name&gt; fn_name;\n      |                        ^~~~~~~\n</code></pre></div>\n\n\n<p>Is this anything I should worry about?</p>\n</blockquote>\n<p>If <code>m_ptr</code> has a garbage value, you might get a null pointer dereferencing at destruction time, that could create a segfault during lifetime of the program, but maybe the compiler is drunk, I didn't read the code</p>",
        "id": 197777694,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589605930
    },
    {
        "content": "<p>So, uh, I just built master and <a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a> on my laptop. Very non-scientific comparison: <strong>50%</strong> realtime speedup. That's so big I almost don't believe this was a clean test.</p>",
        "id": 197862877,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589740606
    },
    {
        "content": "<p>Hooray! Thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>!</p>",
        "id": 197863055,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589740815
    },
    {
        "content": "<p>I guess it was clean: here's a 56 min Actions build! <a href=\"https://github.com/leanprover-community/mathlib/runs/683136036\">https://github.com/leanprover-community/mathlib/runs/683136036</a></p>",
        "id": 197863784,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589741930
    },
    {
        "content": "<p>Now the linting takes almost as long as the build...</p>",
        "id": 197863856,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589742020
    },
    {
        "content": "<p>And these 56 minutes are with 3000 lines more added by <a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a>, i.e., all the algebra that was originally in core!</p>",
        "id": 197864886,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589743464
    }
]