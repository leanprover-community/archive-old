[
    {
        "content": "<p>(Is this how I ask a question?)<br>\nHow do I get <code>finset.univ.sum (λ (σ : equiv.perm n), ↑↑(⇑equiv.perm.sign σ) * finset.univ.prod (λ (i : n), M (⇑σ i) i))</code> (i.e the definition of determinant in linear_algebra) to reduce to the formula m.det = (m 0 0) * (m 1 1) - (m 0 1) * (m 1 0)  (in the case n = fin 2)?</p>",
        "id": 203380390,
        "sender_full_name": "Christopher Upshaw",
        "timestamp": 1594298653
    },
    {
        "content": "<p>I don't believe there is an easy way to do this, since <code>finset.sum</code> is not really designed for computation. Either you would have to show <code>finset.univ : finset (equiv.perm (fin 2))</code> is equal to a specific list of permutations, or you need to do some tricks with reducing the expression enough that <code>simp</code> or <code>rw</code> can deal with it.</p>",
        "id": 203380809,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594298912
    },
    {
        "content": "<p>Like we have <code>fin_cases</code>, we need a tactic that \"writes out a sum\"</p>",
        "id": 203381201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594299147
    },
    {
        "content": "<p>It might be relevant to my talk on linear algebra next week, so let's see how far I get.</p>",
        "id": 203381392,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299262
    },
    {
        "content": "<p>(And yes, <span class=\"user-mention\" data-user-id=\"214520\">@Christopher Upshaw</span>, this is how you ask a question! :-)</p>",
        "id": 203381519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594299340
    },
    {
        "content": "<p>(You might be disappointed by how often questions are answered with \"hmm... we should make that work\". But then hopefully you'll be pleased by how often someone then makes it work. :-)</p>",
        "id": 203381635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594299389
    },
    {
        "content": "<p>We could try a proof like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">det_2x2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"c\">/-</span><span class=\"cm\"> fill in something clever -/</span> <span class=\"o\">:</span> <span class=\"n\">refl</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203381735,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299452
    },
    {
        "content": "<p>The obvious choice is to ask Lean to reduce <code>M.det</code> as much as it can with the command <code>#reduce M.det</code>, but that gives a timeout.</p>",
        "id": 203381822,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299484
    },
    {
        "content": "<p>So let's just guess that Lean can reduce <code>finset.sum</code> to a sum of two things, and that works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">det_2x2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">refl</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span> <span class=\"c1\">-- error: focused goal has not been solved</span>\n</code></pre></div>",
        "id": 203381971,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299594
    },
    {
        "content": "<p>But it's not a sum of three things:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">det_2x2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">refl</span> <span class=\"bp\">_</span> <span class=\"c1\">-- error: type mismatch</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203382058,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299638
    },
    {
        "content": "<p>Aha, but adding parentheses around the addition works!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">det_2x2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">refl</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span> <span class=\"c1\">-- error: focused goal has not been solved</span>\n</code></pre></div>",
        "id": 203382146,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299685
    },
    {
        "content": "<p>In fact, the last term should be <code>0</code>: <code>_ + (_ + 0)</code> doesn't give a type error.</p>",
        "id": 203382334,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299778
    },
    {
        "content": "<p>Let's check out the goal that <code>simp, ring</code> didn't solve:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n        <span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span>\n      <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n           <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n        <span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 203382366,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299803
    },
    {
        "content": "<p>Looks like we need to do the same trick with these products as we did for the sum.</p>",
        "id": 203382385,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299824
    },
    {
        "content": "<p>Yup, this doesn't give a type error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">det_2x2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">refl</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span> <span class=\"c1\">-- error: focused goal has not been solved</span>\n</code></pre></div>",
        "id": 203382514,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299884
    },
    {
        "content": "<p>Looking at the goal again, we get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">*</span>\n          <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">*</span>\n        <span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span>\n      <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">))</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n            <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">*</span>\n          <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">))</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n            <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">*</span>\n        <span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">equiv_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>So we should just fill in some values and we can finish.</p>",
        "id": 203382700,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594299975
    },
    {
        "content": "<p>And with a bit of fiddling with the coercions, we get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">det_2x2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">refl</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203383035,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594300189
    },
    {
        "content": "<p>QED :-)</p>",
        "id": 203383093,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594300206
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">det_2x2</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">neg_one_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 203383094,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594300207
    },
    {
        "content": "<p>oh curses I'm slightly slower</p>",
        "id": 203383194,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594300281
    },
    {
        "content": "<p>Well done to both of you, very nice</p>",
        "id": 203394218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594305808
    },
    {
        "content": "<p>Now can you do 3*3? ;-)</p>",
        "id": 203394386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594305871
    },
    {
        "content": "<p>I can do it, but I won't <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 203394700,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594306002
    },
    {
        "content": "<p>If we had a tactic that, like <code>fin_cases</code>, used <code>eval_expr</code> to obtain an underlying list, and replaced the finset.prod with an explicit list.prod over that list, how helpful would that be in these cases?</p>",
        "id": 203457410,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594339972
    },
    {
        "content": "<p>It's probably easier to show the n x n case via the definition of det that uses minors</p>",
        "id": 203457610,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594340212
    },
    {
        "content": "<p>And induction</p>",
        "id": 203457617,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594340224
    },
    {
        "content": "<p>I had the wrong definition here.</p>",
        "id": 203459102,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594342120
    },
    {
        "content": "<p>Something more like this. Still not sure how to generate the <code>ni \\neq i</code> on the fly:</p>\n<hr>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">det_via_minors</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"err\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"err\">•</span> <span class=\"n\">minor</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ni</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">i</span> <span class=\"n\">ni</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nj</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">j</span> <span class=\"n\">nj</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n<span class=\"bp\">```</span><span class=\"c1\">---</span>\n<span class=\"n\">still</span> <span class=\"n\">wrong</span>\n</code></pre></div>",
        "id": 203459449,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594342597
    },
    {
        "content": "<p>Not suggesting that you need to change your approach, but: when I was working with minors to <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/linear_algebra/nonsingular_inverse.lean#L214\">define the adjugate</a>, I found it easier to define it in terms of Cramer's map. So instead of directly removing a row and column from the matrix, set the <code>i</code>th column to the <code>j</code>'th basis vector. And as the next step, show that going from <code>cramer_map A</code> to <code>minor A</code> doesn't change the determinant.</p>",
        "id": 203482658,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594370398
    },
    {
        "content": "<p>I'll try that out. But if the idea is to reduce the det of an explicit 2 x 2 matrix to the ad - bc term, wouldn't relying on a linear map make that difficult?</p>",
        "id": 203501180,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594384607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/reducing.20determinate.20of.20a.20matrix/near/203381735\">said</a>:</p>\n<blockquote>\n<p>We could try a proof like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">det_2x2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"c\">/-</span><span class=\"cm\"> fill in something clever -/</span> <span class=\"o\">:</span> <span class=\"n\">refl</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Hi, I tried this method but for the inverse, and it worked sometimes:<br>\nThis works fine:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">special_linear_group</span>\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inverse₀₀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span><span class=\"o\">):</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span><span class=\"o\">(</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">refl</span> <span class=\"bp\">_</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inverse₀₁</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span><span class=\"o\">):</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">refl</span> <span class=\"bp\">_</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>but I don't know how to make this one work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">inverse₁₀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span><span class=\"o\">):</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">refl</span> <span class=\"bp\">_</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Using <code>#reduce</code> I obtain:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- result:</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">(</span>\n<span class=\"cm\">    (int.of_nat 1).mul(                     This is 1 * ( 0 * (_ * 1))</span>\n<span class=\"cm\">            (int.of_nat 0).mul (</span>\n<span class=\"cm\">                (A.val ⟨1, _⟩ ⟨1, _⟩).mul (</span>\n<span class=\"cm\">                    int.of_nat 1</span>\n<span class=\"cm\">    )))).add                                            +</span>\n<span class=\"cm\">    ((-[1+ 0].mul (                                -1 * (_ * 1)</span>\n<span class=\"cm\">        (A.val ⟨1, _⟩ ⟨0, _⟩).mul (</span>\n<span class=\"cm\">            int.of_nat 1</span>\n<span class=\"cm\">    ))).add (                                           +</span>\n<span class=\"cm\">        int.of_nat 0))                                  0</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>but writing </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">inverse₁₀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span><span class=\"o\">):</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">refl</span> <span class=\"bp\">_</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>does not work. However writing the <code>1</code> in the \"wrong\" place works¿?:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">inverse₁₀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span><span class=\"o\">):</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">refl</span> <span class=\"bp\">_</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>After that I get stuck and I can't make it work.</p>\n<p>Thanks, and sorry for the long question <span aria-label=\"scroll\" class=\"emoji emoji-1f4dc\" role=\"img\" title=\"scroll\">:scroll:</span></p>",
        "id": 205023887,
        "sender_full_name": "Eloi",
        "timestamp": 1595715229
    },
    {
        "content": "<p>you got the indices wrong on <code> M⁻¹ 1 0</code> and <code>- M 1 0</code></p>",
        "id": 205024391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595716010
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">inverse₁₀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span><span class=\"o\">):</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205024420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595716078
    },
    {
        "content": "<p>Ouch thanks <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 205024617,
        "sender_full_name": "Eloi",
        "timestamp": 1595716355
    },
    {
        "content": "<p>by the way, you can be even more clever with this kind of proof, since rfl lines are always redundant in <code>calc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">inverse₁₀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span><span class=\"o\">):</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205024631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595716402
    },
    {
        "content": "<p>Finally, due to <a href=\"https://github.com/leanprover-community/mathlib/issues/5593\">#5593</a>, we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_swap</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.det</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.det</span><span class=\"o\">,</span> <span class=\"n\">finset.univ_perm_fin_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">finset.univ_product_univ</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_product</span><span class=\"o\">,</span>\n        <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.prod_univ_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n        <span class=\"n\">matrix.det</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"bp\">=</span>\n          <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- We utilize the `norm_swap` plugin for `norm_num` to reduce swap terms</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">matrix.det</span><span class=\"o\">,</span> <span class=\"n\">finset.univ_perm_fin_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">finset.univ_product_univ</span><span class=\"o\">,</span>\n            <span class=\"n\">finset.sum_product</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.prod_univ_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226532927,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613491500
    }
]