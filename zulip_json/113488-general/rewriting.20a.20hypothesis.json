[
    {
        "content": "<p>This belongs in its own topic.<br>\n(Originally <a href=\"#narrow/stream/113488-general/subject/statement.20of.20the.20five.20lemma/near/125607928\" title=\"#narrow/stream/113488-general/subject/statement.20of.20the.20five.20lemma/near/125607928\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/statement.20of.20the.20five.20lemma/near/125607928</a>)</p>\n<blockquote>\n<p>Can I easily rewrite the hypothesis <code>(com₁ : m ∘ f = r ∘ l)</code> into <code>com₁' : \\fo x, (m (f x) = r (l x))</code> ?</p>\n</blockquote>",
        "id": 125608657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524555606
    },
    {
        "content": "<p>Did you try <code>unfold function.comp</code>?</p>",
        "id": 125608662,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524555662
    },
    {
        "content": "<p>Wouldn't you need extensionality for it first?</p>",
        "id": 125608722,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524555776
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g₁</span> <span class=\"err\">∘</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"err\">∘</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"bp\">;</span> <span class=\"n\">funext</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"err\">⊢</span> <span class=\"n\">g₁</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125608842,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524556022
    },
    {
        "content": "<p>Right, I am a moron :).</p>",
        "id": 125608848,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524556056
    },
    {
        "content": "<p>Or you read from right to left. <span class=\"emoji emoji-1f643\" title=\"upside down face\">:upside_down_face:</span></p>",
        "id": 125608893,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524556088
    },
    {
        "content": "<p>I think my fingers typed before my brain got involved.</p>",
        "id": 125608900,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524556122
    },
    {
        "content": "<p>Actually, in my current version of Lean (dated to February, I think), <code>unfold</code> isn't necessary.</p>",
        "id": 125608909,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524556165
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"err\">∘</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"err\">∘</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 125608912,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524556193
    },
    {
        "content": "<p>Okay, but that's not what you want. So I revoke my statement.</p>",
        "id": 125608959,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524556213
    },
    {
        "content": "<p>And to alleviate <span class=\"user-mention\" data-user-id=\"110027\">@Moses Schönfinkel</span>'s concerns, you can do it the other way around:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g₁</span> <span class=\"err\">∘</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"err\">∘</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">funext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"err\">⊢</span> <span class=\"n\">g₁</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125608982,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524556270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110027\">@Moses Schönfinkel</span> So you're not a moron after all.</p>",
        "id": 125608989,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524556291
    },
    {
        "content": "<p>I am at least a partial moron because I thought extensionality needs to come before unfolding :). For some definition of \"thought\" which is just \"don't think and fetch a pattern you'd encountered before\".</p>",
        "id": 125609106,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524556444
    },
    {
        "content": "<p>Ok, so I unfolded that hypothesis. Now how do I apply it? Part of my (50-line) context is like this:</p>\n<div class=\"codehilite\"><pre><span></span>com₃ : (λ (x : C₁), m (h₁ x)) = λ (x : C₁), h₂ (l x),\nx : C₁,\nthis : h₂ (l x) = 1\n⊢ m (h₁ x) = 1\n</pre></div>",
        "id": 125609543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557236
    },
    {
        "content": "<p>Why can't <code>cc</code> solve this one?</p>",
        "id": 125609747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557624
    },
    {
        "content": "<p>I don't know anything about cc</p>",
        "id": 125609789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557652
    },
    {
        "content": "<p>Somehow it needs a slightly rewritten version of <code>com₃</code>, I guess</p>",
        "id": 125609790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557653
    },
    {
        "content": "<p>but are you having trouble proving this in general?</p>",
        "id": 125609793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557675
    },
    {
        "content": "<p>Yup</p>",
        "id": 125609794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557684
    },
    {
        "content": "<p>com3 says \"two functions are equal\"</p>",
        "id": 125609816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557716
    },
    {
        "content": "<p>AFAIK, <code>cc</code> follows it's nose, deducing equalities and occasionally applying some functions.</p>",
        "id": 125609818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557721
    },
    {
        "content": "<p>But that is simplistic</p>",
        "id": 125609823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557734
    },
    {
        "content": "<p>I would be tempted to really use the functions themselves</p>",
        "id": 125609826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Right, so I need to do some funext</p>",
        "id": 125609827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557748
    },
    {
        "content": "<p>I am sure I can give a hands-on proof</p>",
        "id": 125609833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557755
    },
    {
        "content": "<p>Or what</p>",
        "id": 125609834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557755
    },
    {
        "content": "<p>You can write \"show (m circ h1) x = 1\" probably</p>",
        "id": 125609879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557771
    },
    {
        "content": "<p>this will rewrite the goal</p>",
        "id": 125609881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557779
    },
    {
        "content": "<p>because <code>show</code> will change a goal to something definitionally equivalent</p>",
        "id": 125609886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557794
    },
    {
        "content": "<p>Do you know about definitional equivalence?</p>",
        "id": 125609887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557798
    },
    {
        "content": "<p>yes</p>",
        "id": 125609888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557803
    },
    {
        "content": "<p>and you can use \"change\" to rewrite hypotheses to definitionally equivalent things too</p>",
        "id": 125609897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557827
    },
    {
        "content": "<p>As well as <code>refine</code>.</p>",
        "id": 125609902,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524557842
    },
    {
        "content": "<p>Hmmz, ok</p>",
        "id": 125609906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557860
    },
    {
        "content": "<p>Let's see if I can find a proof</p>",
        "id": 125609907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557868
    },
    {
        "content": "<p>Let me just get your context into some MWE</p>",
        "id": 125609910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <code>exaxt (congr_fun com\\3 _).trans this</code></p>",
        "id": 125609947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524557883
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">Hthis</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125610023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> if you write your question like this (i.e. make it easily cut-and-pasteable)</p>",
        "id": 125610026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558107
    },
    {
        "content": "<p>then when Kenny goes into proof mode</p>",
        "id": 125610029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558114
    },
    {
        "content": "<p>he's more likely to print out more proofs</p>",
        "id": 125610066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558126
    },
    {
        "content": "<p>Ok, I see</p>",
        "id": 125610069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524558132
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">Hthis</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"err\">∘</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"n\">at</span> <span class=\"n\">Hthis</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"err\">∘</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">Hcom</span><span class=\"o\">,</span>\n<span class=\"n\">rwa</span> <span class=\"n\">Hcom</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125610140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558280
    },
    {
        "content": "<p>If you're not ready for Kenny's gobble-de-gook then there is how I would think about it</p>",
        "id": 125610146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558300
    },
    {
        "content": "<p><code>rwa</code> means <code>rewrite, and then note that the goal is an assumption so close it</code></p>",
        "id": 125610154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558329
    },
    {
        "content": "<p>and <code>change</code> lets you change things to definitionally equivalent things</p>",
        "id": 125610206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558393
    },
    {
        "content": "<p>The problem with rewrite is that it will not change stuff to definitionally equivalent stuff</p>",
        "id": 125610211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558416
    },
    {
        "content": "<p>it has to already be exactly right</p>",
        "id": 125610214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558421
    },
    {
        "content": "<p>Ok, got that. Thanks!</p>",
        "id": 125610290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524558553
    },
    {
        "content": "<p>Here's Kenny's proof:</p>",
        "id": 125610296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558599
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">Hthis</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">congr_fun</span> <span class=\"n\">Hcom</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">Hthis</span>\n</pre></div>",
        "id": 125610339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558612
    },
    {
        "content": "<p>That's a nice example. I'm sure we can have a 23rd PR about simp vs rw vs change</p>",
        "id": 125610340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524558619
    },
    {
        "content": "<p>This really shows the power of term mode</p>",
        "id": 125610341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558626
    },
    {
        "content": "<p>Kevin, you forgot to switch browser</p>",
        "id": 125610345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524558633
    },
    {
        "content": "<p>To the one where you are logged in as Kenny</p>",
        "id": 125610350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524558652
    },
    {
        "content": "<p>darn, I'm getting forgetful in my old age</p>",
        "id": 125610360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558674
    },
    {
        "content": "<p>General mathlib style guide says \"if it's trivially true, then the best proof is an incomprehensible one-liner\"</p>",
        "id": 125610367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558701
    },
    {
        "content": "<p>because there's no point writing a four line tactic proof like mine, which makes it clear how you are doing something completely trivial</p>",
        "id": 125610405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558723
    },
    {
        "content": "<p>But I spent a long long time writing all proofs in tactic mode before I felt comfortable with these fancy one-line term mode proofs</p>",
        "id": 125610426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558786
    },
    {
        "content": "<p>Ok, so now I have proven that <code>h_1 x = 1</code>. So now I want to say <code>ker h_1 = im g_1</code> hence there is a <code>y : B_1</code> such that <code>g_1 y = x</code>.</p>",
        "id": 125610428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524558788
    },
    {
        "content": "<p>How have you set things up: is ker h1 a set?</p>",
        "id": 125610430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558815
    },
    {
        "content": "<p>There are two ways of talking about what a mathematician would call a subset of a set</p>",
        "id": 125610431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558837
    },
    {
        "content": "<p>you can use sets or subtypes</p>",
        "id": 125610471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558849
    },
    {
        "content": "<p>they carry the same data, but packaged in different ways</p>",
        "id": 125610478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558863
    },
    {
        "content": "<p>One is a term, one is a type</p>",
        "id": 125610480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558877
    },
    {
        "content": "<p><a href=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db\">https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db</a></p>",
        "id": 125610485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524558893
    },
    {
        "content": "<p>That's an update</p>",
        "id": 125610486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524558898
    },
    {
        "content": "<p>With what I have so far</p>",
        "id": 125610489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524558903
    },
    {
        "content": "<p>You're using sets</p>",
        "id": 125610554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524558987
    },
    {
        "content": "<p>Oh wow, the message everyone was replying to has changed.</p>",
        "id": 125610555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559001
    },
    {
        "content": "<p>If you write <code>have := ...</code> in tactic mode</p>",
        "id": 125610568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559070
    },
    {
        "content": "<p>then Lean calls the thing you proved <code>this</code> by default</p>",
        "id": 125610607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559085
    },
    {
        "content": "<p>so you have about 20 hypotheses all called <code>this</code></p>",
        "id": 125610611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559092
    },
    {
        "content": "<p>and you won't be able to use most of them</p>",
        "id": 125610614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559099
    },
    {
        "content": "<p>because <code>this</code> will only refer to one of them</p>",
        "id": 125610616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559106
    },
    {
        "content": "<p>and the rest will be inaccessible</p>",
        "id": 125610619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559112
    },
    {
        "content": "<blockquote>\n<p>Oh wow, the message everyone was replying to has changed.</p>\n</blockquote>\n<p>Yes, still need to figure out how github behaves. Sorry...</p>",
        "id": 125610691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524559248
    },
    {
        "content": "<p>For the record, the calc version of the previous question:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">Hthis</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">congr_fun</span> <span class=\"n\">Hcom</span> <span class=\"n\">w</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">Hthis</span>\n</pre></div>",
        "id": 125610707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524559303
    },
    {
        "content": "<p>About all the <code>this</code>es. My current strategy is to give them a name if I need to. But hopefully things like <code>rwa</code> and <code>apply_assumption</code> will just figure it out.</p>",
        "id": 125610708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524559308
    },
    {
        "content": "<p>I guess Kevin/Kenny term proof is a rather direct translation of that calc proof</p>",
        "id": 125610767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524559372
    },
    {
        "content": "<p>yes, <code>calc</code> is just some elaborate way of applying <code>trans</code>, as we see from the calc docs ;-)</p>",
        "id": 125610778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559402
    },
    {
        "content": "<p>I swear I didn't look at your term proof before writing this</p>",
        "id": 125610843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524559530
    },
    {
        "content": "<p>Because this is what I do with term proof</p>",
        "id": 125610844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524559537
    },
    {
        "content": "<p>My eyes refuse to stay on them</p>",
        "id": 125610845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524559547
    },
    {
        "content": "<p>eew</p>",
        "id": 125610944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559688
    },
    {
        "content": "<p>the definition of kernel</p>",
        "id": 125610945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559692
    },
    {
        "content": "<p>is \"the pre-image of the trivial subgroup\"</p>",
        "id": 125610947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559699
    },
    {
        "content": "<p>Is that really better than \"the things which map to the identity element\"?</p>",
        "id": 125610951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559720
    },
    {
        "content": "<p>they don’t like fibres</p>",
        "id": 125610954,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524559738
    },
    {
        "content": "<p><code>@[simp] lemma mem_trivial [group α] {g : α} : g ∈ trivial α ↔ g = 1</code></p>",
        "id": 125610957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559742
    },
    {
        "content": "<p>search for fibre in zulip</p>",
        "id": 125610958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524559743
    },
    {
        "content": "<p>I wonder if they have the lemma that h is in ker beta iff beta h = 1? ;-)</p>",
        "id": 125611012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559819
    },
    {
        "content": "<p><code>lemma duh (f : A  → B) [is_group_hom f] (a : A) : a ∈ ker f ↔ f a = 1 := sorry</code></p>",
        "id": 125611034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559908
    },
    {
        "content": "<p>That would definitely be a good start</p>",
        "id": 125611036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524559913
    },
    {
        "content": "<p>Ok, I have the hypothesis that <code>m</code> is bijective. I want to apply the fact that <code>m</code> is injective. The definition of <code>bijective m</code> is <code>injective m \\and surjective m</code>. Is there a general tactic that kills this?</p>",
        "id": 125611105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524560018
    },
    {
        "content": "<p>If <code>H</code> is a proof of <code>P \\and Q</code> then <code>H.1</code> is a proof of <code>P</code></p>",
        "id": 125611151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560047
    },
    {
        "content": "<p>I was going to say that</p>",
        "id": 125611158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524560059
    },
    {
        "content": "<p>Don't bait Patrick</p>",
        "id": 125611162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560079
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 125611184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524560128
    },
    {
        "content": "<p>What is the best way of writing <code>have := y : B_1 \"such that g_1 y = x\"</code>?</p>",
        "id": 125611388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524560461
    },
    {
        "content": "<p>Ok, that is pseudo-pseudo-Lean</p>",
        "id": 125611400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524560491
    },
    {
        "content": "<p>Maybe you want to know about subtypes now</p>",
        "id": 125611448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560550
    },
    {
        "content": "<p>There's also <code>\\ex</code></p>",
        "id": 125611450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560565
    },
    {
        "content": "<p>exists</p>",
        "id": 125611451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560568
    },
    {
        "content": "<p>ok, maybe that is useful</p>",
        "id": 125611461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524560593
    },
    {
        "content": "<p><code>∃ y : B_1, g_1 y = x</code></p>",
        "id": 125611463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560595
    },
    {
        "content": "<p>that's a Prop, so something of that type is a proof of that prop</p>",
        "id": 125611465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560608
    },
    {
        "content": "<p>and then you can uses <code>cases</code> on the proof in tactic mode to get to <code>y</code></p>",
        "id": 125611470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560622
    },
    {
        "content": "<p>assuming you're in the middle of a proof.</p>",
        "id": 125611474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560628
    },
    {
        "content": "<p>ok, going to try that</p>",
        "id": 125611479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524560640
    },
    {
        "content": "<p>If you're in the middle of a construction (i.e. defining something, not proving something) then you need to invoke the axiom of choice to get <code>y</code> out ;-)</p>",
        "id": 125611518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560649
    },
    {
        "content": "<p>The other thing you can do is to actually make a new type -- a subtype</p>",
        "id": 125611534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560676
    },
    {
        "content": "<p><code>X := {y : B_1 // g_1 y = x}</code></p>",
        "id": 125611553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560709
    },
    {
        "content": "<p>Now to build something of that type you need both an element y of B_1 and a proof that g_1 y = x</p>",
        "id": 125611564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560737
    },
    {
        "content": "<p>and then <code>⟨y,Hy⟩</code> has type X, where Hy is the proof</p>",
        "id": 125611610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560764
    },
    {
        "content": "<p>Or you can build the subset</p>",
        "id": 125611621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560778
    },
    {
        "content": "<p><code>X : set B_1 := {y : B_1 | g_1 y = x}</code></p>",
        "id": 125611635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560810
    },
    {
        "content": "<p>but now X isn't a type, so you can't have things of type X</p>",
        "id": 125611639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560822
    },
    {
        "content": "<p>X is just the function from B_1 to Prop sending z to the statement that g_1 z = x</p>",
        "id": 125611650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560844
    },
    {
        "content": "<p>so now the assertion that y has the property you want is literally just <code>X y</code></p>",
        "id": 125611700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560888
    },
    {
        "content": "<p>but the notation <code>y ∈ X</code> also exists</p>",
        "id": 125611705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560907
    },
    {
        "content": "<p><code>\\in</code></p>",
        "id": 125611706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560911
    },
    {
        "content": "<p>Which of these three answers you want might depend on what you're doing</p>",
        "id": 125611711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560929
    },
    {
        "content": "<p>and when I was learning Lean I found it very frustrating that there didn't seem to be a \"right\" answer for expressing something which in mathematics was unambiguous</p>",
        "id": 125611720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560954
    },
    {
        "content": "<p>but it's something I've now come to terms with</p>",
        "id": 125611724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span>  <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">duh</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span>  <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">ker</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125611796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524561091
    },
    {
        "content": "<p>Ok enough of this, I had better go to work</p>",
        "id": 125611799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524561110
    },
    {
        "content": "<p>but I can't find this in subgroup.lean</p>",
        "id": 125612020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524561442
    },
    {
        "content": "<p>I just found it</p>",
        "id": 125612025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524561467
    },
    {
        "content": "<p><code>mem_ker</code></p>",
        "id": 125612029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524561475
    },
    {
        "content": "<p>not a simp lemma, presumably because it relies on f</p>",
        "id": 125612084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524561512
    },
    {
        "content": "<p>so is not part of the simp philosophy</p>",
        "id": 125612087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524561520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think you should open <code>is_group_hom</code></p>",
        "id": 125612111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524561598
    },
    {
        "content": "<p>not least because then you don't have to define <code>ker</code>, it is just there for you</p>",
        "id": 125612155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524561611
    },
    {
        "content": "<p>yes</p>",
        "id": 125612160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524561627
    },
    {
        "content": "<p>I did that 2 minutes ago</p>",
        "id": 125612162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524561634
    },
    {
        "content": "<p>the proof is really stupid funny</p>",
        "id": 125612166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524561648
    },
    {
        "content": "<p>it is almost only <code>apply_assumption</code> and <code>cc</code></p>",
        "id": 125612169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524561660
    },
    {
        "content": "<p>with a very rare <code>rwa</code> or <code>simp</code></p>",
        "id": 125612179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524561674
    }
]