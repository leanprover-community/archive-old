[
    {
        "content": "<p>Is there some way to make <code>calc</code> work with <code>homeomorph</code>? MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">homeomorph</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"n\">homeomorph</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃ₜ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃ₜ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">α</span> <span class=\"err\">≃ₜ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">h</span>\n  <span class=\"bp\">...</span>  <span class=\"err\">≃ₜ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">h</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  homeomorph.trans</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  α</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type : Type 1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  topological_space ?m_1 : Type ?</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 199225731,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590796230
    },
    {
        "content": "<p>I wanted something analogous with <code>equiv</code> today as well, would be great if something like this worked</p>",
        "id": 199225978,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590796444
    },
    {
        "content": "<p>With <code>equiv</code> it does work though (just tested). Something about <code>calc</code> not supplying the right number of arguments to <code>trans</code>?</p>",
        "id": 199225992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590796466
    },
    {
        "content": "<p>It seems that <code>@[trans]</code> doesn't work with non-explicit after explicit ones.</p>",
        "id": 199226045,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590796498
    },
    {
        "content": "<p>That doesn't occur in <code>homeomorph.trans</code> though. Are the <code>[]</code> arguments confusing it?</p>",
        "id": 199226086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590796535
    },
    {
        "content": "<p>/me tests</p>",
        "id": 199226094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590796543
    },
    {
        "content": "<p>I mean that <code>homeomorph α β</code> is actually <code>@homeomorph α β [topological_space α] [topological_space β]</code>, and probably <code>trans</code> can't deal with this.</p>",
        "id": 199226117,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590796562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/homeomorph.2Etrans.20and.20calc/near/199225992\">said</a>:</p>\n<blockquote>\n<p>With <code>equiv</code> it does work though (just tested). Something about <code>calc</code> not supplying the right number of arguments to <code>trans</code>?</p>\n</blockquote>\n<p>Oh! Good to know, I should've actually tried</p>",
        "id": 199226186,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590796598
    },
    {
        "content": "<p>Here is the error with <code>pp.all</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">homeomorph</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"n\">α</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">α</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"n\">l_1</span>\n</code></pre></div>",
        "id": 199226190,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590796603
    },
    {
        "content": "<p>I tried making a copy of <code>homeomorph.trans</code> with all the <code>[]</code> arguments turned to <code>{}</code> and it didn't help.</p>",
        "id": 199226218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590796640
    },
    {
        "content": "<p>I've used <code>calc</code> successfully with a pretty complicated <code>[trans]</code> lemma type before and it worked, so not sure what is going on, or how <code>calc</code> decides how to build the application...</p>",
        "id": 199226361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590796765
    },
    {
        "content": "<p>I feel like I must be doing something very dumb, but I can't figure out what...</p>",
        "id": 199226867,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590797156
    },
    {
        "content": "<p>That bad application looks like something that has to be fixed in C++</p>",
        "id": 199227007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590797309
    },
    {
        "content": "<p>What confuses me is that this <code>[trans]</code> lemma works fine: <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/data/bij_on.lean#L67\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/data/bij_on.lean#L67</a></p>",
        "id": 199227059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590797385
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        <span class=\"n\">expr</span> <span class=\"n\">trans</span>    <span class=\"o\">=</span> <span class=\"n\">mk_op_fn</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">trans_it</span><span class=\"o\">-&gt;</span><span class=\"n\">m_name</span><span class=\"p\">,</span> <span class=\"n\">trans_it</span><span class=\"o\">-&gt;</span><span class=\"n\">m_num_args</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 199227177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590797517
    },
    {
        "content": "<p>this does not instill confidence</p>",
        "id": 199227199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590797522
    },
    {
        "content": "<p><code>Bij_on.trans</code> has three arguments \"objects that are related\" right before the explicit arguments.</p>",
        "id": 199227271,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590797623
    },
    {
        "content": "<p>Now I'm wondering if the issue is actually with the type of <code>homeomorph</code></p>",
        "id": 199227323,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590797650
    },
    {
        "content": "<p>While <code>homeomorph.trans</code> has three arguments <code>[topological_space ...]</code> between types and explicit args.</p>",
        "id": 199227360,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590797686
    },
    {
        "content": "<p>Yes, I see</p>",
        "id": 199227376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590797702
    },
    {
        "content": "<p>I'm reading the source of calc now. Did you know that when you write <code>a -&gt; b</code> as an expression in a calc proof, it gets turned into <code>implies a b</code>?</p>",
        "id": 199227398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590797711
    },
    {
        "content": "<p>5 is for the three things and the two relations</p>",
        "id": 199227416,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590797716
    },
    {
        "content": "<p>But for <code>homeomorph</code> we have extra args between three and two.</p>",
        "id": 199227518,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590797794
    },
    {
        "content": "<p>well, there is a simple solution...</p>",
        "id": 199227550,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590797839
    },
    {
        "content": "<p>I think what this should do is unify the trans lemma against <code>op _ a b -&gt; op' _ b c -&gt; op'' _ a c</code> where the <code>op</code>'s are specified by the trans lemma and there are <code>op.n_args-2</code> <code>_</code> for each op</p>",
        "id": 199228467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590798926
    },
    {
        "content": "<p>Even this won't actually work here because in this case <code>op</code> also has extra implicit arguments that come after <code>a b</code></p>",
        "id": 199228651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590799084
    },
    {
        "content": "<p>in that case you will have to elaborate the pre-expression <code>op a b</code> or use mk_app to build those parts</p>",
        "id": 199228712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590799201
    },
    {
        "content": "<p>What if we just apply the trans lemma to the two proofs as a <code>pexpr</code>?</p>",
        "id": 199228758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590799224
    },
    {
        "content": "<p>because the typing part of the <code>calc</code> also provides some information, about the form of the subgoals that needs to be used both outside the calc block and to type the proofs</p>",
        "id": 199228796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590799303
    },
    {
        "content": "<p>hmm, I see</p>",
        "id": 199228844,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590799348
    },
    {
        "content": "<p>that is, it is like <code>(trans_lemma (proof1 : op a b) (proof2 : op b c) : op a c)</code></p>",
        "id": 199228854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590799371
    },
    {
        "content": "<p>I'm not sure if those are ascriptions or actual identity functions</p>",
        "id": 199228863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590799402
    },
    {
        "content": "<p>oh weird. There is an actual identity function inserted if it is a 1-step calc, i.e. <code>calc a = b : proof</code> is the same as <code>show a = b, from proof</code>, but not if there are two or more steps. I guess because the transitivity lemma is invoked with <code>a</code> and <code>b</code> as arguments it is considered unnecessary to add an extra <code>show</code></p>",
        "id": 199229167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590799735
    },
    {
        "content": "<p>maybe I should start using <code>calc a = b: rfl</code> for golfing :P</p>",
        "id": 199229192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590799786
    },
    {
        "content": "<p><code>calc</code> should really be a tactic. I'm sure Sebastian would do a better job of it, but I should look into something like <code>user_notation</code> for being able to call tactics without <code>by</code> and allowing metavariables to escape the <code>by</code> block, so that you can implement <code>calc</code> as a tactic. I also think it would enable more elaborate notations for tactics in term mode</p>",
        "id": 199229528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590800122
    },
    {
        "content": "<p>Hrm, I just encountered wanting <code>calc</code> for <code>≃+</code>, and it not working. :-(</p>",
        "id": 200650455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591954334
    },
    {
        "content": "<p>As in \"nobody tagged the transitivity result with <code>trans</code>, or as in \"I tagged it with <code>trans</code> and it still didn't work\"?</p>",
        "id": 200655327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591958172
    },
    {
        "content": "<p>Good point. It had <code>@[trans]</code> all along, but chokes on the typeclass arguments.</p>",
        "id": 200661250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591963380
    },
    {
        "content": "<p>As in trans makes some assumptions about arguments of trans lemmas and we can't make <code>homeomorph.trans</code> satisfy these assumptions</p>",
        "id": 200684263,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591975509
    },
    {
        "content": "<p>So we need to fix calc</p>",
        "id": 200684308,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591975535
    },
    {
        "content": "<p>Added <a href=\"https://github.com/leanprover-community/lean/issues/341\">lean#341</a></p>",
        "id": 201047683,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592328209
    },
    {
        "content": "<p>Smallest pseudoprime to base 2</p>",
        "id": 201049347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592329011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Am I right that this is won't fix in Lean 3?</p>",
        "id": 267492467,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641845148
    },
    {
        "content": "<p>Does it work in Lean 4?</p>",
        "id": 267492494,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641845158
    }
]