[
    {
        "content": "<p>What does 'coe' refer to? Use of 'coe' and related commands seems ubiquitous in the library, but I don't recognize the acronym and (being so short) I can't find it with google either.</p>",
        "id": 214996602,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603990779
    },
    {
        "content": "<p>coercion</p>",
        "id": 214996999,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1603990936
    },
    {
        "content": "<p>see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes\">here</a></p>",
        "id": 214997188,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1603991022
    },
    {
        "content": "<p>every mathematician knows that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>⊆</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}\\subseteq\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.82486em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>. However, if you actually build maths from the axioms, this isn't actually true! Instead, there's a natural function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}\\to\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> and this function actually has a name, but nobody wants to remember the name, so the real number associated to the natural number <code>n</code> is called <code>↑n</code>.</p>",
        "id": 214997577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603991194
    },
    {
        "content": "<p>If <code>n</code> is actually a natural number, and you write <code>n : ℝ</code> in Lean, you won't get a type error, Lean will secretly just apply the coercion. For more information, see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes\">the coercions section of TPIL</a>.</p>",
        "id": 214997855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603991304
    },
    {
        "content": "<p>Ah, okay. I'm familiar with coercion, but not with the abbreviation (and it doesn't really surprise me in retrospect that mathlib is very careful about exactly how that's used.)</p>\n<p>That said, I'm then not sure how I should interpret <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/group_action.html#mul_action.orbit\">the orbit-stabilizer theorem</a> as interpreted in Lean. Or like, what exactly is being coerced here? The orbit to...?</p>",
        "id": 214998292,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603991502
    },
    {
        "content": "<p>(Relatedly, the order of a group/index of a set in a group doesn't seem to have an explicit definition anywhere; if I call <code>sizeof</code> on a possibly-infinite group, will Lean yell at me?)</p>",
        "id": 214998421,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603991548
    },
    {
        "content": "<p>Where's the coercion in orbit-stabilizer?</p>\n<p>Everything has an explicit definition :-) If you have the code up and running in VS Code then you can just right click on something and jump to its definition.</p>",
        "id": 214998899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603991739
    },
    {
        "content": "<p><code>sizeof</code> is some internal function which has nothing to do with the size of anything IIRC. We have the cardinality of a group, which will be a possibly infinite cardinal, and we also have a different size function which takes in an object known to be finite and spits out a natural.</p>",
        "id": 214999164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603991830
    },
    {
        "content": "<p>We might even have a third size function which takes an object not known to be finite, and spits out a natural, which will be 0 if the size is infinite.</p>",
        "id": 214999224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603991857
    },
    {
        "content": "<p>(but this function might not be on the master branch)</p>",
        "id": 214999245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603991875
    },
    {
        "content": "<p>Sure, but that doesn't mean it'll be a <em>legible</em> definition :V. </p>\n<p>Oh, whoops, <code>sizeof</code> is the byte of the memory type isn't it lol. Either of those are good; I'm trying to implement the class equation for fun/for practice</p>",
        "id": 214999431,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603991939
    },
    {
        "content": "<p><code>sizeof</code> is an internal function to quantify how complication a value of a type is. The size of <code>sum.inl t</code> is the size of <code>t</code>plus 1.</p>\n<p>If you want the cardinality of something, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.mk\">docs#cardinal.mk</a> (or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card\">docs#fintype.card</a>)</p>",
        "id": 214999864,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603992110
    },
    {
        "content": "<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.orbit_equiv_quotient_stabilizer\">docs#mul_action.orbit_equiv_quotient_stabilizer</a>?</p>",
        "id": 215000454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603992337
    },
    {
        "content": "<p>The orbit is a set which is coerced to being a type.</p>",
        "id": 215000539,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603992365
    },
    {
        "content": "<p>that's the one I linked, aye </p>\n<p>Ah, okay. That makes sense I ... think....</p>",
        "id": 215001259,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603992709
    },
    {
        "content": "<p>No, you linked to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.orbit\">docs#mul_action.orbit</a>, but that's fine</p>",
        "id": 215001818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603992930
    },
    {
        "content": "<p>Oh, whoops. Serves me right for forgetting my anchors.</p>",
        "id": 215002274,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603993121
    }
]