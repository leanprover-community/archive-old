[
    {
        "content": "<p>Dear All,</p>\n<p>I investigated a bit the <code>circumcenter</code> proof and I noticed something strange.  In the file <code>geometry/euclidean/basic.lean</code>, lemma <code>orthogonal_projection_vadd_smul_vsub_orthogonal_projection</code> has among its assumptions both <code>[nonempty s]</code> and <code>(hp : p1 ∈ s)</code>.  This trickles down (and possibly up) to nonempty assumptions in several other lemmas.   In particular, lemma <code>eq_or_eq_reflection_of_dist_eq</code> in <code>geometry/euclidean/circumcenter.lean</code> has some weirdness in its proof which, I believe, is partly caused by this.  For instance, the <code>have hn</code> and <code>have hc</code> are unnecessary in the proof, but do appear as side goals that disappear on their own.</p>\n<p>I am not fixing it myself, since I am not sure how to proceed: this is how I can \"fix\" <code>orthogonal_projection_vadd_smul_vsub_orthogonal_projection</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exxx</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">affine_subspace</span> <span class=\"n\">ℝ</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"bp\">↥</span><span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">⟩},</span>\n<span class=\"bp\">@</span><span class=\"n\">nonempty_of_inhabited</span> <span class=\"n\">_</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- Adding a vector to a point in the given subspace, then taking the</span>\n<span class=\"sd\">orthogonal projection, produces the original point if the vector is a</span>\n<span class=\"sd\">multiple of the result of subtracting a point's orthogonal projection</span>\n<span class=\"sd\">from that point. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">orthogonal_projection_vadd_smul_vsub_orthogonal_projection</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">affine_subspace</span> <span class=\"n\">ℝ</span> <span class=\"n\">P</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">s.direction</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">orthogonal_projection</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">exxx</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"bp\">@</span><span class=\"n\">orthogonal_projection</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">exxx</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">orthogonal_projection_vadd_eq_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exxx</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hp</span> <span class=\"n\">_</span>\n  <span class=\"o\">(</span><span class=\"n\">submodule.smul_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">vsub_orthogonal_projection_mem_direction_orthogonal</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">exxx</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which does not look too good...</p>",
        "id": 242019395,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623216454
    },
    {
        "content": "<p>For data-carrying typeclasses, this kind of transformation is generally not a good idea. Despite the apparent redundancy you should keep the typeclass arguments even though the hypotheses imply them. For <code>Prop</code>-classes it's not as much of a problem but it's still not really worthwhile. You can remove the typeclass arguments and use <code>haveI</code> to discharge them if they stop appearing in the types and only end up in the proof.</p>",
        "id": 242019596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623216690
    },
    {
        "content": "<p>Ok, although, actually, the lines <code>have hn</code> and <code>have hc</code> are entirely redundant in the proof: Lean takes care of proving those side goals, even without assuming them.</p>",
        "id": 242019682,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623216782
    },
    {
        "content": "<p>Maybe I should simply remove the unnecessary lines.  Besides, I only looked at this file since it timed out at some point.</p>",
        "id": 242019700,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623216811
    },
    {
        "content": "<p>I wasn't able to find any theorems that had <code>nonempty s</code> assumptions which did not also mention <code>orthogonal_projection</code> or <code>reflection</code></p>",
        "id": 242019821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623216957
    },
    {
        "content": "<p>Here is a simple shortening: <a href=\"https://github.com/leanprover-community/mathlib/issues/7852\">#7852</a>.</p>",
        "id": 242020007,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623217175
    },
    {
        "content": "<p>In any case, I will no longer investigate this <code>nonempty + member</code> issue.  Mario, I think that what you are saying is that the strangeness is not so evil and that I should simply live with it, right?  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 242020111,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623217294
    },
    {
        "content": "<p>it's \"more general\" for a very weird definition of general</p>",
        "id": 242020826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623218177
    },
    {
        "content": "<p>I was the one who introduced all these <code>nonempty</code>s, in <a href=\"https://github.com/leanprover-community/mathlib/issues/5408\">#5408</a>.  I wanted to be able to define the orthogonal projection only when it made sense (which requires <code>nonempty</code> and <code>complete_space</code>), rather than have it always be defined and take on a junk value when it didn't make sense.</p>",
        "id": 242093497,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623256162
    },
    {
        "content": "<p>Heather, it certainly makes sense.  I just was hoping that having an element in a type would \"magically\" produce a nonempty instance.  I realize that this is probably not a good idea, though!</p>",
        "id": 242104893,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623261204
    }
]