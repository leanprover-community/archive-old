[
    {
        "content": "<p>In <code>linear_algebra.free_module.finite.basic</code> (how can I link a file and not a declaration?!) we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.finite.of_basis\">docs#module.finite.of_basis</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.module.finite.of_basis</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module.finite</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I wrote this, but I don't remember why I made it a lemma and not an instance. The easiest reason is that if it is an instance we get an error in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.supr_generalized_eigenspace_eq_top\">docs#module.End.supr_generalized_eigenspace_eq_top</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eigenspace.lean</span><span class=\"o\">:</span><span class=\"mi\">526</span><span class=\"o\">:</span><span class=\"mi\">4</span>\n<span class=\"n\">maximum</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span>\n</code></pre></div>\n<p>I don't see the problem, I tried with <code>set_option trace.class_instances true</code>, but the output is too long. Does someone see what is going wrong?</p>",
        "id": 264704112,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639401590
    },
    {
        "content": "<p><code>module.finite R M</code> doesn't mention the basis <code>b</code>.</p>",
        "id": 264704243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639401646
    },
    {
        "content": "<p>So the TC system has no way to find it.</p>",
        "id": 264704265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639401656
    },
    {
        "content": "<p><em>If</em> there was also some form of forward search, which sees <code>basis ι R M</code> in your context, and finds <code>[fintype ι]</code> and consequently invokes this instance, then that would be great. But that's not how TC inference works in Lean 3. It only works backwards from the goal.</p>",
        "id": 264704369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639401721
    },
    {
        "content": "<p>Ah, I see, I thought it was somehow creating a loop.</p>",
        "id": 264704612,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639401841
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/10757\">#10757</a> I've added the instance at least for <code>fin n → R</code>, that seems very reasonable. (Indeed it golfs at least one proof.)</p>",
        "id": 264706686,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639402912
    },
    {
        "content": "<p>Yeah, you can certainly add instances for special cases.</p>",
        "id": 264706832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639402972
    },
    {
        "content": "<p>You can even generalize <code>fin n</code> to <code>ι</code> + <code>[fintype ι]</code>.</p>",
        "id": 264706867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639402993
    },
    {
        "content": "<p>Do we have an instance for <code>Π i, M i</code> with <code>[fintype ι]</code> <code>[∀ i, module.finite R (M i)]</code>?</p>",
        "id": 264707913,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639403486
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/finite_dimensional.html#finite_dimensional.finite_dimensional_pi\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/finite_dimensional.html#finite_dimensional.finite_dimensional_pi</a></p>",
        "id": 264708064,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639403550
    },
    {
        "content": "<p><code>finite_dimensional</code> is now defined to be <code>module.finite</code>, so in <a href=\"https://github.com/leanprover-community/mathlib/pull/10757\">#10757</a> I generalize <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.finite_dimensional_pi\">docs#finite_dimensional.finite_dimensional_pi</a> (that is for <code>division_ring</code> to any <code>comm_ring</code>. It is a <code>Prop</code>, so I don't think it is a problem to have both of them.<br>\nSooner or later I will refactor <code>linear_algebra.finite_dimensional</code> to move all the generalizable  results to <code>linear_algebra.free_module.finite.*</code> but it is quite a bit of work because of some problems with the import structure.</p>",
        "id": 264709187,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639404030
    },
    {
        "content": "<p>I wanted to do it one or two months ago but then I got absorbed by <code>flt-regular</code>...</p>",
        "id": 264709229,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639404053
    },
    {
        "content": "<p>OMG I forgot to update the docstring of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional\">docs#finite_dimensional</a>, that still says \"finite_dimensional vector spaces are defined to be noetherian modules\"?! <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 264709472,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639404152
    },
    {
        "content": "<p>Let me fix it.</p>",
        "id": 264709502,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639404164
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10758\">#10758</a> (this PR is just a couple of lines)</p>",
        "id": 264710447,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639404568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/A.20module.20with.20a.20finite.20basis.20is.20finite/near/264704112\">said</a>:</p>\n<blockquote>\n<p><code>linear_algebra.free_module.finite.basic</code> (how can I link a file and not a declaration?!) </p>\n</blockquote>\n<p><a href=\"https://tqft.net/mathlib/linear_algebra/free_module/finite/basic\">file#linear_algebra/free_module/finite/basic</a></p>",
        "id": 264885193,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639499787
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 264887859,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639500833
    }
]