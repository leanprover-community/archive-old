[
    {
        "content": "<p>How do I construct a list of expressions where later entries can depend on earlier ones? Like <code>(A : Sort u) (a : A)</code> as a minimal example... Do I have to use local constants?</p>",
        "id": 123654389,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520947483
    },
    {
        "content": "<p>when you say list of expressions, are you working in <code>meta</code> land?</p>",
        "id": 123654415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947532
    },
    {
        "content": "<p>Yes</p>",
        "id": 123654423,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520947553
    },
    {
        "content": "<p>it's just <code>list expr</code></p>",
        "id": 123654424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947560
    },
    {
        "content": "<p>all that binding stuff is handled by you</p>",
        "id": 123654473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947586
    },
    {
        "content": "<p>Yes, but how is the above example represented for example?</p>",
        "id": 123654481,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520947597
    },
    {
        "content": "<p>the first expr is <code>`(Sort u)</code>, the second is either <code> `(A)</code> or <code>#0</code> depending on whether <code>A</code> is in context</p>",
        "id": 123654502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947671
    },
    {
        "content": "<p>Well at the time I define the list, <code>A</code> is clearly not in context, right?</p>",
        "id": 123654671,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520947865
    },
    {
        "content": "<p>Maybe; perhaps you are planning for when it is. What's your use case?</p>",
        "id": 123654676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947918
    },
    {
        "content": "<p>Just experimenting with the <code>add_inductive</code> API a bit... which is where it should be used as list of parameters or such</p>",
        "id": 123654723,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520947955
    },
    {
        "content": "<p>And <code>meta example : list expr := [\\</code>(Sort 1), \\`(A)]` immediately gives me \"unknown identifier A\"..</p>",
        "id": 123654735,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520947987
    },
    {
        "content": "<p><em>sigh</em> How do I escape backticks here?</p>",
        "id": 123654737,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520948021
    },
    {
        "content": "<p><code>add_inductive</code> doesn't take a list of parameters, it takes <code>ty : expr</code> that specifies the whole type</p>",
        "id": 123654777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948042
    },
    {
        "content": "<p>Since it's a single expression, all the binding is done via <code>expr.pi</code>, and dependencies are done with <code>var</code> (de bruijn variables)</p>",
        "id": 123654787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948093
    },
    {
        "content": "<p>That is, <code>ty</code> should be a closed term</p>",
        "id": 123654810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948154
    },
    {
        "content": "<p>escape backticks with more backticks <code> `` `escaped` `` </code></p>",
        "id": 123654857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948223
    },
    {
        "content": "<p>But it takes a list of constructtors, right?</p>",
        "id": 123654861,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520948228
    },
    {
        "content": "<p>The constructor types are also closed terms</p>",
        "id": 123654865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948249
    },
    {
        "content": "<p>they repeat all the parameters, with the same types</p>",
        "id": 123654868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948266
    },
    {
        "content": "<p>Hm, I'd still like to have a data structure like that...</p>",
        "id": 123654914,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520948310
    },
    {
        "content": "<p>(this is done because constructors may change the binding type, like making things implicit)</p>",
        "id": 123654915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948312
    },
    {
        "content": "<p>Usually, we work in a context, and then it's a <code>list expr</code></p>",
        "id": 123654921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948339
    },
    {
        "content": "<p>the whole tactic state is built around that</p>",
        "id": 123654928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948353
    },
    {
        "content": "<p>that's where local constants come in</p>",
        "id": 123654931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948363
    },
    {
        "content": "<p><code>expr</code> could use a bit more documentation somehow, it's really hard to figure out what local constants are</p>",
        "id": 123654988,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520948414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> Write what you know and PR it to mathlib/docs/</p>",
        "id": 123655582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949396
    },
    {
        "content": "<p>and then ask about what you don't know</p>",
        "id": 123655583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949401
    },
    {
        "content": "<p>we're trying to make some community-based docs in there</p>",
        "id": 123655594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949431
    },
    {
        "content": "<p>informal and hopefully useful</p>",
        "id": 123655599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949449
    },
    {
        "content": "<p>I'll try :)</p>",
        "id": 123655600,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520949462
    },
    {
        "content": "<p>The rule I usually go for is \"if it's not in the reference manual, and it's either not in TPIL/Programming In Lean or it's hard to find, then stick it in mathlib/docs\"</p>",
        "id": 123655643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949515
    },
    {
        "content": "<p>I think it <em>should</em> be in PIL but it's noted as a TODO there</p>",
        "id": 123655655,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1520949591
    },
    {
        "content": "<p>Then I would urge you to create a short text file called expr.md and simply write some background and then what you're stuck on and PR it to that docs dir. You can assume people have read PIL.</p>",
        "id": 123655712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949650
    },
    {
        "content": "<p>What is the purpose of the second <code>name</code> argument to <code>expr.local_const</code>?</p>",
        "id": 123705964,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521040178
    },
    {
        "content": "<p>Ah, got it, pretty printer name...</p>",
        "id": 123706023,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521040224
    }
]