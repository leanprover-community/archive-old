[
    {
        "content": "<p>Hi all,<br>\nI am currently working on formalizing results on finite word automaton (also with <span class=\"user-mention\" data-user-id=\"263407\">@Laurent Bartholdi</span> ) and, ideally, we would like to be able to compute with automata to prove language membership automatically  (by <code>dec_trivial</code>  for example).</p>\n<p>The current definition (provided by <span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span> ) of NFAs in mathlib uses sets and does not make any assumption on the decidability of the underlying types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An NFA is a set of states (`σ`), a transition function from state to state labelled by the</span>\n<span class=\"sd\">  alphabet (`step`), a starting state (`start`) and a set of acceptance states (`accept`).</span>\n<span class=\"sd\">  Note the transition function sends a state to a `set` of states. These are the states that it</span>\n<span class=\"sd\">  may be sent to. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">NFA</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">accept</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Therefore, if we want to prove a statement of the form <code>my_word \\in NFA.accepts my_automata</code>, we have to unfold all the definitions and do the proof manually where we ideally would like to just do a <code>dec_trivial</code>.</p>\n<p>In a proof assistant like Coq, I would start with a definition of automata based on lists of elements of a decidable type rather than sets <br>\nand simply compute. I am a complete beginner with Lean butI I feel like it's not the idiomatic Lean way to achieve this goal and that I should try to use type classes instead. Any idea/advice on how to do that the <em>Lean way</em> without changing the definitions ?</p>",
        "id": 320198145,
        "sender_full_name": "Arthur Correnson",
        "timestamp": 1673262311
    },
    {
        "content": "<p>Salut ! The idiomatic way to do this would be to show that <code>A.accepts</code> is decidable if <code>∀ a b, decidable_pred (∈ A.step a b)</code>, <code>decidable_pred (∈ A.start)</code>, <code>decidable_pred (∈ A.accept)</code></p>",
        "id": 320198561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673262470
    },
    {
        "content": "<p>Then whenever you have a \"decidable automata\", you can prove the three starting instances <code>step</code>, <code>start</code>, <code>accept</code> and Lean will provide you the <code>accepts</code> one. That might sound like you need to write three times the number of automata you want to evaluate, but in practice I assume you will write a <code>NFA</code> constructor starting from a <code>list</code> (as your message alludes to), in which case you can write three generic decidability instances that will take care of everything for you.</p>",
        "id": 320199178,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673262664
    },
    {
        "content": "<p>Do you have a repository?</p>",
        "id": 320199598,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1673262820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Making.20NFA.20language.20membership.20decidable.20by.20dec_trivial/near/320198561\">said</a>:</p>\n<blockquote>\n<p>Salut ! The idiomatic way to do this would be to show that <code>A.accepts</code> is decidable if <code>∀ a b, decidable_pred (∈ A.step a b)</code>, <code>decidable_pred (∈ A.start)</code>, <code>decidable_pred (∈ A.accept)</code></p>\n</blockquote>\n<p>Thanks for the answer ! Proving these lemmas if the sets are built from lists should be straightforward. I'm not sure how to tell lean to exploit these lemmas tho.</p>",
        "id": 320200960,
        "sender_full_name": "Arthur Correnson",
        "timestamp": 1673263297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Making.20NFA.20language.20membership.20decidable.20by.20dec_trivial/near/320199598\">said</a>:</p>\n<blockquote>\n<p>Do you have a repository?</p>\n</blockquote>\n<p>Only a local one ^^ (for now)</p>",
        "id": 320201125,
        "sender_full_name": "Arthur Correnson",
        "timestamp": 1673263348
    },
    {
        "content": "<p>If I were you, I wouldn't aim for full automation. Instead, I'd let the programmer provide the non-deterministic choices and automate making a proof from that.</p>",
        "id": 320201167,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1673263367
    },
    {
        "content": "<p>I think the instance that <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> suggests is still a good idea</p>",
        "id": 320201266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673263406
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A.accept</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.step</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.start</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.accept</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.accepts</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff</span> <span class=\"n\">some_equivalent_thing_here</span> <span class=\"n\">your_proof_that_it_is_equivalent</span>\n</code></pre></div>\n<p>is how I would start.</p>",
        "id": 320201290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673263417
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/NFA.accepts\">docs#NFA.accepts</a> is a <code>language</code> not a predicate</p>",
        "id": 320201553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673263494
    },
    {
        "content": "<p>Fixed!</p>",
        "id": 320201612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673263509
    },
    {
        "content": "<p>Also σ needs to be finite</p>",
        "id": 320201868,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673263589
    },
    {
        "content": "<p>Only <code>A.accept</code> does</p>",
        "id": 320202449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673263777
    },
    {
        "content": "<p>This might be a good start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidable_pred_mem_eval_from</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.step</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.start</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.eval_from</span> <span class=\"n\">S</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">eval_from</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_pred_mem_eval</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.step</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.start</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.accept</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">NFA.decidable_pred_mem_eval_from</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_pred_mem_accepts</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.step</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.start</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.accept</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">A.accept</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.accepts</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">accepts</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320202848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673263878
    },
    {
        "content": "<p>Isn't <code>dsimp</code> in a decidability instance bad because the <code>eq.rec</code>s won't reduce?</p>",
        "id": 320202996,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673263927
    },
    {
        "content": "<p><code>dsimp</code> doesn't use <code>eq.rec</code>, it uses <code>id</code></p>",
        "id": 320203180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673263994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Making.20NFA.20language.20membership.20decidable.20by.20dec_trivial/near/320201167\">said</a>:</p>\n<blockquote>\n<p>If I were you, I wouldn't aim for full automation. Instead, I'd let the programmer provide the non-deterministic choices and automate making a proof from that.</p>\n</blockquote>\n<p>Just to explain the difference with this approach, non-deterministic choices would involve writing tactic code, probably in the form of a <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_num\">tactic#norm_num</a> extension. This is probably the best solution long term (because Lean is so bad at computing), but much harder to implement and we want the decidability instances either way. So as long as you're not evaluating automata with 100 states or something, I would recommend against it.</p>",
        "id": 320203198,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673264002
    },
    {
        "content": "<p>But also, it's usually easiest to write these instances using bad defeqs, and then clean them up once you've worked out what you need</p>",
        "id": 320203442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673264072
    },
    {
        "content": "<p>Yes, absolutely.</p>",
        "id": 320203496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673264090
    },
    {
        "content": "<p>Thanks a lot for all the helpful advices ! I'll work on it ^^</p>",
        "id": 320203911,
        "sender_full_name": "Arthur Correnson",
        "timestamp": 1673264217
    },
    {
        "content": "<p>Decidability is finicky so keep asking questions if you have more!</p>",
        "id": 320203984,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673264243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Making.20NFA.20language.20membership.20decidable.20by.20dec_trivial/near/320202449\">said</a>:</p>\n<blockquote>\n<p>Only <code>A.accept</code> does</p>\n</blockquote>\n<p>I take it back, this causes annoying typeclass problems.</p>",
        "id": 320204336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673264366
    },
    {
        "content": "<p>I got sniped by this:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fintype.decidable_mem_bUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋃</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff'</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">set.mem_Union₂</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidable_pred_mem_step_set</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.step</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.step_set</span> <span class=\"n\">S</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">fintype.decidable_mem_bUnion</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_pred_mem_eval_from</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.step</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.eval_from</span> <span class=\"n\">S</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">S</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">‹</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)›</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">A.step_set</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_pred_mem_eval</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.step</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.start</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">NFA.decidable_pred_mem_eval_from</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_pred_mem_accepts</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.step</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.start</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.accept</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">A.accepts</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">fintype.decidable_exists_fintype</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>\n</div></div>",
        "id": 320205187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673264626
    },
    {
        "content": "<p>I suspect that <code>decidable_of_iff' (∃ i ∈ S, x ∈ A.step i l) set.mem_Union₂</code> should be a lemma along the lines of <code>fintype.decidable_mem_bUnion</code></p>",
        "id": 320205477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673264719
    },
    {
        "content": "<p>Doesn't seem to exist.</p>",
        "id": 320205678,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673264766
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fintype.decidable_mem_bUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋃</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff'</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">set.mem_Union₂</span>\n</code></pre></div>",
        "id": 320206484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673265013
    },
    {
        "content": "<p>And could we have the same for <code>finset.sup</code>/<code>finset.inf</code>/<code>finset.bUnion</code>?</p>",
        "id": 320206606,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673265061
    },
    {
        "content": "<p>Can you also not have <code>s : Π a (h : p a), set β</code> in <code>fintype.decidable_mem_bUnion</code>?</p>",
        "id": 320206864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673265147
    },
    {
        "content": "<p>I think that behaves poorly if <code>s</code> is non-dependent</p>",
        "id": 320207357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673265343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Making.20NFA.20language.20membership.20decidable.20by.20dec_trivial/near/320206606\">said</a>:</p>\n<blockquote>\n<p>And could we have the same for <code>finset.sup</code>/<code>finset.inf</code>/<code>finset.bUnion</code>?</p>\n</blockquote>\n<p>Or even for <code>list.foldl</code>, which appeared above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fintype.decidable_pred_mem_list_foldl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">sf</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">l.foldl</span> <span class=\"n\">sf</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">‹</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)›</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320207472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673265369
    }
]