[
    {
        "content": "<p>I have a <code>finset</code> of rationals which I know is nonempty. How do I find its minimum element?</p>",
        "id": 126161321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525574504
    },
    {
        "content": "<p>I forget if there is a <code>max</code> operation on finsets, but you can <code>fold</code> with <code>max</code></p>",
        "id": 126163639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525580331
    },
    {
        "content": "<blockquote>\n<p>I have a <code>finset</code> of rationals which I know is nonempty. How do I find its minimum element?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> See <a href=\"https://github.com/spl/tts/blob/master/src/data/finset/fresh.lean#L121-L154\" target=\"_blank\" title=\"https://github.com/spl/tts/blob/master/src/data/finset/fresh.lean#L121-L154\">https://github.com/spl/tts/blob/master/src/data/finset/fresh.lean#L121-L154</a></p>\n<p>I'd like to see something like this with <code>max</code> and <code>min</code> in mathlib. I haven't proposed it because I wasn't sure it was worth it, but, since you are also looking for it, perhaps it is.</p>",
        "id": 126170875,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525598917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Is this something (after replacing <code>max</code> with <code>min</code>) that would be useful to you? I can work on it next.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fold</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">id</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">max_empty</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">max</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">max_insert</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">max</span><span class=\"o\">,</span> <span class=\"n\">fold_insert</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">max_singleton</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">max</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">le_max_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">max_empty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n     <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">max_insert</span> <span class=\"n\">hnm</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">le_max_of_mem</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">max_empty</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hins</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">insert</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n     <span class=\"k\">begin</span>\n       <span class=\"n\">rw</span> <span class=\"n\">max_insert</span> <span class=\"n\">hnm</span><span class=\"o\">,</span>\n       <span class=\"n\">cases</span> <span class=\"n\">mem_insert</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hins</span><span class=\"o\">,</span>\n       <span class=\"n\">case</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">le_max_left</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n       <span class=\"n\">case</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n     <span class=\"kn\">end</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">finset</span>\n</pre></div>",
        "id": 126212361,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525694289
    },
    {
        "content": "<p>What's this <code>{a}</code> syntax in <code>max b {a}</code>?</p>",
        "id": 126212689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525694945
    },
    {
        "content": "<p>It's notation for a singleton.</p>",
        "id": 126212753,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525695067
    },
    {
        "content": "<p>Actually, to correct myself, <code>{a}</code> is a singleton, but the notation comes from <code>init/core.lean</code>, I think:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Type class used to implement the notation { a ∈ c | p a } -/</span>\n<span class=\"n\">class</span> <span class=\"n\">has_sep</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 126212815,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525695219
    },
    {
        "content": "<p>Oh</p>",
        "id": 126212817,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525695231
    },
    {
        "content": "<p>I was confused, I thought it was an implicit parameter right of colon</p>",
        "id": 126212857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525695250
    },
    {
        "content": "<p>The theorem even has \"singleton\" in its name...</p>",
        "id": 126212858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525695272
    },
    {
        "content": "<p>Hmm, maybe it's not from <code>has_sep</code>. I thought I knew, but I don't know anymore.</p>",
        "id": 126212913,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525695387
    },
    {
        "content": "<p>Ah, right, it's this one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Type classes has_emptyc and has_insert are</span>\n<span class=\"cm\">   used to implement polymorphic notation for collections.</span>\n<span class=\"cm\">   Example: {a, b, c}. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">has_emptyc</span>   <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">emptyc</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">class</span> <span class=\"n\">has_insert</span>   <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 126212976,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525695546
    },
    {
        "content": "<p>So, if your type has <code>has_emptyc</code> and <code>has_insert</code> instances, you can use the <code>{..., ...}</code> notation.</p>",
        "id": 126212990,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525695587
    },
    {
        "content": "<p>I agree that it can be confusing.</p>",
        "id": 126213048,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525695642
    },
    {
        "content": "<p>It's my fault, I wasn't paying enough attention. I shouldn't be watching Zulip while grading Sage notebooks (<span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> when will we get auto-grading Sage notebooks so that we can focus on understanding Lean code?).</p>",
        "id": 126213133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525695801
    },
    {
        "content": "<p>I don't think it's a great idea to overload <code>{...}</code> in this way, even if it isn't ambiguous to the parser. But it is notationally short, which makes it convenient.</p>",
        "id": 126213255,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525696075
    },
    {
        "content": "<p>And it's the maths notations, so it should win over any other interpretation</p>",
        "id": 126213294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525696111
    },
    {
        "content": "<p>True, but it doesn't see as much usage as implicit parameters, and it would be better to reserve short notation for things you type/read a lot.</p>",
        "id": 126213343,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525696203
    },
    {
        "content": "<p>You pretty much only use this notation for singletons or examples.</p>",
        "id": 126213355,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525696224
    },
    {
        "content": "<p>PR for <code>finset.max</code> and <code>finset.min</code>: <a href=\"https://github.com/leanprover/mathlib/pull/133\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/133\">https://github.com/leanprover/mathlib/pull/133</a></p>",
        "id": 126214292,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525698044
    },
    {
        "content": "<p>Nice. I will probably use it to build new normed spaces out of finitely many old ones.</p>",
        "id": 126215835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525700740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> I think this approach with a starting element (<code>a</code>) would be fine for my current application, since I have a particular element which I know belongs to the set. From a general math perspective, though, it's odd not to be able to talk about the minimum of a nonempty set, without first choosing an element of the set.</p>",
        "id": 126223645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525712415
    },
    {
        "content": "<p>I've been considering an approach that starts from <code>fold1</code>of an associative, commutative operation on a nonempty multiset, though this <code>fold1</code> was quite a challenge to define.</p>",
        "id": 126223715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525712607
    },
    {
        "content": "<p>But <code>fold1</code> seems like something one ought to have anyways.</p>",
        "id": 126223856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525712857
    },
    {
        "content": "<p>A friend suggested that I could just sort the list (<code>finset.sort</code>) and take the first element</p>",
        "id": 126223869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525712877
    },
    {
        "content": "<p>My thinking is that you can write different variations using <code>max [decidable_linear_order α] : α → finset α → α</code>. I believe this definition of <code>max</code> is the most general and least prescriptive since only <code>[decidable_linear_order α]</code> is required.</p>",
        "id": 126251600,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525761700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <a href=\"https://github.com/leanprover/mathlib/pull/133#issuecomment-387110828\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/133#issuecomment-387110828\">suggested</a> <code>max [decidable_linear_order α] [inhabited α] : finset α → α</code>, but I'm not sure if that's better (<a href=\"https://github.com/leanprover/mathlib/pull/133#issuecomment-387300724\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/133#issuecomment-387300724\">my response</a>).</p>",
        "id": 126251644,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525761749
    },
    {
        "content": "<p>It is not true that <code>max</code> as suggested by Johannes is the same as <code>max_inhabited</code> that you wrote. If <code>s</code> is nonempty, then <code>max (default A) s</code> is the max of <code>default A</code> and the elements of <code>s</code>, while Johannes's <code>max</code> is the max of the elements of <code>s</code> only. It is closer to Reid's suggested max operation, except that the nonempty constraint is replaced by a default value.</p>",
        "id": 126251859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762242
    },
    {
        "content": "<p>Right. See the bottom of my response.</p>",
        "id": 126251868,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525762320
    },
    {
        "content": "<p>Given johannes's <code>max</code> function, you could recover your <code>max</code> function as <code>sean_max a s := @johannes_max A _ &lt;a&gt; (insert a s)</code></p>",
        "id": 126251909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762350
    },
    {
        "content": "<p>So they are equivalent?</p>",
        "id": 126251917,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525762384
    },
    {
        "content": "<p>Johannes's definition is more complicated since it requires casing on whether the list is empty</p>",
        "id": 126251924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762417
    },
    {
        "content": "<p>What is the definition?</p>",
        "id": 126251929,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525762440
    },
    {
        "content": "<p>there is not an easy expression for <code>johannes_max</code> using <code>sean_max</code>, you would need another quot.lift</p>",
        "id": 126251966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762444
    },
    {
        "content": "<p>You have to start from list, define <code>foldl1</code> and work your way up</p>",
        "id": 126251969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762477
    },
    {
        "content": "<p>Ah, something like that.</p>",
        "id": 126251977,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525762504
    },
    {
        "content": "<p>Alternatively, you could <code>sean_max</code> over <code>option A</code></p>",
        "id": 126251983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762514
    },
    {
        "content": "<p>where <code>none</code> has the appropriate interpretation as a neutral element for max</p>",
        "id": 126251987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762532
    },
    {
        "content": "<p>You mean map/image <code>some</code> over the <code>finset</code>?</p>",
        "id": 126252030,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525762564
    },
    {
        "content": "<p>and that would give you both the partial <code>max</code> function and the inhabited max function (Johannes's max)</p>",
        "id": 126252034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762567
    },
    {
        "content": "<p>Any semigroup operation extends to a monoid if you add a neutral element</p>",
        "id": 126252047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762615
    },
    {
        "content": "<p>That means that you can take a semigroup operation like <code>max</code> and extend it to <code>option_max : option A -&gt; option A -&gt; option A</code> that is a monoid operation</p>",
        "id": 126252058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762666
    },
    {
        "content": "<p>and then you can <code>finset.prod</code> over this</p>",
        "id": 126252096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762683
    },
    {
        "content": "<p>This is essentially the same as adjoining a <code>-inf</code> element to the set</p>",
        "id": 126252112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762729
    },
    {
        "content": "<p>Can you not <code>finset.image some</code>?</p>",
        "id": 126252114,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525762742
    },
    {
        "content": "<p>That would be the input to the fold, yes</p>",
        "id": 126252120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762771
    },
    {
        "content": "<p>Right, okay.</p>",
        "id": 126252124,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525762780
    },
    {
        "content": "<p>The nice thing about this approach is that it naturally handles partiality, you don't need the <code>inhabited</code> thing; but it's easy to implement the inhabited version using <code>option.iget</code></p>",
        "id": 126252178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525762852
    },
    {
        "content": "<p>Personally, I'm not a big fan of <code>inhabited</code>. I haven't found a need for it in anything I've done, and I feel like, if you need an <code>inhabited</code> type, why not use <code>option</code> in the first place?</p>",
        "id": 126252244,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525762946
    },
    {
        "content": "<p>But I'm happy to see <em>some</em> version of <code>finset.max</code> and <code>finset.min</code> go into mathlib, so I don't feel that strongly about which one... as long as it works with <code>nat</code>. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 126252258,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525763014
    },
    {
        "content": "<p>I have a similar antipathy to <code>inhabited</code>, it's a somewhat lazy way to totalize functions like division on nonempty domains.</p>",
        "id": 126252472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525763418
    },
    {
        "content": "<p>Arguments in favor would say that composing them is a lot cleaner than the monad stuff</p>",
        "id": 126252480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525763460
    },
    {
        "content": "<p>i.e. <code>(x + 2) / (y + 2 / z)</code> is easier to read than <code>do a &lt;- 2 / z, (x + 2) / (y + a)</code> or some such</p>",
        "id": 126252500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525763513
    },
    {
        "content": "<p>The best situation is if you are literally working in a sup_bot semilattice, in which case you don't have to cheat and get a proper function</p>",
        "id": 126252566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525763616
    },
    {
        "content": "<p>Working on <code>sup_bot_semilattice</code> is indeed very nice, e.g.  <a href=\"https://github.com/johoelzl/mason-stother/blob/master/Sup_fin.lean\" target=\"_blank\" title=\"https://github.com/johoelzl/mason-stother/blob/master/Sup_fin.lean\">https://github.com/johoelzl/mason-stother/blob/master/Sup_fin.lean</a> But we don't have a lot of ordered types having this structure, I guess <code>nat</code>, <code>fin</code>, and <code>ennreal</code>.</p>",
        "id": 126253973,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525766634
    },
    {
        "content": "<p>I prefer the <code>inhabited</code> version over <code>option</code>. With <code>inhabited</code> you get not only a nicer syntax, but a lot of cases etc can be easily done in the proofs, while for <code>option</code> we are often forced to do it on the term itself.</p>",
        "id": 126254143,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525766916
    },
    {
        "content": "<p>Just thinking about it a little more... It seems like there are two goals here: one for a <code>max</code> with no requirements other than <code>decidable_linear_order</code> (me) and one for a <code>max</code> that does not need the extra <code>a : α</code> (Johannes and Reid). In the latter case, which is more useful: an <code>inhabited α</code> predicate or a non-empty predicate (e.g. <code>s ≠ ∅</code> or <code>∃ a : α, a ∈ s</code>)? I'm guessing the non-empty predicate is more useful because <code>inhabited α</code> doesn't tell you anything about the <code>finset</code> itself, and if you use the <code>inhabited α</code> version and want to know that you are not getting the <code>inhabited.default</code>, you need to know if the <code>finset</code> is empty anyway.</p>",
        "id": 126265296,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525787443
    },
    {
        "content": "<p>It is the other way round, the <code>inhabited α</code> is more useful from a user perspective. We don't need to give <code>max</code> more information than necessary. For <code>max</code> it is enough to show that <code>α</code> is inhabited, it is <strong>not</strong> necessary to show that <code>s</code> is inhabited (from which at least <code>nonempty α</code> follows). It is very annoying when the user always needs to provide a prove that <code>s</code> is not empty, this is exactly what I want to avoid.<br>\nAfter all, we are in a theorem prover! Carrying around this information explicitly is not necessary, as usually we can show it in a proof.</p>",
        "id": 126265564,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525787907
    },
    {
        "content": "<p>My only worry about <code>inhabited</code> is that as, on the one hand, it is not a <code>Prop</code>, and on the other hand, we may not always have a canonical <code>inhabited</code> instance at hand and need to construct one from the knowledge that <code>s</code> is nonempty, we might end up in a situation where Lean thinks <code>max s</code> depends on the choice of <code>inhabited</code> instance, even though we know it doesn't really.</p>",
        "id": 126273572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525799562
    },
    {
        "content": "<p>On the other hand, taking a <code>nonempty α</code> instance would make <code>max</code> noncomputable, which is maybe sort of okay for a theorem prover but not very attractive for programming use.</p>",
        "id": 126273648,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525799660
    },
    {
        "content": "<p>(As it turns out, the theorem I really need has the conclusion <code>∃x ∈ s, ∀y ∈ s, f y ≤ f x</code>, and for this, we need <code>s</code> to be nonempty anyways.)</p>",
        "id": 126273684,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525799746
    },
    {
        "content": "<p>The advantage of <code>s ≠ ∅</code> here is that it is a <code>Prop</code>, but also sufficient to define <code>max</code> computably</p>",
        "id": 126273773,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525799872
    },
    {
        "content": "<p>I'm kind of tempted to make <code>s ≠ ∅</code> into a type class argument, actually, but maybe that is going too far?</p>",
        "id": 126274645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525800964
    },
    {
        "content": "<p>Of course a theorem like <code>s ≠ ∅ -&gt; ∃x ∈ s, ∀y ∈ s, f y ≤ f x</code> is a nice fit for <code>max</code> with such an assumption. I'm worried about complicated constructions, where you have an elaborate proof that <code>s</code> is not empty. Putting <code>s ≠ ∅</code> in a type class argument makes also some constructions very unpleasent, like using <code>finset.filter</code></p>",
        "id": 126274905,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525801294
    },
    {
        "content": "<p>Maybe the version returning <code>option</code> is most flexible then. If you want the version that uses <code>inhabited</code>, you can apply <code>option.iget</code>.</p>",
        "id": 126322044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525882576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Are you referring to <code>max [decidable_linear_order α] : finset α → option α</code>. that returns <code>none</code> for an empty <code>finset</code> and <code>some a</code> for a non-empty <code>finset</code>? That would be fine with me.</p>",
        "id": 126330803,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525895037
    },
    {
        "content": "<p>Yes. Or more generally, <code>fold1 f : finset α → option α</code> for an associative and commutative operation <code>f</code>.</p>",
        "id": 126332611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525897255
    },
    {
        "content": "<p>For those not following along on GitHub, <a href=\"https://github.com/leanprover/mathlib/pull/133\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/133\">leanprove/mathlib#133</a> has been updated with new versions of the definitions under discussion:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>I think this proposal is better than the original. Thanks to everyone for the discussion and collaboration. Feedback welcome.</p>",
        "id": 126920643,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526992594
    },
    {
        "content": "<p>So, how do we use this new toy? Say I want to talk about the function \"max of coordinates on ℝ^n\", assuming n is a British natural number, so I get a well defined function from ℝ^n to ℝ</p>",
        "id": 126981683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527089458
    },
    {
        "content": "<p>I can't even find the lemma saying the image of <code>finset</code> is a <code>finset</code></p>",
        "id": 126982922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527091042
    },
    {
        "content": "<p>Its already in the type of <code>finset.image</code>.<br>\nTo do what you want: <code>λx, (univ.image (λn, x n)).max.iget</code></p>",
        "id": 126984645,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527093493
    }
]