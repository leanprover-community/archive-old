[
    {
        "content": "<p>Woah... Lean confused by the difference between zero and one?</p>\n<div class=\"codehilite\"><pre><span></span>error: type mismatch at application\n  0\nterm\n  nat.has_one\nhas type\n  has_one ℕ\nbut is expected to have type\n  has_zero ℕ\n</pre></div>",
        "id": 157906397,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549672658
    },
    {
        "content": "<p>This is generated in the (apparently innocuous?)</p>\n<div class=\"codehilite\"><pre><span></span>lemma Ico_prod_split_first (n m : ℕ) (h₁ : n &lt; m) (f : ℕ → β) :\n(Ico n m).prod f = f n * (Ico (n+1) m).prod f := ...\n</pre></div>\n\n\n<p>The error appears on the <code>1</code> in <code>Ico (n+1)</code>.</p>",
        "id": 157906459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549672716
    },
    {
        "content": "<p>Ahh</p>",
        "id": 157906475,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549672751
    },
    {
        "content": "<p>it is <code>to_additive</code>s fault.</p>",
        "id": 157906476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549672760
    },
    {
        "content": "<p>that happens, especially when you mix your type beta with nat</p>",
        "id": 157906642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549672927
    },
    {
        "content": "<p>there are lots of examples in <code>group_power</code> of manual to_additive</p>",
        "id": 157906647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549672945
    },
    {
        "content": "<p>so it's okay to just reprove it, copying and pasting the proof?</p>",
        "id": 157906771,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549673108
    },
    {
        "content": "<p>deja vu</p>",
        "id": 157906844,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549673200
    },
    {
        "content": "<p>this all feels like discussed before</p>",
        "id": 157906845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549673207
    },
    {
        "content": "<p>Sorry, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, but of course I can't read everything here.</p>",
        "id": 157907024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549673459
    },
    {
        "content": "<p>better than copy and paste the proof, you will notice that most of the <code>group_power</code> theorems are proven by applying the original theorem via <code>multiplicative</code></p>",
        "id": 157907272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549673862
    },
    {
        "content": "<p>got it, thanks, that works no problem</p>",
        "id": 157907899,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549674796
    }
]