[
    {
        "content": "<p>I'm looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_on.map_sum_le\">docs#convex_on.map_sum_le</a> and am wondering if we have a concave Jensen available? Or maybe a convenient way to go from one to the other?</p>",
        "id": 254537642,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632404823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> is working very hard on refactoring the convexity library. I think this will fall out of his refactor.</p>",
        "id": 254537699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632404857
    },
    {
        "content": "<p>Ah! Fascinating (and good news!). So in practice right now I'm stuck with the convex version right?</p>",
        "id": 254537842,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632404910
    },
    {
        "content": "<p>Eheheh, that's what I'm doing at this very moment. Little preview for the curious.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Convex **Jensen's inequality**, `finset.linear_combination` version. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">convex_on.map_linear_combination_le</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">convex_on</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t.linear_combination</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">t.linear_combination</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hmem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span> <span class=\"bp\">≤</span> <span class=\"n\">p.2</span><span class=\"o\">},</span>\n    <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hmem</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">le_rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">hf.convex_epigraph.linear_combination_mem</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span> <span class=\"n\">hmem'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_combination</span><span class=\"o\">,</span> <span class=\"n\">function.comp</span><span class=\"o\">,</span> <span class=\"n\">prod.smul_fst</span><span class=\"o\">,</span> <span class=\"n\">prod.fst_sum</span><span class=\"o\">,</span>\n      <span class=\"n\">prod.smul_snd</span><span class=\"o\">,</span> <span class=\"n\">prod.snd_sum</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Concave **Jensen's inequality**, `finset.linear_combination` version. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">concave_on.le_map_linear_combination</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">concave_on</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t.linear_combination</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t.linear_combination</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">convex_on.map_linear_combination_le</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hf</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span> <span class=\"n\">hmem</span>\n</code></pre></div>",
        "id": 254537884,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632404930
    },
    {
        "content": "<p>I swear I didn't even scroll in VScode to pick that.</p>",
        "id": 254537915,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632404948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> when do you expect this to land on master?</p>",
        "id": 254538147,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632405038
    },
    {
        "content": "<p>oh wait going from one to the other is trivial, just use (-f) and multiply by -1 right.</p>",
        "id": 254538529,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632405221
    },
    {
        "content": "<p>You can make do like that for now.</p>",
        "id": 254538568,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632405238
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 254538638,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632405253
    },
    {
        "content": "<p>Erhm... This depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a> for <code>linear_combination</code> to be under that form, and there's currently discussion so as to whether we even want <code>linear_combination</code>. I was expecting <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a> to be merged quickly but the events took another turn, so I will probably open this PR tomorrow and arrange myself so that it can go through before <a href=\"https://github.com/leanprover-community/mathlib/issues/9268\">#9268</a>. So I'd say a week?</p>",
        "id": 254538703,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632405300
    },
    {
        "content": "<p>This is fine, I think formalizing some proofs using the current version and a manual transformation for concave functions shouldn't be too hard to port to this new format <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 254539129,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632405479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> how does one go about proving that a function is convex? do we have proofs for the usual suspects (xlogx, -logx, x^a or -x^a, real.exp(a*x)) avaialble?</p>",
        "id": 254545821,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632407830
    },
    {
        "content": "<p>Your heaven lies here: <code>analysis.convex.specific_functions</code>. Many functions are still missing, though.</p>",
        "id": 254546812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632408147
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 254584065,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1632422627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span> Btw, this was added in <a href=\"https://github.com/leanprover-community/mathlib/issues/9356\">#9356</a> a couple of days ago</p>",
        "id": 255560918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633003539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yes! Already using it !! <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 255561010,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1633003573
    },
    {
        "content": "<p>This is what I call short cycle production!</p>",
        "id": 255561055,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633003606
    }
]