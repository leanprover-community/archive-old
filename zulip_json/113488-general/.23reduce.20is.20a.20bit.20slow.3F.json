[
    {
        "content": "<p>These reductions work a bit slow for me:</p>\n<div class=\"codehilite\"><pre><span></span>#reduce (10 : fin 3) -- over 10 seconds\n#reduce (15 : fin 3) -- over 5 minutes\n</pre></div>\n\n\n<p>Is this normal? :-)</p>",
        "id": 129783924,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1531786475
    },
    {
        "content": "<p>It is. Natural numbers are represented in unary notation so arithmetic on them in the kernel (not the VM) is bound to be slow. Numerals such as <code>(15 : fin 3)</code> are represented using the <code>bit0</code>, <code>bit1</code> and <code>zero</code> functions as <code>bit1 (bit1 (bit1 (bit1 zero)))</code> and <code>bit1 (x : a) := x + x + 1</code>. You're a getting a bunch of additions and each one is one addition and one modulo.</p>",
        "id": 129784259,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531786995
    },
    {
        "content": "<p>yes, #reduce is very slow, particularly for well founded recursive functions like mod. I would estimate this is something like cubic in the <em>value</em> of <code>n : fin 3</code> there</p>",
        "id": 129784278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531787020
    },
    {
        "content": "<p>If you want to test your definitions, I recommend <code>#eval</code></p>",
        "id": 129784327,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531787043
    },
    {
        "content": "<p>It uses the virtual machine instead of the kernel to do its computations.</p>",
        "id": 129784340,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531787068
    },
    {
        "content": "<p>Ah, #eval is probably what I want. Thanks! <br>\n@Mario, I figured unary numbers were the reason, but I'm not sure cubic is enough to explain it. Could it also be exponential due to call-by-name somewhere? Does lean use call-by-name?</p>",
        "id": 129784454,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1531787227
    },
    {
        "content": "<p>cubic in the value of n means exponential in the length</p>",
        "id": 129784467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531787259
    },
    {
        "content": "<p>And yes, #reduce is essentially call by name execution, although it's not exactly implemented that way</p>",
        "id": 129784536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531787317
    },
    {
        "content": "<p>Not sure what you mean, the value is 15: 15 cubed is not a large number. Do you call value something else?</p>",
        "id": 129784540,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1531787321
    },
    {
        "content": "<p>I mean 15 cubed</p>",
        "id": 129784547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531787336
    },
    {
        "content": "<p>but there is also a large constant factor due to the kernel manipulation of expressions at every stage (the expressions get huge, like 100000 lines long)</p>",
        "id": 129784583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531787390
    },
    {
        "content": "<p>Ok, the expression (1 + 1 + 1 + 1 ... : fin 20) has clear exponential scaling: the time ~exactly doubles with each +1. The binary encoding (as explained by Simon) made the timings of the original example much more random-looking.</p>",
        "id": 129785191,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1531788125
    },
    {
        "content": "<p>actually on second thought I'm not sure if it is really exponential, since it is in fact <code>bit0</code> on <code>fin 3</code>, which should be constant time - it does not first calculate <code>15 : nat</code> and then turn it into a <code>fin 3</code></p>",
        "id": 129785300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531788263
    },
    {
        "content": "<p>Given that it's approximately as slow as the empirically exponential-time (1 + 1 + ... ), I say it's almost certainly the same. Mod 3 won't help if all the call-by-name-duplication of the terms happens before you have a chance to compute the mod.</p>",
        "id": 129785576,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1531788642
    },
    {
        "content": "<p>I honestly don't know exactly what kind of optimization if any is in place for duplication caused by beta reduction, but it is surely nonzero - I'm pretty sure there is a whnf_core cache which allows to avoid repeated calculation of normal forms</p>",
        "id": 129785673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531788779
    },
    {
        "content": "<p>Still, because we're talking about <code>fin</code>, you perform the modulo at every addition</p>",
        "id": 129785938,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531789091
    },
    {
        "content": "<p>It does not do it in nat first. All those <code>1</code>s are of type <code>fin 3</code></p>",
        "id": 129785953,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531789132
    },
    {
        "content": "<p>probably type class stuff has something to do with it too because replacing + with fin.add makes it fast again</p>",
        "id": 129786041,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1531789258
    },
    {
        "content": "<p>that's very strange</p>",
        "id": 129786062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531789292
    },
    {
        "content": "<p>typeclass stuff should be a negligible fraction of the work</p>",
        "id": 129786070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531789312
    },
    {
        "content": "<p>I guess with call-by-name it's not really about the work but about whether you somehow duplicate the argument or not (and whether or not the detection you mentioned kicks in)</p>",
        "id": 129786199,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1531789462
    },
    {
        "content": "<p>anyway, I'm going to stop looking because #eval solves my problem and sounds like this slowness is expected. thanks!</p>",
        "id": 129786231,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1531789519
    },
    {
        "content": "<p>Even more pathological example:</p>\n<div class=\"codehilite\"><pre><span></span>#reduce (λ (x : nat) (y : x &lt; 1), (fin.mk x y + 0 : fin 1)) -- 5 seconds\n#reduce (λ (x : nat) (y : x &lt; 2), (fin.mk x y + 0 : fin 2)) -- &gt; 1 minute\n</pre></div>\n\n\n<p>no \"15\" necessary :-)</p>",
        "id": 129800058,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1531814603
    },
    {
        "content": "<p>Please be aware that <code>fin</code> contains both a natural number <em>and</em> a proof.  The <code>#reduce</code> command normalizes both parts, including the proof.  You can use <code>set_option pp.all true</code> to see the full term.  If you run <code>#reduce (10 : fin 3).1</code>, you'll only get the number (in unary) but not the proof; this is a bit faster.</p>",
        "id": 129800675,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531815592
    },
    {
        "content": "<p>In any case, avoid kernel computation.</p>",
        "id": 129800677,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531815598
    },
    {
        "content": "<p>Lean was not designed to do fully-verified computation quickly :-) <code>#reduce 10000+10000</code> will bring the system to its knees. This is the whole point of <code>#eval</code></p>",
        "id": 129800877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531815870
    }
]