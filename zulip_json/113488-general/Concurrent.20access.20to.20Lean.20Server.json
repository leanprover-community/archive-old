[
    {
        "content": "<p>Does the Lean Server support receiving concurrent <code>info</code> requests on the same file? Is there a capacity limit? Is it supported to do concurrent interleaved requests across files interleaving <code>info</code> requests and full syncs?</p>",
        "id": 207935861,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598343827
    },
    {
        "content": "<p>Also is it preferred to requests positions somewhat sequentially in the file or is the file fully processed and there is no performance gain from location-grouped requests?</p>",
        "id": 207935966,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598343914
    },
    {
        "content": "<p>Recent versions do not have a restriction on the number of concurrent requests.  Note however that the results of the info request only reflect the current state of what has been processed.  If you don't wait for Lean to finish compiling (i.e. the orange bars in vscode go away), then info will successfully return nothing.</p>",
        "id": 207936629,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598344450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> thanks! It seems that I can consistently crash the server with 2 concurrent requests going as fast as possible if I go for long enough (~500 requests total) (I'm programmatically calling it, so the workload is definitely more intensive than when used with the extension)</p>",
        "id": 207938296,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598345778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> there is not output on STDOUT as it crashes it seems... do you know where I should look for an error message?</p>",
        "id": 207938321,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598345808
    },
    {
        "content": "<p>That's disappointing to hear.  Your best bet with a crash (segfault?) is to attach a debugger.</p>",
        "id": 207938336,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598345831
    },
    {
        "content": "<p>I may be OOMing; let me try on a bigger machine</p>",
        "id": 207938676,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598346094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> quick question. With the following file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">sub_nonneg</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sub_nonneg</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I get the following response from the Lean server on 6,17</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">InfoResponse</span><span class=\"o\">(</span><span class=\"n\">seq_num</span><span class=\"bp\">=</span><span class=\"mi\">129</span><span class=\"o\">,</span> <span class=\"n\">record</span><span class=\"bp\">=</span><span class=\"n\">InfoRecord</span><span class=\"o\">(</span><span class=\"n\">full_id</span><span class=\"bp\">=</span><span class=\"err\">&#39;</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add&#39;</span><span class=\"o\">,</span> <span class=\"n\">text</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"bp\">=</span><span class=\"err\">&#39;</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α&#39;</span><span class=\"o\">,</span> <span class=\"n\">doc</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">source</span><span class=\"bp\">=</span><span class=\"n\">InfoSource</span><span class=\"o\">(</span><span class=\"n\">line</span><span class=\"bp\">=</span><span class=\"mi\">323</span><span class=\"o\">,</span> <span class=\"n\">column</span><span class=\"bp\">=</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">file</span><span class=\"bp\">=</span><span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">spolu</span><span class=\"bp\">/</span><span class=\"n\">code</span><span class=\"bp\">/</span><span class=\"n\">formal</span><span class=\"bp\">/</span><span class=\"n\">formal</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">vendor</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">-</span><span class=\"n\">darwin</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">-</span><span class=\"n\">darwin</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">init</span><span class=\"bp\">/</span><span class=\"n\">core</span><span class=\"bp\">.</span><span class=\"n\">lean&#39;</span><span class=\"o\">),</span> <span class=\"n\">state</span><span class=\"bp\">=</span><span class=\"err\">&#39;</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span><span class=\"err\">\\</span><span class=\"n\">nhab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"err\">\\</span><span class=\"n\">nc</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">⊢</span> <span class=\"n\">ℝ&#39;</span><span class=\"o\">,</span> <span class=\"n\">tactic_param_idx</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">tactic_params</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>In particular the state is <code>a b : ℝ,\\nhab : a ≤ b,\\nc : ℝ\\n⊢ ℝ</code> which is not the current goal state but rather a type information related to <code>+</code> I presume?</p>\n<p>The VSCode extension mark this as an \"expected type\". How do you know that this is not a goal state?</p>",
        "id": 207942656,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598349134
    },
    {
        "content": "<p>In general there is no way to know.  The \"expected type\" string is rendered by the interactive widget.  If you're willing to modify the C++ code, you could add a flag in <code>term_goal_data::report</code>.</p>",
        "id": 207942737,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598349232
    },
    {
        "content": "<p>Note that you will encounter \"nested\" tactic states pretty often.  <code>by exact foo (by simp) 3</code> is perfectly valid.</p>",
        "id": 207942843,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598349291
    },
    {
        "content": "<p>OK I think I'll bite the bullet and will look at the C++ code :) Thanks for the pointer to <code>term_goal_data::report</code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 207943009,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598349410
    },
    {
        "content": "<p>To handle nested states is there a unique goal identifier I can expose/use ?</p>",
        "id": 207943151,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598349525
    },
    {
        "content": "<p>Maybe the cache ID?</p>",
        "id": 207947242,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598352564
    },
    {
        "content": "<p>One trick I've found to tracing nested tactics is as follows.  This is easiest to do in a clean environment, but can be also be done on a messy environment with other lean versions if you are careful about making a new lean toolchain.  For simplicity, I'll assume you have a clean environment where you aren't afraid to break lean.</p>\n<ul>\n<li>After having your lean project setup, find the lean library paths via <code>lean --path</code>.</li>\n<li>Modify <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/tactic.lean\"><code>&lt;lean_library_path&gt;/init/meta/tactic.lean</code></a> as follows.</li>\n<li>\n<p>Change <code>istep</code> to also record the positions and state:<br>\n<code>\n    meta def istep {α : Type u} (line0 col0 : ℕ) (line col : ℕ) (t : tactic α) : tactic unit := do\n    trace (line0, col0, line, col),\n    trace_state,\n    λ s, (@scope_trace _ line col (λ _, step t s)).clamp_pos line0 line col \n    </code></p>\n</li>\n<li>\n<p>Save the file and recompile the lean library file that you've changed.  I've found one way to do this is by making a new lean file in your project which has a tactic in it, and then running <code>lean --make my_file.lean</code>.</p>\n</li>\n<li>Now for every tactic lean will print the line and column numbers of the beginning of the tactic as well as the state.</li>\n</ul>\n<p>You should test this extensively.  Also, note the following:</p>\n<ul>\n<li>You are modifying lean's source code (but not the C++), so this will effect any lean project using this lean toolchain.</li>\n<li>Line numbers are 1-indexed.  Column numbers are 0-indexed.</li>\n<li>I don't remember the difference between line0/col0 and line/col.  They are usually the same and they are the start of the tactic.  Unfortunately, it is not the end, just the start.</li>\n<li>Depending on parallism, you may or may not need to combine the two trace statements into one (looking at the source for trace_state) to make sure they stay together.</li>\n<li>If you want the end of the tactic, I think this can be done more complicatedly by also modifying ALL of the interactive tactics to have <code>(loca : parse location)</code> parameter arguments as the first and the last arguments.  I haven't tested this much.  Then you would have to trace this information.</li>\n</ul>",
        "id": 207960993,
        "sender_full_name": "Jason Rute",
        "timestamp": 1598361384
    },
    {
        "content": "<p>For the lean server, I think these traces will show up in all_messages if I remember correctly.</p>",
        "id": 207961657,
        "sender_full_name": "Jason Rute",
        "timestamp": 1598361779
    },
    {
        "content": "<p>Well, the manual only tells me how to produce a leanpkg using mathlib - I don't want to do that. It might be that I have to extend the hott library; I want to port some Lean2 hott files and don't know yet what I need on the way.</p>",
        "id": 207973374,
        "sender_full_name": "Thomas Eckl",
        "timestamp": 1598367344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> Thanks! I will try your diff that looks promising. A slightly different approach I'm exploring right now is to split proofs line by line and record the goal state at the beginning of each line only. Then train on the objective of generating a line of code conditioned on the current partial proof and the current goal state. Obviously with term proofs the goal state will remain empty (and these can be quite long (eg pell.lean)) but since they are generally one-liners that's not a big deal since the lemma/theorem statement serves the same purpose when that's the case. This has the major advantage that it is super easy to setup; allows for tree-searching to generate full proofs, works with the vanilla toolchain and yet could be useful if integrated as is in the VSCode plugin.</p>",
        "id": 207977332,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598368979
    },
    {
        "content": "<p>Is there an incremental syncing capability to Lean server? Does the VSCode always use full-sync?</p>",
        "id": 208000763,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598379505
    },
    {
        "content": "<p>As far as I know there's no incremental sync. vscode-lean always does a full sync.</p>",
        "id": 208001217,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598379702
    },
    {
        "content": "<p>I think Lean is usually smart enough not to reprocess parts of the file which haven't changed though.</p>",
        "id": 208001346,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598379751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span> I think something to keep in mind is that you really have two separate problems.  (1) Generating the training data to train your model.  (2) Using your model to create proofs.  The problem with the first is that parsing Lean tactics is literally Turing complete.  (More specifically, parsing is done by a Lean parser which farms out the parsing work to the individual parsers, executing it for each tactic argument.  In practice, it is fairly well behaved, but still you would have to basically write another parser to do it perfectly.)  But once you have high-quality, reasonably parsed training data, then your model should be more well behaved.  If you can train your model to create one tactic command at a time, then you can run it on a goal, generate a tactic command, check if it succeeds, and do a tree search.  You shouldn't need to hack Lean to run your tree-search algorithm (if using the Lean server), just maybe to get good training data.</p>",
        "id": 208028180,
        "sender_full_name": "Jason Rute",
        "timestamp": 1598391897
    },
    {
        "content": "<p>As for getting good training data I think it is a tradeoff of how much work you want to put into it (and how much help you get from others in the Lean community).  One tactic per line is a reasonable starting guess, but I don't know how well it holds up in practice.  Some other heuristics might also help. For one, (baring comments) tactic commands must have matching parentheses, brackets, braces, etc.  This would allow you to find some nested tactics and tactics which span multiple lines.  Tactic commands are usually separated by commas in <code>begin...end</code> blocks and semicolons in <code>by</code> blocks, but this is not always true (and commas have other uses as well).  If you are willing to use the lean server goals or the hacked <code>istep</code> traces, then you can get even better data.</p>",
        "id": 208028200,
        "sender_full_name": "Jason Rute",
        "timestamp": 1598391908
    },
    {
        "content": "<p>I hope Lean 4 will solve this problem by providing a way to parse Lean into tactic statements and goal pairs, but I don't think we should hold out hope.</p>",
        "id": 208028233,
        "sender_full_name": "Jason Rute",
        "timestamp": 1598391929
    },
    {
        "content": "<p>Also, if it helps, here is some code I wrote to extract all the rewrite tactic applications in Lean.  It works pretty well (but it is only for a specific set of tactics.  I had to modify all the rewrite tactics manually.  (The code is more complicated than it would be for other tactics, since I also broke up simultaneous rewrites, into separate rewrite calls:  <a href=\"https://github.com/leanprover-community/lean/compare/master...jasonrute:v3.9.0-rw-recording\">https://github.com/leanprover-community/lean/compare/master...jasonrute:v3.9.0-rw-recording</a>  (Unfortunately, I haven't yet published this data anywhere.)</p>",
        "id": 208028616,
        "sender_full_name": "Jason Rute",
        "timestamp": 1598392190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> Completely agreed that the two problems are separate. I think that staying close to the interface humans use is desirable (at least in our opinion), that's the main reason why I'm not too keen on exploring instrumentation of Lean at the tactic code level. I hypothesize that our models will be capable of efficiently leveraging even partial goal state information and I'll work on verifying that hypothesis. (But I also think Lean code alone is not enough as humans do leverage the goal state when constructing proofs).</p>\n<p>Concerning the replay of proofs, while I see the work you've done very close to what HOList did with HOL-light, I plan to explore replaying proofs by simply injecting them in their context Lean file. This solves most issues with universes, local variables, imports etc... we'll see how it goes. </p>\n<p>Unrelated, but very nice thing about Lean is that we have a very natural evaluation task available with Patrick Massot's <a href=\"https://github.com/leanprover-community/tutorials\">tutorials</a>. Would be really excited to see a model achieve that!</p>",
        "id": 208069966,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598434265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> thanks! good to know <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 208070132,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598434369
    }
]