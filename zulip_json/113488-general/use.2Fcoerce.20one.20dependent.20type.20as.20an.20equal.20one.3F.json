[
    {
        "content": "<p>I am trying to apply a function to a vector, and get the error message </p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  f (vector.take j v)\nterm\n  vector.take j v\nhas type\n  vector (S.A) (min j (max j k))\nbut is expected to have type\n  vector (S.A) j\n</pre></div>\n\n\n<p><code>j</code> and <code>k</code> are <code>nat</code>s. I know that <code>j = min j (max j k)</code>, but I don't know how to use that equivalence to coerce <code>v</code> from one type to another. Should I just make a specific instance of <code>has_coe</code> and then use it to cast <code>v</code>?</p>",
        "id": 134479228,
        "sender_full_name": "Andrew Tindall",
        "timestamp": 1537710957
    },
    {
        "content": "<p>If it was me I would explicitly turn <code>vector.take j v</code> into something of type <code>vector (S.A) j</code> before applying the coercion</p>",
        "id": 134479329,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537711160
    },
    {
        "content": "<p>Isn't <code>j = min j (max j k)</code> always true? Where is <code>vector.take</code> defined?</p>",
        "id": 134479736,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537712049
    },
    {
        "content": "<p>Yes, it's always true. <code>vector.take</code>is in <code>data.vector</code>.</p>",
        "id": 134479910,
        "sender_full_name": "Andrew Tindall",
        "timestamp": 1537712488
    },
    {
        "content": "<p>maybe you should change the type of <code>f</code> first</p>",
        "id": 134479962,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537712575
    },
    {
        "content": "<p>Oh, in the core library! Right</p>",
        "id": 134479968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537712586
    },
    {
        "content": "<p>also, MWE</p>",
        "id": 134479969,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537712588
    },
    {
        "content": "<p>If this is in a programming context, I would probably use the <code>convert</code> tactic or some <code>rw</code> and prove <code>j = min j (max j k)</code>.<br>\nIf this is in a theorem-proving context, where I need to prove some fact about the result of this expression, I would just define my own <code>take'</code> with a more useful type like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"k\">take</span><span class=\"err\">&#39;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">i</span>\n</pre></div>\n\n\n<p>(the implementation can probably even be the same)</p>",
        "id": 134480135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537712992
    }
]