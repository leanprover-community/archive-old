[
    {
        "content": "<p>I'm trying to define decimals, so that I can define <code>to_string</code> for smtlib. So far, I've got a definition that should in principle work, I think. It is a decidable proposition and when run as a tactic, it works fine, but for whatever reason, the kernel refuses to evaluate it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">structure</span> <span class=\"n\">decimal</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_decimal</span> <span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">})</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">:=</span> <span class=\"n\">decimal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succeed</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"err\">∈</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"n\">def</span> <span class=\"n\">succeed2</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">decimal</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">decimal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">check_num</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>  <span class=\"n\">dec</span> <span class=\"err\">←</span> <span class=\"n\">succeed2</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">dec</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">check_num</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">succeed2</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">decimal</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Any idea what I'm doing wrong? What I'm trying to do, is define a type <code>decimal</code>, such that I can write <code>dec 2.6</code>, <code>dec 3/4</code> but not <code>dec 1/3</code>. As the latter cannot be turned into a string.</p>",
        "id": 205692796,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1596306455
    },
    {
        "content": "<p><code>lemma</code> is for theorems</p>",
        "id": 205693053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596306892
    },
    {
        "content": "<p>ah right, sorry, fixed</p>",
        "id": 205693064,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1596306927
    },
    {
        "content": "<p>ok, cool, now it can be used in the tactic.</p>",
        "id": 205693070,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1596306958
    },
    {
        "content": "<p>but still not with <code>dec_trivial</code>.</p>",
        "id": 205693110,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1596306971
    }
]