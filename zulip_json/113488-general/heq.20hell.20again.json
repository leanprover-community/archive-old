[
    {
        "content": "<p>My current goal looks like <code>eq.mpr comm_ring._proof_2 (quotient_ring.comm_ring (closure (is_ideal.trivial α))) == quotient_ring.comm_ring (closure (is_ideal.trivial α))</code> I'm ready to believe this is a rightful punishment for an earlier sin, but I'd like to know whether there is any hope to escape, or I should go back and think about what I'm doing</p>",
        "id": 135479776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539100757
    },
    {
        "content": "<p>Does this lemma help?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">for_patrick</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 135480240,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539101178
    },
    {
        "content": "<p>YES!</p>",
        "id": 135480267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539101222
    },
    {
        "content": "<p>Can you explain what's going on here?</p>",
        "id": 135480471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539101404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should this be added as a simp lemma in mathlib?</p>",
        "id": 135480493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539101423
    },
    {
        "content": "<p>Let's see how bad things are. What I wanted to write was:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_ring</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">separation_setoid</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span>  <span class=\"n\">rw</span> <span class=\"n\">ring_sep_rel</span> <span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>What I actually wrote (after adding Chris's simp lemma):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_ring</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">separation_setoid</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">topological_ring_quotient</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">is_ideal</span><span class=\"bp\">.</span><span class=\"n\">trivial</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ring_sep_rel</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">topological_ring_quotient_topology</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span><span class=\"o\">,</span> <span class=\"n\">to_topological_space</span><span class=\"o\">],</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ring_sep_rel</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ring_sep_rel</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ring_sep_rel</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Like: <em>come one Lean: apply ring_sep_rel!</em></p>",
        "id": 135480728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539101677
    },
    {
        "content": "<p>where <code>lemma ring_sep_rel (α) [comm_ring α] [uniform_space α] [uniform_add_group α] [topological_ring α] :\n  separation_setoid α = quotient_ring.quotient_rel (closure $ is_ideal.trivial α)</code></p>",
        "id": 135480782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539101730
    },
    {
        "content": "<p><code>subst</code> is a better version of <code>rw</code>, that can <code>rw</code> the types of proofs as well. before <code>subst h</code> the goal is <code>@eq.mpr β α h x == x</code>, after <code>subst h</code>the goal is <code>@eq.mpr β β (@eq.refl (Sort u) β) x == x</code>, and now the types are the same on each sude of the equality, and <code>eq.mpr</code> can iota-reduce, since <code>eq.refl</code> is a constructor, so it's just <code>refl</code>. </p>\n<p>The trouble with <code>subst</code> is it only works with local constants, so these proofs often require you to turn your goal into a lemma where you can use <code>subst</code> on local constants. A good version of <code>subst</code> that handles things other than local constants is something that needs to be written I think.</p>",
        "id": 135480982,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539101883
    },
    {
        "content": "<p><code>eq_rec_heq</code> is exactly the same as the lemma I wrote by the way.</p>",
        "id": 135481256,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539102191
    },
    {
        "content": "<p>not quite</p>",
        "id": 135481343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539102328
    },
    {
        "content": "<p>Chris, do you know if there is some more documentation about this magic <code>subst</code>? It sounds like it could be very useful. Lately I've been fighting that kind of <code>rw</code> issues a lot</p>",
        "id": 135482297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539103410
    },
    {
        "content": "<p>I don't think there's any documentation. The strategy to use it is to make sure that the expression you're substituting is a local constant, and if it isn't, then make an intermediate lemma. In the example I gave, only <code>α</code> had to be a local constant.</p>",
        "id": 135487819,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539108867
    },
    {
        "content": "<p>I always assumed <code>subst</code> was just induction on <code>eq</code>, is it actually something different?</p>",
        "id": 135488280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539109433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That's a useful way to see it. The thing is that by doing induction on eq, you're substitution everywhere at once so when your variable is used as a parameter for a function with a dependent type, it can help do the substitution in every term and type at once so that the goal remains type correct</p>",
        "id": 135488614,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539109754
    },
    {
        "content": "<p>Looking at the definition it appears to not be based on the induction tactic. <code>cases</code> also works in this example, but basically <code>subst</code> is for when the motive is hard to compute due to dependent arguments. The proof terms use <code>eq.drec</code> instead of <code>eq.rec</code></p>",
        "id": 135488646,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539109790
    },
    {
        "content": "<p>It sounds exactly like what I've needed for one week</p>",
        "id": 135488654,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539109794
    },
    {
        "content": "<p>What is a local constant?</p>",
        "id": 135488934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539109996
    },
    {
        "content": "<p>It's a free variable in your goal, not a definition and not a bound variable.</p>",
        "id": 135489147,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539110171
    },
    {
        "content": "<p>I think it's basically a variable in your local context, so <code>α</code> is, but not <code>ℕ</code> or <code>f α</code></p>",
        "id": 135489169,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539110202
    },
    {
        "content": "<p>\"something you could substitute something else for\"</p>",
        "id": 135489182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539110219
    },
    {
        "content": "<p>It's hard to see how such a restrictive condition can be satisfied</p>",
        "id": 135489247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539110279
    },
    {
        "content": "<p>Only one side has to be a variable. e.g. <code>x = 1 |- P x</code> reduces to <code>P 1</code></p>",
        "id": 135489445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539110412
    },
    {
        "content": "<p>You turn your goal into a lemma about local constants, and then substitute your expression into that lemma, like I did with <code>for_patrick</code> A bit messy, but reliable.</p>",
        "id": 135489455,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539110423
    },
    {
        "content": "<p>Also, <code>rcases e with rfl</code> will do subst on terms</p>",
        "id": 135489480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539110461
    },
    {
        "content": "<p>What?!</p>",
        "id": 135489504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539110481
    },
    {
        "content": "<p>and <code>rcases e with &lt;&gt;</code> will do cases instead, which has slightly different effects wrt unfolding</p>",
        "id": 135489507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539110483
    },
    {
        "content": "<p>All this becomes more and more obscure to me</p>",
        "id": 135489516,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539110492
    },
    {
        "content": "<p>it's super useful to use <code>rfl</code> in rcases patterns</p>",
        "id": 135489532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539110514
    },
    {
        "content": "<p>If your assumption is <code>f x = g y</code> then it's difficult to eliminate the equality once and for all, it could make lots of things equal to other things in an unpredictable way (see: word problem)</p>",
        "id": 135489628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539110593
    },
    {
        "content": "<p>but when one side is a fresh variable, like <code>x = g y</code>, then we can just replace <code>x</code> with <code>g y</code> everywhere in the context to eliminate <code>x</code></p>",
        "id": 135489659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539110631
    },
    {
        "content": "<p>The nice thing is that this works <em>regardless of any dependencies</em>, which is a big plus compared to <code>rw</code> with this equality everywhere</p>",
        "id": 135489743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539110673
    },
    {
        "content": "<p>Basically all facts about <code>eq</code> and <code>heq</code> are proved using this trick</p>",
        "id": 135489786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539110715
    },
    {
        "content": "<p>I think I need to see examples to understand this</p>",
        "id": 135489943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539110853
    },
    {
        "content": "<p>I have no idea where to start</p>",
        "id": 135491213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539111908
    },
    {
        "content": "<p>Patrick I have heard Chris moaning about this <code>heq</code> stuff. But I have never once had to use it? Why is that? Am I avoiding a certain kind of mathematics? Why do you need it?</p>",
        "id": 135491595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539112240
    },
    {
        "content": "<p>When you didn't use the identity map as a map from <code>F (id '' U)</code> to <code>F U</code>, this is the kind of thing you avoided.</p>",
        "id": 135491658,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539112313
    },
    {
        "content": "<p>Yes I just went back to that thread.</p>",
        "id": 135492132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539112818
    },
    {
        "content": "<p>I found a pretty good summary of all the different types of equality here: <a href=\"https://jozefg.bitbucket.io/posts/2014-08-06-equality.html\" target=\"_blank\" title=\"https://jozefg.bitbucket.io/posts/2014-08-06-equality.html\">https://jozefg.bitbucket.io/posts/2014-08-06-equality.html</a></p>",
        "id": 135492200,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1539112907
    },
    {
        "content": "<p>I have no idea what heq is. I can only tell you that when arguments of a term depend on other arguments then <code>rw</code> and <code>simp</code> often don't work. <code>convert</code> works but spawns <code>heq</code> goals. I understand nothing about Mario's explanations unfortunately</p>",
        "id": 135492206,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539112919
    },
    {
        "content": "<p>do we have some general tips to avoid heq hell? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 167751108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560165968
    },
    {
        "content": "<p>If <code>congr'</code> produced them, then consider doing cases on an equality instead.</p>",
        "id": 167753600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560168649
    }
]