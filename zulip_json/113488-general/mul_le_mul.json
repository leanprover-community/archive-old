[
    {
        "content": "<p>My refactor leads to a conflict: <code>mul_le_mul</code> is now a lemma about <code>ordered_cancel_comm_monoid</code>, but it was already a lemma for <code>ordered_semiring</code>s:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- TODO: there are four variations, depending on which variables we assume to be nonneg</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_le_mul</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nn_c</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hac</span> <span class=\"n\">nn_b</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hbd</span> <span class=\"n\">nn_c</span>\n</code></pre></div>\n\n\n<p>What is the preferred way to resolve this conflict?</p>",
        "id": 198876550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590577455
    },
    {
        "content": "<p>I should have asked this before: why are you doing this refactor?</p>",
        "id": 198876593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577506
    },
    {
        "content": "<p>I hope it's not only for uniformity's sake</p>",
        "id": 198876608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577520
    },
    {
        "content": "<p>do we actually have any examples of multiplicative <code>ordered_comm_monoid</code>s?</p>",
        "id": 198876650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577561
    },
    {
        "content": "<p>the fact that the new <code>mul_le_mul_left</code> has no nonnegativity assumptions on the multiplicand looks very weird to me</p>",
        "id": 198876737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577606
    },
    {
        "content": "<p><code>nat</code>?</p>",
        "id": 198876757,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590577626
    },
    {
        "content": "<p>The perfectoid project sets up a very general theory of valuations into ordered comm monoids, and work like Rob's on p-adic numbers has a valuation into the non-negative reals, and maybe things can be unified somehow</p>",
        "id": 198876800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590577668
    },
    {
        "content": "<p>Sure, but that's a <code>canonically_ordered_monoid</code> which gives it more structure</p>",
        "id": 198876803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577670
    },
    {
        "content": "<p>in particular <code>zero_le</code></p>",
        "id": 198876840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577683
    },
    {
        "content": "<p>The multiplication isn't canonically ordered</p>",
        "id": 198876855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590577686
    },
    {
        "content": "<p>no but it's a semiring, it's got both</p>",
        "id": 198876877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577712
    },
    {
        "content": "<p>same for enat, nnreal and ennreal</p>",
        "id": 198876899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577742
    },
    {
        "content": "<p>so I'm not sure where this class will be used</p>",
        "id": 198876907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577752
    },
    {
        "content": "<p>and I would certainly hate to displace an actually useful lemma for one with no known applications</p>",
        "id": 198876925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mul_le_mul/near/198876907\">said</a>:</p>\n<blockquote>\n<p>so I'm not sure where this class will be used</p>\n</blockquote>\n<p>The valuations take values in an arbitrary such monoid. Not all of them are ordered semirings</p>",
        "id": 198877183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590577962
    },
    {
        "content": "<p>You could argue that we should use additive valuations instead... but...</p>",
        "id": 198877247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578002
    },
    {
        "content": "<p>I really should</p>",
        "id": 198877269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578021
    },
    {
        "content": "<p>but I think that ship sailed before I even started leaning</p>",
        "id": 198877292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578038
    },
    {
        "content": "<p>Also... it means that valuations can't take values in <code>nnreal</code></p>",
        "id": 198877362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/mul_le_mul/near/198877183\">said</a>:</p>\n<blockquote>\n<p>The valuations take values in an arbitrary such monoid. Not all of them are ordered semirings</p>\n</blockquote>\n<p>Fair enough. But I'm guessing that you don't need to do that much as far as algebraic manipulations in these types though, so perhaps you can make do with namespacing everything</p>",
        "id": 198877435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578121
    },
    {
        "content": "<p>I think you might have use for something a bit more than an ordered_comm_monoid for your valuations though</p>",
        "id": 198877608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578232
    },
    {
        "content": "<p>Don't you want to add a zero to the type?</p>",
        "id": 198877669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578281
    },
    {
        "content": "<p>and then you will have <code>zero_le</code> which isn't true in an ordered_comm_monoid</p>",
        "id": 198877783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578349
    },
    {
        "content": "<p>We work with group_with_zero s I guess</p>",
        "id": 198877813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590578379
    },
    {
        "content": "<p>Is there an <code>ordered_group_with_zero</code>?</p>",
        "id": 198877913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> In the end it will be <code>linearly_ordered_comm_group_with_zero</code></p>",
        "id": 198877916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578436
    },
    {
        "content": "<p>And we have files with lots of basic lemmas about these guys in the perfectoid project</p>",
        "id": 198877947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578459
    },
    {
        "content": "<p>But they depend on <code>actual_ordered_comm_monoid</code>s</p>",
        "id": 198877966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578475
    },
    {
        "content": "<p>I'm trying to get rid of the <code>actual_</code></p>",
        "id": 198877986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578487
    },
    {
        "content": "<p>I think you should start with the minimum number of classes necessary to say what you need</p>",
        "id": 198878011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578499
    },
    {
        "content": "<p>what are <code>actual_ordered_comm_monoid</code>s used for?</p>",
        "id": 198878038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578521
    },
    {
        "content": "<p>They are only there currently to prove a bunch of lemmas that are true more generally than just for <code>linearly_ordered_comm_group_with_zero</code>s</p>",
        "id": 198878128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578564
    },
    {
        "content": "<p>yeah, that qualifies as a non-use from my point of view</p>",
        "id": 198878202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578630
    },
    {
        "content": "<p>you can just put those theorems in a section and say \"Note: these hold more generally, make sure to migrate these if/when we need the generality\"</p>",
        "id": 198878276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578670
    },
    {
        "content": "<p>but there is a reason you won't find theorems like <code>mul_inv_cancel</code> stated over quasigroups</p>",
        "id": 198878340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590578745
    },
    {
        "content": "<p>Hmmmzz... I thought we tried to do things in \"the right generality\" because you never know if someone will show up with a sudden orthogonal application.</p>",
        "id": 198878576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578879
    },
    {
        "content": "<p>Also, I would still get the <code>mul_le_mul</code> name conflict</p>",
        "id": 198878645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578914
    },
    {
        "content": "<p>Whatever method I use then to solve the name conflict, could also be applied here.</p>",
        "id": 198878668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578941
    },
    {
        "content": "<blockquote>\n<p>you never know if someone will show up with a sudden orthogonal application</p>\n</blockquote>\n<p>Don't try to anticipate applications you don't understand. You will be sufficiently wrong sufficiently often as to make the extra effort worthless. Instead, plan for the applications you are aware of, and try to design things so that it is otherwise generally maintainable and refactorable, and let future-you or future-someone else deal with future applications</p>",
        "id": 198878809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590579070
    },
    {
        "content": "<p>As for the name conflict, the usual technique works here: use a namespace</p>",
        "id": 198878916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590579123
    },
    {
        "content": "<p>or primes</p>",
        "id": 198878932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590579133
    },
    {
        "content": "<p>Ok, I'll just make sure that none of the existing names in mathlib changes.</p>",
        "id": 198878971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590579183
    }
]