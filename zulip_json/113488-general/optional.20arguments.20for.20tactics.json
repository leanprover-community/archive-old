[
    {
        "content": "<p>I'm confused on how to make optional arguments for tactics to work. Right now I have two different tactics, one of them takes an extra argument, and I want to make them just one tactic with that extra argument being optional:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search</span> <span class=\"o\">(</span><span class=\"n\">try_harder</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">config</span> <span class=\"bp\">.</span> <span class=\"n\">pick_default</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">rewrite_search_target</span> <span class=\"n\">cfg</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search_with</span> <span class=\"o\">(</span><span class=\"n\">try_harder</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">config</span> <span class=\"bp\">.</span> <span class=\"n\">pick_default</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">rewrite_search_target</span> <span class=\"n\">cfg</span> <span class=\"n\">rs.rules</span>\n</code></pre></div>\n<p>From the docs I thought I should just be able to add a <code>(rs : parse (optional rw_rules))</code> to the arguments for rewrite_search, but that causes my existing code to mis-parse.</p>",
        "id": 218456078,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606844311
    },
    {
        "content": "<p>I think the <code>optional</code> will give you something of type <code>option rw_rules</code>, and so you can then match that with <code>none</code> or <code>some rs</code>.</p>",
        "id": 218458440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606845499
    },
    {
        "content": "<p>Does that make sense. (Me = meta noob)</p>",
        "id": 218458463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606845512
    },
    {
        "content": "<p>It is just no longer able to parse correctly though. Like this no longer parses when I add another optional arg to <code>rewrite_search</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"o\">[[</span><span class=\"mi\">4</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rewrite_search</span>\n</code></pre></div>\n<p>There is already one optional argument, maybe that is related?</p>",
        "id": 218458882,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606845724
    },
    {
        "content": "<p>maybe... I'm already way out of my depth</p>",
        "id": 218459288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606845908
    },
    {
        "content": "<p>These are interactive tactics? If so I don't think the <code> . </code> optional arguments are good to use</p>",
        "id": 218459325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606845929
    },
    {
        "content": "<p>yeah these are interactive tactics. i'll try dropping the <code>.</code> thing</p>",
        "id": 218459411,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606845964
    },
    {
        "content": "<p>Instead, use another <code>cfg : parse $ optional config</code></p>",
        "id": 218459468,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606845993
    },
    {
        "content": "<p>the <code>.</code> is for using a tactic to produce the default. If it's just a value then you should use <code>:=</code></p>",
        "id": 218468771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606850525
    },
    {
        "content": "<p><code>parse $ optional config</code> doesn't seem to work - for this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search</span> <span class=\"o\">(</span><span class=\"n\">try_harder</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">rewrite_search_target</span> <span class=\"o\">{}</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>the \"optional\" is squiggled with the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">82</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">optional</span> <span class=\"n\">config</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">config</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">lean.parser</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"mi\">82</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">try_harder</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>The type of \"config\" is from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">structure</span> <span class=\"n\">config</span> <span class=\"kd\">extends</span> <span class=\"n\">tactic.nth_rewrite.cfg</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">max_iterations</span>     <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">5000</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">explain</span>            <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">explain_using_conv</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't really understand what any of this parser stuff is doing. I just want the tactic to take optional parameters of provided types, it seems like I shouldn't have to be doing any \"parsing\" at all.</p>",
        "id": 218587702,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606928906
    },
    {
        "content": "<p>you know, I'm not even using this \"try_harder\" parse option. but removing that, it still doesn't work. simplified code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">rewrite_search_target</span> <span class=\"o\">{}</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>with error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">81</span><span class=\"o\">:</span><span class=\"mi\">40</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">optional</span> <span class=\"n\">config</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">config</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">lean.parser</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"mi\">81</span><span class=\"o\">:</span><span class=\"mi\">40</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>it works with the <code>.</code> syntax though</p>",
        "id": 218588179,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606929077
    },
    {
        "content": "<p>i can't really find documentation about the <code>.</code> syntax for optional arguments, or for using <code>parse</code> for optional arguments, so for both of them I am kind of just cutting and pasting from similar-looking code and trying to tweak til it works, rather than nicely understanding what it's doing</p>",
        "id": 218588611,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606929264
    },
    {
        "content": "<p>Take a look at other tactics like <code>simp</code> that accept an optional last structure parameter: <a href=\"https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/init/meta/interactive.lean#L1210\">https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/init/meta/interactive.lean#L1210</a></p>",
        "id": 218589247,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1606929573
    },
    {
        "content": "<p>can i have two optional arguments at all</p>",
        "id": 218589640,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606929727
    },
    {
        "content": "<p>Also seen here in <code>rewrite</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">rewrite_cfg</span> <span class=\"kd\">extends</span> <span class=\"n\">apply_cfg</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">md</span>            <span class=\"o\">:=</span> <span class=\"n\">reducible</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">symm</span>          <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">occs</span>          <span class=\"o\">:=</span> <span class=\"n\">occurrences.all</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">constant</span> <span class=\"n\">rewrite_core</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">new_t</span><span class=\"o\">,</span> <span class=\"n\">prf</span><span class=\"o\">,</span> <span class=\"n\">metas</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">rewrite_core</span> <span class=\"n\">h</span> <span class=\"n\">e</span> <span class=\"n\">cfg</span><span class=\"o\">,</span>\n   <span class=\"n\">try_apply_opt_auto_param</span> <span class=\"n\">cfg.to_apply_cfg</span> <span class=\"n\">metas</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">new_t</span><span class=\"o\">,</span> <span class=\"n\">prf</span><span class=\"o\">,</span> <span class=\"n\">metas</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 218589692,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606929752
    },
    {
        "content": "<p>Do you mean optional arguments like <code>simp?</code> or <code>simp!</code> or things like <code>rw</code> and <code>rw {occs = occurences ...}</code>?</p>",
        "id": 218589758,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606929785
    },
    {
        "content": "<p>like <code>rw {occs = occurences ...}</code></p>",
        "id": 218589839,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606929814
    },
    {
        "content": "<p><code>simp?</code> could just be a separate function from <code>simp</code> entirely, right? so the \"optional argument\" there is just messing with the parser to do something you could do straightforwardly</p>",
        "id": 218589955,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606929863
    },
    {
        "content": "<p>Sorry, one sec</p>",
        "id": 218590092,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606929923
    },
    {
        "content": "<p>OK, this lets me use the <code>:=</code> method and avoid the <code>.</code>. Great success.</p>",
        "id": 218590330,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606930028
    },
    {
        "content": "<p>that brings me back to the original question, though, of how to add an optional argument with <code>(rs : parse (optional rw_rules))</code>. That still does not appear to work. This code compiles fine but then it causes anything that just uses <code>by rewrite_search</code> to fail to parse:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">rewrite_search_target</span> <span class=\"n\">cfg</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>Is that fundamentally illegitimate in Lean, to have multiple optional arguments? Or is there some other way to do it</p>",
        "id": 218590697,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606930183
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search</span> <span class=\"o\">(</span><span class=\"n\">try_harder</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">rewrite_search_target</span>\n<span class=\"o\">{</span> <span class=\"n\">max_iterations</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">try_harder</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">5000</span> <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">100000</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span> <span class=\"o\">}</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 218590844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606930233
    },
    {
        "content": "<p>there's some issue with the definition, but I don't have all your code</p>",
        "id": 218590887,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606930247
    },
    {
        "content": "<p>But you parse in the optional flags, and then map or const_map them how you will. There's probably a neater way to do it</p>",
        "id": 218590946,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606930271
    },
    {
        "content": "<p>there's no flags here, just a list and a config structure</p>",
        "id": 218590990,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606930298
    },
    {
        "content": "<p>so basically when rewrite_search is defined as above, and I have code like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test_linear_path</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rewrite_search</span>\n\n<span class=\"kd\">constants</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n</code></pre></div>\n<p>The \"constants\" line shows an error: <code>68:1: invalid expression, unexpected token</code></p>",
        "id": 218591443,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606930482
    },
    {
        "content": "<p>Did you define an interactive tactic to go along with your tactic?</p>",
        "id": 218591560,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606930537
    },
    {
        "content": "<p>yeah that definition is in <code>tactic.interactive</code></p>",
        "id": 218591601,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606930555
    },
    {
        "content": "<p>OK, here's a simpler repro. AFAICT the optional parsing just does not work with the <code>rw_rules</code> type.</p>\n<p>The tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">rewrite_search_target</span> <span class=\"o\">{}</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>The code that fails to parse:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"o\">[[</span><span class=\"mi\">7</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">]]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rewrite_search</span>\n\n<span class=\"kd\">constants</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>The error is on the \"constants\" - <code>37:1: invalid expression, unexpected token</code> - but it seems to just happen anywhere immediately after the <code>rewrite_search</code> tactic. Like the optional-parsing is failing to find the supposedly-optional thing, and then failing. This code works if I just delete the <code>(rs : parse $ optional rw_rules)</code> block.</p>",
        "id": 218593580,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606931375
    },
    {
        "content": "<p>I haven't followed most of this thread and I'm gonna look at the PR soon, but <code>meta def rewrite_search (rs : parse $ optional rw_rules) : tactic string</code> looks fishy. Is this in the <code>tactic.interactive</code> namespace? Then it should be <code>tactic unit</code>, not <code>tactic string</code>. If it is in <code>tactic.interactive</code>, try the example outside of that namespace. If it isn't in <code>tactic.interactive</code> I wouldn't expect the parsing to work at all.</p>",
        "id": 218594670,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606931854
    },
    {
        "content": "<p>it is in tactic.interactive. it works fine without this optional arg parsing stuff.</p>",
        "id": 218594831,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606931929
    },
    {
        "content": "<p>it is actually returning a string here. but I think that part is working fine.</p>",
        "id": 218595183,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606932077
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.nth_rewrite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">rewrite_search</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">structure</span> <span class=\"n\">config</span> <span class=\"kd\">extends</span> <span class=\"n\">tactic.nth_rewrite.cfg</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">max_iterations</span>     <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">5000</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">explain</span>            <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">explain_using_conv</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">core</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">msgs</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"n\">msgs</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"n\">msgs</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">rewrite_search</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">tactic.rewrite_search.config</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">cfg.max_iterations</span> <span class=\"bp\">=</span> <span class=\"mi\">5000</span>\n  <span class=\"k\">then</span> <span class=\"n\">tactic.rewrite_search.core</span> <span class=\"n\">cfg</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span> <span class=\"n\">tactic.rewrite_search.core</span> <span class=\"n\">cfg</span> <span class=\"o\">[</span><span class=\"mi\">1000000</span><span class=\"o\">])</span>\n  <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search</span> <span class=\"o\">(</span><span class=\"n\">try_harder</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_search.config</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.rewrite_search</span> <span class=\"o\">{</span> <span class=\"n\">max_iterations</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">try_harder</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">5000</span> <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">100000</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"bp\">..</span><span class=\"n\">cfg</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_linear_path</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rewrite_search</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_linear_path'</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rewrite_search</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 218595673,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606932256
    },
    {
        "content": "<p>Ahah, I take it back, I see what's going on.</p>",
        "id": 218595707,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606932269
    },
    {
        "content": "<p>Mouse over on the two <code>rewrite_search</code> and <code>rewrite_search!</code></p>",
        "id": 218595710,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606932271
    },
    {
        "content": "<p><code>optional rw_rules</code> doesn't make sense, because the <code>rw_rules</code> parser always succeeds.</p>",
        "id": 218595732,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606932283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> your example isn't using an optional rw_rules though, which is the sticking point</p>",
        "id": 218595769,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606932301
    },
    {
        "content": "<p>If there's no argument given you get an empty <code>rw_rules</code> object.</p>",
        "id": 218595772,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606932301
    },
    {
        "content": "<p>oh, interesting</p>",
        "id": 218595794,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606932309
    },
    {
        "content": "<p>Er, wait, that's not quite it.</p>",
        "id": 218595963,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606932392
    },
    {
        "content": "<p><code>rw_rules</code> looks for a list <code>[...]</code> or an expression.</p>",
        "id": 218596013,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606932421
    },
    {
        "content": "<p>When it sees <code>constant</code> it thinks that's the beginning of an expression.</p>",
        "id": 218596063,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606932444
    },
    {
        "content": "<p>lean syntax does not seem to be a natural fit for optional arguments to functions</p>",
        "id": 218596188,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606932505
    },
    {
        "content": "<p>if the answer here is like, optionally parsing a <code>rw_rules</code> just isn't simple so don't do it, I can live with that. but a PR reviewer asked for it and it seems reasonable abstractly so I would like to do it if it's straightforward ;-)</p>",
        "id": 218596338,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606932573
    },
    {
        "content": "<p>bc right now there's just two identical tactics but one has this argument and one doesn't</p>",
        "id": 218596385,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606932596
    },
    {
        "content": "<p>Expressions can't contain <code>constant</code>, but I think the interactive parser doesn't know that, so it thinks parsing succeeded? But I'm not completely sure what's going on there.</p>",
        "id": 218596815,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606932779
    },
    {
        "content": "<p>The easy fix would be to prefix the optional <code>rw_rules</code> with a keyword like <code>using</code></p>",
        "id": 218596859,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606932802
    },
    {
        "content": "<p>So <code>rewrite_search using [....]</code> works, and if you write <code>using</code> without giving a <code>rw_rule</code> you deserve an error. <code>rewrite_search</code> without <code>using</code> won't even try to parse a <code>rw_rule</code> so it won't complain about the following token.</p>",
        "id": 218597003,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606932870
    },
    {
        "content": "<p>that seems quite similar to have a second tactic called <code>rewrite_search_using</code></p>",
        "id": 218597067,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606932902
    },
    {
        "content": "<p>but either way, TLDR I just shouldn't expect <code>(parse $ optional rw_rules)</code> to work</p>",
        "id": 218597120,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606932929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/optional.20arguments.20for.20tactics/near/218597067\">said</a>:</p>\n<blockquote>\n<p>that seems quite similar to have a second tactic called <code>rewrite_search_using</code></p>\n</blockquote>\n<p>I mean, yes, except you're not duplicating code? Lots and lots of tactics take optional arguments this way.</p>",
        "id": 218597348,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606933031
    },
    {
        "content": "<p>it isn't duplicating code, you just have both of them call a helper function</p>",
        "id": 218597474,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606933091
    },
    {
        "content": "<p>but i am happy to stylistically adhere to the practices of other tactics</p>",
        "id": 218597583,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606933145
    },
    {
        "content": "<p>If you really hate it you can just use the brackets part of <code>rw_rules</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">optional</span> <span class=\"o\">((</span><span class=\"n\">tk</span> <span class=\"s2\">\"[\"</span> <span class=\"bp\">*&gt;</span>\n <span class=\"n\">rw_rules_t.mk</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">sep_by</span> <span class=\"o\">(</span><span class=\"n\">skip_info</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\",\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set_goal_info_pos</span> <span class=\"bp\">$</span> <span class=\"n\">rw_rule_p</span> <span class=\"o\">(</span><span class=\"n\">parser.pexpr</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n               <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">cur_pos</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">set_goal_info_pos</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"]\"</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>or whatever (maybe don't inline it though). You won't be able to write <code>by rewrite_search foo</code> but you can do <code>by rewrite_search [foo]</code>.</p>",
        "id": 218597883,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606933280
    },
    {
        "content": "<p>hmm, I hate that more.</p>",
        "id": 218597930,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606933304
    },
    {
        "content": "<p>what is another tactic that happily uses a \"using\" keyword that I can copy off its design</p>",
        "id": 218597957,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606933317
    },
    {
        "content": "<p>Note that this is the same syntax as <code>simp</code> (you can't write <code>by simp foo</code>, has to be <code>by simp [foo]</code>)</p>",
        "id": 218598060,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606933349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/optional.20arguments.20for.20tactics/near/218597957\">said</a>:</p>\n<blockquote>\n<p>what is another tactic that happily uses a \"using\" keyword that I can copy off its design</p>\n</blockquote>\n<p><code>simpa</code>, <code>convert</code></p>",
        "id": 218598176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606933402
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.choose/src\">src#tactic.interactive.choose</a></p>",
        "id": 218598356,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606933475
    },
    {
        "content": "<p>OK i'll look there</p>",
        "id": 218598465,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606933516
    },
    {
        "content": "<p>thanks for the help folks</p>",
        "id": 218598479,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606933522
    },
    {
        "content": "<p>After reviewing the PR, I think there's a better solution here.</p>\n<p>Define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rw_search_parser</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">flipped</span> <span class=\"bp\">←</span> <span class=\"n\">optional</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"←\"</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">lean.parser.pexpr</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">flipped.is_some</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Search for a chain of rewrites to prove an equation or iff statement. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rewrite_search</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">list_of</span> <span class=\"n\">rw_search_parser</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">rewrite_search_target</span> <span class=\"n\">cfg</span> <span class=\"o\">(</span><span class=\"n\">args.get_or_else</span> <span class=\"o\">[])</span> <span class=\"bp\">$&gt;</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>Now <code>rewrite_search_target</code> is getting a list of <code>pexpr × bool</code>s instead of a list of <code>rw_rule</code>s. But you never used the <code>rw_rule</code>s as <code>rw_rule</code>s, you converted them into <code>expr × bool</code> immediately. You need to propagate that change through a few functions but it isn't hard.</p>",
        "id": 218609660,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606938714
    },
    {
        "content": "<p>This allows you to write <code>by rewrite_search</code> and <code>by rewrite_search [a, b, c]</code>. You can't write <code>by rewrite_search a</code>. But I'm not inclined to allow that anyway. <code>rw_search</code> is closer to <code>simp</code> than <code>rw</code>. Even if you only give it a single extra rule, morally you're giving it a singleton set of rules. That rule can be used multiple times.</p>",
        "id": 218609857,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606938800
    },
    {
        "content": "<p>So needing to enclose it in a list makes sense.</p>",
        "id": 218609909,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606938831
    },
    {
        "content": "<p>This is the reason why <code>simp</code> has required brackets around its arguments while <code>rw</code> doesn't, btw</p>",
        "id": 218635112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606951726
    },
    {
        "content": "<p>oh, rob said this already</p>",
        "id": 218635251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606951807
    },
    {
        "content": "<p>Actually, I think it might be possible to write a parser that only allows the config if the brackets are provided, but lets you leave off the brackets if you don't provide a config</p>",
        "id": 218635296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606951852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/optional.20arguments.20for.20tactics/near/218635296\">said</a>:</p>\n<blockquote>\n<p>Actually, I think it might be possible to write a parser that only allows the config if the brackets are provided, but lets you leave off the brackets if you don't provide a config</p>\n</blockquote>\n<p>Possible, but I wouldn't bother</p>",
        "id": 218635547,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952018
    },
    {
        "content": "<p>In fact, I'd prefer that you not bother!</p>",
        "id": 218635554,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952027
    },
    {
        "content": "<p>how come?</p>",
        "id": 218635836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952270
    },
    {
        "content": "<p>is it just the churn of changing <code>simp</code>, or is it the regression in writing <code>simp [] {config_opt := ...}</code> instead of <code>simp {config_opt := ...}</code></p>",
        "id": 218635914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952316
    },
    {
        "content": "<p>It's a more complicated parser and more work to describe the available syntax options, and semantically it doesn't make a ton of sense.</p>",
        "id": 218635973,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952371
    },
    {
        "content": "<p>I'm not sure I follow the latter argument</p>",
        "id": 218635999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952395
    },
    {
        "content": "<p>I was talking about <code>rewrite_search foo {...}</code> vs <code>rewrite_search [foo] {...}</code></p>",
        "id": 218636000,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952395
    },
    {
        "content": "<p>May have misinterpreted what you meant about <code>simp</code>, I didn't know you needed <code>[]</code> in your example.</p>",
        "id": 218636092,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952427
    },
    {
        "content": "<p>you would in the suggested change, because the <code>{...}</code> would be treated as a simp lemma otherwise</p>",
        "id": 218636149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952470
    },
    {
        "content": "<p>Oh, wait, sorry</p>",
        "id": 218636161,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952475
    },
    {
        "content": "<p>I read you right the first time and misread the second time</p>",
        "id": 218636171,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952485
    },
    {
        "content": "<p>I suppose you could check for a <code>{</code> but I'm not sure if it's possible to do that, roll back by one token and then parse it as an expr</p>",
        "id": 218636203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952514
    },
    {
        "content": "<p>the major limitation is that lean's parser does not do backtracking, so you have to sometimes write parsers in a weird way</p>",
        "id": 218636274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952548
    },
    {
        "content": "<p>Allowing <code>simp foo</code> saves you two characters in an edge case in exchange for a more complicated parser. And you have a simp set anyway, semantically it makes sense that you're adding a set (/list) to it, so, <code>[a]</code>.</p>",
        "id": 218636344,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952607
    },
    {
        "content": "<p>Wasn't even thinking of the <code>simp [] {}</code> case, but that's another argument.</p>",
        "id": 218636380,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952627
    },
    {
        "content": "<p>I don't think <code>simp [one_lemma]</code> is an edge case</p>",
        "id": 218636383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952629
    },
    {
        "content": "<p>it's much more common than <code>simp {config}</code></p>",
        "id": 218636418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952644
    },
    {
        "content": "<p>Given how often <code>simp</code> is called, it wouldn't surprise me if the more complicated parser even had a visible performance impact.</p>",
        "id": 218636545,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606952734
    },
    {
        "content": "<p>6950 hits for <code>simp [</code>, 2478 for <code>simp [one_word]</code>, 39 for <code>simp {</code></p>",
        "id": 218636567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952756
    },
    {
        "content": "<p>I don't have a really good understanding of parser performance behavior. There is an extra <code>eval_expr</code> to get the config but this seems to be a pretty uncommon option anyway</p>",
        "id": 218636766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952890
    },
    {
        "content": "<p>My guess is that it would not be visible in the benchmark over the noise, but probably we would have to test to find out</p>",
        "id": 218636903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606952990
    },
    {
        "content": "<p>I remember reporting this \"inconsistency\" between <code>simp</code> and <code>rw</code> back in the day to leo et al, and being told about the parser limitations preventing this. I have since become better at writing parsers</p>",
        "id": 218637236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606953147
    },
    {
        "content": "<p>the cfg currently comes at a really weird place though, after everything including the <code>with attrs...</code> and <code>at pos</code></p>",
        "id": 218637339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606953217
    },
    {
        "content": "<p>Well, I managed to find a lean bug while mocking this up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"bp\">?</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">test</span> <span class=\"bp\">.</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">test</span>   <span class=\"c1\">-- works, but...</span>\n<span class=\"kd\">example</span> <span class=\"c1\">-- invalid expression, unexpected token</span>\n  <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">test</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 218641802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606957032
    },
    {
        "content": "<p>It appears that the <code>optional texpr</code> parser will crash badly if it sees a command keyword instead of just failing by the usual channels. It still works to parse what it was supposed to, the tactic continues and everything, but it throws an error on the token while it's at it</p>",
        "id": 218641904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606957109
    },
    {
        "content": "<p>Here's a repro in pure lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">transitivity</span> <span class=\"c1\">-- this error is expected</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- this one is not</span>\n</code></pre></div>",
        "id": 218642557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606957737
    },
    {
        "content": "<p>nice. yeah missing <code>by rewrite_search a</code> is not a big loss. i'll implement this suggestion in the PR</p>",
        "id": 218665064,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1606984371
    }
]