[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tauto</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    f</span>\n<span class=\"cm\">  A → B</span>\n<span class=\"cm\">g ↓   ↓ h</span>\n<span class=\"cm\">  C → D</span>\n<span class=\"cm\">    j</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">random</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tauto</span> <span class=\"c1\">-- !</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Solve the maze!</span>\n\n<span class=\"cm\">(start here) -&gt; [add two] -&gt; (could go this way)</span>\n<span class=\"cm\">    ↓                                ↓</span>\n<span class=\"cm\">(or this way) -&gt; [add one] -&gt; (get to here)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">random</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"c1\">-- random{1,2}</span>\n</pre></div>",
        "id": 179703264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572702691
    },
    {
        "content": "<p>it commutes!</p>",
        "id": 179703321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572702765
    },
    {
        "content": "<p>It shouldn't do -- did I make an error?</p>",
        "id": 179703324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572702776
    },
    {
        "content": "<p>These are types not props</p>",
        "id": 179703336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572702792
    },
    {
        "content": "<p>my mistake, I thought you used x+1+2 and x+2+1</p>",
        "id": 179703396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572702879
    },
    {
        "content": "<p>rofl I just permuted the inputs and got it to give a different answer :D</p>",
        "id": 179703400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572702900
    },
    {
        "content": "<p>I don't think <code>tauto</code> was designed for diagram chasing</p>",
        "id": 179703416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572702930
    },
    {
        "content": "<p>I was overjoyed when I found that it did it!</p>",
        "id": 179703421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572702942
    },
    {
        "content": "<p>I think <code>solve_by_elim</code> will do though</p>",
        "id": 179703426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572702956
    },
    {
        "content": "<p>I'm making a whole bunch of definitions in tactic mode for the natural number game, and tauto is my big reveal like simp is for proving a+b+c+d+e=e+d+c+b+a</p>",
        "id": 179703467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572702972
    },
    {
        "content": "<p>I am using these ideas to teach mathematicians about intro, apply, have and exact in a context where they are not freaking out about <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\implies Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> being a function</p>",
        "id": 179703486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703038
    },
    {
        "content": "<p>We saw Antoine making a classic mathematician's error yesterday -- he had <code>f : X -&gt; Y, A B : X, h : A = B, |- f A = f B</code> and wanted to <code>rw f</code> instead of <code>rw h</code>. We can't tell the difference between = and -&gt; in the sense that we do not look out carefully for it.</p>",
        "id": 179703609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703212
    },
    {
        "content": "<p><code>rw</code> does something which in the CS world is all very interesting and there's lots of theory and what have you, but to a mathematician a rewrite is an invisible step, because once A=B then A can be replaced by B at any stage in the future, immediately, and without question -- no justification needed.</p>",
        "id": 179703636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703272
    },
    {
        "content": "<p>so mathematicians know that <code>rw</code> is for something something which isn't really there. And then if P implies Q and we know P then of course we know Q, that argument isn't really there either, it's just obvious from the logic</p>",
        "id": 179703650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703311
    },
    {
        "content": "<p>not invisible exactly, mathematicians are familiar with equality chains</p>",
        "id": 179703651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572703313
    },
    {
        "content": "<p>so it must be <code>rw</code> as well.</p>",
        "id": 179703653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703318
    },
    {
        "content": "<p>Yes, and we're familiar with implies chains.</p>",
        "id": 179703693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703325
    },
    {
        "content": "<p>But when you <em>watch mathematicians doing mathematics</em> they write chains of arguments, and sometimes they're rewriting = and sometimes they're applying P -&gt; Q and both of these (completely different) things are just so completely embedded in a mathematician that they find it hard to tell them apart, they're just both doing something trivial and obvious</p>",
        "id": 179703705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703378
    },
    {
        "content": "<p>I have this every year with schoolkids, they show up here and I ask them to prove <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msqrt><mn>2</mn></msqrt><mo>+</mo><msqrt><mn>6</mn></msqrt><mo>&lt;</mo><msqrt><mn>15</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{2}+\\sqrt{6}&lt;\\sqrt{15}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.13278em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5, -10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8, -50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0, 35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5, -221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467 s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422 s-65,47,-65,47z M834 80H400000v40H845z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.13278em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">6</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5, -10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8, -50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0, 35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5, -221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467 s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422 s-65,47,-65,47z M834 80H400000v40H845z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.13278em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5, -10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8, -50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0, 35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5, -221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467 s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422 s-65,47,-65,47z M834 80H400000v40H845z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span></span></span></span> and they just square both sides, press on, end up deducing 48&lt;49, say this is true so they're done, and <em>they don't even write the connector from each line to the next</em>. They are not trained to do this at school.</p>",
        "id": 179703767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703448
    },
    {
        "content": "<p>At school, they are given an equation and told to prove another equation, and they do it using three rewrites, each of which generates a new equation, and I've looked at the mark sheets for these things because my sons have been doing them and the mark scheme is \"one point for each of the intermediate equations\". No mention at all of the underlying logic.</p>",
        "id": 179703784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703524
    },
    {
        "content": "<p>And similarly they might be asked to prove P -&gt; Q and they prove P -&gt; A -&gt; B -&gt; C -&gt; Q and they get one point for each of A, B, C so *they just write \"P, A, B, C, Q, done\" and get full marks</p>",
        "id": 179703837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703565
    },
    {
        "content": "<p>and then they show up at Imperial with top marks for their school exams and they don't know the difference between P -&gt; Q and P = Q.</p>",
        "id": 179703845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703610
    },
    {
        "content": "<blockquote>\n<p>I think <code>solve_by_elim</code> will do though</p>\n</blockquote>\n<p>OK so I can't get anything to work for this one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f3</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f4</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f5</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f7</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f8</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f9</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f10</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f11</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f12</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f13</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f14</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f15</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">f15</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">f11</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">f9</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">f8</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">f5</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">f2</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">f1</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is there one tactic which solves this example? I'm happy to put move everything before or after the colon if it helps. I couldn't get either <code>tauto</code> or <code>solve_by_elim</code> to work. Note: they are types not props.</p>",
        "id": 179716621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572725193
    },
    {
        "content": "<p>It's just a maze. There a some loops (e.g. f1,f2,f3,f4)</p>",
        "id": 179716640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572725232
    },
    {
        "content": "<p>Oh I've just noticed that I can't even solve it if I change them all to Props! <code>tauto!</code> just sits there, <code>tauto</code> fails, <code>solve_by_elim</code> fails :-/</p>",
        "id": 179716720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572725349
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f3</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f4</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f5</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f7</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f8</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f9</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f10</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f11</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f12</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f13</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f14</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f15</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply_assumption</span><span class=\"o\">},</span>\n <span class=\"kn\">end</span>\n</pre></div>",
        "id": 179717129,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572725996
    },
    {
        "content": "<p>I am pretty sure that if I permute f1-f15 then you will get lost.</p>",
        "id": 179717204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572726108
    },
    {
        "content": "<p>And if that's not true then I'm pretty sure I could generate a level which was solvable but for which this tactic wouldn't work.</p>",
        "id": 179717252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572726159
    },
    {
        "content": "<p>What do I need? a SAT solver? An SMT solver? I am just indicating how clueless I am here.</p>",
        "id": 179717271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572726205
    },
    {
        "content": "<p>An ATP? How do I solve it in Isabelle?</p>",
        "id": 179717277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572726225
    },
    {
        "content": "<p>Current version of challenge:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f_for_Bryan</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f3</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f4</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f5</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f7</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f8</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f9</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f10</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f11</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f12</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f13</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f14</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f15</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply_assumption</span><span class=\"o\">},</span> <span class=\"c1\">-- hangs forever</span>\n <span class=\"kn\">end</span>\n</pre></div>",
        "id": 179717344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572726313
    },
    {
        "content": "<p>I will grudgingly accept  one-tactic answer which works for Props only, and I'm happy with intros or reverts before the tactic.</p>",
        "id": 179717423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572726413
    },
    {
        "content": "<p>Not quite the same thing, but I think <code>tfae</code> is supposed to do something like this to prove <code>iff</code>s. There are <a href=\"https://github.com/leanprover-community/mathlib/pull/1600/files#diff-c4911975b6c6e4ce5852e1617245aa68R133\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1600/files#diff-c4911975b6c6e4ce5852e1617245aa68R133\">some tests</a> in <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>'s PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1600\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1600\">#1600</a> for <code>tfae</code> which are kind of reminiscent of your examples.</p>\n<p>Presumably someone well-versed in the mysteries of meta code could write something like <a href=\"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\">Dijkstra's algorithm</a> or some other pathfinding algorithm for these challenges?</p>",
        "id": 179717770,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572726935
    },
    {
        "content": "<p><code>cc</code> works for Props. Feature request: make <code>cc</code> work for types :D</p>",
        "id": 179718166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572727469
    },
    {
        "content": "<p>you could hack it by using <code>cc</code> to find a proof for the <code>nonempty</code> versions of your hypotheses, then fold over the proof to figure out how to produce the required term</p>",
        "id": 179718403,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1572727753
    },
    {
        "content": "<p>that might be asking a bit much for my users :D They've only just learnt <code>apply</code></p>",
        "id": 179718723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572728228
    },
    {
        "content": "<p>What puzzled me (and still puzzles me) in the way tactics are taught in the natural number game is that I did not understand precisely on what expression they act and by what kind of magic they progressively build a term of the correct type.</p>",
        "id": 179720159,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1572730751
    },
    {
        "content": "<p>I am teaching it in a completely different way to Theorem Proving In Lean, just for an experiment really. Computer scientists are terrified by <code>rw</code> because it is a very complex tactic, replacing entire subterms of a term by other subterms whilst trying to remain consistent and typecheck. On the other hand if a mathematician knows A=B then they can just change every A to a B without even feeling like they are doing anything.</p>",
        "id": 179720323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572731042
    },
    {
        "content": "<p><code>rw</code> always acts on the goal. Should I say this more explicitly? I must say Antoine, your feedback has been invaluable so far, because I know I can trust you as a mathematician, so if you find something difficult I can be confident that you understand the mathematics and the problem is the explanation.</p>",
        "id": 179720344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572731123
    },
    {
        "content": "<blockquote>\n<p>I did not understand precisely on what expression [tactics] act and by what kind of magic they progressively build a term of the correct type.</p>\n</blockquote>\n<p>This is not something I understand too well either, but let me try anyway. Tactics operate on the \"tactic state\", which includes:<br>\n- the \"environment\" (containing all declarations like <code>def</code> and <code>theorem</code>), <br>\n- the \"local context\" (containing a list of the hypotheses available in the current proof), and <br>\n- all current goals. </p>\n<p>All this state is wrapped in some functional programming construct called a \"monad\" (which allows for e.g. backtracking and error-handling) to make it convenient to manipulate via Lean code (tactics are \"just\" functions involving this \"tactic monad\"). </p>\n<p>For more info, there's <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\">the tactic writing tutorial in the mathlib docs</a> with pointers to some more sources.</p>",
        "id": 179721006,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572732398
    },
    {
        "content": "<p>Ha ha so one answer to Antoine's question is that it all works via the magic of category theory</p>",
        "id": 179722798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572736007
    },
    {
        "content": "<p>World 4, level 8 in 25 <code>rw</code> instead of 27:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"n\">one_eq_succ_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">one_eq_succ_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 179723073,
        "sender_full_name": "tirima",
        "timestamp": 1572736571
    },
    {
        "content": "<p>We really need to get <code>rewrite_search</code> into mathlib... :-)</p>",
        "id": 180285359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573257995
    },
    {
        "content": "<p>Isn't this <code>simp</code>?</p>",
        "id": 180300609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573283747
    },
    {
        "content": "<p>Am I doing this right? <a href=\"/user_uploads/3121/O9r8V7CDCyReiTY5Aia1abij/3fsdr0.jpg\" target=\"_blank\" title=\"3fsdr0.jpg\">3fsdr0.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/O9r8V7CDCyReiTY5Aia1abij/3fsdr0.jpg\" target=\"_blank\" title=\"3fsdr0.jpg\"><img src=\"/user_uploads/3121/O9r8V7CDCyReiTY5Aia1abij/3fsdr0.jpg\"></a></div>",
        "id": 180308468,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1573298217
    },
    {
        "content": "<p>(No, I don't think I am...)</p>",
        "id": 180308474,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1573298231
    },
    {
        "content": "<p><code>simp</code> is magic as far as I am concerned. I know that in the case above it's <code>ring</code> I need, but that's because I read the spoiler on Twitter</p>",
        "id": 180309175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573299532
    },
    {
        "content": "<p>I remember Patrick a while ago saying \"ha ha I remember the days when I just tried <code>simp</code> on every goal\" and I'm like \"yeah, that's me now\"</p>",
        "id": 180309230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573299623
    },
    {
        "content": "<p>I remember when someone told me that it worked best on equalities. That was a big step forward.</p>",
        "id": 180309234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573299652
    },
    {
        "content": "<p>The first proof I wrote for that one used <code>simp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_squared</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n<span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Then I read the twitter stuff and thought that maybe <code>simp</code> was against the spirit of the question or something so I tried again.</p>\n<blockquote>\n<p><code>simp</code> is magic as far as I am concerned.</p>\n</blockquote>\n<p>Didn't you just say \"we don't have tactics sophisticated enough to be called black boxes\" ? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 180316364,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573311353
    },
    {
        "content": "<p>Ha ha, you are absolutely right :D I guess I was thinking more about \"mathematical\" tactics, like <code>ring</code>, <code>linarith</code> and <code>norm_num</code>. Whilst of course I could never have written any of these myself, the <em>mathematical</em> jobs they achieve are exactly the sort of things which mathematicians (e.g. by the time they arrive at my university) are told are \"trivial\". To put it another way, these complicated tactics fill in gaps which mathematicians are under no obligation to justify on paper: \"One readily checks that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mi>X</mi><mo>+</mo><mi>b</mi><mi>Y</mi><mo>+</mo><mi>c</mi><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><mi>d</mi><msup><mi>Y</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>e</mi><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><mi>f</mi><mo>+</mo><mi>g</mi><mi>Y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>e</mi><msup><mi>X</mi><mn>3</mn></msup><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">(aX+bY+cX^2+dY^3)*(eX^2+f+gY)=aeX^3+\\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">e</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">e</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span>\", etc. All of <code>simp</code>, <code>tauto</code>, <code>cc</code>, <code>finish</code>, <code>abel</code>, <code>omega</code> or whatever are black magic in the sense that I don't know the algorithms they're using, all I know is that they sometimes work for me.</p>\n<p>I guess this leads to a more general point. Part of the reason I have no idea what <code>cc</code> does is that the documentation, \"Tries to prove the main goal using congruence closure\", means absolutely nothing to me (and probably to most mathematicians). All the tactics which I do think of as black boxes -- perhaps there should be examples of the kind of question they are expected to solve somewhere? My own personal documentation for <code>simp</code> is \"tries to prove X=Y by randomly rewriting results of the form A=B which have been tagged with <code>simp</code>\". I have no idea what the strategy is but at least it felt like an insight when I realised that this was what it was doing.</p>",
        "id": 180323477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573321289
    },
    {
        "content": "<p>I do think the question of what counts as \"trivial\" (and how far we are from being able to do trivial things trivially in Lean+mathlib) is very interesting. But that probably deserves its own topic.</p>\n<p>On your second paragraph: the mathlib tactics have pretty good docs all in one place <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">here</a> (it looks like they mostly have examples, too). We should probably add links to the \"extra\" doc page you wrote for <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/simp.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/simp.md\"><code>simp</code></a> and the one Patrick wrote for <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/cc.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/cc.md\"><code>cc</code></a>, since those are a bit harder to find.</p>",
        "id": 180326256,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573325632
    },
    {
        "content": "<p>Improved to 19 (we were supposed to have access to <code>two_eq_succ_one</code>, right?)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 201517292,
        "sender_full_name": "Nish",
        "timestamp": 1592715987
    },
    {
        "content": "<p>20 steps  with only auto selection,  to match <span class=\"user-mention\" data-user-id=\"313602\">@Nish</span> (I counted 20 steps in theirs)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 201534262,
        "sender_full_name": "David Chew",
        "timestamp": 1592745920
    },
    {
        "content": "<p>Improved to 19 steps</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 201534644,
        "sender_full_name": "David Chew",
        "timestamp": 1592746536
    },
    {
        "content": "<p>now can you prove you can't do it in 18? ;-)</p>",
        "id": 201535218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592747600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/function.20with.20random.20definition/near/201535218\">said</a>:</p>\n<blockquote>\n<p>now can you prove you can't do it in 18? ;-)</p>\n</blockquote>\n<p>This would suggest you can't prove such a thing.  ;-)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_right_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 202661258,
        "sender_full_name": "Learning Balance",
        "timestamp": 1593677972
    },
    {
        "content": "<p>It's like the Rubik's cube</p>",
        "id": 202661821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593678396
    },
    {
        "content": "<p>I did this in 21, and I'm only a couple of days into all this:<br>\nrw two_eq_succ_one,<br>\nrw pow_succ,<br>\nrw pow_succ, <br>\nrw pow_succ, <br>\nrw pow_one, <br>\nrw pow_one, <br>\nrw pow_one, <br>\nrw succ_eq_add_one, <br>\nrw add_mul, <br>\nrw add_mul, <br>\nrw one_mul, <br>\nrw add_mul, <br>\nrw mul_add,<br>\nrw mul_add, <br>\nrw add_right_comm,<br>\nrw add_comm (b*a),<br>\nrw mul_comm b a,<br>\nrw add_assoc (a*a),<br>\nrw add_assoc (a*a),<br>\nrw add_assoc (b*b),<br>\nrefl,</p>",
        "id": 202970068,
        "sender_full_name": "John Cremona",
        "timestamp": 1594028655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317002\">@John Cremona</span> Welcome!<br>\n(Note that you can use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to get syntax highlighting of the code.)</p>",
        "id": 202970628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594029111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317002\">@John Cremona</span> I remember you mentioning to me a couple of years ago that you had embarked upon a proof from first principles that given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>∈</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">g\\in G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span> a group),  the map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span> sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>g</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">g^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> was a group homomorphism, and that it had been much more painful than you had expected. Me and some young mathematicians were working on this last Thursday at Xena and came up with a much more conceptual proof, involving first defining a function which given a bijection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A\\to A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> and an integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> returns the $$n$$th iterate of this bijection; we proved <span class=\"tex-error\">$$f^{[n+m]=f^{[n]}\\circ f^{[m]}$$</span> by some sort of general induction principle we had lying around. Having set up the basic API for this function we could do stuff like the group theory question easily. I mention all this because as I'm sure you know, you can solve the level above very quickly with <code>ring</code>, although I think that trying to figure out the actual minimum number of moves might be a hard problem.</p>",
        "id": 202971678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594029863
    },
    {
        "content": "<p>You are wrong in saying that I know how to solve this in any other way!  I know precisely 0 beyind what I have learned so far in the Natural Number Game, and I have not finished that yet.</p>",
        "id": 202971813,
        "sender_full_name": "John Cremona",
        "timestamp": 1594030007
    },
    {
        "content": "<p>By the way, I think the list of streams in this zulip chat is totally chaotic and unhelpful, e.g. the vast number of subtopics under \"new members\" most of which are not at all suitable reading for newbies.  For a start it would be good to have a thread for beginners' help specifically for the Natural Number Game  where any replies of the form \"all you need to do is &lt;something more advanced than has so far been introduced in the NNG&gt;\" is banned.</p>",
        "id": 202972039,
        "sender_full_name": "John Cremona",
        "timestamp": 1594030158
    },
    {
        "content": "<p>You're certainly right that we should try to move some of the traffic in \"new members\" out to the other streams.</p>",
        "id": 202973060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594030983
    },
    {
        "content": "<p>Maybe we should replace it with a \"Getting started\" or \"First proofs in lean\" stream, I think half the problem is that a lot of people self-identify as \"new members\" even if they've used lean for quite a while and therefore post questions in there that are really quite advanced.</p>",
        "id": 202974240,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594031997
    },
    {
        "content": "<p>Proposal:</p>\n<ol>\n<li><code>introductions</code>: people write a short intro, other people say hi and welcome.</li>\n<li><code>getting started</code>: questions by people who just started using lean; answers shouldn't assume anything advanced</li>\n<li><code>new members</code> get's banned, because it currently is one big grabbag.</li>\n</ol>\n<p>We could even add a dedicated <code>natural number game</code> stream, if people like this.</p>",
        "id": 202974805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594032427
    },
    {
        "content": "<p>what's the difference between 2 and 3</p>",
        "id": 202975671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594033122
    },
    {
        "content": "<p>Certainly at the moment I feel much too intimidated to ask for any help since I'm sure the answers are all obvious.  In fact so far I have come up with the answers myself (after a while) and then they seem obvious to me too. Usually.</p>",
        "id": 202975677,
        "sender_full_name": "John Cremona",
        "timestamp": 1594033125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317002\">@John Cremona</span>  don't feel any pressure to do this, this community really is very question friendly! Maybe because lean still pretty new and comparatively small scale a lot of answers to basic questions just aren't out there in an easy to find manner, so asking here is really the quickest way to go, and there are lots of people happy to answer \"obvious\" questions.</p>",
        "id": 202976269,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594033668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317002\">@John Cremona</span> I will echo what Alex said. If you want an answer fast, just ask. There is soooo much new stuff that you need to wrap your head around, and usually there will be someone that can answer your question in 5 minutes, and it takes them 10 seconds, whereas it might take a newcomer 5 hours to figure it out alone...</p>",
        "id": 202978145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594035598
    },
    {
        "content": "<p>So, we love to answer easy questions.</p>",
        "id": 202978186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594035605
    },
    {
        "content": "<p>i did that Boss_Boss Power level in 20 steps... will try further to get it to 18 (if that's even possible :)</p>\n<p>rw two_eq_succ_one, <br>\nrw pow_succ, <br>\nrw pow_succ, <br>\nrw pow_succ, <br>\nrw mul_assoc (succ 1) a b, <br>\nrw succ_mul, <br>\nrw one_mul, <br>\nrw pow_one, <br>\nrw pow_one, <br>\nrw pow_one, <br>\nrw mul_add, <br>\nrw add_mul, <br>\nrw add_mul,<br>\nrw add_comm (a<em>b) (b</em>b),<br>\nrw add_assoc (a*a) ,<br>\nrw ←  add_assoc (b*a),<br>\nrw add_comm (b*a),<br>\nrw  add_assoc (b*b),<br>\nrw ← add_assoc(a*a),<br>\nrw add_comm (b<em>a) (a</em>b),<br>\nrefl,</p>",
        "id": 204054608,
        "sender_full_name": "Gunjeet Singh",
        "timestamp": 1594885684
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 204055628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594886490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/function.20with.20random.20definition/near/180309230\">said</a>:</p>\n<blockquote>\n<p>I remember Patrick a while ago saying \"ha ha I remember the days when I just tried <code>simp</code> on every goal\" and I'm like \"yeah, that's me now\"</p>\n</blockquote>\n<p>I'm here from the future as a new user just going over the number game tut again and this line speaks to me (especially considering how many times out of laziness I just typed it into this same exercise just to have it lazily sort the terms for me)</p>",
        "id": 204729306,
        "sender_full_name": "Julian Berman",
        "timestamp": 1595456397
    },
    {
        "content": "<p>I made a bad job of that whole <code>simp</code> stuff. If you play the complex number game you'll see me explaining <code>simp</code> much better.</p>",
        "id": 204732730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595458816
    },
    {
        "content": "<p>Got it in 17 rws.  took about... 5-10 minutes, though my hungry cat says longer.</p>\n<p>rw two_eq_succ_one,<br>\nrw pow_succ,<br>\nrw pow_succ,<br>\nrw pow_succ,<br>\nrw succ_mul,<br>\nrw pow_one,<br>\nrw pow_one,<br>\nrw pow_one,<br>\nrw one_mul,<br>\nrw add_mul,<br>\nrw mul_add,<br>\nrw mul_add,<br>\nrw mul_comm b a,<br>\nrw ← add_assoc,<br>\nrw add_right_comm (a * a) (b * b) ((a + a) * b),<br>\nrw add_mul,<br>\nrw ← add_assoc,<br>\nrefl,</p>",
        "id": 225697465,
        "sender_full_name": "PsyMar#2210",
        "timestamp": 1612881098
    },
    {
        "content": "<p>Nice!</p>",
        "id": 225703732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612883509
    },
    {
        "content": "<p>Hello, I have just started the natural number game today and I have managed World 4, Level 8 in 19 <code>rw</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I have seen in the thread that someone else has managed this too but I thought I would share my proof anyway.</p>",
        "id": 248219720,
        "sender_full_name": "Michael",
        "timestamp": 1627997025
    },
    {
        "content": "<p>I should have a leaderboard :-) Well done!</p>",
        "id": 248253996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628012479
    },
    {
        "content": "<p>Hello, I started the natural number game recently and thus far have managed to work up to Power World. I wonder about the following solution to Power World, Level 8:</p>\n<p>rw two_eq_succ_one, <br>\nrw pow_succ,<br>\nrepeat {rw pow_one},<br>\nrw mul_add,<br>\nrepeat {rw pow_succ},<br>\nrepeat {rw pow_one},<br>\nring,</p>\n<p>I must admit that I don't understand the very last step (\"ring\") in the proof, although Lean seems to accept it. </p>\n<p>Thanks in advance for any suggestions.</p>",
        "id": 248401161,
        "sender_full_name": "Anindya Banerjee",
        "timestamp": 1628107427
    },
    {
        "content": "<p><code>ring</code> is a tactic that solves goals that are true in all (commutative?) rings, and the goal at the end is one of those things</p>",
        "id": 248402461,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628108104
    },
    {
        "content": "<p>Thank you.</p>\n<p>I have another question with Level 9 of Function World, for which my attempt is:</p>\n<p>intros a:A, have b:=f1 a, have e:=f2 b, have f:=f5 e, <br>\nhave g:=f8 f, have j:=f9 g, have i:=f11 j, <br>\napply f15, exact i,</p>\n<p>Here Lean reports:</p>\n<p>26:19: goal<br>\nno goals</p>\n<p>and</p>\n<p>24:8: error:<br>\ninvalid 'begin-end' expression, ',' expected<br>\n24:12: error:<br>\nsync</p>\n<p>I am trying to understand the error.</p>\n<p>Thanks in advance.</p>",
        "id": 248405287,
        "sender_full_name": "Anindya Banerjee",
        "timestamp": 1628109270
    },
    {
        "content": "<p>the error is the fact you said <code>intros a:A</code> instead of just <code>intros a</code>. as Lean knows that the next thing you're <code>intro</code>ing, there's no need to tell it what type it is; it'll figure it out for you, and therefore the tactic gets confused as to why you're trying to tell it.</p>",
        "id": 248408009,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628110650
    },
    {
        "content": "<p>(this isn't always true - sometimes you will want to say, but it's true in most cases)</p>",
        "id": 248408125,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628110694
    },
    {
        "content": "<p>I somehow got 18 rewrites. I wasn't even trying for a record.<br>\n<code>rw two_eq_succ_one,\nrw pow_succ,\nrw pow_succ,\nrw pow_succ,\nrw pow_one,\nrw pow_one,\nrw pow_one,\nrw succ_mul,\nrw one_mul,\nrw mul_add,\nrw add_mul,\nrw add_mul,\nrw add_mul,\nrw add_assoc,\nrw add_assoc,\nrw mul_comm b,\nrw add_comm (b*b) (a*b+a*b),\nrw ←add_assoc (a*b),\nrefl,</code></p>",
        "id": 279985756,
        "sender_full_name": "xp2_882030kgz010602",
        "timestamp": 1650813794
    },
    {
        "content": "<p>I had not realized you can define functions in tactic mode and it actually tells you your assumptions and goals<br>\nThis is the funniest thing to me, more programming languages should do this</p>",
        "id": 279990358,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650820901
    },
    {
        "content": "<p>I understand why this works, but it still feels illegal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">what</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">solve_by_elim</span>\n</code></pre></div>",
        "id": 279992950,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650824380
    },
    {
        "content": "<p>Aaron, even without tactic mode, if you use an underscore for each yet-to-be-written term, you can get the same effect in term mode (i.e. having Lean tell you your goals and assumptions).  Every functional language should have a language server which does this!</p>",
        "id": 280001012,
        "sender_full_name": "Jason Rute",
        "timestamp": 1650835991
    },
    {
        "content": "<p>Lean also has \"holes\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">what</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Try doing the \"use <code>library_search</code> to complete the goal\" hole command.</p>",
        "id": 280001898,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650837564
    },
    {
        "content": "<p>My attempt at Power World level 8 @ 25 rewrites</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_one</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_one</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_add</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_add</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 280485807,
        "sender_full_name": "Tariq Erwa",
        "timestamp": 1651149144
    },
    {
        "content": "<p>My answer to Power world level 8 in 15 rows:</p>\n<p>rw two_eq_succ_one,<br>\nrw one_eq_succ_zero,<br>\nrepeat {rw pow_succ},<br>\nrepeat {rw pow_one},<br>\nrw succ_mul,<br>\nrepeat {rw pow_zero},<br>\nrepeat {rw one_mul},<br>\nrw mul_add,<br>\nrepeat {rw add_mul},<br>\nrepeat {rw add_assoc},<br>\nrw mul_comm b,<br>\nrw succ_mul,<br>\nrw zero_mul,<br>\nrw zero_add,<br>\nsimp,</p>",
        "id": 302257428,
        "sender_full_name": "Omar Hidmi",
        "timestamp": 1664889211
    }
]