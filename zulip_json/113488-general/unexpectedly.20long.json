[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sup_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_eq</span> <span class=\"n\">β</span><span class=\"bp\">;</span> <span class=\"k\">from</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">bot_le</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">})</span>\n<span class=\"c1\">-- why so long?</span>\n</pre></div>",
        "id": 134828020,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538144951
    },
    {
        "content": "<p>takes somewhere between 5s and 30s to compile</p>",
        "id": 134828031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538144962
    },
    {
        "content": "<p>Is the time spent on <code>simp</code>?</p>",
        "id": 134829320,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538145942
    },
    {
        "content": "<p>I think so</p>",
        "id": 134829840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538146413
    },
    {
        "content": "<p>btw that's <code>finset.sup_le</code></p>",
        "id": 134829940,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538146476
    },
    {
        "content": "<p>that's right, a 10s-lemma is inside mathlib</p>",
        "id": 134829952,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538146484
    },
    {
        "content": "<p>I'm planning on writing a tactic today <code>squeeze_simp</code> that will call <code>simp</code> and print a minimized <code>simp only</code> version. That might help in your endeavor</p>",
        "id": 134839187,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538155603
    },
    {
        "content": "<p>I can automate the application of the suggestion in emacs but I don't know how to do the same with VS code</p>",
        "id": 134839219,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538155657
    },
    {
        "content": "<p>Register it as a hole command, like <code>tidy</code> does.</p>",
        "id": 134839421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538155878
    },
    {
        "content": "<p>Is that a mechanism of VS Code?</p>",
        "id": 134839603,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538156080
    },
    {
        "content": "<p>No, it's a Lean thing</p>",
        "id": 134840062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538156520
    },
    {
        "content": "<p>I think it is a type class</p>",
        "id": 134840104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538156525
    },
    {
        "content": "<p>But I guess IDE's also have to hook into it. But this is a one time thing that has been done already</p>",
        "id": 134840132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538156564
    },
    {
        "content": "<p>Thanks! I'm looking at the <code>tidy</code> code, it's actually an attribute</p>",
        "id": 134840140,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538156573
    },
    {
        "content": "<p>Cool</p>",
        "id": 134840156,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538156590
    },
    {
        "content": "<p>Simon have you determined yet whether the emacs mode already supports hole commands? I haven't looked</p>",
        "id": 134840173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538156611
    },
    {
        "content": "<p>I thought emacs always supported the supremum of the features of all other IDE's<br>\nBy definition</p>",
        "id": 134840284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538156700
    },
    {
        "content": "<p>It is indeed emacs definition</p>",
        "id": 134840326,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538156755
    },
    {
        "content": "<p>It does support hole commands, at least three that I have seen</p>",
        "id": 134840382,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538156775
    },
    {
        "content": "<p>Since <code>tidy</code> there should be 4</p>",
        "id": 134840401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538156796
    },
    {
        "content": "<p>I confirm that I can now see tidy in that list too</p>",
        "id": 134840430,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538156826
    },
    {
        "content": "<p>I like the idea of the type hole but it has a down side: if you're replacing <code>simp</code> in a file, you have to do it one at a time.</p>",
        "id": 134840456,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538156868
    },
    {
        "content": "<p>Aha I see, I have to be inside the hole and then invoke <code>lean-hole</code>.</p>",
        "id": 134840547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538156950
    },
    {
        "content": "<p>I misunderstood the docstring \"Ask Lean for a list of holes, then ask the user which to use.\"</p>",
        "id": 134840568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538156973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Agreed. Still it could be nice for the future. Because then one can use it during the golfing phase of a proof that one just finished.</p>",
        "id": 134840701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538157086
    },
    {
        "content": "<p>For squeezing entire files you might not even want to focus on editor integration.</p>",
        "id": 134840725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538157115
    },
    {
        "content": "<p>I agree with your first point Johan. For the second point, the reason I'm thinking about editor integration is out of laziness. The slow files are really big and applications of <code>simp</code> vary a lot so search and replace alone doesn't cut it</p>",
        "id": 134840941,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538157315
    },
    {
        "content": "<p>Ok, fair enough</p>",
        "id": 134841018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538157377
    },
    {
        "content": "<p>What I want to do is search and replace <code>simp</code> (not preceded by a square bracket) with <code>squeeze_simp</code> which will output all the required substitutions with line numbers and then emacs can do a very targeted replacement of all the <code>squeeze_simp</code></p>",
        "id": 134841064,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538157433
    },
    {
        "content": "<p>But now that I know about <code>hole_command</code> attributes, I think I might start with that to test out my idea</p>",
        "id": 134841212,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538157582
    }
]