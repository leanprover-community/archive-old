[
    {
        "content": "<p>I've come across an issue with a tactic I'm trying to write, which needs to have different behaviour based on the divisibility of the inputs, and I need to be able to convert the hypothesis generated by the if statement into a pexpr (or expr as the conversion between the two is not an issue) to use later in the tactic.</p>\n<p><code>/-- If `x ∣ y` return an `expr` containing a proof! -/\nmeta def baz (x y : ℕ) : tactic (option expr) := \nif h : x ∣ y then\n some &lt;$&gt; to_expr ``(reflect %%h)\nelse\npure none </code></p>\n<p>The above code currently errors with, failed to find type class instance for has_to_pexpr (x ∣ y).  Does anyone know if this instance exists and just can't be inferred correctly, a way to make this instance if it doesn't exist, or an alternative way to convert the hypothesis to a (p)expr?</p>",
        "id": 166336595,
        "sender_full_name": "Aaron Bryce",
        "timestamp": 1558593471
    },
    {
        "content": "<p>It is not possible to do what you are attempting, because <code>h</code> does not exist in the VM</p>",
        "id": 166336831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558593787
    },
    {
        "content": "<p>:-(</p>",
        "id": 166336843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558593826
    },
    {
        "content": "<p>Instead, you merely learn from that if statement that <em>in fact</em> x divides y, without a proof</p>",
        "id": 166336846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558593836
    },
    {
        "content": "<p>You can try to produce a proof by using <code>dec_trivial</code></p>",
        "id": 166336894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558593860
    },
    {
        "content": "<p><code>by norm_num</code> is probably the best method</p>",
        "id": 166336897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558593882
    },
    {
        "content": "<p>Oh, I see. You have the if statement that is executed in the tactic logic, and then when it's time to build the <code>expr</code> you're after, you build the proof <em>again</em> inside a quotation.</p>",
        "id": 166336928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558593958
    },
    {
        "content": "<p>Is this doing it?</p>\n<div class=\"codehilite\"><pre><span></span>open tactic\n\n/-- If `x ∣ y` return an `expr` containing a proof! -/\nmeta def baz (x y : ℕ) : tactic (option expr) :=\nif h : x ∣ y then\n  some &lt;$&gt; to_expr ``(by norm_num : %%(reflect x) ∣ %%(reflect y))\nelse\n  pure none\n</pre></div>",
        "id": 166337066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558594113
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- If `x ∣ y` return an `expr` containing a proof! -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∣</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">y</span><span class=\"o\">)),</span>\n  <span class=\"n\">p&#39;</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mpr</span> <span class=\"n\">p</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">trivial</span><span class=\"o\">),</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">p&#39;</span><span class=\"o\">)</span>\n<span class=\"k\">else</span>\n<span class=\"n\">pure</span> <span class=\"n\">none</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">some</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">baz</span> <span class=\"mi\">2</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span>\n</pre></div>",
        "id": 166337154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594260
    },
    {
        "content": "<blockquote>\n<p>you build the proof <em>again</em></p>\n</blockquote>\n<p>You never built a proof the first time. For all you know the reason x | y evaluated to true is because it evaluated it with GMP natural numbers</p>",
        "id": 166337173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558594321
    },
    {
        "content": "<p>Huh. Okay!</p>",
        "id": 166337242,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558594394
    },
    {
        "content": "<p>Lean is awesome. :-)</p>",
        "id": 166337247,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558594414
    },
    {
        "content": "<p>Indeed. Both dec_trivial and norm_num seem to work in this instance, this tactic is now appears to be fully working Scott.</p>",
        "id": 166337334,
        "sender_full_name": "Aaron Bryce",
        "timestamp": 1558594516
    }
]