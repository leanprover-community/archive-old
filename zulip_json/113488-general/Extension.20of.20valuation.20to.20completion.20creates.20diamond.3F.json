[
    {
        "content": "<p>Given a valued field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, there seem to be two ways to obtain a uniform space structure on its completion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>K</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9468em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9468em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span><span style=\"top:-3.2523em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1944em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span>.</p>\n<ol>\n<li>The uniform space space structure that it carries because it is a completion.</li>\n<li>The uniform space structure induced by the extension of the valuation to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>K</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9468em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9468em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span><span style=\"top:-3.2523em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1944em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span>.</li>\n</ol>\n<p>I haven't thought about it but I presume these are mathematically equal. Is that true?</p>",
        "id": 279718153,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650564541
    },
    {
        "content": "<p>Assuming this is true, IIUC, we have the following diamond problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.valued_field</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">valued</span> <span class=\"n\">K</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">valued</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space.completion</span> <span class=\"n\">K</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">valued.uniform_space</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hv</span><span class=\"o\">)</span> <span class=\"bp\">Γ₀</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">valued.extension_valuation</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">uniform_space.completion.uniform_space</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">valued.uniform_space</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hv</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- Fails!</span>\n</code></pre></div>",
        "id": 279718201,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650564568
    },
    {
        "content": "<p>And now assuming I've got that right, does this mean that we should require a <code>valuation</code> to carry a bundled <code>uniform_space</code> structure (+ proof that it is the one induced by the valuation) so that we can solve this diamond?</p>",
        "id": 279718392,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650564655
    },
    {
        "content": "<p>This came up in <a href=\"https://github.com/leanprover-community/mathlib/pull/13462\">#13462</a> cc <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span></p>",
        "id": 279718442,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650564683
    },
    {
        "content": "<p>That sounds like it is a reasonable solution.</p>",
        "id": 279719639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650565247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Do you remember if we thought about this issue during the perfectoid project?</p>",
        "id": 279719706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650565288
    },
    {
        "content": "<p>Mathematically I think everything is OK, the two metrics are the same (if we use the same norm for the uniformizer).</p>",
        "id": 279720546,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650565684
    },
    {
        "content": "<p>I would vote against bundling a uniform space structure with a valuation.<br>\nThere is this notion of a V-topology which is quite important in valuation theory (not to be confused with \"the\" v-topology, which is a Grothendieck topology). One of the classical results in valuation theory is that a V-topology always arises from a valuation or an absolute value, and two valuations are dependent if and only if they induce the same V-topology.</p>",
        "id": 279725918,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650568308
    },
    {
        "content": "<p>Stating such results would be quite annoying if the topology was bundled with the valuation.</p>",
        "id": 279726037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650568360
    },
    {
        "content": "<p>On the other hand, maybe the class <code>valued_field</code> (or <code>valued_ring</code>) could indeed be bundled with a uniform space structure?</p>",
        "id": 279727264,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650568973
    },
    {
        "content": "<p>Could you ask me the same question in two days? I'm chairing a hiring committee tomorrow and I really can't do math (or Lean) now.</p>",
        "id": 279739676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1650575003
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I agree; it is <code>valued</code> rather than <code>valuation</code> that should carry the bundled <code>uniform_space</code> structure. I'll try to get to this later today.</p>",
        "id": 279789803,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650613557
    },
    {
        "content": "<p>(For the record, this pattern of bundling equal-but-not-defeq instances is called <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#forgetful%20inheritance\">forgetful inheritance</a>)</p>",
        "id": 279801689,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1650621077
    },
    {
        "content": "<p>I'm going to see if I can produce a PR (probably draft) solving the diamond problem here this afternoon based on changing the definition of <code>valued</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">valued</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Γ₀</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">uniform_space</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"bp\">Γ₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_uniform_valuation</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓤</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"bp\">Γ₀ˣ</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">p.2</span> <span class=\"bp\">-</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ</span> <span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 280057241,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650887485
    },
    {
        "content": "<p>Still WIP but hopefully going in the right direction: <a href=\"https://github.com/leanprover-community/mathlib/pull/13691\">#13691</a></p>",
        "id": 280098779,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650906047
    },
    {
        "content": "<p>I spent most of the day on <a href=\"https://github.com/leanprover-community/mathlib/pull/13691\">#13691</a> (again) but I think I should finish tomorrow. Mathematically there are now just two sorries, both of which seem to be elementary results in Bourbaki.</p>",
        "id": 280240377,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650992945
    },
    {
        "content": "<p>Maybe I'll get lucky and someone will fill them in for me. Here's one of them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group_completion</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">uniform_space</span>\n\n<span class=\"c1\">-- Bourbaki GT III §3 no.4 Proposition 7 [I hope]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">filter.has_basis.completion_nhds_zero</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"c1\">-- `separated_space` really necessary?</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"n\">G</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">closure</span> <span class=\"bp\">$</span> <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 280240633,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650993085
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/pull/13691\">#13691</a> is ready for review now. Any comments welcome, especially from <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span></p>",
        "id": 280369658,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651074807
    },
    {
        "content": "<p>Incidentally the Bourbaki lemma above is true with much weaker hypotheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group_completion</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">uniform_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">filter.has_basis.has_basis_of_dense_inducing'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">regular_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">dense_inducing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">closure</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.has_basis_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hT</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hT</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">T'</span><span class=\"o\">,</span> <span class=\"n\">hT₁</span><span class=\"o\">,</span> <span class=\"n\">hT₂</span><span class=\"o\">,</span> <span class=\"n\">hT₃</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nhds_is_closed</span> <span class=\"n\">hT</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hT₄</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">T'</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hf.to_inducing.nhds_eq_comap</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">T'</span><span class=\"o\">,</span> <span class=\"n\">hT₁</span><span class=\"o\">,</span> <span class=\"n\">subset.rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hi'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hT₄</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">closure_mono</span> <span class=\"o\">(</span><span class=\"n\">image_subset</span> <span class=\"n\">f</span> <span class=\"n\">hi'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">subset.trans</span> <span class=\"o\">(</span><span class=\"n\">closure_minimal</span>\n      <span class=\"o\">(</span><span class=\"n\">image_subset_iff.mpr</span> <span class=\"n\">subset.rfl</span><span class=\"o\">)</span> <span class=\"n\">hT₃</span><span class=\"o\">)</span> <span class=\"n\">hT₂</span><span class=\"o\">)⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hi'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hT</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hi'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">subset.rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hf.closure_image_mem_nhds</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Bourbaki GT III §3 no.4 Proposition 7</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"n\">G</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">closure</span> <span class=\"bp\">$</span> <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.has_basis_of_dense_inducing'</span> <span class=\"n\">completion.dense_inducing_coe</span>\n</code></pre></div>",
        "id": 280369768,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651074844
    }
]