[
    {
        "content": "<p>Why are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false\">docs#false</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/empty\">docs#empty</a> marked as constants in the docs (including the scary red box) although they are just innocent inductive types ?</p>",
        "id": 212925915,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1602350310
    },
    {
        "content": "<p>Every inductive type adds constant to the environment.</p>",
        "id": 212925940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602350357
    },
    {
        "content": "<p>Those constant aren't listed in the docs usually, but I guess in those two cases there is nothing else to list since there are no constructors.</p>",
        "id": 212925999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602350448
    },
    {
        "content": "<p>Oh indeed that makes sense. Thanks !</p>",
        "id": 212926010,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1602350472
    },
    {
        "content": "<p>You run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">env.get</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic.trace</span> <span class=\"n\">decl.is_constant</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic.skip</span>\n\n<span class=\"kd\">run_cmd</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">env.get</span> <span class=\"bp\">`</span><span class=\"n\">nat.rec</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic.trace</span> <span class=\"n\">decl.is_constant</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic.skip</span>\n</code></pre></div>\n\n<p>and put your cursor on each <code>run_cmd</code> to see that both <code>nat</code> and <code>nat.rec</code>are constants.</p>",
        "id": 212926208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602350809
    },
    {
        "content": "<p>The calculus of inductive construction is a huge machine to create mathematical objects from nowhere. When defining <code>nat</code> you are postulating the existence of a type with its constructors and recursor, coming out of nowhere, so you get constants everywhere.</p>",
        "id": 212926221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602350880
    },
    {
        "content": "<p>This is very different from set theoretical foundations where the rule of the game is that everything must be a set, constructed using a handfull of allowed formulas, and you need tricks to encode everything (see eg <a href=\"https://en.wikipedia.org/wiki/Natural_number#Constructions_based_on_set_theory\">https://en.wikipedia.org/wiki/Natural_number#Constructions_based_on_set_theory</a>)</p>",
        "id": 212926335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602351040
    },
    {
        "content": "<p>Yep that makes total sense now, thanks again. On the topic of esoteric set theory constructions, I'm a big fan of this one <a href=\"https://en.wikipedia.org/wiki/Ordered_pair#Defining_the_ordered_pair_using_set_theory\">https://en.wikipedia.org/wiki/Ordered_pair#Defining_the_ordered_pair_using_set_theory</a></p>",
        "id": 212926583,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1602351470
    },
    {
        "content": "<p>Yes, it's the same issue. And note that functions in set theory are defined as sets of pairs (their graphs), so things like this pile up.</p>",
        "id": 212930771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602357574
    }
]