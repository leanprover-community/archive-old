[
    {
        "content": "<p>I am trying to install mathlib on a windows laptop. In mingw I set all the paths, but I get this:</p>\n<div class=\"codehilite\"><pre><span></span>$ leanpkg install https://github.com/leanprover/mathlib\n&gt; mkdir -p C:\\msys64\\home\\aviga/.lean\n&gt; cd C:\\msys64\\home\\aviga/.lean\nfatal: not a git repository (or any of the parent directories): .git\nfatal: not a git repository (or any of the parent directories): .git\nmathlib: trying to update _target/deps/mathlib to revision lean-3.4.1\ncannot find revision lean-3.4.1 in repository _target/deps/mathlib\n</pre></div>\n\n\n<p>What am I doing wrong?  And -- out of curiosity -- why does it take so long for <code>leanpkg</code> to start up?</p>",
        "id": 134031931,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1537058072
    },
    {
        "content": "<p>Hi Jeremy! If leanpkg takes a while to start up, it's most likely not running from its .olean files. I don't know about the git error unfortunately</p>",
        "id": 134032148,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537058554
    },
    {
        "content": "<p>I suspected that, but I can't imagine why not. I installed the binary from <code>leanprover.github.io</code>, and the files are all there.<br>\nMaybe I'll ask Mario to help me on Monday.</p>",
        "id": 134032556,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1537059487
    },
    {
        "content": "<p>Hmm, I use Lean on Windows.  I've never installed mathlib user-wide. I know it works if you do <code>leanpkg add</code> per project.</p>",
        "id": 134032624,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537059708
    },
    {
        "content": "<p>Thanks for the suggestion. Indeed, using <code>leanpkg add</code> worked (modulo the problem with not using the <code>.olean</code> files).</p>",
        "id": 134033297,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1537060866
    },
    {
        "content": "<p>Heh, well, we do have the following source comment :) : <a href=\"https://github.com/leanprover/lean/blob/master/src/util/lean_path.cpp#L45\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/src/util/lean_path.cpp#L45\">https://github.com/leanprover/lean/blob/master/src/util/lean_path.cpp#L45</a></p>",
        "id": 134034346,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537063420
    },
    {
        "content": "<p>Thanks. Things seem to be ok now. Using <code>lean --make</code> in the <code>library</code> directory seems to have fixed the <code>.olean</code> problem. And deleting the <code>.lean</code> directory and running <code>leanpkg install</code> again seems to be working. It is building <code>mathlib</code> now.</p>",
        "id": 134034502,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1537063749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> Now that I think about it, I'm surprised the .olean files haven't been a bigger issue before. We check the modification time of the .olean file against that of the corresponding .lean file. Extracting files from a zip file resets the modification time, so the result depends on the extraction order (at least in the zip file itself, .olean files are listed after their .lean files). And even then, Windows touches each downloaded file again to mark them as \"potentially dangerous\"</p>",
        "id": 134041464,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537077884
    },
    {
        "content": "<p>Just to remark that I am nowadays completely resigned to the fact that every invocation of <code>leanpkg</code> on a Windows machine begins with a 15 second wait during which nothing seems to happen other than me moaning about Windows.</p>",
        "id": 134044339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537083306
    },
    {
        "content": "<p>A little test shows that on linux the <code>tar</code> command seems to preserve file timestamps. Is this just a problem with zip on Windows? And am I right in thinking I can fix on a user's Windows machine by somehow re-compiling leanpkg just once?</p>",
        "id": 134045713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537086601
    },
    {
        "content": "<p>elan seems to reset the modifications times even on Linux, though that's probably its own fault. Anyway, I've never had an issue with it on Linux, whereas I could reproduce the issue on Windows on the first try</p>",
        "id": 134060613,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537116087
    },
    {
        "content": "<p>As Jeremy said, you should go into the <code>library</code> folder and call <code>lean --make</code>. You could do the same in <code>leanpkg</code>, but that's probably not the expensive part</p>",
        "id": 134060655,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537116160
    },
    {
        "content": "<p>An old post from Kevin (<a href=\"https://xenaproject.wordpress.com/2017/12/02/how-to-install-mathlib-and-keep-it-up-to-date/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2017/12/02/how-to-install-mathlib-and-keep-it-up-to-date/\">https://xenaproject.wordpress.com/2017/12/02/how-to-install-mathlib-and-keep-it-up-to-date/</a>) suggests he has been struggling with this issue for a while. <br>\nActually, for me, the situation is even more mysterious. When I do <code>lean --make</code> in the <code>library</code> folder, it compiles a bunch of files, say list <code>A</code>. If I type <code>lean --make</code> again, it compiles another bunch, say, list <code>B</code>. Then if I do it again, it then recompiles list <code>A</code>! If I keep doing it,  it continues to cycle through those two. It is almost as though <code>lean</code> thinks there is a cyclic dependency, or there is some kind of funny race condition with timestamps. (I think the wait to start <code>leanpkg</code> became less painful only because I landed on the shorter side of the cycle.)<br>\nI'll be out all afternoon and the laptop is at home, but I'll experiment more later tonight.</p>",
        "id": 134065460,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1537126695
    },
    {
        "content": "<p>Oof, that doesn't sound good at all</p>",
        "id": 134065730,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537127355
    },
    {
        "content": "<p>One good news, Lean 4 will have a trace option to debug why an .olean file wasn't imported...</p>",
        "id": 134065734,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537127390
    },
    {
        "content": "<p>This might be only tangentially related, but I experienced <a href=\"https://github.com/leanprover/mathlib/issues/308\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/308\">something like this</a> when I ran <code>leanpkg build</code> inside <code>_target/deps/mathlib</code> in a package and then ran it from the base folder afterwards. I had also expected that once the .olean files were generated once, they didn't have to be rebuilt if nothing changed, but I guess that's not true.</p>",
        "id": 134065838,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1537127597
    },
    {
        "content": "<p>You should not run <code>leanpkg</code> inside the <code>target</code> folder, I think it gets confused</p>",
        "id": 134065939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537127822
    },
    {
        "content": "<p>you can just run <code>lean --make</code> instead</p>",
        "id": 134065945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537127833
    },
    {
        "content": "<p>Update: deleting all the<code>. olean</code> files (<code>del /s *.olean</code> in <code>library</code>) and rebuilding (<code>lean --make</code>) seems to work fine. After that, <code>lean --make</code> does nothing. I had to go into the <code>leanpkg</code> directory and run <code>lean --make</code> there too. Now <code>leanpkg</code> runs instantaneously.</p>",
        "id": 134074893,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1537147706
    },
    {
        "content": "<p>I just released a new version of elan that seems to fix the issue</p>",
        "id": 134075802,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537149741
    }
]