[
    {
        "content": "<p>There have been a few Lean releases with new features, so I thought I'd give some abbreviated release notes. I'm skipping all the useful bug fixes and preparations for mathport, focusing instead on more visible changes. Mathlib is now on 3.42.0c.</p>\n<h1>Lean 3.42.0c</h1>\n<ul>\n<li>fix for the \"unknown declaration\" error when rebuilding oleans involving <code>private</code> definitions</li>\n<li>add a <code>noncomputable!</code> modifier to completely inhibit VM compilation for definitions (replaces <code>force_noncomputable</code>)</li>\n<li>add check that non-Prop theorems be noncomputable (so Lean will tip you off that you're going against the mathlib <code>def_lemma</code> linter)</li>\n</ul>\n<h1>Lean 3.41.0c</h1>\n<ul>\n<li>let <code>sorry</code> take an ignored tactic block, so <code>sorry { ... }</code> works to skip slow or incomplete subproofs</li>\n<li>add options for controlling numeral pretty printing. <code>set_option pp.numeral_types true</code> adds type ascriptions to numerals. This is also controlled by the <code>pp_numeral_type</code> attribute, for example <code>attribute [pp_numeral_type] fin</code>.</li>\n<li>make the noncomputability checker aware of computational irrelevance of parameters in constructors. (Now, for example, you can have computable instances for typeclasses with noncomputable parameters.)</li>\n<li>add a search engine for finding relevant lemmas, for applications such as using external automated provers. (<a href=\"https://github.com/leanprover-community/lean/pull/696\">lean#696</a>)</li>\n</ul>\n<h1>Lean 3.39.0c</h1>\n<ul>\n<li>add option <code>pp.parens</code> to cause the pretty printer to ignore precedence and print all parentheses</li>\n</ul>\n<h1>Lean 3.38.0c</h1>\n<ul>\n<li>make <code>simp only</code> use all <code>congr</code> lemmas</li>\n<li>make <code>simp</code> not synthesize subsingleton instances, which introduce diamond issues</li>\n<li>add special support for congruence lemmas for <code>decidable</code> instances</li>\n</ul>\n<h1>Lean 3.37.0c</h1>\n<ul>\n<li>improve <code>simp</code>'s handling of <code>out_param</code></li>\n</ul>",
        "id": 275927755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647721326
    },
    {
        "content": "<p>Some experimentation seems to indicate that these features are all now available in <code>mathlib</code> right now -- am I right? This would be very cool because <code>force_noncomputable</code> is very popular in London. I see that mathlib's <code>leanpkg.toml</code> says <code>lean_version = \"leanprover-community/lean:3.42.0\"</code> but I'm a bit unsure about what the <code>c</code> means in <code>Lean 3.42.0c</code>.</p>",
        "id": 275927924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647721604
    },
    {
        "content": "<p>I think that's the \"c\": leanprover-<strong><em>c</em></strong>ommunity/lean:3.42.0</p>",
        "id": 275928018,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647721749
    },
    {
        "content": "<p>Oh, c for community?</p>",
        "id": 275928069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647721812
    },
    {
        "content": "<p>Right, it's a little marker to show that this is the forked version, not an MSR release.</p>",
        "id": 275928082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647721856
    },
    {
        "content": "<p>I sometimes worry about what will happen when all these people who are populating the <code>lean4</code> stream (and this is currently a really active stream, it's exciting to see) start saying \"we want to use some of your mathlib stuff but not all of it so please start fragmenting\". I remember pre-3.4.2 when the mathlib community were less in sync with the Lean developers and things were slightly more complicated. Since the fork the mathlib people and the Lean 3 people have been working together as one unit, essentially -- Kyle's post above is yet another example of this; many of these changes were inspired by mathlib. Right now we have got a super-efficient set-up, with development of difficult mathematics yielding subtle issues in core Lean (e.g. <code>force_noncomputable</code>) which are then fixed (e.g. with <code>noncomputable!</code>) and everyone is happy. Similarly there is a very smooth transition between the major developments which depend on mathlib (such as LTE) and mathlib itself, with the <code>for_mathlib</code> directories being ported when necessary. The Zulip makes this community super-smooth and functional. I am unclear about for how long we can live in this nirvana.</p>",
        "id": 275928309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647722188
    },
    {
        "content": "<p>I've seen myself in this situation of needing \"just this little bit of Mathlib4\" a few times. Sometimes I add Mathlib4 as a dependency and sometimes I just sorry out some theorems or state them as axioms.</p>\n<p>I <em>think</em> Lean 4  (and Lake) will be powerful enough to download just enough of the dependencies. Right now, It's a bit weird to download thousands of files when the main code has just a handful of them.</p>",
        "id": 275928988,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647723042
    }
]