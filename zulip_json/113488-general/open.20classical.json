[
    {
        "content": "<p>In a lot of documentation I see <code>open classical</code> mentioned as a requirement to use some non-constructive tactics like <code>by_cases</code>, <code>by_contradiction</code>, etc.  I was hoping that deleting <code>open classical</code> from such examples would result to an error, but everything compiled fine.  Digging a bit I saw that my <code>lean/library/init</code> dir has a <code>default.lean</code> file that seems to be auto-included or something, and in it I see an <code>import</code> line importing <code>init.classical</code> (among other stuff).<br>\nWhat's the recommended way to proceed if I want Lean to complain (or, even better, to throw a warning) when non-constructive proofs are present in a .lean file?  I saw that I can add a <code>prelude</code> line to \"not import anything\", but I was suppose there's a more standard way for achieving this.  <br>\nAny pointers to documentation or some relevant conversation here on Zulip, would be very helpful!</p>",
        "id": 261446399,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636935354
    },
    {
        "content": "<p><code>open classical</code> should only open the namespace and just make lemmas accessible via shorter names, <code>open_locale classical</code> will actually add classical instances to the typeclass system locally and therefore subtly affect proofs</p>",
        "id": 261446526,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636935540
    },
    {
        "content": "<p>Those comments are not too accurate - <code>by_cases</code> and <code>by_contradiction</code> will work intuitionalistically if the required decidable instances are there. So I'd start by checking <code>#print axioms (your decl)</code> and seeing whether <code>classical.choice</code> is actually used</p>",
        "id": 261446534,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636935552
    },
    {
        "content": "<p>I think there are a few users commands on zulip for printing all the axioms in a file and stuff liek that, here is one by <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/not.20equals/near/209186002\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/not.20equals/near/209186002</a>, I thought <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> had something doing a similar task at some point too? Not sure if anything ever made it to mathlib</p>",
        "id": 261446608,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636935669
    },
    {
        "content": "<p>It wouldn't be too difficult to make a version that fails if a certain axiom is present I guess</p>",
        "id": 261446660,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636935730
    },
    {
        "content": "<p>Ok, this is pretty much my first contact with lean on my computer (just fiddled with the natural numbers game via my browser up to now).<br>\nI used <code>leanpkg</code> to make a new Lean package, and simply adding <code>#print axioms</code> (nothing more than that) on a file shows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">quot.sound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">b</span>\n<span class=\"n\">classical.choice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">propext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>So I guess classical logic is available?</p>",
        "id": 261446763,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636935917
    },
    {
        "content": "<p>classical logic is available, but you can always choose to ignore it</p>",
        "id": 261446771,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636935938
    },
    {
        "content": "<p>I'm trying to understand what <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  mentioned about «the required decidable instances are there».</p>",
        "id": 261446776,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636935947
    },
    {
        "content": "<p>wrong eric;b so for example, if you're doing <code>by_cases : a = b</code> for <code>a b : ℕ</code>,  Lean will let you anyways, because there is an algorithm that can decide whether two nats are equal</p>",
        "id": 261446818,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636935992
    },
    {
        "content": "<p>Ah, I see.  But can I suppose I can choose to <strong>not</strong> have it available, so that non-constructive proofs would not be accepted?</p>",
        "id": 261446822,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636935998
    },
    {
        "content": "<p>the best way to go about that is check your decls to make sure no axioms are used (or quot.sound/propext aren't used, not sure how pure you want to be)</p>",
        "id": 261446843,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636936037
    },
    {
        "content": "<p>also note that quot.sound actually is how functional extensionality is proved in lean</p>",
        "id": 261446847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636936053
    },
    {
        "content": "<p>I understand what you said about nat equality, but this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>compiled.  Is there a \"standard\" way to have it... <strong>not</strong> compile, or issue a warning?</p>",
        "id": 261446909,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636936180
    },
    {
        "content": "<p>There is a thread somewhere with some code for a tactic that detects that. There's nothing built in.</p>",
        "id": 261446973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636936258
    },
    {
        "content": "<p>there was a change <a href=\"https://github.com/leanprover-community/lean/commit/472601c7dda9ead85c23d0b125958152eccf1b5f\">here</a> that made <code>by_cases</code> default to classical logic when the decidable instances aren't available :/ i think the easiest is still just <code>#print axioms test</code> sadly</p>",
        "id": 261446989,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636936321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could you make a \"please adopt\" PR with the axiom-checking meta code I'm thinking of to make it easier to find in future? I'm pretty sure it was yours and called <code>@[intuit]</code></p>",
        "id": 261447045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636936386
    },
    {
        "content": "<p>Thanks <span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> !  I saw the change now and it's starting to make more sense.</p>",
        "id": 261447171,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636936590
    },
    {
        "content": "<p>Thanks for the pointer of that code <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , I just found <a href=\"#narrow/stream/113489-new-members/topic/intuitionistic.20logic/near/224372999\">the intuit message of Mario</a>!</p>",
        "id": 261447259,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636936783
    },
    {
        "content": "<p>I will read that thread now ( <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/intuitionistic.20logic\">#new members &gt; intuitionistic logic</a> ).  :D</p>",
        "id": 261447326,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636936871
    },
    {
        "content": "<p>Sure, I will do that shortly</p>",
        "id": 261447631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636937365
    },
    {
        "content": "<p>Playing with adding/removing <code>open classical</code>, I see that this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lem1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">by_contradiction</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"k\">assume</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inl</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inr</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h5</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fails without <code>open classical</code>, but this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lem2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inl</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inr</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>succeeds.<br>\nI suppose the first one is trying to work by writing the \"proof term\" directly, and it fails because the <code>by_contradiction</code> here is not a tactic but some kind of term which is not included (since there was no <code>open classical</code>); while on the second code with the <code>begin</code>/<code>end</code> the thing compiles because here <code>by_contradiction</code> <strong>is</strong> a tactic, and the change that <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> pointed at, had the tactic auto-<code>open classical</code> (and I suppose the <code>by_contradiction</code> tactic uses the <code>by_contradiction</code> term under the hood).<br>\nIs this, more or less, what's going on here?</p>",
        "id": 261448629,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636938914
    },
    {
        "content": "<p>In particular, the first is using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.by_contradiction\">docs#classical.by_contradiction</a>, which is what <code>open classical</code> is letting you access without qualifying it with the <code>classical</code> namespace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lem1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.by_contradiction</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"k\">assume</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inl</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inr</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h5</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 261449047,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636939559
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_contradiction\">tactic#by_contradiction</a>  ends up using this tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">tgt_wh</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">tgt</span> <span class=\"n\">reducible</span><span class=\"o\">,</span> <span class=\"c1\">-- to ensure that `not` in `ne` is found</span>\n  <span class=\"o\">(</span><span class=\"n\">match_not</span> <span class=\"n\">tgt_wh</span> <span class=\"bp\">$&gt;</span> <span class=\"o\">())</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">decidable.by_contradiction</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eapply</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">classical.by_contradiction</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">tgt</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eapply</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">fail</span> <span class=\"s2\">\"tactic by_contradiction failed, target is not a proposition\"</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>This tries using <code>decidable.by_contradiction</code> if it can find a way to constructively do it (using the <code>decidable</code> system), and otherwise it falls back on using the <code>classical.by_contradiction</code> lemma that's proved using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.choice\">docs#classical.choice</a></p>",
        "id": 261449562,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636940411
    },
    {
        "content": "<p>A way you can trigger the first case is to put <code>[decidable (A ∨ ¬ A)]</code> as an argument to <code>lem2</code>.</p>",
        "id": 261449571,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636940473
    },
    {
        "content": "<p>Thanks Kyle, this was super clear!</p>",
        "id": 261450195,
        "sender_full_name": "Thanos Tsouanas",
        "timestamp": 1636941541
    }
]