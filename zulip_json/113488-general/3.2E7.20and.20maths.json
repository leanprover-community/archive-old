[
    {
        "content": "<p>There has been talk of changing various bits of maths in core -- e.g. the definition of a group (to remove the superfluous axiom), and Mario in another thread talking about whether <code>singleton a</code> should change to <code>{x | x = a}</code> (it is currently <code>{x | x = a \\or false}</code>). I'm not saying these are good or bad ideas, but I did just want to make the trivial observation that it's far easier to change mathlib than core Lean (unless we're planning on having daily Lean releases) so perhaps it would just be easier to rip all of the maths we can out of core Lean and put it into mathlib? Or are there arguments against this? I have no real idea about how much maths is still in mathlib, or how much it is needed. Did the max amount of maths it's reasonably possible to rip out already get ripped out?</p>",
        "id": 189968961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583583920
    },
    {
        "content": "<p>I don't have a strong opinion on changes in the core Lean library.  It is not much harder to change core than it is to change mathlib: but it is definitely less convenient.  You manually have to coordinate the changes between Lean and mathlib, while for mathlib-only changes you only need to wait for the green checkmark from the CI.  But I can tell you about my plans for future Lean releases.  Although we probably won't have daily releases, I am aiming for at least a release a month (if we have PRs).  There will be no library changes in 3.7 to keep the mathlib porting effort reasonable.  (The faster we port mathlib to 3.7, the sooner we can release 3.8.)  A hypothetical <code>singleton</code> PR could make it into 3.8 though, which will probably be released in April.</p>",
        "id": 189969452,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583585036
    },
    {
        "content": "<p>ooh, a release schedule</p>",
        "id": 189969497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583585096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/3.2E7.20and.20maths/near/189968961\" title=\"#narrow/stream/113488-general/topic/3.2E7.20and.20maths/near/189968961\">said</a>:</p>\n<blockquote>\n<p>so perhaps it would just be easier to rip all of the maths we can out of core Lean and put it into mathlib?</p>\n</blockquote>\n<p>Seems sensible to me given that it will be similar to that in Lean 4. Note however that the Lean 3 C++ code (e.g. <code>norm_num</code>) has some dependencies on typeclasses etc, which will not be there in Lean 4.</p>",
        "id": 189969798,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583585728
    },
    {
        "content": "<p>I don't understand: what will not be there in Lean 4?</p>",
        "id": 189969919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583585994
    },
    {
        "content": "<p>The Lean core library won't include much in the way of mathematics.</p>",
        "id": 189984998,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583613057
    },
    {
        "content": "<p>I think Patrick was probably referring to the comment about typeclasses not being there?</p>",
        "id": 189985984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583614752
    },
    {
        "content": "<p>Oh! The idea for Lean 4 is to hook the automation into more agnostic type classes / indexing systems. Whereas in Lean 3, mathlib uses the notion of group defined in core, we'd be left to define our own notion of group and the Lean automation would use typeclasses like <code>associative_operator Î± (+)</code>. All we have to do is to derive an instance of <code>associative_operator</code> from our notion of group.</p>",
        "id": 189986766,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583616187
    },
    {
        "content": "<p>Does it mean the indexing issues related to that kind of type classes have been solved?</p>",
        "id": 189986816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583616257
    },
    {
        "content": "<p>I don't think this is about things like simp, but rather ring</p>",
        "id": 189991088,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583624413
    },
    {
        "content": "<p>Yes, or <code>norm_num</code> as mentioned. There is no reason to write it in C++ anymore, so it doesn't need to be part of corelib, and neither do its dependencies.</p>",
        "id": 190009328,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583664287
    },
    {
        "content": "<p>I think it is about time that <code>norm_num</code> moved to full lean code. It's already a bit awkward that half of <code>norm_num</code> is implemented in c++ (addition, subtraction, multiplication) and the other half is in lean (inequality, division, modulo, primality), and the implementation of real division relies on some typeclasses that are too strong (linear ordered field instead of characteristic zero) which limits applicability.</p>",
        "id": 190010153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583665937
    },
    {
        "content": "<p>I don't think it would be a big problem if we just deleted <code>tactic.norm_num</code> and moved what remains to the mathlib tactic</p>",
        "id": 190010161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583665987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/3.2E7.20and.20maths/near/190010161\" title=\"#narrow/stream/113488-general/topic/3.2E7.20and.20maths/near/190010161\">said</a>:</p>\n<blockquote>\n<p>I don't think it would be a big problem if we just deleted <code>tactic.norm_num</code> and moved what remains to the mathlib tactic</p>\n</blockquote>\n<p>Maybe a performance problem?  In any case, we (=Mario) could reimplement <code>norm_num</code> in mathlib first---this doesn't require any changes in core Lean.</p>",
        "id": 190011649,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583669227
    },
    {
        "content": "<p>I have a feature request for Lean (3.7 or later): when you're going to resolve a class instance, would it be hard to see if it can be found by unification first? Then we would be able to remove \"use unification\" workarounds in <code>algebra/group/hom</code>.</p>",
        "id": 190462177,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584062011
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover-community/lean/pull/135\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/135\">https://github.com/leanprover-community/lean/pull/135</a> what you're looking for?</p>",
        "id": 190478455,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584085702
    }
]