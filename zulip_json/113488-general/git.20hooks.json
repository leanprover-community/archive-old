[
    {
        "content": "<p>How to loose a file with the (possibly, outdated) git hooks suggested by the installation instructions:</p>\n<ol>\n<li>While on branch <code>A</code>, create a new file, don't add it to <code>git</code>.</li>\n<li>Make a commit.</li>\n<li>Switch to branch <code>B</code>.</li>\n<li>(optional) work on branch <code>B</code>.</li>\n<li>Add some text to the new file.</li>\n<li>Do not make a commit.</li>\n<li>Switch to branch <code>A</code>.</li>\n</ol>\n<p>On step <code>2</code> the file is added to the cache, on step <code>7</code> it is overridden with an older version from cache. I've just lost Jensen's inequality for integrals this way.</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What do you think about ignoring files which are not in <code>git</code> in <code>leanproject mk-cache</code>?</p>",
        "id": 210958859,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600836009
    },
    {
        "content": "<p>Do the caches touch lean files?</p>",
        "id": 210958878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600836072
    },
    {
        "content": "<p>They should only do things with olean files, right?</p>",
        "id": 210958881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600836088
    },
    {
        "content": "<p>I'm sorry to hear that you lost some exciting code.</p>",
        "id": 210958893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600836115
    },
    {
        "content": "<p>I lost a _lot_ of stuff to (probably) exactly this a month ago, but didn't know what it was <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> thanks for diagnosing it, Yury.</p>",
        "id": 210959315,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600836825
    },
    {
        "content": "<p>Yes, caches touch lean files, probably to ensure that the unpacked <code>.olean</code>s match <code>.lean</code>s.</p>",
        "id": 210960310,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600838285
    },
    {
        "content": "<p>I'm sorry to read that. I never used those commit hooks. In principle there is no obstruction to archive only files that git knows about. The archiving function is <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py#L101-L115\">https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py#L101-L115</a></p>",
        "id": 210964782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600844175
    },
    {
        "content": "<p>You can open an issue in the mathlibtools repo and I'll try to find time to work on it (or you can open a PR!).</p>",
        "id": 210964808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600844203
    },
    {
        "content": "<p>I'll try to make a PR.</p>",
        "id": 210965100,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600844452
    },
    {
        "content": "<p>I have used the hooks up until now, but have recently decided that they actually make life slower rather than faster (because my computer finds local caches and unpacks them, after which I discover they are not what I wanted, and then have to go looking for a cache with <code>leanproject -f up</code>).</p>",
        "id": 210983720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600856593
    }
]