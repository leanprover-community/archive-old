[
    {
        "content": "<p>(It's not a question specific to lean, rather more general question for software engineer)</p>\n<p>For lean (or coq, or any other programming language providing rich meta-programming and flexible utillity), is it possible to have certain library and/or compiler plugin such that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- documentation on True -/</span>\n<span class=\"n\">Inductive</span> <span class=\"n\">Unit</span> <span class=\"n\">where</span>\n     <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>can be compiled into something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- definition of Unit</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">doc</span> <span class=\"o\">:</span> <span class=\"n\">DocType</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span> <span class=\"s2\">\"documentation on True\"</span>  <span class=\"c1\">-- may be complicated as documentation may refer to semantic object, which require a \"reference type\" for semantic object</span>\n<span class=\"kd\">end</span> <span class=\"n\">Unit</span>\n<span class=\"c1\">-- or use attribute to associate documentation with the corresponding item</span>\n</code></pre></div>\n<p>The relevant issues and advantages of this method might include:</p>\n<ol>\n<li>Need a way to refer identifier's \"name\" rather than its value</li>\n<li>Documentation needs to follows the programs' dependency: suppose A depends on B, B's documentation can't mention A, otherwise causing a loop of dependency. Or documents need to be compiled after the code.</li>\n<li>Documentation should not be compiled in certain cases, they shall be attributed accordingly.</li>\n<li>It's convenient for User can provide custom lean-native implementation (via typeclass) for parsing document to custom data and provide output of multiple format. </li>\n<li>furthermore, it may be possible to attach certain data (format, etc.) to items so that source code can viewed as/compiled to a \"notebook\" such as jupyter and mathematica, which might be useful for proof assistant.</li>\n</ol>\n<p>My question is, is it practical to implement such feature? If so, what need to be added/changed to implement such feature? compiler plugin, preprocessor, or a library (a generalized version of doc-gen4)?</p>\n<p>I hope this question is not too bold.</p>\n<p>Also, it may be a good idea to give a more conspicuous link to lean4-metaprogramming-book..... I didn't find it til tonight.....</p>",
        "id": 318888181,
        "sender_full_name": "Erika Su",
        "timestamp": 1672595050
    },
    {
        "content": "<p>It's already possibly to programmatically get a docstring for a declaration, if that's your question</p>",
        "id": 318892669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672597762
    },
    {
        "content": "<p>That's how <a href=\"https://leanprover-community.github.io/mathlib_docs\">#docs</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs\">#docs4</a> work</p>",
        "id": 318892694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672597782
    }
]