[
    {
        "content": "<p>Given some <code>a: α</code>, some set <code>s: set α</code>, and a definition <code>β: {x // x ∈ s}</code>, how might I go about proving that <code>a: ↥β</code>, given that a is in fact ∈ s?</p>",
        "id": 215558499,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604482582
    },
    {
        "content": "<p>Are you looking for <code>β.2</code>?</p>",
        "id": 215558730,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1604482714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"359992\">@Robert Maxton</span> You can not prove that a term <code>t</code> has type <code>T</code>. That's only something that the type checker can check for you.</p>",
        "id": 215558911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604482808
    },
    {
        "content": "<p>Also, if you have <code>β: {x // x ∈ s}</code>, then typically <code>a: ↥β</code> doesn't make sense. Did you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"c1\">-- with the `=` sign</span>\n</code></pre></div>",
        "id": 215559035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604482890
    },
    {
        "content": "<p>In that case, I think your question is how to <em>construct</em> a term of type <code>↥β</code> starting from <code>a</code> and a proof <code>ha :  a ∈ s</code> .</p>",
        "id": 215559175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604482947
    },
    {
        "content": "<p>yes, I did. And... uh, if the type checker gets it wrong? For example, in my case I have a proof already in my context that <code>a ∈ s</code>, and a proposition that begins <code>∀ (a : ↥s)</code> that I'd like to use it with; but the 'native type' of <code>a</code> is some underlying set.</p>",
        "id": 215559227,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604482976
    },
    {
        "content": "<p>The answer is that <code>↥β</code> is a structure, so you can build it in 3 ways:</p>\n<ol>\n<li>Using the constructor function: <code>subtype.mk a ha</code></li>\n<li>Using record syntax:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span> <span class=\"o\">}</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>Using the anonymous constructor: <code>\\&lt;a, ha\\&gt;</code>. (If you type <code>\\&lt;</code> in VScode, then it will automatically replace it by the correct fancy unicode bracket).</li>\n</ol>",
        "id": 215559396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604483073
    },
    {
        "content": "<p>Version 3 is what most people use, but it is good to realise that it is just a fancy short-hand for the other 2 options.</p>",
        "id": 215559601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604483176
    },
    {
        "content": "<p><code>invalid constructor ⟨...⟩, 'has_lift_t.lift' is not an inductive type</code></p>",
        "id": 215559860,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604483362
    },
    {
        "content": "<p>Could you please paste more code?</p>",
        "id": 215559903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604483397
    },
    {
        "content": "<p>bleh, making an mwe of this is a bit of a mess. let's see what I can do...</p>",
        "id": 215559982,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604483424
    },
    {
        "content": "<p>Maybe paste the output of <code>extract_goal</code></p>",
        "id": 215560002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604483446
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring_quot</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">is_unit</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring.to_monoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hdefI</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">is_unit</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215560682,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604483920
    },
    {
        "content": "<p>At this point I'd like to say <code>apply hdefI</code> or <code>apply (hdefI (1 + x))</code>, but I can't because <code>1+x</code> is of type <code>R</code>, not <code>↥I</code></p>",
        "id": 215560762,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604483982
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">apply</span> <span class=\"n\">hdefI</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩,</span>\n</code></pre></div>",
        "id": 215561111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604484190
    },
    {
        "content": "<p>You're making your life complicated by using the subtype associated to <code>I</code> too much. Can't you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hdefI</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">is_unit</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hdefI</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(it's hard to tell without seeing more context).</p>",
        "id": 215561253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604484282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ... I probably could have, but at this point I'd have to rewrite much of my proof, so I'd rather not. Something to think about in the future, then. <br>\n<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Huh. Thanks, that does work. How is that different from <code>apply hdefI (1+x)</code>, though? Or like, the latter complains that I haven't proved that <code>I</code> has <code>has_one</code>, but the constructor doesn't seem to care?</p>",
        "id": 215561523,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604484440
    },
    {
        "content": "<p><code>x</code> has type <code>R</code>, and so <code>1 + x</code> also has type <code>R</code>.</p>",
        "id": 215561714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604484546
    },
    {
        "content": "<p>But you want something that lives in the ideal. How should lean know that <code>1 + x</code> is in the ideal?</p>",
        "id": 215561746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604484568
    },
    {
        "content": "<p>You have to tell it <code>this</code></p>",
        "id": 215561756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604484575
    },
    {
        "content": "<p>In other words, you have to package together the element <code>1 + x</code> and a proof that it is in the ideal <code>I</code>.</p>",
        "id": 215561837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604484606
    },
    {
        "content": "<p>That's exactly what those weird brackets do for you.</p>",
        "id": 215561859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604484620
    },
    {
        "content": "<p>If you really want to keep it this way then you can at least replace <code> (∀ (a:I), @is_unit R (ring.to_monoid R) (1 + a))</code> by <code> (∀ (a:I), is_unit (1 + a : R))</code></p>",
        "id": 215561862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604484621
    },
    {
        "content": "<p>... Ah. I had the same problem when I was setting up this proof in the first place, so I expanded out <code>is_unit</code> for lack of any better way to tell Lean that the sum was valid.</p>",
        "id": 215561971,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604484720
    },
    {
        "content": "<p>What's the precedence of <code>:</code> over <code>+</code>? Is that \"1 + (a of type R)\", or \"(1+a) which is of type R\"?</p>",
        "id": 215562041,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604484754
    },
    {
        "content": "<p>and to be honest, I was kind of expecting unification to handle that; or like, it honestly confuses me that unification <em>doesn't</em> automatically fill in constructions of that form, given how implicit type conversion usually works in languages with type classes</p>",
        "id": 215562102,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604484799
    },
    {
        "content": "<p>then again, I probably shouldn't be applying Scala instincts to Lean too much lol</p>",
        "id": 215562112,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604484808
    },
    {
        "content": "<p>It is <code>(1 + a) : R</code>.</p>",
        "id": 215562374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604484988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215562102\">said</a>:</p>\n<blockquote>\n<p>and to be honest, I was kind of expecting unification to handle that; or like, it honestly confuses me that unification <em>doesn't</em> automatically fill in constructions of that form, given how implicit type conversion usually works in languages with type classes</p>\n</blockquote>\n<p>I'm still not sure what you would like Lean to do. Should it look into the context of your tactic state and see if you already have a proof of <code>1 + x</code> at hand?</p>",
        "id": 215562410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485032
    },
    {
        "content": "<p>What should it do if you don't have such a proof ready?</p>",
        "id": 215562420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485041
    },
    {
        "content": "<p>Note that the syntax is not <code>_ : _</code> but <code>(_ : _)</code>, which should implicitly answer the precedence question</p>",
        "id": 215562544,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1604485110
    },
    {
        "content": "<blockquote>\n<p>I'm still not sure what you would like Lean to do. Should it look into the context of your tactic state and see if you already have a proof of 1 + x at hand?</p>\n</blockquote>\n<p>Well, yes, essentially. That's the whole point of the proofs-as-types system, no? Since a proof would be of type <code>1+x ∈ I</code>, all it would have to do is check if there's any variables of that type in the context. If there isn't, <em>then</em> it can complain that it failed to unify; but it seems weird that it can find 'an instance of a typeclass' but not 'an proof-instance of this Prop'.</p>",
        "id": 215563160,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604485506
    },
    {
        "content": "<p>Because typeclass search and unification are two different things.</p>",
        "id": 215563348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485620
    },
    {
        "content": "<p>Also note that the tactic state widget is very helpful to answer your precedence questions quickly and exactly in the case you care about. Simply move your mouse cursor above various symbols in the tactic state to see how they are grouped.</p>",
        "id": 215563357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215563160\">said</a>:</p>\n<blockquote>\n<p>but it seems weird that it can find 'an instance of a typeclass' but not 'an proof-instance of this Prop'.</p>\n</blockquote>\n<p>well, typeclass inference and unification are two very different things.</p>",
        "id": 215563400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485665
    },
    {
        "content": "<p>And you always have to balance speed vs automation</p>",
        "id": 215563422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485680
    },
    {
        "content": "<p>It's a trade-off</p>",
        "id": 215563463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485684
    },
    {
        "content": "<p>In this case, the idea is that writing <code>\\&lt;a, ha\\&gt;</code> is worth the hassle, compared to making lean try to figure things out itself.</p>",
        "id": 215563513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485719
    },
    {
        "content": "<p>Sure, in this case it needs to check <code>x \\mem I</code>. But in general it could be any proposition that you are using to build a subtype.</p>",
        "id": 215563882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485934
    },
    {
        "content": "<p>Robert, in principle you could imagine a different elaborator which tries to do what you want. But as Johan wrote, it would make things more complicated for very few use cases. You would much more often need to switch to the explicit thing we have now.</p>",
        "id": 215564159,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604486117
    },
    {
        "content": "<p>Right, but no matter what proposition <code>p</code> it is, the subtype would be defined as <code>{x \\\\ p x}</code>, so it could always attempt to find a variable of type <code>p x</code>. And yeah, I guess mentally I conflate the two because I usually think of 'the algorithm that fills underscores' as 'unification'.</p>",
        "id": 215564196,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604486156
    },
    {
        "content": "<p>And I guess. Mostly my issue is that it's not very discoverable/the error isn't very legible, and AFAIK there isn't much about subtypes in any of the existing tutorials/documentation &gt;.&gt;</p>",
        "id": 215564363,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604486268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215564196\">said</a>:</p>\n<blockquote>\n<p>so it could always attempt to find a variable of type <code>p x</code>.</p>\n</blockquote>\n<p>My claim is that this could potentially be pretty expensive.</p>",
        "id": 215564377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604486280
    },
    {
        "content": "<p>That + 'other languages already do the automatic casting' is my motive here lol</p>",
        "id": 215564426,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604486292
    },
    {
        "content": "<p>We do automatic casting <em>from</em> the subtype <code>{x // p x}</code> to <code>X</code>. But not the other way round.</p>",
        "id": 215564452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604486323
    },
    {
        "content": "<p>Fair. I haven't actually looked at lean's code/similar inference engine code myself, so I wouldn't know.</p>",
        "id": 215564464,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604486335
    },
    {
        "content": "<p>One direction doesn't need Lean to search for proofs, the other does.</p>",
        "id": 215564472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604486341
    },
    {
        "content": "<p>We have automatic casting from <code>nat</code> to <code>int</code> to <code>rat</code> to <code>real</code> to <code>complex</code>, etc...</p>",
        "id": 215564499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604486366
    },
    {
        "content": "<p>But you wouldn't want to have an automatic cast from <code>int</code> to <code>nat</code> that starts search for <code>0 \\le n</code> proofs</p>",
        "id": 215564522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604486400
    },
    {
        "content": "<p>Though actually, how could it get expensive? After all, the number of variables in the context is presumably a fairly small number, and the types all have to be pre-computed for the interactive help function to work anyway</p>",
        "id": 215564615,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604486439
    },
    {
        "content": "<p>I'm not expecting it to automatically compose proofs together to try and build the right term, just to see if any of the existing variables already have the right type</p>",
        "id": 215564644,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604486463
    },
    {
        "content": "<p>or like, this seems solvable by <code>grep</code>ing on the existing interactive context output lol</p>",
        "id": 215564703,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604486507
    },
    {
        "content": "<p>It would be nice if we can make</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">lift</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>work</p>",
        "id": 215564722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604486523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215564615\">said</a>:</p>\n<blockquote>\n<p>Though actually, how could it get expensive? After all, the number of variables in the context is presumably a fairly small number, and the types all have to be pre-computed for the interactive help function to work anyway</p>\n</blockquote>\n<p>Because checking that two types are definitionally equal can get expensive.</p>",
        "id": 215564819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604486572
    },
    {
        "content": "<p>Ah. Thus the use of the constructor so that you only have to do it for a single variable.</p>",
        "id": 215564889,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604486622
    },
    {
        "content": "<p>I suppose that makes some sense, though I'm still confused about what the interactive context is doing different...</p>",
        "id": 215564917,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604486642
    },
    {
        "content": "<p>What do you think of something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">can_lift</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">prf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hdefI</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">lift</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"k\">with</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">is_unit</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hdefI</span> <span class=\"n\">y</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215565362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604486942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215564917\">said</a>:</p>\n<blockquote>\n<p>I suppose that makes some sense, though I'm still confused about what the interactive context is doing different...</p>\n</blockquote>\n<p>The interactive context will show you <code>hx : p x</code>. If you have a goal <code>q x</code>, and you run <code>assumption</code>, then lean will try to see if <code>hx</code> has type <code>q x</code>. It will <em>not</em> syntactically compare <code>p x</code> and <code>q x</code> and stop if they differ.</p>",
        "id": 215565512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604487033
    },
    {
        "content": "<p>In stead, it will try to see whether <code>p x</code> and <code>q x</code> are definitionally equal. This is a process that usually is very fast, but it can be quite expensive.</p>",
        "id": 215565559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604487073
    },
    {
        "content": "<p>Actually, defining a <code>has_lift</code> like that would be valuable, yeah. Among other reasons it'd be entirely reasonable to include that in <code>ring_theory.ideal.basic</code> as a utility helper function, so it'd achieve the same effect of basically not having to worry about it anymore.</p>",
        "id": 215565663,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604487134
    },
    {
        "content": "<p>Yup, but <code>can_lift</code> is a relative \"newcomer\". So there are still a lot of gaps in the library where we should add instances.</p>",
        "id": 215565729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604487196
    },
    {
        "content": "<p>and I see. So it's a sort of precedent problem, where we generally say that we operate up to definitional equality, but sometimes we have to revert to literal syntactic equality instead.</p>",
        "id": 215565730,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604487197
    },
    {
        "content": "<p>what's the distinction between <code>can_lift</code> and <code>has_lift</code>? I think I've seen the latter in the libraries already</p>",
        "id": 215565749,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604487215
    },
    {
        "content": "<p>Also, it doesn't work without the crazy up-arrow before the <code>I</code>, in <code>lift 1 + x to ↥I with y</code>. That's bad, I think. So we should fix that first.</p>",
        "id": 215565775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604487242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Any idea on how to do that <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 215565815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604487252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215565749\">said</a>:</p>\n<blockquote>\n<p>what's the distinction between <code>can_lift</code> and <code>has_lift</code>? I think I've seen the latter in the libraries already</p>\n</blockquote>\n<p><code>has_lift</code> is about automatic coercions. Those will always be functions defined on all terms. <code>can_lift</code> is trying to help with the opposite battle. When you have a function <code>X -&gt; Y</code> and a term <code>y : Y</code>, you can lift it to <code>X</code> if a certain predicate is full-filled.</p>",
        "id": 215565941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604487352
    },
    {
        "content": "<p>E.g., you can lift a <code>n : int</code> to <code>nat</code> if you know <code>0 \\le n</code>.</p>",
        "id": 215565990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604487368
    },
    {
        "content": "<p>In my opinion <code>has_lift</code> is bad terminology from the point of view of what's common terminology in maths. But is was there from the start, and it seems to be a common name in computer science.</p>",
        "id": 215566045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604487416
    },
    {
        "content": "<p>So now we have a lot of things that are called <code>lift</code>, and sometimes they do opposite things <span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span></p>",
        "id": 215566078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604487439
    },
    {
        "content": "<p>ah, I see. Yes, that is exactly the sort of thing I'm looking for</p>",
        "id": 215566534,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604487740
    },
    {
        "content": "<p>and pft. Yeah, I actually usually see that as coercion or casting rather than lifting (unless it's strictly a supertype, which I think <em>would</em> roughly map to the usual math terminology), but I'm hardly a CS specialist.</p>",
        "id": 215566548,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604487748
    },
    {
        "content": "<p>I don't know about supertypes. But in maths, lifting is usually something that takes some effort.<br>\nE.g., you have</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>      Y\n      |\n   f  v\nX --&gt; Z\n</code></pre></div>\n<p>then you can ask whether the function <code>f</code> lifts to a function from <code>X</code> to <code>Y</code>.</p>",
        "id": 215567076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604488124
    },
    {
        "content": "<p>I wonder whether the possibility of fixing this in Lean4 is still open.</p>",
        "id": 215568635,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604489322
    },
    {
        "content": "<p>Which part, the naming?</p>",
        "id": 215572959,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1604492570
    },
    {
        "content": "<p>Note that there is no <code>has_lift</code> equivalent in the Lean 4 stdlib at all right now; after all, there is nothing special about it in contrast to <code>has_coe</code> (now <code>Coe</code>).</p>",
        "id": 215573130,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1604492683
    },
    {
        "content": "<p>What was the original intent behind the separation of <code>has_lift</code> and <code>has_coe</code>?</p>",
        "id": 215573200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604492757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is there still <code>quotient.lift</code>? This is usually called <code>quotient.descent</code> in maths I guess. The quotient is smaller than the big set so lives under it.</p>",
        "id": 215583327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604498343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It is still there as <code>Quot.lift</code>. Interesting point of view; from a CS standpoint one would say that the quotient type is \"structurally bigger\", i.e. has one more type constructor, I'd guess. Like lifting monadic values into bigger monads (where no-one wants to think about cardinality).</p>",
        "id": 215585125,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1604499121
    },
    {
        "content": "<p>My impression was that we had lost this argument some time ago wrt quotients.</p>",
        "id": 215585200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604499147
    },
    {
        "content": "<p>It's the way we draw things on the blackboard</p>",
        "id": 215585238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604499168
    },
    {
        "content": "<p>I wasn't even aware there was an argument</p>",
        "id": 215585277,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1604499181
    },
    {
        "content": "<p>All the mathematical language -- the bigger set \"covers\" the smaller one, points in the quotient \"lift\" to points in the bigger set etc -- are set up this way.</p>",
        "id": 215585390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604499227
    },
    {
        "content": "<p>Kevin, <code>quotient.lift</code> is just a lift in the opposite category of types and functions, what's the problem? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 215587840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604500218
    },
    {
        "content": "<p>Maybe we should call it <code>oplift</code> then?</p>",
        "id": 215587939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604500268
    },
    {
        "content": "<p>In the category theory library I think we already use <code>lift</code>/<code>desc</code> as an <code>opposite</code> pair, so... yeah</p>",
        "id": 215588441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604500461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215565775\">said</a>:</p>\n<blockquote>\n<p>Also, it doesn't work without the crazy up-arrow before the <code>I</code>, in <code>lift 1 + x to ↥I with y</code>. That's bad, I think. So we should fix that first.</p>\n</blockquote>\n<p>I just saw this again when going through my starred messages. It is fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/7598\">#7598</a></p>",
        "id": 238576997,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620877355
    },
    {
        "content": "<p>Thanks a lot Floris!</p>",
        "id": 238581080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620881359
    }
]