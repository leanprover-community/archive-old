[
    {
        "content": "<p>We have that : <code>zmod.algebra (galois_field p n) p</code> is not defeq to <code>splitting_field.algebra (X ^ p ^ n - X) = galois_field.algebra</code> (and I think this is a known issue). I can't prove the propositional equality; I can't figure out a way to case so that we can actually use the definition of <code>splitting_field_aux</code>. How should we deal with this? I tried disabling the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_field.algebra\">docs#galois_field.algebra</a>, but I can't seem to figure out how to as many of the results about splitting fields implicitly use this instance (and I don't have the propeq). I also guess there's not a <code>subsingleton</code> instance for this sort of algebra, due to automorphisms.</p>",
        "id": 287427871,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656153267
    },
    {
        "content": "<p>this came up in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Algebraic.20Conjugate.20over.20Finite.20Fields/near/287426797\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Algebraic.20Conjugate.20over.20Finite.20Fields/near/287426797</a></p>",
        "id": 287427875,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656153282
    },
    {
        "content": "<p>If there were an instance of <code>subsingleton (algebra (zmod n) R)</code> (which there should be, I don't know if it's there already) then <code>convert</code> might be able to do some of the heavy lifting for you. 1 has to go to 1 and that uniquely determines the ring hom from zmod n.</p>",
        "id": 287428626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656154288
    },
    {
        "content": "<p>oh, 1 does have to go to 1! I'll try make that instance, I don't think it exists</p>",
        "id": 287429477,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656155592
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14946\">#14946</a> has the subsingleton instance; I'll make the followup PR when this compiles</p>",
        "id": 287431599,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656158829
    },
    {
        "content": "<p>and <a href=\"https://github.com/leanprover-community/mathlib/pull/14947\">#14947</a> fixes everything, hopefully, but maybe not the best solution</p>",
        "id": 287433707,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656161674
    },
    {
        "content": "<p>Note that the zmod algebra diamond runs much deeper:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.algebra</span>\n<span class=\"c1\">-- fails :(</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra.id</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">zmod.algebra</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 287439965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656169848
    },
    {
        "content": "<p>We probably shouldn't think too hard about that until we fix the int and nat diamonds</p>",
        "id": 287440154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656169988
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.algebra\">docs#zmod.algebra</a> ← for the lazy</p>",
        "id": 287490567,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656246043
    },
    {
        "content": "<p>Would it be sufficient (help) to extend <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p\">docs#char_p</a> with a <code>of_zmod</code>/<code>zmod_smul</code> field? Perhaps <code>fin</code> instead of <code>zmod</code>, to avoid having to do even more import hierarchy restructuring.</p>",
        "id": 287490638,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656246137
    },
    {
        "content": "<p>The main drawback I foresee is that we break the defeq of <code>algebra_map (zmod n) R = (coe : zmod n → R)</code>. I don't think that's likely to undermine a lot of existing results, so I think it's a fine solution to add these fields to <code>char_p</code>.</p>",
        "id": 287490997,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656246718
    },
    {
        "content": "<p>I think we should use <code>zmod</code>, <del>I just tried removing the import to <code>char_p.basic</code> in <code>zmod.basic</code> and the only thing it broke seemed irrelevant (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.left_inverse.right_inverse_of_card_le\">docs#function.left_inverse.right_inverse_of_card_le</a>)</del> (there's some weird transitive import stuff goin on, as <code>char_p</code> stays imported, but we lose something else?); regardless of that, how will we deal with the 0 case? I think an <code>ite</code>/pattern match in the definition will only cause more problems</p>",
        "id": 287493798,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656250598
    },
    {
        "content": "<p>I'm happy to try do this refactor, but I'm not sure about the full list of steps - we redefine this algebra instance to use the <code>of_zmod/zmod_smul</code> field, and then what? For example, how concretely do we solve the <code>algebra.id</code> diamond; do we set the <code>zmod.char_p</code> instance to use the <code>zmod_smul</code> equal to the <code>algebra.id</code> one?</p>",
        "id": 287493884,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656250729
    },
    {
        "content": "<p>That is indeed basically the idea: we avoid diamonds by ensuring the data-carrying fields of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id\">docs#algebra.id</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.algebra\">docs#zmod.algebra</a> coincide. Because the fields in the (new) <code>zmod.algebra</code> come from <code>zmod.char_p</code>, we need to supply new values coming from <code>algebra.id</code>. In particular, we should set <code>of_zmod := id</code> and <code>zmod_smul := (*)</code>.</p>",
        "id": 287548243,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656319326
    },
    {
        "content": "<p>Do we need <code>zmod_smul</code>?</p>",
        "id": 287548366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656319425
    },
    {
        "content": "<p>Oh, I guess it matches what we do for nat and int</p>",
        "id": 287548452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656319460
    },
    {
        "content": "<p>I don't <em>know</em> that we will need it in this case, but I expect it (pretty likely that the case distinction on <code>zmod 0</code> vs <code>zmod (n+1)</code> happens in a different place). In any case, might as well incorporate it and save some work for when we do need it.</p>",
        "id": 287548783,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656319693
    },
    {
        "content": "<p>hmm, I finally started trying to do it in earnest and realised one thing that's different here from the other refactors: <code>char_p</code> was a <code>Prop</code> before.</p>",
        "id": 289178755,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657540358
    },
    {
        "content": "<p>I'm not sure how to deal with that apart from sprinkling <code>nonempty</code>s everywhere, which doesn't seem nice</p>",
        "id": 289178786,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657540384
    },
    {
        "content": "<p>Where exactly do you want to put the <code>nonempty</code>? Because we can't solve diamonds by putting the data in <code>nonempty</code> (the diamond would then be <code>expected_coe =?= nonempty.some (nonempty.mk expected_coe)</code>).</p>",
        "id": 289179443,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657540834
    },
    {
        "content": "<p>So indeed we'd have to turn <code>char_p</code> into something living in <code>Type*</code>.</p>",
        "id": 289179484,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657540865
    },
    {
        "content": "<p>I meant for example for theorems such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.exists\">docs#char_p.exists</a></p>",
        "id": 289180464,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657541502
    },
    {
        "content": "<p>I wonder if there should be a \"weak\" <code>char_p</code> (current version) and a \"strong\" one (new version), with only the \"strong\" one providing the <code>algebra</code> instance</p>",
        "id": 289180569,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657541562
    },
    {
        "content": "<p>that seems very maths-unfriendly though</p>",
        "id": 289180613,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657541584
    },
    {
        "content": "<p>Can't the weak one simply be <code>nonempty strong_char_p</code>?</p>",
        "id": 289180650,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657541603
    },
    {
        "content": "<p>we could also try and replace all non-tc uses of <code>char_p</code> with <code>ring_char</code>, but that's also odd</p>",
        "id": 289180654,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657541606
    },
    {
        "content": "<p>Is making <code>char_p X p</code> carry data any different to just making users write <code>algebra (zmod p) X</code> instead?</p>",
        "id": 289214677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657555987
    },
    {
        "content": "<p>not really, actually, and I think that's in some ways the approach taken already in some files</p>",
        "id": 289216013,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657556673
    }
]