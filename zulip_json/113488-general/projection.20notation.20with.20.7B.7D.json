[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- imagine this is in core so I can&#39;t change the {} choice</span>\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This is my cool structure</span>\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This is my cool map from my structure to the core one</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">to_bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- So now, given a term of type `foo α` I can make a term of type `bar α`</span>\n<span class=\"c1\">-- and hence deduce `P x` for all `x : ℕ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--f.to_bar.h -- type mismatch</span>\n<span class=\"c1\">--f.to_bar.h 3 -- function expected</span>\n<span class=\"c1\">-- @(f.to_bar.h) 3 -- syntax error</span>\n<span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_bar</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>Do I have to give up on projection notation in situations like this, or is there a clever way to insert the @? I couldn't figure it out.</p>",
        "id": 161592719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553455204
    },
    {
        "content": "<p>I think you have to give up on projection notation in this case. I have also noticed this annoying behavior sometimes.</p>",
        "id": 161678284,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1553541573
    }
]