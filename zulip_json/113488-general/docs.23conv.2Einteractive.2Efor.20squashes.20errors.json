[
    {
        "content": "<p>This example succeeds with no diagnostics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>  <span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>  <span class=\"c1\">-- no error message?</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conv.interactive.for\">docs#conv.interactive.for</a> is implemented in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.ext_simplify_core\">docs#tactic.ext_simplify_core</a>, and <code>ext_simplify_core</code> discards all monadic errors in its <code>pre</code> callback.</p>",
        "id": 212703311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602169450
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv:%20for\">https://leanprover-community.github.io/mathlib_docs/tactics.html#conv:%20for</a>, since the link above doesn't go there)</p>",
        "id": 212703394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602169492
    },
    {
        "content": "<p>I think I know how to fix this, but to do it I need some way to convert a <code>tactic unit</code> into a <code>tactic_result unit</code>, and I don't know enough about monads</p>",
        "id": 212712888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602173269
    },
    {
        "content": "<p>Specifically, I want the <code>lean</code> equivalent of the python:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">new_e</span><span class=\"p\">,</span> <span class=\"n\">pr</span> <span class=\"o\">=</span>  <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">convert</span> <span class=\"n\">e</span> <span class=\"n\">r</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># how do I get `e` here?</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 212713414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602173490
    },
    {
        "content": "<p>Worked it out: <a href=\"https://github.com/leanprover-community/lean/pull/476\">https://github.com/leanprover-community/lean/pull/476</a></p>",
        "id": 212719143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602176054
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conv.interactive.find\">docs#conv.interactive.find</a> command has a similar problem, where an incorrect \"pattern was not found\" message is emitted</p>",
        "id": 212813804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602243860
    }
]