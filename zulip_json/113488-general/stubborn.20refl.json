[
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib/pull/10255/files#diff-21e65775f8e3143eda45d0b24ed2dac5f12dab1024b6145ad8c6d57b09cec20aR133\">this line</a>, I have a goal state that looks like (with <code>pp.implicit true</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">R</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">_inst_2</span>\n<span class=\"n\">rs</span><span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span>\n</code></pre></div>\n<p>Why can't <code>refl</code> close this instantly? It seems to just timeout.</p>",
        "id": 261027767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636566796
    },
    {
        "content": "<p>What happens if you write <code>sorry</code> instead? It might be the timeout is elsewhere.</p>",
        "id": 261027916,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636566859
    },
    {
        "content": "<p><code>sorry</code> is fine</p>",
        "id": 261027948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636566877
    },
    {
        "content": "<p>(by \"Seems to timeout\", I mean \"I don't have the patience to wait\")</p>",
        "id": 261027987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636566897
    },
    {
        "content": "<p>Hmm, that's very weird.</p>",
        "id": 261028010,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636566906
    },
    {
        "content": "<p>It does eventually give <code>(deterministic) timeout</code>, so at least it doesn't hang forever</p>",
        "id": 261028335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636567054
    },
    {
        "content": "<p>Aha, <code>pp.universes</code> tells me its <code>⇑algebra_map.{u_1 u_2 u_4} s = ⇑algebra_map.{u_1 u_2 u_5} s</code></p>",
        "id": 261028588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636567167
    },
    {
        "content": "<p>The culprit is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_tensor_product.pempty_equiv\">docs#pi_tensor_product.pempty_equiv</a>, which  has a free universe variable for the <code>pempty</code></p>",
        "id": 261029203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636567393
    },
    {
        "content": "<p>Ouch, not even the docs show the universe variable</p>",
        "id": 261029291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636567435
    },
    {
        "content": "<p>Can you add a comment in the docstring of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_tensor_product.pempty_equiv\">docs#pi_tensor_product.pempty_equiv</a> warning about the extra universe variable?</p>",
        "id": 261039450,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636571501
    },
    {
        "content": "<p>I just replaced <code>pempty</code> with <code>is_empty</code> which eliminates the universe argument, <a href=\"https://github.com/leanprover-community/mathlib/issues/10274\">#10274</a></p>",
        "id": 261137694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636639538
    }
]