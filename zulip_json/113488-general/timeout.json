[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">is_noetherian_ring_mv_polynomial_fin</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hnr</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">try_for</span> <span class=\"mi\">4000</span> <span class=\"o\">{</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">is_noetherian_ring_of_equiv</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hnr</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">pempty_equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">equiv_of_equiv</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">pempty</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">elim0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">pempty</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">elim0</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">coe_fn_mk</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">@@</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n        <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n        <span class=\"o\">(</span><span class=\"bp\">@@</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n          <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span>\n          <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"err\">∘</span> <span class=\"n\">pempty</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">:</span> <span class=\"n\">pempty</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"o\">},</span> <span class=\"n\">try_for</span> <span class=\"mi\">100000</span> <span class=\"o\">{</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_noetherian_ring_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">is_noetherian_ring_polynomial</span> <span class=\"n\">ih</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">option_equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">equiv_of_equiv</span>\n      <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">none</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">none</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">⟩;</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cases_succ</span> <span class=\"bp\">_</span><span class=\"o\">],</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">none</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n        <span class=\"mi\">0</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cases_succ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">coe_fn_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147329792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541711712
    },
    {
        "content": "<p>Even 100 seconds is not enough</p>",
        "id": 147329805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541711718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't really know how to deal with this</p>",
        "id": 147329817,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541711725
    },
    {
        "content": "<p>(it's from <a href=\"https://github.com/leanprover/mathlib/pull/461/commits/b3f1efbe02638a2793b48e9a28a1d8f0df371690#diff-1f7cb4d661f00b6d887925434b41ad5dR286\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/461/commits/b3f1efbe02638a2793b48e9a28a1d8f0df371690#diff-1f7cb4d661f00b6d887925434b41ad5dR286\">https://github.com/leanprover/mathlib/pull/461/commits/b3f1efbe02638a2793b48e9a28a1d8f0df371690#diff-1f7cb4d661f00b6d887925434b41ad5dR286</a>)</p>",
        "id": 147330186,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541712079
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/461/commits/f80e9fce6b081cf26f551b3ae2e5c83327f9bd59#diff-1f7cb4d661f00b6d887925434b41ad5dR293\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/461/commits/f80e9fce6b081cf26f551b3ae2e5c83327f9bd59#diff-1f7cb4d661f00b6d887925434b41ad5dR293\">https://github.com/leanprover/mathlib/pull/461/commits/f80e9fce6b081cf26f551b3ae2e5c83327f9bd59#diff-1f7cb4d661f00b6d887925434b41ad5dR293</a></p>",
        "id": 147335661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541717373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> more ridiculousness</p>",
        "id": 147335662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541717378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> what do you think about this?</p>",
        "id": 147358487,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541752977
    },
    {
        "content": "<p>not much</p>",
        "id": 147358506,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541753016
    },
    {
        "content": "<p>good idea</p>",
        "id": 147358544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541753042
    },
    {
        "content": "<p>I think it's a serious problem if I provided every implicit argument and it still takes 16 seconds to elaborate</p>",
        "id": 147359835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541755039
    },
    {
        "content": "<p>I basically changed the definitions of polynomial and mv_polynomial and that cut down 6 seconds</p>",
        "id": 147362908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541759136
    },
    {
        "content": "<p>Kenny can you make a MWE? It's hard to run your code.</p>",
        "id": 147368074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541766276
    },
    {
        "content": "<p>I got a timeout working on <a href=\"https://github.com/leanprover-community/mathlib/issues/8471\">#8471</a>, for no apparent reason: <a href=\"https://github.com/leanprover-community/mathlib/runs/3209267335\">https://github.com/leanprover-community/mathlib/runs/3209267335</a><br>\nI'll just rerun the job, but please tell me if I actually did something wrong.</p>",
        "id": 247808317,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627743849
    },
    {
        "content": "<p>There might just be a slow proof at <code>ring_theory/ideal/basic.lean:599:9</code> which is pushed over the limit by a change in imports?</p>",
        "id": 247809361,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1627745311
    },
    {
        "content": "<p>Yeah, probably</p>",
        "id": 247809767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627745788
    },
    {
        "content": "<p>Bors <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/3912085295/jobs/6686260453#step:6:14\">is failing</a> due to a timeout <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/is_tensor_product.lean#L242-L294\">in <code>ring_theory.is_tensor_product</code></a>; presumably not due to a PR in the queue</p>",
        "id": 321190468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673624211
    },
    {
        "content": "<p>Maybe an effect of <a href=\"https://github.com/leanprover-community/mathlib/pull/18121\">#18121</a> or <a href=\"https://github.com/leanprover-community/mathlib/pull/18140\">#18140</a> (both merged yesterday, both involving tensor products)?</p>",
        "id": 321194061,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673625148
    },
    {
        "content": "<p>Possibly</p>",
        "id": 321194339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673625222
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18169\">#18169</a> helps a little, but not much</p>",
        "id": 321241652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673638437
    },
    {
        "content": "<p>I won't have much time for Lean over the weekend; I think the queue might get quite stuck without a speedup there. Looking at the failure history, it's not obvious that <a href=\"https://github.com/leanprover-community/mathlib/pull/18121\">#18121</a> or <a href=\"https://github.com/leanprover-community/mathlib/pull/18140\">#18140</a>  are related</p>",
        "id": 321271631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673649753
    },
    {
        "content": "<p>I'm happy for anyone to push speedups to that PR</p>",
        "id": 321271698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673649776
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>!</p>",
        "id": 321314165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673684309
    }
]