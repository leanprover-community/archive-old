[
    {
        "content": "<p>Does anybody have some advice how to prove this lemma? I tried different things, but always get stuck. Should I unfold the definition of sums and reason about the underlying filters?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n\n<span class=\"kd\">universe</span> <span class=\"kd\">variables</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_option</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 248268787,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1628019220
    },
    {
        "content": "<p>Let me see what we do have.</p>",
        "id": 248269428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628019544
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_add_tsum_compl\">docs#tsum_add_tsum_compl</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum.add_compl\">docs#has_sum.add_compl</a></p>",
        "id": 248269854,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628019773
    },
    {
        "content": "<p>You can apply it to <code>s = ({none} : finset (option β))</code>, then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.has_sum\">docs#finset.has_sum</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.has_sum_range_iff\">docs#function.injective.has_sum_range_iff</a></p>",
        "id": 248270179,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628019936
    },
    {
        "content": "<p>You'll need to prove <code>range option.some = {none}ᶜ</code> (or find it somewhere in <code>data.option</code> or <code>data.set.basic</code>).</p>",
        "id": 248270290,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628019993
    },
    {
        "content": "<p>Probably we need a lemma about <code>has_sum</code> on a sum type (then we can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.has_sum_iff\">docs#equiv.has_sum_iff</a> to make a lemma about <code>option</code>).</p>",
        "id": 248270477,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628020091
    },
    {
        "content": "<p>BTW, if the codomain is a topological group, then you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.has_sum_compl_iff\">docs#finset.has_sum_compl_iff</a>.</p>",
        "id": 248270746,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628020202
    },
    {
        "content": "<p>Yes, I made it work via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_add_tsum_compl\">docs#tsum_add_tsum_compl</a>. Thanks, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> !</p>",
        "id": 248335145,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1628074707
    },
    {
        "content": "<p>Actually, it doesn't work in my context after all because I am summing over <code>ennreal</code>, which is not an additive group. I can't show that the sum over <code>{none}ᶜ</code> is summable because that would require <code>summable.summable_compl_iff</code>, which requires an additive group. I haven't been able to generalize <code>summable.summable_compl_iff</code> either.</p>\n<p>Maybe an easier way around the issue would be to convert the sum over <code>ennreal</code> into a sum over <code>real</code>? I don't think there is something in the library that would allow me to do that, but it would be useful for sure.</p>",
        "id": 248468013,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1628165292
    },
    {
        "content": "<p>Over <code>ennreal</code>, note that everything is summable.</p>",
        "id": 248468805,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1628165800
    },
    {
        "content": "<p>Good point, I hadn't thought about that :D.</p>",
        "id": 248471190,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1628167286
    }
]