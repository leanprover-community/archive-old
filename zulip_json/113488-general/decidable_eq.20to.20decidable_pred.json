[
    {
        "content": "<p>If I have a type Q (<code>Q : Type</code>), and its equality is decidable, i.e., <code>[decQ : decidable_eq Q]</code>, how can I say a function, <code>λ q : Q, q = q</code> is a <code>decidable_pred</code>?</p>",
        "id": 290872481,
        "sender_full_name": "Quanwen Chen",
        "timestamp": 1658830765
    },
    {
        "content": "<p>Are you looking for <code>λ q, deqQ q q</code>?</p>",
        "id": 290873346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658831308
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 290873556,
        "sender_full_name": "Quanwen Chen",
        "timestamp": 1658831451
    },
    {
        "content": "<p>The typeclass system should be smart enough to figure this out as well, so you could write something like <code>(by apply_instance : decidable_pred (@eq Q))</code>.</p>",
        "id": 290875627,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658832855
    },
    {
        "content": "<p>That's not the instance being asked for here</p>",
        "id": 290879304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658835489
    },
    {
        "content": "<p>That's defeq to <code>deqQ</code> in a reducible way</p>",
        "id": 290879327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658835517
    },
    {
        "content": "<p>Admittedly needing decidability of <code>x = x</code> is a rather strange request, as it's just true!</p>",
        "id": 290879387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658835581
    },
    {
        "content": "<p>Thanks for all the help. I am trying to figure out how to use <code>decidable_eq</code> and <code>decidable_pred</code> within <code>decidable</code> type class, so I asked the trivial question.</p>",
        "id": 290893774,
        "sender_full_name": "Quanwen Chen",
        "timestamp": 1658843723
    }
]