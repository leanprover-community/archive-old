[
    {
        "content": "<p>Is this a bug, or just a limitation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[protect_proj]</span> <span class=\"kd\">class</span> <span class=\"n\">no_zero_divisor_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">no_zero_divisors</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">ring.to_distrib</span> <span class=\"n\">α</span> <span class=\"n\">right_distrib</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">right_distrib</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ring</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 223362339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611142863
    },
    {
        "content": "<p>I'm guessing this is because <code>no_zero_divisors</code> uses instance arguments rather than structure fields for <code>0</code> and <code>*</code>?</p>",
        "id": 223363259,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611143593
    },
    {
        "content": "<p>Your statement is true, although that doesn't help me understand why that fails!</p>",
        "id": 223366192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611145712
    },
    {
        "content": "<p><code>old_structure_cmd</code> does not support dependent sequences of parents</p>",
        "id": 223372731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611149886
    },
    {
        "content": "<p>It would be nice if it stated that rather than blew up, but I guess there's little motivation to change it with lean4 now available</p>",
        "id": 223373059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611150062
    },
    {
        "content": "<p>Although I can't help but feel we'll want to build some automation to emulate parts of old_structure_cmd, and maybe then we can try to support that use-case.</p>",
        "id": 223373097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611150093
    }
]