[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> was asking what the apply bug was <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/undergraduate.20calculus/near/193845426\" title=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/undergraduate.20calculus/near/193845426\">here</a>. I just ran into what I think might be a pretty hideous manifestation of it (but might be something else):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"c1\">-- proof is irrelevant</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">one_lt_pow</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">one_lt_mul</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">one_lt_pow</span>\n<span class=\"c1\">-- one_lt_pow : 1 &lt; ?M_1 → ∀ {n : ℕ}, 0 &lt; n → 1 &lt; ?M_1 ^ n</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">222</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- refine one_lt_pow _ _, -- &lt;- works fine</span>\n  <span class=\"n\">apply</span> <span class=\"n\">one_lt_pow</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;- disaster</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">deep recursion was detected at &#39;replace&#39; (potential solution: increase stack space in your system)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I think <code>apply</code> might be trying to unify 2^222 with \"forall n,...\" or something? In practice this is a horrible error because the failure is immediate and (in my case) the red line was a long way further down; it just looked to me like Lean had \"switched off\".</p>",
        "id": 194280312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587030990
    },
    {
        "content": "<p>I think <code>lt</code> on <code>int</code> is defined by cases such that it reduces to <code>true</code> or <code>false</code>. So if you attempt to use whnf on it it will fully reduce the arguments</p>",
        "id": 194280830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587031279
    },
    {
        "content": "<p>My problems are much worse than I thought. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can you fill in the sorry below?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_lt_pow</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">one_lt_mul</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"mi\">222</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">one_lt_pow</span> <span class=\"o\">(</span><span class=\"n\">one_lt_two</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">222</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">one_lt_pow</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">x : ℤ := 2 ^ 222,</span>\n<span class=\"cm\">hx : 1 &lt; x</span>\n<span class=\"cm\">⊢ 1 &lt; x</span>\n<span class=\"cm\">-/</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194282874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587032493
    },
    {
        "content": "<p>With <code>pp.all</code> on it's</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">has_lt</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">has_lt</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>but <code>exact hx</code> gives me <code>deep recursion was detected at 'replace' (potential solution: increase stack space in your system)</code></p>",
        "id": 194282977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587032561
    },
    {
        "content": "<p>I'm on 3.7.2 if this makes any difference, with the mathlib commit from codewars</p>",
        "id": 194283122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587032646
    },
    {
        "content": "<p>oh wow</p>",
        "id": 194283300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587032792
    },
    {
        "content": "<p><code>exact one_lt_pow (one_lt_two) (by norm_num),</code> works</p>",
        "id": 194283304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587032797
    },
    {
        "content": "<p>This won't work in my use case I suspect</p>",
        "id": 194283354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587032842
    },
    {
        "content": "<p>I suspect it might be the <code>let</code></p>",
        "id": 194283446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587032885
    },
    {
        "content": "<p>yeah</p>",
        "id": 194283462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587032899
    },
    {
        "content": "<p>There's no weird tactic which is better than <code>exact</code>?</p>",
        "id": 194283488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587032920
    },
    {
        "content": "<p>In your solution you're making a second proof of 1&lt;x, I want to use <code>hx</code></p>",
        "id": 194283568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587032994
    },
    {
        "content": "<p>ah, this is interesting:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_def</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"mi\">222</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">x_def</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">one_lt_pow</span> <span class=\"o\">(</span><span class=\"n\">one_lt_two</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- invalid type ascription, term has type</span>\n    <span class=\"c1\">--   1 &lt; 2 ^ ?m_1</span>\n    <span class=\"c1\">-- but is expected to have type</span>\n    <span class=\"c1\">--   1 &lt; 2 ^ 222</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194283575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033000
    },
    {
        "content": "<p>side note: Is there a way to use <code>set</code> to get the result of the first line?</p>",
        "id": 194283656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033026
    },
    {
        "content": "<p><code>set x : Z := 2^222 with hx</code>?</p>",
        "id": 194283696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033050
    },
    {
        "content": "<p>I think that produces a let-binding</p>",
        "id": 194283726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033071
    },
    {
        "content": "<p>I specifically want a have binding here</p>",
        "id": 194283746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033085
    },
    {
        "content": "<p>Oh sorry I misunderstood. You mean your <code>obtain</code>?</p>",
        "id": 194283750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033090
    },
    {
        "content": "<p>so that lean can't accidentally unfold <code>x</code></p>",
        "id": 194283758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033098
    },
    {
        "content": "<p>yes</p>",
        "id": 194283762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033102
    },
    {
        "content": "<p>Note that you switched to nat. I don't know if this is relevant.</p>",
        "id": 194283880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033171
    },
    {
        "content": "<p>oh, you are right, false alarm</p>",
        "id": 194283961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033231
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"mi\">222</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">x_def</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 194284021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033256
    },
    {
        "content": "<p>this works fine:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_def</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"mi\">222</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">x_def</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">one_lt_pow</span> <span class=\"o\">(</span><span class=\"n\">one_lt_two</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">222</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">one_lt_pow</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194284028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033262
    },
    {
        "content": "<p>What's the difference between your code and mine?</p>",
        "id": 194284082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033299
    },
    {
        "content": "<p>the first line</p>",
        "id": 194284101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033307
    },
    {
        "content": "<p>(other than the fact that yours works ;-) )</p>",
        "id": 194284109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033311
    },
    {
        "content": "<p>In your code, <code>x</code> is a let binding, which means that lean can choose to unfold it whenever it wants</p>",
        "id": 194284159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033343
    },
    {
        "content": "<p>in mine it is a variable, which cannot be unfolded and where you only get an equality to the real value via <code>x_def</code></p>",
        "id": 194284242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033377
    },
    {
        "content": "<p>this makes it more controllable, since lean will fail instead of go on a wild goose chase on a bad application</p>",
        "id": 194284267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033401
    },
    {
        "content": "<p>Oh this is great, it works in my use case too :D</p>",
        "id": 194284284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033417
    },
    {
        "content": "<p>Many thanks.</p>",
        "id": 194284309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033431
    },
    {
        "content": "<p>Many thanks indeed, in fact; I would never have undone this myself.</p>",
        "id": 194284334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033457
    },
    {
        "content": "<p>killer codewars question is back on</p>",
        "id": 194284350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033467
    },
    {
        "content": "<p>This is still deeply unsettling</p>",
        "id": 194284360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033475
    },
    {
        "content": "<p>as far as I can tell, the <code>exact hx</code> line should work with no problems</p>",
        "id": 194284430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033493
    },
    {
        "content": "<p>there is no need to unfold anything as it's a syntactic match</p>",
        "id": 194284451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033506
    },
    {
        "content": "<p>Here is a simplified version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"mi\">222</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194284932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033823
    },
    {
        "content": "<p>I think I remember something trying a whnf on the top level when giving the types of terms, maybe to get the universe level? The problem is that <code>1 &lt; x</code> is defeq to <code>true</code>, but the proof of this is too long</p>",
        "id": 194285103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587033917
    },
    {
        "content": "<p>This version works with no imports</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"mi\">222</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx2</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194285945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034389
    },
    {
        "content": "<p>I can't find anything suspicious in the traces, I think this requires C++ debugging</p>",
        "id": 194286001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034423
    }
]