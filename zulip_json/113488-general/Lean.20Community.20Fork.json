[
    {
        "content": "<p>The fork <code>leanprover-community/lean</code> was recently created. Before we go crazy on it, I would like to have a public discussion on the pros and cons: A list of things we want to do with it, problems that can arise from moving mathlib to compiling on a fork (should we maintain compatibility to 3.4.2?), the possibility of having to give these changes up when lean 4 comes around, and so on. Some of this might involve dredging up old closed PRs from the lean repo for re-evaluation.</p>\n<p>We considered and rejected a proposal for a fork last year, when development on 3.4.0 was still ongoing, and we decided that tracking changes in lean would be too difficult if a community fork diverged too much. I think the situation is quite different now, since lean 3 is essentially abandoned while official development (read Leo + Sebastian) has continued on lean 4 in private. My current thoughts are to use a community fork to continue support and development on lean 3, with the understanding that lean 4 may change everything when it eventually comes. I would propose to have mathlib maintain an experimental lean 4 branch during the initial stage after the release, without much serious porting except for proof of concepts, until we are all comfortable enough with it that we think we can leave lean 3, and the fork, behind for good. (We may also want to fork lean 4 but that's a bit far off to plan at this point.)</p>\n<p>I think we should probably minimize changes to lean, but I also think that it will be difficult to impossible to maintain compatibility with two lean versions simultaneously - even moving a single theorem from mathlib to core or vice versa causes a mismatch that will cause an error either way around. Pure additions to the C++ code might allow backwards compatibility, but something like a bugfix that we want to take advantage of in mathlib would be prevented by attempts at backward compatibility.</p>\n<p>If we decide against using the fork for mathlib, it can still be used as an experimental testing grounds for changes to lean, but in this case backward compatibility would be a bigger problem (unless one is okay with using the experimental branch on its own without mathlib).</p>\n<p>Plans are not finalized yet, but I'm hoping that having the fork available for use now will help spark the conversation.</p>",
        "id": 157973553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549801888
    },
    {
        "content": "<p>I can PR my fork of Lean with docstrings.</p>",
        "id": 157976272,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1549807248
    },
    {
        "content": "<p>I think I won't be really enthusiastic about this before I see a compelling list of things we could do using this fork. Right now it looks like the inconvenience and energy dispersion would be more visible than the benefits. I would rather like to see more maths going into mathlib. And I would really like to see Leo writing that he is happy, or at least doesn't care at all. Having a happy Leo is much more important for the future of Lean than unlocking a couple of definitions that we currently can't change because they are in core Lean.</p>",
        "id": 157978732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549811594
    },
    {
        "content": "<p>I generally agree with Patrick. What's the extent of the changes you'd expect to make on the fork? Small bug fixes (e.g. to some of the tactics we have primed versions of) and name changes wouldn't be so disruptive, but to me there's nothing that's worth the cost of forking. </p>\n<p>I think it would be futile to try to maintain backwards compatibility. If we move mathlib to a fork, the temptation to start changing little annoying things in the core library will be too great.</p>\n<p>We'd also have to find a better way to synchronize mathlib with forked-Lean releases. Updating to the most recent changes to Lean didn't go 100% smoothly, and presumably there would be more activity on the fork if it happens. I've really enjoyed the stability of Lean versions compared to a few years ago.</p>\n<p>It's not possible to handle versions of forked Lean smoothly in elan, is it?</p>",
        "id": 157984606,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549821701
    },
    {
        "content": "<p>Some suggestions: ignore <code>.olean</code> files without corresponding <code>.lean</code> files; make <code>lean --deps</code> work again; implement <code>#where</code> reliably/without hacks; maybe fix the elaborator bug that affects universes in category theory.</p>",
        "id": 157984825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549822120
    },
    {
        "content": "<p>I agree that forking for the purpose of making changes to the core library is not that compelling and probably would cause more headaches than it's worth.</p>",
        "id": 157984840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549822193
    },
    {
        "content": "<p>It's actually very easy to handle forked versions of Lean via elan. \"It just works.\" My student Keeley Hoek provided the patches for elan last year, as he had forked Lean so we could make native calls to libsvm.</p>",
        "id": 157996813,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549842952
    },
    {
        "content": "<p>In particular, instead of writing <code>lean_version = \"3.4.2\"</code> you just write <code>lean_version = \"khoek/klean:3.4.4\"</code></p>",
        "id": 157996918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549843095
    },
    {
        "content": "<blockquote>\n<p>I think I won't be really enthusiastic about this before I see a compelling list of things we could do using this fork.</p>\n</blockquote>\n<p>Yes, that's partly the reason for this thread.</p>\n<blockquote>\n<p>I would rather like to see more maths going into mathlib.</p>\n</blockquote>\n<p>I am not planning on sinking major time into work on lean core. But I want to provide an outlet for people for whom the inconvenience of a bug or missing feature is sufficiently higher than the inconvenience of learning how to write and test a PR for lean.</p>\n<blockquote>\n<p>And I would really like to see Leo writing that he is happy, or at least doesn't care at all.</p>\n</blockquote>\n<p>My understanding of the recent move of mathlib away from the <code>leanprover</code> account is that Leo doesn't care at all, or more precisely he wants mathlib to be our problem and not his. It's an independent project, and if it is better for us to run a forked version of lean then that's our prerogative. He has also sent clear signals that he doesn't want to be bothered by user problems or be involved in reviewing PRs or what have you, and a fork is the easiest way to achieve both goals (leaving Leo alone and respecting issues and PRs from the community).</p>\n<blockquote>\n<p>What's the extent of the changes you'd expect to make on the fork? Small bug fixes (e.g. to some of the tactics we have primed versions of) and name changes wouldn't be so disruptive, but to me there's nothing that's worth the cost of forking.</p>\n</blockquote>\n<p>Small bug fixes, like incorporating primed versions of tactics, is an easy thing. Another major class of changes involves increasing the API surface area in order to make certain things that are currently impossible possible in lean. So rather than putting <code>#where</code> in lean C++, we add enough hooks so that a lean <code>#where</code> can ask all the questions it needs to ask.</p>\n<blockquote>\n<p>We'd also have to find a better way to synchronize mathlib with forked-Lean releases. Updating to the most recent changes to Lean didn't go 100% smoothly, and presumably there would be more activity on the fork if it happens. I've really enjoyed the stability of Lean versions compared to a few years ago.</p>\n</blockquote>\n<p>This is true. We were clearly out of practice for lean updates and 3.4.2 didn't go as smoothly as expected. We would need to get better at that. Back in the day, mathlib ran on nightly lean releases, until Leo closed up shop. I don't recall there being much problem with that, but I think the community was smaller back then and there weren't so many mathematicians; we need to make sure the tooling is available to make this pain-free or it will only be an inconvenience, like Patrick says.</p>\n<p>The line between \"stable\" and \"abandoned\" is thin. Of course lean is much more stable now than it was back when Leo made commits to lean repo. But it came at exactly the cost I was worried about back then: monkey patches, workarounds, and rejecting issues with \"sorry, you're out of luck\".</p>\n<p>Some suggestions, based on previous conversations:</p>\n<ul>\n<li>VM overrides. This would require its own thread to discuss in detail, but the basic idea is that you can mark a definition <code>@[vm_override bar] def foo</code> and then the VM will call <code>bar</code> instead of <code>foo</code>. This can be used to make existing VM overrides manifest in the code (they aren't visible right now, which leads to nonlocality of definition where you see a lean definition and it isn't being used and the code says nothing to indicate this), and can also be used to support definitions that compute efficiently in both the kernel and the VM. (I have a ton of applications of this.)</li>\n<li><code>cached A</code>: maybe the name needs work, I think <code>mutable A</code> might be better. It's a wrapper for <code>trunc A</code> that allows mutation of the contained element. Type theory mumbo jumbo ensures that you can't observe the change of representation.</li>\n<li>User computation rules. The kernel already has support for normalizer_extensions, this is just providing an interface for it. \"You could break consistency!\" Yes, it's an axiom-like thing. It is not intended for general use but there are some applications where it is necessary.</li>\n<li>Hook for the equation compiler: Using custom recursors in the equation compiler, and providing a way to use equation syntax with a custom equation compiler.</li>\n<li>More tactic API: more pexpr functions, pattern matching on <code>macro_def</code>, custom parser hooks, more direct manipulation of the type context.</li>\n<li>Tracing and timing for <code>#reduce</code></li>\n<li>Additions and fixes for <code>leanpkg</code>: allow tracking master branch, add extra commands like <code>init-travis</code> for setting up a travis.yml file for your project, probably some other things I've forgotten.</li>\n<li>Bug fixes all around</li>\n</ul>\n<p>As you can see it's mostly hooks - I want to minimize the stuff that goes into lean repo and instead just set up the minimum necessary to allow building actual tools in mathlib. Of course each of these needs its own issue / RFC and PR, and we should keep in mind the disruptive effect of each of them when considering whether to merge them, and for many of these no code has been written yet so someone would have to feel strongly enough about them to implement them to get the process started. But at least now we can have the conversation.</p>\n<p>In the core library, I am more torn, because of the issues with moving things around and references in dependent projects.</p>\n<ul>\n<li>One of the projects I got most of the way to completion, before leo closed up shop and I quietly dropped it, was a change of <code>discrete_field -&gt; field</code> and eliminating the <code>field</code> class.</li>\n<li>Proof changes should be less disruptive, for example removing AC from the proof that <code>int</code> is a ring.</li>\n<li>Removing notations that aren't used and are blocking better uses, i.e. <code>|&gt;</code> <code>&lt;|</code> <code>&gt;=&gt;</code> and I'm sure you all have some other examples.</li>\n</ul>",
        "id": 157996991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549843238
    },
    {
        "content": "<p><code>&gt;=&gt;</code> looks like a fish</p>",
        "id": 157997112,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549843417
    },
    {
        "content": "<p>thank haskell for that one</p>",
        "id": 157997114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549843431
    },
    {
        "content": "<p>Does anyone know how to run Lean's unit tests?</p>",
        "id": 159160971,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550846646
    },
    {
        "content": "<p>I think <code>ninja test</code> works</p>",
        "id": 159161451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550847059
    },
    {
        "content": "<p>Works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># in lean dir</span>\nmkdir -p build/release\n<span class=\"nb\">cd</span> build/release\ncmake ../../src -G Ninja\nninja\nninja <span class=\"nb\">test</span>\n</pre></div>",
        "id": 159163635,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550848923
    },
    {
        "content": "<p>Would there be any interest in adding <code>meta constant float : Type</code> to this fork?</p>",
        "id": 159343597,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1551107264
    },
    {
        "content": "<p>Yes please</p>",
        "id": 159344822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551108148
    },
    {
        "content": "<p>I actually finally have a plan for how to model <code>float</code> in the right way. It will require your meta implementation as a prerequisite, so it's a good starting point</p>",
        "id": 159344899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551108204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  also has an implementation so I'll mention him.</p>",
        "id": 159353294,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1551114140
    },
    {
        "content": "<p>It's here: <a href=\"https://github.com/robertylewis/lean/tree/floats\" target=\"_blank\" title=\"https://github.com/robertylewis/lean/tree/floats\">https://github.com/robertylewis/lean/tree/floats</a> But as you can see, there's not much to it.</p>",
        "id": 159369411,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551126806
    },
    {
        "content": "<p>We now have the first nightly for the community fork: <a href=\"https://github.com/leanprover-community/lean-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-nightly/releases\">https://github.com/leanprover-community/lean-nightly/releases</a>. There's no version for Windows yet as I'm still figuring out the AppVeyor sorcery.</p>",
        "id": 163803802,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555767343
    },
    {
        "content": "<p>It has a couple of fixes (<code>revert</code>, <code>get_cwd</code>, repeated instances in <code>init/algebra/field</code>), improved doc strings for tactics and a few new features:</p>\n<div class=\"codehilite\"><pre><span></span>191a237 feat(tactic/interactive): generalize custom tactic monads in begin ... end blocks (#10)\n5f5dcc1 feat(io/serial): add expr serialization/deserialization functions (#6)\n00b3161 feat(meta/environment): add_ginductive (#3)\n</pre></div>",
        "id": 163803977,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555767636
    },
    {
        "content": "<p>there is a <em>lot</em> of added docstring text, thanks <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span></p>",
        "id": 163803999,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555767711
    },
    {
        "content": "<p>Is there some sort of README or HOWTO for newbies that have no idea how to switch to this Lean version? I guess for new projects you can just feed the correct pointer to <code>elan</code> and it should \"just work\", right? Is it possible to run mathlib with the new Lean version? What are the expectations that I should have?</p>",
        "id": 163804620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555768809
    },
    {
        "content": "<p>I haven't tested with mathlib yet but I don't think anything will break. As for the README, my next step is making it usable. I'd like to hook it into elan but I'm not sure how yet</p>",
        "id": 163805112,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555769644
    },
    {
        "content": "<p>Will it have a more succinct name than \"the community fork\"? Are you allowed to call it \"Lean 3.5 (unofficial)\", abbreviated to \"Lean 3.5\"?</p>",
        "id": 163805538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555770491
    },
    {
        "content": "<p>Or would this be frowned upon?</p>",
        "id": 163805540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555770500
    },
    {
        "content": "<p>I think the plan was to add a \"c\" at the end of the version name</p>",
        "id": 163806293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555771824
    },
    {
        "content": "<p>I was thinking of <code>3.4.3c</code> (c of community)</p>",
        "id": 163806357,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555771968
    },
    {
        "content": "<p>Maybe we should jump up to <code>3.5c</code> though</p>",
        "id": 163806360,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555771981
    },
    {
        "content": "<p>I think <code>3.5c</code> is deserved</p>",
        "id": 163806896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555772843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> literally all you need to do to try it out if you use elan is change your <code>lean_version = ...</code> to <code>lean_version = \"leanprover-community/lean:nightly-2019-04-20\"</code> in <code>leanpkg.toml</code>, and restart lean in vscode.</p>",
        "id": 163825176,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555804828
    },
    {
        "content": "<p>You can also do:</p>\n<div class=\"codehilite\"><pre><span></span>$ elan toolchain install leanprover-community/lean:nightly\n$ elan override <span class=\"nb\">set</span> nightly\n</pre></div>",
        "id": 163825305,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555805044
    },
    {
        "content": "<p>As of an hour ago, the nightly build is available for Windows</p>",
        "id": 163825310,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555805065
    },
    {
        "content": "<p>it's 4-20 Lean</p>",
        "id": 163825529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555805468
    },
    {
        "content": "<p>Lean plus some extra magic</p>",
        "id": 163825581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555805541
    },
    {
        "content": "<p>Are you insinuating that we were doing drugs while making those changes?</p>",
        "id": 163825600,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555805607
    },
    {
        "content": "<p>only when you pushed them</p>",
        "id": 163825669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555805753
    },
    {
        "content": "<p>Oh ... much better ... ?</p>",
        "id": 163825715,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555805785
    },
    {
        "content": "<p>So now there is a risk that future tactics will only work with the fork, right?</p>",
        "id": 163825716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555805797
    },
    {
        "content": "<p>My plan is to keep mathlib working with both versions for a while</p>",
        "id": 163825728,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555805866
    },
    {
        "content": "<p>So then if I want to run the perfectoid repo off that fork, for some reason (say we run into a bug in lean and you can fix it), I guess I would have to learn the new incantation for making this happen -- this just involves some simple edit to <code>leanpkg.toml</code> right?</p>",
        "id": 163825775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555805887
    },
    {
        "content": "<p>And then <code>elan</code> does the rest?</p>",
        "id": 163825776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555805894
    },
    {
        "content": "<p>But at the same time, eventually, I'd like to bring in the new data type package into mathlib and we'll definitely need 3.5 for that to work</p>",
        "id": 163825780,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555805913
    },
    {
        "content": "<p>o_O</p>",
        "id": 163825782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555805925
    },
    {
        "content": "<p>Yes, that's right</p>",
        "id": 163825783,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555805938
    },
    {
        "content": "<p>Now there will be a risk that there will be a Lean 3.6 and a Lean 4.0 which are incompatible?</p>",
        "id": 163825824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555805955
    },
    {
        "content": "<p>You're talking about this qpf stuff which I don't understand properly?</p>",
        "id": 163825828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555805993
    },
    {
        "content": "<p>Will it help me make a perfectoid space?</p>",
        "id": 163825830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555806000
    },
    {
        "content": "<p>There's no question that Lean 4 will be incompatible with what we did with Lean 3</p>",
        "id": 163825873,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555806005
    },
    {
        "content": "<p>I don't understand perfectoid spaces so I can't say</p>",
        "id": 163825878,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555806028
    },
    {
        "content": "<p>What if Leo just decided to troll us and release Lean 4 which was exactly the same as Lean 3.4.2 except for a sexier parser. Oh -- even better -- make it exactly the same except that type class inference is done in a super-cool new way and we have a sexier parser. And they accept PR's. We'd want to upgrade to 4.0 right?</p>",
        "id": 163825882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555806044
    },
    {
        "content": "<p>I'm pretty sure they're passed that now. They've been working on a compiler as well as a parser. That should be substantial</p>",
        "id": 163825900,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555806111
    },
    {
        "content": "<p>And then we made bug reports and they all got fixed in Lean 4.1</p>",
        "id": 163825946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555806143
    },
    {
        "content": "<p>and mathlib 3.4.2 compiled on it.</p>",
        "id": 163825958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555806205
    },
    {
        "content": "<p>No one has made the claim that this is likely and many times, the developers have asserted the opposite.</p>",
        "id": 163826005,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555806251
    },
    {
        "content": "<p>Lean 4 will break a lot of things</p>",
        "id": 163826012,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555806285
    },
    {
        "content": "<p>it will take a while to port mathlib to Lean 4 and we have to get comfortable with Lean 3 in the meantime. I don't know if we're going to need to support both Lean 3 and Lean 4 for a time or if it's even a possibility</p>",
        "id": 163826026,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555806340
    },
    {
        "content": "<p>That's crazy. We have a fork. The ramifications are just sinking in. Is Leo OK with this? Presumably there's some licensing issue restrictions on what we can do with the fork. Presumably we can't delete all reference to Leo, for example.</p>",
        "id": 163826216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555806617
    },
    {
        "content": "<p>It's my feeling that a bunch of the features which have been proposed so far are intended for Lean 4 anyway, like <code>https://github.com/leanprover-community/lean/pull/19</code>, and the bugfixes</p>",
        "id": 163826217,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555806646
    },
    {
        "content": "<p>With respect to licensing the code is under <code>Apache License 2.0</code> <a href=\"https://github.com/leanprover/lean/blob/master/LICENSE\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/LICENSE\">https://github.com/leanprover/lean/blob/master/LICENSE</a>, and we of course must obey its terms (which are really very permissive)</p>",
        "id": 163826277,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555806737
    },
    {
        "content": "<p>I have talked to <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> about and he seems relieved that we'll handle the bugs from now on.</p>",
        "id": 163826344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555806870
    },
    {
        "content": "<p>Btw, I have arranged a build that checks mathlib with that latest version of Lean: <a href=\"https://travis-ci.org/leanprover-community/mathlib/builds/522599987\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/builds/522599987\">https://travis-ci.org/leanprover-community/mathlib/builds/522599987</a>. For now, it's allowed to fail but I'm making sure to keep a measure of when Lean 3.5 breaks mathlib</p>",
        "id": 163826466,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555807141
    }
]