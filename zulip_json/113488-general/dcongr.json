[
    {
        "content": "<p>Can we have a dependent congr tactic? One that doesn't generate <code>==</code>s by generating smarter goals? Or is this a hard problem?</p>",
        "id": 196598741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588751738
    },
    {
        "content": "<p>what do you want the theorem to say?</p>",
        "id": 196630366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588770114
    },
    {
        "content": "<p>the alternative is to produce goals that look like <code>_ = eq.rec _ _</code>, and leave it to the user to deal with the <code>eq.rec</code> instead of the <code>heq</code>.</p>",
        "id": 196633114,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588771270
    },
    {
        "content": "<p>Another alternative is to not go any deeper if it's going to make an <code>heq</code> goal.</p>",
        "id": 196633697,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588771550
    },
    {
        "content": "<p>But it should check if it can apply <code>heq_of_eq</code> to the new <code>heq</code> goal.</p>",
        "id": 196633779,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588771571
    },
    {
        "content": "<p>Or you could give theorems of the form <code>A = B -&gt; equiv (F A) (F B)</code> an attribute and use the equiv to state the <code>heq</code> goal.</p>",
        "id": 196634028,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588771683
    },
    {
        "content": "<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> something like what Chris is suggesting sounds good.</p>",
        "id": 196638435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588773587
    },
    {
        "content": "<p>I don't know when this is ever actually a good proof strategy though. I like the idea of <code>congr</code> just giving up and falling back to a stricter version if it can't get rid of the <code>heq</code>s, but these pathover style goals are just an indication that you've messed up</p>",
        "id": 196641376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588774926
    },
    {
        "content": "<p>Another possibility is to produce an equality of dependent pairs. This is the most concise way I know to represent an equality of telescopes (dependent values), but it only yields one subgoal and in a sense you can say it hasn't made progress</p>",
        "id": 196641550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588775035
    },
    {
        "content": "<p>also, the proposed fallback doesn't really work either. Either the first argument is defeq so congr will automatically make an eq on the second argument, or the first argument is not defeq in which case congr can't do anything. (It can't apply the stricter congruence lemma because the first arguments are not defeq). So really the only alternative is to fail outright</p>",
        "id": 196641914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588775199
    },
    {
        "content": "<p>I use several times the \"<code>congr</code> to break a dependent pair, and then get rid of the <code>heq</code> using another lemma\" approach in <a href=\"https://github.com/leanprover-community/mathlib/issues/2513\" title=\"https://github.com/leanprover-community/mathlib/issues/2513\">#2513</a>. If <code>congr</code> stopped working in this kind of situation things would be much more cumbersome.</p>",
        "id": 196642006,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588775249
    },
    {
        "content": "<p>See around <a href=\"https://github.com/leanprover-community/mathlib/blob/429356860f556eaeff04f0aa00d47d530ff3ffed/src/analysis/analytic/composition.lean#L1122\" title=\"https://github.com/leanprover-community/mathlib/blob/429356860f556eaeff04f0aa00d47d530ff3ffed/src/analysis/analytic/composition.lean#L1122\">https://github.com/leanprover-community/mathlib/blob/429356860f556eaeff04f0aa00d47d530ff3ffed/src/analysis/analytic/composition.lean#L1122</a> for instance</p>",
        "id": 196642253,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588775350
    },
    {
        "content": "<p>I'm not sure how useful it would be, but one option is to have <code>f x y = f z w</code> become <code>|- x = y</code> and <code>h : x = y |- f x y = f z w</code>, with the second goal only generated if it's masking some heqs</p>",
        "id": 196642324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588775377
    },
    {
        "content": "<p>of course this is just <code>have</code>, but <code>congr</code> is doing the dirty work to find out what the right assumption is</p>",
        "id": 196642472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588775418
    },
    {
        "content": "<p>Right, I want <code>congr</code> to do some dirty work</p>",
        "id": 196643375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588775767
    },
    {
        "content": "<p>Actually, congr can do a bit better on the second goal. If <code>x</code> or <code>y</code> is a variable, or if it can be generalized to a variable without making the goal type incorrect, then it can generalize and then subst that side, resulting in a goal <code>|- f x z = f x w</code>, and it can then try to do <code>congr</code> again, presumably progressing to <code>|- z = w</code> as desired</p>",
        "id": 196644135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588776081
    },
    {
        "content": "<p>Where it gets interesting is when both <code>x</code> and <code>y</code> are complicated terms and <code>f</code> also contains references to subterms of it. For example, maybe <code>f : \\forall n, fin (g n) -&gt; A</code>, <code>g h : nat -&gt; nat</code>, and <code>g (h x)</code> is defeq to <code>x</code>, and you want to prove <code>x y : nat, z : fin x, w : fin y |- f (h x) z = f (h y) w</code>, assuming <code>x = y</code> is provable.</p>\n<p>Here if we apply <code>congr 1</code> once we get the first subgoal <code>h x = h y</code>, but it will not help us to solve the second goal <code>z : fin x, w : fin y, h' : h x = h y |- f (h x) z = f (h y) w</code> because we need to subst using <code>x = y</code> instead.</p>",
        "id": 196645194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588776567
    },
    {
        "content": "<p>Here's an idea: We know that at minimum, to solve this goal we have to prove <code>h x = h y</code> (the first components are equal) and <code>fin x = fin y</code> (the second components must be heq meaning that their types must be equal). If we assume that type constructors are essentially injective, we can simplify the second goal to <code>x = y</code> WLOG, which is the equality we want.</p>\n<p>In general, when we get a heq goal, we compute the types of the two sides and apply congr recursively on any equality of types until we either reach an equality involving a variable, or we get an equality of non-types. Together with the equalities of nondependent arguments, this produces a whole bunch of equalities, some of which probably follow from others. In the example, we would congr <code>fin x = fin y</code> because it is an equality of types, so we would end up with <code>h x = h y</code> from the first argument and <code>x = y</code> from the second. We can use some heuristic to try to prove one from the other, discharging <code>h x = h y</code>, and so at the first level congr has decided to pass <code>|- x = y</code> back to the user, and <code>x = y |- f (h x) z = f (h y) w</code> can be successfully subst'd, so the problem is reduced to <code>z w : fin x |- f (h x) z = f (h x) w</code>, and congr recurses to the next level. Now it is easy, and congr will pass back <code>z w : fin x |- z = w</code> as the second subgoal.</p>",
        "id": 196648127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588777693
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 196649583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588778181
    }
]