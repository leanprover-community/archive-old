[
    {
        "content": "<p>I have constructed the free group of a set here: <a href=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\">https://github.com/kckennylau/Lean/blob/master/free_group.lean</a></p>",
        "id": 124469539,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522538427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what do you think of it?</p>",
        "id": 124469545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522538468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm onto something. My construction of the <em>real</em> free group is almost done.</p>",
        "id": 124480775,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522567068
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\">https://github.com/kckennylau/Lean/blob/master/free_group.lean</a></p>",
        "id": 124481322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522568492
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/89\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/89\">https://github.com/leanprover/mathlib/pull/89</a></p>",
        "id": 124481323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522568495
    },
    {
        "content": "<p>Why not prove the adjoint functor theorem?</p>",
        "id": 124493682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522599594
    },
    {
        "content": "<p>that construction was my first construction</p>",
        "id": 124493728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522599631
    },
    {
        "content": "<p>see <a href=\"#narrow/stream/113488-general/topic/making.20isomorphism.20class.20a.20group\" title=\"#narrow/stream/113488-general/topic/making.20isomorphism.20class.20a.20group\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/making.20isomorphism.20class.20a.20group</a> for why it fails</p>",
        "id": 124493731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522599663
    },
    {
        "content": "<p>unfortunately I rewrote my second construction over my first</p>",
        "id": 124493781,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522599749
    },
    {
        "content": "<p>so see commit history for the construction from adjoint functor theorem</p>",
        "id": 124493783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522599761
    },
    {
        "content": "<p>Nice construction! Would it be possible to construct the free group directly on an inductive type of the group signature and then quotient by the group axioms (i.e. without using the inverse monoid)?</p>",
        "id": 124499636,
        "sender_full_name": "Peter Jipsen",
        "timestamp": 1522613134
    },
    {
        "content": "<p>I find the divide-and-conquer approach more psychologically comfortable</p>",
        "id": 124499786,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522613408
    },
    {
        "content": "<p>Sure, I agree with that. Was just wondering how a direct (minimal) construction would compare -- I may try that as an exercise</p>",
        "id": 124500101,
        "sender_full_name": "Peter Jipsen",
        "timestamp": 1522614156
    },
    {
        "content": "<p>do let me know afterwards! :)</p>",
        "id": 124500103,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522614181
    },
    {
        "content": "<p>I agree that separating the construction into steps makes it clearer what is happening. Is it possible to use just the second stage to construct the free monoid as well?</p>",
        "id": 124500203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522614450
    },
    {
        "content": "<p>hmm, I don't know</p>",
        "id": 124500247,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522614502
    },
    {
        "content": "<p>free commutative ring = polynomial ring <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mo>[</mo><mi>S</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 124500398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522614900
    },
    {
        "content": "<p>might be a nice way to think about it</p>",
        "id": 124500404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522614940
    },
    {
        "content": "<p>feel free to construct it ^^</p>",
        "id": 124500405,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522614940
    },
    {
        "content": "<p>did you prove the adjoint functor theorem yet? ;-)</p>",
        "id": 124500408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522614956
    },
    {
        "content": "<p>heh</p>",
        "id": 124500452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522615020
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">L</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">L₂</span> <span class=\"n\">L₁</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span>\n<span class=\"bp\">|</span> <span class=\"n\">append</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"n\">L₄</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L₃</span> <span class=\"bp\">++</span> <span class=\"n\">L₄</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bnot</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">[]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">α</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)])</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125187323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523952987
    },
    {
        "content": "<p>How might I prove this?</p>",
        "id": 125187324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523952990
    },
    {
        "content": "<p>looks simple but somehow I can't do it</p>",
        "id": 125187326,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523952997
    },
    {
        "content": "<p>You need to generalize <code>[(x, tt)]</code> and <code>[(y, tt)]</code> then you can use induction on it.</p>",
        "id": 125187372,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523953084
    },
    {
        "content": "<p>Like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">α</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125187383,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523953131
    },
    {
        "content": "<p>can I not do inversion (pattern matching)?</p>",
        "id": 125187391,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953150
    },
    {
        "content": "<p>your code doesn't work, and after I removed <code>intro h</code>, I get an impossible goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">rel</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 125187452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953238
    },
    {
        "content": "<p><code>match</code> doesn't work, but <code>cases</code> could work. But I guess you need induction to finally proof it, as the <code>x</code> and <code>y</code> could come from the recursive call.</p>",
        "id": 125187453,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523953245
    },
    {
        "content": "<p>never mind, ignore what I said about your code not working</p>",
        "id": 125187468,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953293
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">rel</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span><span class=\"o\">,</span>\n<span class=\"n\">ih1</span> <span class=\"o\">:</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L1</span> <span class=\"bp\">→</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L2</span><span class=\"o\">,</span>\n<span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 125187534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953397
    },
    {
        "content": "<p>I ran to an impossible goal</p>",
        "id": 125187535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953404
    },
    {
        "content": "<p>did you use <code>induction h generalizing x y</code>?</p>",
        "id": 125187539,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523953437
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">rel</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">h_L₁</span> <span class=\"n\">h_L₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">h_a</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">α</span> <span class=\"n\">h_L₁</span> <span class=\"n\">h_L₂</span><span class=\"o\">,</span>\n<span class=\"n\">h_ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">h_L₁</span> <span class=\"bp\">→</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">h_L₂</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">h_L₂</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">h_L₁</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 125187581,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523953458
    },
    {
        "content": "<p>you're right, there's something wrong with me</p>",
        "id": 125187582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953460
    },
    {
        "content": "<p>If you are working on free groups: you don't need the <code>refl</code>, <code>symm</code> and <code>trans</code> rules. For example I did a experiment a while back:<br>\n<a href=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9\">https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9</a><br>\nThere I used <code>quot</code>, which doesn't require a <code>setoid</code>. Then lifting functions requires less proofs. Other things get a little bit more difficult.</p>",
        "id": 125187682,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523953645
    },
    {
        "content": "<p>I, uh... prefer using setoid :P</p>",
        "id": 125187727,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">rel</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span><span class=\"o\">,</span>\n<span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">α</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span><span class=\"o\">,</span>\n<span class=\"n\">ih1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L1</span> <span class=\"bp\">→</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">ih2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L2</span> <span class=\"bp\">→</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L3</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L1</span><span class=\"o\">,</span>\n<span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"o\">[(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L3</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 125187734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953766
    },
    {
        "content": "<p>an impossible goal</p>",
        "id": 125187735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953775
    },
    {
        "content": "<p>that's not impossible</p>",
        "id": 125187776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523953804
    },
    {
        "content": "<p>it's just transitivity on the two ih</p>",
        "id": 125187783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523953815
    },
    {
        "content": "<p>but I can't use the assumption <code>[(y, tt)] = L2</code></p>",
        "id": 125187787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953830
    },
    {
        "content": "<p>this can't be proved</p>",
        "id": 125187788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953835
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 125187802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523953867
    },
    {
        "content": "<p>is there really no way to use the equation compiler?</p>",
        "id": 125187809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953887
    },
    {
        "content": "<p>Didn't I show you how to solve this with a different representation?</p>",
        "id": 125187810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523953890
    },
    {
        "content": "<p>because that compiler is smarter than induction</p>",
        "id": 125187815,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523953898
    },
    {
        "content": "<p>You first need to prove a stronger inversion rule: <code>rel [x] as -&gt; \\exists y, as = [y]</code> (ups, this doesn't hold...)</p>",
        "id": 125187817,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523953901
    },
    {
        "content": "<p>You want to focus on one-directional reduction</p>",
        "id": 125187820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523953914
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive red : list (α × bool) → list (α × bool) → Prop\n| refl {L} : red L L\n| trans {L₁ L₂ L₃} : red L₁ L₂ → red L₂ L₃ → red L₁ L₃\n| cons {L₁ L₂} (a) : red L₁ L₂ → red (a :: L₁) (a :: L₂)\n| bnot {x b L} : red ((x, b) :: (x, bnot b) :: L) L\n\ntheorem church_rosser : ∀ L₁ L₂, rel α L₁ L₂ → ∃ L₃, red α L₁ L₃ ∧ red α L₂ L₃ := sorry\n</pre></div>",
        "id": 125188017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523954319
    },
    {
        "content": "<p>You could prove (easily by induction, I imagine) that for every function from alpha to Z/2Z (the additive group) the induced map from list (alpha x bool) to Z/2Z sending (x,b) to x and sending ++ to + has the property that two things related to each other go to the same place, and deduce it from that.</p>",
        "id": 125188022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523954327
    },
    {
        "content": "<p>seeing the word \"church rosser\" excites me</p>",
        "id": 125188035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523954368
    },
    {
        "content": "<p>but x is in alpha, not Z/2Z</p>",
        "id": 125188036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523954369
    },
    {
        "content": "<p>right</p>",
        "id": 125188038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523954378
    },
    {
        "content": "<p>so if x wasn't y you just write down a function sending x to 1 and y to 0</p>",
        "id": 125188041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523954389
    },
    {
        "content": "<p>so how is that a map from list (alpha x bool) to Z/2Z ?</p>",
        "id": 125188042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523954398
    },
    {
        "content": "<p>that's a map from alpha to Z/2Z</p>",
        "id": 125188083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523954406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> \"if x wasn't y\"</p>",
        "id": 125188086,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523954409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how would I prove symm?</p>",
        "id": 125188099,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523954476
    },
    {
        "content": "<p>To finish the proof given <code>church_rosser</code>, note that <code>red A L1 L2</code> implies <code>length L1 &gt;= length L2</code>, and they are the same length mod 2 so if one is a singleton so is the other</p>",
        "id": 125188100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523954489
    },
    {
        "content": "<p>I'm telling you how a mathematician would answer the original question</p>",
        "id": 125188101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523954496
    },
    {
        "content": "<p>symm is trivial, since the target property is symmetric</p>",
        "id": 125188102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523954505
    },
    {
        "content": "<p>the hard one is trans</p>",
        "id": 125188142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523954529
    },
    {
        "content": "<p>I don't get what you mean</p>",
        "id": 125188143,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523954544
    },
    {
        "content": "<p><code>bnot</code> is clearly not symmetric</p>",
        "id": 125188144,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523954548
    },
    {
        "content": "<p>I'm a bit confused about why a proof of what Mario calls Church Rosser can't just be \"let L3 be L2\"</p>",
        "id": 125188146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523954570
    },
    {
        "content": "<p>note that <code>rel</code> becomes <code>red</code> in the result</p>",
        "id": 125188149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523954585
    },
    {
        "content": "<p>oh wait what</p>",
        "id": 125188153,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523954597
    },
    {
        "content": "<p><code>red</code> has no symmetry rule</p>",
        "id": 125188154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523954604
    },
    {
        "content": "<p>I thought you were telling me to rewrite rel to red lol</p>",
        "id": 125188155,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523954607
    },
    {
        "content": "<p>oh, I didn't spot rel wasn't red</p>",
        "id": 125188157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523954616
    },
    {
        "content": "<p>high five</p>",
        "id": 125188158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523954622
    },
    {
        "content": "<p>You will need this lemma for the trans case:</p>\n<div class=\"codehilite\"><pre><span></span>theorem church_rosser2 : ∀ L₁ L₂ L₃,\n  red α L₁ L₂ → red α L₁ L₃ → ∃ L₄, red α L₂ L₄ ∧ red α L₃ L₄ := sorry\n</pre></div>\n\n\n<p>You can prove this by induction on one of the <code>red</code> assumptions</p>",
        "id": 125188265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523954788
    },
    {
        "content": "<p>which one?</p>",
        "id": 125188437,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523955152
    },
    {
        "content": "<p>it doesn't matter by symmetry</p>",
        "id": 125188441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523955164
    },
    {
        "content": "<p>but which one would you expand?</p>",
        "id": 125188443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523955176
    },
    {
        "content": "<p>?</p>",
        "id": 125188445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523955179
    },
    {
        "content": "<p>never mind</p>",
        "id": 125188452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523955189
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">L₂</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span><span class=\"o\">,</span>\n<span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span><span class=\"o\">,</span>\n<span class=\"n\">ih1</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L2</span> <span class=\"n\">L₄</span><span class=\"o\">),</span>\n<span class=\"n\">ih2</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L2</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L3</span> <span class=\"n\">L₄</span><span class=\"o\">),</span>\n<span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L₂</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L3</span> <span class=\"n\">L₄</span>\n</pre></div>",
        "id": 125188612,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523955510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 125188613,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523955511
    },
    {
        "content": "<p>that's where <code>church_rosser2</code> comes in (also don't forget to generalize L₂)</p>",
        "id": 125188681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523955629
    },
    {
        "content": "<p>that's church_rosser2</p>",
        "id": 125188683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523955637
    },
    {
        "content": "<p>Actually on second thought I think you want to separate the transitivity part from the one-step reduction. That leads to the following proof skeleton:</p>\n<div class=\"codehilite\"><pre><span></span>inductive rel : list (α × bool) → list (α × bool) → Prop\n| refl {L} : rel L L\n| symm {L₁ L₂} : rel L₁ L₂ → rel L₂ L₁\n| trans {L₁ L₂ L₃} : rel L₁ L₂ → rel L₂ L₃ → rel L₁ L₃\n| append {L₁ L₂ L₃ L₄} : rel L₁ L₃ → rel L₂ L₄ → rel (L₁ ++ L₂) (L₃ ++ L₄)\n| bnot {x b} : rel [(x, b), (x, bnot b)] []\n\ninductive trans_gen {α} (R : α → α → Prop) (x : α) : α → Prop\n| refl : trans_gen x\n| trans {y z} : R y z → trans_gen y → trans_gen z\n\ninductive red : list (α × bool) → list (α × bool) → Prop\n| cons {L₁ L₂} (a) : red L₁ L₂ → red (a :: L₁) (a :: L₂)\n| bnot {x b L} : red ((x, b) :: (x, bnot b) :: L) L\n\ntheorem church_rosser_1 : ∀ L₁ L₂ L₃,\n  red α L₁ L₂ → red α L₁ L₃ → ∃ L₄, red α L₂ L₄ ∧ red α L₃ L₄ := sorry\n\ntheorem church_rosser_t1 : ∀ L₁ L₂ L₃,\n  red α L₁ L₂ → trans_gen (red α) L₁ L₃ → ∃ L₄, trans_gen (red α) L₂ L₄ ∧ red α L₃ L₄ := sorry\n\ntheorem church_rosser_t : ∀ L₁ L₂ L₃,\n  trans_gen (red α) L₁ L₂ → trans_gen (red α) L₁ L₃ → ∃ L₄, trans_gen (red α) L₂ L₄ ∧ trans_gen (red α) L₃ L₄ := sorry\n\ntheorem church_rosser : ∀ L₁ L₂, rel α L₁ L₂ →\n  ∃ L₃, trans_gen (red α) L₁ L₃ ∧ trans_gen (red α) L₂ L₃ := sorry\n</pre></div>\n\n\n<p>This is important for the core of the proof, knowing that the one-step diamond property <code>church_rosser_1</code> holds is what allows you to do induction to get to <code>church_rosser_t</code></p>",
        "id": 125188805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523955928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm stuck on church_rosser_1</p>",
        "id": 125189880,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523957921
    },
    {
        "content": "<p>You need to do induction on both arguments for that one</p>",
        "id": 125189895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957969
    },
    {
        "content": "<p>even so</p>",
        "id": 125189899,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523957984
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">cons</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n<span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span><span class=\"o\">,</span>\n<span class=\"n\">ih1</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span>\n    <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L2</span> <span class=\"n\">L₄</span><span class=\"o\">),</span>\n<span class=\"n\">L₂</span> <span class=\"n\">L3</span> <span class=\"n\">L4</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n<span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L3</span> <span class=\"n\">L4</span><span class=\"o\">,</span>\n<span class=\"n\">ih2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L4</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">::</span> <span class=\"n\">L2</span><span class=\"o\">)</span> <span class=\"n\">L₄</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x2</span> <span class=\"bp\">::</span> <span class=\"n\">L4</span><span class=\"o\">)</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">::</span> <span class=\"n\">L2</span><span class=\"o\">)</span> <span class=\"n\">L₄</span>\n</pre></div>",
        "id": 125189902,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523957997
    },
    {
        "content": "<p>apply ih1?</p>",
        "id": 125189947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523958028
    },
    {
        "content": "<p>and then destruct the exists's</p>",
        "id": 125189953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523958056
    },
    {
        "content": "<p>but I need the same list to clear the goal</p>",
        "id": 125189962,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523958069
    },
    {
        "content": "<p>but x1 and x2 are different</p>",
        "id": 125189966,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523958083
    },
    {
        "content": "<p>I'm just suggesting to apply <code>ih1</code> to <code>H3</code>, and then open up the assumptions <code>ih1</code> and <code>ih2</code></p>",
        "id": 125189992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523958123
    },
    {
        "content": "<p>once you have done that you do inversion on <code>red α (x1 :: L2) L₄</code> and there are a few different cases</p>",
        "id": 125190021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523958191
    },
    {
        "content": "<p>this is the tricky part, since you have to show that the rewriting is confluent meaning different contractions result in the same thing</p>",
        "id": 125190027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523958242
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n<span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span><span class=\"o\">,</span>\n<span class=\"n\">L₂</span> <span class=\"n\">L3</span> <span class=\"n\">L4</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n<span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L3</span> <span class=\"n\">L4</span><span class=\"o\">,</span>\n<span class=\"n\">ih2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L4</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">::</span> <span class=\"n\">L2</span><span class=\"o\">)</span> <span class=\"n\">L₄</span><span class=\"o\">,</span>\n<span class=\"n\">ih1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L2</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L2</span> <span class=\"n\">L₄</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x2</span> <span class=\"bp\">::</span> <span class=\"n\">L4</span><span class=\"o\">)</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">::</span> <span class=\"n\">L2</span><span class=\"o\">)</span> <span class=\"n\">L₄</span>\n</pre></div>",
        "id": 125190128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523958447
    },
    {
        "content": "<p>I don't think this is possible</p>",
        "id": 125190129,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523958451
    },
    {
        "content": "<p>It is, do cases on <code>ih1</code> and <code>ih2</code> now</p>",
        "id": 125190132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523958480
    },
    {
        "content": "<p>but I know nothing about <code>x2</code></p>",
        "id": 125190176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523958496
    },
    {
        "content": "<p>hm, you seem to have forgotten something</p>",
        "id": 125190257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523958644
    },
    {
        "content": "<p>I think you need to generalize one of the parameters before the secondary induction, or you will lose the relation with x2</p>",
        "id": 125190266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523958699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> forgive me, but which parameter?</p>",
        "id": 125190843,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523959821
    },
    {
        "content": "<p>the one that has <code>x2</code> in it</p>",
        "id": 125190849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523959856
    },
    {
        "content": "<p>this is the state before the second induction</p>",
        "id": 125190857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523959877
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n<span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span><span class=\"o\">,</span>\n<span class=\"n\">ih1</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span>\n    <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L1</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L2</span> <span class=\"n\">L₄</span><span class=\"o\">),</span>\n<span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">::</span> <span class=\"n\">L1</span><span class=\"o\">)</span> <span class=\"n\">L₂</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">::</span> <span class=\"n\">L2</span><span class=\"o\">)</span> <span class=\"n\">L₄</span>\n</pre></div>",
        "id": 125190858,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523959879
    },
    {
        "content": "<p>you want to get an equality constraint in the context so you can do injection on it</p>",
        "id": 125190859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523959883
    },
    {
        "content": "<p><code>generalize h : x1 :: L1 = xL</code></p>",
        "id": 125190863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523959901
    },
    {
        "content": "<p>and then <code>generalizing</code> who?</p>",
        "id": 125190906,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523959952
    },
    {
        "content": "<p>I don't think you need any generalizing here, but you know what to change if the IH isn't strong enough</p>",
        "id": 125190959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523960078
    },
    {
        "content": "<p>actually you might not even need induction here; see if <code>cases H1</code> works</p>",
        "id": 125190968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523960146
    },
    {
        "content": "<p>My way would be so much easier ;-)</p>",
        "id": 125191726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523961712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> except it doesn't even work</p>",
        "id": 125195531,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523969353
    },
    {
        "content": "<p>Oh rotten luck :-)</p>",
        "id": 125195584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523969431
    },
    {
        "content": "<p>It works in maths :-)</p>",
        "id": 125195585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523969446
    },
    {
        "content": "<p>first three properties are that = is an equiv relation, fourth is that the map is a group hom, fifth that Z/2 has exponent 2, and bob's your uncle</p>",
        "id": 125195606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523969503
    },
    {
        "content": "<p>oh wait, I misunderstood</p>",
        "id": 125195660,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523969535
    },
    {
        "content": "<p>what's your method?</p>",
        "id": 125195661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523969537
    },
    {
        "content": "<p>you're using finsupp aren't you</p>",
        "id": 125195696,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523969642
    },
    {
        "content": "<p>that's noncomputable</p>",
        "id": 125195733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523969644
    },
    {
        "content": "<p>if you form (Z/2Z)^S as a group, your set-theoretic function will be non-computable</p>",
        "id": 125195843,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523969869
    },
    {
        "content": "<p>since a couple of weeks finsupp is computable</p>",
        "id": 125195924,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523969998
    },
    {
        "content": "<p>right, but this instance is still not</p>",
        "id": 125195973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523970011
    },
    {
        "content": "<p>in particular, <code>single</code> still needs decidable equality</p>",
        "id": 125195992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523970091
    },
    {
        "content": "<p>I said it works in maths ;-)</p>",
        "id": 125196116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523970347
    },
    {
        "content": "<p>well, then you need to use <code>classical.prop_decidable</code>.</p>",
        "id": 125196117,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523970355
    },
    {
        "content": "<p>I thought you were talking about the adjoint functor theorem when I said it doesn't even work</p>",
        "id": 125196156,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523970366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> oh I forgot, we aren't on the same side</p>",
        "id": 125196159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523970374
    },
    {
        "content": "<p>ok</p>",
        "id": 125196231,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523970520
    },
    {
        "content": "<p>I think the main reason why this is hard is that reduction isn't straightforward</p>",
        "id": 125197470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523972857
    },
    {
        "content": "<p>if your list is [a,b,c,d]</p>",
        "id": 125197471,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523972862
    },
    {
        "content": "<p>you can eliminate [b,c] or you can eliminate [c,d]</p>",
        "id": 125197476,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523972879
    },
    {
        "content": "<p>then somehow you need to prove that [a,d] = [a,b]</p>",
        "id": 125197517,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523972892
    },
    {
        "content": "<p>on the outside we know that to be true intuitively, but that doesn't mean this translates well on the inside</p>",
        "id": 125197521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523972921
    },
    {
        "content": "<p><a href=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9\">https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9</a></p>",
        "id": 125197599,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> oh and why don't you just put this onto mathlib lol</p>",
        "id": 125197603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973111
    },
    {
        "content": "<p>Yours is slightly more general. I thought you want to fix your pull request and still try to get it into mathlib.</p>",
        "id": 125197789,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523973383
    },
    {
        "content": "<p>actually I've written another free_group today, before this thread even started</p>",
        "id": 125197801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973426
    },
    {
        "content": "<p>But as it looks it will take a little bit longer, so I can add my stuff first.</p>",
        "id": 125197803,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523973436
    },
    {
        "content": "<p>(I live in GMT+8, so \"today\" started like 10 hours ago)</p>",
        "id": 125197804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973436
    },
    {
        "content": "<p>and all this fuss is about I can't prove that the set-theoretic function is injective</p>",
        "id": 125197809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973459
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/cda1c6c6bc781fe669692b8d725f43d0\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/cda1c6c6bc781fe669692b8d725f43d0\">https://gist.github.com/kckennylau/cda1c6c6bc781fe669692b8d725f43d0</a></p>",
        "id": 125197865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973528
    },
    {
        "content": "<p>this is what the working part of my file looks like</p>",
        "id": 125197868,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973535
    },
    {
        "content": "<p>I think your file is slightly more general lol</p>",
        "id": 125197873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973544
    },
    {
        "content": "<p>anyway, [a,d] and [a,b] aren't definitionally equal</p>",
        "id": 125197947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973640
    },
    {
        "content": "<p>it just so happens that d=b</p>",
        "id": 125197950,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973645
    },
    {
        "content": "<p>but how am I supposed to know that</p>",
        "id": 125197952,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973652
    },
    {
        "content": "<p>I doubt church-rosser can be proved by me</p>",
        "id": 125197963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973682
    },
    {
        "content": "<p>So you don't want to follow the approach from stack overvlow anymore?</p>",
        "id": 125197970,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523973714
    },
    {
        "content": "<p>nope</p>",
        "id": 125198007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973723
    },
    {
        "content": "<p>I don't see any point</p>",
        "id": 125198018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973738
    },
    {
        "content": "<p>I was overwhelmed by fear</p>",
        "id": 125198021,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973743
    },
    {
        "content": "<p>that I couldn't ever possibly define free group in one step</p>",
        "id": 125198027,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973753
    },
    {
        "content": "<p>don't worry, while theorem proving is a steep learning curve, it is a continuous curve after all</p>",
        "id": 125198125,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523973894
    },
    {
        "content": "<p>you won't believe me if I told you that I prove limit commutes with multiplication in three steps</p>",
        "id": 125198145,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973910
    },
    {
        "content": "<p>divide and conquer</p>",
        "id": 125198146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523973920
    },
    {
        "content": "<p>if <code>[(x,tt)]</code> is related to <code>[(y,tt)]</code>, part of the reason why it is so hard to prove <code>x=y</code> is that the reason they are related can be complicated</p>",
        "id": 125199051,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975410
    },
    {
        "content": "<p>since one can have <code>[(x,tt)] ~ [(x,tt), (x,ff), (x,tt)] ~ [(x,tt)]</code></p>",
        "id": 125199070,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975443
    },
    {
        "content": "<p>where the two <code>~</code>s deal with different pairs</p>",
        "id": 125199077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975461
    },
    {
        "content": "<p>so this is hardly well-founded</p>",
        "id": 125199099,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> what do you think?</p>",
        "id": 125199108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975513
    },
    {
        "content": "<p>it is not well-founded. but the non-symmetric reduction is well founded. as Mario mentioned the hard part is to proof the existence of diamonds</p>",
        "id": 125199232,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523975654
    },
    {
        "content": "<p>would you have insights for the diamond?</p>",
        "id": 125199240,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> maybe give me more time to prove the diamonds?</p>",
        "id": 125199339,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975873
    },
    {
        "content": "<p>I'll see if I can incorporate other theorems you proved</p>",
        "id": 125199382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975889
    },
    {
        "content": "<p>i.e. free_group of empty is unit</p>",
        "id": 125199384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975895
    },
    {
        "content": "<p>free_group of unit is int</p>",
        "id": 125199385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523975900
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"n\">bnot</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125199467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976045
    },
    {
        "content": "<p>(I know this is essentially what you did, but I hadn't looked at your file when I came up with this, somehow)</p>",
        "id": 125199478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976071
    },
    {
        "content": "<p>it's hard proving diamond even for one step bnot</p>",
        "id": 125199483,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976085
    },
    {
        "content": "<p>i.e. if L1 bnot L2, L1 bnot L3, then there is L4 such that L2 bnot L4 and L3 bnot L4</p>",
        "id": 125199492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> what do you think?</p>",
        "id": 125199555,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976171
    },
    {
        "content": "<p>I didn't look into this, yet. I will see if I find some time to understand it.</p>",
        "id": 125199581,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523976236
    },
    {
        "content": "<p>I mean, don't put your freegroup into mathlib yet</p>",
        "id": 125199632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976260
    },
    {
        "content": "<p>okay. but mathlib seams to be broken anyway currently (EDIT: sorry, mathlib is not broken)</p>",
        "id": 125199694,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523976373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> which one would you use? <code>n+n</code>, <code>n*2</code>, <code>2*n</code></p>",
        "id": 125199706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976433
    },
    {
        "content": "<p>for usability</p>",
        "id": 125199708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976435
    },
    {
        "content": "<p>I think<code> 2*n</code> is maximum usability</p>",
        "id": 125199711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976450
    },
    {
        "content": "<p>yes, looks good</p>",
        "id": 125199714,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523976471
    },
    {
        "content": "<p>I just answered my own question</p>",
        "id": 125199742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523976482
    },
    {
        "content": "<p>I changed anew the definition:</p>",
        "id": 125204798,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523984613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans_bnot</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"n\">L₃</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"n\">L₃</span>\n</pre></div>",
        "id": 125204801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523984615
    },
    {
        "content": "<p>hopefully this will be more usable</p>",
        "id": 125204804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523984623
    },
    {
        "content": "<p>I still can't prove church-rosser though</p>",
        "id": 125204805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523984628
    },
    {
        "content": "<p>I suspect I shouldn't do church-rosser in one step</p>",
        "id": 125204811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523984634
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/SwM98KnlFnJesSDVnNnSYJK1/church-rosser-1.png\" target=\"_blank\" title=\"church-rosser-1.png\">church-rosser-1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SwM98KnlFnJesSDVnNnSYJK1/church-rosser-1.png\" target=\"_blank\" title=\"church-rosser-1.png\"><img src=\"/user_uploads/3121/SwM98KnlFnJesSDVnNnSYJK1/church-rosser-1.png\"></a></div>",
        "id": 125205016,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523984984
    },
    {
        "content": "<p>and induction on the rightmost solid arrow amounts to doing this:</p>",
        "id": 125205188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985236
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/HY4gl0SQ4kObK_7zXbz_B1e3/church-rosser-1.png\" target=\"_blank\" title=\"church-rosser-1.png\">church-rosser-1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HY4gl0SQ4kObK_7zXbz_B1e3/church-rosser-1.png\" target=\"_blank\" title=\"church-rosser-1.png\"><img src=\"/user_uploads/3121/HY4gl0SQ4kObK_7zXbz_B1e3/church-rosser-1.png\"></a></div>",
        "id": 125205234,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985273
    },
    {
        "content": "<p>where <code>wordIH</code> is the word given by induction hypothesis</p>",
        "id": 125205244,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985295
    },
    {
        "content": "<p>my new definition makes sure that it is decomposed into steps</p>",
        "id": 125205252,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985307
    },
    {
        "content": "<p>whereas the old definition splits the arrow randomly in half</p>",
        "id": 125205254,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985318
    },
    {
        "content": "<p>my new definition guarantees that it is split at the tail</p>",
        "id": 125205260,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985325
    },
    {
        "content": "<p>oh no, my new definition splits it at the head</p>",
        "id": 125205266,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985340
    },
    {
        "content": "<p>brb</p>",
        "id": 125205268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985341
    },
    {
        "content": "<p>I mean, even if I corrected the definition, I still don't know how to build <code>word4</code> from <code>wordIH</code></p>",
        "id": 125205402,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> any insight?</p>",
        "id": 125205405,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985600
    },
    {
        "content": "<p>I told you how I'd do it ;-)</p>",
        "id": 125205454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523985614
    },
    {
        "content": "<p>I've not thought about the constructive approach</p>",
        "id": 125205456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523985619
    },
    {
        "content": "<p>I've not been following the conversation here.</p>",
        "id": 125205458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523985632
    },
    {
        "content": "<p>My daughter is sick so I've not had much time today, and what little time I did have I spent thinking about Spec(R) being compact</p>",
        "id": 125205466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523985658
    },
    {
        "content": "<p>you just need to look at my latest picture</p>",
        "id": 125205520,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985726
    },
    {
        "content": "<p>\"step\" means a one-step reduction, i.e. reducing <code>w1++[a,a^-1]++w2</code> to <code>w1++w2</code></p>",
        "id": 125205521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985742
    },
    {
        "content": "<p><code>wordIH</code> is given, and I would like to construct <code>word4</code></p>",
        "id": 125205528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985759
    },
    {
        "content": "<p>I might have to destruct the bottom right solid arrow</p>",
        "id": 125205531,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm astonished by the fact that I'm drawing a diagram to represent induction and that I'm drawing a diagram (the same diagram) to deal with free groups</p>",
        "id": 125205601,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985890
    },
    {
        "content": "<p>I've never looked into free group this deeply</p>",
        "id": 125205605,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985901
    },
    {
        "content": "<p>I'll destruct the arrow I mentioned and see what comes up</p>",
        "id": 125205629,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523985953
    },
    {
        "content": "<p>The construction of many step CR from one step CR is like building a checkerboard of diamonds</p>",
        "id": 125206778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523987733
    },
    {
        "content": "<p>oh and I've changed to the \"correct\" definition now</p>",
        "id": 125206830,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523987774
    },
    {
        "content": "<p>did you look at my picture?</p>",
        "id": 125206833,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523987780
    },
    {
        "content": "<p>You do induction on one of the <code>trans_rel</code> arguments to reduce to a line of diamonds, and then the other one to get one step out, one step back together</p>",
        "id": 125206835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523987782
    },
    {
        "content": "<p>You want to use the IH to move the base point of the bottom diamond to wordIH</p>",
        "id": 125206861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523987839
    },
    {
        "content": "<p>base point?</p>",
        "id": 125206878,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523987875
    },
    {
        "content": "<p>You have word1''' -&gt; word3 and word1''' -&gt; wordIH, so wordIH -&gt; word4 &lt;- word3 for some word4</p>",
        "id": 125206917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523987883
    },
    {
        "content": "<p>right, that's what I intend to do also</p>",
        "id": 125206925,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523987896
    },
    {
        "content": "<p>I proved transitivity independently</p>",
        "id": 125206933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523987904
    },
    {
        "content": "<p>so I only need to focus on that diamond</p>",
        "id": 125206942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523987918
    },
    {
        "content": "<p>and destruct the bottom right solid arrow</p>",
        "id": 125206947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523987925
    },
    {
        "content": "<p>right?</p>",
        "id": 125206953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523987936
    },
    {
        "content": "<p>I'm not sure I follod</p>",
        "id": 125206968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523987953
    },
    {
        "content": "<p>Do you still have the three theorems <code>church_rosser_(1,t1,t)</code> or something similar?</p>",
        "id": 125206978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523987979
    },
    {
        "content": "<p>oh I am not using your definition now...</p>",
        "id": 125207035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523988010
    },
    {
        "content": "<p>but do you have the thing with transitive closure of one step reduction</p>",
        "id": 125207049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523988028
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans_bnot</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"o\">(</span><span class=\"n\">L₂</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"o\">(</span><span class=\"n\">L₂</span> <span class=\"bp\">++</span> <span class=\"n\">L₃</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H12</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H23</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H23</span> <span class=\"k\">with</span> <span class=\"n\">L1</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"n\">H</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">L₁</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans_bnot</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans_bnot</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">H12</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125207067,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523988062
    },
    {
        "content": "<p>this is what i'm using</p>",
        "id": 125207071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523988064
    },
    {
        "content": "<p>and unfinished church rosser:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">church_rosser</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H12</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H13</span><span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">L₄</span><span class=\"o\">,</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">α</span> <span class=\"n\">L₃</span> <span class=\"n\">L₄</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H12</span> <span class=\"k\">with</span> <span class=\"n\">L1</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"n\">x1</span> <span class=\"n\">b1</span> <span class=\"n\">H1</span> <span class=\"n\">ih1</span> <span class=\"n\">generalizing</span> <span class=\"n\">L₃</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">L₃</span><span class=\"o\">,</span> <span class=\"n\">H13</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans_bnot</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">ih1</span> <span class=\"n\">H13</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ih1</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">L₄</span><span class=\"o\">,</span> <span class=\"n\">H24</span><span class=\"o\">,</span> <span class=\"n\">H34</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">H24</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">HL23</span> <span class=\"o\">:</span> <span class=\"n\">L2</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L3</span> <span class=\"bp\">=</span> <span class=\"n\">L23</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H24</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">H24</span> <span class=\"k\">with</span> <span class=\"n\">L4</span> <span class=\"n\">L4</span> <span class=\"n\">L5</span> <span class=\"n\">L6</span> <span class=\"n\">x2</span> <span class=\"n\">b2</span> <span class=\"n\">H2</span> <span class=\"n\">ih2</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">HL23</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans_bnot</span> <span class=\"n\">H34</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans_bnot</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">HL23</span><span class=\"o\">,</span>\n      <span class=\"n\">admit</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125207086,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523988090
    },
    {
        "content": "<p>I think that trying to do it all at once will be harder, because then you have to commute a whole sequence of reductions past another</p>",
        "id": 125207167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523988189
    },
    {
        "content": "<p>With one step reduction, the core of the proof is this: Suppose L -&gt; L1 and L -&gt; L2. Then L = A1 ++ [(x,b), (x, !b)] ++ A2 = B1 ++ [(y,c),(y,!c)] ++ B2 and L1 = A1 ++ A2, L2 = B1 ++ B2. There are three cases depending on whether |A1| = |B1|, |A1| = |B1| +- 1, or | |A1| - |B1| | &gt;= 2, but in each case the results are either equal or can be put together with a single step on each side.</p>",
        "id": 125207318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523988409
    },
    {
        "content": "<p>that's the hardest part of the theorem</p>",
        "id": 125207342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523988449
    },
    {
        "content": "<p>So I guess you want <code>red</code> to be reflexive but not transitive, and then take its transitive closure to put the diamonds together</p>",
        "id": 125207348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523988469
    },
    {
        "content": "<p>I don't think I need to change my definition</p>",
        "id": 125207393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523988497
    },
    {
        "content": "<p>One word of warning: the confluence property B &lt;- A -&gt; C implies \\ex D s.t. B -&gt;* D &lt;-* C does <em>not</em> imply church rosser in general. It does if you have strong normalization, but that's a harder proof. That's why I'm wary of building transitivity into the -&gt; relation</p>",
        "id": 125207524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523988660
    },
    {
        "content": "<p>isn't that church rosser?</p>",
        "id": 125207545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523988685
    },
    {
        "content": "<p>Note the location of the stars</p>",
        "id": 125207550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523988700
    },
    {
        "content": "<p>what are those?</p>",
        "id": 125207554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523988711
    },
    {
        "content": "<p>one step out, many steps back in</p>",
        "id": 125207557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523988713
    },
    {
        "content": "<p>that's notation for transitive closure</p>",
        "id": 125207595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523988723
    },
    {
        "content": "<p>hmm</p>",
        "id": 125207598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523988729
    },
    {
        "content": "<blockquote>\n<p>With one step reduction, the core of the proof is this: Suppose L -&gt; L1 and L -&gt; L2. Then L = A1 ++ [(x,b), (x, !b)] ++ A2 = B1 ++ [(y,c),(y,!c)] ++ B2 and L1 = A1 ++ A2, L2 = B1 ++ B2. There are three cases depending on whether |A1| = |B1|, |A1| = |B1| +- 1, or | |A1| - |B1| | &gt;= 2, but in each case the results are either equal or can be put together with a single step on each side.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what is the best way to prove that there are three cases?</p>",
        "id": 125224401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524010407
    },
    {
        "content": "<p><code>wlog</code> length A1 &lt;= length B1</p>",
        "id": 125224462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524010484
    },
    {
        "content": "<p>aha, i never tried wlog before</p>",
        "id": 125224549,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524010673
    },
    {
        "content": "<p>me neither, but this looks like a good use case</p>",
        "id": 125224592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524010694
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">partition</span> <span class=\"o\">{</span><span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"n\">L4</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x1</span> <span class=\"n\">b1</span> <span class=\"n\">x2</span> <span class=\"n\">b2</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">L1</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L2</span> <span class=\"bp\">=</span> <span class=\"n\">L3</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L4</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"bp\">=</span> <span class=\"n\">L3</span> <span class=\"bp\">∧</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">∧</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">b2</span> <span class=\"bp\">∧</span> <span class=\"n\">L2</span> <span class=\"bp\">=</span> <span class=\"n\">L4</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"bp\">=</span> <span class=\"n\">L3</span> <span class=\"bp\">++</span> <span class=\"o\">[(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">)]</span> <span class=\"bp\">∧</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">∧</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">b2</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L2</span> <span class=\"bp\">=</span> <span class=\"n\">L4</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"bp\">++</span> <span class=\"o\">[(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)]</span> <span class=\"bp\">=</span> <span class=\"n\">L3</span> <span class=\"bp\">∧</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">∧</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">b2</span> <span class=\"bp\">∧</span> <span class=\"n\">L2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L4</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">L5</span> <span class=\"n\">L6</span><span class=\"o\">,</span> <span class=\"n\">L1</span> <span class=\"bp\">=</span> <span class=\"n\">L3</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L5</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L2</span> <span class=\"bp\">=</span> <span class=\"n\">L6</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">L5</span> <span class=\"n\">L6</span><span class=\"o\">,</span> <span class=\"n\">L1</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L5</span> <span class=\"bp\">=</span> <span class=\"n\">L3</span> <span class=\"bp\">∧</span> <span class=\"n\">L2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L6</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125224731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011015
    },
    {
        "content": "<p>how is this?</p>",
        "id": 125224732,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011017
    },
    {
        "content": "<p>I don't think <code>length</code> is very usable</p>",
        "id": 125224734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011037
    },
    {
        "content": "<p>it's obvious to mathematicians, but Lean doesn't really know how to count well</p>",
        "id": 125224774,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011049
    },
    {
        "content": "<p>it's just translating one inductive type into another</p>",
        "id": 125224776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011054
    },
    {
        "content": "<p>You can simplify this by assuming <code>length L1 &lt;= length L3</code>, and then two of the cases can be proven impossible (it's not hard to show that if L1 = L3 ++ [(x2, b2)] then length L3 &lt; length L1, and that's all you need)</p>",
        "id": 125224834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524011197
    },
    {
        "content": "<p>are you saying I don't need induction?</p>",
        "id": 125224847,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011254
    },
    {
        "content": "<p>induction on what? To prove partition?</p>",
        "id": 125224850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524011271
    },
    {
        "content": "<p>right</p>",
        "id": 125224851,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011277
    },
    {
        "content": "<p>on the lists</p>",
        "id": 125224856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011282
    },
    {
        "content": "<p>You can use <code>append_inj</code> to use length information to get the decomposition</p>",
        "id": 125224895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524011328
    },
    {
        "content": "<p>But you can also prove it by induction on one of the lists (generalizing everything else)</p>",
        "id": 125224905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524011383
    },
    {
        "content": "<p>I think I would need more lemmas than <code>append_inj</code> if I want to avoid induction completely</p>",
        "id": 125224956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011440
    },
    {
        "content": "<p><code>append_inj</code> doesn't seem to help in the case where <code>|A.length - B.length| &gt;= 2</code></p>",
        "id": 125224961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011458
    },
    {
        "content": "<p>hm, you could use <code>take_drop</code> but I agree it is probably messier than induction on the list</p>",
        "id": 125225016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524011531
    },
    {
        "content": "<p>I think a useful lemma if I want to avoid length and induction completely is <code>A++B=C++D -&gt; (exists F, A=C++F) or (exists F, A++F=C)</code></p>",
        "id": 125225031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011599
    },
    {
        "content": "<p>I think you can get that by using <code>prefix</code> appropriately</p>",
        "id": 125225036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524011634
    },
    {
        "content": "<p>I have never heard of prefix before. I've just learnt something new lol</p>",
        "id": 125225079,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not seeing anything useful from the prefix lemmas</p>",
        "id": 125225146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011813
    },
    {
        "content": "<p>Here's what I'm thinking:</p>\n<div class=\"codehilite\"><pre><span></span>theorem prefix_of_prefix_length_le {l₁ l₂ l₃ : list α} : l₁ &lt;+: l₃ → l₂ &lt;+: l₃ → length l₁ ≤ length l₂ → l₁ &lt;+: l₂ :=\nsorry\n</pre></div>",
        "id": 125225157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524011845
    },
    {
        "content": "<p>let's just focus on my lemma</p>",
        "id": 125225161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011864
    },
    {
        "content": "<p>and from that you get the version with the or</p>",
        "id": 125225163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524011874
    },
    {
        "content": "<p>aha</p>",
        "id": 125225164,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011880
    },
    {
        "content": "<p>totality of prefix descends from totality of natural numbers</p>",
        "id": 125225204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011893
    },
    {
        "content": "<p>exactly</p>",
        "id": 125225207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524011899
    },
    {
        "content": "<p>that's a very convoluted way of doing stuff</p>",
        "id": 125225210,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011914
    },
    {
        "content": "<p>I would rather use induction to prove my lemma</p>",
        "id": 125225213,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524011933
    },
    {
        "content": "<p>disregarding this</p>",
        "id": 125225271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524012021
    },
    {
        "content": "<p>how would you prove your lemma</p>",
        "id": 125225274,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524012024
    },
    {
        "content": "<p>working on it</p>",
        "id": 125225622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524012807
    },
    {
        "content": "<p>me too</p>",
        "id": 125225623,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524012814
    },
    {
        "content": "<p>I think I can do that, thanks</p>",
        "id": 125225624,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524012822
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem prefix_of_prefix_length_le : ∀ {l₁ l₂ l₃ : list α},\n l₁ &lt;+: l₃ → l₂ &lt;+: l₃ → length l₁ ≤ length l₂ → l₁ &lt;+: l₂\n| []      l₂ l₃ h₁ h₂ _ := nil_prefix _\n| (a::l₁) (b::l₂) _ ⟨r₁, rfl⟩ ⟨r₂, e⟩ ll := begin\n  injection e with _ e&#39;, subst b,\n  rcases prefix_of_prefix_length_le ⟨_, rfl⟩ ⟨_, e&#39;⟩\n    (le_of_succ_le_succ ll) with ⟨r₃, rfl⟩,\n  exact ⟨r₃, rfl⟩\nend\n\ntheorem prefix_or_prefix_of_prefix {l₁ l₂ l₃ : list α}\n (h₁ : l₁ &lt;+: l₃) (h₂ : l₂ &lt;+: l₃) : l₁ &lt;+: l₂ ∨ l₂ &lt;+: l₁ :=\n(le_total (length l₁) (length l₂)).imp\n  (prefix_of_prefix_length_le h₁ h₂)\n  (prefix_of_prefix_length_le h₂ h₁)\n</pre></div>",
        "id": 125225729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013029
    },
    {
        "content": "<p>oh nice thanks</p>",
        "id": 125225731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013040
    },
    {
        "content": "<p>who is <code>nil_prefix</code>?</p>",
        "id": 125225737,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013066
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem nil_prefix (l : list α) : [] &lt;+: l := ⟨l, rfl⟩\n</pre></div>",
        "id": 125225740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013074
    },
    {
        "content": "<p>did you just make it up?</p>",
        "id": 125225742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013081
    },
    {
        "content": "<p>yes</p>",
        "id": 125225772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013083
    },
    {
        "content": "<p>thanks</p>",
        "id": 125225787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013104
    },
    {
        "content": "<p>does <code>A++B=A++C -&gt; B=C</code> have a name?</p>",
        "id": 125225936,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013411
    },
    {
        "content": "<p><code>append_right_cancel</code></p>",
        "id": 125226008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013514
    },
    {
        "content": "<p>oh, didn't think of cancel</p>",
        "id": 125226009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013523
    },
    {
        "content": "<p>oh, and do you know that the lists form a monoid?</p>",
        "id": 125226011,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013531
    },
    {
        "content": "<p>by \"you\" I of course mean \"Lean\"</p>",
        "id": 125226013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013540
    },
    {
        "content": "<p>No, although all the lemmas are there, because I don't think we want <code>*</code> to mean append on lists</p>",
        "id": 125226137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013776
    },
    {
        "content": "<p>I see</p>",
        "id": 125226138,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013786
    },
    {
        "content": "<p>That was one of the main motivations Leo had for introducing the whole \"notation free\" algebraic hierarchy like <code>is_associative</code></p>",
        "id": 125226191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013855
    },
    {
        "content": "<p>I'm not aware of what you're talking about</p>",
        "id": 125226198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013874
    },
    {
        "content": "<p>look at <code>is_associative</code> and friends</p>",
        "id": 125226205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013896
    },
    {
        "content": "<p>where is it used?</p>",
        "id": 125226208,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013920
    },
    {
        "content": "<p>that's probably what lean 4 algebraic hierarchy will look like</p>",
        "id": 125226250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013928
    },
    {
        "content": "<p>I'm not sold on it yet, and I don't think the tool support is there yet, so I'm sticking to \"old style\" structures like <code>monoid</code></p>",
        "id": 125226258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013971
    },
    {
        "content": "<p>oh</p>",
        "id": 125226264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524013985
    },
    {
        "content": "<p>but it gets used in some core lean stuff like <code>rb_map</code></p>",
        "id": 125226267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524013989
    },
    {
        "content": "<p>another thing I've never heard of :D</p>",
        "id": 125226269,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524014006
    },
    {
        "content": "<p>what's the fastest way to destruct <code>L5 ++ L6 = [(x1, bnot b1)]</code>?</p>",
        "id": 125226857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524015192
    },
    {
        "content": "<p>cases L5, lol</p>",
        "id": 125226907,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524015290
    },
    {
        "content": "<p>I proved church rosser!!</p>",
        "id": 125228253,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524018103
    },
    {
        "content": "<p>thanks for your help all along <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 125228296,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524018151
    },
    {
        "content": "<p>That theorem can of course also be used to show the existence and uniqueness of reduced words</p>",
        "id": 125228390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524018263
    },
    {
        "content": "<p>right, since I proved that red is decreasing in length</p>",
        "id": 125228394,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524018283
    },
    {
        "content": "<p>You need decidable equality for it to be constructive, but you can just remove matching pairs until you can't find any more, and that will be the unique representative of its equivalence class by church rosser</p>",
        "id": 125228481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524018400
    },
    {
        "content": "<p>Here's a fun trick showing that the converse also holds: assuming [(x,tt), (y,ff)] has a reduced word representative, if it has length zero then x=y, and if it has length 2 then x != y</p>",
        "id": 125228558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524018567
    },
    {
        "content": "<p>aha</p>",
        "id": 125228564,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524018598
    },
    {
        "content": "<p>nice trick</p>",
        "id": 125228567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524018601
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive red : list (α × bool) → list (α × bool) → Prop\n| refl {L} : red L L\n| trans_bnot {L₁ L₂ L₃ x b} : red L₁ (L₂ ++ (x, b) :: (x, bnot b) :: L₃) → red L₁ (L₂ ++ L₃)\n</pre></div>",
        "id": 125231206,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524023100
    },
    {
        "content": "<p>how do I use the equation compiler to destruct this?</p>",
        "id": 125231212,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524023106
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem T : ∀ L₁ L₂, red α L₁ L₂ → true\n| L _ (red.refl _) := trivial\n| _ _ (@red.trans_bnot _ L₁ L₂ L₃ x b IH) := trivial\n</pre></div>",
        "id": 125232619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524025857
    },
    {
        "content": "<p>oh, I get error because I didn't type <code>L</code>?</p>",
        "id": 125232627,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524025883
    },
    {
        "content": "<p>no, without the L you just get a placeholder name</p>",
        "id": 125232629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524025899
    },
    {
        "content": "<p>You can also use <code>(@red.refl _ L)</code> to name the parameters</p>",
        "id": 125232669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524025936
    },
    {
        "content": "<p>then why do I always get error lol</p>",
        "id": 125232671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524025951
    },
    {
        "content": "<p>oh and I can't use recursion because this is a Prop, right</p>",
        "id": 125232674,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524025971
    },
    {
        "content": "<p>You can use recursion</p>",
        "id": 125232675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524025978
    },
    {
        "content": "<p>but I would have to provide custom well-founded proof?</p>",
        "id": 125232681,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524025989
    },
    {
        "content": "<p>but you can't generate a data type</p>",
        "id": 125232682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524025991
    },
    {
        "content": "<p>maybe that's what you meant</p>",
        "id": 125232684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524026012
    },
    {
        "content": "<p>it doesn't work for wellfounded either because the inductive type has two constructors, so there are multiple ways to prove a <code>red</code> statement</p>",
        "id": 125232743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524026064
    },
    {
        "content": "<p><a href=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9\">https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9</a></p>",
        "id": 125232802,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026200
    },
    {
        "content": "<p>this is interesting</p>",
        "id": 125232806,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026217
    },
    {
        "content": "<p>\"map\" and \"prod\" together give the UMP</p>",
        "id": 125232811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026231
    },
    {
        "content": "<p>but I can also prove \"map\" and \"prod\" using UMP</p>",
        "id": 125232812,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what would you prefer? or should I prove all three?</p>",
        "id": 125232813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026245
    },
    {
        "content": "<p>I think you should state the UMP just for \"completeness\", but I expect <code>map</code> and <code>prod</code> and their lemmas are the more useful version</p>",
        "id": 125233054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524026651
    },
    {
        "content": "<p>not just for completeness</p>",
        "id": 125233057,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026662
    },
    {
        "content": "<p>I'll actually prove map and prod from UMP</p>",
        "id": 125233058,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026667
    },
    {
        "content": "<p>then I don't need any induction again</p>",
        "id": 125233061,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026670
    },
    {
        "content": "<p>The definitions of map and prod are constructive and done reasonably, I wouldn't want to make it more complicated</p>",
        "id": 125233064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524026697
    },
    {
        "content": "<p>everything in my file is constructive</p>",
        "id": 125233072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026716
    },
    {
        "content": "<p>but you're right, I shouldn't use UMP to define map</p>",
        "id": 125233089,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026736
    },
    {
        "content": "<p>I mean, you can compute with <code>map</code> there. Don't make the program slower</p>",
        "id": 125233094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524026747
    },
    {
        "content": "<p>oh</p>",
        "id": 125233097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524026754
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>instance is_group_hom.id [group α] : is_group_hom (@id α) :=\nλ _ _, rfl\n</pre></div>",
        "id": 125233344,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524027238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you add this to mathlib?</p>",
        "id": 125233383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524027246
    },
    {
        "content": "<p>K</p>",
        "id": 125233403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524027351
    },
    {
        "content": "<p>obrigad</p>",
        "id": 125233430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524027362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>prod</code> is really a specialization of the UMP though</p>",
        "id": 125235275,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031181
    },
    {
        "content": "<p>I mean, the definition would be identical</p>",
        "id": 125235287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031189
    },
    {
        "content": "<p>defining <code>prod</code> using the UMP won't make anything slower</p>",
        "id": 125235290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031197
    },
    {
        "content": "<p>what is your def of ump?</p>",
        "id": 125235342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031274
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_group</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">$</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_group</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">to_group</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"bp\">⟨</span><span class=\"n\">L₃</span><span class=\"o\">,</span> <span class=\"n\">H13</span><span class=\"o\">,</span> <span class=\"n\">H23</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">to_group</span> <span class=\"n\">H13</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">to_group</span> <span class=\"n\">H23</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>",
        "id": 125235346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031293
    },
    {
        "content": "<p>looks good</p>",
        "id": 125235388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031368
    },
    {
        "content": "<p>update:</p>",
        "id": 125235392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_group</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">$</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n</pre></div>",
        "id": 125235393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031380
    },
    {
        "content": "<p>I guess <code>prod</code> is this specialized to id?\\</p>",
        "id": 125235401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031413
    },
    {
        "content": "<p>correct</p>",
        "id": 125235403,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031419
    },
    {
        "content": "<p>ok, seems reasonable</p>",
        "id": 125235446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031453
    },
    {
        "content": "<p>orbigad</p>",
        "id": 125235447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031462
    },
    {
        "content": "<p>the spelling keeps getting weirder :)</p>",
        "id": 125235449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031490
    },
    {
        "content": "<p>sim</p>",
        "id": 125235450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031501
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">eq_to_group</span> <span class=\"o\">:</span> <span class=\"n\">prod</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">to_group</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">prod</span> <span class=\"err\">⟦</span><span class=\"n\">L</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</pre></div>",
        "id": 125235518,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031645
    },
    {
        "content": "<p>which one should I keep?</p>",
        "id": 125235519,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031648
    },
    {
        "content": "<p><code>prod.eq_to_group </code> can be the definition, the other one should still be refl</p>",
        "id": 125235583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031792
    },
    {
        "content": "<p>it is the definition, but I still want a simp lemma</p>",
        "id": 125235630,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031816
    },
    {
        "content": "<p>it shouldnt be a simp lemma though</p>",
        "id": 125235633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031823
    },
    {
        "content": "<p>prod.eq_to_group  that is</p>",
        "id": 125235634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031831
    },
    {
        "content": "<p>why not?</p>",
        "id": 125235638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031839
    },
    {
        "content": "<p>because it has its own lemmas</p>",
        "id": 125235654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031865
    },
    {
        "content": "<p><a href=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9#file-free_group-lean-L119\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9#file-free_group-lean-L119\">https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9#file-free_group-lean-L119</a></p>",
        "id": 125235661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031906
    },
    {
        "content": "<p>why isn't this an instance?</p>",
        "id": 125235662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524031909
    },
    {
        "content": "<p>it can be</p>",
        "id": 125235705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524031929
    },
    {
        "content": "<p>Yup, I wrote this before <code>is_group_hom</code> was a class.</p>",
        "id": 125235720,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524032023
    },
    {
        "content": "<p>I see</p>",
        "id": 125235724,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032031
    },
    {
        "content": "<p>anyway, <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I proved of.inj constructively :D</p>",
        "id": 125235766,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> oh, do you know that for any type <code>X</code>, <code>set X</code> is a group?</p>",
        "id": 125235773,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032107
    },
    {
        "content": "<p>you  mean with out assuming decidability of α?</p>",
        "id": 125235774,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524032117
    },
    {
        "content": "<p>right</p>",
        "id": 125235775,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032121
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">of</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">of</span><span class=\"bp\">.</span><span class=\"n\">inj</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">of</span><span class=\"bp\">.</span><span class=\"n\">inj</span>\n\n<span class=\"n\">def</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"err\">⟦</span><span class=\"o\">[(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)]</span><span class=\"err\">⟧</span>\n\n<span class=\"n\">of</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">of</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">of</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"n\">propext</span>\n</pre></div>",
        "id": 125235819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032173
    },
    {
        "content": "<p>as long as the proof isn't longer</p>",
        "id": 125235848,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524032243
    },
    {
        "content": "<p>aha</p>",
        "id": 125235859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032248
    },
    {
        "content": "<p>our different values are reflected in as short as two lines</p>",
        "id": 125235860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032262
    },
    {
        "content": "<p>the only lengthy part of my file is church rosser</p>",
        "id": 125235903,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032335
    },
    {
        "content": "<p>which your file doesn't even have</p>",
        "id": 125235905,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032339
    },
    {
        "content": "<p>a group? With what, symmetric difference and complement?</p>",
        "id": 125235912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032361
    },
    {
        "content": "<p>right</p>",
        "id": 125235913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032379
    },
    {
        "content": "<p>it even forms a ring with multiplication being intersection</p>",
        "id": 125235914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032399
    },
    {
        "content": "<p>that seems more like bool -&gt; X</p>",
        "id": 125235969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032414
    },
    {
        "content": "<p>X -&gt; bool</p>",
        "id": 125235970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032421
    },
    {
        "content": "<p>yeah that</p>",
        "id": 125235972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032428
    },
    {
        "content": "<p>it's the indexed ring product of Z/2Z</p>",
        "id": 125235980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032490
    },
    {
        "content": "<p>is there any easy way to prove that an add_group is a group?</p>",
        "id": 125236022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032532
    },
    {
        "content": "<p><code>multiplicative</code></p>",
        "id": 125236024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032552
    },
    {
        "content": "<p>should I use it to define sum?</p>",
        "id": 125236025,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032562
    },
    {
        "content": "<p><a href=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9#file-free_group-lean-L168\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9#file-free_group-lean-L168\">https://gist.github.com/johoelzl/7e73916f39e3acef8796bfb6c089a9c9#file-free_group-lean-L168</a></p>",
        "id": 125236026,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032567
    },
    {
        "content": "<p>sure</p>",
        "id": 125236027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032569
    },
    {
        "content": "<p>wonderful</p>",
        "id": 125236029,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032576
    },
    {
        "content": "<p>I am currently using it to define add_group.smul</p>",
        "id": 125236035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032588
    },
    {
        "content": "<p>I see</p>",
        "id": 125236036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032598
    },
    {
        "content": "<p>it makes it easy to transfer theorems from additive to multiplicative and vice versa using <code>additive</code></p>",
        "id": 125236040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032628
    },
    {
        "content": "<p>this method is in contrast with <code>transport_to_additive</code>, which translates the whole theorem to additive land</p>",
        "id": 125236082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032664
    },
    {
        "content": "<p>rather than just applying the theorem with a funny instance</p>",
        "id": 125236083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032679
    },
    {
        "content": "<p>how does it know to transfer list.prod to list.sum :o</p>",
        "id": 125236102,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032757
    },
    {
        "content": "<p>LOTS of definitional unfolding</p>",
        "id": 125236153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032844
    },
    {
        "content": "<p>but not 1 to 0</p>",
        "id": 125236154,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032858
    },
    {
        "content": "<p>I was surprised by the same thing</p>",
        "id": 125236156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032859
    },
    {
        "content": "<p>1 should go to 0</p>",
        "id": 125236158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032867
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sum</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_group</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">free_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_group</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">sum</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_group</span><span class=\"bp\">.</span><span class=\"n\">inv</span>\n</pre></div>",
        "id": 125236200,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032886
    },
    {
        "content": "<p>the middle one errors</p>",
        "id": 125236202,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032889
    },
    {
        "content": "<p>you may need to specify the type</p>",
        "id": 125236204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524032917
    },
    {
        "content": "<p>nvm, this worked</p>",
        "id": 125236205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032935
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">of</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">is_group_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_group_hom</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sum</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">is_group_hom</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sum</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">free_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">sum</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">inv</span>\n</pre></div>",
        "id": 125236218,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032944
    },
    {
        "content": "<p>shortwiring everything to prod</p>",
        "id": 125236221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032949
    },
    {
        "content": "<p>did I say short wiring</p>",
        "id": 125236222,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032969
    },
    {
        "content": "<p>I mean short-circuiting</p>",
        "id": 125236223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032974
    },
    {
        "content": "<p>I had to google for this one. my english.</p>",
        "id": 125236224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524032982
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">gen</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"bp\">@</span><span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">to_group</span> <span class=\"n\">s</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</pre></div>",
        "id": 125237946,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524036278
    },
    {
        "content": "<p>completely pointless usage</p>",
        "id": 125237947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524036280
    },
    {
        "content": "<p>(I know we have <code>group.closure</code> already)</p>",
        "id": 125237949,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524036287
    },
    {
        "content": "<p>maybe you should prove this as a theorem about <code>group.closure</code> then</p>",
        "id": 125238075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524036590
    },
    {
        "content": "<p>fazendo :)</p>",
        "id": 125238076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524036598
    },
    {
        "content": "<p>what is the idiomatic way to use the fact that 1 is in a subgroup?</p>",
        "id": 125238144,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524036670
    },
    {
        "content": "<p>isn't that a theorem?</p>",
        "id": 125238197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524036753
    },
    {
        "content": "<p>what is the name?</p>",
        "id": 125238199,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524036761
    },
    {
        "content": "<p>presumably <code>is_subgroup.ome_mem</code> or similar</p>",
        "id": 125238200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524036775
    },
    {
        "content": "<p>it isn't</p>",
        "id": 125238201,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524036780
    },
    {
        "content": "<p>it should be a field of <code>is_submonoid</code></p>",
        "id": 125238208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524036799
    },
    {
        "content": "<p>it is</p>",
        "id": 125238209,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524036804
    },
    {
        "content": "<p>so <code>is_submonoid.one_mem s</code> then</p>",
        "id": 125238249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524036859
    },
    {
        "content": "<p>but it doesn't look idiomatic</p>",
        "id": 125238251,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524036867
    },
    {
        "content": "<p>the group files seem to open <code>is_submonoid</code> to clean it up a bit</p>",
        "id": 125238255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524036902
    },
    {
        "content": "<p>I guess it could go in the root namespace, but <code>one_mem</code> sounds a bit generic</p>",
        "id": 125238305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524036978
    },
    {
        "content": "<p>I never used <code>export</code>, but maybe it works to <code>export is_submonoid</code>in <code>is_subgroup</code>?</p>",
        "id": 125238364,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524037196
    },
    {
        "content": "<p><code>export</code> is like permanent <code>open</code></p>",
        "id": 125238453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524037361
    },
    {
        "content": "<p>for example, <code>option.some</code> is <code>export</code>ed</p>",
        "id": 125238454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524037374
    },
    {
        "content": "<p>I don't think it's namespaced, but I could be wrong</p>",
        "id": 125238468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524037405
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">useless</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">to_group</span> <span class=\"n\">s</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ih</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"bp\">|</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"o\">(</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">H</span> <span class=\"n\">ih</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n    <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)),</span>\n      <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n    <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n      <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">inv</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">ih1</span> <span class=\"k\">with</span> <span class=\"n\">y1</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">ih2</span> <span class=\"k\">with</span> <span class=\"n\">y2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"n\">existsi</span> <span class=\"n\">y1</span> <span class=\"bp\">*</span> <span class=\"n\">y2</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125238509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524037473
    },
    {
        "content": "<p>isn't there a more \"universal\" kind of proof?</p>",
        "id": 125238562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524037613
    },
    {
        "content": "<p>you're right</p>",
        "id": 125238569,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524037632
    },
    {
        "content": "<p>both <code>group.closure</code> and <code>free_group.to_group</code> have universal properties</p>",
        "id": 125238570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524037635
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans_bnot</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"o\">(</span><span class=\"n\">L₂</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"o\">(</span><span class=\"n\">L₂</span> <span class=\"bp\">++</span> <span class=\"n\">L₃</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">reduce</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cond</span> <span class=\"n\">b1</span>\n    <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">b2</span>\n      <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"k\">then</span> <span class=\"n\">reduce</span> <span class=\"n\">tl</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"n\">tl</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">b2</span>\n      <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"k\">then</span> <span class=\"n\">reduce</span> <span class=\"n\">tl</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"n\">tl</span><span class=\"o\">))</span>\n      <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">L</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">eq_of_red</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reduce</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">reduce</span> <span class=\"n\">L₂</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125239184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038650
    },
    {
        "content": "<p>would you have some insights?</p>",
        "id": 125239185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038655
    },
    {
        "content": "<p>on how to prove the theorem at the bottom?</p>",
        "id": 125239187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038667
    },
    {
        "content": "<p>oh nvm I'll just use induction</p>",
        "id": 125239239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038707
    },
    {
        "content": "<p>you could use <code>b1 = b2</code> instead of four cases there</p>",
        "id": 125239247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524038754
    },
    {
        "content": "<p>I don't like unfolding <code>ite</code>s</p>",
        "id": 125239306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038769
    },
    {
        "content": "<p>I also played around with free_groups: <a href=\"https://gist.github.com/johoelzl/4238422b0810a9d04bb41cfdb682e8ff#file-free_groups-lean-L426\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/4238422b0810a9d04bb41cfdb682e8ff#file-free_groups-lean-L426\">https://gist.github.com/johoelzl/4238422b0810a9d04bb41cfdb682e8ff#file-free_groups-lean-L426</a> <br>\nNow it includes <code>normalize</code>.</p>",
        "id": 125239308,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524038779
    },
    {
        "content": "<p>you win</p>",
        "id": 125239309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038794
    },
    {
        "content": "<p>Using <code>if _ then _ else _ </code> makes <code>normalize.step</code> much smaller.</p>",
        "id": 125239310,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524038798
    },
    {
        "content": "<p>aha, I like your approach</p>",
        "id": 125239333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038846
    },
    {
        "content": "<p>you use <code>list.sizeof</code>? Why?</p>",
        "id": 125239336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524038853
    },
    {
        "content": "<p>do it one step first, and then the whole thing</p>",
        "id": 125239337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038855
    },
    {
        "content": "<p>now I'm confused as to what I should do</p>",
        "id": 125239343,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038879
    },
    {
        "content": "<blockquote>\n<p>you use <code>list.sizeof</code>? Why?</p>\n</blockquote>\n<p>to justify that the recursion is well-founded?</p>",
        "id": 125239400,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038907
    },
    {
        "content": "<p>I never used well founded recursion before. <code>list.sizeof</code> was what the equation compiler proposed. Is there an easier way?</p>",
        "id": 125239403,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524038909
    },
    {
        "content": "<p>You (Johannes) didn't prove that <code>normalize</code> is related to the original input though, or that the result is unique in the equivalence class (it can be defined as a function on the free group itself)</p>",
        "id": 125239431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524038953
    },
    {
        "content": "<p>so there's that if you want it kenny</p>",
        "id": 125239434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524038969
    },
    {
        "content": "<p>well its not finished yet</p>",
        "id": 125239435,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524038971
    },
    {
        "content": "<p>this is not good</p>",
        "id": 125239437,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038979
    },
    {
        "content": "<p>You can use <code>list.length</code> instead of <code>sizeof</code></p>",
        "id": 125239439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524038981
    },
    {
        "content": "<p>we are writing our own free groups separately</p>",
        "id": 125239440,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038985
    },
    {
        "content": "<p>this is not good</p>",
        "id": 125239443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524038991
    },
    {
        "content": "<p>they seem pretty similar</p>",
        "id": 125239445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524038999
    },
    {
        "content": "<p>they're different enough</p>",
        "id": 125239514,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039041
    },
    {
        "content": "<p>I'm sure we ca merge them later</p>",
        "id": 125239515,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524039054
    },
    {
        "content": "<p>I don't believe in hope</p>",
        "id": 125239518,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039064
    },
    {
        "content": "<p>Oh, I see Johannes also proved church rosser</p>",
        "id": 125239525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524039098
    },
    {
        "content": "<p>Yeah, the question was how to prove it. And then I couldn't sleep and remembered Tobias book on Term Rewriting and All That.</p>",
        "id": 125239587,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524039149
    },
    {
        "content": "<p>this is not good</p>",
        "id": 125239601,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039188
    },
    {
        "content": "<p>you should see how it compares to Kenny's proof</p>",
        "id": 125239603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524039193
    },
    {
        "content": "<p>I'm ashamed</p>",
        "id": 125239607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039201
    },
    {
        "content": "<p>I need to work very hard to shorten my proof</p>",
        "id": 125239609,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> why not incorporate both proofs? I think merging both would be helpful.</p>",
        "id": 125239678,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524039296
    },
    {
        "content": "<p>our proofs are different enough</p>",
        "id": 125239686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039308
    },
    {
        "content": "<p>our definitions are different enough</p>",
        "id": 125239688,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039312
    },
    {
        "content": "<p>this will be a disaster</p>",
        "id": 125239689,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039315
    },
    {
        "content": "<p>they aren't that different, if I'm following the discussion well enough</p>",
        "id": 125239696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524039332
    },
    {
        "content": "<p>you haven't even seen my file</p>",
        "id": 125239698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039338
    },
    {
        "content": "<p>I am reading it from your posts</p>",
        "id": 125239701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524039353
    },
    {
        "content": "<p>I can see that</p>",
        "id": 125239702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039360
    },
    {
        "content": "<p>Why don't you post what you have and then we can compare and see what parts are better in each file?</p>",
        "id": 125239749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524039404
    },
    {
        "content": "<p>lemme finish my <code>reduce</code> first</p>",
        "id": 125239752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039417
    },
    {
        "content": "<p>here's what I use to do induction on <code>length</code>:</p>\n<div class=\"codehilite\"><pre><span></span>using_well_founded {\n  rel_tac := λ_ _, `[exact ⟨_, inv_image.wf length nat.lt_wf⟩],\n  dec_tac := tactic.assumption }\n</pre></div>",
        "id": 125239810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524039520
    },
    {
        "content": "<p>Ah! that's perfect</p>",
        "id": 125239813,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524039540
    },
    {
        "content": "<p>I guess what we also want: a induction method which generalizes all indices of the major hypotheses. I often needed to write something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">generalize</span> <span class=\"n\">eq_t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>Or is there a better variant already available?</p>",
        "id": 125239886,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524039651
    },
    {
        "content": "<p>same here</p>",
        "id": 125239899,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524039664
    },
    {
        "content": "<p>I recall discussing this with Sebastian. The problem with this is that it often cripples the inductive hypothesis (since the index can't get smaller or whatever), and it's hard to say what to generalize to recover it</p>",
        "id": 125239965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524039754
    },
    {
        "content": "<p>which makes it unclear how to proceed in general</p>",
        "id": 125239973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524039778
    },
    {
        "content": "<p>I see. We surely don't want to do it in all cases. But something along the lines <code>induction h generalizing (t_eq : (a :: xs) = t)</code>. At least would be shorter to write.</p>",
        "id": 125240027,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524039868
    },
    {
        "content": "<p>hm, I guess there's no point in the <code>t</code> there since it will disappear after the induction. The form of the index is also unnecessary, unless you only want to generalize some indices and leave other index expressions</p>",
        "id": 125240082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040017
    },
    {
        "content": "<p>So it would suffice to just say <code>generalizing indices</code> or something</p>",
        "id": 125240093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040046
    },
    {
        "content": "<p>or equivalently, just have a <code>induction_g</code> command (name TBD) with the same syntax as <code>induction</code> that does this</p>",
        "id": 125240158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040118
    },
    {
        "content": "<p>how do you destruct ite in equation compiler?</p>",
        "id": 125240172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm fine with <code>induction_g</code> or <code>generalizing indices</code>. I will take a look into this.</p>",
        "id": 125240255,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524040313
    },
    {
        "content": "<p>how do you destruct ite in term mode at all?</p>",
        "id": 125240296,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040331
    },
    {
        "content": "<p>I recall asking this a long time ago</p>",
        "id": 125240297,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040335
    },
    {
        "content": "<p>I can only destruct it in tactic mode</p>",
        "id": 125240298,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040340
    },
    {
        "content": "<p>because it is <code>decidable.rec_on</code> something obscure</p>",
        "id": 125240305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040365
    },
    {
        "content": "<p>i.e. a proof that the condition is decidable</p>",
        "id": 125240307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040370
    },
    {
        "content": "<p>it's easier in tactic mode to be sure</p>",
        "id": 125240308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you mean rewriting with \"destruct\"? This is surely one thing where tactic mode is prefered.</p>",
        "id": 125240310,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524040382
    },
    {
        "content": "<p>that's why I don't like using <code>ite</code></p>",
        "id": 125240327,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040400
    },
    {
        "content": "<p>but you can <code>match (by apply_instance : decidable p) with ...</code> and then just use <code>show</code> to get rid of the ite in the branches</p>",
        "id": 125240330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040416
    },
    {
        "content": "<p>hmm</p>",
        "id": 125240342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040425
    },
    {
        "content": "<p>this is what I used to do before <code>by_cases</code> got good</p>",
        "id": 125240394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040497
    },
    {
        "content": "<p>I've got myself into certain trouble</p>",
        "id": 125240545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040760
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">reduce</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cond</span> <span class=\"n\">b1</span>\n    <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">b2</span>\n      <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"k\">then</span> <span class=\"n\">reduce</span> <span class=\"n\">tl</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"n\">tl</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">b2</span>\n      <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"k\">then</span> <span class=\"n\">reduce</span> <span class=\"n\">tl</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"n\">tl</span><span class=\"o\">))</span>\n      <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">L</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">L2</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">L2</span> <span class=\"bp\">++</span> <span class=\"n\">L3</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125240549,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040780
    },
    {
        "content": "<p>do you still have that church rosser proof?</p>",
        "id": 125240590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040835
    },
    {
        "content": "<p>yes</p>",
        "id": 125240601,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040842
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">church_rosser</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"err\">?</span><span class=\"n\">M_2</span> <span class=\"err\">?</span><span class=\"n\">M_3</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"err\">?</span><span class=\"n\">M_2</span> <span class=\"err\">?</span><span class=\"n\">M_4</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">M_1</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)),</span> <span class=\"n\">red</span> <span class=\"err\">?</span><span class=\"n\">M_3</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"err\">?</span><span class=\"n\">M_4</span> <span class=\"n\">L₄</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125240602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040860
    },
    {
        "content": "<p>It suffices to show that reduce is following <em>some</em> reduction sequence</p>",
        "id": 125240603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040862
    },
    {
        "content": "<p>and that when it gets to the end there is no other possible reduction</p>",
        "id": 125240609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040883
    },
    {
        "content": "<p>I've shown the former</p>",
        "id": 125240611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040902
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"n\">L₁</span><span class=\"o\">)</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"n\">reduce</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125240657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040948
    },
    {
        "content": "<p>issue?</p>",
        "id": 125240658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040950
    },
    {
        "content": "<p>Then if A ~ B then reduce A ~ A ~ B ~ reduce B, so by C-R there exists C such that reduce A -&gt; C &lt;- reduce B; but reduce A is minimal so reduce A = C = reduce B</p>",
        "id": 125240660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524040977
    },
    {
        "content": "<p>nice</p>",
        "id": 125240670,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524040994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> which list should I destruct?</p>",
        "id": 125240723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524041068
    },
    {
        "content": "<p>where</p>",
        "id": 125240725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524041076
    },
    {
        "content": "<p>common sense would say the former, but I'm asking if I need to destruct the latter as well</p>",
        "id": 125240727,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524041083
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">reduce</span> <span class=\"n\">L₁</span><span class=\"o\">)</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"n\">reduce</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125240730,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524041087
    },
    {
        "content": "<p><code>red</code> means that you have some representation as append of stuff, right?</p>",
        "id": 125240741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524041132
    },
    {
        "content": "<p>not sure what you mean; don't think it's right anyway</p>",
        "id": 125240744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524041154
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans_bnot</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"o\">(</span><span class=\"n\">L₂</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"o\">(</span><span class=\"n\">L₂</span> <span class=\"bp\">++</span> <span class=\"n\">L₃</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125240785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524041170
    },
    {
        "content": "<p>I think you want to do induction on L1, along the same lines as the definition of <code>reduce</code></p>",
        "id": 125240786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524041190
    },
    {
        "content": "<p>right, but I'm asking if I need to destruct L2 as well</p>",
        "id": 125240787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524041205
    },
    {
        "content": "<p>no, generalize it in the induction</p>",
        "id": 125240793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524041235
    },
    {
        "content": "<p>why shouldn't I do it in term mode?</p>",
        "id": 125240796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524041256
    },
    {
        "content": "<p>you can</p>",
        "id": 125240797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524041261
    },
    {
        "content": "<p>I give up using term mode</p>",
        "id": 125241458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524042343
    },
    {
        "content": "<p>Here's a proof strategy: if <code>red (reduce L1) L2</code>, then by cases either <code>reduce L1 = L2</code> or <code>reduce L1 = L3 ++ (x, b) :: (x, bnot b) :: L4</code> and <code>L2 = L3 ++ L4</code>; so it suffices to prove the second case is impossible. Prove <code>\\forall L3 L4 x b, reduce L1 != L3 ++ (x, b) :: (x, bnot b) :: L4</code> by induction on L1, which you can do in term mode so that the equation compiler sets up the weird induction</p>",
        "id": 125241867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524043075
    },
    {
        "content": "<p>aha</p>",
        "id": 125241913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524043114
    },
    {
        "content": "<p>muit obrigad</p>",
        "id": 125241914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524043123
    },
    {
        "content": "<p>that will be the first \"not\" I'm using in a while</p>",
        "id": 125241923,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524043156
    },
    {
        "content": "<p>are you sure I can do that by induction on L1 alone?</p>",
        "id": 125241976,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524043262
    },
    {
        "content": "<p>my function is wrong</p>",
        "id": 125243339,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524045520
    },
    {
        "content": "<p>hmm...</p>",
        "id": 125243343,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524045538
    },
    {
        "content": "<p>reducing a word is more difficult than it seems</p>",
        "id": 125243417,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524045629
    },
    {
        "content": "<p>I don't think there's an online algorithm to reduce a word</p>",
        "id": 125243624,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524045965
    },
    {
        "content": "<p>so my function is bound to fail</p>",
        "id": 125243629,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524045973
    },
    {
        "content": "<p>I'm using the CS usage of \"online\"</p>",
        "id": 125243632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524045981
    },
    {
        "content": "<p>just use greedy?</p>",
        "id": 125243809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524046317
    },
    {
        "content": "<p>is your greedy algorithm online?</p>",
        "id": 125243849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524046332
    },
    {
        "content": "<p>and remember to backtrack slightly when you kill <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>∗</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x * x^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mbin\">∗</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 125243850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524046341
    },
    {
        "content": "<p>right, that's my new plan now</p>",
        "id": 125243851,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524046349
    },
    {
        "content": "<p>how am I writing program in Lean</p>",
        "id": 125243852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524046356
    },
    {
        "content": "<p>...when you should be revising?</p>",
        "id": 125243854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524046369
    },
    {
        "content": "<p>well</p>",
        "id": 125243856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524046376
    },
    {
        "content": "<p>;-)</p>",
        "id": 125243857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524046377
    },
    {
        "content": "<blockquote>\n<p>this will be a disaster</p>\n</blockquote>\n<p>No, it's great! Two smart people doing the same thing means that you can take the union of their ideas at the end -- either that, or you get two different ways of doing the same thing, each with their own benefits. Either way it's a win.</p>",
        "id": 125244111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524046848
    },
    {
        "content": "<p>there will be only one version in mathlib</p>",
        "id": 125244117,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524046867
    },
    {
        "content": "<p>If the two approaches are sufficiently different and both have their uses, then they might both end up in there. If they are sufficiently similar then we end up with the best of both pieces of code. It's just a collaborative open source situation. I ask 200 people to do the same question when I'm teaching them and I don't worry about this at all. Every year I see an answer I haven't seen before, e.g. Chris' modal logic proof of the islanders question this year.</p>",
        "id": 125244165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524046968
    },
    {
        "content": "<p>there can't be two definitions of a free group</p>",
        "id": 125244170,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524046985
    },
    {
        "content": "<p>There is generate and span</p>",
        "id": 125244173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524046992
    },
    {
        "content": "<p>two definitions of the submodule generated/spanned by a subset</p>",
        "id": 125244175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524047004
    },
    {
        "content": "<p>in my files</p>",
        "id": 125244176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524047005
    },
    {
        "content": "<p>only span is in mathlib</p>",
        "id": 125244181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524047020
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">((</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl1</span><span class=\"o\">)</span> <span class=\"n\">tl2</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span>\n    <span class=\"k\">then</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"n\">tl1</span> <span class=\"n\">tl2</span>\n    <span class=\"k\">else</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">((</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl1</span><span class=\"o\">)</span> <span class=\"n\">tl2</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span>\n    <span class=\"k\">then</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"n\">tl1</span> <span class=\"n\">tl2</span>\n    <span class=\"k\">else</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">((</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl1</span><span class=\"o\">)</span> <span class=\"n\">tl2</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">((</span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl1</span><span class=\"o\">)</span> <span class=\"n\">tl2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">[]</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n</pre></div>",
        "id": 125244346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524047287
    },
    {
        "content": "<p>this should be correct</p>",
        "id": 125244347,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524047290
    },
    {
        "content": "<p>but it would be difficult to prove anything about it</p>",
        "id": 125244461,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524047508
    },
    {
        "content": "<p>heh</p>",
        "id": 125254855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063444
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">is_comm_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 125254858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you add this to mathlib? ;-)</p>",
        "id": 125254868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063474
    },
    {
        "content": "<p>Or tell me where to put it.</p>",
        "id": 125254923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063501
    },
    {
        "content": "<p>in ring.lean, just after definition of is_ring_hom?</p>",
        "id": 125254943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063539
    },
    {
        "content": "<p>Is there a better proof? Some \"meta-rfl\" tactic?</p>",
        "id": 125254960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063580
    },
    {
        "content": "<p>Sounds like a job for Scott's <code>obviously</code> tactic</p>",
        "id": 125255008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524063605
    },
    {
        "content": "<p>but it's not yet in mathlib</p>",
        "id": 125255033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524063666
    },
    {
        "content": "<p>Patrick, this is what the world has come to. Kenny has defined localization maps and of course there are equivalence classes everywhere, and I'm not very experienced with using them. But Kenny has written a sufficiently good interface (universal properties of localization, basically guided by the needs I had for schemes) that I can work with localizations without ever needing to think about quotient types.</p>",
        "id": 125255041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063684
    },
    {
        "content": "<p>So I need to prove that the canonical map R[1/S] -&gt; R[1/S] is the identity map</p>",
        "id": 125255053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063704
    },
    {
        "content": "<p>and I can either attempt to do this by unravelling the definition and getting my hands dirty</p>",
        "id": 125255113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063728
    },
    {
        "content": "<p>or I can do it by observing that the identity map is an R-algebra homomorphism R[1/S] -&gt; R[1/S] and hence it's the canonical map, by some universal property :P</p>",
        "id": 125255123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063753
    },
    {
        "content": "<p>one could also take this as an exercise in tactic writing: write a tactic doing that kind of proof that <code>id</code> is a morphism of anything (this should be easy after reading <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> 's tutorial about how he wrote the pi instance tactic)</p>",
        "id": 125255126,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524063756
    },
    {
        "content": "<p>and because I don't like quotient types I will use the universal property.</p>",
        "id": 125255147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063785
    },
    {
        "content": "<p>Nice</p>",
        "id": 125255155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524063800
    },
    {
        "content": "<p>And I think this shows exactly the point that Mario was explaining to me the other day.</p>",
        "id": 125255159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063808
    },
    {
        "content": "<p>About interfaces?</p>",
        "id": 125255176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524063821
    },
    {
        "content": "<p>Yes</p>",
        "id": 125255179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524063825
    },
    {
        "content": "<p>If the interface (which he did actually describe as \"a bunch of universal properties\" at the time) is good enough</p>",
        "id": 125255182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063832
    },
    {
        "content": "<p>then you don't ever need to worry about the details</p>",
        "id": 125255185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063839
    },
    {
        "content": "<p>of how it is implemented</p>",
        "id": 125255226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063845
    },
    {
        "content": "<p>and indeed I can believe that any direct proof that it's the identity might break if some underlying way of implementing equivalence relations changed</p>",
        "id": 125255247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063884
    },
    {
        "content": "<p>but my universal property definition will never break</p>",
        "id": 125255255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063893
    },
    {
        "content": "<p>That is crazy.</p>",
        "id": 125255257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063899
    },
    {
        "content": "<p>yes, it's great</p>",
        "id": 125255279,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524063938
    },
    {
        "content": "<p>tactic tutorial did you say??</p>",
        "id": 125255306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524063959
    },
    {
        "content": "<p>I think maths papers should also be written like this. Many math papers lack encapsulation of technical details</p>",
        "id": 125255358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524063988
    },
    {
        "content": "<p>I don't know if we are the mad ones or the sane ones</p>",
        "id": 125255370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064002
    },
    {
        "content": "<p>Yes, Simon is writing some tutorial</p>",
        "id": 125255385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524064009
    },
    {
        "content": "<p>Or at least he intends to do it, and I remind him from time to time.</p>",
        "id": 125255395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524064024
    },
    {
        "content": "<p>Which is really unfair because I lack time for all my Lean projects</p>",
        "id": 125255407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524064044
    },
    {
        "content": "<p>But in three weeks I'll be done with teaching and I hope I'll be able to work more seriously on Lean stuff</p>",
        "id": 125255426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524064079
    },
    {
        "content": "<blockquote>\n<p>If the interface (which he did actually describe as \"a bunch of universal properties\" at the time) is good enough<br>\nthen you don't ever need to worry about the details<br>\nof how it is implemented</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think I agree with this. But, just for my education, what is the definition of “universal” here?</p>",
        "id": 125255520,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524064193
    },
    {
        "content": "<p>I'm giving a graduate course and tomorrow and next lecture are about <a href=\"https://arxiv.org/abs/1201.2245\" target=\"_blank\" title=\"https://arxiv.org/abs/1201.2245\">https://arxiv.org/abs/1201.2245</a> And a new version came out on arXiv on Monday, after five years without moving. Since then I've been reading like crazy to understand why she changed so many things</p>",
        "id": 125255607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524064272
    },
    {
        "content": "<p>Good news is the new version contains something which is much closer to an actual proof of the main theorem</p>",
        "id": 125255629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524064295
    },
    {
        "content": "<p>But that doesn't leave much time for Lean</p>",
        "id": 125255687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524064324
    },
    {
        "content": "<p>Sean: <a href=\"https://en.wikipedia.org/wiki/Universal_property\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Universal_property\">https://en.wikipedia.org/wiki/Universal_property</a></p>",
        "id": 125255757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524064441
    },
    {
        "content": "<p>Sean -- I asked Kenny to type up some basic constructions of localization of rings at multiplicative sets in Lean. Kenny read a book on commutative algebra and did it</p>",
        "id": 125255801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064449
    },
    {
        "content": "<p>I then realised I couldn't use his constructions at all because to access any element of the localized ring I needed to start playing around with quotient types</p>",
        "id": 125255811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064482
    },
    {
        "content": "<p>so I asked him if he could also prove various results of the form \"if some situation is true, then there's a map from some ring to a localized ring\"</p>",
        "id": 125255845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064520
    },
    {
        "content": "<p>or \"if some situation is true, then there's a map from a localized ring to some ring\"</p>",
        "id": 125255848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064535
    },
    {
        "content": "<p>and he did this</p>",
        "id": 125255849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064537
    },
    {
        "content": "<p>and then I realised that I still couldn't prove half the things I wanted to prove</p>",
        "id": 125255853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064555
    },
    {
        "content": "<p>so I asked him if he could prove various results of the form \"if some situation is true, then there's a map from some ring to some localized ring and furthermore it is the unique map with some property\"</p>",
        "id": 125255911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064591
    },
    {
        "content": "<p>and similarly the other way around</p>",
        "id": 125255915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064605
    },
    {
        "content": "<p>and then I could prove everything I needed</p>",
        "id": 125255920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064614
    },
    {
        "content": "<p>but then to my surprise</p>",
        "id": 125255922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064621
    },
    {
        "content": "<p>I realised that statements of the form \"this map that Kenny defined is the identity map\"</p>",
        "id": 125255938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064651
    },
    {
        "content": "<p>which I needed to prove</p>",
        "id": 125255941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064656
    },
    {
        "content": "<p>even such statements as that, which my gut instinct said \"this proof should be refl\"</p>",
        "id": 125255953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064679
    },
    {
        "content": "<p>I realised I was proving by showing that the identity map had the property required of Kenny's map, and hence was Kenny's map</p>",
        "id": 125256011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064708
    },
    {
        "content": "<p>and this has had the joyous consequence</p>",
        "id": 125256017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064718
    },
    {
        "content": "<p>that I never once have to write an equivalence class</p>",
        "id": 125256020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064728
    },
    {
        "content": "<p>which is great</p>",
        "id": 125256021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064730
    },
    {
        "content": "<p>because I don't know if it's just me</p>",
        "id": 125256023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064734
    },
    {
        "content": "<p>but whenever I type <code>\\[[</code> it doesn't work properly</p>",
        "id": 125256029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064743
    },
    {
        "content": "<p>I get <code>\\[[]]</code></p>",
        "id": 125256036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064757
    },
    {
        "content": "<p>so you manually delete the extra closing brackets and press space to enter it</p>",
        "id": 125256042,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524064774
    },
    {
        "content": "<p>instead of <code>⟦</code></p>",
        "id": 125256053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064778
    },
    {
        "content": "<p>aah, you are an equivalence relation expert</p>",
        "id": 125256058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064787
    },
    {
        "content": "<p>instead of doing that</p>",
        "id": 125256064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064795
    },
    {
        "content": "<p>I get you to write me an interface ;-)</p>",
        "id": 125256068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> So, am I right in that you are describing a sort of minimum set of properties for a given definition that allow you to prove something without having to unfold the given definition?</p>",
        "id": 125256142,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524064887
    },
    {
        "content": "<p>right</p>",
        "id": 125256146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064895
    },
    {
        "content": "<p>but somehow in the past I knew that this sort of thing was sometimes possible</p>",
        "id": 125256204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064923
    },
    {
        "content": "<p>That's what I thought. Is that the same thing as <a href=\"https://en.wikipedia.org/wiki/Universal_property\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Universal_property\">https://en.wikipedia.org/wiki/Universal_property</a> as <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> referred to? I didn't think so.</p>",
        "id": 125256208,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524064927
    },
    {
        "content": "<p>but when it came to the identity map, I didn't care</p>",
        "id": 125256211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064935
    },
    {
        "content": "<p>because \"one can easily check that this map is the identity map from the construction\"</p>",
        "id": 125256219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064949
    },
    {
        "content": "<p>at least, I would not be scared to write that in a maths paper</p>",
        "id": 125256226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064961
    },
    {
        "content": "<p>but in this situation I am so scared to prove anything directly from the construction</p>",
        "id": 125256230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524064975
    },
    {
        "content": "<p>Kevin, that's also the same idea in <a href=\"#narrow/stream/113488-general/subject/.60_.60.20style.20and.20order.20of.20goals/near/125119384\" title=\"#narrow/stream/113488-general/subject/.60_.60.20style.20and.20order.20of.20goals/near/125119384\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/.60_.60.20style.20and.20order.20of.20goals/near/125119384</a></p>",
        "id": 125256240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524064996
    },
    {
        "content": "<p>that it has only now dawned on me that even trivial things which I would usually prove directly from the construction can be done via the interface</p>",
        "id": 125256243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065002
    },
    {
        "content": "<p>Oh is it?</p>",
        "id": 125256246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065018
    },
    {
        "content": "<p>I didn't understand that comment</p>",
        "id": 125256248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065021
    },
    {
        "content": "<p>I guessed so, that's why I'm referring to it now</p>",
        "id": 125256256,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524065037
    },
    {
        "content": "<p>That comment is starred for \"come back to this when your daughter is not off school sick\"</p>",
        "id": 125256297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065049
    },
    {
        "content": "<p>I'm talking about the first bullet</p>",
        "id": 125256299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524065056
    },
    {
        "content": "<p>I kind of think/hope that the general technique I picked up when working on those proofs was the thing Mario was trying to explain to me there</p>",
        "id": 125256318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065103
    },
    {
        "content": "<p>but I've not had time to internalise it yet.</p>",
        "id": 125256330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065121
    },
    {
        "content": "<p>I can really see the light at the end of the tunnel for affine schemes now.</p>",
        "id": 125256336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065132
    },
    {
        "content": "<p>Great!</p>",
        "id": 125256346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524065151
    },
    {
        "content": "<p>Chris did the ghastly ring theory multinomial theorem lemma which I was putting off</p>",
        "id": 125256348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065154
    },
    {
        "content": "<p>and what is left, I believe, is the kind of mathematics which is really good fun to type into Lean</p>",
        "id": 125256394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065179
    },
    {
        "content": "<p>i.e. it's just universal property after universal property</p>",
        "id": 125256403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065194
    },
    {
        "content": "<p>The last 5 theorems I proved had proofs of the form <code>name_of_universal_property_theorem _ _ _ _</code></p>",
        "id": 125256425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065218
    },
    {
        "content": "<p>i.e. exactly what one would write in mathematics:</p>",
        "id": 125256441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065234
    },
    {
        "content": "<p>\"this follows from the universal property\"</p>",
        "id": 125256446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065240
    },
    {
        "content": "<p>except that one failed because Lean didn't know the identity was a ring hom ;-)</p>",
        "id": 125256456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065280
    },
    {
        "content": "<p>Have I already published the tutorial?</p>",
        "id": 125256511,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524065320
    },
    {
        "content": "<p>Not yet</p>",
        "id": 125256532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524065351
    },
    {
        "content": "<p>You are about to do it</p>",
        "id": 125256533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524065355
    },
    {
        "content": "<p>Oh! Thanks for keeping me up-to-date!</p>",
        "id": 125256542,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524065376
    },
    {
        "content": "<p>Done!</p>",
        "id": 125267684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524079649
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\">https://github.com/kckennylau/Lean/blob/master/free_group.lean</a></p>",
        "id": 125267686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524079652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you see how to shorten my proofs?</p>",
        "id": 125267689,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524079668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span></p>",
        "id": 125267750,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524079717
    },
    {
        "content": "<p>What helped in my approach: not using <code>setoid</code> and <code>quotient</code> but <code>quot</code>. Also I introduced a <code>refl_trans</code> and <code>refl_cl</code> to handle the relations and a general version of Church-Rosser. I guess using <code>append_eq_append_iff</code>, together with <code>case_matching*</code> was useful automation.</p>",
        "id": 125267882,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524079896
    },
    {
        "content": "<p>I don't combine the transitive closure and the reduction relation.</p>",
        "id": 125268207,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524080343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do we mind reversing the direction of <code>red</code> to conform with wf conventions?</p>",
        "id": 125290928,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118474
    },
    {
        "content": "<p>no</p>",
        "id": 125290929,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524118497
    },
    {
        "content": "<p>I'm disinclined to because it would break reduction conventions</p>",
        "id": 125290933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524118505
    },
    {
        "content": "<p>i.e. church rosser is completely different the other way around</p>",
        "id": 125290939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524118521
    },
    {
        "content": "<p>the automater doesn’t work well though</p>",
        "id": 125290943,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118528
    },
    {
        "content": "<p>(it's called something like noetherian in this case)</p>",
        "id": 125290944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524118535
    },
    {
        "content": "<p>If you use <code>tactic.assumption</code> as the discharger, it should reduce the <code>swap</code></p>",
        "id": 125290988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524118571
    },
    {
        "content": "<p>you could also state your hypothesis with <code>swap</code></p>",
        "id": 125290990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524118606
    },
    {
        "content": "<p>this is the problem</p>",
        "id": 125291017,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118673
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">bnot</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans_step</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span><span class=\"bp\">.</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span>\n</pre></div>",
        "id": 125291018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118678
    },
    {
        "content": "<p>so I defined things like this</p>",
        "id": 125291019,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118681
    },
    {
        "content": "<p>now I'm in this stage:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L2</span> <span class=\"n\">L₂</span><span class=\"o\">,</span>\n<span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L2</span>\n</pre></div>",
        "id": 125291060,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118694
    },
    {
        "content": "<p>so if I want to prove something with <code>L₁</code> and <code>L₂</code>, then I would recursion on <code>H2</code> right</p>",
        "id": 125291064,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118739
    },
    {
        "content": "<p>then somehow the automater wants me to prove this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₁</span> <span class=\"n\">L₁</span>\n</pre></div>",
        "id": 125291073,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118770
    },
    {
        "content": "<p>What is the setup of your induction?</p>",
        "id": 125291111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524118804
    },
    {
        "content": "<p>I want to prove that red L1 L2 -&gt; red (inv L1) (inv L2)</p>",
        "id": 125291122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118862
    },
    {
        "content": "<p>I’m starting to believe that my approach won’t work because it’s in the wrong direction</p>",
        "id": 125291130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524118892
    },
    {
        "content": "<p>I’ll just define red differently then</p>",
        "id": 125291252,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524119067
    },
    {
        "content": "<p>I have renamed this thread to \"free group\"</p>",
        "id": 125304550,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524143187
    },
    {
        "content": "<p>in other news, I shortened the file a bit more: <a href=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\">https://github.com/kckennylau/Lean/blob/master/free_group.lean</a></p>",
        "id": 125304556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524143201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you have a look?</p>",
        "id": 125304562,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524143210
    },
    {
        "content": "<p>not a single negation in my file :P</p>",
        "id": 125304769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524143470
    },
    {
        "content": "<p>Just looking at the proof: it looks like <code>red.step.church_rosser</code> could be made smaller by wlog after the case <code>list.prefix_or_prefix_of_append_eq_append </code>? At least the proof structure looks very similar.</p>",
        "id": 125306426,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524145920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I just shortened red.step.church_rosser by 10 lines</p>",
        "id": 125306474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524145958
    },
    {
        "content": "<p>now it spans 34 lines and does not depend on <code>list.prefix_or_prefix_of_append_eq_append</code></p>",
        "id": 125306477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524145973
    },
    {
        "content": "<p>I feel good</p>",
        "id": 125306478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524145974
    },
    {
        "content": "<p>nice</p>",
        "id": 125306483,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524145984
    },
    {
        "content": "<p>this means I can now convert it to equation compiler and save more lines</p>",
        "id": 125306484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524145985
    },
    {
        "content": "<blockquote>\n<p>Just looking at the proof: it looks like <code>red.step.church_rosser</code> could be made smaller by wlog after the case <code>list.prefix_or_prefix_of_append_eq_append </code>? At least the proof structure looks very similar.</p>\n</blockquote>\n<p>right, but I just can't find a way for wlog to work</p>",
        "id": 125306553,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524146099
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/wlog.20example\" title=\"#narrow/stream/113488-general/topic/wlog.20example\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/wlog.20example</a></p>",
        "id": 125306564,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524146114
    },
    {
        "content": "<p>nobody replied</p>",
        "id": 125306566,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524146116
    },
    {
        "content": "<p>I didn't mean to use directly the <code>wlog</code> tactic. I meant to do the following: state the theorem, and use it to proof one direction, and then the second one by the corresponding application of symmetry and AC (associativity and commutativity of append, and etc)</p>",
        "id": 125306654,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524146275
    },
    {
        "content": "<p>that's disgusting</p>",
        "id": 125306704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524146297
    },
    {
        "content": "<p>I would rather wait for them to fix wlog</p>",
        "id": 125306709,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524146305
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">injections</span><span class=\"o\">,</span> <span class=\"n\">subst_vars</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125306788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524146417
    },
    {
        "content": "<p>I used this so much, this should be a tactic</p>",
        "id": 125306791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524146424
    },
    {
        "content": "<p>What? Why is it <strong>disgusting</strong>? That's how you do it. You can work on changing wlog yourself!</p>",
        "id": 125306820,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524146475
    },
    {
        "content": "<p>anyway</p>",
        "id": 125306844,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524146507
    },
    {
        "content": "<p>13 lines lost!</p>",
        "id": 125308690,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524149179
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">church_rosser</span><span class=\"bp\">.</span><span class=\"n\">aux2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x1</span> <span class=\"n\">b1</span> <span class=\"n\">x2</span> <span class=\"n\">b2</span><span class=\"o\">},</span>\n  <span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₂</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₄</span> <span class=\"bp\">→</span>\n  <span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span> <span class=\"bp\">++</span> <span class=\"n\">L₄</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">L₅</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"n\">L₅</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">L₃</span> <span class=\"bp\">++</span> <span class=\"n\">L₄</span><span class=\"o\">)</span> <span class=\"n\">L₅</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">_</span> <span class=\"o\">[]</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">injections</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">_</span> <span class=\"o\">[(</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">b3</span><span class=\"o\">)]</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">injections</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">[(</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">b3</span><span class=\"o\">)]</span> <span class=\"bp\">_</span> <span class=\"o\">[]</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">injections</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">_</span> <span class=\"o\">((</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x4</span><span class=\"o\">,</span><span class=\"n\">b4</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">injections</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">bnot</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">cons_bnot</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">x4</span><span class=\"o\">,</span><span class=\"n\">b4</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">[]</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">injections</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">cons_bnot</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">bnot</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x3</span><span class=\"o\">,</span><span class=\"n\">b3</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">((</span><span class=\"n\">x4</span><span class=\"o\">,</span><span class=\"n\">b4</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">tl2</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">H</span> <span class=\"k\">in</span>\n  <span class=\"k\">match</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">church_rosser</span><span class=\"bp\">.</span><span class=\"n\">aux2</span> <span class=\"n\">H2</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">H3</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨</span><span class=\"n\">L₅</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">,</span> <span class=\"n\">H4</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">H3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">H4</span><span class=\"bp\">⟩</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">church_rosser</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)},</span>\n  <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"bp\">→</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">→</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span>\n  <span class=\"n\">L₃</span> <span class=\"bp\">=</span> <span class=\"n\">L₄</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">L₅</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₃</span> <span class=\"n\">L₅</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₄</span> <span class=\"n\">L₅</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">bnot</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">bnot</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">church_rosser</span><span class=\"bp\">.</span><span class=\"n\">aux2</span> <span class=\"n\">H</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">church_rosser</span> <span class=\"o\">(</span><span class=\"n\">H12</span> <span class=\"o\">:</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H13</span> <span class=\"o\">:</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">L₂</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">L₄</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₃</span> <span class=\"n\">L₄</span> <span class=\"o\">:=</span>\n<span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">church_rosser</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"n\">H12</span> <span class=\"n\">H13</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 125308693,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524149192
    },
    {
        "content": "<p>Be careful not to drop to zero</p>",
        "id": 125308696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524149198
    },
    {
        "content": "<p>probably can delete some newlines</p>",
        "id": 125308698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524149203
    },
    {
        "content": "<p>That's what my PhD advisor used to say</p>",
        "id": 125308713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524149234
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean\">https://github.com/kckennylau/Lean/blob/master/free_group.lean</a></p>",
        "id": 125340029,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524198481
    },
    {
        "content": "<p>now it is 531 lines</p>",
        "id": 125340064,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524198483
    },
    {
        "content": "<p>Johannes's file is 486 lines</p>",
        "id": 125340072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524198520
    },
    {
        "content": "<p>only 45 lines to go :P</p>",
        "id": 125340073,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524198523
    },
    {
        "content": "<p>But my file is not finished! There are a couple of proofs missing... So i guess 531 lines are good enough</p>",
        "id": 125342476,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524203906
    },
    {
        "content": "<p>Could I insist to use <code>quotient</code>? <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span></p>",
        "id": 125342482,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524203933
    },
    {
        "content": "<p>you seem to have developed some theories of the transitive and reflexive closure of general reduction propositions though</p>",
        "id": 125342490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524203978
    },
    {
        "content": "<p>maybe you could put that theories in another file and I can use it?</p>",
        "id": 125342492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524203992
    },
    {
        "content": "<p>Yes, I will put <code>refl_trans</code> and <code>refl_cl</code> somewhere in mathlib. I'm not sure yet about the naming.</p>",
        "id": 125342550,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524204088
    },
    {
        "content": "<p>I would love it if you could prove that the result is a setoid ^^</p>",
        "id": 125342551,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524204108
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">L₃</span><span class=\"o\">,</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"bp\">∧</span> <span class=\"n\">red</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"bp\">⟨</span><span class=\"n\">L₃</span><span class=\"o\">,</span> <span class=\"n\">H13</span><span class=\"o\">,</span> <span class=\"n\">H23</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">L₃</span><span class=\"o\">,</span> <span class=\"n\">H23</span><span class=\"o\">,</span> <span class=\"n\">H13</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"bp\">⟨</span><span class=\"n\">L₄</span><span class=\"o\">,</span> <span class=\"n\">H14</span><span class=\"o\">,</span> <span class=\"n\">H24</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">L₅</span><span class=\"o\">,</span> <span class=\"n\">H25</span><span class=\"o\">,</span> <span class=\"n\">H35</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">L₆</span><span class=\"o\">,</span> <span class=\"n\">H46</span><span class=\"o\">,</span> <span class=\"n\">H56</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">church_rosser</span> <span class=\"n\">H24</span> <span class=\"n\">H25</span> <span class=\"k\">in</span>\n   <span class=\"bp\">⟨</span><span class=\"n\">L₆</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">H14</span> <span class=\"n\">H46</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">H35</span> <span class=\"n\">H56</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 125342553,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524204119
    },
    {
        "content": "<p>the relation being \"there is a common reduction\"</p>",
        "id": 125342590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524204126
    },
    {
        "content": "<p>yep, makes sense.</p>",
        "id": 125342703,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524204401
    },
    {
        "content": "<p>and I think this is better than the refl-symm-trans closure, because things are easier to prove</p>",
        "id": 125342710,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524204436
    },
    {
        "content": "<p>the symm makes everything work no well</p>",
        "id": 125342711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524204446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I just proved that <code>red</code> is a partial order</p>",
        "id": 125477808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524278395
    },
    {
        "content": "<p>Should I be using <code>\\le</code>?</p>",
        "id": 125477809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524278399
    },
    {
        "content": "<p>No, it's not really a less-than kind of thing</p>",
        "id": 125477851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278448
    },
    {
        "content": "<p>should I remove the proof?</p>",
        "id": 125477852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524278457
    },
    {
        "content": "<p>I would prefer ~&gt;* if you want notation for red</p>",
        "id": 125477853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278461
    },
    {
        "content": "<p>is there unicode?</p>",
        "id": 125477859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524278475
    },
    {
        "content": "<p>also, it kinda looks like something not nice, so you might want to think twice</p>",
        "id": 125477860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524278485
    },
    {
        "content": "<p>That's a right squiggle arrow with a star</p>",
        "id": 125477862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278498
    },
    {
        "content": "<p>the right squiggle arrow is <code>red.step</code>, and the star is its reflexive transitive closure</p>",
        "id": 125477863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278519
    },
    {
        "content": "<p>eh, is that an answer to any of my two questions...</p>",
        "id": 125477904,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524278545
    },
    {
        "content": "<p>there is unicode for the right squig arrow, pretty sure</p>",
        "id": 125477953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278659
    },
    {
        "content": "<p>I was explaining the notation in response to \"not so nice\" comment</p>",
        "id": 125477955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278680
    },
    {
        "content": "<p>so you're saying I should define reflexive transitive closure?</p>",
        "id": 125477956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524278681
    },
    {
        "content": "<p>you sort of did</p>",
        "id": 125477959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278694
    },
    {
        "content": "<p>I mean define <code>~&gt;</code> and <code>*</code> separately</p>",
        "id": 125477967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524278714
    },
    {
        "content": "<p>You could do like Johannes did and prove C-R generically over r.t. closure</p>",
        "id": 125477969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278750
    },
    {
        "content": "<p>would the notations work?</p>",
        "id": 125478010,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524278772
    },
    {
        "content": "<p>I doubt it, but you could locally define ~&gt;* to mean <code>rt_closure red.step</code> or something</p>",
        "id": 125478017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278825
    },
    {
        "content": "<p>I found this in unicode: ⇝ , but it's a bit hard to distinguish from the regular arrow in my font on vscode</p>",
        "id": 125478165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524279148
    },
    {
        "content": "<p>let's just stick with <code>red</code></p>",
        "id": 125478168,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524279173
    },
    {
        "content": "<p>should I remove the proof?</p>",
        "id": 125478173,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524279189
    },
    {
        "content": "<p>are you using it?</p>",
        "id": 125478175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524279217
    },
    {
        "content": "<p>not really, as you said we don't want to use <code>\\le</code></p>",
        "id": 125478176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524279230
    },
    {
        "content": "<p>I have the other theorems</p>",
        "id": 125478177,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524279238
    },
    {
        "content": "<p>my proof is literally</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">red</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125478217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524279255
    },
    {
        "content": "<p>yeah, skip it</p>",
        "id": 125478218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524279270
    },
    {
        "content": "<p>ok</p>",
        "id": 125478219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524279277
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">bnot</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span> <span class=\"n\">L₂</span> <span class=\"bp\">//</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n</pre></div>",
        "id": 125478477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524279920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> would you have some insights as to how I would prove this?</p>",
        "id": 125478481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524279950
    },
    {
        "content": "<p>Even stronger, the set of all lists that are <code>red</code> related to the original is finite</p>",
        "id": 125478522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280011
    },
    {
        "content": "<p>right, but this is the inductive step</p>",
        "id": 125478523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280021
    },
    {
        "content": "<p>because if <code>red L1 L2</code> then <code>L2 &lt;+ L1</code></p>",
        "id": 125478528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280030
    },
    {
        "content": "<p>and then?</p>",
        "id": 125478530,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280044
    },
    {
        "content": "<p>use <code>sublists</code></p>",
        "id": 125478531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280048
    },
    {
        "content": "<p>but it is not in mathlib that sublists are finite</p>",
        "id": 125478557,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280082
    },
    {
        "content": "<p>yes, that's <code>sublists</code></p>",
        "id": 125478572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280091
    },
    {
        "content": "<p>it's literally a list of all sublists of another</p>",
        "id": 125478574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280113
    },
    {
        "content": "<p>hence finite</p>",
        "id": 125478575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280117
    },
    {
        "content": "<p>aha</p>",
        "id": 125478577,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280130
    },
    {
        "content": "<p>then again it's probably not the most efficient enumeration strategy</p>",
        "id": 125478587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280191
    },
    {
        "content": "<p>have you proven that <code>red L1 L2</code> is decidable?</p>",
        "id": 125478635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280266
    },
    {
        "content": "<p>let's say I have</p>",
        "id": 125478636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280288
    },
    {
        "content": "<p>(I have not, but I will)</p>",
        "id": 125478637,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280292
    },
    {
        "content": "<p>it's easier to prove that the free group relation (including symmetry) Is decidable, since then you can use <code>reduce</code></p>",
        "id": 125478677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280327
    },
    {
        "content": "<p>I don't understand, sorry</p>",
        "id": 125478681,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280371
    },
    {
        "content": "<p>how would I use reduce to prove that red L1 L2 is decidable?</p>",
        "id": 125478687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280389
    },
    {
        "content": "<p>you can decide if L1 ~ L2 by just reducing both sides and testing for equality</p>",
        "id": 125478688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280413
    },
    {
        "content": "<p>but that doesn't mean red is decidable</p>",
        "id": 125478691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280430
    },
    {
        "content": "<p>that doesn't give you decidability of <code>red</code> though</p>",
        "id": 125478693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280432
    },
    {
        "content": "<p>how would that help?</p>",
        "id": 125478788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280585
    },
    {
        "content": "<p>I'm not sure how important it is to know that red is decidable, but you need that to build a fintype using filter and sublists the way I described</p>",
        "id": 125478797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280627
    },
    {
        "content": "<p>aha</p>",
        "id": 125478798,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280637
    },
    {
        "content": "<p>you could also directly enumerate the red related lists</p>",
        "id": 125478800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280661
    },
    {
        "content": "<p>which amounts to writing another reduce-like function</p>",
        "id": 125478803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280681
    },
    {
        "content": "<p>i.e. with a core</p>",
        "id": 125478840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280684
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">hd</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">hd</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"n\">tl</span> <span class=\"k\">else</span> <span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">(</span><span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"n\">tl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">reduce</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">[]</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n</pre></div>",
        "id": 125478843,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280693
    },
    {
        "content": "<p>speaking of which, I don't understand why your definition is so convoluted</p>",
        "id": 125478845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280713
    },
    {
        "content": "<p>why the reverse?</p>",
        "id": 125478846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280718
    },
    {
        "content": "<p>because it gets reversed</p>",
        "id": 125478848,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280728
    },
    {
        "content": "<p>...</p>",
        "id": 125478849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280734
    },
    {
        "content": "<p>so I have a word <code>[a,b,c,d,e,f,g,h]</code></p>",
        "id": 125478850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280736
    },
    {
        "content": "<p>my pointer goes from left to right</p>",
        "id": 125478852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280742
    },
    {
        "content": "<p>and the left of the pointer gets reversed</p>",
        "id": 125478857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280757
    },
    {
        "content": "<p>because the heads are at <code>d</code> and <code>e</code> respectively</p>",
        "id": 125478859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280764
    },
    {
        "content": "<p>you can output either reversed or not, depending on how you structure the recursive call</p>",
        "id": 125478860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280785
    },
    {
        "content": "<p>after the traversal of the list, it will become <code>[h,g,f,c,b,a]</code></p>",
        "id": 125478861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280786
    },
    {
        "content": "<p>look at how <code>list.foldl</code> and <code>list.foldr</code> are defined</p>",
        "id": 125478863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280798
    },
    {
        "content": "<p>basically</p>",
        "id": 125478898,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280803
    },
    {
        "content": "<p>I destructed the list once, so it has to get reversed</p>",
        "id": 125478907,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280810
    },
    {
        "content": "<p>What's wrong with Johannes's definition of reduce?</p>",
        "id": 125478908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524280819
    },
    {
        "content": "<p>it's less efficient</p>",
        "id": 125478910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280835
    },
    {
        "content": "<p>my algorithm is O(n)</p>",
        "id": 125478914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280857
    },
    {
        "content": "<p>his algorithm is O(n^2)</p>",
        "id": 125478916,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280861
    },
    {
        "content": "<p>[don't quote me on this]</p>",
        "id": 125478921,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524280868
    },
    {
        "content": "<p>To be clear, I'm talking about the following definition:</p>\n<div class=\"codehilite\"><pre><span></span>def reduce {α} [decidable_eq α] : list (α × bool) → list (α × bool)\n| ((a₁, p) :: (a₂, n) :: xs) :=\n  if a₁ = a₂ ∧ p ≠ n then reduce xs\n  else (a₁, p) :: reduce ((a₂, n) :: xs)\n| l := l\n</pre></div>",
        "id": 125479008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524281048
    },
    {
        "content": "<p>that's wrong</p>",
        "id": 125479010,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281069
    },
    {
        "content": "<p>as I painfully realized two days ago</p>",
        "id": 125479011,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281076
    },
    {
        "content": "<p>because <code>[a,b,b^-1,a^-1]</code> becomes <code>[a,a^-1]</code></p>",
        "id": 125479014,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281104
    },
    {
        "content": "<p>Fair enough. What about this then:</p>\n<div class=\"codehilite\"><pre><span></span>def reduce {α} [decidable_eq α] : list (α × bool) → list (α × bool)\n| ((a₁, p) :: xs) :=\n  match reduce xs with\n  | (a₂, n) :: xs&#39; :=\n    if a₁ = a₂ ∧ p ≠ n then xs&#39;\n    else (a₁, p) :: (a₂, n) :: xs&#39;\n  | [] := [(a₁, p)]\n  end\n| l := l\n</pre></div>",
        "id": 125479112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524281344
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 125479117,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281374
    },
    {
        "content": "<p>aha</p>",
        "id": 125479119,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281385
    },
    {
        "content": "<p>somehow my gut says this is n^2 also</p>",
        "id": 125479162,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281430
    },
    {
        "content": "<p>it seems to work</p>\n<div class=\"codehilite\"><pre><span></span>#eval reduce [(0, tt), (1, tt), (1, ff), (0, ff), (0, tt), (0, ff)]\n</pre></div>",
        "id": 125479164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524281442
    },
    {
        "content": "<p>my gut might be wrong</p>",
        "id": 125479165,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281444
    },
    {
        "content": "<p>I don't think it is since it's one-pass</p>",
        "id": 125479166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524281456
    },
    {
        "content": "<p>this is what I mean by \"depending on how you use the IH\"</p>",
        "id": 125479173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524281468
    },
    {
        "content": "<p>interesting</p>",
        "id": 125479174,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281470
    },
    {
        "content": "<p>that's clever</p>",
        "id": 125479175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281488
    },
    {
        "content": "<p>you can either process and then call the IH, or call the IH and then process, or both</p>",
        "id": 125479176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524281488
    },
    {
        "content": "<p>that's how <code>foldl</code> and <code>foldr</code> get different results</p>",
        "id": 125479177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524281515
    },
    {
        "content": "<p>I have much more to learn</p>",
        "id": 125479265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524281680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the lifting theorem is really a pain</p>",
        "id": 125481027,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286060
    },
    {
        "content": "<p>I need some guidance from you</p>",
        "id": 125481028,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286070
    },
    {
        "content": "<p>it isn't really straightforward</p>",
        "id": 125481029,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">L₂</span> <span class=\"n\">L4</span> <span class=\"n\">L5</span> <span class=\"n\">L6</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">H45</span> <span class=\"o\">:</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L4</span> <span class=\"n\">L5</span><span class=\"o\">,</span>\n<span class=\"n\">H56</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L5</span> <span class=\"n\">L6</span><span class=\"o\">,</span>\n<span class=\"n\">H26</span> <span class=\"o\">:</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₂</span> <span class=\"n\">L6</span><span class=\"o\">,</span>\n<span class=\"n\">H24</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">L4</span><span class=\"o\">,</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">L5</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"n\">L5</span> <span class=\"n\">L₂</span>\n<span class=\"err\">⊢</span> <span class=\"n\">red</span> <span class=\"n\">L4</span> <span class=\"n\">L₂</span>\n</pre></div>",
        "id": 125481070,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286127
    },
    {
        "content": "<p>wrong thread</p>",
        "id": 125481071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524286136
    },
    {
        "content": "<p>this is the hardest part of the proof</p>",
        "id": 125481077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286164
    },
    {
        "content": "<p>the rest is just induction</p>",
        "id": 125481078,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286167
    },
    {
        "content": "<p>wait, I'm confused. What's the statement and proof so far?</p>",
        "id": 125481129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524286273
    },
    {
        "content": "<p>the thing I sent you just there</p>",
        "id": 125481132,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286290
    },
    {
        "content": "<p>is the inductive step</p>",
        "id": 125481133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286292
    },
    {
        "content": "<p>the rest is just induction that I can do</p>",
        "id": 125481135,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286297
    },
    {
        "content": "<p>I know, but it doesn't make any sense</p>",
        "id": 125481137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524286305
    },
    {
        "content": "<p>oh, the lifting theorem</p>",
        "id": 125481138,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286315
    },
    {
        "content": "<p>I don't understand what got you to this point</p>",
        "id": 125481139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524286317
    },
    {
        "content": "<p>if reduce L1 = reduce L2 and L2 is a sublist of L1, then red L1 L2</p>",
        "id": 125481178,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286334
    },
    {
        "content": "<p>ah, I was thinking about that but I'm not sure it's a theorem</p>",
        "id": 125481181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524286357
    },
    {
        "content": "<p>aha</p>",
        "id": 125481182,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286361
    },
    {
        "content": "<p>I thought it's true</p>",
        "id": 125481183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286371
    },
    {
        "content": "<p>my gut tells me so</p>",
        "id": 125481184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286374
    },
    {
        "content": "<p>now to make it more like the lifting theorem, we restate it:</p>",
        "id": 125481190,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286388
    },
    {
        "content": "<p>if red L1 L3 and red L2 L3, and that L2 is a sublist of L1, then red L1 L2</p>",
        "id": 125481191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286400
    },
    {
        "content": "<p>I can't really come up with a counter-example</p>",
        "id": 125481233,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286466
    },
    {
        "content": "<p>I can think of examples where the lift is not really trivial</p>",
        "id": 125481234,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524286475
    },
    {
        "content": "<p>Okay, I'm still not on board with saying it's definitely true but we can try to prove it anyway. Let's show that if <code>red L1 L3</code> and <code>red L2 L3</code>, then <code>L2 &lt;+ L1</code> implies <code>red L1 L2</code>. Proof by induction on <code>red L2 L3</code>, reducing to the following lemma: if <code>red L1 L3</code> and <code>red.step L2 L3</code> and <code>L2 &lt;+ L1</code> then <code>red L1 L2</code>. Now you have some list details by comparing <code>red.step</code> with <code>&lt;+</code></p>",
        "id": 125481761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524287781
    },
    {
        "content": "<p>aha, counterexample: <code>abb⁻¹a⁻¹</code> has a sublist <code>bb⁻¹</code> which reduces to <code>[]</code>, but <code>abb⁻¹a⁻¹</code> does not reduce to <code>bb⁻¹</code></p>",
        "id": 125481943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524288292
    },
    {
        "content": "<p>aha!</p>",
        "id": 125482387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524289363
    },
    {
        "content": "<p>nice, thanks</p>",
        "id": 125482389,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524289369
    },
    {
        "content": "<p>so, how might we prove that red is decidable?</p>",
        "id": 125482394,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524289389
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def is_red {α} [decidable_eq α] : list (α × bool) → list (α × bool) → bool\n| [] [] := tt\n| [] ((b, q) :: ys) := ff\n| ((a, p) :: xs) [] := is_red xs [(a, bnot p)]\n| ((a, p) :: xs) ((b, q) :: ys) :=\n  if (a, p) = (b, q) then is_red xs ys else\n  is_red xs ((a, bnot p) :: (b, q) :: ys)\n</pre></div>\n\n\n<p>replace <code>bool</code> with <code>decidable</code> and insert proofs</p>",
        "id": 125482941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524290652
    },
    {
        "content": "<p>aha</p>",
        "id": 125482944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524290696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should I inject your name onto the top of the file</p>",
        "id": 125484985,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524295641
    },
    {
        "content": "<p>If you want... I've got enough credits on mathlib already, I don't need to be stealing it from others ;)</p>",
        "id": 125485472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524296942
    },
    {
        "content": "<p>I guess the full combined file on free groups when it gets finished will be joint work of all three of us, there's been a lot of collaboration on it</p>",
        "id": 125485519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524297041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">of_cons</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">L₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">L₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">L1</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">L2</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">L3</span> <span class=\"n\">L3</span> <span class=\"n\">L4</span> <span class=\"n\">L5</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">H1</span><span class=\"bp\">;</span> <span class=\"n\">injections</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step_trans</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">H3</span> <span class=\"k\">with</span> <span class=\"n\">L6</span> <span class=\"n\">L7</span> <span class=\"n\">x1</span> <span class=\"n\">b1</span><span class=\"o\">,</span>\n    <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">L6</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n    <span class=\"o\">{</span> <span class=\"n\">injection</span> <span class=\"n\">H1</span> <span class=\"k\">with</span> <span class=\"n\">H5</span> <span class=\"n\">H6</span><span class=\"o\">,</span>\n      <span class=\"n\">substs</span> <span class=\"n\">H5</span> <span class=\"n\">H6</span><span class=\"o\">,</span>\n      <span class=\"n\">clear</span> <span class=\"n\">H1</span> <span class=\"n\">H3</span><span class=\"o\">,</span>\n      <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">H4</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span>\n    <span class=\"o\">{</span> <span class=\"n\">injection</span> <span class=\"n\">H1</span> <span class=\"k\">with</span> <span class=\"n\">H5</span> <span class=\"n\">H6</span><span class=\"o\">,</span>\n      <span class=\"n\">substs</span> <span class=\"n\">H5</span> <span class=\"n\">H6</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125492272,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524314137
    },
    {
        "content": "<p>why so long</p>",
        "id": 125492273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524314138
    }
]