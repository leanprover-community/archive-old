[
    {
        "content": "<p>The library note <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#function%20coercion\">function coercion</a> points out that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_fn_coe_base\">docs#coe_fn_coe_base</a> is likely to cause <code>simp</code> loops, if you have a <code>@[simp] lemma foo_hom.coe_coe (f : foo_hom A B) : ((f : bar_hom A B) : A → B) = (f : A → B)</code>. As a consequence, each <code>foo_hom</code> has to declare its own <code>has_coe_to_fn</code> instance.</p>\n<p>I can't think of any types where we really want to have the double coercion as the <code>simp</code> normal form, so why is <code>coe_fn_coe_base</code> actually a <code>simp</code> lemma at all?</p>",
        "id": 228936673,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614943146
    },
    {
        "content": "<p>(I'm currently rebuilding mathlib with the <code>simp</code> attribute removed, no errors yet...)</p>",
        "id": 228937827,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614943776
    },
    {
        "content": "<p>EDIT: sorry wrong lemma</p>",
        "id": 228938112,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614943923
    },
    {
        "content": "<p>For everybody else who got confused, Anne wants to remove the <code>⇑x = ⇑↑x</code> lemma.</p>",
        "id": 228938268,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614943994
    },
    {
        "content": "<p>Isn't the problem that the <code>⇑</code> on the LHS and RHS are different operations, and that the simp lemmas about say <code>ring_hom</code> will only be about the one that's defeq to <code>ring_hom.has_coe_to_fun</code>?</p>",
        "id": 228938415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614944068
    },
    {
        "content": "<p>nevermind, sorry</p>",
        "id": 228938981,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614944375
    },
    {
        "content": "<p>If <code>coe_fn_coe_base</code> is actually used anywhere, that issue would be solved, but we'd have to deal with <code>⇑↑↑↑↑(f : alg_hom A B)</code> as a simp-normal form. (Since we can go <code>alg_hom -&gt; ring_hom -&gt; monoid_with_zero_hom -&gt; monoid_hom -&gt; mul_hom</code>.)</p>",
        "id": 228939319,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614944532
    },
    {
        "content": "<p>I found a counterexample where <code>coe_fn_coe_base</code> is needed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">module.lean</span><span class=\"o\">:</span><span class=\"mi\">1369</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">solve1</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">focused</span> <span class=\"n\">goal</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">solved</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">M₂</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">topological_add_group</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M₂</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_8</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n<span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">e.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 228939801,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614944800
    },
    {
        "content": "<p>... and another instance of <code>coe_fn (f : units _)</code> in <code>mathlib/src/analysis/calculus/fderiv.lean:2128</code></p>",
        "id": 228944069,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614947041
    },
    {
        "content": "<p>If <code>⇑↑↑↑↑f</code> were the simp-normal form, then presumably we would no longer need <code>ring_hom.map_mul</code> as a simp lemma because <code>⇑↑(↑↑↑f) (x * y)</code> would match <code>mul_hom.map_mul (↑↑↑f) x y</code>?</p>",
        "id": 228944391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614947209
    },
    {
        "content": "<p>I think so, although it is quite probable it will then fail to match <code>⇑↑(↑↑↑f) 1</code>with <code>one_hom.map_one</code>.</p>",
        "id": 228944576,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614947307
    },
    {
        "content": "<p>Oh good point, diamonds make that not a good idea at all</p>",
        "id": 228944652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614947347
    },
    {
        "content": "<p>In addition to the pile of arrows already being not a good idea at all</p>",
        "id": 228944690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614947368
    },
    {
        "content": "<p>Compilation finished. In summary I see:</p>\n<ul>\n<li>2 <code>simp</code>s that require adding <code>coe_fn_coe_base</code></li>\n<li>2 existing <code>simp only [coe_fn_coe_base, ...]</code></li>\n<li>2 existing <code>rw ← coe_fn_coe_base</code></li>\n<li>4 existing <code>simp [-coe_fn_coe_base, ...]</code></li>\n</ul>",
        "id": 228945604,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614947805
    },
    {
        "content": "<p>Did you test what happens if you also remove the <code>has_coe_to_fun</code> instances?</p>",
        "id": 228945684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614947845
    },
    {
        "content": "<p>Not yet</p>",
        "id": 228945767,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614947884
    },
    {
        "content": "<p>One example, in <code>algebra/group/hom.lean</code> is <code>monoid_hom.comp</code>: this fails (times out) if <code>coe_fn_coe_base</code> is <code>@[simp]</code> and there is no <code>has_coe_to_fun</code> instance for <code>monoid_hom</code>. Removing the <code>simp</code> attribute as well, makes it work again.</p>",
        "id": 228946255,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614948146
    },
    {
        "content": "<p>Because of diamonds we indeed have that only one of <code>one_hom.map_one</code> or <code>mul_hom.map_mul</code> gets matched with <code>monoid_hom</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_hom.map_mul</span><span class=\"o\">,</span> <span class=\"n\">coe_fn_coe_base</span><span class=\"o\">]</span>\n<span class=\"c1\">-- works, `⇑f (a * b) ==&gt; ⇑↑f (a * b) ==&gt; ⇑↑f a * ⇑↑f b &lt;== ⇑f a * ⇑f b`</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_hom.map_one</span><span class=\"o\">,</span> <span class=\"n\">coe_fn_coe_base</span><span class=\"o\">]</span>\n<span class=\"c1\">-- fails, `⇑↑f 1 = 1`</span>\n</code></pre></div>",
        "id": 228946728,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614948378
    },
    {
        "content": "<p>In your branch with both <code>has_coe_to_fun</code> on all but <code>mul_hom</code> / <code>one_hom</code> and <code>coe_fn_coe_base</code> removed, I assume?</p>",
        "id": 228946849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614948434
    },
    {
        "content": "<p>In which case, it seems like <code>coe_fn_coe_base</code> is sort of a sanity check that users remembered to define the has_coe_to_fun to avoid that issue, even if it rarely comes up in actual use?</p>",
        "id": 228947005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614948526
    },
    {
        "content": "<p>Shouldn't we leave these checks up to the linter, instead of having to diagnose it via <code>simp</code> timeouts? :P</p>",
        "id": 228947098,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614948598
    },
    {
        "content": "<p>Doesn't the presence of <code>coe_fn_coe_base</code> cause the simp linter to complain about downstream lemmas about types missing has_coe_to_fun?</p>",
        "id": 228947225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614948657
    },
    {
        "content": "<p>Or does it cause the linter itself to timeout?</p>",
        "id": 228947243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614948666
    },
    {
        "content": "<p>It causes <code>simp</code> calls to timeout if there are <code>simp</code> lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.to_mul_hom_coe\">docs#monoid_hom.to_mul_hom_coe</a> that turn <code>⇑↑f</code> back into <code>⇑f</code> (in this case via <code>⇑(f.to_mul_hom)</code>.</p>",
        "id": 228947718,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614948901
    },
    {
        "content": "<p>I pushed 2 commits to GitHub if you want to check it out: <a href=\"https://github.com/leanprover-community/mathlib/commit/36ce6ed48233102677000c9ec42f6a31fc427892\">https://github.com/leanprover-community/mathlib/commit/36ce6ed48233102677000c9ec42f6a31fc427892</a>  and <a href=\"https://github.com/leanprover-community/mathlib/commit/38163b184a7e43dcc826a9d5cabfc672c7167a14\">https://github.com/leanprover-community/mathlib/commit/38163b184a7e43dcc826a9d5cabfc672c7167a14</a></p>",
        "id": 228947972,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614949014
    },
    {
        "content": "<p>I looked into the build error if you remove the <code>has_coe_to_fn</code> instance, looks like <code>simps</code> doesn't realize that there still is a coercion to a function and starts generating lemmas of the form <code>f.to_fun _ = _</code> instead of <code>⇑f _ = _</code>.</p>",
        "id": 228966389,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614956203
    },
    {
        "content": "<p>Seems to be fixed when manually adding the projection, but I'm wondering why it's not found.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">monoid_hom.simps.to_fun</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">coe_fn</span>\n</code></pre></div>",
        "id": 228967572,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614956574
    }
]