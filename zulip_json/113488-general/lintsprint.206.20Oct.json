[
    {
        "content": "<p>Thank you so much! With concerted efforts, we removed more than 10% of the nolints.txt file, yesterday.<br>\nHere is what the file looks like now: <a href=\"https://github.com/leanprover-community/mathlib/blob/bc06cef96855ccf689d4ae26d2eb5cd131965b7a/scripts/nolints.txt\">https://github.com/leanprover-community/mathlib/blob/bc06cef96855ccf689d4ae26d2eb5cd131965b7a/scripts/nolints.txt</a></p>\n<p>Note that there are still 7 lintfix PRs that are open: <a href=\"https://github.com/leanprover-community/mathlib/labels/lintfix\">https://github.com/leanprover-community/mathlib/labels/lintfix</a><br>\nSo if you want to contribute, please take a look to see that you aren't duplicating efforts.</p>",
        "id": 212380381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601953974
    },
    {
        "content": "<p>I'll start on <code>data/equiv/ring</code> (<a href=\"https://github.com/leanprover-community/mathlib/issues/4460\">#4460</a>) and <code>eckmann_hilton</code> (<a href=\"https://github.com/leanprover-community/mathlib/issues/4459\">#4459</a>)</p>",
        "id": 212380650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601954350
    },
    {
        "content": "<p><code>logic/unique</code> (<a href=\"https://github.com/leanprover-community/mathlib/issues/4461\">#4461</a>)</p>",
        "id": 212382168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601956400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> How do you get rid of an inhabited instance lint error?  Eg, in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.closeds\">docs#topological_space.closeds</a>, I have tried variants on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The type of closed subsets is inhabited, with default element the empty set. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">closeds</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">is_closed_empty</span> <span class=\"o\">⟩⟩</span>\n</code></pre></div>\n\n<p>but can't figure out the exact format to satisfy the linter.</p>",
        "id": 212382261,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601956529
    },
    {
        "content": "<p>What happens if you make the <code>example</code> into an <code>instance</code>?</p>",
        "id": 212382543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601956894
    },
    {
        "content": "<p>That should do the trick, I think</p>",
        "id": 212382554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601956905
    },
    {
        "content": "<p>(edited, not sure this made sense)</p>",
        "id": 212382647,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601956994
    },
    {
        "content": "<p>I think I'm mixing up a few unrelated pieces of good advice ...</p>",
        "id": 212382809,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601957165
    },
    {
        "content": "<p>And second question: it's ok to fix an inhabited instance lint error with <code>nolint</code> plus a docstring, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- .... The type is not necessarily inhabited, for example (1) if `α` is empty,</span>\n<span class=\"sd\">(2) if `α` is infinite and has the trivial topology. -/</span>\n<span class=\"kd\">@[nolint has_inhabited_instance]</span>\n</code></pre></div>",
        "id": 212382839,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601957229
    },
    {
        "content": "<p>Yes, that sounds fine</p>",
        "id": 212383077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601957548
    },
    {
        "content": "<p>(Although I'm for the moment maths-confused about (2). Why doesn't the empty set work in that case?)</p>",
        "id": 212383082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601957576
    },
    {
        "content": "<p>It seems the linter is happy with any instance, even if it only exists conditionally. (I don't fully understand the motivation to lint for <code>inhabited</code> instances. Maybe you're supposed to think about having some amount of useful coverage?)</p>",
        "id": 212383085,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601957580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/lintsprint.206.20Oct/near/212383082\">said</a>:</p>\n<blockquote>\n<p>(Although I'm for the moment maths-confused about (2). Why doesn't the empty set work in that case?)</p>\n</blockquote>\n<p>This is to fix the other inhabited instance error, on \"<em>nonempty</em> compacts\".  But I think (2) is wrong for other reasons.</p>",
        "id": 212383176,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601957705
    },
    {
        "content": "<p><code>topology/closeds</code> <a href=\"https://github.com/leanprover-community/mathlib/issues/4462\">#4462</a></p>\n<p>thanks to <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> 's trick, no need for the nolint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">nonempty_compacts_inhabited</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">nonempty_compacts</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212383524,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601958197
    },
    {
        "content": "<p>I also don't really see the point of the inhabited instances linter. It's good to have inhabited instances for things where it is easy to determine whether they are inhabited (like <code>ℕ</code> or <code>α × β</code>) but not really useful when it's not so easy to determine (like <code>α ≃ β</code>). <br>\nI think we should be very liberal with adding <code>@[nolint has_inhabited_instance]</code>.</p>",
        "id": 212384717,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601959819
    },
    {
        "content": "<p>The idea with the inhabited instances linter was to make sure that we have the obvious instances for <code>inhabited (finset α)</code>, <code>inhabited (α →₀ β)</code>, etc.  (Quite a few were missing, actually.)  You're not expected to add inhabited instances for <code>α ≃ β</code>, etc.</p>",
        "id": 212391130,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601967884
    },
    {
        "content": "<p>Some people like the linter because it reminds you to add an example value of your new type.</p>",
        "id": 212391258,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601967972
    },
    {
        "content": "<p>Is anyone taking care of <code>data/matrix/basic</code> ? Otherwise I'll do it</p>",
        "id": 212393953,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1601970064
    },
    {
        "content": "<p>Not yet, as far as I know</p>",
        "id": 212394259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601970263
    },
    {
        "content": "<p>Claiming <code>ring_theory/*</code> <a href=\"https://github.com/leanprover-community/mathlib/issues/4485\">#4485</a></p>",
        "id": 212493551,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602022995
    },
    {
        "content": "<p><code>order/bounded_lattice</code> <a href=\"https://github.com/leanprover-community/mathlib/issues/4484\">#4484</a></p>",
        "id": 212494367,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602023616
    },
    {
        "content": "<p><code>order/order_iso_nat</code> <a href=\"https://github.com/leanprover-community/mathlib/issues/4488\">#4488</a></p>",
        "id": 212496010,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602024893
    },
    {
        "content": "<p><code>order/lexicographic, order/pilex</code> <a href=\"https://github.com/leanprover-community/mathlib/issues/4489\">#4489</a></p>",
        "id": 212497454,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602026074
    },
    {
        "content": "<p>I'm going over topological monoids and group with API&amp;doc review.</p>",
        "id": 212509507,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602038243
    },
    {
        "content": "<p><code>group_theory/perm/*</code>. I hope I accurately described all the <code>sign_aux</code> functions, <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 212513557,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1602043955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/lintsprint.206.20Oct/near/212509507\">said</a>:</p>\n<blockquote>\n<p>I'm going over topological monoids and group with API&amp;doc review.</p>\n</blockquote>\n<p>Note that the situation with uniform structure of topological groups is still something of a mess. It has been on my TODO list since the end of the perfectoid project to refactor this. If you are interested I can tell you the plan (but I get to choose I would much prefer you work on convexity...).</p>",
        "id": 212521335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602054336
    },
    {
        "content": "<p>I don't want to do a big refactor there.</p>",
        "id": 212592384,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602091858
    },
    {
        "content": "<p>Just move some lemmas go <code>topology/algebra/monoid</code>, rename vars.</p>",
        "id": 212592497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602091919
    },
    {
        "content": "<p>That's ok, but just don't label it <code>lintfix</code>.</p>",
        "id": 212592734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602091999
    },
    {
        "content": "<p>I won't. BTW, I'm fixing <code>logic/unique</code>, including <code>lintfix</code>. E.g., we didn't have <code>pi.unique</code> instance!</p>",
        "id": 212592904,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602092063
    },
    {
        "content": "<p>I want <code>linear_map.unique_of_left/right</code> for <a href=\"https://github.com/leanprover-community/mathlib/issues/4407\">#4407</a></p>",
        "id": 212593166,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602092185
    }
]