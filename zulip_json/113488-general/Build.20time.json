[
    {
        "content": "<p>Build time according to build bot was stable around 105 minutes, but the two last builds took 113 minutes and 117 minutes. Noise?</p>",
        "id": 199606211,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591182656
    },
    {
        "content": "<p>That seems a bit much for noise</p>",
        "id": 199606359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591182815
    },
    {
        "content": "<p>Isn't it obvious that the new <code>C_inj</code> lemma has increased build time by 10 minutes?</p>",
        "id": 199606361,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591182817
    },
    {
        "content": "<p>I'm not sure if I am joking or not.  <code>C r = C s</code> has several implicit arguments, multiple function coercions, and it is checked every time the simplifier sees an equation.  I wouldn't rule out the possibility that unification happens to do something horribly expensive with this lemma.</p>",
        "id": 199606667,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591183087
    },
    {
        "content": "<p>Hmmm... in that case maybe we should kick it out of the simp set? (And leave a comment explaining why.)</p>",
        "id": 199610335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591185875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Maybe I'm dense, but what is the coercion to function? <code>C</code> is an ordinary function.</p>",
        "id": 199611175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591186407
    },
    {
        "content": "<p>Oh, you're right.  Only the seconden argument triggers the coercion.</p>",
        "id": 199611273,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591186468
    },
    {
        "content": "<p>I'm still confused. <code>C</code> is not a bundled morphism.</p>",
        "id": 199611333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591186508
    },
    {
        "content": "<p>In thuis case, it looks much lees problematic and I have no idea what's going on.</p>",
        "id": 199611340,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591186514
    },
    {
        "content": "<p>(Maybe it will be in the future, but it isn't right now.)</p>",
        "id": 199611358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591186521
    },
    {
        "content": "<p>Don't polynomiale have a function coercion?</p>",
        "id": 199611394,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591186551
    },
    {
        "content": "<p>Not a reliable one. The API is to use <code>polynomial.coeff</code>.</p>",
        "id": 199611725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591186776
    },
    {
        "content": "<p>But they are defeq to <code>finsupp</code>, which does have the function coercion.</p>",
        "id": 199611738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591186790
    },
    {
        "content": "<p>Sometimes this leaks</p>",
        "id": 199611743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591186794
    }
]