[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can't figure out how to prove <code>hn</code>. I've tried some combinations of rw and simp but I can't seem to get to to work. I think the problem is that my simp and rw are only acting on the lhs. I've tried using calc, but I also get stuck.</p>",
        "id": 289750175,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657902430
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_add_add_comm\">docs#add_add_add_comm</a></p>",
        "id": 289750243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657902475
    },
    {
        "content": "<p>Rewriting by that will get you to the point where it's easy</p>",
        "id": 289750353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657902521
    },
    {
        "content": "<p>Ah, that's handy.</p>",
        "id": 289750442,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657902569
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 289750459,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657902577
    },
    {
        "content": "<p>How do you deal with something more complex like say <code>n + 10 = n1 + 1 + (n2 + 2) + ... + (n10 + 1)</code>?</p>",
        "id": 289750753,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657902710
    },
    {
        "content": "<p>Try <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#omega\">tactic#omega</a></p>",
        "id": 289750900,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657902753
    },
    {
        "content": "<p>If I just say <code>by omega nat</code>, it doesn't work in the <code>n + 2</code> case.</p>",
        "id": 289751117,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657902845
    },
    {
        "content": "<p><code>omega</code> should be avoided, it is super slow and it won't be ported to Lean 4.</p>",
        "id": 289751312,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657902944
    },
    {
        "content": "<p>linarith also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 289751421,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657902982
    },
    {
        "content": "<p>This is precisely the kind of problem that <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a> is made for. I believe <code>linarith</code> solves this goal because it preprocesses using <code>ring</code>. Maybe also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#abel\">tactic#abel</a> will work, depending on how well it knows that <code>2 = 1 + 1</code>.</p>",
        "id": 289751827,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657903173
    }
]