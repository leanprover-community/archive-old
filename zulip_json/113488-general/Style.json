[
    {
        "content": "<p>Let's play a new game: each time someone opens a PR and is asked for style corrections, we check whether <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/style.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/style.md\">https://github.com/leanprover/mathlib/blob/master/docs/style.md</a> and <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/naming.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/naming.md\">https://github.com/leanprover/mathlib/blob/master/docs/naming.md</a> already have them. If not we open something like <a href=\"https://github.com/leanprover/mathlib/pull/95\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/95\">https://github.com/leanprover/mathlib/pull/95</a></p>",
        "id": 124809981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523220665
    },
    {
        "content": "<p>Everybody can play, and make contributing to, and maintaining, mathlib slightly easier</p>",
        "id": 124810074,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523220861
    },
    {
        "content": "<p>Good idea! How do we pick a winner?</p>",
        "id": 124811606,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523224637
    },
    {
        "content": "<p>In the best games, everybody wins.</p>",
        "id": 124812645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523227103
    },
    {
        "content": "<p>\"Everybody has won and all must have prizes.\"</p>",
        "id": 124812653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523227191
    },
    {
        "content": "<p>What is the recommended spacing in mathlib?</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"o\">{</span> <span class=\"bp\">...</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}}</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"o\">{</span> <span class=\"bp\">...</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"o\">{</span> <span class=\"bp\">...</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 162046511,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553866512
    },
    {
        "content": "<p>second</p>",
        "id": 162046547,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553866560
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 162046830,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553866776
    },
    {
        "content": "<p>Another one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">⟨</span><span class=\"k\">begin</span>\n  <span class=\"bp\">...</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">⟨</span><span class=\"k\">begin</span>\n  <span class=\"bp\">...</span>\n<span class=\"kn\">end</span> <span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">⟨</span> <span class=\"k\">begin</span>\n  <span class=\"bp\">...</span>\n<span class=\"kn\">end</span> <span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 162046970,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553866872
    },
    {
        "content": "<p>Here I prefer the first one.</p>",
        "id": 162047081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553866942
    },
    {
        "content": "<p>The first one</p>",
        "id": 162048065,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553867748
    },
    {
        "content": "<p>I would say</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">⟨</span> <span class=\"k\">begin</span>\n    <span class=\"bp\">...</span>\n  <span class=\"kn\">end</span> <span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 162061060,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553876989
    },
    {
        "content": "<p>Ah. I would say your suggestion is more readable, but it has the drawback of shifting the proof by 4 characters to the right (instead of two characters for the more condensed version).</p>",
        "id": 162069265,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553882271
    },
    {
        "content": "<p>you an also write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>In many cases a <code>refine</code> inside of the tactic block might be necessary anyway.</p>",
        "id": 162070226,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553882864
    },
    {
        "content": "<p>If there is only one case I would prefer option 1. If it's multiple cases I would use</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">&lt;</span><span class=\"n\">bla</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"bp\">_</span> <span class=\"bp\">_&gt;</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162070789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553883250
    },
    {
        "content": "<p>Are the following acceptable styles?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162074219,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1553885534
    },
    {
        "content": "<p>I prefer to bracket both cases in the second example, but the first one is common</p>",
        "id": 162074289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553885584
    },
    {
        "content": "<p>If one subgoal is much shorter than the other, then you should arrange it so that the short goal comes first and then you can skip the second brackets</p>",
        "id": 162074407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553885649
    },
    {
        "content": "<p>Who wants to update the style guide to record all that?</p>",
        "id": 162075061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553886143
    },
    {
        "content": "<p>What are the thoughts in the Lean community about multiple synonym/names for a certain theorem? Are there any strategies on how to do that or do people have concerns against doing that?</p>\n<p>For example, I was looking for something like \"submodule.le_zero\" and I wouldn't want to have to dig into lattices and their \\bot element, just to get that.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">submodule</span>\n        <span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n        <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n        <span class=\"kn\">lemma</span> <span class=\"n\">le_zero</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n                <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">bot_le</span>\n<span class=\"kn\">end</span> <span class=\"kn\">namespace</span>\n</pre></div>\n\n\n<p>Same goes with theorems that have very common names - again from my first \"exercise\" - e.g. I would want to find Nakayama's lemma preferable formulated in about 5 equivalent ways as something like <code>nakayama</code>, <code>nakayama_rephrased_1</code>, <code>nakayama_rephrased_2</code> or something along those lines, certainly not <code>exists_sub_one_mem_and_smul_eq_zero_of_fg_of_le_smul</code>.</p>",
        "id": 162163941,
        "sender_full_name": "snowbunting",
        "timestamp": 1554020894
    },
    {
        "content": "<p>The <code>le_zero</code> example is not recommended because that's not how we write the zero submodule</p>",
        "id": 162164543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554021988
    },
    {
        "content": "<p>I also have the feeling that the mathlib conventions deserve some updating on this issue. This is not only about finding statements, but also about readability of proofs.</p>",
        "id": 162164552,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022014
    },
    {
        "content": "<p>It is important to stick to a single expression consistently because that's the common language for all the simp lemmas and such</p>",
        "id": 162164563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022031
    },
    {
        "content": "<p>Introducing new constants shouldn't be the solution though</p>",
        "id": 162164564,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022040
    },
    {
        "content": "<p>Can we alias stuff?</p>",
        "id": 162164565,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022045
    },
    {
        "content": "<p>There is an <code>alias</code> command for exactly that, but it is not much used</p>",
        "id": 162164569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022061
    },
    {
        "content": "<p>Is it documented somewhere?</p>",
        "id": 162164616,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022086
    },
    {
        "content": "<p>There are probably less than 10 restated theorems in mathlib</p>",
        "id": 162164617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022088
    },
    {
        "content": "<p>and they are mostly because I thought that core had a dumb name for something</p>",
        "id": 162164619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022112
    },
    {
        "content": "<p>I agree that famous theorems should use famous names, especially if the symbol reading name is unenlightening or very long</p>",
        "id": 162164632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022160
    },
    {
        "content": "<p>The convention for restatements would be to use postfix <code>'</code> or <code>\\1</code>, <code>\\2</code> etc</p>",
        "id": 162164675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022204
    },
    {
        "content": "<p>There are also boundary cases, e.g. Johannes asked me to rename homogeneous to norm_smul in <a href=\"https://github.com/leanprover-community/mathlib/pull/680#discussion_r253305420\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/680#discussion_r253305420\">https://github.com/leanprover-community/mathlib/pull/680#discussion_r253305420</a></p>",
        "id": 162164681,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022219
    },
    {
        "content": "<p>I'm not claiming that homogeneous is the best name ever, but it would be nicer in some proofs</p>",
        "id": 162164683,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022251
    },
    {
        "content": "<p>So an alias might really do the trick ...</p>",
        "id": 162164689,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022262
    },
    {
        "content": "<p>If it is some kind of f(g x) = g (f x) statement I would definitely prefer the symbol reading name</p>",
        "id": 162164700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022270
    },
    {
        "content": "<p>If it is <code>\\ex x, foo x /\\ \\all y, bar x &lt;= f x + g y</code> then I would prefer a more informative name</p>",
        "id": 162164751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022351
    },
    {
        "content": "<p>How about the Cauchy Schwarz inequality?</p>",
        "id": 162164808,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022451
    },
    {
        "content": "<p>I could see a case for either, but I'd err on the side of symbol reading name</p>",
        "id": 162164811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022501
    },
    {
        "content": "<p>Is there a reason not to define an alias?</p>",
        "id": 162164821,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022533
    },
    {
        "content": "<p>the problem is that these theorems often have a few forms, and if they are algebraic manipulation lemmas then it's easier to get at them by the symbol reading name</p>",
        "id": 162164824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022548
    },
    {
        "content": "<p>The <code>alias</code> command still leaves some to be desired. I would like it if it was possible to have forwarding links, i.e. you type in <code>cauchy_s...</code> in autocomplete and <code>norm_mul_le</code> pops up (with an indication that it is redirecting from <code>cauchy_schwarz</code>)</p>",
        "id": 162164878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022635
    },
    {
        "content": "<p>I see your point for finding statements</p>",
        "id": 162164883,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022682
    },
    {
        "content": "<p>But in a proof I'd prefer an informative name</p>",
        "id": 162164927,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1554022697
    },
    {
        "content": "<p>I suppose you could also do it the other way around, seeing as the main reason for the symbol reading names is searchability</p>",
        "id": 162164937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022744
    },
    {
        "content": "<p>So how would that <code>alias</code> work? I see</p>\n<div class=\"codehilite\"><pre><span></span>/ -- doc string - /\nalias my_theorem ← alias1 alias2 ...\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>alias A_iff_B ↔ B_of_A A_of_B\n</pre></div>\n\n\n<p>in the comments, but <code>alias submodule.le_zero ← lattice.bot_le</code> does not work.</p>\n<p>What is the bad thing of doing</p>\n<div class=\"codehilite\"><pre><span></span>lemma le_zerro: ... :=\n        lattice.bot_le\n</pre></div>",
        "id": 162164991,
        "sender_full_name": "snowbunting",
        "timestamp": 1554022820
    },
    {
        "content": "<p>you have to import the tactic, I don't think it's in the default set</p>",
        "id": 162164992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022844
    },
    {
        "content": "<p>The tactic does basically the same thing as that, except it also gives it a nice docstring and attributes and stuff</p>",
        "id": 162165011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022881
    },
    {
        "content": "<p><code>alias</code> is a good way to document your intent about it too (otherwise people might just remove it to eliminate duplication)</p>",
        "id": 162165064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022935
    },
    {
        "content": "<p>Of course, <code>alias</code> is only for exact duplicates. If you want to change the statement it's not an alias</p>",
        "id": 162165069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022977
    },
    {
        "content": "<p>so <code>le_zero</code> isn't an example</p>",
        "id": 162165077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554022985
    },
    {
        "content": "<p>would you mind pointing me to a minimal working example? Also didn't see any documentation about docstrings yet, is there any tutorial/document where to read that stuff?</p>\n<p>Yes it is not, but since I could replace my <code>submodule.le_zero</code> in the proof with <code>lattice.bot_le</code>, it would be functionally an alias, wouldn't it? (I mean I only did write the lemma because I needed this fact in the proof and couldn't find it)</p>",
        "id": 162165192,
        "sender_full_name": "snowbunting",
        "timestamp": 1554023190
    },
    {
        "content": "<p>Just try it and see, it's not a particularly complicated tactic</p>",
        "id": 162165271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554023340
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"kn\">alias</span>\n\n<span class=\"kn\">section</span> <span class=\"kn\">end</span>\n\n<span class=\"kn\">alias</span> <span class=\"n\">add_comm</span> <span class=\"err\">←</span> <span class=\"n\">plus_comm</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">plus_comm</span> <span class=\"c1\">-- mouse over this, the docstring is &quot;**Alias** of `add_comm`&quot;</span>\n<span class=\"c1\">-- @[alias]</span>\n<span class=\"c1\">-- theorem plus_comm : ∀ {α : Type u} [_inst_1 : add_comm_semigroup α] (a b : α), a + b = b + a :=</span>\n<span class=\"c1\">-- add_comm</span>\n</pre></div>",
        "id": 162165349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554023478
    },
    {
        "content": "<p>By the way, that theorem would be called <code>zero_le</code> not <code>le_zero</code> anyway</p>",
        "id": 162165396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554023552
    },
    {
        "content": "<p>and that already exists and might even apply if you can prove submodules have the right structure</p>",
        "id": 162165397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554023581
    },
    {
        "content": "<p>but like I said, I strongly recommend against adding that theorem, because it will make you want to use <code>0</code> for the zero submodule, and you will be frustrated six more times for lack of other theorems talking about this submodule</p>",
        "id": 162165454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554023668
    },
    {
        "content": "<p>because it's uniformly called <code>bot</code> in the library</p>",
        "id": 162165456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554023681
    },
    {
        "content": "<p>thank you!</p>\n<p>I'm not going to make any pull request to the library, I am merely trying to figure out how things work, so the example here is rather a theoretical one. But I think it is good to know the options available for giving nicer, shorter notations to things, as this seems to be im my opinion quite important for the usability.</p>\n<p>I agree with you that I should use <code>\\bot</code> to match the library style, and also that I messed up the name there (I had first \"ge_zero\", then I changed the sign later).</p>",
        "id": 162166292,
        "sender_full_name": "snowbunting",
        "timestamp": 1554025296
    },
    {
        "content": "<p>Naming things is hard. It took me a long time to get over the fact that <code>mathlib</code> people were telling me the property that functors have is called <code>map_comp</code>, rather than <code>functoriality</code>.</p>",
        "id": 162166355,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554025402
    },
    {
        "content": "<p>I have grudgingly accepted their point, I think. :-)</p>",
        "id": 162166357,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554025413
    },
    {
        "content": "<p>absolutely, and it makes sense for searching when you can type something like <code>eq_of...</code> and it gives you all the options, so I generally like the naming style.</p>",
        "id": 162166479,
        "sender_full_name": "snowbunting",
        "timestamp": 1554025568
    },
    {
        "content": "<p>By the way, I've tried this kind of naming in the past. In the long term, you get confused by your own naming system, because it is difficult to name everything consistently this way and you have to look a lot more up</p>",
        "id": 162166539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554025687
    },
    {
        "content": "<p>you end up with ad hoc extensions to the naming system all over the place and it becomes a mess</p>",
        "id": 162166545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554025726
    },
    {
        "content": "<p>there just isn't enough creativity in the mathematical lexicon to name all the thousands of piddly lemmas that demand names</p>",
        "id": 162166561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554025801
    }
]