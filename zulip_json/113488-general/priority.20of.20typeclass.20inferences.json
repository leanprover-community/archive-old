[
    {
        "content": "<p>If I proved <code>A.to_B</code> and <code>A.to_C</code> and <code>B.to_D</code> and <code>C.to_D</code>, when I want to coerce <code>A</code> to <code>D</code>, how does Lean judge which path to use?</p>",
        "id": 125473385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524268036
    },
    {
        "content": "<p>Unless you explicitly set priorities using <code>@[priority n]</code>, the highest priority goes to the last declared instance. So if it's looking for a <code>D</code> and <code>C.to_D</code> was declared second, it uses that and looks for a <code>C</code>, finding <code>A.to_C</code>.</p>\n<p>That said, it is possible to end up with the other path if you perform a typeclass search before the second instance is declared, or if you compose typeclass proofs, so this is why I recommend <code>B.to_D (A.to_B inst)</code> be defeq to <code>C.to_D (A.to_C inst)</code> in this circumstance.</p>",
        "id": 125473768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524268750
    },
    {
        "content": "<p>is it even possible to make them defeq?</p>",
        "id": 125473817,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524268804
    },
    {
        "content": "<p>sure... most \"forgetful functor\" type instances will have this property</p>",
        "id": 125473893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524269041
    },
    {
        "content": "<p>aha, my functors are usually free functors though</p>",
        "id": 125473944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524269107
    },
    {
        "content": "<p>I'm making a free group ^^</p>",
        "id": 125473946,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524269115
    },
    {
        "content": "<p>do you have a particular diamond in mind?</p>",
        "id": 125473949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524269134
    },
    {
        "content": "<p>aha, I had one when I analyzed onote.repr wrongly</p>",
        "id": 125474065,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524269391
    },
    {
        "content": "<p>i.e. providing a constructive path that <code>nat.lt</code> is computably well-founded</p>",
        "id": 125474112,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524269410
    },
    {
        "content": "<p>By the way if you are on a quest to remove <code>noncomputable</code> you should start with the <code>ordinal</code> file which contains tons of <code>noncomputable</code> things</p>",
        "id": 125474123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524269486
    },
    {
        "content": "<p>you're right</p>",
        "id": 125474124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524269496
    },
    {
        "content": "<p>I think you will hit your head against some hard problems and realize it's impossible eventually, but feel free to try :)</p>",
        "id": 125474170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524269547
    },
    {
        "content": "<p>Kenny, did you follow the metric space / topological space story a couple of months ago?</p>",
        "id": 125505702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345067
    },
    {
        "content": "<p>Patrick was horrified to find that the _definition_ of metric space was a structure which included the metric _and_ the topology!</p>",
        "id": 125505705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345090
    },
    {
        "content": "<p>It turned out that it was because the mathlib people wanted the coercion from a metric space to a top space to be a forgetful functor!</p>",
        "id": 125505713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345115
    },
    {
        "content": "<p>Now they have the clever solution of putting the topology as part of the structure, but auto-generating it from the metric :-)</p>",
        "id": 125505759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345148
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/type_class_inference.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/type_class_inference.md\">https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/type_class_inference.md</a></p>",
        "id": 125505767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345212
    },
    {
        "content": "<p>Unfinished notes</p>",
        "id": 125505768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345215
    },
    {
        "content": "<p>Maybe I should add something from this thread</p>",
        "id": 125505770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345232
    }
]