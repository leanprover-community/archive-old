[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/monoid_localization.lean#L70-L76\">LL70-76, src/group_theory/monoid_localization.lean</a> reads:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The type of add_monoid homomorphisms satisfying the characteristic predicate: if `f : M →+ N`</span>\n<span class=\"sd\">satisfies this predicate, then `N` is isomorphic to the localization of `M` at `S`. -/</span>\n<span class=\"kd\">@[nolint has_inhabited_instance]</span> <span class=\"kd\">structure</span> <span class=\"n\">localization_map</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_monoid_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_add_units'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_add_unit</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">surj'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x.1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">eq_iff_exists'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm wondering whether we could as well have just defined it as a map <code>M →+ N</code> that induces an isomorphism <code>localization M S ≃+ N</code> (expressed howsoever), or even just an isomorphism <code>localization M S ≃+ N</code>. What's the difference?</p>",
        "id": 219574572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607674096
    },
    {
        "content": "<p>This is easier to use. I guess both definitions are equivalent, but these are the three properties which we have isolated as being super-useful when proving things about localisations.</p>",
        "id": 219603804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607692372
    }
]