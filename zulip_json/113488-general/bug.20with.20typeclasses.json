[
    {
        "content": "<p>Forgive me for not minimizing:</p>\n<div class=\"codehilite\"><pre><span></span>instance structure_presheaf_value_has_zero {R : Type*} [comm_ring R] (U : set (X R)) (HU : is_open U) :\n  has_zero (structure_presheaf_value U HU) :=\n⟨⟨λ P HP, 0, sorry⟩⟩\n#check λ {R : Type*} [comm_ring R] (U : set (X R)) (HU : is_open U), (by apply_instance : has_zero (structure_presheaf_value U HU))\n</pre></div>\n\n\n<p>Here the <code>#check</code> succeeds with this trace:</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : has_zero (@structure_presheaf_value R _inst_1 U HU) := @structure_presheaf_value_has_zero ?x_1 ?x_2 ?x_3 ?x_4\n[class_instances] (1) ?x_2 : comm_ring R := _inst_1\n</pre></div>\n\n\n<hr>\n<div class=\"codehilite\"><pre><span></span>instance structure_presheaf_value_has_zero {R : Type*} [comm_ring R] (U : set (X R)) (HU : is_open U) :\n  has_zero (structure_presheaf_value U HU) :=\n⟨⟨λ P HP, 0, λ u hu,\nlet ⟨V, ⟨f, hf⟩, huV, hVU⟩ := (D_f_form_basis R).2 U HU u hu in\n⟨f, hf ▸ huV, hf ▸ hVU, 0, λ Q hQ h2, eq.symm $ is_ring_hom.map_zero _⟩⟩⟩\n#check λ {R : Type*} [comm_ring R] (U : set (X R)) (HU : is_open U), (by apply_instance : has_zero (structure_presheaf_value U HU))\n</pre></div>\n\n\n<p>Here the <code>#check</code> fails with the following trace:</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : has_zero (@structure_presheaf_value R _inst_1 U HU) := @structure_presheaf_value_has_zero ?x_1 ?x_2 ?x_3 ?x_4\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_zero (@structure_presheaf_value R _inst_1 U HU) := rat.has_zero\nfailed is_def_eq\n[... more shenanigans ...]\n</pre></div>\n\n\n<hr>\n<p>But if I change the last line to:</p>\n<div class=\"codehilite\"><pre><span></span>#check λ {R : Type*} [comm_ring R] (U : set (X R)) (HU : is_open U), (structure_presheaf_value_has_zero U HU : has_zero (structure_presheaf_value U HU))\n</pre></div>\n\n\n<p>Then it succeeds with the following trace:</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : comm_ring R := _inst_1\n</pre></div>\n\n\n<hr>\n<p>any idea why?</p>",
        "id": 123411400,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1520451005
    },
    {
        "content": "<p>Can you show the definition of <code>structure_resheaf_value</code> along with any attributes it may have?</p>",
        "id": 123412417,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520452582
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition structure_presheaf_value {R : Type*} [comm_ring R] (U : set (X R)) (HU : is_open U) :=\n(structure_presheaf_of_types_on_affine_scheme R).F U HU\n</pre></div>",
        "id": 123412616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520452897
    },
    {
        "content": "<p>and then <code>instance structure_presheaf_value_has_add {R : Type*} [comm_ring R] (U : set (X R)) (HU : is_open U) :\n  has_add (structure_presheaf_value U HU) :=...</code></p>",
        "id": 123412661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520452932
    },
    {
        "content": "<p>and <code>instance structure_presheaf_value_has_neg</code>, mul , zero and one.</p>",
        "id": 123412667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520452960
    },
    {
        "content": "<p>Structures drive me nuts.</p>",
        "id": 123413523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520454344
    },
    {
        "content": "<p>I see different behaviour if I set <code>mul := [long definition]</code></p>",
        "id": 123413566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520454363
    },
    {
        "content": "<p>to if I make the long definition outside and let mul be that.</p>",
        "id": 123413577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520454375
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/708d11f6afbcffb0fd552cd7087100a1400fe40d/src/scheme.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/708d11f6afbcffb0fd552cd7087100a1400fe40d/src/scheme.lean\">https://github.com/kbuzzard/lean-stacks-project/blob/708d11f6afbcffb0fd552cd7087100a1400fe40d/src/scheme.lean</a><br>\nmost of the things are here</p>",
        "id": 123413682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1520454519
    },
    {
        "content": "<p>OK so we have a workaround</p>",
        "id": 123414031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520455078
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  mul_assoc := λ _ _ _,subtype.eq (funext (λ _,funext (λ _,mul_assoc _ _ _))),\n  add_assoc := λ _ _ _,subtype.eq (funext (λ _,funext (λ _,add_assoc _ _ _))),\n  zero_add := λ _,subtype.eq (funext (λ _,funext (λ _,zero_add _))),\n</pre></div>",
        "id": 123414072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520455086
    },
    {
        "content": "<p>and so on and so on</p>",
        "id": 123414073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520455095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"di.gama@gmail.com\" data-user-id=\"110049\">@Mario Carneiro</span> could you have a look?</p>",
        "id": 123458500,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1520536676
    }
]