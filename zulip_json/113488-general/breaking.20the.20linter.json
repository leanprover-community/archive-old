[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">constants</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">A_eq_B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">B_eq_A</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c1\">-- excessive memory consumption detected at 'vm'</span>\n</code></pre></div>\n<p>Perhaps this is not relevant because the code is clearly not production-ready? Not sure. I was just trying to knock up a simple example of the simp linter spotting a problem.</p>",
        "id": 221447228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609674091
    },
    {
        "content": "<p>Oh but this hangs it too so maybe there is a problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">A_eq_B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">B_eq_A</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>",
        "id": 221447348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609674292
    },
    {
        "content": "<p>Should I open an issue? I am still getting the hang of issues.</p>",
        "id": 221447363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609674337
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, who wrote the <code>simp</code> linters.</p>",
        "id": 221457774,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609690215
    },
    {
        "content": "<p>It is expected that this will cause the linter to fail, because <code>B</code> is not in simp-normal form.  (You can simplify it as B = A = B = A = ...)</p>",
        "id": 221459125,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609691964
    },
    {
        "content": "<p>The excessive memory consumption error is not intended, but I'm not sure if there's an easy way to catch it from the Lean side.</p>",
        "id": 221459137,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609691989
    },
    {
        "content": "<p>Just to be clear -- the linter hangs lean rather than fails gracefully</p>",
        "id": 221460070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609693206
    },
    {
        "content": "<p>Yes, I understand.  It is not intentional, but I'm not sure if it's easy to detect.  I believe we already have a timeout in there.  But feel free to open issue.</p>",
        "id": 221460289,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609693454
    }
]