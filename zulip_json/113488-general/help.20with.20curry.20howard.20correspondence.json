[
    {
        "content": "<p>Can someone help me complete my puzzle? I'm trying to jumpstart my Curry-Howard correspondence by proving this theorem </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"⊛\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Π\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\":\"</span> <span class=\"n\">A</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\",\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span>  <span class=\"n\">x</span>  <span class=\"s2\">\":\"</span>  <span class=\"n\">X</span>  <span class=\"s2\">\")\"</span> <span class=\"s2\">\"↦\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">find_this_bugger</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span><span class=\"bp\">⊛-&gt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 319119205,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672713429
    },
    {
        "content": "<p>I think there is likely a precedence issue here</p>",
        "id": 319119422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672713608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/help.20with.20curry.20howard.20correspondence/near/319119422\">said</a>:</p>\n<blockquote>\n<p>I think there is likely a precedence issue here</p>\n</blockquote>\n<p>What's that mean?</p>",
        "id": 319119429,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672713632
    },
    {
        "content": "<p>you should put parentheses in to clarify whether you mean <code>(Π(_ : p),⊛) -&gt; p</code> or <code>Π(_ : p), (⊛ -&gt; p)</code></p>",
        "id": 319119431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672713633
    },
    {
        "content": "<p>With the parentheses as you have placed them, the statement is false</p>",
        "id": 319119462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672713690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/help.20with.20curry.20howard.20correspondence/near/319119431\">said</a>:</p>\n<blockquote>\n<p>you should put parentheses in to clarify whether you mean <code>(Π(_ : p),⊛) -&gt; p</code> or <code>Π(_ : p), (⊛ -&gt; p)</code></p>\n</blockquote>\n<p>Ok I made edits here it is now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"⊛\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Π\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\":\"</span> <span class=\"n\">A</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\",\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span>  <span class=\"n\">x</span>  <span class=\"s2\">\":\"</span>  <span class=\"n\">X</span>  <span class=\"s2\">\")\"</span> <span class=\"s2\">\"↦\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">find_this_bugger</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span><span class=\"bp\">⊛</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 319119469,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672713709
    },
    {
        "content": "<p>because <code>Π(_ : p),⊛</code> is always inhabited, by the constant function <code>(x:p) ↦ *</code>, but <code>p</code> is only inhabited sometimes</p>",
        "id": 319119530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672713761
    },
    {
        "content": "<p>so if we consider <code>p = false</code> for example then the <code>sorry</code> is false</p>",
        "id": 319119555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672713792
    },
    {
        "content": "<p>Π(_ : p),⊛ could be ... oh! I wanted dependent sum!</p>\n<p>Ok ok...</p>",
        "id": 319119583,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672713837
    },
    {
        "content": "<p>that would be <code>Sigma fun (X : A) =&gt; F</code></p>",
        "id": 319119641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672713886
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"⊛\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Π\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\":\"</span> <span class=\"n\">A</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\",\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span>  <span class=\"n\">x</span>  <span class=\"s2\">\":\"</span>  <span class=\"n\">X</span>  <span class=\"s2\">\")\"</span> <span class=\"s2\">\"↦\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">find_this_bugger</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">),</span><span class=\"bp\">⊛</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">and_this_one</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span>  <span class=\"o\">(</span><span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">),</span><span class=\"bp\">⊛</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 319119810,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672714042
    },
    {
        "content": "<p><code>fun hp =&gt; hp.1</code> and <code>fun hp =&gt; \\&lt;hp, *\\&gt;</code> respectively</p>",
        "id": 319119822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672714069
    },
    {
        "content": "<p>poifect thanks a million. oh and one more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"⊛\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Π\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\":\"</span> <span class=\"n\">A</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\",\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span>  <span class=\"n\">x</span>  <span class=\"s2\">\":\"</span>  <span class=\"n\">X</span>  <span class=\"s2\">\")\"</span> <span class=\"s2\">\"↦\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"bp\">⊛</span> <span class=\"o\">),</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"bp\">⊛</span><span class=\"o\">),(</span><span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">),</span><span class=\"bp\">⊛</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 319119873,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672714095
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 319247355,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672768003
    }
]