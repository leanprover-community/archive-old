[
    {
        "content": "<p>What's up with this new typeclass? What's the purpose?</p>",
        "id": 287500294,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656259106
    },
    {
        "content": "<p>It doesn't seem to introduce notation, and I'm not sure what lemmas it could possibly introduce</p>",
        "id": 287500304,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656259136
    },
    {
        "content": "<p>Was it not desirable to have <code>nat.unary_cast</code>automatically defined?</p>",
        "id": 287500375,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656259207
    },
    {
        "content": "<p>It's to provide <code>coe : ℕ → α</code>. It was formerly deduced from <code>[has_zero α] [has_one α] [has_add α]</code>. Relevant PR is <a href=\"https://github.com/leanprover-community/mathlib/pull/12182\">#12182</a>.</p>",
        "id": 287500376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656259207
    },
    {
        "content": "<p>The problem is that we want <code>coe : ℕ → ℕ</code> to be defeq to <code>id</code>, <code>coe : ℕ → ℤ</code> to be defeq to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.of_nat\">docs#int.of_nat</a>, <code>coe : ℕ → with_bot ℕ</code> to be defeq to the other <code>coe : ℕ → with_bot ℕ</code> (so defeq to <code>some</code>), etc...</p>",
        "id": 287500417,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656259294
    },
    {
        "content": "<p>Oh, that makes sense.</p>",
        "id": 287500424,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656259308
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/2jVOzdeR3kPeDK50dYwEFdpk/image.png\">image.png</a> Shouldn't this be <code>has_nat_cast</code> instead of <code>has_coe</code>?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2jVOzdeR3kPeDK50dYwEFdpk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2jVOzdeR3kPeDK50dYwEFdpk/image.png\"></a></div>",
        "id": 287500465,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656259327
    },
    {
        "content": "<p>Or is the idea that you only use <code>has_nat_cast</code> for monoids or some other algebraic structure stronger than what pre-games are?</p>",
        "id": 287500482,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656259351
    },
    {
        "content": "<p>Probably it should, yeah.</p>",
        "id": 287500484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656259352
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_with_one\">docs#add_monoid_with_one</a> true for pgame?</p>",
        "id": 287501206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656260293
    },
    {
        "content": "<p>I'm not even sure addition is associative on <code>pgame</code>, and really one could argue that there are many candidates for <code>one</code>. The idea is that <code>game</code> is a more sensible notion; <code>pgame</code> is some kind of auxiliary notion used in the construction of <code>game</code>.</p>",
        "id": 287502168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656261783
    },
    {
        "content": "<blockquote>\n<p>Shouldn't this be has_nat_cast instead of has_coe?</p>\n</blockquote>\n<p>It could be, but it doesn't buy you much.  All the <code>nat.cast</code> lemmas require <code>add_monoid_with_one</code>, which <code>pgame</code> isn't.</p>",
        "id": 287502944,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656262880
    },
    {
        "content": "<p>Addition isn't neither commutative nor associative on <code>pgame</code>!</p>",
        "id": 287516390,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656281027
    },
    {
        "content": "<p>I do disagree with there being many candidates for 1, <code>{{ | } | }</code> with the obvious indexing types seems like the only reasonable choice</p>",
        "id": 287516445,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656281070
    },
    {
        "content": "<p>But that's a whole other topic</p>",
        "id": 287516535,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656281217
    },
    {
        "content": "<p>is it worth making one of these for the redefinition of char_p? Or should I just inline it into <code>char_p</code>?</p>",
        "id": 288711370,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657132202
    },
    {
        "content": "<p>I think just inline it</p>",
        "id": 288711792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657132390
    },
    {
        "content": "<p>Since it would be the only data field</p>",
        "id": 288711834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657132416
    },
    {
        "content": "<p>I was also going to set defn control of smul, although I guess there's no real point as usually for charp the cast will just be <code>x smul 1</code></p>",
        "id": 288712536,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657132801
    },
    {
        "content": "<p>The main reason for <code>has_nat_cast</code> (if my understanding is correct) is to make things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.monoid\">docs#function.injective.monoid</a> easy to state</p>",
        "id": 288719170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657136045
    }
]