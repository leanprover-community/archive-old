[
    {
        "content": "<p>Hi all! I'm close to finish my BSc in Computer Science and, as my final project, I'm planning to formalize some data structure using Lean. If possible, I would like to formalize one that wasn't formalized yet on mathlib and will be of some relevance to it. One possibility is to choose one from Benjamin's Pierce course on formalization of Algorithms (<a href=\"https://softwarefoundations.cis.upenn.edu/vfa-current/toc.html\">https://softwarefoundations.cis.upenn.edu/vfa-current/toc.html</a>) and adapt it to Lean. What do you think? Any suggestions?</p>",
        "id": 220647062,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1608597108
    },
    {
        "content": "<p>I suggest you start with the easiest ones to see what tools Lean might be missing. You may have to write programming-specific tactics to help yourself complete your tasks. Having a slow buildup in difficulty should also help you choose the problem to focus on.</p>",
        "id": 220648611,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1608598642
    },
    {
        "content": "<p>there's some stuff for insertion sort and merge sort in <code>data/list/sort.lean</code>, so that seems like a good place to look</p>",
        "id": 220709271,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608655286
    },
    {
        "content": "<p>it doesn't seem very fleshed out, in the sense that there are many other ways to sort arrays that are not mentioned</p>",
        "id": 220709297,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608655308
    },
    {
        "content": "<p>also, there are kind of two main facts about sorting arrays - the fact that algorithms actually do sort arrays, and the asymptotic analysis of how much time it takes</p>",
        "id": 220709372,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608655329
    },
    {
        "content": "<p>nothing currently in the sort logic mentions the time complexity</p>",
        "id": 220709394,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608655342
    },
    {
        "content": "<p>I'm not sure if anything anywhere in Lean is mentioning the time complexity of algorithms? but I think something along these lines would be interesting</p>",
        "id": 220709439,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608655374
    },
    {
        "content": "<p>my instinct would be to focus on sorting rather than red-black trees and priority queues, because sorting is clearly incomplete and it'll be easier to do than the more complex data structures</p>",
        "id": 220709557,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608655439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/BSc.20Final.20Project/near/220709297\">said</a>:</p>\n<blockquote>\n<p>it doesn't seem very fleshed out, in the sense that there are many other ways to sort arrays that are not mentioned</p>\n</blockquote>\n<p>I don't think the current implementations are intended to show off all possible sort algorithms; there is just one simple one to show that it is possible, and one efficient one in case you just need to sort stuff</p>",
        "id": 220723855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608664325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/BSc.20Final.20Project/near/220709394\">said</a>:</p>\n<blockquote>\n<p>nothing currently in the sort logic mentions the time complexity</p>\n</blockquote>\n<p>It's not really possible to formalize time complexity of (shallowly embedded) lean algorithms. You need an actual theory of computation for that, e.g. <code>computability/</code> and even then you probably won't get something practically usable</p>",
        "id": 220723949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608664405
    },
    {
        "content": "<p>for sorts specifically I was thinking you could implement them in terms of a thing that counts the number of comparisons? i dunno if it would be practically usable, but maybe within scope for an undergrad project</p>",
        "id": 220727797,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608666855
    },
    {
        "content": "<p>I only refer to this as \"not fleshed out\" in the sense of \"still some stuff an undergrad could do\" rather than \"this library is insufficient for some practical reason\"</p>",
        "id": 220727848,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608666888
    },
    {
        "content": "<p>It's certainly possible to have a lightweight formalization of time or comparison complexity enough to prove the asymptotic orders of some sorting algorithms, and that could indeed be an undergrad project</p>",
        "id": 220728045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608667016
    },
    {
        "content": "<p>I'm not sure how you'd go about counting comparisons or similar in a lean function without adding substantial bookkeeping</p>",
        "id": 220729130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608667678
    },
    {
        "content": "<p>the sort algorithms are just so simple, I figure you would be able to add the substantial bookkeeping</p>",
        "id": 220729715,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608668051
    },
    {
        "content": "<p>The usual approach is to use a state monad that counts whatever you want to count</p>",
        "id": 220730402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608668579
    },
    {
        "content": "<p>You can also consider formalizing the operational semantics of a small programming language with <code>if</code>, <code>rec</code>, <code>compare</code> <code>let</code> and array operations and counting the number of evaluation steps for arbitrary inputs</p>",
        "id": 220734547,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1608671397
    },
    {
        "content": "<p>Thank you all! I decided to make a lightweight formalization of the time complexity of the sorting algorithms from mathlib. I just have one doubt, is it possible to add this bookkeeping to the existing insertion sort and merge sort, or the idea is to write new functions that use the state monad to count comparisons?</p>",
        "id": 223069426,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1610926132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360938\">@Tomaz Gomes Mascarenhas</span> I don't think you can add it to the existing functions, because you would need to change their type to somehow make room for the bookkeeping... but we don't want their types to change.</p>",
        "id": 223081301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610946127
    },
    {
        "content": "<p>I wondered before if using typeclasses one could do this, if you have an algorithm for rings that you want to measure in terms of ring operations for instance, you can make a dummy type with has_add, has_neg, has_mul, has_one etc that are defined to count the number of basic operations needed to form that expression.<br>\nThen calling the same function for these dummy types would count the total number of operations.<br>\n But I couldn't get it to work satisfactorily.</p>",
        "id": 223082037,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610947220
    },
    {
        "content": "<p>The example I tried to do was karatsuba matrix multiplication but somehow getting the right number of operations out of the final matrix was hard. The nature of my setup double counted terms appearing twice, where as an actual implementation wouldn't recompute the term <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 223082108,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610947351
    },
    {
        "content": "<p>otherwise it sounds like a nifty trick (-;</p>",
        "id": 223082458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610947881
    },
    {
        "content": "<p>Presumably you can count ring operations by quotienting <code>R \\times count</code> by just the first variable, then use <code>quotient.out</code> to get the count?</p>",
        "id": 223094513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610960419
    },
    {
        "content": "<p>That doesn't work for counting operations that don't directly map into the result though, as your example of a sort needs</p>",
        "id": 223094571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610960481
    },
    {
        "content": "<p>I think for a thesis on this, I'd just define a simple imperative language in Lean with arrays, write the operational semantics, define a cost model, and then start proving properties about it. <br>\nFor properly proving properties about the operational semantics of a Lean program, you need an interpreter or compiler, and that's a lot of work to sign up for up front.  Once you have the basic imperative language, you instead have a library you could extend in a bunch of directions (e.g., get closer to a real machine semantics, more accurate cost models, automation).<br>\nThis assumes you are interested primarily in the complexity analysis.  If you are more interested in the foundations of Lean, this would take you afield from that.</p>",
        "id": 223149231,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1610992337
    }
]