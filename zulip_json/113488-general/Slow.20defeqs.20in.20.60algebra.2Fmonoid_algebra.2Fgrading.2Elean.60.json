[
    {
        "content": "<p>The lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.grade.is_internal\">docs#add_monoid_algebra.grade.is_internal</a> takes 9 seconds to elaborate on my machine, and even times out on <a href=\"https://github.com/leanprover-community/mathlib/tree/linear_map_class\">branch#linear_map_class</a>, because it gets blocked on the unification problem <code>id = coe_fn ?m_1</code>, unfolds the entirety of <code>direct_sum.submodule_is_internal</code>, then only when that all fails it starts using the <code>(add_monoid_hom.id ι)</code> argument. So when I replace the proof with <code>by simpa only [grade_by_id] using grade_by.is_internal (add_monoid_hom.id ι)</code>, it takes 3 orders of magnitude less time.</p>\n<p>There are a few other declarations in this file that have some similarly slow defeq checks: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.of_grades_by_of\">docs#add_monoid_algebra.of_grades_by_of</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.grade_by.is_internal\">docs#add_monoid_algebra.grade_by.is_internal</a>.</p>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, any ideas for a higher-concept way to deal with this slowness/timeout?</p>",
        "id": 277743261,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649084242
    },
    {
        "content": "<p><code>grade_by</code> was something I wasn't super happy with when it was PR'd, but couldn't come up with a better alternative to either and didn't want to hold up the contributor</p>",
        "id": 277744144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649084583
    },
    {
        "content": "<p>Perhaps it's unfolding so far because <code>grade_by</code> is an abbreviation?</p>",
        "id": 277744450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649084695
    },
    {
        "content": "<p>It's not quite that the problem lies in unfolding <code>grade_by</code>: the problem lies in not unfolding <code>grade</code> to <code>grade_by id</code>. Making <code>grade_by</code> irreducible turns elaboration from 9s to 5s on my machine. If I instead make <code>direct_sum.submodule_is_internal</code> irreducible, it's 8ms.</p>",
        "id": 277746807,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649085578
    },
    {
        "content": "<p>Does making <code>grade_by</code> or <code>grade</code> semireducible make any difference?</p>",
        "id": 277748050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649086038
    },
    {
        "content": "<p>(Rather than making anything irreducible)</p>",
        "id": 277748082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649086047
    },
    {
        "content": "<p>Note that my original plan was to not have <code>grade_by</code> at all, and only have <code>grade</code>; then define some operation for reindexing a graded ring via a quotient</p>",
        "id": 277748558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649086220
    },
    {
        "content": "<p>I can't really tell a difference when making either <code>grade</code>, <code>grade_by</code> or <code>direct_sum.submodule_is_internal</code> semireducible: all about 9 seconds +- 1s.</p>",
        "id": 277749770,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649086716
    },
    {
        "content": "<p><del>Another option would be to make <code>direct_sum.submodule_coe</code> irreducible. At least it doesn't need to be unfolded in that file.</del> Nevermind, <code>grade_by.is_internal</code> relies on unfolding that definition.</p>",
        "id": 277750528,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649087014
    },
    {
        "content": "<p>I think the <code>simpa</code> solution is quite reasonable here. If unfolding goes in the wrong order, then asking the user to rewrite seems fine</p>",
        "id": 277752017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649087582
    },
    {
        "content": "<p>The other answer here is that that whole file should be overhauled to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/graded_algebra\">docs#graded_algebra</a> anyway</p>",
        "id": 277752383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649087725
    },
    {
        "content": "<p>I'll have a quick investigation of how easy that is</p>",
        "id": 277752633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649087832
    },
    {
        "content": "<p>Alright, I'll make a PR for the <code>simpa</code> solution, so you can compare.</p>",
        "id": 277753449,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649088110
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13169\">#13169</a></p>",
        "id": 277754160,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649088383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Slow.20defeqs.20in.20.60algebra.2Fmonoid_algebra.2Fgrading.2Elean.60/near/277752383\">said</a>:</p>\n<blockquote>\n<p>The other answer here is that that whole file should be overhauled to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/graded_algebra\">docs#graded_algebra</a> anyway</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/pull/13360\">#13360</a>, I was delayed by illness</p>",
        "id": 278693495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649770645
    }
]