[
    {
        "content": "<p>Sorry not sure how to submit a bug report, but I think there's a little issue in the documentation for <code>tactic.localized</code>. The source uses 'triple backquote lean' for inline code, which actually inserts the word 'lean' in the HTML version of the documentation: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/localized.html\">https://leanprover-community.github.io/mathlib_docs/tactic/localized.html</a></p>",
        "id": 215048025,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1604021223
    },
    {
        "content": "<p>Ah, from other occurrences of <code>```lean</code> it seems like the syntax needs a newline before (and after?) the code snippet for it to work.</p>",
        "id": 215048540,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604021980
    },
    {
        "content": "<p>No, scratch that. The problem seems to be that the code blocks are indented?</p>",
        "id": 215048704,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604022218
    },
    {
        "content": "<p>There is definitely something weird going on. The documentation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simps_get_raw_projections\">docs#simps_get_raw_projections</a> contains code snippets that start with <code>lean</code>, even though the doc-string source doesn't contain <code>```lean</code>.</p>",
        "id": 215049130,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604022801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> any ideas?</p>",
        "id": 215049189,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604022855
    },
    {
        "content": "<p>If I remember correctly something in <code>doc-gen</code> converts <code> ``` </code> to <code> ```lean </code> .</p>",
        "id": 215049190,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604022857
    },
    {
        "content": "<p>Gabriel mentioned it in <a href=\"https://github.com/leanprover-community/doc-gen/issues/86#issuecomment-702602422\">this issue comment</a>.</p>",
        "id": 215049204,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604022911
    },
    {
        "content": "<p>This is definitely a fine place to report bugs like this. I also opened <a href=\"https://github.com/leanprover-community/doc-gen/issues/93\">doc-gen#93</a> so we don't forget.</p>",
        "id": 215049225,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604022944
    },
    {
        "content": "<p>I think that's preprocessing in Lean, not in doc-gen.</p>",
        "id": 215049229,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604022957
    },
    {
        "content": "<p>Oh, right. I forgot about that.</p>",
        "id": 215049301,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604023035
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.simps</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.doc_string</span> <span class=\"bp\">`</span><span class=\"n\">simps_get_raw_projections</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n</code></pre></div>",
        "id": 215049307,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604023059
    },
    {
        "content": "<p>This seems like a bug in the markdown processing. The indented fenced code block is getting processed as inline code.</p>",
        "id": 215049531,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604023265
    },
    {
        "content": "<p>Weren't we talking about switching from <code>markdown2</code> to a different package? Or was it the opposite, did we switch the website to <code>markdown2</code>?</p>",
        "id": 215049603,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604023343
    },
    {
        "content": "<p>Yeah, looks like a markdown2 bug.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">markdown2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mistletoe</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">* Here is a list</span>\n<span class=\"s2\">  ```python</span>\n<span class=\"s2\">  def s = 2</span>\n<span class=\"s2\">  ```</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">markdown2</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mistletoe</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>&lt;ul&gt;\n&lt;li&gt;Here is a list\n&lt;code&gt;python\ndef s = 2\n&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Here is a list\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def s = 2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></div>",
        "id": 215049724,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604023507
    },
    {
        "content": "<p>Is this related? <a href=\"https://github.com/trentm/python-markdown2/issues/263#issuecomment-313176533\">https://github.com/trentm/python-markdown2/issues/263#issuecomment-313176533</a></p>",
        "id": 215049919,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604023757
    },
    {
        "content": "<p>i.e. does <code>markdown2.markdown(s, extras=[\"fenced-code-blocks\"])</code> work?</p>",
        "id": 215049944,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604023792
    },
    {
        "content": "<p>Good point -- that was missing in my test, but we use <code>fenced-code-blocks</code> in doc-gen. Doesn't fix it.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">markdown2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mistletoe</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">  ```python</span>\n<span class=\"s2\">  def s = 2</span>\n<span class=\"s2\">  ```</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">markdown2</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">extras</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'fenced-code-blocks'</span><span class=\"p\">]))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mistletoe</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>&lt;p&gt;&lt;code&gt;python\n  def s = 2\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def s = 2\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre></div>",
        "id": 215050109,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604023925
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4842\">#4842</a> for now. mistletoe isn't a drop in replacement for <code>markdown2</code>.</p>",
        "id": 215149454,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604091496
    },
    {
        "content": "<p>So is it the indentation? I thought I saw an indented code snippet somewhere else where the generated doc was fine.</p>",
        "id": 215153935,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604094042
    },
    {
        "content": "<p>A quick local test shows that <code>markdown2</code> with the <code>fenced-code-blocks</code> extra properly handles</p>\n<div class=\"codehilite\" data-code-language=\"markdown\"><pre><span></span><code>```python\ndef foo():\n  return 1\n```\n</code></pre></div>\n\n<p>but not</p>\n<div class=\"codehilite\" data-code-language=\"markdown\"><pre><span></span><code> ```python\n def foo():\n   return 1\n ```\n</code></pre></div>",
        "id": 215157253,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604096172
    },
    {
        "content": "<p>I thought for a while that they were the same picture -- I just noticed the indentation!</p>",
        "id": 215157987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604096801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Would migrating <code>doc-gen</code> from mistletoe to markdown2 require a huge refactor?</p>",
        "id": 215158256,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604097034
    },
    {
        "content": "<p>More just tedium figuring out how to replicate every markdown2 feature we're using.</p>",
        "id": 215158495,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604097220
    },
    {
        "content": "<p>In particular the linkifiers need some attention.</p>",
        "id": 215158572,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604097250
    },
    {
        "content": "<p>Possibly also worth considering pandoc... I was super lazy recently for my doc generating and just passed all the lean docstrings through pandoc</p>",
        "id": 215159065,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604097715
    },
    {
        "content": "<p>is that actually valid markdown with the triple-ticks plus indentation? i don't think I would expect that to work</p>",
        "id": 215159124,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604097750
    },
    {
        "content": "<p>I think once it's indented, then it isn't a code block, it's just inline code</p>",
        "id": 215159140,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604097774
    },
    {
        "content": "<p>I mean there's like 4 markdown specs at least so \"valid markdown\" is itself a fun concept</p>",
        "id": 215159158,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604097805
    },
    {
        "content": "<p>But pandoc agrees with what it looks like mistletoe thinks</p>",
        "id": 215159168,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604097821
    },
    {
        "content": "<p>And produces...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊙</span>  <span class=\"n\">pandoc</span> <span class=\"c1\">--from markdown --to html &lt;&lt;&lt;'                                                                                                                                                        julian@Air ●</span>\n  <span class=\"bp\">```</span><span class=\"n\">python</span>\n  <span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">```'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">div</span> <span class=\"kd\">class</span><span class=\"bp\">=</span><span class=\"s2\">\"sourceCode\"</span> <span class=\"n\">id</span><span class=\"bp\">=</span><span class=\"s2\">\"cb1\"</span><span class=\"bp\">&gt;&lt;</span><span class=\"n\">pre</span> <span class=\"kd\">class</span><span class=\"bp\">=</span><span class=\"s2\">\"sourceCode python\"</span><span class=\"bp\">&gt;&lt;</span><span class=\"n\">code</span> <span class=\"kd\">class</span><span class=\"bp\">=</span><span class=\"s2\">\"sourceCode python\"</span><span class=\"bp\">&gt;&lt;</span><span class=\"n\">span</span> <span class=\"n\">id</span><span class=\"bp\">=</span><span class=\"s2\">\"cb1-1\"</span><span class=\"bp\">&gt;&lt;</span><span class=\"n\">a</span> <span class=\"n\">href</span><span class=\"bp\">=</span><span class=\"s2\">\"#cb1-1\"</span> <span class=\"n\">aria</span><span class=\"bp\">-</span><span class=\"n\">hidden</span><span class=\"bp\">=</span><span class=\"s2\">\"true\"</span><span class=\"bp\">&gt;&lt;/</span><span class=\"n\">a</span><span class=\"bp\">&gt;&lt;</span><span class=\"n\">span</span> <span class=\"kd\">class</span><span class=\"bp\">=</span><span class=\"s2\">\"kw\"</span><span class=\"bp\">&gt;</span><span class=\"kd\">def</span><span class=\"bp\">&lt;/</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span><span class=\"n\">span</span> <span class=\"kd\">class</span><span class=\"bp\">=</span><span class=\"s2\">\"op\"</span><span class=\"bp\">&gt;=&lt;/</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">span</span> <span class=\"kd\">class</span><span class=\"bp\">=</span><span class=\"s2\">\"dv\"</span><span class=\"bp\">&gt;</span><span class=\"mi\">2</span><span class=\"bp\">&lt;/</span><span class=\"n\">span</span><span class=\"bp\">&gt;&lt;/</span><span class=\"n\">span</span><span class=\"bp\">&gt;&lt;/</span><span class=\"n\">code</span><span class=\"bp\">&gt;&lt;/</span><span class=\"n\">pre</span><span class=\"bp\">&gt;&lt;/</span><span class=\"n\">div</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 215159243,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604097884
    },
    {
        "content": "<p>let's just unindent the markdown in <code>src/tactic/localized.lean</code></p>",
        "id": 215159279,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604097924
    },
    {
        "content": "<p>rather than migrating markdown processors</p>",
        "id": 215159347,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604097965
    },
    {
        "content": "<p>The PR did that looks like, so all this was some longer term thing.</p>",
        "id": 215159359,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604097986
    },
    {
        "content": "<p>It'd be good to have consistent markdown processing on the community website (which uses mistletoe) and the API docs in the long term.</p>",
        "id": 215159401,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604098023
    },
    {
        "content": "<p>In principle there's a semantic difference. The code blocks appeared in a list. markdown2 seems to forbid this, you have to break the list indentation to insert a code block.</p>",
        "id": 215163920,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604102308
    },
    {
        "content": "<p>That said, I have no attachment to any particular markdown flavor or processor as long as it supports the features we want. And as Bryan says it would be a big plus if the website and doc-gen used the same one.</p>",
        "id": 215163941,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604102363
    },
    {
        "content": "<p>Well, it gets trickier. This example seems to be handled correctly: <a href=\"https://github.com/leanprover-community/mathlib/blob/cc7f06b/src/algebra/group/to_additive.lean#L260\">https://github.com/leanprover-community/mathlib/blob/cc7f06b/src/algebra/group/to_additive.lean#L260</a></p>",
        "id": 215164403,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604102937
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group/to_additive.html#to_additive.attr\">https://leanprover-community.github.io/mathlib_docs/algebra/group/to_additive.html#to_additive.attr</a></p>",
        "id": 215164405,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604102938
    },
    {
        "content": "<p>Yes, that was one example where I found that the code was indented and the markdown happened correctly. Another example is in the module doc string of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/unfold_cases.html\">https://leanprover-community.github.io/mathlib_docs/tactic/unfold_cases.html</a></p>\n<p>Maybe it's related to a newline after the doc string?</p>",
        "id": 215170464,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604112201
    }
]