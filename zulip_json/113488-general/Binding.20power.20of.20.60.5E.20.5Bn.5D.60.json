[
    {
        "content": "<p>Some time ago, we noticed that <code>- 2 ^ 3</code> was parsed as <code>(-2)^3</code>, and we fixed the priority of <code>^</code> to make it more reasonable. I was just bitten by the same issue but for iterates of a map: <code>- f^[n] 0</code>, which for me means <code>- (f^[n] 0)</code>, is parsed as <code>(-f)^[n] 0</code> (I am in a context where <code>-f</code>makes sense). Is there a way to fix this in the same way it was done for powers? (Unfortunately for me, the notation is declared in core...)</p>",
        "id": 260568384,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1636284118
    },
    {
        "content": "<p>And while we're at it, what about fixing binding power of <code>supr</code>/<code>Union</code>/<code>infi</code>/<code>Inter</code> so that it doesn't eat <code>=</code> in <code>⋃ i, s i = t</code>?</p>",
        "id": 260589795,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636311108
    },
    {
        "content": "<p>Oh yes, that would be so nice!</p>",
        "id": 260589856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636311164
    },
    {
        "content": "<p>Are those notations in core, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>?</p>",
        "id": 260589873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636311197
    },
    {
        "content": "<p>I thought those were mathlib, making them much easier to fix than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.iterate/src\">src#nat.iterate</a></p>",
        "id": 260589883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636311217
    },
    {
        "content": "<p><code>sUnion</code> is in the core (BTW, should we move it to <code>mathlib</code>?)</p>",
        "id": 260589975,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636311356
    },
    {
        "content": "<p>if we're complaining about standard notation, can I add to the list the fact that <code>\\union</code> and <code>\\inter</code> are left associative, whereas <code>\\and</code> and <code>\\or</code> are right associative.</p>",
        "id": 260589977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636311361
    },
    {
        "content": "<p>The rest is in <code>mathlib</code></p>",
        "id": 260590003,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636311363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Changing associativity means that lots of code will break.</p>",
        "id": 260590033,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636311399
    },
    {
        "content": "<p>I was just surprised about the asymmetry</p>",
        "id": 260590048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636311440
    },
    {
        "content": "<p>Did you know that, currently, <code>(1 / (n : ℝ)) • f^[n] 0</code> is parsed as <code>((1 / (n : ℝ)) • f)^[n] 0</code>? You can guess it took me some time to figure out what was going on :-)</p>",
        "id": 260675602,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1636386720
    },
    {
        "content": "<p><code>^[n]</code> eats <em>a lot</em> on the LHS. I don't remember if it eats <code>=</code>.</p>",
        "id": 260712635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636402540
    }
]