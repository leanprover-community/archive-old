[
    {
        "content": "<p>Good morning,</p>\n<p>I'm try to translate the following theorem from Agda to Lean :</p>\n<div class=\"codehilite\"><pre><span></span>notnotelim : forall (b : bool) -&gt; not not b = b\nnotnotelim : tt = refl\nnotnotelim : ff = refl\n\ncf. Verified Functional Programming in Agda, Aarun Stump, p. 22\n</pre></div>\n\n\n<p>Here's my first attempt, which doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span>theorem notnotelim2 (b : bool):\n    ¬¬ b = b :=\nbegin\n    induction b,\n    case tt { reflection },\n    case ff { reflection }\nend\n</pre></div>\n\n\n<p>However, this works:</p>\n<div class=\"codehilite\"><pre><span></span>theorem notnotelim (b : bool):\n    ¬¬ b = b :=\nbegin\n    induction b,\n    case tt { contradiction },\n    case ff { contradiction }\nend\n</pre></div>\n\n\n<p>I've no idea why.</p>\n<p>In Idris, this works (just as in Agda):</p>\n<div class=\"codehilite\"><pre><span></span>notNotTT : not (not True) = True\nnotNotTT = Refl\n</pre></div>\n\n\n<p>I can't figure out how to prove the same theorem, but with a \"forall\":</p>\n<div class=\"codehilite\"><pre><span></span>theorem notnotelim2 :\n    ∀b: bool, ¬¬ b = b :=\nbegin\n    -- proof\nend\n</pre></div>\n\n\n<p>Any help would be much appreciated.</p>\n<p>Many thanks.</p>\n<p>Philip</p>",
        "id": 193000812,
        "sender_full_name": "Phiroc",
        "timestamp": 1586156041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">notnotelim2</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 193001038,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586156214
    },
    {
        "content": "<p>Note that <code>not</code> works on <code>Prop</code>s, not on <code>bool</code>s</p>",
        "id": 193001060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586156233
    },
    {
        "content": "<p><code>bnot</code> works on <code>bool</code>s</p>",
        "id": 193001076,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586156246
    },
    {
        "content": "<p>Many thanks Yury.</p>",
        "id": 193001279,
        "sender_full_name": "Phiroc",
        "timestamp": 1586156394
    }
]