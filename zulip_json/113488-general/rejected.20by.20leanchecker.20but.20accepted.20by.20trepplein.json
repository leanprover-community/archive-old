[
    {
        "content": "<p>I've been running some fuzz testing on the various Lean 3 checkers. One finding is the following file, which is rejected by <code>leanchecker</code> but accepted by <code>trepplein</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">9</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">u</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">eq</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alpha</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">UP</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">1</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">a</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">0</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alpt</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">1</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">0</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">2</span> <span class=\"n\">refl</span>\n<span class=\"mi\">7</span> <span class=\"bp\">#</span><span class=\"n\">EC</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"mi\">8</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">7</span> <span class=\"mi\">2</span>\n<span class=\"mi\">9</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">8</span> <span class=\"mi\">1</span>\n<span class=\"mi\">10</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">9</span> <span class=\"mi\">1</span>\n<span class=\"mi\">11</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">10</span>\n<span class=\"mi\">12</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">11</span>\n<span class=\"bp\">#</span><span class=\"n\">IND</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">6</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"mi\">12</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I suspect the reason for the discrepancy has something to do with laziness, and that it does not imply the existence of any serious unsoundness. <br>\nHowever, it's somewhat troubling to me that such a discrepancy exists at all.</p>\n<p>Is this troubling to anyone else? Should there be an effort to standardize checker behavior to avoid this kind of discrepancy?</p>",
        "id": 238005797,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620532652
    },
    {
        "content": "<p>There is at least one known theoretical discrepancy between trepplein and leanchecker, to do with universe handling</p>",
        "id": 238006456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620533310
    },
    {
        "content": "<p>Lean uses a normalization approach to defeq testing for level expressions, but the rules it uses for normalization are not complete for the language of nat with zero/succ/max/imax. As a result, there are some level expressions that lean will not think are equal even though they are equal for all concrete values of the universe variables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"c1\">-- fails in lean, works in trepplein</span>\n</code></pre></div>\n<p>Trepplein uses a case splitting approach instead to normalize <code>imax</code> in the goal; as a result it has a complete decision procedure for this language. The rules given in my thesis are also following trepplein here instead of lean.</p>",
        "id": 238006799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620533684
    },
    {
        "content": "<p>I worked out that data by hand using <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/export_format.md\">export_format.md</a> as a guide.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">9</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">u</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">eq</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">eq</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alpha</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">alpha</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">UP</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">u1</span> <span class=\"o\">(</span><span class=\"bp\">???</span><span class=\"o\">)</span>\n<span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"n\">u1</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">a</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alpt</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">alpt</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"mi\">1</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">alpt</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alpt</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alpt</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">),</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">2</span> <span class=\"n\">refl</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">refl</span>\n<span class=\"mi\">7</span> <span class=\"bp\">#</span><span class=\"n\">EC</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">}</span>\n<span class=\"mi\">8</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">7</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"bp\">#</span><span class=\"mi\">1</span>\n<span class=\"mi\">9</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">8</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n<span class=\"mi\">10</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">9</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n<span class=\"mi\">11</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"mi\">12</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">11</span> <span class=\"bp\">=</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">),</span> <span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"n\">alpha</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"n\">IND</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">6</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"mi\">12</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span>\n  <span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">alpt</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">),</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">),</span> <span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"n\">alpha</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>It appears to be a perfectly correct definition of <code>eq</code> as an inductive type, except that line 4 constructs a universe parameter that I have called <code>u1</code> which references name index <code>1</code>, but there are no previous definitions of a name with that index (grep for <code>1 #N</code>), so it seems reasonable to throw an error.</p>",
        "id": 238007918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620534985
    },
    {
        "content": "<p>I guess the fuzz tester decided to change the first character in the file, since it looks like the first line was supposed to be the name</p>",
        "id": 238008026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620535189
    },
    {
        "content": "<blockquote>\n<p>However, it's somewhat troubling to me that such a discrepancy exists at all.</p>\n<p>Is this troubling to anyone else? Should there be an effort to standardize checker behavior to avoid this kind of discrepancy?</p>\n</blockquote>\n<p>I don't think the checkers have been fuzz tested before, so I would put high probability on you finding at least one bug. The checkers are not actually that well tested against things other than <code>mathlib.txt</code></p>",
        "id": 238008108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620535284
    },
    {
        "content": "<p>I also suspect that there at least some logical bugs in the checkers.  Like missing a side-condition for inductives, etc.  It is unfortunately hard to construct text files that should be rejected---everything that <code>lean --export</code> produces should be correct after all.  So you have to resort to constructing them by hand.</p>",
        "id": 238027281,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620557421
    },
    {
        "content": "<p>Here's another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">u</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">eq</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alpha</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">UP</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">1</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">a</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">0</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alpt</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">1</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">0</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">2</span> <span class=\"n\">refl</span>\n<span class=\"mi\">7</span> <span class=\"bp\">#</span><span class=\"n\">EC</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"mi\">8</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">7</span> <span class=\"mi\">2</span>\n<span class=\"mi\">9</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">8</span> <span class=\"mi\">1</span>\n<span class=\"mi\">10</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">9</span> <span class=\"mi\">1</span>\n<span class=\"mi\">11</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">10</span>\n<span class=\"mi\">12</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">11</span>\n<span class=\"bp\">#</span><span class=\"n\">IND</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">6</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"mi\">12</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>This is rejected by <code>leanchecker</code> with output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">line</span> <span class=\"mi\">21</span><span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">anonymous</span> <span class=\"n\">binder</span> <span class=\"n\">name</span>\n</code></pre></div>\n<p>but accepted by <code>trepplein</code> with output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- successfully checked 3 declarations</span>\n</code></pre></div>",
        "id": 238034427,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620565103
    },
    {
        "content": "<blockquote>\n<p>I also suspect that there at least some logical bugs in the checkers. Like missing a side-condition for inductives, etc.</p>\n</blockquote>\n<p>I opened <a href=\"https://github.com/gebner/trepplein/issues/3\">https://github.com/gebner/trepplein/issues/3</a>.</p>",
        "id": 238036843,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620567535
    },
    {
        "content": "<p>I think leanchecker is being too strict here. The problem that was introduced here is the <code>11 #EP</code> line that uses <code>0 = [anon]</code> for the name instead of <code>4 = `a</code>. That is, it is a construction of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">alpt</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">),</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">([</span><span class=\"n\">anon</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">),</span> <span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">alpha</span> <span class=\"o\">[</span><span class=\"n\">anon</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">anon</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>A user can't write this, but <code>[anon]</code> here is only needed for pretty printing and I think that it should be allowed to just stub out all binder names in this way.</p>",
        "id": 238051913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620584417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/rejected.20by.20leanchecker.20but.20accepted.20by.20trepplein/near/238007918\">said</a>:</p>\n<blockquote>\n<p>It appears to be a perfectly correct definition of <code>eq</code> as an inductive type, except that line 4 constructs a universe parameter that I have called <code>u1</code> which references name index <code>1</code>, but there are no previous definitions of a name with that index (grep for <code>1 #N</code>), so it seems reasonable to throw an error.</p>\n</blockquote>\n<p>I think this should just produce a parse error.</p>",
        "id": 238052698,
        "sender_full_name": "Chris B",
        "timestamp": 1620585323
    },
    {
        "content": "<p>The rust one rejects the first one and accepts the second.</p>",
        "id": 238052801,
        "sender_full_name": "Chris B",
        "timestamp": 1620585446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113488-general/topic/rejected.20by.20leanchecker.20but.20accepted.20by.20trepplein/near/238005797\">said</a>:</p>\n<blockquote>\n<p>However, it's somewhat troubling to me that such a discrepancy exists at all.</p>\n<p>Is this troubling to anyone else? Should there be an effort to standardize checker behavior to avoid this kind of discrepancy?</p>\n</blockquote>\n<p>I'd like to think this is is redundancy working more or less as planned. What kind of standards would you suggest? There are still a bunch of open questions about how external checking will work for lean 4, but I think this points to a good idea of having a collection of known bad examples that shouldn't get past a type checker.</p>",
        "id": 238054013,
        "sender_full_name": "Chris B",
        "timestamp": 1620586732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113488-general/topic/rejected.20by.20leanchecker.20but.20accepted.20by.20trepplein/near/238054013\">said</a>:</p>\n<blockquote>\n<p>What kind of standards would you suggest?</p>\n</blockquote>\n<p>Ideally, we would agree on the correct behavior for checkers on all edge cases, like the anonymous name case identified above.</p>",
        "id": 238056524,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620589139
    },
    {
        "content": "<p>it's not like there was ever a standards committee meeting for this stuff</p>",
        "id": 238056647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620589247
    },
    {
        "content": "<p>Another source of discrepancy: <code>leanchecker</code> apparently can omit validation of lines that are not referenced by any declaration. So, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"n\">p</span> <span class=\"n\">l1</span>\n</code></pre></div>\n<p>is accepted by <code>leanchecker</code> but rejected by <code>trepplein</code>.</p>",
        "id": 238056784,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620589442
    },
    {
        "content": "<p>All of these little discrepancies make it more difficult to validate the checkers against each other.</p>",
        "id": 238056930,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620589574
    },
    {
        "content": "<p>That should definitely be a syntax error</p>",
        "id": 238057198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620589866
    },
    {
        "content": "<p>I can understand delaying some validation but that's a straight-up parse error, there is a letter instead of a number</p>",
        "id": 238057219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620589898
    },
    {
        "content": "<p>Yeah, I agree.</p>",
        "id": 238057292,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620589953
    },
    {
        "content": "<p>I agree on the anonymous identifier thing. IMO those kinds of implementation details aren't unimportant, but it's hard to find them all before they come up in a context like this where someone's exploring edge cases. If you have a list, I can at least make sure the rust version conforms with the ones that seem reasonable.</p>",
        "id": 238058334,
        "sender_full_name": "Chris B",
        "timestamp": 1620590995
    },
    {
        "content": "<p>Yep, totally. I don't have a list (other than what I've reported above), and I don't expect anyone to just come up with one. My motivation in starting this discussion is mainly to gauge the interest in working towards more uniformity.</p>",
        "id": 238058852,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620591564
    },
    {
        "content": "<p>I know this is a bad answer since \"yeah well when Lean 4 is ready...\" is sort of a weasle-ish way of justifying inaction, but when lean 4 is at a point where we can start hammering this out there will probably be much more interest from the broader community in tightening and battle-testing different verifiers. I think fuzzing and collecting negative examples is definitely a good idea for where to start beyond just \"does it check mathlib\".</p>",
        "id": 238060006,
        "sender_full_name": "Chris B",
        "timestamp": 1620592714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113488-general/topic/rejected.20by.20leanchecker.20but.20accepted.20by.20trepplein/near/238056784\">said</a>:</p>\n<blockquote>\n<p>Another source of discrepancy: <code>leanchecker</code> apparently can omit validation of lines that are not referenced by any declaration. So, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"n\">p</span> <span class=\"n\">l1</span>\n</code></pre></div>\n<p>is accepted by <code>leanchecker</code> but rejected by <code>trepplein</code>.</p>\n</blockquote>\n<p>I took a look at the code that does the parsing, and it seems that the istream is not error checked, meaning that it will read the line as if it said <code>1 #NS 0 \"\"</code>. Not sure what it thinks about empty name components but that is a valid name otherwise</p>",
        "id": 238065727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620598497
    },
    {
        "content": "<p>Ah, interesting. I gather that this is the code you're referring to: <a href=\"https://github.com/leanprover-community/lean/blob/05dd36d1717649932fccaafa0868321fb87f916d/src/checker/text_import.cpp#L182\">https://github.com/leanprover-community/lean/blob/05dd36d1717649932fccaafa0868321fb87f916d/src/checker/text_import.cpp#L182</a></p>",
        "id": 238067502,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620600428
    },
    {
        "content": "<p>Yes. I'm preparing a fix PR now</p>",
        "id": 238067648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620600590
    },
    {
        "content": "<p>Regarding the anonymous name issue, I am thinking of just removing <a href=\"https://github.com/leanprover-community/lean/blob/05dd36d1717649932fccaafa0868321fb87f916d/src/kernel/type_checker.cpp#L114-L115\">this line</a>, although that will have an effect on the kernel, not just the text importer. A more conservative change would be to have the text importer make up a fresh name if the name that was read is anonymous</p>",
        "id": 238067755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620600713
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/574\">lean#574</a></p>",
        "id": 238068078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620601137
    },
    {
        "content": "<blockquote>\n<p>Not sure what it thinks about empty name components but that is a valid name otherwise</p>\n</blockquote>\n<p>I guess lean is totally fine with empty names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">«»</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#print</span> <span class=\"bp\">«»</span>\n</code></pre></div>",
        "id": 238068384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620601428
    },
    {
        "content": "<p>Could someone on macOS test <a href=\"https://github.com/leanprover-community/lean/issues/574\">lean#574</a>? I think it's a line endings issue, but I'm not sure if the import or export is to blame</p>",
        "id": 238071518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620604986
    },
    {
        "content": "<p>Just <code>make test</code>? I'm doing that on MacOS right now...</p>",
        "id": 238072089,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620605623
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">1411</span> <span class=\"n\">Test</span>    <span class=\"bp\">#</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">leanchecker</span> <span class=\"bp\">.................................................***</span><span class=\"n\">Failed</span>    <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">20</span> <span class=\"n\">sec</span>\n</code></pre></div>",
        "id": 238072093,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620605640
    },
    {
        "content": "<p>You can do the test steps:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"k\">in</span> library/:\n../build/shell/lean --recursive --export<span class=\"o\">=</span>../build/shell/library_export.out .\nchecker/leanchecker shell/library_export.out\n</code></pre></div>",
        "id": 238076306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620610407
    },
    {
        "content": "<p>apparently this fails on line 1, so I would like to know what <code>library_export.out</code> looks like</p>",
        "id": 238076384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620610465
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">u</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">eq</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">α</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">UP</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">1</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">a</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">0</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">ᾰ</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">1</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">0</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">2</span> <span class=\"n\">refl</span>\n<span class=\"mi\">7</span> <span class=\"bp\">#</span><span class=\"n\">EC</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"mi\">8</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">7</span> <span class=\"mi\">2</span>\n<span class=\"mi\">9</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">8</span> <span class=\"mi\">1</span>\n<span class=\"mi\">10</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">9</span> <span class=\"mi\">1</span>\n<span class=\"mi\">11</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">10</span>\n<span class=\"mi\">12</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">11</span>\n<span class=\"bp\">#</span><span class=\"n\">IND</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">6</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"mi\">12</span> <span class=\"mi\">1</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 238076479,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620610582
    },
    {
        "content": "<p>I'll see if I can narrow down the cause...</p>",
        "id": 238076637,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620610806
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/574/files#r629004579\">https://github.com/leanprover-community/lean/pull/574/files#r629004579</a></p>",
        "id": 238076764,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620611016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span>  Here's an input that <code>leanchecker</code> and <code>trepplein</code> reject, but <code>nanoda_lib</code> accepts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">8</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 238228583,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620690328
    },
    {
        "content": "<p>and <a href=\"https://github.com/leanprover/tc\"><code>tc</code></a> also accepts it</p>",
        "id": 238229108,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620690647
    },
    {
        "content": "<p>Thanks. In my case it goes uncontested because there are no declarations, I suspect it's the same for tc. AFAIK Lean always puts the export items in order, but there's nothing in the (limited) spec which requires primitives to appear in order, they just have to appear before being used in a declaration. It's an easy fix though, if it'll make what you're doing easier I'll change it.</p>",
        "id": 238242038,
        "sender_full_name": "Chris B",
        "timestamp": 1620700034
    },
    {
        "content": "<p>I think it's probably preferable to require them to be in order in a future lean 4 export format since that should be easy to implement across the board. I think eagerly evaluated languages that don't use indirection for the graph elements would be annoyed with the unordered approach.</p>",
        "id": 238242391,
        "sender_full_name": "Chris B",
        "timestamp": 1620700353
    },
    {
        "content": "<blockquote>\n<p>In my case it goes uncontested because there are no declarations</p>\n</blockquote>\n<p><code>nanoda_lib</code> also accepts it in this case (and <code>leanchecker</code> still rejects):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">8</span> <span class=\"n\">u</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">eq</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alpha</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">UP</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">1</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">a</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">0</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alphahat</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">1</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">0</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">2</span> <span class=\"n\">refl</span>\n<span class=\"mi\">7</span> <span class=\"bp\">#</span><span class=\"n\">EC</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"mi\">8</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">7</span> <span class=\"mi\">2</span>\n<span class=\"mi\">9</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">8</span> <span class=\"mi\">1</span>\n<span class=\"mi\">10</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">9</span> <span class=\"mi\">1</span>\n<span class=\"mi\">11</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">10</span>\n<span class=\"mi\">12</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">11</span>\n<span class=\"bp\">#</span><span class=\"n\">IND</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">6</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"mi\">12</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 238242566,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620700477
    },
    {
        "content": "<blockquote>\n<p>It's an easy fix though, if it'll make what you're doing easier I'll change it.</p>\n</blockquote>\n<p>It would help me find more such discrepancies. I'll leave it up to you to determine whether that is a positive outcome. :)</p>",
        "id": 238242753,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620700607
    },
    {
        "content": "<p>lol touche. Do you need it to terminate nicely, or can it just panic?</p>",
        "id": 238242884,
        "sender_full_name": "Chris B",
        "timestamp": 1620700732
    },
    {
        "content": "<p>In my current setup, panic would be fine, because I'm just invoking <code>nanoda_lib</code> as a black box subprocess.</p>",
        "id": 238243010,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620700842
    },
    {
        "content": "<p>But in general, richer error information and avoidance of panics is better.</p>",
        "id": 238243066,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620700899
    },
    {
        "content": "<p>I should also note that I don't have a strong grasp the meanings of the generated inputs. I'm trusting you all to make good judgments about what the \"correct\" behavior a checker should be.</p>",
        "id": 238243188,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620701021
    },
    {
        "content": "<p>Like, I don't want to encourage everyone to converge on a suboptimal standardization.</p>",
        "id": 238243383,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620701174
    },
    {
        "content": "<p><a href=\"https://github.com/ammkrn/nanoda_lib/tree/ptr_check\">https://github.com/ammkrn/nanoda_lib/tree/ptr_check</a></p>",
        "id": 238243705,
        "sender_full_name": "Chris B",
        "timestamp": 1620701465
    },
    {
        "content": "<p>I think you are right on this one since it's not actually \"no declarations\", it's \"no declarations in which the identity of <code>1 #NS 8 u</code> matters enough to ever be read\". It's wrong in a weird way but it's still wrong.</p>",
        "id": 238243919,
        "sender_full_name": "Chris B",
        "timestamp": 1620701647
    },
    {
        "content": "<p>I'm on a different computer, but I don't know why it's saying I'm six commits ahead of master. They seem to be the same other than those changes but lmk if it gives you any issues.</p>",
        "id": 238244390,
        "sender_full_name": "Chris B",
        "timestamp": 1620702047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> <code>nanoda_lib</code> seems to only check the prefix of commands, so it accepts this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">NSBAD</span> <span class=\"mi\">0</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>(and <code>leanchecker</code> rejects it with <code>line 1: unknown term definition kind: #NSBAD</code>)</p>",
        "id": 238245642,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620703114
    },
    {
        "content": "<p>Thanks. Should be fixed on that branch.</p>",
        "id": 238248095,
        "sender_full_name": "Chris B",
        "timestamp": 1620705287
    },
    {
        "content": "<p>Rejected by <code>leanchecker</code>, <code>trepplein</code>, and <code>tc</code>, but accepted by <code>nanoda_lib</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">u</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">eq</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alpha</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">UP</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">1</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">o</span>\n<span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">0</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">0</span> <span class=\"n\">alphahat</span>\n<span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"n\">EV</span> <span class=\"mi\">1</span>\n<span class=\"mi\">3</span> <span class=\"bp\">#</span><span class=\"n\">ES</span> <span class=\"mi\">0</span>\n<span class=\"mi\">4</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"mi\">5</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span>\n<span class=\"mi\">6</span> <span class=\"bp\">#</span><span class=\"n\">NS</span> <span class=\"mi\">2</span> <span class=\"n\">refl</span>\n<span class=\"mi\">7</span> <span class=\"bp\">#</span><span class=\"n\">EC</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"mi\">8</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">7</span> <span class=\"mi\">2</span>\n<span class=\"mi\">9</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">8</span> <span class=\"mi\">1</span>\n<span class=\"mi\">10</span> <span class=\"bp\">#</span><span class=\"n\">EA</span> <span class=\"mi\">9</span> <span class=\"mi\">5</span>\n<span class=\"mi\">11</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BD</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"mi\">10</span>\n<span class=\"mi\">12</span> <span class=\"bp\">#</span><span class=\"n\">EP</span> <span class=\"bp\">#</span><span class=\"n\">BI</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">11</span>\n<span class=\"bp\">#</span><span class=\"n\">IND</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">6</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"mi\">12</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 238287564,
        "sender_full_name": "David Renshaw",
        "timestamp": 1620730868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113488-general/topic/rejected.20by.20leanchecker.20but.20accepted.20by.20trepplein/near/238242038\">said</a>:</p>\n<blockquote>\n<p>Thanks. In my case it goes uncontested because there are no declarations, I suspect it's the same for tc. AFAIK Lean always puts the export items in order, but there's nothing in the (limited) spec which requires primitives to appear in order, they just have to appear before being used in a declaration. It's an easy fix though, if it'll make what you're doing easier I'll change it.</p>\n</blockquote>\n<p>I agree that we should make this part of the spec. No forward references, not just to help eager checkers but also to avoid cyclic references</p>",
        "id": 238319793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620744315
    },
    {
        "content": "<p>The last one is a bug in <code>nanoda_lib</code>, and for a pretty reasonable example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">alphahat</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">),</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">),</span> <span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">alpha</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alphahat</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You can see that the second argument in the type of <code>refl</code> has been corrupted. This is a type error because <code>Π (a' : a) (alphahat : a), Sort 0</code> has type <code>Sort 1</code> and it is expecting something of type <code>alpha</code></p>",
        "id": 238321601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620744973
    },
    {
        "content": "<p>These are helpful, thank you. That should be fixed now. I don't have a local export file for mathlib on this computer, but I'll test it more thoroughly tonight.</p>",
        "id": 238358686,
        "sender_full_name": "Chris B",
        "timestamp": 1620757129
    }
]