[
    {
        "content": "<p>Sorry for the long code block but lean isn't using the definition of<code>smul</code> on a subtype and I really can't see why (the error happens on the third to last line). If anyone could lend some insight that would be amazing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.power_series.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_power_series</span>\n\n<span class=\"sd\">/-- Multivariate restricted power series, where `σ` is the index set of the</span>\n<span class=\"sd\">variables and `R` is the coefficient ring. This is a formal power series such</span>\n<span class=\"sd\">that the coefficients tend to 0 with respect to the cofinite filter on `σ → ℕ`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_restricted_power_series</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">subtype.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_injective</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">subtype.coe_injective</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_zero</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">tendsto.add</span> <span class=\"n\">f.prop</span> <span class=\"n\">g.prop</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">tendsto.neg</span> <span class=\"n\">f.prop</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n        <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">tendsto.comp</span> <span class=\"o\">((</span><span class=\"n\">mul_left_continuous</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">f.prop</span><span class=\"o\">⟩}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">coe_injective.add_comm_group</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coe_add_monoid_hom</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n    <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function.injective.semimodule</span> <span class=\"n\">R</span> <span class=\"n\">coe_add_monoid_hom</span> <span class=\"n\">coe_injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coe_semimodule_hom</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">coe_add_monoid_hom.map_add</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The `n`th coefficient of a multivariate formal power series.-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">coe_semimodule_hom</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- The `n`th monomial with coefficient `a` as multivariate formal power series.-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">mv_power_series.monomial</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">tendsto.congr'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">eventually_eq_of_mem</span> <span class=\"o\">(</span><span class=\"n\">set.finite.compl_mem_cofinite</span> <span class=\"o\">(</span><span class=\"n\">set.finite_singleton</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_monomial_ne</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_add</span><span class=\"o\">],</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subtype.ext_iff</span><span class=\"o\">],</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mv_restricted_power_series</span>\n</code></pre></div>",
        "id": 226958523,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613738979
    },
    {
        "content": "<p>You're missing some simp lemmas to go with your <code>coe_zero</code> lemma - in particular, you should add lemmas about <code>coe_smul</code>, <code>coe_add</code>, <code>coe_sub</code>, and <code>coe_neg</code></p>",
        "id": 226960820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613740346
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_sub</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 226960978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613740452
    },
    {
        "content": "<p>Ah wow thanks, I guess I thought that these were somehow implicitly constructed.</p>",
        "id": 226961015,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613740490
    },
    {
        "content": "<p>Adding <code>←smul_eq_mul</code> to your failing simp call then closes the goal</p>",
        "id": 226961031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613740506
    },
    {
        "content": "<p>It would be nice if they were, but only attributes (<code>@[...]</code>) can do that kind of thing, calling functions like <code>function.injective.semimodule</code> obviously can't have side-effects like that.</p>",
        "id": 226961157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613740566
    },
    {
        "content": "<p>Continuing on this thread, I've got a bizarre error that I can't interpret again. When I try to declare a <code>comm_ring (mv_restricted_power_series σ R)</code> assuming <code>comm_ring R</code>, it doesn't seem to want to use the fact that there's a <code>comm_ring (mv_power_series σ R)</code> (which is declared in the power series file) which should let me use <code>mul_comm</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.power_series.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">mv_power_series</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">nonarchimedean_normed_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">normed_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ultrametric_inequality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonarchimedean_normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Multivariate restricted power series, where `σ` is the index set of the</span>\n<span class=\"sd\">variables and `R` is the coefficient ring. This is a formal power series such</span>\n<span class=\"sd\">that the coefficients tend to 0 with respect to the cofinite filter on `σ → ℕ`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_restricted_power_series</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">subtype.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_injective</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">subtype.coe_injective</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_zero</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">tendsto.add</span> <span class=\"n\">f.prop</span> <span class=\"n\">g.prop</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_sub</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">tendsto.neg</span> <span class=\"n\">f.prop</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n        <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">tendsto.comp</span> <span class=\"o\">((</span><span class=\"n\">mul_left_continuous</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">f.prop</span><span class=\"o\">⟩}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">coe_injective.add_comm_group</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">coe_add</span> <span class=\"n\">coe_neg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coe_add_monoid_hom</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n    <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">coe_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">coe_add</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function.injective.semimodule</span> <span class=\"n\">R</span> <span class=\"n\">coe_add_monoid_hom</span> <span class=\"n\">coe_injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coe_semimodule_hom</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">coe_add</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">coe_smul</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The `n`th coefficient of a multivariate restricted power series.-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">coe_semimodule_hom</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- The `n`th monomial with coefficient `a` as multivariate restricted power series.-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">mv_power_series.monomial</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">tendsto.congr'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">eventually_eq_of_mem</span> <span class=\"o\">(</span><span class=\"n\">set.finite.compl_mem_cofinite</span> <span class=\"o\">(</span><span class=\"n\">set.finite_singleton</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_monomial_ne</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_add</span><span class=\"o\">],</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">coe_smul</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_smul</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">monomial</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_one</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">apply_coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">f.val</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">f</span>\n     <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rwa</span> <span class=\"n\">h</span><span class=\"o\">},</span> <span class=\"n\">ext</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonzero_coeff_of_nonzero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∥</span><span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.map_zero</span><span class=\"o\">,</span> <span class=\"n\">push_neg.not_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">norm_pos_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">function.injective.ring</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">coe_injective</span> <span class=\"n\">coe_zero</span> <span class=\"n\">coe_one</span> <span class=\"n\">coe_add</span> <span class=\"n\">coe_mul</span> <span class=\"n\">coe_neg</span>\n\n<span class=\"c1\">--instance [comm_ring R] : comm_ring (mv_restricted_power_series σ R) :=</span>\n<span class=\"c1\">--  function.injective.comm_ring (coe : mv_restricted_power_series σ R → mv_power_series σ R) coe_injective coe_zero coe_one coe_add coe_mul coe_neg</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_restricted_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subtype.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">coe_mul</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">mv_restricted_power_series.ring</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mv_restricted_power_series</span>\n</code></pre></div>",
        "id": 226974599,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613746851
    },
    {
        "content": "<p>You have two ring instances, one via <code>nonarchimedean_normed_ring R</code> and one from <code>comm_ring R</code></p>",
        "id": 226975484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613747200
    },
    {
        "content": "<p>You need to add a <code>nonarchimedean_normed_comm_ring R</code> typeclass that extends <del>both</del> <code>nonarchimedean_normed_ring</code> and <code>normed_comm_ring</code></p>",
        "id": 226975503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613747210
    },
    {
        "content": "<p>Ahh ok I see, that makes sense</p>",
        "id": 226975570,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613747246
    },
    {
        "content": "<p>Using <code>convert</code> instead of <code>exact</code> makes that difference easier to spot</p>",
        "id": 226975615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613747267
    }
]