[
    {
        "content": "<p>I am doing the homework I set my students. I seem to often want \"induction on n &gt;= 1\" and in this question I even want \"induction starting at n = 2\". I have a family of propositions <code>P n</code> for <code>n : nat</code>, which are true for n &gt;= 2 (and this can be proved by induction on n&gt;=2), and I also have the hypothesis <code>Hn2 : n &gt;= 2</code>. Currently (in tactic mode) I write</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"c1\">-- hypotheses    n : ℕ</span>\n  <span class=\"c1\">--             Hn2 : n ≥ 2</span>\n  <span class=\"c1\">-- now replace n with m + 2 and then do induction on m &gt;= 0</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">Hn2</span><span class=\"o\">,</span> <span class=\"c1\">-- Hn2 : 0 ≥ 2 and cases kills it.</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">Hn2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"c1\">-- here Hn2 : 1 ≥ 2 and cases doesn&#39;t kill it</span>\n  <span class=\"n\">clear</span> <span class=\"n\">Hn2</span><span class=\"o\">,</span> <span class=\"c1\">-- and we&#39;re finally ready to go</span>\n  <span class=\"c1\">-- it would be nice to have</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">Hd</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>and off I go. But even then it's pretty meh because n is replaced by <code>nat.succ (nat.succ m)</code>. </p>\n<p>I don't think it would be too hard to knock up some kind of \"modified principle of induction\" which takes as input a hypothesis n&gt;=2 and spits out two goals, one the case n = 2 and the other the goal <code>P (n + 1)</code> assuming both <code>P n</code> and <code>n &gt;= 2</code> still. </p>\n<p>I might try to get a minion to do this. How would this work exactly?  I've just looked at the source code for meta induction and it looks intimidating, but I guess that's because it works on a general inductive type. Is this a feasible project for a student? What should it be called? What should the syntax be? <code>modified_induction n Hn2 with d Hd</code>?  It's just something that seems to come up a lot in my class, that's why I'm interested.</p>",
        "id": 147917777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542548629
    },
    {
        "content": "<p>No need for a custom tactic, you can define that as a lemma, and maybe invoke it with <code>inducting ... using</code>.</p>",
        "id": 147918117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542549413
    },
    {
        "content": "<p>Hmm. What is this <code>using</code> of which you speak? Is that some keyword I don't know?</p>",
        "id": 147918290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542549812
    },
    {
        "content": "<p>it comes out blue in VS code so I guess it means something...</p>",
        "id": 147918299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542549842
    },
    {
        "content": "<p>It's one of the keywords that can be used by interactive tactics I guess</p>",
        "id": 147918336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542549896
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Q0502&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">4</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">Hd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now pick up the pieces for modified induction</span>\n  <span class=\"n\">intro</span> <span class=\"n\">Hs</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">Hs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"c1\">-- base case n = 2,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">Hd</span> <span class=\"o\">:=</span> <span class=\"n\">Hd</span> <span class=\"n\">Hs_a</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">Hs_a</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  d : ℕ,</span>\n<span class=\"cm\">  Hd : 4 ^ d &gt; 3 ^ d + 2 ^ d</span>\n<span class=\"cm\">  ⊢ 4 ^ nat.succ d &gt; 3 ^ nat.succ d + 2 ^ nat.succ d</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"c1\">-- exact calc blah</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This isn't so bad, although using induction twice does look weird. I think I still want it to be better though. I need to learn about <code>using</code> apparently...</p>",
        "id": 147918435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542550094
    },
    {
        "content": "<p>Check out the docstring for <code>induction</code> (it's quite long)</p>",
        "id": 147918438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542550141
    },
    {
        "content": "<p>this is not the easiest way to prove it</p>",
        "id": 147918796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542550947
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">lt</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"bp\">_</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147918968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542551355
    },
    {
        "content": "<p>this is what I usually do when I have an induction with a weird base case</p>",
        "id": 147918969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542551381
    },
    {
        "content": "<p>But it makes it harder to see what's going on</p>",
        "id": 147919062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542551526
    },
    {
        "content": "<p>It's still better than both my ways though :-)</p>",
        "id": 147919065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542551570
    },
    {
        "content": "<p>but that doesn't mean that I'm happy with it.</p>",
        "id": 147919070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542551586
    },
    {
        "content": "<p>this is a bit more flexible with weird induction steps:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">lt</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">lt</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"bp\">_</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147919113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542551683
    },
    {
        "content": "<p>That's the optimal set-up I guess. So now I can do \"induction n using ^^^\" somehow?</p>",
        "id": 147919124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542551729
    },
    {
        "content": "<p>eh, it's not that great</p>",
        "id": 147919125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542551749
    },
    {
        "content": "<p><code>induction using</code> has little to offer over <code>refine</code> and it is much pickier</p>",
        "id": 147919164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542551779
    },
    {
        "content": "<p>I just want to make it a one-liner for my students to go from goal <code>P n</code> and hypothesis <code>Hn : n &gt;= 2</code> to goals <code>P 2</code> and <code>P (d + 1)</code>, the latter with hypotheses <code>P d</code> and <code>d &gt;= 2</code></p>",
        "id": 147919174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542551839
    },
    {
        "content": "<p>sure, just use this lemma</p>",
        "id": 147919216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542551892
    },
    {
        "content": "<p>indeed!</p>",
        "id": 147919218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542551901
    },
    {
        "content": "<p>Yes, this is better than anything I had. I've added modified induction to <code>xenalib</code> :-)</p>",
        "id": 147919454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542552377
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 147919455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542552381
    },
    {
        "content": "<blockquote>\n<p><code>induction using</code> has little to offer over <code>refine</code> and it is much pickier</p>\n</blockquote>\n<p>It may require Lean 4 but I hope we'll have something as powerfull as SSReflect <code>elim</code> instead</p>",
        "id": 147925201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542564543
    },
    {
        "content": "<blockquote>\n<p>this is a bit more flexible with weird induction steps:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">lt</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">lt</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"bp\">_</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>\n<p>Has this been incorporated in mathlib? It turns out that I just need this lemma right now :)</p>",
        "id": 150688665,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543681218
    },
    {
        "content": "<p>In the middle of a proof, I need to define by induction a function from ℕ to some type α. I know how to do this with a top-level definition, but I could not figure out the syntax inside a proof. Is this possible?</p>",
        "id": 150689029,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543682008
    },
    {
        "content": "<p>I don't think you can do it using the equation compiler</p>",
        "id": 150689418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543682826
    },
    {
        "content": "<p>Yes, I have probably to use <code>nat.rec_on</code>, but this looks really arcane.</p>",
        "id": 150689522,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543683010
    }
]