[
    {
        "content": "<p>I'm thinking about documenting core tactics. Below are some core tactics, with no docstrings, and I have no idea what any of them do. Is an end user ever supposed to use any of them? I propose not adding them to the community docs. I suspect many are intermediate constructions which are not supposed to be used by the end user (but on the other hand all of them are in <code>tactic.interactive</code>...). Is anyone's favourite interactive tactic on this list?</p>\n<div class=\"codehilite\"><pre><span></span>cases_arg_p,\ncases_core,\nconcat_tags,\nconstructor_matching,\nexacts._main,\nexistsi._main,\nget_rule_eqn_lemmas,\nguard_expr_eq,\npropagate_tags,\nrsimp,\nrw_rule,\nrw_rule.cases_on,\nrw_rule.has_reflect,\nrw_rule.mk,\nrw_rule.mk.inj,\nrw_rule.mk.inj_arrow,\nrw_rule.no_confusion,\nrw_rule.no_confusion_type,\nrw_rule.pos,\nrw_rule.rec,\nrw_rule.rec_on,\nrw_rule.rule,\nrw_rule.symm,\nrw_rule_p,\nrw_rules,\nrw_rules_t,\nrw_rules_t.cases_on,\nrw_rules_t.end_pos,\nrw_rules_t.has_reflect,\nrw_rules_t.mk,\nrw_rules_t.mk.inj,\nrw_rules_t.mk.inj_arrow,\nrw_rules_t.no_confusion,\nrw_rules_t.no_confusion_type,\nrw_rules_t.rec,\nrw_rules_t.rec_on,\nrw_rules_t.rules,\nsimp_core,\nsimp_core_aux,\nto_expr&#39;,\n</pre></div>",
        "id": 193428623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586426105
    },
    {
        "content": "<p><code>propagate_tags</code> is somewhat useful but it's primarily meant for non-interactive use. The only one there that is an actual end user tactic is <code>rsimp</code></p>",
        "id": 193428755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426215
    },
    {
        "content": "<p><code>constructor_matching</code> too I think</p>",
        "id": 193428774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426232
    },
    {
        "content": "<p>Just to note that this follows from a conversation <a href=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193421143\" title=\"#narrow/stream/116395-maths/topic/mul_left_cancel/near/193421143\">here</a></p>",
        "id": 193428800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586426244
    },
    {
        "content": "<p>Do you fancy telling me docstrings for these tactics?</p>",
        "id": 193428809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586426257
    },
    {
        "content": "<p><code>rsimp</code> is simp but more... robust?</p>",
        "id": 193428828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426274
    },
    {
        "content": "<p><code>propagate_tags</code> propagates tags</p>",
        "id": 193428882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426295
    },
    {
        "content": "<p><code>rintro</code> is intro but more... robust?</p>",
        "id": 193428894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586426302
    },
    {
        "content": "<p><code>rsimp</code> is simp but more... recursive?</p>",
        "id": 193428920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586426325
    },
    {
        "content": "<p>A lot of those are misplaced in the tactic.interactive namespace.</p>",
        "id": 193428921,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586426327
    },
    {
        "content": "<p>I guessed.</p>",
        "id": 193428930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586426334
    },
    {
        "content": "<p>Let's fix this in Lean 3.8.1 (-;</p>",
        "id": 193428974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586426349
    },
    {
        "content": "<p>But now would be a good time for someone to write a docstring for any tactic they want to save on this list.</p>",
        "id": 193428978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586426351
    },
    {
        "content": "<p>At some point in the doc gen stuff I wanted to enforce that every declaration in  <code>tactic.interactive</code> had a doc string and would get displayed.</p>",
        "id": 193428999,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586426370
    },
    {
        "content": "<p>But there was way too much junk in the namespace to do this.</p>",
        "id": 193429015,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586426384
    },
    {
        "content": "<p><code>guard_expr_eq</code> is actually an interactive tactic</p>",
        "id": 193429052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426399
    },
    {
        "content": "<p>it looks useful for testing</p>",
        "id": 193429136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426416
    },
    {
        "content": "<p>although it's a bit odd that the first argument is an <code>expr</code> and the second is parsed</p>",
        "id": 193429218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426465
    },
    {
        "content": "<p>actually scratch that, I think the main intended use of this function is via <code>guard_target</code> and <code>guard_hyp</code></p>",
        "id": 193429366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426542
    },
    {
        "content": "<p><code>propagate_tags</code> is a noninteractive tactic</p>",
        "id": 193429412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426581
    },
    {
        "content": "<p>Here's an example of <code>constructor_matching</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"bp\">∨</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">constructor_matching</span><span class=\"bp\">*</span> <span class=\"o\">[</span><span class=\"bp\">_∧_</span><span class=\"o\">,</span> <span class=\"bp\">_∨_</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193429820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426864
    },
    {
        "content": "<p><code>rsimp</code> is something I would love to read a doc string about. It uses smt stuff internally, it probably does some <code>cc</code> inside it, and it strangely has no space for lemma inputs like <code>simp</code>; I think it relies entirely on annotations and things in the context</p>",
        "id": 193430161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586427079
    },
    {
        "content": "<p>I think <code>rsimp</code> is documented in the Lean 3 meta-programing paper.</p>",
        "id": 193430678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586427398
    },
    {
        "content": "<p>If someone who understands something about any of the tactics listed above could just give me a docstring sentence while I fix up all the other issues I've run into, that would be great. Anything in the above list which we don't get a sentence for will not be included because I know 99% of us can live without all of them</p>",
        "id": 193436367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586431188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Do you have a branch where you collect them? Or do you want people to post in this thread?</p>",
        "id": 193436513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586431271
    },
    {
        "content": "<p>I don't think I've ever used any of the tactics on that list</p>",
        "id": 193436580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586431314
    },
    {
        "content": "<p>I think <code>rsimp</code> and <code>constructor_matching</code> are the only two that need documentation</p>",
        "id": 193436734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586431398
    },
    {
        "content": "<p>the rest are just non-interactive tactics and should be documented elsewhere</p>",
        "id": 193436770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586431423
    },
    {
        "content": "<p>Can someone confirm that the core docstrings for <code>cases_matching</code> and <code>cases_type</code> are incorrect? They both seem to make the claim in their example that they will do something to the goal, but in experiments I can only make these tactics do something to do hypotheses.</p>",
        "id": 193438801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586432888
    },
    {
        "content": "<p>Currently the docstring for <code>cc</code> is <code>Tries to prove the main goal using congruence closure.</code>. I remember this being no help to me whatsoever as a beginner. Does anyone have any better suggestions, e.g. a reference?</p>",
        "id": 193438858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586432937
    },
    {
        "content": "<p><code>congr</code> has no docstring. Should the docstring be \"This tactic is broken -- use <code>congr'</code>\"?</p>",
        "id": 193438898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586432969
    },
    {
        "content": "<p>Are we happy with <code>dsimp</code> documentation \"<code>dsimp</code> is similar to <code>simp</code>, except that it only uses definitional equalities.\"?</p>",
        "id": 193438982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433017
    },
    {
        "content": "<p><code>cases_matching</code> and <code>cases_type</code> are more automated variants of <code>cases</code>, and have a similar effect on the goal</p>",
        "id": 193439047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586433082
    },
    {
        "content": "<p>Does <code>cases</code> have any effect on a goal?</p>",
        "id": 193439069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193438801\" title=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193438801\">said</a>:</p>\n<blockquote>\n<p>Can someone confirm that the core docstrings for <code>cases_matching</code> and <code>cases_type</code> are incorrect? They both seem to make the claim in their example that they will do something to the goal, but in experiments I can only make these tactics do something to do hypotheses.</p>\n</blockquote>\n<p>I think both use \"goal\" to refer to the context + target, not just the target.</p>",
        "id": 193439084,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433107
    },
    {
        "content": "<p>!</p>",
        "id": 193439090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433113
    },
    {
        "content": "<p>They change the context, which you could argue is part of the goal. But \"goal\" is used differently in e.g. <code>tactic.get_goals</code></p>",
        "id": 193439159,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433155
    },
    {
        "content": "<p>That's it for now, although I could mention that the <code>iterate</code> docstring displays with one of those \"error while executing interactive.param_desc\" errors. Is this something which can be fixed now?</p>",
        "id": 193439175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193438898\" title=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193438898\">said</a>:</p>\n<blockquote>\n<p><code>congr</code> has no docstring. Should the docstring be \"This tactic is broken -- use <code>congr'</code>\"?</p>\n</blockquote>\n<p>If <code>congr'</code> isn't in core, then no, it shouldn't be.</p>",
        "id": 193439211,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433220
    },
    {
        "content": "<p>it's <code>small_nat</code> causing problems again</p>",
        "id": 193439213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586433223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193438858\" title=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193438858\">said</a>:</p>\n<blockquote>\n<p>Currently the docstring for <code>cc</code> is <code>Tries to prove the main goal using congruence closure.</code>. I remember this being no help to me whatsoever as a beginner. Does anyone have any better suggestions, e.g. a reference?</p>\n</blockquote>\n<p>There's a pretty good tactic doc that we add for <code>cc</code> in mathlib already.</p>",
        "id": 193439287,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433257
    },
    {
        "content": "<p>Oh gosh, are some of these things in already??</p>",
        "id": 193439314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193438982\" title=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193438982\">said</a>:</p>\n<blockquote>\n<p>Are we happy with <code>dsimp</code> documentation \"<code>dsimp</code> is similar to <code>simp</code>, except that it only uses definitional equalities.\"?</p>\n</blockquote>\n<p>I mean, it could definitely be improved...</p>",
        "id": 193439322,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433283
    },
    {
        "content": "<p>The only core tactics with doc entries (that are tagged with the <code>core</code> label, anyway) are <code>cc</code>, <code>simp</code>, and <code>conv</code>.</p>",
        "id": 193439412,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433333
    },
    {
        "content": "<p>That's great news about <code>conv</code> because this has no docstring.</p>",
        "id": 193439518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433371
    },
    {
        "content": "<p>So I can just delete <code>cc</code>, <code>simp</code> and <code>conv</code> from my list I guess?</p>",
        "id": 193439552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433400
    },
    {
        "content": "<p>In fact I have to delete <code>simp</code>, running <code>add_tactic_doc</code> gives the error <code>invalid object declaration, environment already has an object named 'tactic_doc._2018668402'</code>. That's clever. Is some hashing going on?</p>",
        "id": 193439612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433460
    },
    {
        "content": "<p>Ideally you could transport the doc entries for <code>cc</code>, <code>simp</code> and <code>conv</code> from mathlib into doc strings in core?</p>",
        "id": 193439679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586433502
    },
    {
        "content": "<p>If you're planning to make a PR to core adding doc strings, maybe you could use the first few sentences of the doc entries for those tactics? They're all pretty detailed entries, probably too much for doc strings.</p>",
        "id": 193439687,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193439612\" title=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193439612\">said</a>:</p>\n<blockquote>\n<p>In fact I have to delete <code>simp</code>, running <code>add_tactic_doc</code> gives the error <code>invalid object declaration, environment already has an object named 'tactic_doc._2018668402'</code>. That's clever. Is some hashing going on?</p>\n</blockquote>\n<p>Yes, this is because there's already a doc entry with the name <code>simp</code>.</p>",
        "id": 193439742,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433528
    },
    {
        "content": "<p>(The error reporting could be improved.)</p>",
        "id": 193439765,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433538
    },
    {
        "content": "<p>Was your list above of undocumented tactics exhaustive? If so, perhaps we should go through removing most of them from the interactive namespace.</p>",
        "id": 193439791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586433554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193439791\" title=\"#narrow/stream/113488-general/topic/undocumented.20core.20tactics/near/193439791\">said</a>:</p>\n<blockquote>\n<p>Was your list above of undocumented tactics exhaustive? If so, perhaps we should go through removing most of them from the interactive namespace.</p>\n</blockquote>\n<p>It wouldn't hurt, but I think it's a decent amount of effort that is better spent on other things.</p>",
        "id": 193439991,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433665
    },
    {
        "content": "<p>mathlib makes a mess of the interactive namespace too.</p>",
        "id": 193440042,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586433687
    },
    {
        "content": "<p>It wasn't quite  exhaustive -- <code>congr</code> has no docstring (and I still don't know what to write for it).</p>",
        "id": 193440176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586433725
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/-- Basically equivalent to `convert rfl`, the `congr` tactic attempts to identify both\n  sides of an equality goal `A = B`, leaving as new goals the subterms of `A` and `B`\n  which are not definitionally equal. Note that `congr` can be over-aggressive at times;\n  in mathlib the `congr&#39;` tactic provides a more refined approach.-/\n</pre></div>",
        "id": 193441372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586434517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Note that <code>convert</code> uses <code>congr</code> under the hood.</p>",
        "id": 193442293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586435069
    },
    {
        "content": "<p>I was copying docstrings over for unhelpfully-documented tactics such as <code>ac_refl</code> and <code>rw</code>, where the docstring is just \"this is an abbreviation for another tactic\". But actually, do we really want both <code>ac_refl</code> and <code>ac_reflexivity</code> in our docs? They are the same tactic. Should we just choose one?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Proves a goal with target `s = t` when `s` and `t` are equal up to the associativity and</span>\n<span class=\"cm\">commutativity of their binary operations. -/</span>\n<span class=\"n\">add_tactic_doc</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span>       <span class=\"o\">:=</span> <span class=\"s2\">&quot;ac_refl&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">category</span>   <span class=\"o\">:=</span> <span class=\"n\">doc_category</span><span class=\"bp\">.</span><span class=\"n\">tactic</span><span class=\"o\">,</span>\n  <span class=\"n\">decl_names</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ac_refl</span><span class=\"o\">],</span>\n  <span class=\"n\">tags</span>       <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;lemma application&quot;</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"n\">add_tactic_doc</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span>       <span class=\"o\">:=</span> <span class=\"s2\">&quot;ac_reflexivity&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">category</span>   <span class=\"o\">:=</span> <span class=\"n\">doc_category</span><span class=\"bp\">.</span><span class=\"n\">tactic</span><span class=\"o\">,</span>\n  <span class=\"n\">decl_names</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ac_reflexivity</span><span class=\"o\">],</span>\n  <span class=\"n\">tags</span>       <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;lemma application&quot;</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193442501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586435261
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The `congr` tactic attempts to identify both sides of an equality goal `A = B`,</span>\n<span class=\"cm\"> leaving as new goals the subterms of `A` and `B` which are not definitionally equal.</span>\n<span class=\"cm\"> Example: suppose the goal is `x * f y = g w * f z`. Then `congr` will produce two goals:</span>\n<span class=\"cm\"> `x = g w` and `y = z`.</span>\n\n<span class=\"cm\"> Note that `congr` can be over-aggressive at times; in mathlib the `congr&#39;` tactic provides</span>\n<span class=\"cm\"> a more refined approach, by taking a parameter that limits the recursion depth.-/</span>\n</pre></div>",
        "id": 193442523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586435278
    },
    {
        "content": "<blockquote>\n<p>Should we just choose one?</p>\n</blockquote>\n<p>Yes, maybe mention both names in the doc entry, but it doesn't need two entries. You can put multiple names in the <code>decl_names</code> field.</p>",
        "id": 193444434,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586436355
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">add_tactic_doc</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span>       <span class=\"o\">:=</span> <span class=\"s2\">&quot;rw&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">category</span>   <span class=\"o\">:=</span> <span class=\"n\">doc_category</span><span class=\"bp\">.</span><span class=\"n\">tactic</span><span class=\"o\">,</span>\n  <span class=\"n\">decl_names</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">rw</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">],</span>\n  <span class=\"n\">tags</span>       <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;basic&quot;</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193444563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586436426
    },
    {
        "content": "<p>I don't understand the back ticks in decl_names</p>",
        "id": 193444584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586436438
    },
    {
        "content": "<p>Note also I added a new tag \"basic\", which we might be able to point beginners to who want to prove basic goals like the exercises in TPIL or the NNG levels.</p>",
        "id": 193444675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586436472
    },
    {
        "content": "<p>Like that. But if my docs for <code>add_tactic_doc</code> are right, you'll have to add one more field in this case: <code>inherit_description_from := `tactic.interactive.rw</code> since it doesn't know which one to take the entry from.</p>",
        "id": 193445260,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586436776
    },
    {
        "content": "<p><code>decl_names</code> is a list of names. If you just wrote <code>tactic.interactive.foo</code>, this could refer to a definition <code>foo : name</code>. The backticks say \"parse this thing as a literal name.\"</p>",
        "id": 193445424,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586436870
    },
    {
        "content": "<p>If the \"description\" is the docstring, then I think I'd rather inherit from <code>rewrite</code> because the docstring for <code>rw</code> is useless (it says \"an abbreviation for <code>rewrite</code>\"). However if I inherit from <code>rewrite</code> then all the examples use <code>rewrite</code>. Can I instead do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">`rw e` applies identity `e` as a rewrite rule to the target of the main goal. If `e` is preceded by</span>\n<span class=\"cm\">left arrow (`←` or `&lt;-`), the rewrite is applied in the reverse direction. If `e` is a defined</span>\n<span class=\"cm\">constant, then the equational lemmas associated with `e` are used. This provides a convenient</span>\n<span class=\"cm\">way to unfold `e`.</span>\n\n<span class=\"cm\">`rw [e₁, ..., eₙ]` applies the given rules sequentially.</span>\n\n<span class=\"cm\">`rw e at l` rewrites `e` at location(s) `l`, where `l` is either `*` or a list of hypotheses</span>\n<span class=\"cm\">in the local context. In the latter case, a turnstile `⊢` or `|-` can also be used, to signify</span>\n<span class=\"cm\">the target of the goal.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">add_tactic_doc</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span>       <span class=\"o\">:=</span> <span class=\"s2\">&quot;rw&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">category</span>   <span class=\"o\">:=</span> <span class=\"n\">doc_category</span><span class=\"bp\">.</span><span class=\"n\">tactic</span><span class=\"o\">,</span>\n  <span class=\"n\">decl_names</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">rw</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">],</span>\n  <span class=\"n\">tags</span>       <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;basic&quot;</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>? Have I understood correctly?</p>",
        "id": 193445719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586437032
    },
    {
        "content": "<p>Yep, that's perfect.</p>",
        "id": 193445780,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586437074
    },
    {
        "content": "<p>But honestly, I'd rather just replace the <code>rw</code> doc string with what you just wrote, and inherit the doc entry from that.</p>",
        "id": 193445859,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586437110
    },
    {
        "content": "<p>No reason to keep useless doc strings around if you're writing their replacements anyway.</p>",
        "id": 193445939,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586437155
    },
    {
        "content": "<p>Yes, there is a PR to core in this. But here's my logic: the PR I'm making for mathlib has a whole load of <code>add_tactic_doc</code>s with no docstrings, and the few that do have docstrings correspond exactly to the things which need to be changed in core. So I figured I'd do this one first and see if anyone has comments about my modified docstrings, with the advantage being that it can be deployed quickly. When the mathlib PR has gone through the review process I can then PR to core, and when that has gone through and mathlib catches up with core I can then do a third PR removing the docstrings I'm adding in the first PR. There seems to me to be little point in doing them both simultaneously, because then we'll end up with docs which are suboptimal for a few weeks.</p>",
        "id": 193446370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586437351
    },
    {
        "content": "<p>It sounds like extra work for you, but if you're willing, that's fine :)</p>",
        "id": 193446911,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586437575
    },
    {
        "content": "<p>How many things would you have to change in core? We just had a 3.8 release and haven't even moved mathlib over yet. If the review isn't too complicated, you could PR those to core now, we can release 3.8.1, and then your mathlib additions can follow at your leisure.</p>",
        "id": 193447410,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586437816
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2371\" title=\"https://github.com/leanprover-community/mathlib/issues/2371\">#2371</a> . I'm so far from my comfort zone right now I don't really want to be making a core Lean PR until other people have had a chance to look at what I already did. When will the API docs change?</p>",
        "id": 193449460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586438785
    },
    {
        "content": "<p>I'll take a look now! For what it's worth, the people looking at core Lean PRs are a strict subset of those looking at mathlib PRs.</p>",
        "id": 193450123,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586439110
    },
    {
        "content": "<p>The docs will update about an hour after the PR gets merged.</p>",
        "id": 193450206,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586439127
    },
    {
        "content": "<p>Wow, thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>! I'm also going through this now, and have already learnt two cool tactics, <code>cases_matching</code> and <code>cases_type</code>.</p>",
        "id": 193450607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586439308
    },
    {
        "content": "<p>Can't we combine the doc entries for <code>erw</code> and <code>erewrite</code> into one?</p>",
        "id": 193450819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586439405
    },
    {
        "content": "<p>I'm not certain of the behaviour of <code>add_tactic_doc</code>, but I think you can just list more than one declaration in the <code>decl_names</code> field.</p>",
        "id": 193450868,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586439431
    },
    {
        "content": "<p>You might then need to specify which doc string gets used, using the optional <code>inherit_doc_string_from</code> (or something like that) field.</p>",
        "id": 193450930,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586439459
    },
    {
        "content": "<p>Yes thanks for this, I may well have missed out other duplicate tactics, I genuinely don't know what half of these things do and part of me is tempted to not put a bunch of them into the API docs</p>",
        "id": 193452195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586440081
    },
    {
        "content": "<p>Okay, I left some comments on the top part. Rather than the long list of suggestions on the PR, it'll be easier for me just to push a commit that adds a bunch of tags.</p>",
        "id": 193453599,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586440731
    },
    {
        "content": "<p>I don't have time right this sec, so Kevin or others, if you'd like to tag some tactics, feel free!</p>",
        "id": 193453642,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586440751
    },
    {
        "content": "<p>Anything that mainly creates/combines hypotheses should be tagged \"context management.\" Stuff like <code>intro</code>, <code>constructor</code>, etc can be \"logic.\" If a tactic fails when it doesn't close the goal, \"finishing.\"</p>",
        "id": 193453888,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586440843
    },
    {
        "content": "<p>Too me something like <code>intro</code> and <code>apply</code> sounds like \"basic\", where with \"logic\" I would think of tableau provers or something like that...</p>",
        "id": 193455345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586441493
    },
    {
        "content": "<p>They can be \"basic\" too, tags aren't exclusive. I say \"logic\" because they're very close to the core syntax of Lean.</p>",
        "id": 193457138,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586442336
    },
    {
        "content": "<p>(<code>tauto</code> is also tagged \"logic\")</p>",
        "id": 193457175,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586442357
    },
    {
        "content": "<p>Thanks for doing this Kevin! I just added some suggestions to the PR, mostly \"finishing\" tags, and I tried to combine <code>erw</code> and <code>erewrite</code> the way you did <code>rw</code> and <code>rewrite</code>.</p>",
        "id": 193457479,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586442495
    },
    {
        "content": "<p>See the result of Kevin's hard work here: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a> (use the drop down menu on the left to filter for label \"core\").</p>",
        "id": 193708749,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586690286
    },
    {
        "content": "<p>This makes it much easier to notice what's mislabeled and which doc strings need to be updated!</p>",
        "id": 193708764,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586690307
    },
    {
        "content": "<p>Most of the new docstrings are directly from core. The next step is to see if we want to change any of the core docstrings. I for one will be very pleased to see the back of <code>An abbreviation for rewrite</code> which people who want to see advanced syntax for <code>rw</code> get.</p>",
        "id": 193708917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586690552
    },
    {
        "content": "<p>I mean, if not for that docstring, would you even know that <code>rewrite</code> exists?</p>",
        "id": 193711858,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586695848
    },
    {
        "content": "<p>Seems pretty helpful to me <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 193711860,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586695854
    },
    {
        "content": "<p>Maybe the title of that page needs to be changed now.</p>",
        "id": 193713873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586699191
    }
]