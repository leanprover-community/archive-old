[
    {
        "content": "<p>Can anyone suggest a shorter proof for this lemma (to qualify you have to be using mathlib@775edc615ecec631d65b6180dbcc7bc26c3abc26 or newer):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_tmul'_int</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">gsmul_eq_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gsmul_of_nat</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.smul_def</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">add_comm_monoid.nat_semimodule</span> <span class=\"n\">tensor_product.semimodule'</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">smul_tmul'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gsmul_neg_succ_of_nat</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.smul_def</span><span class=\"o\">,</span> <span class=\"n\">neg_tmul</span><span class=\"o\">,</span> <span class=\"n\">tmul_neg</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">neg_inj</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">add_comm_monoid.nat_semimodule</span> <span class=\"n\">tensor_product.semimodule'</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">smul_tmul'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220408474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608314992
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ git checkout 775edc615ecec631d65b6180dbcc7bc26c3abc26\nfatal: reference is not a tree: 775edc615ecec631d65b6180dbcc7bc26c3abc26\n</code></pre></div>\n<p>and on master I get an unexpected token at <code>M ⊗[R] N</code> in the statement.</p>",
        "id": 220410561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608316078
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/775edc615ecec631d65b6180dbcc7bc26c3abc26\">https://github.com/leanprover-community/mathlib/commit/775edc615ecec631d65b6180dbcc7bc26c3abc26</a></p>",
        "id": 220410659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608316110
    },
    {
        "content": "<p>Added the missing <code>open_locale</code></p>",
        "id": 220410789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608316188
    },
    {
        "content": "<p>The proof for that lemma was easier before that commit, but on the other hand the proof for <code>nat</code> was harder.</p>",
        "id": 220411390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608316461
    },
    {
        "content": "<p>aah, I was a few hours out of date :-)</p>",
        "id": 220411613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608316584
    },
    {
        "content": "<p>Still doesn't compile for me.</p>",
        "id": 220412029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608316811
    },
    {
        "content": "<p><code>open tensor_product</code>?</p>",
        "id": 220412058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608316828
    },
    {
        "content": "<p>I wonder if either there's a clever simp lemma that could be made to solve this type of thing, or whether it would need to be a tactic.</p>",
        "id": 220412286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608316955
    },
    {
        "content": "<p>why doesn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.smul_tmul\">docs#tensor_product.smul_tmul</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.tmul_smul\">docs#tensor_product.tmul_smul</a> take care of this?</p>",
        "id": 220412662,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608317156
    },
    {
        "content": "<p>Because there is no Z-module instance for <code>comm_semiring R</code> provided in that file</p>",
        "id": 220413008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317359
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 220413028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608317373
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">smul_tmul'_int</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.induction_on</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">add_tmul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">neg_tmul</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">add_tmul</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220413054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608317391
    },
    {
        "content": "<p>Adam, in master there is now an instance for <code>comm_ring R</code> though, and those lemmas do work</p>",
        "id": 220413055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317391
    },
    {
        "content": "<p>Do we have the construction which \"ringifies\" a semiring?</p>",
        "id": 220413330,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608317532
    },
    {
        "content": "<p>Is there one?</p>",
        "id": 220413362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317549
    },
    {
        "content": "<p>Sure, formally add all negations</p>",
        "id": 220413388,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608317558
    },
    {
        "content": "<p>You might get the trivial ring but it still works.</p>",
        "id": 220413419,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608317576
    },
    {
        "content": "<p>E.g. the ringification of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>.</p>",
        "id": 220413469,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608317603
    },
    {
        "content": "<p>Oh right, I thought you mean a mechanism to create a ring structure on N, not a new type that has the structure</p>",
        "id": 220413619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317663
    },
    {
        "content": "<p>My point is the an additive commutative group which is a semimodule over a semiring turns out to be a module over the ringification</p>",
        "id": 220413745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608317726
    },
    {
        "content": "<p>Yeah, I see that now</p>",
        "id": 220413773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317745
    },
    {
        "content": "<p>So if we had this construction and some simp lemma that takes tmul over the semiring to tmul over the ringification, then those two lemmas would prove your result immediately</p>",
        "id": 220413850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608317775
    },
    {
        "content": "<p>my original plan was to create a new <code>tensor_product.smul_compatible</code> type-class, and add <code>is_scalar_tower.to_smul_compatible</code> and <code>int.smul_compatible</code> so that the <code>smul_tmul'</code> lemma automatically works for int in this case</p>",
        "id": 220413878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317789
    },
    {
        "content": "<p>But maybe there's a better generalization of <code>is_scalar_tower</code> to make this case work</p>",
        "id": 220413991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317851
    },
    {
        "content": "<p>Kevin's proof is very special for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>, it seems.</p>",
        "id": 220414042,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608317876
    },
    {
        "content": "<p>Right</p>",
        "id": 220414049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317881
    },
    {
        "content": "<p>Hence my plan to create a typeclass to hook the proof into</p>",
        "id": 220414090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317889
    },
    {
        "content": "<p>Which means that the user doesn't have to care that the proof is special, they just apply the <code>smul_tmul</code> lemma and it works</p>",
        "id": 220414129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608317918
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sub_tmul</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">-</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m₁</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m₂</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">add_tmul</span><span class=\"o\">,</span> <span class=\"n\">neg_tmul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_tmul'_int</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.induction_on</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">add_tmul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_smul</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">sub_tmul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220414216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608317956
    },
    {
        "content": "<p><code>sub_tmul</code> is missing for some reason.</p>",
        "id": 220414289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608317990
    },
    {
        "content": "<p>I suspect a lot of <code>sub</code> lemmas were missing because we could get away with definitional equality to add before</p>",
        "id": 220414514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608318083
    },
    {
        "content": "<p>My lean is stuck on orange bars again, but I think <code>sub_tmul</code> golfs to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sub_tmul</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">-</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m₁</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m₂</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">mk</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 220416381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608318974
    },
    {
        "content": "<p>Thanks Kevin, I've added the missing <code>sub</code> lemmas in <a href=\"https://github.com/leanprover-community/mathlib/issues/5428\">#5428</a></p>",
        "id": 220418443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608320108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Diamond.20golf/near/220413878\">said</a>:</p>\n<blockquote>\n<p>my original plan was to create a new <code>tensor_product.smul_compatible</code> type-class, and add <code>is_scalar_tower.to_smul_compatible</code> and <code>int.smul_compatible</code> so that the <code>smul_tmul'</code> lemma automatically works for int in this case</p>\n</blockquote>\n<p>And <a href=\"https://github.com/leanprover-community/mathlib/issues/5430\">#5430</a> contains a sketch of this idea, although I wonder if it makes sense to try to generalize it to also solve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- with a suitable typeclass, this could be solved with `apply map_smul`</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">map_smul_int</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"n\">int.induction_on</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">ih</span> <span class=\"n\">r</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sub_smul</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220428532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608325838
    },
    {
        "content": "<p>I've updated <a href=\"https://github.com/leanprover-community/mathlib/issues/5430\">#5430</a> to make the above provable with <code>linear_map.map_smul_of_tower</code>, would appreciate if someone could take a look</p>",
        "id": 220787213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608729189
    },
    {
        "content": "<p>I also found that I could make a lot of diamond pain go away by making the <code>is_scalar_tower \\N</code> instances not depend on a specific instance of <code>has_scalar</code>: <a href=\"https://github.com/leanprover-community/mathlib/issues/5509\">#5509</a></p>",
        "id": 221063079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609164728
    }
]