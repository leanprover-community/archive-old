[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"c1\">-- ⇑ff 0 = ⇑tt 0</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"err\">⇑</span><span class=\"n\">ff</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"err\">⇑</span><span class=\"n\">tt</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">function expected at</span>\n<span class=\"cm\">  ⇑tt</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  has_coe_to_fun.F tt</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 201268179,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592487323
    },
    {
        "content": "<p>if the pretty printer gives <code>⇑ff 0 = ⇑tt 0</code>, why can't I use it?</p>",
        "id": 201268210,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592487339
    },
    {
        "content": "<p>because nobody formalised the proof that the prettyprinter is equal to the inverse of the elaborator, and indeed it's not true.</p>",
        "id": 201268446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592487455
    },
    {
        "content": "<p>I imagine this might cause some confusion to newcomers (but again what doesn't)</p>",
        "id": 201268566,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592487515
    },
    {
        "content": "<p>You can fix it by setting some pp options, e.g. pp.all true or pp.coercions false</p>",
        "id": 201268589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592487527
    }
]