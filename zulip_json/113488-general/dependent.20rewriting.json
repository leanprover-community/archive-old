[
    {
        "content": "<p>I just wrote a tactic for dependent rewriting. Is there any interest in having it in mathlib?</p>\n<p>Here is what it does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℤ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dep_rw</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"c1\">--   i j : ℕ,</span>\n<span class=\"c1\">-- v : vector ℤ (j - i),</span>\n<span class=\"c1\">-- h : i ≤ j - i,</span>\n<span class=\"c1\">-- h' : ∀ (i : ℕ), j - i = i</span>\n<span class=\"c1\">-- ⊢ foo' i i (cast _ v) (cast _ h)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p><code>f</code> has a dependent type and rewriting <code>j</code> requires to add a cast to <code>v</code> and <code>h</code> at the same time which is pretty tricky to do. That's why dependent rewriting can be handy in those situations. The norm in mathlib is to try to avoid this kind dependent function type. When you have to use them though, it's good to have a tactic that accommodates them.</p>",
        "id": 212320315,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601913680
    },
    {
        "content": "<p>Yes, this would be extremely useful.</p>",
        "id": 212325085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601915874
    },
    {
        "content": "<p>Would it be practical to make <code>rw</code> itself do this?</p>",
        "id": 212325212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601915926
    },
    {
        "content": "<p>I don't believe so. I think <code>rw</code> does its job by finding occurrences of the lhs and abstracting them so you don't need a complex tree rewriting. In order to make it dependent, I need to use the congruence lemmas that <code>congr</code> generates</p>",
        "id": 212325804,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601916254
    },
    {
        "content": "<p>Unless you use dependent rewriting as a sort of plan B if the motive is not type correct</p>",
        "id": 212325828,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601916275
    },
    {
        "content": "<p>If it's not practical to make <code>rw</code> do this automatically then perhaps we can at least change the \"motive is not type correct\" error to mention <code>dep_rw</code>.</p>",
        "id": 212328064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601917377
    },
    {
        "content": "<p>That makes sense. We should probably get it into core in that case</p>",
        "id": 212328142,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601917418
    },
    {
        "content": "<p>When I get the motive error, I sometimes think about using <code>simp_rw</code> instead. How does this differ from that?</p>",
        "id": 212454482,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602002746
    },
    {
        "content": "<p>Actually, I'm not familiar with <code>simp_rw</code>. Does it insert <code>cast</code> for you?</p>",
        "id": 212454650,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602002838
    },
    {
        "content": "<p>I don't think it does - taking a closer look I think your tactic is just cleverer than <code>simp_rw</code> in terms of working with dependent functions</p>",
        "id": 212454884,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602002992
    },
    {
        "content": "<p><code>simp_rw</code> is a sequence of <code>simp only</code></p>",
        "id": 212456724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602003915
    },
    {
        "content": "<p>Someone's it's useful to avoid loops</p>",
        "id": 212456834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602003970
    },
    {
        "content": "<p>Oh that's the point of it!</p>",
        "id": 212463241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602007289
    },
    {
        "content": "<p>I sometimes use it when my goal state has a term which contains a proof (eg <code>f x h</code>, where <code>x</code> is data and <code>h</code> is a proof involving <code>x</code>), and I want to rewrite something like <code>x = y</code> - <code>rw</code> gives everyone's favourite motive error but <code>simp_rw</code> sometimes works</p>",
        "id": 212503703,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602031505
    },
    {
        "content": "<p>Would this rw tactic help here? Neither <code>rw</code> not <code>simp_rw</code> work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector2</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.last</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">v.nth</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vector.last_def</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">v.last</span> <span class=\"bp\">=</span> <span class=\"n\">v.nth</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vector.to_list_reverse</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v.reverse.to_list</span> <span class=\"bp\">=</span> <span class=\"n\">v.to_list.reverse</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vector.reverse_nth_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">v.reverse.head</span> <span class=\"bp\">=</span> <span class=\"n\">v.last</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">vector.nth_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector.last_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector.nth_eq_nth_le</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector.nth_eq_nth_le</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">vector.to_list_reverse</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">fin.val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_last</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_zero</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v.to_list.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ_sub_one</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">vector.to_list_length</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"c1\">--breaks here</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212594342,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602092768
    },
    {
        "content": "<p>Can you show what the goal is at the point where it breaks?</p>",
        "id": 212600426,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602095704
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vector.reverse_nth_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">v.reverse.head</span> <span class=\"bp\">=</span> <span class=\"n\">v.last</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">vector.nth_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector.last_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector.nth_eq_nth_le</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector.nth_eq_nth_le</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">vector.to_list_reverse</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">fin.val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_last</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_zero</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v.to_list.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ_sub_one</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">vector.to_list_length</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid simplification lemma 'this' (use command 'set_option trace.simp_lemmas true' for more details)</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type,</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">v : vector α (n + 1),</span>\n<span class=\"cm\">this : n = v.to_list.length - 1</span>\n<span class=\"cm\">⊢ v.to_list.reverse.nth_le 0 _ = v.to_list.nth_le n _</span>\n<span class=\"cm\">-/</span>\n\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"c1\">--breaks here</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212601502,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602096160
    },
    {
        "content": "<p>I do have a proof for the lemma though, avoiding the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vector.reverse_nth_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">v.reverse.head</span> <span class=\"bp\">=</span> <span class=\"n\">v.last</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">v.to_list.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ_sub_one</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">vector.to_list_length</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_self</span><span class=\"o\">,</span>\n                 <span class=\"n\">list.length_reverse</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">vector.nth_zero</span><span class=\"o\">,</span> <span class=\"n\">vector.last_def</span><span class=\"o\">,</span> <span class=\"n\">vector.nth_eq_nth_le</span><span class=\"o\">,</span> <span class=\"n\">vector.nth_eq_nth_le</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">vector.to_list_reverse</span><span class=\"o\">,</span> <span class=\"n\">fin.val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_last</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_zero</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.nth_le_reverse</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212601568,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602096197
    },
    {
        "content": "<p>Yes, this is exactly the sort of situation in question--you can't simply rewrite <code>n</code> because the type of the following proof depends on it</p>",
        "id": 212601691,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602096248
    },
    {
        "content": "<p>But rewriting 0 does work, even though the <code>nth_le 0 _</code> proof relies on it too.</p>",
        "id": 212602077,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602096462
    },
    {
        "content": "<p>Do you rewrite it to something definitionally equal?</p>",
        "id": 212602270,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602096557
    },
    {
        "content": "<p>I don't think <code>0 = v.to_list.length - 1 - n</code> are defeq, since I require that 5 lemma <code>simp only</code> to prove that.</p>",
        "id": 212602652,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602096748
    },
    {
        "content": "<p>I think there are weird conditions where rewriting can work even in the presence of proofs because the way <code>rw</code> works means that it also rewrites the proof</p>",
        "id": 212602941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602096871
    },
    {
        "content": "<p>Totally. The other steps in <code>simp_rw</code> are able to do that rewrite too. Interestingly, the last <code>rw list.nth_le_reverse</code> in my functional proof will not work if I use <code>simp_rw</code> instead.</p>",
        "id": 212603182,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602096964
    },
    {
        "content": "<p>Would <code>dep_rw</code> help with my goal in <a href=\"#narrow/stream/113488-general/topic/Difficulty.20with.20dependent.20rewrites/near/214686669\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Difficulty.20with.20dependent.20rewrites/near/214686669</a>?</p>",
        "id": 214747167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603824958
    },
    {
        "content": "<p>I think it might</p>",
        "id": 214768982,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603835464
    },
    {
        "content": "<p>Another vector use case. Often, <code>rw &lt;- vector.cons_head_tail v</code> fails since <code>v</code> is in proofs. But <code>simp_rw &lt;- vector.cons_head_tail v</code> results in deep recursion.</p>",
        "id": 214769845,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603835973
    },
    {
        "content": "<p>use the single_pass option perhaps?</p>",
        "id": 214770126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603836126
    },
    {
        "content": "<p>actually it might be easier to do <code>rcases</code> on <code>\\exists h t, v = h :: t</code> if you are trying to eliminate it</p>",
        "id": 214770405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603836290
    },
    {
        "content": "<p>Great advice, thanks!</p>",
        "id": 214771983,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603837225
    }
]