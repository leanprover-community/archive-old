[
    {
        "content": "<p>Can someone tell me why the first example succeeds and the second one doesn't? As far as I can tell, <code>by_cases</code> gets the decidability instance by calling <code>mk_instance</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">*;</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mk_instance</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- &quot;tactic.mk_instance failed to generate instance for decidable (x ∈ s)&quot;&quot;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 205253301,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595951320
    },
    {
        "content": "<p>(I am wondering how <code>by_cases</code> learned to use classical logic.)</p>",
        "id": 205253383,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595951359
    },
    {
        "content": "<p>We patched <code>by_cases</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/3354\">#3354</a> (July 11).  The changes have been merged into core Lean as of 3.18.0 today.</p>",
        "id": 205253559,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595951419
    },
    {
        "content": "<p>The reason to change the <code>by_cases</code> tactic was that it unfolded the proposition too much.  The decidability assumption was just a pet peeve of mine.</p>",
        "id": 205253774,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595951513
    },
    {
        "content": "<p>I see. I am still using Lean 3.17.1 and clicking on <code>by_cases</code> takes me to the old definition. But now I see <code>fix_by_cases.lean</code> and the <code>vm_override</code>. Now it all makes sense. I was really confused...</p>",
        "id": 205254839,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595951995
    },
    {
        "content": "<p>This is a big danger of the <code>vm_override</code> attribute.</p>",
        "id": 205255060,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595952111
    },
    {
        "content": "<p>Luckily we only use it four times in mathlib+core.  Should we make go-to definition go to the overriding definition?</p>",
        "id": 205255248,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595952183
    },
    {
        "content": "<p>Well, I guess that could be confusing for the same reason... <code>vm_override</code> can be used on non-meta decls, right?</p>",
        "id": 205255432,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595952253
    },
    {
        "content": "<p>Maybe <code>vm_override</code> could append a note to the doc string of the declaration being overridden? It wouldn't show up in source but at least it means the override isn't completely invisible.</p>",
        "id": 205255622,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595952354
    },
    {
        "content": "<p>Yes it can work with non-meta stuff</p>",
        "id": 205255713,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595952374
    },
    {
        "content": "<p>I don't think I had considered using <code>vm_override</code> like this before. I think it opens up a really nice style of interaction for debugging a tactic in the context of a specific proof.</p>",
        "id": 205256060,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595952560
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/417\">lean#417</a></p>",
        "id": 205256979,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595953011
    }
]