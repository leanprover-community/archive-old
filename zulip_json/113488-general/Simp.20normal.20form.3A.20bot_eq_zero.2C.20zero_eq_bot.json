[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/14529\">#14529</a>, I realized that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a> is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_add_monoid\">docs#canonically_ordered_add_monoid</a>.</p>\n<p>However, if I register the instance, I get a <code>simp</code> loop between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bot_eq_zero\">docs#bot_eq_zero</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.zero_eq_bot\">docs#submodule.zero_eq_bot</a>.</p>\n<p>Which of these do we want as the simp-normal-form? I can't think of any other cases where we've avoided providing algebraic structure just because it messes with <code>simp</code>, so I'd prefer to avoid the solution of just not registering the instance.</p>",
        "id": 284944398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654299298
    },
    {
        "content": "<p>On <code>nat</code>, <code>nnreal</code>, and <code>ennreal</code> <code>bot_eq_zero</code> is obviously the preferred simp-form; but on submodules, it's probably better to remain in lattice-land</p>",
        "id": 284944479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654299365
    },
    {
        "content": "<p>Is this a sensible solution?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `bot_eq_zero` is only a good simp-normal-form in a linear order. -/</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bot_eq_zero'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">canonically_linear_ordered_add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">bot_eq_zero</span>\n\n<span class=\"c1\">-- and remove `@[simp]` from `bot_eq_zero`</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_linear_ordered_add_monoid\">docs#canonically_linear_ordered_add_monoid</a>)</p>",
        "id": 284944597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654299493
    },
    {
        "content": "<p>AFAIR, I saw a suggestion to generalize this lemma to other cases that include ordinals and measures. I'm on a phone, so can't quickly find the relevant thread. Clearly, zero is the preferred form for ordinals and measures too.</p>",
        "id": 284949835,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1654306529
    },
    {
        "content": "<p>Here it is: <a href=\"#narrow/stream/113488-general/topic/bot_eq_zero_class\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/bot_eq_zero_class</a></p>",
        "id": 284950048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1654306837
    },
    {
        "content": "<p>In regular math land most people have never seen this weird bot notation but would be quite happy with the concept of the zero module</p>",
        "id": 284960736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654321588
    },
    {
        "content": "<p>I agree.  I learned about ⊥ and ⊤ in Lean-land.</p>",
        "id": 284960756,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654321648
    },
    {
        "content": "<p>I am very comfortable with the zero module, the zero ring, the zero group...</p>",
        "id": 284960770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654321679
    },
    {
        "content": "<p>I was proposing a <code>bot_eq_zero_class</code> on another thread (which has been linked already). That class would have <code>⊥ = 0</code> as a <code>simp</code> lemma, and would also come with a few lemmas for <code>⊥</code> rewritten in terms of <code>0</code>, like <code>zero_le</code> and  <code>max_zero_left</code>.</p>",
        "id": 284961342,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654322528
    },
    {
        "content": "<p><code>M + N</code> is just the sup right? Which one is preferred?</p>",
        "id": 284967364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654332476
    },
    {
        "content": "<p>I totally agree that in math we prefer the <code>0</code>-module. On the other hand almost everything in mathlib use the language of lattices for substuff. It seems a little strange to have the <code>0</code> submodule but the <code>⊥</code> subalgebra.</p>",
        "id": 284967499,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654332718
    },
    {
        "content": "<p>What about not making the general lemma simp and deciding the direction using type-specific lemmas?</p>",
        "id": 284970084,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654336890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Simp.20normal.20form.3A.20bot_eq_zero.2C.20zero_eq_bot/near/284970084\">said</a>:</p>\n<blockquote>\n<p>What about not making the general lemma simp and deciding the direction using type-specific lemmas?</p>\n</blockquote>\n<p>This is basically a more conservative version of what I suggest above, which is to make <code>0</code> the normal form only when the order is linear</p>",
        "id": 284972395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654339646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Simp.20normal.20form.3A.20bot_eq_zero.2C.20zero_eq_bot/near/284967364\">said</a>:</p>\n<blockquote>\n<p><code>M + N</code> is just the sup right? Which one is preferred?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.add_eq_sup\">docs#submodule.add_eq_sup</a> suggests the sup is the preferred spelling</p>",
        "id": 284972577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654339833
    }
]