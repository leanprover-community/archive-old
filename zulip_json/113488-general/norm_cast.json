[
    {
        "content": "<p>I have never used <code>norm_cast</code>. I just met a stupid goal for which I thought it could be useful, so I tried it but nothing happened. Am I doing something wrong, or is it just that the relevant lemmas are not tagged yet?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_coe</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_lt_one</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167653758,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1560004924
    },
    {
        "content": "<p>in this case it's just that the relevant lemmas for the 'with_top' type are not tagged yet</p>",
        "id": 167953511,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560350544
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">elim_cast</span><span class=\"o\">]</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_coe</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">zero_lt_one</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167955142,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560351696
    },
    {
        "content": "<p>the first line of the proof should also be useless once the numerals handling is fixed</p>",
        "id": 167955455,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560351772
    },
    {
        "content": "<p>I don't know if this has been asked before. But could we have <code>norm_cast?</code> and friends to report which normalization lemmas are used?</p>",
        "id": 182648130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575543560
    },
    {
        "content": "<p>Future work :) but what's the scenario where you really want this? It's a much less useful report than <code>squeeze_simp</code>.</p>",
        "id": 182648403,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575543739
    },
    {
        "content": "<p>Sometimes <code>norm_cast</code> is a bit too aggresive. It doesn't happen often at all. In those cases, one option is to fall back to <code>rw</code></p>",
        "id": 182649878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575544929
    },
    {
        "content": "<p>For example, I had the following goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">↑</span><span class=\"o\">((</span><span class=\"n\">multiplicity</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"o\">((</span><span class=\"n\">multiplicity</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 182649918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575544960
    },
    {
        "content": "<p>On the left hand side, <code>r.num</code> is in <code>ℤ</code>, hence the this is multiplicity wrt integer division. On the right, <code>norm_cast</code> reduces to multiplicty of nats. But then you can't apply things like <code>multiplicity_le_multiplicity_iff</code> anymore, because you now have multiplicity wrt different semirings</p>",
        "id": 182650112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575545052
    },
    {
        "content": "<p>One way to solve this is <code>suffices : blah, {norm_cast}</code>, or some hack like that.</p>",
        "id": 182650145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575545076
    },
    {
        "content": "<p>Aha, so this is why I would like <code>norm_cast?</code></p>",
        "id": 182650162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575545106
    },
    {
        "content": "<p>Because it would open the door to <code>norm_cast [-evil_lemma]</code></p>",
        "id": 182650169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575545120
    },
    {
        "content": "<p>And that would allow users to finetune the end result, while keeping the readable and intuitive <code>norm_cast</code> tactic in their script</p>",
        "id": 182650191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575545149
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> for cleaning up the long-standing <code>norm_cast</code> PR! It's finally landed. For the most part, the change should be transparent, unless you're really abusing the tool. The one big difference is that now you tag all your lemmas <code>@[norm_cast]</code> instead of choosing a label yourself.</p>",
        "id": 194287954,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587035661
    },
    {
        "content": "<p>You can override the labeling function with <code>@[norm_cast elim]</code>, for example, if you know what you're doing.</p>",
        "id": 194287995,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587035686
    },
    {
        "content": "<p>Seeing this landing is really great. Many thanks to Paul-Nicolas, Rob and Gabriel!</p>",
        "id": 194320123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587050239
    },
    {
        "content": "<p>Oh, yeah, I obviously should have thanked <span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> in my first post! This is almost entirely his work.</p>",
        "id": 194325726,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587052230
    },
    {
        "content": "<p><code>norm_cast</code> is an absolutely essential tool for some of the codewars questions</p>",
        "id": 194326624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587052552
    }
]