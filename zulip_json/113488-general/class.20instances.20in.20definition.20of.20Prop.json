[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">def</span> <span class=\"n\">how_do_I_make_this_work</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nG : Type u,\n_inst_1 : group G,\nx : G\n⊢ has_mul G\n\nfailed to synthesize type class instance for\nG : Type u,\n_inst_1 : group G,\nx : G,\nhx : x * x = x\n⊢ has_one G\n</pre></div>",
        "id": 195286002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587822906
    },
    {
        "content": "<p>One answer for two threads.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">def</span> <span class=\"n\">how_do_I_make_this_work</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfreezeI</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}),</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfreezeI</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 195286335,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1587823460
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">how_do_I_make_this_work</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">unfreezeI</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 195286357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587823524
    },
    {
        "content": "<p>See the mess I got into <a href=\"https://www.codewars.com/kata/5ea1f341014f0c0001ec7c5e\" title=\"https://www.codewars.com/kata/5ea1f341014f0c0001ec7c5e\">at codewars</a></p>",
        "id": 195291717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587831822
    },
    {
        "content": "<p><code>by exactI</code> is the tactic for this, though it's still a bit annoying</p>",
        "id": 195291764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587831885
    },
    {
        "content": "<p><code>unfreezeI</code> is mainly for letting you <code>case</code> on instance arguments, I think.</p>",
        "id": 195291774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587831916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> didn't you have this problem in codewars with the 5 units question? That has a typeclass in the defintion of SUBMISSION</p>",
        "id": 195291775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587831917
    },
    {
        "content": "<p>I inserted the instances manually...</p>",
        "id": 195291783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587831932
    },
    {
        "content": "<p>there's also</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">how_do_I_make_this_work</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">how_do_I_make_this_work</span>\n</pre></div>",
        "id": 195291875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587832055
    },
    {
        "content": "<p>Can <code>SUBMISSION</code> be defined in the same way?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">converges_to</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">s</span> <span class=\"bp\">`</span> <span class=\"err\">⟶</span> <span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">converges_to</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⟶</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⟶</span> <span class=\"n\">x₁</span><span class=\"o\">),</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">x₁</span>\n</pre></div>",
        "id": 195291928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587832103
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"k\">by</span> <span class=\"n\">exactI</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⟶</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⟶</span> <span class=\"n\">x₁</span><span class=\"o\">),</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">x₁</span>\n</pre></div>\n\n\n<p>would have been better</p>",
        "id": 195291943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587832143
    },
    {
        "content": "<p>wait I think I translated it wrong</p>",
        "id": 195291957,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587832180
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">how_do_I_make_this_work</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 195292009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587832231
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⟶</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⟶</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">x₁</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 195292088,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587832373
    },
    {
        "content": "<p>You can also use <code>Type*</code> but in general I don't trust it</p>",
        "id": 195292163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587832475
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">submission</span> <span class=\"o\">:</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">limit_unique</span>\n</pre></div>\n\n\n<p>will need to be changed as well I guess. I don't really know why they do it like this, it's to do with preventing some kind of cheating. I don't understand it well enough to know whether the switch to a structure will cause problems. I guess one just adds <code>\\&lt; \\&gt;</code>.</p>",
        "id": 195292294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587832653
    }
]