[
    {
        "content": "<blockquote>\n<p>invalid 'calc' expression, transitivity rule is not defined for current step</p>\n</blockquote>",
        "id": 125130147,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523843457
    },
    {
        "content": "<p>I am using <code>≃</code> in <code>calc</code> as in <a href=\"https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean#L146\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean#L146\">here</a></p>",
        "id": 125130156,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523843481
    },
    {
        "content": "<p>why does it give me this error?</p>",
        "id": 125130157,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523843486
    },
    {
        "content": "<p>mathlib:</p>\n<div class=\"codehilite\"><pre><span></span>lemma group_equiv_left_cosets_times_subgroup {s : set α} (hs : is_subgroup s) :\n  nonempty (α ≃ (left_cosets s × s)) :=\n⟨calc α ≃ (@set.univ α) :\n    (equiv.set.univ α).symm\n  ... ≃ (⋃t∈left_cosets s, t) :\n    by rw [←hs.Union_left_cosets_eq_univ]; simp\n  ... ≃ (Σt:left_cosets s, t) :\n    equiv.set.bUnion_eq_sigma_of_disjoint hs.pairwise_left_cosets_disjoint\n  ... ≃ (Σt:left_cosets s, s) :\n    equiv.sigma_congr_right $ λ⟨t, ht⟩, classical.choice $ hs.left_cosets_equiv_subgroup ht\n  ... ≃ (left_cosets s × s) :\n    equiv.sigma_equiv_prod _ _⟩\n</pre></div>",
        "id": 125130159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523843498
    },
    {
        "content": "<p>why can mathlib use it but gives me error when I use it</p>",
        "id": 125130160,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523843507
    },
    {
        "content": "<p>oh my god</p>",
        "id": 125130403,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844046
    },
    {
        "content": "<p>it is a totally unrelated error caused by <code>≃</code> having higher priority than <code>×</code></p>",
        "id": 125130414,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844082
    },
    {
        "content": "<p>the priority of ≃ is a bit dumb, I know</p>",
        "id": 125130459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844165
    },
    {
        "content": "<p>but it's hard to be both equality like and also lower than most type operators</p>",
        "id": 125130468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844189
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem orbit_stab : nonempty ((orbit G X x × stab G X x) ≃ G) :=\nnonempty.elim (orbit_equiv_stab_cosets G X x) $ λ F1,\nnonempty.elim (is_subgroup.group_equiv_left_cosets_times_subgroup $ stab.is_subgroup G X x) $ λ F2,\nnonempty.intro $\n(equiv.prod_congr F1 (equiv.refl $ stab G X x)).trans\nF2.symm\n</pre></div>",
        "id": 125130475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844230
    },
    {
        "content": "<p>orbit-stabilizer theorem done :D</p>",
        "id": 125130477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844234
    },
    {
        "content": "<p>does it have to be <code>nonempty</code>? Can't you give the equiv itself?</p>",
        "id": 125130517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844267
    },
    {
        "content": "<p>ask <code>group_equiv_left_cosets_times_subgroup</code></p>",
        "id": 125130520,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844282
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean#L146\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean#L146\">https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean#L146</a></p>",
        "id": 125130522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844286
    },
    {
        "content": "<p>hey <code>group_equiv_left_cosets_times_subgroup</code>, why are you nonempty?</p>",
        "id": 125130524,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844301
    },
    {
        "content": "<p>probably because of the choice in the middle</p>",
        "id": 125130533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844352
    },
    {
        "content": "<p>you can't constructively pick an element from each coset</p>",
        "id": 125130572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844380
    },
    {
        "content": "<p>I see</p>",
        "id": 125130574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844388
    },
    {
        "content": "<p>does that generalize to your theorem?</p>",
        "id": 125130576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844399
    },
    {
        "content": "<p>well I used that theorem so it has to be nonempty</p>",
        "id": 125130577,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844420
    },
    {
        "content": "<p>Maybe your application is constructive though</p>",
        "id": 125130630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844572
    },
    {
        "content": "<p>well then it is <code>noncomputable def</code> at most?</p>",
        "id": 125130675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844620
    },
    {
        "content": "<p>don't quite see the difference between that and just <code>nonempty</code></p>",
        "id": 125130677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844630
    },
    {
        "content": "<p>I think <code>orbit_equiv_stab_cosets</code> gives you a way to select an element from each coset</p>",
        "id": 125130678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844635
    },
    {
        "content": "<p>I think it is computable</p>",
        "id": 125130679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844649
    },
    {
        "content": "<p>that one isn't computable either</p>",
        "id": 125130683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844665
    },
    {
        "content": "<p>there's no computable inverse</p>",
        "id": 125130687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844685
    },
    {
        "content": "<p>I am not using quotient</p>",
        "id": 125130688,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844689
    },
    {
        "content": "<p>Maybe the problem is that you have to deal with cosets then</p>",
        "id": 125130692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844709
    },
    {
        "content": "<p>well maybe <a href=\"https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean\">https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean</a> could use quotients instead of sets</p>",
        "id": 125130733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844733
    },
    {
        "content": "<p>then our lives will be easier</p>",
        "id": 125130734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844739
    },
    {
        "content": "<p>they even have the equivalence relation set up</p>",
        "id": 125130735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523844773
    },
    {
        "content": "<p>I think you are right...</p>",
        "id": 125130838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523845079
    },
    {
        "content": "<p>You need the axiom of choice to pick coset representatives, i.e. if G is a group (even an abelian group) and H is a subgroup then you need the axiom of choice to choose a subset S of G containing precisely one element of each coset. One perhaps rather convoluted way of seeing this is that if G is the reals and H the rationals then if you can choose S then you can build a non-measurable subset of the reals; however there is a model of ZF (no C) in which every set is measurable.</p>",
        "id": 125137593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523861089
    },
    {
        "content": "<p>Apply this to the action of G on the cosets of H and you see that an explicit bijection would give you S, you look at the image of (orbit x {1})</p>",
        "id": 125137646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523861193
    },
    {
        "content": "<p>what is this a response to?</p>",
        "id": 125137657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523861235
    },
    {
        "content": "<p>I think he is arguing that the orbit stabilizer theorem is also necessarily nonconstructive (in the infinite case)</p>",
        "id": 125137746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523861417
    },
    {
        "content": "<blockquote>\n<p>does it have to be <code>nonempty</code>? Can't you give the equiv itself?</p>\n</blockquote>",
        "id": 125137752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523861495
    },
    {
        "content": "<p>it's nonconstructive, but can't we use noncomputable def instead of nonempty</p>",
        "id": 125137754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523861520
    },
    {
        "content": "<p>I'm not sure I understand the question yet. I think that out of everyone in this conversation I'm the least well placed to answer it anyway. I just wanted to tell you (Kenny) the argument I came up with yesterday which convinced me that some form of nonconstructive maths was provably needed to choose coset reps.</p>",
        "id": 125137850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523861754
    },
    {
        "content": "<p>we three all agree with that</p>",
        "id": 125137898,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523861860
    },
    {
        "content": "<p>You can always extract an equiv from a nonempty equiv using <code>choice</code>, which makes it a noncomputable def. Doing this before or after makes little difference</p>",
        "id": 125138168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523862377
    },
    {
        "content": "<blockquote>\n<p>we three all agree with that</p>\n</blockquote>\n<p>yes, but I gave a proof ;-)</p>",
        "id": 125138181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523862468
    },
    {
        "content": "<p>It's a complete mystery to me: why mathlib doesn't use a quotient to talk about quotient of a group by a (non-normal) subgroup?</p>",
        "id": 125138750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523863708
    },
    {
        "content": "<p>well \"mathlib\" isn't a person</p>",
        "id": 125138755,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523863734
    },
    {
        "content": "<p>and the person you seek is <span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span></p>",
        "id": 125138760,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523863750
    },
    {
        "content": "<p>and this thing is just here 5 days ago</p>",
        "id": 125138764,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523863768
    },
    {
        "content": "<p>I'm sure it's older</p>",
        "id": 125138770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523863790
    },
    {
        "content": "<p>When Johannes proved Lagrange</p>",
        "id": 125138773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523863797
    },
    {
        "content": "<p>nvm what i said is bs</p>",
        "id": 125138816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523863811
    },
    {
        "content": "<p>right, <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> proved it in March 6</p>",
        "id": 125138819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523863822
    },
    {
        "content": "<p>The answer is simple: I didn't think about quotients of a group to prove Lagrange. I just wanted to show a property about the orbit of a group.</p>",
        "id": 125138964,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523864118
    },
    {
        "content": "<p>But the orbit of a point  is canonically the quotient of the group by the stabilizer of the point</p>",
        "id": 125139451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523865148
    },
    {
        "content": "<p>cardinalities don't interact well with quotients</p>",
        "id": 125139455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523865175
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 125139460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523865190
    }
]