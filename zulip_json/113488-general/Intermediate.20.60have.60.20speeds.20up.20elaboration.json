[
    {
        "content": "<p>I am surprised by the difference in elaboration speed in <code>smooth.div_slow</code> and <code>smooth.div_fast</code> in the below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.algebra.lie_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n          <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lie_group</span> <span class=\"n\">I</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E'</span> <span class=\"n\">H'</span><span class=\"o\">}</span>\n          <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H'</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">smooth.div_slow</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"c1\">-- elaboration of smooth.div took 6.38s</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I'</span> <span class=\"n\">I</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I'</span> <span class=\"n\">I</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I'</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">smooth_mul</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">hf.prod_mk</span> <span class=\"n\">hg.inv</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smooth.div_fast</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"c1\">-- elaboration of smooth.div took 79.1ms</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I'</span> <span class=\"n\">I</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I'</span> <span class=\"n\">I</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I'</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">smooth_mul</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">hf.prod_mk</span> <span class=\"n\">hg.inv</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232104536,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616865634
    },
    {
        "content": "<p>By introducing a pointless intermediate <code>have</code>, elaboration speeds up by a factor of 80! Is there an explanation for this and/or a guide for how to deal with this?</p>",
        "id": 232104599,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616865689
    },
    {
        "content": "<p>Does <code>exact ((smooth_mul I).comp (hf.prod_mk hg.inv) : _)</code> make it fast?</p>",
        "id": 232104666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616865742
    },
    {
        "content": "<p>Yes!</p>",
        "id": 232104677,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616865758
    },
    {
        "content": "<p>131ms elaboration time.</p>",
        "id": 232104683,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616865769
    },
    {
        "content": "<p>I've seen this trick before :-)</p>",
        "id": 232104684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616865772
    },
    {
        "content": "<p>This is black magic to me. I'd love if there was a thread I could read about it somewhere.</p>",
        "id": 232104703,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616865814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> When you do <code>exact some_expr</code>, Lean will <em>check</em> that this expression has the expected type.</p>",
        "id": 232104750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616865844
    },
    {
        "content": "<p>The <code>exact</code> version attempts to elaborate <code>(smooth_mul I).comp (hf.prod_mk hg.inv)</code> with the type of the goal, which apparently gets the elaborator confused. The <code>have h</code> version elaborates it with whatever type comes out, and then the <code>exact</code> attempts to make that type equal to the goal, which sometimes produces very different results!</p>",
        "id": 232104769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616865862
    },
    {
        "content": "<p>Adding the <code>: _)</code> means roughly \"elaborate this expression as much as possible before continuing\"</p>",
        "id": 232104777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616865869
    },
    {
        "content": "<p>But with <code>have</code> or the <code>(some_expr : _)</code> variant, you ask Lean to <em>infer</em> the type, and then check this type is defeq to what Lean expects.</p>",
        "id": 232104784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616865880
    },
    {
        "content": "<p>And the order in which the <em>infer</em> and <em>check</em> happen, matters a lot for speed.</p>",
        "id": 232104798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616865907
    },
    {
        "content": "<p>OK I more or less understand. Library note?</p>",
        "id": 232104804,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616865912
    },
    {
        "content": "<p>I should also say: thanks. I didn't expect a barrage of such helpful answers so quickly :-)</p>",
        "id": 232104839,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616865958
    },
    {
        "content": "<p>I wouldn't be enough of an expert to write more than the two lines I just wrote. But someone who actually understands type theory and Lean can maybe help us out (-;</p>",
        "id": 232104841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616865961
    },
    {
        "content": "<p>Maybe I'll create a library note PR and tag someone on GH so that they can actually fill it in with a bit more?</p>",
        "id": 232104917,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616866011
    }
]