[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">simpa</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_ne_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">one_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonzero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">nonzero</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_one</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Let&#39;s show some example instances -/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nonzero</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Let&#39;s show some example instances -/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nonzero</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonzero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199125371,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740085
    },
    {
        "content": "<p>(this is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 199125394,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740102
    },
    {
        "content": "<p>question: the type of <code>this</code> is <code>(1 : \\N) = 0</code>. what is going on?</p>",
        "id": 199125445,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740147
    },
    {
        "content": "<p>(this is a minimzed version of <a href=\"https://github.com/leanprover-community/mathlib/blob/b013b2d6318b42e5ae49a4a588b1271e37809685/src/algebra/classical_lie_algebras.lean#L80-L89\">https://github.com/leanprover-community/mathlib/blob/b013b2d6318b42e5ae49a4a588b1271e37809685/src/algebra/classical_lie_algebras.lean#L80-L89</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">sl_non_abelian</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">lie_algebra</span><span class=\"bp\">.</span><span class=\"n\">is_abelian</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">exists_pair_of_one_lt_card</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">Eb</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">Eb</span> <span class=\"n\">R</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"n\">hij</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">c&#39;</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">sl_bracket</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">abelian</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_val</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">c&#39;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199125570,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/a.20puzzle/near/199125445\">said</a>:</p>\n<blockquote>\n<p>question: the type of <code>this</code> is <code>(1 : \\N) = 0</code>. what is going on?</p>\n</blockquote>\n<p>Is <code>simpa</code> simply doing too much work?</p>",
        "id": 199125621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590740274
    },
    {
        "content": "<p>Can you trace what it does?</p>",
        "id": 199125690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590740297
    },
    {
        "content": "<p>(I know the answer: that's why the topic is called \"a puzzle\")</p>",
        "id": 199125721,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740316
    },
    {
        "content": "<p>I see</p>",
        "id": 199125739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590740334
    },
    {
        "content": "<p>Why wouldn't the type be that? That's what you said it was</p>",
        "id": 199125810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590740394
    },
    {
        "content": "<p>well when you write <code>by simpa [something] using something_else</code> you would suppose that <code>simpa</code> just converts <code>something_else</code> into the goal</p>",
        "id": 199125896,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740436
    },
    {
        "content": "<p>this is kinda an example of an \"evil\" simpa usage</p>",
        "id": 199125906,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740445
    },
    {
        "content": "<p>it looks like it does the job</p>",
        "id": 199125915,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740449
    },
    {
        "content": "<p>No, I don't expect that</p>",
        "id": 199125919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590740452
    },
    {
        "content": "<p>but it actually does a different job</p>",
        "id": 199125920,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740453
    },
    {
        "content": "<p>this line:<br>\n<code>have : 1 = 0 := by simpa [matrix.mul_val, hij] using (congr_fun (congr_fun c' i) i)</code></p>",
        "id": 199125937,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740467
    },
    {
        "content": "<p>I expect it to simplify the goal as well</p>",
        "id": 199125939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590740467
    },
    {
        "content": "<p><code>simpa</code> doesn't constrain the type of the goal at all</p>",
        "id": 199125950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590740470
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eb</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eb</span> <span class=\"n\">R</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">is_abelian</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n<span class=\"n\">c&#39;</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 199125975,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740502
    },
    {
        "content": "<p>in fact I don't think any tactic would be able to stop it from getting the nat default</p>",
        "id": 199125979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590740506
    },
    {
        "content": "<p>that's the tactic state before the line</p>",
        "id": 199125983,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740509
    },
    {
        "content": "<p>when I read the line, I read \"apply <code>A * B</code> and <code>B * A</code> to <code>i i</code> and simplify both sides to obtain <code>1 = 0</code>\"</p>",
        "id": 199126052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740536
    },
    {
        "content": "<p>as one would when reading that line</p>",
        "id": 199126062,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740544
    },
    {
        "content": "<p>I'm sayinh that when you write <code>have : 1 = 0 := by ...</code> lean has already decided that <code>1</code> is <code>1 : nat</code></p>",
        "id": 199126070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590740552
    },
    {
        "content": "<p>I'm saying the one who wrote that line likely had that intention</p>",
        "id": 199126090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740568
    },
    {
        "content": "<p>and it accidentally worked</p>",
        "id": 199126092,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740571
    },
    {
        "content": "<p>sure, simp proves lots of surprise theorems</p>",
        "id": 199126134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590740622
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> is online</p>",
        "id": 199126239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740686
    },
    {
        "content": "<p>you are saying that <code>simpa</code> was able to unify <code>(1 : nat) = 0</code> and <code>(1 : R) = 0</code> because they are both false</p>",
        "id": 199126274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590740713
    },
    {
        "content": "<p>right</p>",
        "id": 199126279,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740719
    },
    {
        "content": "<p>sounds legit</p>",
        "id": 199126283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590740724
    },
    {
        "content": "<p>I'm just observing that this is a surprise</p>",
        "id": 199126300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590740739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/a.20puzzle/near/199126239\">said</a>:</p>\n<blockquote>\n<p>hey <span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> is online</p>\n</blockquote>\n<p>He is but he is also working so he shouldn't even be glancing at this thread! I will study it over lunch.</p>",
        "id": 199126320,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1590740751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/a.20puzzle/near/199126090\">said</a>:</p>\n<blockquote>\n<p>I'm saying the one who wrote that line likely had that intention</p>\n</blockquote>\n<p>Just reading this more carefully now. I can at least confirm the intention of the one who wrote that line was as you suggest: mentally I was parsing <code>1 = 0</code> as <code>(1: R) = 0</code> and thus had a bit of a difference of opinion with Lean which parses it as <code>(1 : ℕ) = 0</code>.</p>",
        "id": 199140237,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1590750815
    },
    {
        "content": "<p>So I suppose what's happening in <code>sl_non_abelian</code> is that the <code>simpa</code> statement in fact succeeds in proving <code>false</code> given its hypotheses by using <code>one_ne_zero</code> but for <code>R</code>. It then uses this to prove what it was asked, namely <code>(1 : ℕ) = 0</code>. And then, rather ridiculously, we prove false again using <code>one_ne_zero</code> but for <code>ℕ</code> rather than <code>R</code> this time.</p>",
        "id": 199140498,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1590750977
    },
    {
        "content": "<p>right</p>",
        "id": 199140619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590751073
    },
    {
        "content": "<p>Indeed this seems right since I can replace the last two lines of that lemma with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_val</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">c&#39;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>This is obviously better than the rather hilarious proof in place at present but I propose it might be best to finish as:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_val</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">c&#39;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 199140692,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1590751105
    },
    {
        "content": "<p>I can include this tidy up as part of some future PR, or else you might wish to just go for it right now?</p>",
        "id": 199140739,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1590751162
    },
    {
        "content": "<p>Great find! I must now dash out for my lunchtime run.</p>",
        "id": 199140754,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1590751181
    },
    {
        "content": "<p>I guess either way is ok</p>",
        "id": 199140847,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590751246
    }
]