[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">nil</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_left_id</span> <span class=\"n\">R</span> <span class=\"n\">op</span> <span class=\"n\">nil</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">nil</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">is_left_id</span><span class=\"bp\">.</span><span class=\"n\">left_id</span>\n</pre></div>\n\n\n<p>errors with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">is_left_id</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">op</span> <span class=\"n\">nil</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">nil</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 125570810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524493090
    },
    {
        "content": "<p>I know I could use <code>is_left_id.left_id _ _</code> in place of the rw</p>",
        "id": 125570848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524493168
    },
    {
        "content": "<p>But in my real use case I want to rewrite</p>",
        "id": 125570853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524493181
    },
    {
        "content": "<p>(or simp would be even better)</p>",
        "id": 125570855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524493191
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">nil</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_left_id</span> <span class=\"n\">R</span> <span class=\"n\">op</span> <span class=\"n\">nil</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">nil</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">is_left_id</span><span class=\"bp\">.</span><span class=\"n\">left_id</span> <span class=\"n\">op</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 125570941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524493298
    },
    {
        "content": "<p>interesting</p>",
        "id": 125571019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524493383
    },
    {
        "content": "<p>doesn't explain why unification fails though</p>",
        "id": 125571036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524493402
    },
    {
        "content": "<p>probably because that is a higher-order unification</p>",
        "id": 125571042,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524493416
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Unification_(computer_science)#Higher-order_unification\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Unification_(computer_science)#Higher-order_unification\">https://en.wikipedia.org/wiki/Unification_(computer_science)#Higher-order_unification</a></p>",
        "id": 125571047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524493432
    },
    {
        "content": "<p>it is undecidable</p>",
        "id": 125571048,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524493434
    },
    {
        "content": "<p>Oh I think you're right</p>",
        "id": 125571051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524493436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this part of why you don't believe in the new algebraic hierarchy? Or is it possible to recover a working simp lemma here?</p>",
        "id": 125571140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524493549
    },
    {
        "content": "<p>Yes, this is the main problem with the new alg hierarchy. To be fair to Leo, he's been aware of this problem since the start, and the <code>algebra</code> attribute is part of a plan to fix it, but it requires more lean support than it currently gets. It should be a part of lean 4</p>",
        "id": 125575939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524499527
    },
    {
        "content": "<p>Ok, it makes sense. Do you agree that the new hierarchy seems more suitable if we want a big_op library that is really operator centric as in mathcomp?</p>",
        "id": 125576476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524500203
    }
]