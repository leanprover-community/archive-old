[
    {
        "content": "<p>I'm doing some set theory and stumbled upon something I am rather unsure how to express in Lean, basically if <code>A : set (set α)</code> I'd like to express something like:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><msub><mi>A</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>A</mi><mi>n</mi></msub><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><munderover><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msub><mi>A</mi><mi>i</mi></msub><mo fence=\"true\">)</mo></mrow><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\forall A_1, A_2, \\dots, A_n \\in A, \\left(\\bigcup_{i=0}^n A_i \\right) \\in A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.027669em;vertical-align:-1.277669em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">⋃</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span></span></p>\n<p>And I have no idea at all how to deal with these indexed subsets of A, would someone happen to know?</p>",
        "id": 257044978,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1633948976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> There are basically two options: you can work with an (unordered) set of sets: <code>As : set (set X)</code>. Or you can have a function <code>I → set X</code>, where <code>I</code> is an indexing type such as <code>fin n</code>.</p>",
        "id": 257045480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633949248
    },
    {
        "content": "<p>In the second case, <code>I</code> could or could not come with an ordering.</p>",
        "id": 257045510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633949272
    },
    {
        "content": "<p>Would there be any advantages from one over the other in this specific case?</p>",
        "id": 257048428,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1633950737
    },
    {
        "content": "<p>I might use <code>∀ X : finset A</code>, and using <code>finset.sup</code> to express the condition you want.</p>",
        "id": 257049767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633951490
    },
    {
        "content": "<p>Depending on the situation you might also get by with just the cases n = 2 and (if applicable) n = 0</p>",
        "id": 257051010,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633952183
    },
    {
        "content": "<p>Here are some ways to express this. I recommend going with Reid's suggestion (option 4)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">closed_under_finite_unions1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B.sup</span> <span class=\"n\">id</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">closed_under_finite_unions2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">B.finite</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">closed_under_finite_unions3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">fintype</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">closed_under_finite_unions4</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∅</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">A₁</span> <span class=\"n\">A₂</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A₁</span> <span class=\"bp\">∪</span> <span class=\"n\">A₂</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>You can then have the other versions as theorems.</p>",
        "id": 257051422,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633952409
    },
    {
        "content": "<p>compare <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_pi_system\">docs#is_pi_system</a></p>",
        "id": 257051534,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633952488
    },
    {
        "content": "<p>I went with the indexed approach for now since it most closely matches what I want to express, thanks to everyone!</p>",
        "id": 257052681,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1633953158
    },
    {
        "content": "<p>It's worth noting that you can always recover the set version from the indexed version by choosing <code>I</code> as <code>coe_sort As</code> and <code>f : I → set X</code> as <code>coe</code></p>",
        "id": 257054082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633953917
    },
    {
        "content": "<p>It may be convenient to require <code>closed_under_finite_unions4</code> in the definition, then have others as theorems.</p>",
        "id": 257075318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633963962
    },
    {
        "content": "<p>Because it will be easier to prove that some set of sets satisfies the predicate.</p>",
        "id": 257075409,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633964008
    },
    {
        "content": "<p>Also, in version 3 the <code>ι</code> is restricted to universe <code>u</code>. In a lemma you could remove that restriction.</p>",
        "id": 257075522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633964056
    },
    {
        "content": "<p>(You'll certainly be happy to have the flexibility to use <code>ι = fin n</code>)</p>",
        "id": 257075551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633964079
    }
]