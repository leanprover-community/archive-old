[
    {
        "content": "<p>I've never really used multisets before, but how do I prove something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201016629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592315059
    },
    {
        "content": "<p>what is the use case?</p>",
        "id": 201017834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592315569
    },
    {
        "content": "<p>I think a statement involving list and multiset and finset at the same time wouldn't be too idiomatic</p>",
        "id": 201017914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592315620
    },
    {
        "content": "<p>Can you show that there exists a monomial in 5 variables, of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mn>3</mn></msup><msup><mi>Y</mi><mn>2</mn></msup><mi>Z</mi><msup><mi>W</mi><mn>4</mn></msup><msup><mi>U</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">X^3 Y^2 Z W^4 U^3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 201019407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592316196
    },
    {
        "content": "<p>The 5 variables are indexed by an arbitrary fintype.</p>",
        "id": 201019433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592316209
    },
    {
        "content": "<p>In particular, 5 is actually <code>n : nat</code>, or rather <code>fintype.card \\sigma</code>.</p>",
        "id": 201019498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592316240
    },
    {
        "content": "<p>But it's easy to reduce to the case <code>fin n</code>, which is what you see upstairs.</p>",
        "id": 201019629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592316287
    },
    {
        "content": "<p>And <code>l</code> is a list of nats that are the degrees of the variables that I want, so <code>l = [3,2,1,4,3]</code>.</p>",
        "id": 201019701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592316323
    },
    {
        "content": "<p>(But there is no prescribed order on the variables, so any monomial will do, up to symmetry.)</p>",
        "id": 201019794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592316360
    },
    {
        "content": "<ol>\n<li>rename <code>multiset.ext</code> to <code>multiset.ext_iff</code></li>\n<li>define <code>multiset.ext</code> following the usual rule</li>\n<li>mark it with <code>@[ext]</code></li>\n<li>prove the lemma alluded to the the doc-string for <code>map</code>, but apparently not actually proved ...?</li>\n<li>hope the goal looks better?</li>\n</ol>",
        "id": 201020201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592316521
    },
    {
        "content": "<p>(Yuck?)</p>",
        "id": 201020209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592316526
    },
    {
        "content": "<p>(Both your goal, and what I found looking in <code>multiset.lean</code>...)</p>",
        "id": 201020257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592316547
    },
    {
        "content": "<p>Hmmm, I see...</p>",
        "id": 201020769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592316764
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_cons_cast_succ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_cons_length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image_val_of_inj_on</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">∉</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_ne_last</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">univ_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">insert_val</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">ndinsert_of_not_mem</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n      <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_map</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_cons_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201021144,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592316918
    },
    {
        "content": "<p><code>list.nth_le_cons_length</code> seems wrong, but you also didn't use it?</p>",
        "id": 201021638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592317096
    },
    {
        "content": "<p>It's <code>@[simp]</code> so the <code>simp</code> used it.</p>",
        "id": 201021730,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592317132
    },
    {
        "content": "<p>But it's wrong, isn't it? <code>a</code> is the zeroth element, no that <code>l.length</code>th?</p>",
        "id": 201021845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592317178
    },
    {
        "content": "<p>Yes, the list is in the wrong order. D'oh</p>",
        "id": 201022009,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592317229
    },
    {
        "content": "<p>So it should probably be proved with <code>list.reverse_rec_on</code></p>",
        "id": 201022072,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592317257
    },
    {
        "content": "<p>While something like this will work (and Chris reached it much faster than I was going to), I feel like \"having to resort to induction\" is a bad sign here, and it might be better to improve the API.</p>",
        "id": 201022335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592317325
    },
    {
        "content": "<p>though there's some irreducible gross-ness in any proof of this caused by the gross-ness of <code>(λ (i : fin l.length), l.nth_le i i.2)</code>. :-)</p>",
        "id": 201022473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592317388
    },
    {
        "content": "<p>Yup...</p>",
        "id": 201022550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592317426
    },
    {
        "content": "<p>but I think with better API, you could hope that just <code>ext</code> and <code>simp</code> got you basically down to a statement about lists, after which dealing with gross-ness by induction feels less intimidating</p>",
        "id": 201022761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592317512
    },
    {
        "content": "<p>Here's what I really want:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201022778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592317520
    },
    {
        "content": "<p>But from there to my first question is quite straightforward, and I think the obvious way to go.</p>",
        "id": 201022812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592317536
    },
    {
        "content": "<p>(Modulo that I change <code>l</code> to a multiset here.)</p>",
        "id": 201022838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592317549
    },
    {
        "content": "<p>Why bother with the <code>finsupp</code>, if you already have <code>fintype</code>?</p>",
        "id": 201022878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592317562
    },
    {
        "content": "<p>I don't think that statement is true?</p>",
        "id": 201022947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592317583
    },
    {
        "content": "<p>Yeah, it's not true... what if <code>l</code> takes on more values than <code>\\sigma</code> has elements?</p>",
        "id": 201023107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592317660
    },
    {
        "content": "<p>Ooh, shoot...</p>",
        "id": 201023217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592317692
    },
    {
        "content": "<p>What I really really want, is that <code>(l : list nat) (hl: l.length = fintype.card \\sigma) (hl' : l.sorted)</code>, and I tag on a <code>multiset.sort</code> on top of the <code>multiset.map</code>.</p>",
        "id": 201023303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592317736
    }
]