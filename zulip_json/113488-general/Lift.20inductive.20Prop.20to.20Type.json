[
    {
        "content": "<p>Given an inductive <code>Prop</code>, is it possible, in general, to define an inductive <code>Type</code> (or higher) that precisely corresponds to the prop, and there exists a conversion function? Consider this simplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">T₁</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">T₁</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">T₁</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">T₁</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">T₁</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">T₁_of_T</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">T₁</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Because of proof irrelevance, there may be multiple ways to construct <code>T₁ n</code>, so <code>T₁_of_T</code> is allowed to use the axiom of choice. Can we construct it in general and what is the easiest way to do so?</p>\n<p>I'm asking because I'm trying to prove that if there exists a <code>refl_trans_gen R</code> between two terms, then there exists a <code>quiver</code> path between them. The definition of <code>quiver.path</code> is more-or-less the same as <code>refl_trans_gen</code>, except that a path is a type.</p>",
        "id": 266724134,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641236570
    },
    {
        "content": "<p>I would define a map the other way, prove it is surjective (by induction) and use <code>choice</code> to pick a section.</p>",
        "id": 266724584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641236824
    },
    {
        "content": "<p>You can also show <code>T n → nonempty (T₁ n)</code> using induction.</p>",
        "id": 266724622,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641236849
    },
    {
        "content": "<p>Oh yeah, to clarify, by \"induction\" I meant <code>T.rec</code>.</p>",
        "id": 266724837,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641236968
    },
    {
        "content": "<blockquote>\n<p>I would define a map the other way, prove it is surjective (by induction) and use <code>choice</code> to pick a section.</p>\n</blockquote>\n<p>Nice!<br>\nThat works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">T₁T</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T₁</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">T.zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">T.one</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">T.add</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">surj_T₁T</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">T₁T</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">T₁.zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">T₁.one</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">T₁.add</span> <span class=\"n\">h₃.some</span> <span class=\"n\">h₄.some</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TT₁</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">T₁</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">function.surj_inv</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">surj_T₁T</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266726823,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641238055
    },
    {
        "content": "<p>to illustrate the other approach: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TT₁</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">T.rec</span><span class=\"o\">,</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">4</span> <span class=\"o\">{</span><span class=\"n\">constructor</span><span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hb</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">ha.add</span> <span class=\"n\">hb</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think the surjection one is a bit more elegant thoughg</p>",
        "id": 266728468,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641238839
    },
    {
        "content": "<p>I see. So the trick is to use <code>refine (_ : nonempty _).some,</code> whenever we need to inductively construct data from a prop using <code>choice</code>.</p>",
        "id": 266729543,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641239517
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TT₁</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">T₁</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">T₁.zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">T₁.one</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">T₁.add</span> <span class=\"n\">h₃.some</span> <span class=\"n\">h₄.some</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266729613,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641239539
    },
    {
        "content": "<p>Is it worth having this function in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.function.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.relation</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">open</span> <span class=\"n\">relation</span>\n<span class=\"kn\">open</span> <span class=\"n\">quiver</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quiver.path_of_refl_trans_gen</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">path</span> <span class=\"n\">α</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">⟩</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x₁</span> <span class=\"n\">y₁</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"bp\">@</span><span class=\"n\">path.nil</span> <span class=\"n\">α</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">⟩</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"bp\">@</span><span class=\"n\">path.cons</span> <span class=\"n\">α</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">⟩</span> <span class=\"n\">x</span> <span class=\"n\">x₁</span> <span class=\"n\">y₁</span> <span class=\"n\">h₃.some</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266730450,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641240042
    },
    {
        "content": "<p>this trick can be useful in a variety of ways, for example it's what you need (well, using <code>exists.some</code> but same idea) for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.adjoin_induction'\">docs#algebra.adjoin_induction'</a></p>",
        "id": 266730837,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641240271
    }
]