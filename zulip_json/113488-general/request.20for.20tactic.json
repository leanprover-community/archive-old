[
    {
        "content": "<p>I'd really like a tactic that lets me add an <code>@[elementwise]</code> attribute to lemmas which give equations in categories.</p>\n<p>It should check that the lemma is an equation between morphisms <code>f g : X ⟶ Y</code> (presumably depending on arguments) in some category <code>C</code>, failing otherwise.</p>\n<p>It should produce a new copy of the lemma, appending the <code>_apply</code> to the name, modified as follows:</p>\n<ol>\n<li>If we can't already infer a <code>concrete_category C</code>, add such an instance to the hypotheses.</li>\n<li>Add a hypothesis <code>x : (X : Type*)</code> (using <code>concrete_category.has_coe_to_sort</code>).</li>\n<li>Replace the conclusion with <code>f x = g x</code>, and the proof with <code>concrete_category.congr_hom prf x</code>.</li>\n<li>Run <code>dsimp only [concrete_category.comp_coe, concrete_category.id_coe]</code> on the conclusion, to replace e.g <code>(p ≫ q) x</code> with <code>q (p x)</code>.</li>\n</ol>\n<p>Hopefully this is very similar to the existing <code>@[reassoc]</code> tag's implementation.</p>",
        "id": 232246946,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617013808
    },
    {
        "content": "<p>I will presumably end up trying this myself, but if anyone would like to</p>\n<ol>\n<li>give hints</li>\n<li>criticise the spec</li>\n<li>help me write it sometime</li>\n<li>write it!</li>\n</ol>\n<p>any of these would be much appreciated. :-)</p>",
        "id": 232247010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617013854
    },
    {
        "content": "<p>I'm in no position to help with this but I will remark that yesterday I ran into exactly this issue when thinking about your recent work on homology and trying to apply it to the category of R-modules, and I wrote an apply lemma manually which worked in this case. In other words -- you're not the only one who wants this!</p>",
        "id": 232248908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617015036
    },
    {
        "content": "<p>I was just having a look at <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>'s <code>reassoc_axiom.lean</code>. I am hopeful that I can edit that into this tactic, using it as a crib for everything I have forgotten about metaprogramming. :-)</p>",
        "id": 232248972,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617015115
    },
    {
        "content": "<p>I'll start shortly if anyone wants to join!</p>",
        "id": 232249084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617015203
    },
    {
        "content": "<p>I think I am there except for a really annoying unassigned universe metavariable. :-(</p>",
        "id": 232253802,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617017952
    },
    {
        "content": "<p>If I have an <code>expr</code> representing a <code>category.{u (u+1)} C</code>, how do I extract that universe level <code>u</code>?</p>",
        "id": 232254048,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617018097
    },
    {
        "content": "<p>Specifically, I want to build the expr representing <code>concrete_category.{u} C</code>. How do I insert the <code>u</code> into it? Currently I'm just using <code>to_expr `(concrete_category %%C)</code>, but there are not antiquotations for universe levels.</p>",
        "id": 232254209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617018192
    },
    {
        "content": "<p>I'd also like antiquotations for universe levels.  Hopefully we can make that happen in <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span> .</p>",
        "id": 232254268,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617018233
    },
    {
        "content": "<p>You can always build the expression manually. <code>expr.const ``concrete_category [u, v, w] C inst</code></p>",
        "id": 232254448,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617018315
    },
    {
        "content": "<p>Extracting the universe levels is easy <code>e.get_app_fn.univ_levels</code>.</p>",
        "id": 232254492,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617018338
    },
    {
        "content": "<p>Nice! I had weird error messages while I was getting the universe levels wrong, but once I sorted that out this works nicely.</p>",
        "id": 232256074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617019177
    },
    {
        "content": "<p>How do I get the universe level of an expression representing something in <code>Type u</code>?</p>",
        "id": 232257217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617019687
    },
    {
        "content": "<p>I understand that <code>.univ_levels</code> extracts the universes on a constant. But if I'm just looking at some term <code>X : Type u</code>, how do I tell which <code>u</code>?</p>",
        "id": 232257480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617019841
    },
    {
        "content": "<p>I'm not sure if we have a function for that.  You could pattern-match against <code>expr.sort (level.succ u)</code>.</p>",
        "id": 232257694,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617019950
    },
    {
        "content": "<p>Ah, there is <code>match_sort</code>, which does exactly that.</p>",
        "id": 232257733,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617019977
    },
    {
        "content": "<p>But it seems I have to <code>infer_type</code> twice, so I'm actually looking at the <code>Type v</code>.</p>",
        "id": 232257754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617019992
    },
    {
        "content": "<p>Once should be enough.  That is, something like <code>expr.sort (level.succ u) ← infer_type X &gt;&gt;= whnf,</code></p>",
        "id": 232257955,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617020119
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 232258660,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617020456
    },
    {
        "content": "<p>Hopefully a final universe question. Say I've taken some declaration <code>d</code>, and prepared a new type <code>t</code> and proof <code>p</code> that I want to make a declaration for.</p>\n<p>Usually I'd write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_decl</span> <span class=\"bp\">$</span> <span class=\"n\">declaration.thm</span> <span class=\"n\">n'</span> <span class=\"n\">d.univ_params</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">pr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>that is, I'd copy my universe parameter names from <code>d</code>.</p>\n<p>What if <code>t</code> has a new universe metavariable in it? Then I get the error <code>failed to add declaration 'tactic.foo_apply' to environment, type has metavariables</code>. How am I meant to package this up as a declaration with one more universe parameter than before?</p>",
        "id": 232258964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617020633
    },
    {
        "content": "<p>If you have a universe metavariable, you need to replace it by a universe parameter.  (I think the easiest way to assign universe metavariables is <code>unify (expr.sort u) (expr.sort v)</code>).  Then you append the universe parameters to <code>d.univ_params</code> (or prepend, it's your choice).</p>",
        "id": 232259283,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617020775
    },
    {
        "content": "<p>And I can just make up a fresh name for my new parameter?</p>",
        "id": 232260054,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617021172
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 232260216,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617021245
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6941\">#6941</a></p>",
        "id": 232267238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617024444
    }
]