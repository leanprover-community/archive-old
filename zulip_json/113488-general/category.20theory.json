[
    {
        "content": "<p>I'm working a bit on the category theory library in the branch <code>limits-isos</code>. My initial goal was to show that if <code>C</code> has products/coproducts/..., then <code>C·µí·µñ</code> has coproducts/products/..., but I've also been changing some other things, like the definition of <code>equivalence</code> (now it's an adjoint equivalence).</p>\n<p>One thing I want to change is that if we have a natural transformation <code>Œ± : F ‚ü∂ G</code>, I would like to write <code>Œ±.app</code> for its action on objects. The problem is that the type of <code>Œ±</code> is <code>has_hom.hom</code> and the full name of <code>app</code> is <code>nat_trans.app</code>, so it often doesn't work (it works sometimes, but not reliably, and I don't know why it sometimes doesn't work). <br>\nI tried to add a declaration</p>\n<div class=\"codehilite\"><pre><span></span>@[reducible] def has_hom.hom.app {F G : C ‚•§ D} (Œ± : F ‚ü∂ G) (X : C) : F.obj X ‚ü∂ G.obj X := nat_trans.app Œ± X\n</pre></div>\n\n\n<p>This works, but now we have two versions of <code>app</code> which are not syntactically equal, which causes major headaches when rewriting/simplifying. In the branch <code>limits-isos</code> tried to get it to work, but in some rare cases <code>Œ±.app</code> will actually use <code>nat_trans.app</code>, which is undesirable.</p>\n<p>Any suggestions to resolve this? I'm now leaning towards removing <code>has_hom.hom.app</code> and live with the fact that we sometimes have to write <code>nat_trans.app Œ±</code> instead of <code>Œ±.app</code></p>",
        "id": 164835175,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1556922216
    },
    {
        "content": "<p>shouldn't it unfold to <code>nat_trans</code> in this example, so <code>Œ±.app</code> means <code>nat_trans.app Œ±</code>?</p>",
        "id": 164835914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556923008
    },
    {
        "content": "<p>I think adding <code>has_hom.hom.app</code> will not make this better</p>",
        "id": 164835949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556923073
    },
    {
        "content": "<p>but I'm curious to see your problem cases where <code>Œ±.app</code> doesn't work</p>",
        "id": 164836008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556923108
    },
    {
        "content": "<p>I'll undo the change and double check where I ran into problems. Maybe it was a case where the category instance wasn't synthesized yet.</p>",
        "id": 164836140,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1556923257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">id_app</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>gives (with <code>pp.implicit</code> set to <code>true</code>)</p>\n<div class=\"codehilite\"><pre><span></span>invalid field notation, &#39;app&#39; is not a valid &quot;field&quot; because environment does not contain &#39;category_theory.has_hom.hom.app&#39;\n  ùüô F\nwhich has type\n  F ‚ü∂ F\nAdditional information:\nd:\\projects\\mathlib\\src\\category_theory\\functor_category.lean:42:48: context: invalid field notation, &#39;app&#39; is not a valid &quot;field&quot; because environment does not contain &#39;category_theory.has_hom.rec.app&#39;\n  ùüô F\nwhich has type\n  @has_hom.rec (C ‚•§ D) (Œª [c : has_hom (C ‚•§ D)], C ‚•§ D ‚Üí C ‚•§ D ‚Üí Sort ?)\n    (Œª (hom : C ‚•§ D ‚Üí C ‚•§ D ‚Üí Sort ?), hom)\n    (@category_struct.to_has_hom (C ‚•§ D) ?m_1)\n    F\n    F\n</pre></div>\n\n\n<p>Using <code>(ùüô F : F ‚ü∂ F).app</code> does work.</p>",
        "id": 164890894,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557010725
    },
    {
        "content": "<p>So it seems that sometimes the functor category instance wasn't synthesized yet. But so far this happens only a couple of times, so it seems very manageable.</p>",
        "id": 164890908,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557010768
    }
]