[
    {
        "content": "<p>I've never seen anything like this before. <code>rw h2</code> on line 26 fails because it claims <code>h2</code> is not an equality. But it is, and <code>rw h2.symm.symm</code> works fine. What's going on?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fibZ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fibZ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">fibZ_0</span> <span class=\"o\">:</span> <span class=\"n\">fibZ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">fibZ_1</span> <span class=\"o\">:</span> <span class=\"n\">fibZ</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">fibZ_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fibZ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">induction2</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fibZ_m_n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">induction2</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fibZ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fibZ_succ_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive step</span>\n    <span class=\"n\">intros</span> <span class=\"n\">d</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fibZ</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fibZ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fibZ_succ_succ</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fibZ_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fibZ_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"c1\">--  rw h2, -- &quot;lemma is not an equality or iff&quot;    &lt;---- is this a bug?</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"c1\">-- works fine</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">add_assoc</span> <span class=\"n\">m</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196692155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588796738
    },
    {
        "content": "<p>it's probably an instantiated metavariable</p>",
        "id": 196692251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588796764
    },
    {
        "content": "<p>you mean a variable?</p>",
        "id": 196692274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588796776
    },
    {
        "content": "<p>no</p>",
        "id": 196692310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588796788
    },
    {
        "content": "<p>oh</p>",
        "id": 196692329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588796794
    },
    {
        "content": "<p>It has type <code>h2 : ?m</code> where <code>?m := a = b</code> or somesuch</p>",
        "id": 196692365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588796815
    },
    {
        "content": "<p>how do I test for this?</p>",
        "id": 196692390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588796830
    },
    {
        "content": "<p>this is pretty printed as <code>h2 : a = b</code> but <code>rw</code> is fussy about it in this particular case</p>",
        "id": 196692424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588796850
    },
    {
        "content": "<p>but pp.all doesn't show it me, right?</p>",
        "id": 196692478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588796875
    },
    {
        "content": "<p><code>simp at h2</code> before the rewrite fixes it</p>",
        "id": 196692560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588796903
    },
    {
        "content": "<p>So did I write bad code to get this situation?</p>",
        "id": 196692598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588796925
    },
    {
        "content": "<p>my code looks really innocuous and fine</p>",
        "id": 196692661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588796963
    },
    {
        "content": "<p>if I change <code>apply induction2 _ _ _ _ n</code> to <code>refine induction2 _ _ _ _ n</code> the problem goes away</p>",
        "id": 196692898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588797074
    },
    {
        "content": "<p>What is an instantiated metavariable?</p>",
        "id": 196693133,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588797178
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fibZ_m_n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">fibZ</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">induction2</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fibZ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fibZ_succ_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive step</span>\n    <span class=\"n\">intros</span> <span class=\"n\">d</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fibZ</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fibZ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fibZ_succ_succ</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fibZ_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fibZ_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span><span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- t ← tactic.instantiate_mvars t, -- uncomment this line</span>\n      <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"c1\">-- (app (mvar _mlocal._fresh.378.4796 _mlocal._fresh.378.4796 (const 2 []))</span>\n      <span class=\"c1\">--   (app (app (app (app (const has_add.add [0]) (const nat [])) (const nat.has_add []))</span>\n      <span class=\"c1\">--   (local_const 0._fresh.378.6836 d (const 1 []))) (app (app (const has_one.one [0])</span>\n      <span class=\"c1\">--   (const nat [])) (const nat.has_one []))))</span>\n    <span class=\"o\">),</span>\n    <span class=\"c1\">-- rw h2, -- &quot;lemma is not an equality or iff&quot;    &lt;---- is this a bug?</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"c1\">-- works fine</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">add_assoc</span> <span class=\"n\">m</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196693213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797224
    },
    {
        "content": "<p><code>expr.to_raw_fmt</code> is like the super verbose version of <code>pp.all</code></p>",
        "id": 196693296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797254
    },
    {
        "content": "<p>it shows you exactly what constructors of the <code>expr</code> type are being used</p>",
        "id": 196693353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797289
    },
    {
        "content": "<p>As you can see, it starts <code>(app (mvar ...</code></p>",
        "id": 196693399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797308
    },
    {
        "content": "<p>then where is the information stored that <code>?m_2</code> is <code>eq</code>?</p>",
        "id": 196693416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588797316
    },
    {
        "content": "<p>in the local context, not somewhere easily accessible to lean except through builtins like <code>instantiate_mvars</code></p>",
        "id": 196693468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797351
    },
    {
        "content": "<p>can we tell <code>intro</code> to instantiate metavariables?</p>",
        "id": 196693610,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588797412
    },
    {
        "content": "<p>I haven't looked at what is causing the problem in the first place in this case</p>",
        "id": 196693728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797475
    },
    {
        "content": "<p>The only metavariable that <code>intro</code> instantiates is the goal. It doesn't have to solve any unification problems</p>",
        "id": 196693863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797552
    },
    {
        "content": "<p>It might make things clearer to replace the first line with:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">induction2</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>After the have, the state is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">5</span> <span class=\"n\">goals</span>\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fibZ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fibZ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fibZ</span> <span class=\"n\">n</span>\n\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>The thing that will eventually become the type of <code>h2</code> is here <code>?m_1 (d + 1)</code></p>",
        "id": 196694323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797773
    },
    {
        "content": "<p>The problem is somehow with the <code>apply</code> on the first line.</p>",
        "id": 196694343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588797784
    },
    {
        "content": "<p>yeah, that. <code>refine</code> fixes it.</p>",
        "id": 196694365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588797796
    },
    {
        "content": "<p>Because <code>refine</code> knows the expected type, and <code>apply</code> doesn't, elaboration happens in a different order here</p>",
        "id": 196694417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797827
    },
    {
        "content": "<p><code>apply</code> is doing the above two stage process, while <code>refine</code> never creates <code>?m_1 (d + 1)</code> because it already knows what <code>?m_1</code> is</p>",
        "id": 196694532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797872
    },
    {
        "content": "<p>When I saw the underscores I thought about maybe making induction2_on and applying that instead; I don't know if that would have fixed the problem.</p>",
        "id": 196694658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588797937
    },
    {
        "content": "<p>[this code is for pedagogical purposes]</p>",
        "id": 196694682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588797953
    },
    {
        "content": "<p>Notice that the variable in question is pretty far from <code>apply</code>'s strike zone. It's in a subterm of a different goal</p>",
        "id": 196694757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588797970
    },
    {
        "content": "<p>I'm not sure if this is a factor, but there is a performance penalty for <code>instantiate_mvars</code> because it has to traverse the whole term, while most tactics try to keep track of where all the metavariables are so that they don't have to go hunting</p>",
        "id": 196694872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588798038
    },
    {
        "content": "<p>But the check in <code>rw</code> is just plain broken. It's pattern matching on the expr and assumes that an <code>mvar</code> is not an <code>eq</code>. This is a very common pattern, but it is not safe against rogue terms with instantiated mvars</p>",
        "id": 196695114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588798154
    },
    {
        "content": "<p>Here's another example that often comes up for me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hz</span> <span class=\"c1\">-- rewrite tactic failed, lemma is not an equality nor a iff</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196695708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588798459
    },
    {
        "content": "<p>The type of <code>hz</code> is an instantiated metavariable here because it is unknown when it is created by the lambda and is solved by the <code>h</code> to its right</p>",
        "id": 196695844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588798541
    },
    {
        "content": "<p>I think you complain periodically about that one. Couldn't you change that in Lean 3.13?</p>",
        "id": 196695846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588798542
    },
    {
        "content": "<p>(I lost track of what it the next version)</p>",
        "id": 196695872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588798552
    },
    {
        "content": "<p>instantiated mvars or the <code>rw</code> check?</p>",
        "id": 196696479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588798814
    },
    {
        "content": "<p>The rw check</p>",
        "id": 196696494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588798823
    },
    {
        "content": "<p>I know nothing about the code in question but it shouldn't be hard</p>",
        "id": 196696552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588798845
    },
    {
        "content": "<p>I think you already found the offending line at some point</p>",
        "id": 196696607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588798876
    },
    {
        "content": "<p>I'm building lean now, if I can remember how to do that</p>",
        "id": 196697545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588799314
    },
    {
        "content": "<p>I've seen this a couple of times but only very recently</p>",
        "id": 196699671,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588800271
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/213\" title=\"https://github.com/leanprover-community/lean/issues/213\">lean#213</a></p>",
        "id": 196699750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588800307
    },
    {
        "content": "<p>BTW, this \"instantiation\" is more formally known as <a href=\"https://stackoverflow.com/questions/31889048/what-does-the-ghc-source-mean-by-zonk\" title=\"https://stackoverflow.com/questions/31889048/what-does-the-ghc-source-mean-by-zonk\">zonking</a></p>",
        "id": 196706935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588804461
    }
]