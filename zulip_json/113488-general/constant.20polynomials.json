[
    {
        "content": "<p>I have the following example, which has a proof that seems quite long for the statement:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">deg_X_eq_one</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">X_eq_one_mul_X_pow_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring_exp</span>\n                      <span class=\"bp\">...</span>   <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">congr_arg</span> <span class=\"n\">degree</span> <span class=\"n\">X_eq_one_mul_X_pow_one</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">degree_monomial</span> <span class=\"n\">F</span> <span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_one</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">sub_eq_plus_minus</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)),</span>\n<span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_neg</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">congr_arg</span> <span class=\"n\">degree</span> <span class=\"n\">sub_eq_plus_minus</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">z_lt_o</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">zero_eq_zero_coe</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">one_eq_one_coe</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_eq_zero_coe</span><span class=\"o\">,</span> <span class=\"n\">one_eq_one_coe</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">some_eq_coe</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">degree_add_C</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n                  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">deg_X_eq_one</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">z_lt_o</span><span class=\"o\">})),</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">deg_X_eq_one</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Particularly unruly is the part needed to prove that <code>C 1 * X ^ 1</code> is the same as <code>X</code>, and the part where it takes a bunch of messing with coercions to prove that <code>0 &lt; 1</code> remains true in the type <code>with_bot ℕ</code>, as my mathematical brain regards both of those statements as trivial. Any suggestions for shortening/simplifying the proof?</p>",
        "id": 201153718,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1592406070
    },
    {
        "content": "<p>This is a lemma in the polynomial library <code>degree_X_sub_C</code>. I don't think there's a general nice method for proving these things, it would take me a while to prove this for more complicated polynomials, perhaps a tactic could be written to solve these.</p>",
        "id": 201154752,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592406461
    }
]