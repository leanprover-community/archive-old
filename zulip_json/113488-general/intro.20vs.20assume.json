[
    {
        "content": "<p>what's the difference? Here's what's from the tutorial of mathlib, demonstrating two ways of proving the same thing. In the first example there's <code>intro h</code> and it can be changed to <code>assume h</code>. But the second <code>assume h</code> can't be changed to intro h.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_of_le_add_eps</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Let's prove the contrapositive, asking Lean to push negations right away.</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Assume `h : x &lt; y`.</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- We need to find `ε` such that `ε` is positive and `x + ε &lt; y`.</span>\n  <span class=\"c1\">-- Let's use `(y-x)/2`</span>\n  <span class=\"n\">use</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- we now have two properties to prove. Let's do both in turn, using `linarith`</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Next we will study a compressed version of that proof:</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 307840239,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667509921
    },
    {
        "content": "<p>When you write <code>exact ...</code> the <code>...</code> needs to be the exact term that solves the goal in question. <code>intro</code> is a tactic and cannot be used in term-mode. You can replace <code>assume</code> with a lambda if you want.</p>",
        "id": 307842505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667510822
    },
    {
        "content": "<p>I guess <code>assume</code> is also a tactic. I don't think anyone actually uses <code>assume</code> in real life (i.e. outside of the tutorials). We usually use lambdas or <code>intro(s)</code>.</p>",
        "id": 307842853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667510963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/intro.20vs.20assume/near/307842853\">said</a>:</p>\n<blockquote>\n<p>I guess <code>assume</code> is also a tactic. I don't think anyone actually uses <code>assume</code> in real life (i.e. outside of the tutorials). We usually use lambdas or <code>intro(s)</code>.</p>\n</blockquote>\n<p><code>assume</code> is used like ~700+ times in mathlib, and in fact I think a few people are in favour of keeping those and not removing them</p>",
        "id": 307845070,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1667511828
    },
    {
        "content": "<p>How many times does mathlib use <code>intro/intros/rintro/rintros</code>?</p>",
        "id": 307845321,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667511935
    },
    {
        "content": "<p>I bet the number of <code>assume</code>s is infinitesimal compared to those</p>",
        "id": 307845367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667511955
    },
    {
        "content": "<p>I don't think <code>assume</code> should be removed, I'm just saying that people usually forget about <code>assume</code> pretty quickly once they actually start using Lean</p>",
        "id": 307845541,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667512013
    },
    {
        "content": "<p>I think they're mostly used in term mode; did people back then have trouble typing λ? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 307847428,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667512751
    },
    {
        "content": "<p><code>assume</code> is also a synonym for <code>fun</code> and <code>λ</code></p>",
        "id": 307849002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667513441
    },
    {
        "content": "<p>It used to be a stylistic thing to use <code>assume</code> in proofs and <code>λ</code> in functions, I think</p>",
        "id": 307888755,
        "sender_full_name": "Reid Barton",
        "timestamp": 1667541429
    },
    {
        "content": "<p>Hopefully the answers above settled the original question (tactic vs term mode and lots of synonyms), but I would still add two comments.</p>\n<p>In tactic mode <code>intros</code> and <code>assume</code> seem to behave completely identically; in particular they can do multiple introductions/assumptions at a time, whereas <code>intro</code> only does one at a time.</p>\n<p>As a stylistic matter, reiterating Reid's point above, I find it very strange when people \"assume data\". In teaching math with Lean (rather than teaching Lean) I would (try to) be very careful to only ever use <code>assume</code> when the assumption is a <code>Prop</code>, and I would use <code>intro/intros</code> where mathematicians would write \"let x be something\" (data). In the converse direction, I do realize that in logic <code>intro/intros</code> makes sense also for <code>Prop</code>s as an introduction rule for connectives/quantifies, but this does not in my opinion correspond to pen-and-paper math use, so in teaching I'd have a preference for <code>assume</code> for propositions. In mathlib, on the other hand, I think using <code>intro/intros</code> throughout is commonplace and makes a lot of sense (we buy into Curry-Howard or understand the logic etymology and don't attempt to produce code for direct math pedagogical consumption).</p>",
        "id": 307895864,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1667546159
    },
    {
        "content": "<p>In tactic mode <code>assume</code> is closer to <code>rintro</code> than to <code>intro</code>; it let's you specify the type of the thing being introd as <code>assume a : A</code>, with semantics <code>intro a, change A at a</code></p>",
        "id": 307906143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667551389
    },
    {
        "content": "<p>Also, <code>assume</code> (in both term and tactic mode) has an additional feature not shared with <code>intro</code> / <code>\\lam</code>: you can omit the identifier and it is named <code>this</code>. So <code>assume A, e</code> or <code>assume A,</code> as a tactic mean the same as <code>λ this : A, e</code> or <code>rintro (this : A),</code> respectively</p>",
        "id": 307956047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667568177
    },
    {
        "content": "<p>I assume you meant <code>assume : A</code>, <code>assume A</code> means \"call the variable A\"</p>",
        "id": 307956586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667568355
    },
    {
        "content": "<p>ah, yes I forget the syntax since I never use it <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 307957006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667568481
    }
]