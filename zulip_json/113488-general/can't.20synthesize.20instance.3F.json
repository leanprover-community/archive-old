[
    {
        "content": "<p>I'm having an issue where I've created an instance and then I immediately try to use that instance and lean says it can't synthesize that instance. If I explicitly pass the instance as an argument (using <code>@</code>), that does type check. <code>#print instances</code> shows my instance too. Any ideas on how to debug why it can't find the instance?</p>",
        "id": 160608695,
        "sender_full_name": "dagit",
        "timestamp": 1552423485
    },
    {
        "content": "<p>You can trace the instance search</p>",
        "id": 160608739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552423522
    },
    {
        "content": "<p>I was looking at the docs for a command to do that but I couldn't find it. Do you know the command?</p>",
        "id": 160608766,
        "sender_full_name": "dagit",
        "timestamp": 1552423553
    },
    {
        "content": "<p>But showing your instance here would probably be quicker</p>",
        "id": 160608783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552423562
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference</a></p>",
        "id": 160608847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552423587
    },
    {
        "content": "<p>You need to read that whole chapter anyway</p>",
        "id": 160608862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552423597
    },
    {
        "content": "<p>you can activate the tracing with <code>set_option trace.class_instances true</code></p>",
        "id": 160608869,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552423605
    },
    {
        "content": "<p>but it is a little bit hard to read</p>",
        "id": 160608892,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552423624
    },
    {
        "content": "<p>Thanks for the links and the command. In the trace it considered the one I want it to use but discarded it because of a metavar.</p>",
        "id": 160609445,
        "sender_full_name": "dagit",
        "timestamp": 1552423969
    },
    {
        "content": "<p>I think unless some of your type class parameters are marked as <code>out_param</code>, they can't be meta variables while doing type class resolution. It's a bit like functional dependencies in Haskell.</p>",
        "id": 160609853,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1552424229
    },
    {
        "content": "<p>Can you post a MWE?</p>",
        "id": 160609971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552424306
    },
    {
        "content": "<p>Sorry, I was gone at a meeting.</p>",
        "id": 160613008,
        "sender_full_name": "dagit",
        "timestamp": 1552426504
    },
    {
        "content": "<p>I've tried to make a minimal example but so far I've failed on that front.</p>",
        "id": 160613025,
        "sender_full_name": "dagit",
        "timestamp": 1552426520
    },
    {
        "content": "<p>The class is defined like this:</p>\n<div class=\"codehilite\"><pre><span></span>universes u v w\n\nnamespace sexpr\n\nclass is_atom (α : Type _) :=\n(to_char_buffer : α → char_buffer)\n(read {m} [char_reader string m] (n:ℕ) : m α)\n\nend sexpr\n</pre></div>",
        "id": 160613150,
        "sender_full_name": "dagit",
        "timestamp": 1552426599
    },
    {
        "content": "<p>And there is a function like this:<br>\n<code>def repr {α:Type} [h : is_atom α] : sexpr α -&gt; string := render buffer.to_string</code></p>",
        "id": 160613206,
        "sender_full_name": "dagit",
        "timestamp": 1552426645
    },
    {
        "content": "<p>And it's when I try to use that <code>repr</code> function that lean fails to synthesize the instance</p>",
        "id": 160613231,
        "sender_full_name": "dagit",
        "timestamp": 1552426669
    },
    {
        "content": "<p>What's the type of <code>render</code>?</p>",
        "id": 160613660,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1552427013
    },
    {
        "content": "<p>The type of render is a bit involved, here is a link to tha code: <a href=\"https://github.com/GaloisInc/reopt-vcg/blob/master/lean/deps/sexpr/src/galois/sexpr.lean#L51\" target=\"_blank\" title=\"https://github.com/GaloisInc/reopt-vcg/blob/master/lean/deps/sexpr/src/galois/sexpr.lean#L51\">https://github.com/GaloisInc/reopt-vcg/blob/master/lean/deps/sexpr/src/galois/sexpr.lean#L51</a></p>",
        "id": 160613849,
        "sender_full_name": "dagit",
        "timestamp": 1552427144
    },
    {
        "content": "<p>I guess it all looks OK to my inexpert eyes. So you have some explicit type alpha and some explicit instance <code>is_atom alpha</code>. Does <code>example : is_atom alpha := by apply_instance</code> work? </p>\n<p>Independent of this, I have never seen <code>Type _</code> before. Does it change anything if you change it to <code>Type*</code>?</p>",
        "id": 160614114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552427333
    },
    {
        "content": "<p>try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">repr</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_atom</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">sexpr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">render</span> <span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>I think having an argument to force a choice for argument <code>α</code> might help with type class resolution</p>",
        "id": 160614119,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1552427338
    },
    {
        "content": "<p>Kevin, that <code>example</code> also fails to find the instance. I was trying something like that earlier today.</p>",
        "id": 160614152,
        "sender_full_name": "dagit",
        "timestamp": 1552427375
    },
    {
        "content": "<p>I'll try that Simon and get back to you.</p>",
        "id": 160614159,
        "sender_full_name": "dagit",
        "timestamp": 1552427391
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 160614165,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1552427401
    },
    {
        "content": "<p>Hmm...same error message. I'll try what Kevin ask about with <code>Type*</code></p>",
        "id": 160614230,
        "sender_full_name": "dagit",
        "timestamp": 1552427437
    },
    {
        "content": "<p>Wait, what is the syntax you wanted me to try? I don't think <code>Type*</code> is valid.</p>",
        "id": 160614288,
        "sender_full_name": "dagit",
        "timestamp": 1552427502
    },
    {
        "content": "<p>Removing the <code>_</code> so that it's just <code>Type</code> doesn't resolve the issue either.</p>",
        "id": 160614359,
        "sender_full_name": "dagit",
        "timestamp": 1552427560
    },
    {
        "content": "<p>I didn't know <code>(alpha : Type _)</code> was valid syntax. I am pretty sure <code>(alpha : Type*)</code> is. You're using Lean 3.4 right?</p>",
        "id": 160614409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552427640
    },
    {
        "content": "<p>If <code>by apply_instance</code> can't find the instance then this is a step in the right direction.</p>",
        "id": 160614458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552427653
    },
    {
        "content": "<p>That's just asking type class inference to look up the instance.</p>",
        "id": 160614469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552427667
    },
    {
        "content": "<p>3.4.1 to be precise</p>",
        "id": 160614479,
        "sender_full_name": "dagit",
        "timestamp": 1552427675
    },
    {
        "content": "<p>That should be fine.</p>",
        "id": 160614484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552427683
    },
    {
        "content": "<p>oh, <code>Type*</code> without a space makes a difference?</p>",
        "id": 160614527,
        "sender_full_name": "dagit",
        "timestamp": 1552427729
    },
    {
        "content": "<p>yes</p>",
        "id": 160614538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552427746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : is_atom sexp.atom := nat_expr.atom_is_atom\n[class_instances] trying next solution, current solution has metavars\n</pre></div>",
        "id": 160614612,
        "sender_full_name": "dagit",
        "timestamp": 1552427800
    },
    {
        "content": "<p>Is there a way to learn more about the metavar?</p>",
        "id": 160614638,
        "sender_full_name": "dagit",
        "timestamp": 1552427833
    },
    {
        "content": "<p>Ah, we solved it.</p>",
        "id": 160615510,
        "sender_full_name": "dagit",
        "timestamp": 1552428610
    },
    {
        "content": "<p>It was a universe level metavar</p>",
        "id": 160615519,
        "sender_full_name": "dagit",
        "timestamp": 1552428618
    },
    {
        "content": "<p>In the definition of <code>is_atom</code> we added that the <code>m</code> used by <code>read</code> needs to have type <code>Type -&gt; Type</code></p>",
        "id": 160615529,
        "sender_full_name": "dagit",
        "timestamp": 1552428641
    },
    {
        "content": "<p>Now it works as expected in my code</p>",
        "id": 160615534,
        "sender_full_name": "dagit",
        "timestamp": 1552428646
    },
    {
        "content": "<p>Thanks everyone</p>",
        "id": 160615536,
        "sender_full_name": "dagit",
        "timestamp": 1552428650
    },
    {
        "content": "<p>Also, <code>set_option pp.all true</code> allowed us to see the universe level variable.</p>",
        "id": 160615557,
        "sender_full_name": "dagit",
        "timestamp": 1552428671
    },
    {
        "content": "<p>That's always a fun challenge!</p>",
        "id": 160615946,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1552429055
    },
    {
        "content": "<p>Thanks for the help.   I understand why Lean behaves the  way it does in this case, but I found the behavior sufficiently counterintuitive that I filed an issue: <a href=\"https://github.com/leanprover/lean/issues/1995\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1995\">https://github.com/leanprover/lean/issues/1995</a></p>",
        "id": 160703120,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1552496251
    },
    {
        "content": "<p>Hey Joe, long time no see. I'm sure you're aware of this, but nobody is reading Lean 3 issues at the minute, as far as we know. Lean 3 has basically been abandoned. There was one Lean update to 3.4.2 which Sebastian Ullrich put together after a request from the community, but we think that's pretty much it now.</p>",
        "id": 160703546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552496542
    },
    {
        "content": "<p>Hi Kevin, I understand -- I only filed the issue as I don't see any rush on addressing this, but also didn't want to forget the problem either.  I'm hoping that Lean 4 could address this once the new core capabilities are stable.<br>\nI'm still using Lean and work with Jason, but also need to focus on other projects.</p>",
        "id": 160725740,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1552510086
    },
    {
        "content": "<p>These structures which introduce new universes in structure fields can be problematic. Mario urged me to avoid them in some Lean maths project I'm working on (the perfectoid project) and we actually had to do some work to work around it. Ultimately our definition <code>structure Spv (R : Type u)</code> contained a field which mentioned a new type <code>Gamma : Type u</code> (note: same universe as R) and then we had to make a custom constructor which took Gamma of type v and created another Gamma in the same universe as R. We were assured by Mario that this would avoid problems further down the line.</p>",
        "id": 160726827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552510913
    }
]