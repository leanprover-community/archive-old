[
    {
        "content": "<p>In general, what does this message mean? induction tactic failed, recursor \"or.dcases_on\" can only eliminate into Prop.</p>",
        "id": 128973389,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530548667
    },
    {
        "content": "<p>this happens at the head of a inductive function def.</p>",
        "id": 128973395,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530548685
    },
    {
        "content": "<p>it means you can't decompose an <code>or</code> into data</p>",
        "id": 128973396,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530548691
    },
    {
        "content": "<p>is it just <code>or</code>, or any inductive types in general? because there is no <code>or</code> in my code.</p>",
        "id": 128974745,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530550145
    },
    {
        "content": "<p>A lot of (but not all) inductive propositions cannot eliminate into data. inductive non-propositions can always eliminate into data.</p>",
        "id": 128974933,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530550358
    },
    {
        "content": "<p>Stupid question: can one get around this somehow with classical or noncomputable assumptions? Or does one run into contradictions in this generality?</p>",
        "id": 128975489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530550923
    },
    {
        "content": "<blockquote>\n<p>is it just <code>or</code>, or any inductive types in general? because there is no <code>or</code> in my code.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"118042\">@Zesen Qian</span> If you post a minimal working example as a gist then perhaps someone can locate the <code>or</code> ;-)</p>",
        "id": 128975510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530550967
    },
    {
        "content": "<p>You can, but you have to decide what to do when both sides are true.</p>",
        "id": 128975607,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530551092
    },
    {
        "content": "<p>So you might end up with a function whose behaviour is unknown when they're both true.</p>",
        "id": 128975772,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530551285
    },
    {
        "content": "<p>By using <code>prod_decidable</code>, you can make a function to go from or to sum:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">to_sum</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"n\">p</span> <span class=\"err\">⊕</span> <span class=\"n\">plift</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨</span> <span class=\"n\">h&#39;</span> <span class=\"bp\">⟩</span>\n          <span class=\"k\">else</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">false_or</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">imp_left</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 128976030,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530551633
    },
    {
        "content": "<p>What you can't get when eliminating into non-Prop is the computation rule that reduces an application <code>or.cases_on (or.inl p) f g</code> to <code>f p</code> and also <code>or.cases_on (or.inr q) f g</code> to <code>g q</code>, since <code>or.inl trivial = or.inr trivial</code> but <code>f trivial</code> might not be equal to <code>g trivial</code> (unless the result type is a proposition).</p>",
        "id": 128977157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530552935
    },
    {
        "content": "<p>sorry so what's default universe level of inductive types that's not specified level? Is it polymorphisized on all levels?</p>",
        "id": 128978404,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530554312
    },
    {
        "content": "<p>I'm sorry I can't parse your question. Are you talking of an error message?</p>",
        "id": 128978561,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530554491
    },
    {
        "content": "<p>no I mean like </p>\n<div class=\"codehilite\"><pre><span></span>inductive bool\n| true\n| false\n</pre></div>\n\n\n<p>will there be universe polymorphism for this, or just Type 1?</p>",
        "id": 128978664,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530554588
    },
    {
        "content": "<p>universe</p>",
        "id": 128978673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530554611
    },
    {
        "content": "<p>I would guess it's a <code>Type 0</code> but I recommend you discover it for yourself. Try <code>#check bool</code></p>",
        "id": 128978856,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530554813
    },
    {
        "content": "<p>yes it's Type 0, thank you.</p>",
        "id": 128978943,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530554883
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">bool1</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">bool1</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">bool1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bool1</span> <span class=\"c1\">-- Type</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">bool2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">bool2</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">bool2</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bool2</span> <span class=\"c1\">-- Type u_1 (i.e. universe is &quot;whatever&quot;)</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">v</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bool2</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"c1\">-- Type v</span>\n</pre></div>",
        "id": 128979001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530554950
    },
    {
        "content": "<p>There are some tricks</p>",
        "id": 128979004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530554955
    },
    {
        "content": "<p>Thanks, I guess we can use it to workaround \"universe too big\" issue with this?</p>",
        "id": 128979252,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530555228
    },
    {
        "content": "<p>I now have an error saying the argument of a constructor is too big.</p>",
        "id": 128979305,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530555255
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive t0 : Type u\n...\n\ninductive t1 : Type u\n| cons : t0 -&gt; t1\n</pre></div>",
        "id": 128979327,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530555297
    },
    {
        "content": "<p>On <code>t1</code>?</p>",
        "id": 128979349,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530555322
    },
    {
        "content": "<p>yeah, says the first argument of cons, t0, is too big.</p>",
        "id": 128979513,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530555519
    },
    {
        "content": "<p>If you don't tell <code>t1</code> what type it is then this might fix it</p>",
        "id": 128979547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530555567
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">t0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t0</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">t1</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">t0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">t1</span>\n</pre></div>",
        "id": 128979615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530555621
    },
    {
        "content": "<p>Maybe the <code>u</code> of <code>t0</code> is not the same <code>u</code> as in <code>t1</code>, although I would expect a different error message then</p>",
        "id": 128979630,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530555652
    },
    {
        "content": "<p>I was thinking maybe this would be required:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">t0</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">t1</span>\n</pre></div>",
        "id": 128979636,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530555655
    },
    {
        "content": "<p>But more generally, there is no reason for <code>t0</code> not to be in <code>Type 0</code></p>",
        "id": 128979662,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530555683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> thanks, this fixes it.</p>",
        "id": 128979673,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530555698
    },
    {
        "content": "<p>basically I'm still trying out the universes.</p>",
        "id": 128979685,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530555709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">t0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">t0</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">t0</span> <span class=\"bp\">→</span> <span class=\"n\">t1</span>\n</pre></div>",
        "id": 128979752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530555749
    },
    {
        "content": "<p>I learned this the hard way: when definitions are more universe polymorphic than strictly necessary, it gets really painful</p>",
        "id": 128979755,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530555756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> but this doesn't provide universe polymorphism.</p>",
        "id": 128979843,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530555847
    },
    {
        "content": "<p>Case in point: my current <code>traversable</code> pull request took me one year to set up. It was not all about universe polymorphism but it certainly made it difficult</p>",
        "id": 128979851,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530555871
    },
    {
        "content": "<p>and I kind of feel my first error in this stream, has something to do with it.</p>",
        "id": 128979855,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530555875
    },
    {
        "content": "<p>I'm not sure what universe polymorphism is good for when it comes to concrete programs</p>",
        "id": 128979859,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1530555876
    },
    {
        "content": "<p>universe is for consistency</p>",
        "id": 128979870,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530555895
    },
    {
        "content": "<p>I feel like everything I need to do lives in <code>Type</code>, for the most part</p>",
        "id": 128979871,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1530555897
    },
    {
        "content": "<p>and strengthening</p>",
        "id": 128979887,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530555913
    },
    {
        "content": "<p>I don't know what dependent types is good for when it comes to concrete programs, TBH.</p>",
        "id": 128979892,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530555921
    },
    {
        "content": "<p>and category theory</p>",
        "id": 128979895,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530555928
    },
    {
        "content": "<p>dtt is a bit of an academic stretch right now, true, but one day when there's an efficient method for program extraction, it might be awesome</p>",
        "id": 128979982,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1530556009
    },
    {
        "content": "<p>I think we can weaken <span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> 's suggestion and generalize it into: work in <code>Type 0</code> until you run into trouble. Then make the smallest necessary universe generalization</p>",
        "id": 128980001,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530556033
    },
    {
        "content": "<p>if you knew how terribly written most of the software that runs the electronics around us was, you'd be rooting for Lean too :)</p>",
        "id": 128980012,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1530556058
    },
    {
        "content": "<p>There are tools for lifting monomorphic definitions to using them in polymorphic contexts so <code>Type 0</code> is not handicapping</p>",
        "id": 128980019,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530556072
    },
    {
        "content": "<p>Amen</p>",
        "id": 128980075,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530556111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> I'm getting ready for the DeepSpec summer school where people like Adam Chlipala will show us how he uses dependent type theory for building reliable cryptographic implementation. It's hard to argue that it's really just academic</p>",
        "id": 128980109,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530556181
    },
    {
        "content": "<p>isn't anything chlipala does academic by definition ;]</p>",
        "id": 128980166,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1530556220
    },
    {
        "content": "<p>It depends. Is your definition of academic \"anything that happens in a university\"? In that case, is the university's janitor studying academic sweeping?</p>",
        "id": 128980218,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530556315
    },
    {
        "content": "<p>In the case of the DeepSpec project, academics are playing the role of leader but the project involves industrial partners so the point is not (only) publication but building systems that work Monday through Sunday</p>",
        "id": 128980322,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530556412
    },
    {
        "content": "<p>before it's getting too far, let me ask one last question:  can I define structure as universe polymorphic?</p>",
        "id": 128980388,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530556495
    },
    {
        "content": "<p>Yes it depend. how I get   f (x:α) because I need it to define next object</p>",
        "id": 128980390,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530556496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116065\">@Hoang Le Truong</span> I think you're in the wrong thread</p>",
        "id": 128980618,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530556774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118042\">@Zesen Qian</span> about your original error, it has to do with the difference between <code>Prop</code> and <code>Type</code> (or more generally <code>Type u</code>), which is rather different from the difference between <code>Type u</code> for varying <code>u</code></p>",
        "id": 128980679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530556829
    },
    {
        "content": "<p>You can generalize over both <code>Prop</code> and <code>Type</code> with <code>Sort</code>, but all the <code>Type u</code> for different <code>u</code> work pretty much the same way, while <code>Prop</code> has some different rules</p>",
        "id": 128980778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530556947
    },
    {
        "content": "<p>thanks, I will look into it.</p>",
        "id": 128982406,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530559077
    },
    {
        "content": "<p>yeah I give up. Here is the line causing this error:<br>\n<a href=\"https://github.com/riaqn/smtlean/blob/6e5c20aaa344e972528d8089af01f638819ff06c/src/cvc4.lean#L129\" target=\"_blank\" title=\"https://github.com/riaqn/smtlean/blob/6e5c20aaa344e972528d8089af01f638819ff06c/src/cvc4.lean#L129\">https://github.com/riaqn/smtlean/blob/6e5c20aaa344e972528d8089af01f638819ff06c/src/cvc4.lean#L129</a></p>",
        "id": 129029014,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530631306
    }
]