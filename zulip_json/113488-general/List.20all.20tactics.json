[
    {
        "content": "<p>Here is a baby attempt to list all known tactics:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">trace_decl_name</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">))</span>\n       <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">x</span><span class=\"o\">),</span><span class=\"n\">x</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n <span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_env</span><span class=\"o\">,</span>\n <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">unit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">)</span> <span class=\"n\">trace_decl_name</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">foo</span>\n</pre></div>\n\n\n<p>1. For me, this reliably causes Lean to crash.  <br>\n2. Before crashing, it does roughly the right thing, listing the names of many tactics.  However, it only prints things that have type <code>tactic unit</code>, whereas it should probably print things with types like <code>A → B → ... → X → (tactic Z)</code> or more general pi-types that eventually produce tactics.  Is there a standard predicate on <code>expr</code> to detect this?<br>\n3. Can I access the docstrings for tactics in this framework?<br>\n4. Is there anything else obviously wrong with this approach?</p>",
        "id": 159078820,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550764443
    },
    {
        "content": "<p>When you say \"crashes\", do you mean with a stack overflow, or another kind of crash?</p>",
        "id": 159081593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550766246
    },
    {
        "content": "<p>I mean that VS Code tells me \"Lean: Server has stopped with error code 3221225725\".  With an earlier version of <code>foo</code>, there was evidence that Lean had got stuck in an infinite loop, processing one element of the environment repeatedly; so that may have led to a stack overflow, but I did not see any explicit message to that effect.</p>",
        "id": 159083695,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550767547
    },
    {
        "content": "<p>Apparently 3221225725 = 0xc00000fd which is indeed <a href=\"https://www.google.com/search?q=0xC00000FD+site:stackoverflow.com\" target=\"_blank\" title=\"https://www.google.com/search?q=0xC00000FD+site:stackoverflow.com\">the code for a stack overflow</a>.</p>",
        "id": 159084720,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1550768253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span>  I've been working on something similar for the past few weeks. Maybe this can be of some help: <br>\n<a href=\"https://github.com/formalabstracts/formalabstracts/tree/master/src/tactic\" target=\"_blank\" title=\"https://github.com/formalabstracts/formalabstracts/tree/master/src/tactic\">https://github.com/formalabstracts/formalabstracts/tree/master/src/tactic</a></p>\n<p>For (4), you can use <code>doc_string</code> to retreive the docstring of an arbitrary declaration.</p>",
        "id": 159099657,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1550779191
    },
    {
        "content": "<p>Thanks, I'll have a look at that.</p>",
        "id": 159104140,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550783013
    },
    {
        "content": "<p>For (2), you probably want something like</p>\n<div class=\"codehilite\"><pre><span></span>namespace expr\nmeta def codomain {elab : bool} : expr elab → expr elab\n| (pi n bi a b) := codomain b\n| a             := a\nend expr\n</pre></div>\n\n\n<p>and then check whether <code>d.type.codomain.get_app_fn</code> is equal to <code>`(tactic)</code></p>",
        "id": 159184579,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1550864099
    },
    {
        "content": "<p>To address (1), this works for me:</p>\n<div class=\"codehilite\"><pre><span></span>meta def trace_decl_name (d : declaration) (l : list name) : list name :=\nif name.is_prefix_of `tactic.interactive d.to_name ∧ d.type.codomain.get_app_fn.const_name = `tactic\nthen l.cons d.to_name else l\n\nmeta def foo : tactic unit :=\n do env ← tactic.get_env,\n tactic.trace $ env.fold [] trace_decl_name\n\nrun_cmd foo\n</pre></div>",
        "id": 159185786,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1550865076
    }
]