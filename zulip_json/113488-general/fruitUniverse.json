[
    {
        "content": "<p>Hello,<br>\nin the below code, why is Π of type fruitUniverse, not, say, fruitType,<br>\nbecause it is a Proposition? What does the universe have to do<br>\nwith the proposition?</p>\n<p>Many thanks.</p>\n<p>Phiroc</p>\n<div class=\"codehilite\"><pre><span></span>universe fruitUniverse\nconstant fruitType : Type\nconstants ft1 ft2 : fruitType\n\n-- Prop = Statement\n-- apple and apple are equal atoms\n#check ft1 = ft2\n\nnamespace hidden\nconstant list : Type fruitUniverse → Type fruitUniverse\n-- variables l : list fruitType\nnamespace list\n    constant cons&#39; : Π fruitType : Type fruitUniverse, fruitType → list fruitType → list fruitType\n    constant nil&#39; : Π fruitType  : Type fruitUniverse, list fruitType\n    constant append&#39; : Π fruitType : Type fruitUniverse, list fruitType → list fruitType → list fruitType\nend list\nend hidden\n</pre></div>\n\n\n<p>lean</p>",
        "id": 193001637,
        "sender_full_name": "Phiroc",
        "timestamp": 1586156651
    },
    {
        "content": "<p>Please add \"lean\" after opening \"```\", then syntax highlighting will work.</p>",
        "id": 193001862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586156864
    },
    {
        "content": "<p>also I didn't understand the question</p>",
        "id": 193001875,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586156881
    },
    {
        "content": "<p>Note that <code>fruitType</code> in <code>Π fruitType ...</code> has nothing to do with <code>constant fruitType : Type</code></p>",
        "id": 193002151,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586157067
    },
    {
        "content": "<p>I'm trying to create a cons' function which I can later use to create a list of Fruits. The only way to make Lean validate the above code is to make Π fruitType of type fruitUniverse.</p>",
        "id": 193002200,
        "sender_full_name": "Phiroc",
        "timestamp": 1586157108
    },
    {
        "content": "<p>What is Π? A Prop?</p>",
        "id": 193002285,
        "sender_full_name": "Phiroc",
        "timestamp": 1586157150
    },
    {
        "content": "<p>If I understand Lean, to create a cons function, you need to create a Proposal, Π.</p>",
        "id": 193002382,
        "sender_full_name": "Phiroc",
        "timestamp": 1586157225
    },
    {
        "content": "<ol>\n<li><code>universe</code> is a way to deal with \"type of all types\"; most probably you don't need it.</li>\n<li><code>Π</code> is a <code>pi</code> type, not a proposition. E.g., <code>Π n : nat, {m : nat // n &lt; m}</code> means \"a function that takes a natural number <code>n</code> and returns another natural number <code>m</code> together with a proof of the fact <code>n &lt; m</code>.</li>\n<li><code>constant</code> is like an <code>axiom</code>, not a <code>variable</code>. When you declare <code>constant list</code>, it declares a type named <code>hidden.list</code> with no extra information about this type.</li>\n</ol>",
        "id": 193002953,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586157605
    },
    {
        "content": "<p>this isn’t C; there is no preamble</p>",
        "id": 193003007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586157653
    },
    {
        "content": "<p>y'all like tomatos very much even though it isn't a fruit fruit</p>",
        "id": 193015984,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586165365
    },
    {
        "content": "<p>i did my best to counteract the bias for tomatoes</p>",
        "id": 193016094,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586165432
    },
    {
        "content": "<p>Does the fruit universe also contain fruit Pies, or is it predicative?</p>",
        "id": 193017464,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586166317
    }
]