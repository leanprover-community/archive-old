[
    {
        "content": "<p>Is there a quick way to unfold something defined in a class? Let me be more specific. The product of metric spaces starts with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">metric_space_max</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"bp\">......</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Now, in a proof, I have <code>dist x y</code> where <code>x</code> and <code>y</code> are in a product metric space, and I would like to unfold it to <code>max (dist x.1 y.1) (dist x.2 y.2)</code>. <br>\nI can <code>change</code> it, or use <code>show</code>, or prove a lemma giving the formula for the distance (with <code>rfl</code>) and then unfold this lemma. But I am wondering if I am missing something and if there is something I can just unfold, like <code>prod.metric_space_max._secret_access_to_dist_</code> or something like that.</p>",
        "id": 146965379,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1541604162
    },
    {
        "content": "<p>I don't think so. you can unfold <code>prod.metric_space_max</code>, and then call <code>dsimp</code> to unfold the projection. But this will not work in general. The best thing to do is to add the lemma as a <code>simp</code>-rule (which we should have anyway)</p>",
        "id": 146967395,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541605865
    },
    {
        "content": "<p>Does <code>simp [dist]</code> not work? Or do you want to unfold only this specific <code>dist</code>?</p>",
        "id": 146968934,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541607238
    },
    {
        "content": "<p>No, simp does not work here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>fails with</p>\n<div class=\"codehilite\"><pre><span></span>simplify tactic failed to simplify\n</pre></div>\n\n\n<p>I have proved the lemma using <code>rfl</code>, and then used it explicitly later. This seems to be the canonical way to proceed. By the way, this is not the kind of thing I would want to unfold all the time, so I don't think it is a good simp lemma (but it is definitely useful to have it in explicit form like this)</p>",
        "id": 146969406,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1541607646
    },
    {
        "content": "<p>You have to pass the projection explicitly: <code>simp [dist]</code></p>",
        "id": 146969573,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541607797
    },
    {
        "content": "<p>Sorry, I should learn to read. Yes, <code>simp [dist]</code> works. Can you explain why?</p>",
        "id": 146969749,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1541607927
    },
    {
        "content": "<p><code>simp</code> accepts not just rewrite lemmas but also function and projection names, which tell it to unfold usages of them</p>",
        "id": 146969913,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541608073
    },
    {
        "content": "<p>OK, thanks (and this is very useful, I don't know why I never noticed this)</p>",
        "id": 146970400,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1541608450
    },
    {
        "content": "<p>Oh nice trick Sebastian! I thought that the philosophy was to always prove these lemmas and give them names. Wait -- maybe that is the philosophy anyway.</p>",
        "id": 146970867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541608894
    },
    {
        "content": "<p>I also didn't know this. This is very useful!</p>",
        "id": 146971122,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541609118
    }
]