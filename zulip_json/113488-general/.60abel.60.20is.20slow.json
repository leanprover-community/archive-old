[
    {
        "content": "<p>Hi, it seems that <code>abel</code> spends 3s on the following goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">abel</span>\n</pre></div>\n\n\n<p><code>lean --profile</code> says that it spends most of the time in <code>tactic.mk_instance</code>. I wonder what instances does it try to make.</p>",
        "id": 184338159,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577473862
    },
    {
        "content": "<p>It works <em>much</em> faster if I reformulate the goal as an equality.</p>",
        "id": 184338257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577474033
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">abel</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">abel</span>\n</pre></div>\n\n\n<p>gives me</p>\n<div class=\"codehilite\"><pre><span></span>elaboration: tactic compilation took 1.82ms\nscratch.lean:9:3: information tactic profile data\nelaboration: tactic execution took 216ms\nnum. allocated objects:  863\nnum. allocated closures: 266\n  216ms   100.0%   _interaction._lambda_2\n  216ms   100.0%   interaction_monad_orelse\n  216ms   100.0%   tactic.istep\n  216ms   100.0%   scope_trace\n  216ms   100.0%   tactic.alternative._lambda_3\n  216ms   100.0%   tactic.abel.normalize\n  216ms   100.0%   tactic.replace_at._lambda_4\n  216ms   100.0%   tactic.ext_simplify_core\n  216ms   100.0%   tactic.replace_at\n  216ms   100.0%   tactic.interactive.abel._lambda_3\n  216ms   100.0%   tactic.step\n  216ms   100.0%   tactic.istep._lambda_1\n  216ms   100.0%   tactic.abel.normalize._lambda_6\n  214ms    99.1%   tactic.abel.normalize._lambda_4\n  115ms    53.2%   tactic.abel.mk_cache\n   99ms    45.8%   tactic.trans_conv._lambda_3\n   95ms    44.0%   tactic.mk_instance\n   80ms    37.0%   tactic.abel.eval\n   80ms    37.0%   tactic.abel.eval&#39;\n   47ms    21.8%   tactic.mk_app\n   42ms    19.4%   tactic.mk_mapp\n   19ms     8.8%   tactic.trans_conv._lambda_1\n   19ms     8.8%   tactic.simplify\n   18ms     8.3%   tactic.abel.cache.mk_app\n    8ms     3.7%   tactic.norm_num\n    7ms     3.2%   tactic.abel.eval_neg\n    6ms     2.8%   tactic.abel.eval_add\n    4ms     1.9%   expr.of_nat._lambda_1\n    4ms     1.9%   tactic.abel.eval_atom\n    4ms     1.9%   expr.of_int\n    1ms     0.5%   tactic.abel.cache.iapp\n    1ms     0.5%   expr.const\n    1ms     0.5%   tactic.mk_eq_trans\n    1ms     0.5%   tactic.abel.eval_add._main._lambda_1\n    1ms     0.5%   tactic.abel.normal_expr.term&#39;\n    1ms     0.5%   tactic.abel.cache.mk_term\n    1ms     0.5%   tactic.abel.cache.app\n</pre></div>\n\n\n<p>216ms. Is my machine really 15x as good as yours? Ubuntu 18, 16 gigs of ram, i7-4790K CPU @ 4.00GHz, 8 cores. <code>tactic.mk_instance</code> does not seem to feature much at all.</p>",
        "id": 184348591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577487661
    },
    {
        "content": "<p>Have you got different imports?</p>",
        "id": 184348678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577487785
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n</pre></div>",
        "id": 184354139,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577498165
    },
    {
        "content": "<p>ooh---<code>abel</code> is slow!</p>",
        "id": 184370239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577530456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>elaboration: tactic execution took 3.65s\nnum. allocated objects:  923\nnum. allocated closures: 300\n 3648ms   100.0%   tactic.interactive.abel._lambda_3\n 3648ms   100.0%   tactic.istep\n 3648ms   100.0%   scope_trace\n 3648ms   100.0%   interaction_monad_orelse\n 3648ms   100.0%   tactic.istep._lambda_1\n 3648ms   100.0%   tactic.step\n 3648ms   100.0%   _interaction._lambda_2\n 3647ms   100.0%   tactic.alternative._lambda_3\n 3647ms   100.0%   tactic.replace_at\n 3647ms   100.0%   tactic.replace_at._lambda_4\n 3646ms    99.9%   tactic.ext_simplify_core\n 3646ms    99.9%   tactic.abel.normalize\n 3646ms    99.9%   tactic.abel.normalize._lambda_6\n 3642ms    99.8%   tactic.abel.normalize._lambda_4\n 3236ms    88.7%   tactic.abel.mk_cache\n 3143ms    86.2%   tactic.mk_instance\n  406ms    11.1%   tactic.trans_conv._lambda_3\n  374ms    10.3%   tactic.abel.eval&#39;\n  374ms    10.3%   tactic.abel.eval\n  233ms     6.4%   tactic.mk_app\n  181ms     5.0%   tactic.mk_mapp\n   78ms     2.1%   tactic.abel.cache.mk_app\n   46ms     1.3%   tactic.norm_num\n   38ms     1.0%   tactic.abel.eval_add\n   36ms     1.0%   tactic.abel.eval_neg\n   32ms     0.9%   tactic.trans_conv._lambda_1\n   32ms     0.9%   tactic.simplify\n   17ms     0.5%   expr.of_int\n   17ms     0.5%   tactic.abel.eval_atom\n   17ms     0.5%   expr.of_nat._lambda_1\n    5ms     0.1%   tactic.infer_type\n    1ms     0.0%   tactic.try_core\n    1ms     0.0%   string.push\n    1ms     0.0%   relation_tactic\n    1ms     0.0%   tactic.replace_target\n    1ms     0.0%   tactic.mk_eq_mpr\n    1ms     0.0%   tactic.unify\n    1ms     0.0%   tactic.try\n    1ms     0.0%   _private.1416197847.relation_tactic._lambda_1\n    1ms     0.0%   tactic.apply_core\n</pre></div>",
        "id": 184370243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577530468
    },
    {
        "content": "<p>I tried to look at <code>set_option trace.class_instances true</code> output, and it takes wrong routes to very high-order classes before figuring out <code>has_add</code> from <code>add_comm_group</code>.</p>",
        "id": 184370305,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577530595
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">abel</span> <span class=\"c1\">-- necessary</span>\n\n<span class=\"c1\">-- if the 5 imports below are commented out, then the `abel` below compiles for me in around 0.25 seconds</span>\n<span class=\"c1\">-- With set_option trace.class_instances true, debugging output is 21298 lines</span>\n\n<span class=\"c1\">-- now try uncommenting these imports, from top to bottom (some later ones import earlier ones)</span>\n\n<span class=\"c1\">--import algebra.pi_instances -- adds approx 0.9 seconds more (47105 lines of debugging output)</span>\n<span class=\"c1\">--import ring_theory.ideals -- adds approx 0.3 seconds more (53378 lines)</span>\n<span class=\"c1\">--import algebra.euclidean_domain -- adds approx 0.2 seconds more (59692 lines)</span>\n<span class=\"c1\">--import data.complex.basic -- adds approx 0.2 seconds more (89214 lines)</span>\n<span class=\"c1\">--import analysis.normed_space.basic -- adds approx 0.7 seconds more (120699 lines)</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"c1\">--set_option trace.class_instances true</span>\n<span class=\"c1\">--set_option profiler true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">abel</span>\n</pre></div>",
        "id": 184379742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577547603
    }
]