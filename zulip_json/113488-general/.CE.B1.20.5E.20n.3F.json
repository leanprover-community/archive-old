[
    {
        "content": "<p>What do you think about the following instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>With this instance we can write, e.g., <code>real ^ n</code></p>",
        "id": 270058644,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643645923
    },
    {
        "content": "<p>We have this in LTE. I like it.</p>",
        "id": 270058964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643646048
    },
    {
        "content": "<p>Do you have some theory around it (e.g., <code>α ^ (m + n) ≃ α ^ m × α ^ n</code>)?</p>",
        "id": 270059364,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643646197
    },
    {
        "content": "<p>Nope, not really. It's mostly just for nice notation</p>",
        "id": 270062512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643647308
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/hacks_and_tricks/type_pow.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/hacks_and_tricks/type_pow.lean</a></p>",
        "id": 270062955,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643647447
    },
    {
        "content": "<p>I think that we should make it a global instance in mathlib. What do you think?</p>",
        "id": 270064214,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643647932
    },
    {
        "content": "<p>/poll Should we make <code>type_pow</code> an instance in <code>mathlib</code>?<br>\nYes<br>\nNo</p>",
        "id": 270064257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643647951
    },
    {
        "content": "<p>If this doesn't create any issue then we should clearly have it.</p>",
        "id": 270065952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643648511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/.CE.B1.20.5E.20n.3F/near/270059364\">said</a>:</p>\n<blockquote>\n<p>Do you have some theory around it (e.g., <code>α ^ (m + n) ≃ α ^ m × α ^ n</code>)?</p>\n</blockquote>\n<p>You can at least prove it using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_sum_fin_equiv\">docs#fin_sum_fin_equiv</a></p>",
        "id": 270066809,
        "sender_full_name": "David Wärn",
        "timestamp": 1643648811
    },
    {
        "content": "<p>Reid proposed a similar type some time ago: <a href=\"https://github.com/leanprover-community/mathlib/pull/4406\">#4406</a>  I can only reiterate what I said there:</p>\n<blockquote>\n<p>If we introduce a finvec type, then the existing usage of fin n → α should be migrated. Otherwise we just have yet another container type.</p>\n</blockquote>",
        "id": 270072511,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643650876
    },
    {
        "content": "<p>In this case I care about notation more than about a type.</p>",
        "id": 270072826,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643650977
    },
    {
        "content": "<p>As for whether it should get notation (instead of say <code>vector α n</code>).  I don't really care, though <code>ℝ^n</code> certainly looks nice.</p>\n<p>But if it gets the <code>has_pow</code> instance, then it should definitely not be in a locale.  This is the same issue as with <code>setoid α</code> in quotients.</p>",
        "id": 270073715,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643651286
    },
    {
        "content": "<p>What are the odds that instead defining it as a notation in a locale would work?</p>",
        "id": 270075370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643651893
    },
    {
        "content": "<p>How do you deal with the fact that <code>ℝ^n</code> won't have the metric that many might assume it would?</p>",
        "id": 270078562,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643653015
    },
    {
        "content": "<p>It is certainly equivalent to the one you assume. <span aria-label=\"smug\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smug\">:smug:</span></p>",
        "id": 270081418,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643654118
    },
    {
        "content": "<p>But yeah, it's surprising that it doesn't have an inner product.</p>",
        "id": 270081617,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643654183
    },
    {
        "content": "<p>Sorry, I misstated, sup-norm vs L2-norm, the reason we have the <code>euclidean_space</code> type synonym.</p>",
        "id": 270087531,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643656217
    },
    {
        "content": "<p>We can have a <code>has_pow</code> and use it instead of <code>euclidean_space</code>.</p>",
        "id": 270087692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643656278
    },
    {
        "content": "<p>Of course, we should migrate most uses of <code>fin n → α</code> to the new notation.</p>",
        "id": 270087789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643656319
    },
    {
        "content": "<p>But in this case <code>fin n → α</code> and <code>α ^ n</code> with have different <code>dist</code>s.</p>",
        "id": 270087995,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643656389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/.CE.B1.20.5E.20n.3F/near/270072511\">said</a>:</p>\n<blockquote>\n<p>Reid proposed a similar type some time ago: <a href=\"https://github.com/leanprover-community/mathlib/pull/4406\">#4406</a>  I can only reiterate what I said there:</p>\n<blockquote>\n<p>If we introduce a finvec type, then the existing usage of fin n → α should be migrated. Otherwise we just have yet another container type.</p>\n</blockquote>\n</blockquote>\n<p>I agree that <code>fin n → α</code> should be migrated to the new type (if we introduce <code>has_pow</code>) but I think that we should first introduce <code>has_pow</code>, then gradually migrate uses of <code>fin n → α</code>.</p>",
        "id": 270089512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643656956
    },
    {
        "content": "<p>I guess the advantage of notation (if it works) is that there is no real pressure to standardize on <code>fin n → α</code> vs <code>α ^ n</code>.</p>",
        "id": 270089597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643656998
    },
    {
        "content": "<p>BTW I used <code>α ^ n</code> as notation in lean-omin for a while but I don't seem to be using it any more. Not sure why exactly--I know this isn't very helpful.</p>",
        "id": 270089765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643657058
    },
    {
        "content": "<p>With \"notation without an instance\" we can't use <code>pi_Lp 2</code> metric space and inner space instances on <code>α ^ n</code>.</p>",
        "id": 270089934,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643657126
    },
    {
        "content": "<p>Oh I see. But there would also be a large number of instance that would need to be copied to <code>α ^ n</code> otherwise--to pick one at random, <code>fintype</code>.</p>",
        "id": 270091761,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643657821
    },
    {
        "content": "<p>I suggest that we use <code>ℝ^n</code> as a new name for <code>euclidean_space</code> and copy whatever API needs to be copied.</p>",
        "id": 270498372,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643861641
    },
    {
        "content": "<p>We don't use this notation when we want the sup norm (e.g., in the <code>matrix</code> code).</p>",
        "id": 270498428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643861666
    },
    {
        "content": "<p>Anyway, I won't have time to actually work on this before the ITP deadline.</p>",
        "id": 270498476,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643861743
    }
]