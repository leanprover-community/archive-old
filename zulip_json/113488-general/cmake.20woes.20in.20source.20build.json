[
    {
        "content": "<p>Hello!<br>\nI am trying to build a binary distribution of lean from source so that I can call Lean from the Julia programming language.<br>\nI am just trying to set this up inside a sandbox linux environment which has GMP 5 and GCC 5, but I keep getting this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span> <span class=\"mi\">98</span><span class=\"err\">%</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">C</span> <span class=\"n\">executable</span> <span class=\"n\">c_name_test</span>\n<span class=\"n\">cd</span> <span class=\"bp\">/</span><span class=\"n\">workspace</span><span class=\"bp\">/</span><span class=\"n\">srcdir</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">tests</span><span class=\"bp\">/</span><span class=\"n\">shared</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">cmake</span> <span class=\"bp\">-</span><span class=\"n\">E</span> <span class=\"n\">cmake_link_script</span> <span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">c_name_test</span><span class=\"bp\">.</span><span class=\"n\">dir</span><span class=\"bp\">/</span><span class=\"n\">link</span><span class=\"bp\">.</span><span class=\"n\">txt</span> <span class=\"c1\">--verbose=false</span>\n<span class=\"bp\">/</span><span class=\"n\">opt</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">gcc</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/../../../../</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">libstdc</span><span class=\"bp\">++.</span><span class=\"n\">so</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">needed</span> <span class=\"k\">by</span> <span class=\"bp\">../../</span><span class=\"n\">libleanshared</span><span class=\"bp\">.</span><span class=\"n\">so</span><span class=\"o\">,</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"kn\">using</span> <span class=\"bp\">-</span><span class=\"n\">rpath</span> <span class=\"n\">or</span> <span class=\"bp\">-</span><span class=\"n\">rpath</span><span class=\"bp\">-</span><span class=\"n\">link</span><span class=\"o\">)</span>\n<span class=\"bp\">../../</span><span class=\"n\">libleanshared</span><span class=\"bp\">.</span><span class=\"n\">so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">typeinfo</span> <span class=\"n\">for</span> <span class=\"n\">std</span><span class=\"bp\">::</span><span class=\"n\">invalid_argument</span><span class=\"bp\">@</span><span class=\"n\">GLIBCXX_3</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"err\">&#39;</span>\n<span class=\"bp\">../../</span><span class=\"n\">libleanshared</span><span class=\"bp\">.</span><span class=\"n\">so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">VTT</span> <span class=\"n\">for</span> <span class=\"n\">std</span><span class=\"bp\">::__</span><span class=\"n\">cxx11</span><span class=\"bp\">::</span><span class=\"n\">basic_stringstream</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"bp\">::</span><span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"bp\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;@</span><span class=\"n\">GLIBCXX_3</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">21</span><span class=\"err\">&#39;</span>\n</code></pre></div>\n\n\n<p>Any ideas how I can solve this?</p>",
        "id": 199223547,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590794354
    },
    {
        "content": "<p>TLDR: <code>libstdc++.so.6 not found</code>, at 98% of the compilation :(((</p>",
        "id": 199223708,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590794493
    },
    {
        "content": "<p>Which version of lean are you trying to make?</p>",
        "id": 199224004,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590794763
    },
    {
        "content": "<p>version 3.15.0 of the leanprover-community</p>",
        "id": 199225149,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590795736
    },
    {
        "content": "<p>From the pathnames it looks like you have some kind of custom setup that we won't guess.</p>",
        "id": 199225338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590795894
    },
    {
        "content": "<p>I mean most Linux users probably have <code>g++</code> installed at <code>/usr/bin/g++</code> and not under <code>/opt</code>.</p>",
        "id": 199225369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590795925
    },
    {
        "content": "<p>I guess maybe that's what \"sandbox\" means.</p>",
        "id": 199225501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590796041
    },
    {
        "content": "<p>Anyways, I think your g++ installation is just broken.</p>",
        "id": 199225504,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590796047
    },
    {
        "content": "<p>Don't know what you mean by broken, but myself and others have used this succesfully to build many projects.</p>",
        "id": 199226177,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590796588
    },
    {
        "content": "<p>Could be it's not linked to properly, sure.</p>",
        "id": 199226193,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590796607
    },
    {
        "content": "<p>In any case, it doesn't look like a Lean-related error</p>",
        "id": 199226244,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590796679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span> can you try <code>ldd ../../libleanshared.so</code> ?</p>",
        "id": 199226347,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796752
    },
    {
        "content": "<p>or wherever is the libleanshared</p>",
        "id": 199226356,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796761
    },
    {
        "content": "<p>and post the output</p>",
        "id": 199226359,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796764
    },
    {
        "content": "<p>ah, at linktime, I guess it's not working</p>",
        "id": 199226379,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796778
    },
    {
        "content": "<p>are you even sure you have libstdc++6 ?</p>",
        "id": 199226427,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796802
    },
    {
        "content": "<p>yup, lemme try. the <code>libleanshared.so</code> is produces after a <code>make</code>,  and even a <code>make bin_lean</code>, but lemme see.</p>",
        "id": 199226457,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590796805
    },
    {
        "content": "<p>like if you do <code>ldd</code> on some C++-linked executable, can you see it being linked to libstdc++ ?</p>",
        "id": 199226498,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796827
    },
    {
        "content": "<p>honestly, though, if I were you and wanted to build a very specific version of Lean in a sandbox</p>",
        "id": 199226578,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796896
    },
    {
        "content": "<p>I'd just use Nix or Guile for this usecase</p>",
        "id": 199226588,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796903
    },
    {
        "content": "<p>and reuse Nix's derivations for example</p>",
        "id": 199226594,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796908
    },
    {
        "content": "<p><a href=\"https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/science/logic/lean/default.nix\">https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/science/logic/lean/default.nix</a></p>",
        "id": 199226677,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590796959
    },
    {
        "content": "<p>It's a specific sandbox that users can then build on Windows/Mac/Linux within Julia.</p>",
        "id": 199226684,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590796972
    },
    {
        "content": "<p>I don't understand, do you do cross compilation to arbitrary arch/ABI targets?</p>",
        "id": 199226724,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797018
    },
    {
        "content": "<p>I guess what you're doing is creating a xxx.jl to wrap Lean's shared lib in Julia, right?</p>",
        "id": 199226778,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797051
    },
    {
        "content": "<p>So you just want some derivation which spits jl + so, Nix/Guile seems to be perfect for this use-case</p>",
        "id": 199226787,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797071
    },
    {
        "content": "<p>It's also a build sandbox, using cgroups &amp; stuff</p>",
        "id": 199226828,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797104
    },
    {
        "content": "<p>Anyway, we can try to debug your issue, but in the end, like <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> want to say more or less, it's infinitely easier to reuse \"known working environments\"</p>",
        "id": 199226868,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797156
    },
    {
        "content": "<p>Yes, the idea is to do cross compilation to arbitrary targets.<br>\nYes, I want to later build a Lean.jl to wrap Leans shared lib in Julia.<br>\nI want to use this particular workflow (BinaryBuilder.jl) because if users do <code>using Lean</code> within a Julia script it auto downloads and build Lean and puts everyting into the appropriate place.<br>\nAnd this only needs to be done once for the entire Julia ecosystem.</p>",
        "id": 199226922,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590797186
    },
    {
        "content": "<p>it needs to be done each time you want to change the Lean version AFAIK</p>",
        "id": 199226927,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797204
    },
    {
        "content": "<p>That's fine - other tarballs can be fixed up for subsequent versions.</p>",
        "id": 199226936,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590797228
    },
    {
        "content": "<p>except if you automated some script, then makes sense</p>",
        "id": 199226937,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797228
    },
    {
        "content": "<p>Yes, an automated script gets produced from this too which can later get tweaked.</p>",
        "id": 199226944,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590797254
    },
    {
        "content": "<p>I will try to just build the <code>bin_lean</code> and see what goes from there.</p>",
        "id": 199227033,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590797345
    },
    {
        "content": "<p>Anyway, we need information on the set of libstdc++ libs you have currently, their path and more logs</p>",
        "id": 199227042,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797358
    },
    {
        "content": "<p><code>ldd</code> can give you most of this stuff, then we can try to see why CMake/GCC don't find what you want</p>",
        "id": 199227053,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797375
    },
    {
        "content": "<p>The culprit might be also that you don't have this lib at all</p>",
        "id": 199227160,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797498
    },
    {
        "content": "<p>So you need to look for it</p>",
        "id": 199227162,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590797502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> managed a workaround - you can enjoy it being built for like 12 archs here <a href=\"https://dev.azure.com/JuliaPackaging/Yggdrasil/_build/results?buildId=3914&amp;view=results\">https://dev.azure.com/JuliaPackaging/Yggdrasil/_build/results?buildId=3914&amp;view=results</a></p>",
        "id": 199231454,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590802961
    },
    {
        "content": "<p>What was the workaround?</p>",
        "id": 199232494,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590804396
    },
    {
        "content": "<p>copying the <code>make bin_lean</code> executable into a proper directory.</p>",
        "id": 199232968,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590805051
    },
    {
        "content": "<p>and then it worked. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 199232973,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590805061
    },
    {
        "content": "<p>OK, I have my executable made.<br>\nIf I have a file that has a simple Lean example, how can I run that from the comandline?<br>\nie, I have </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n\n\n<p>In a <code>hello_world.txt</code><br>\nAnd I want to run <br>\n<code>lean hello_world.txt</code> but it currently says</p>\n<p><code>/home/mrg/lean.txt:2:3: error: simplify tactic failed to simplify</code><br>\n(I ripped the example of the web live demo, so I might be missing some imports)</p>",
        "id": 199288072,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590895907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> we are this <em>so</em> close to having Julia -&gt; Lean interop</p>",
        "id": 199288112,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590895958
    },
    {
        "content": "<p>The old web demo uses an older version of Lean where <code>nat.add_comm</code> is a simp-lemma.</p>\n<p>So simply change <code>by simp</code> to <code>by simp [nat.add_comm]</code>.</p>",
        "id": 199288120,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590895985
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/lean-web-editor\">#webeditor</a> for the more up-to-date community web editor.</p>",
        "id": 199288123,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590896037
    },
    {
        "content": "<p>Note that if <code>lean hello_world.txt</code> succeeds, Lean won't return any output.</p>",
        "id": 199288190,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590896135
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> ! It works! Muahahaha!</p>",
        "id": 199288237,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590896222
    },
    {
        "content": "<p>Ok wait - is there way to not feed a file to <code>lean foo.txt</code>, but rather a string ?</p>",
        "id": 199288346,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590896511
    },
    {
        "content": "<p>There's the server mode, which <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> explained <a href=\"#narrow/stream/113488-general/topic/Examples.20of.20communicating.20with.20Lean/near/199253728\">here</a>.</p>",
        "id": 199288435,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590896649
    },
    {
        "content": "<p>Awesome!<br>\nAnd what is <code>leanchecker</code> for?</p>",
        "id": 199288568,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590896993
    },
    {
        "content": "<p>I think it is an \"external\" typechecker that reuses the lean kernel</p>",
        "id": 199288616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590897090
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/export_format.md\">https://github.com/leanprover-community/lean/blob/master/doc/export_format.md</a></p>",
        "id": 199288796,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590897420
    },
    {
        "content": "<p>Oh, wow, I missed that because I don't know how to Zulip. Thanks a lot <span class=\"user-mention\" data-user-id=\"269735\">@Brian Jiang</span> !</p>",
        "id": 199290226,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590900171
    }
]