[
    {
        "content": "<p>I made a slight generalization to <a href=\"https://github.com/leanprover-community/mathlib/issues/6820\">#6820</a> by assuming a slightly weaker condition on existence of (co)limits (this is so that we can define so-called \"local\" Kan extensions, as opposed to only global ones). </p>\n<p>But there seem to be two places where typeclass inference doesn't work as expected. These are lines 195-197 and 217 in the following file:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/AT_kan_ext/src/category_theory/limits/kan_extension.lean\">https://github.com/leanprover-community/mathlib/blob/AT_kan_ext/src/category_theory/limits/kan_extension.lean</a></p>\n<p>It's mostly an annoyance, but if anyone has any ideas on how to get these typeclasses to fire, that would be helpful.</p>\n<p>Pinging: <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> , since you've reviewed this PR :)</p>",
        "id": 232526996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617157691
    },
    {
        "content": "<p>Somehow, the  issue is only for <code>Lan</code> (which deals with colimits), whereas the case of <code>Ran</code> (which deals with limits) has no issues.</p>",
        "id": 232527033,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617157734
    },
    {
        "content": "<p>I'm not surprised it can't find the instances, because you've hidden things behind <code>let</code> (using <code>change</code>).</p>",
        "id": 232537954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617167843
    },
    {
        "content": "<p>There's also the question of why you can't directly <code>erw</code> (as you do for <code>Ran</code>), without any <code>let</code> or <code>change</code>. I can't yet see what's going on, but I suspect it is some defeq abuse of either functor associativity, or costructured_arrow.map's 2-functoriality.</p>",
        "id": 232538237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617168097
    },
    {
        "content": "<p>e.g. the fact you need a type annotation on line 179 is a bit of a warning flag. The fact you need a type annotation here is going to mean that sources and targets are not matching up (syntactically, even though they will defeq match), and this will break <code>rw</code> later. So perhaps we can work out an explicit isomorphism we can insert on line 179 instead of the type annotation?</p>",
        "id": 232538362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617168211
    },
    {
        "content": "<p>Oh, maybe that type annotation is harmless. It is just coping with the fact that the <code>S</code> argument for <code>costructured_arrow.map</code> is implicit. That itself seems like a bad idea!</p>",
        "id": 232538606,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617168434
    },
    {
        "content": "<p>I would be typechecking by hand the right hand side:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">colimit.ι</span> <span class=\"o\">(</span><span class=\"n\">costructured_arrow.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⋙</span> <span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"bp\">≫</span> <span class=\"n\">colimit.pre</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">costructured_arrow.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">colimit.pre</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">costructured_arrow.map</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and seeing what has gone wrong there.</p>",
        "id": 232538718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617168562
    },
    {
        "content": "<p>(Something is wrong, because <code>erw [colimit.ι_pre_assoc], </code> should work but doesn't...)</p>",
        "id": 232538735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617168586
    },
    {
        "content": "<p>Okay, I understand what's happening now.<br>\nIt's not an issue about the <code>let ...</code> in the proofs, but rather it's that these proofs \"abuse\" the fact that <code>costructured_arrow.map f  ⋙  diagram ι F x</code> has the form <code>diagram ι F y</code> in the case where <code>f : y ⟶ x</code>. </p>\n<p>I don't know how to work around this. I could add the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_colimit_diagram_map</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">⟶</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_colimit</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_colimit</span> <span class=\"o\">((</span><span class=\"n\">costructured_arrow.map</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">costructured_arrow</span> <span class=\"n\">ι</span> <span class=\"n\">_</span> <span class=\"bp\">⥤</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">⋙</span> <span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">has_colimit</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_colimit_diagram_map_comp</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">⟶</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">has_colimit</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">z</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_colimit</span>\n  <span class=\"o\">((</span><span class=\"n\">costructured_arrow.map</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">costructured_arrow</span> <span class=\"n\">ι</span> <span class=\"n\">_</span> <span class=\"bp\">⥤</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">⋙</span>\n  <span class=\"n\">costructured_arrow.map</span> <span class=\"n\">f</span> <span class=\"bp\">⋙</span> <span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">has_colimit</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_colimit_diagram_map_comp'</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">⟶</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">has_colimit</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">z</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_colimit</span>\n  <span class=\"o\">(((</span><span class=\"n\">costructured_arrow.map</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">costructured_arrow</span> <span class=\"n\">ι</span> <span class=\"n\">_</span> <span class=\"bp\">⥤</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">⋙</span>\n  <span class=\"n\">costructured_arrow.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⋙</span> <span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">has_colimit</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span>\n  <span class=\"n\">has_colimit_diagram_map</span> <span class=\"n\">has_colimit_diagram_map_comp</span> <span class=\"n\">has_colimit_diagram_map_comp'</span>\n</code></pre></div>\n<p>but this doesn't seem any better than just using <code>haveI</code> in the proofs themselves.</p>",
        "id": 232643422,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617216049
    }
]