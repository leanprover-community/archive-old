[
    {
        "content": "<p>Am I a bad person for just writing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"err\">∈</span><span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 126697277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526563667
    },
    {
        "content": "<p>You will probably get into problems with simp, because typically ∈ is <code>has_mem.mem</code>, and simp matches the top-most function symbol by name.</p>",
        "id": 126697417,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526563861
    },
    {
        "content": "<p>Oh, good point... as it happens, I haven't used <code>simp</code> in what I'm writing currently</p>",
        "id": 126697489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526563974
    },
    {
        "content": "<p>You could of course write</p>\n<div class=\"codehilite\"><pre><span></span>local notation x `∈` y := x ∈ (y : set _)\n</pre></div>\n\n\n<p>... :)</p>",
        "id": 126697654,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1526564215
    },
    {
        "content": "<p>Hmm, I though <code>out_param</code> was something like functional dependencies, but Lean didn't infer the type of <code>i</code> from the type of <code>I'</code> in the expression <code>⋂ i ∈ I', i.2.2</code></p>",
        "id": 126697667,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526564229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This doesn't fix the type of the set, unfortunately.  For example you still can't write <code>a ∉ ∅</code>.</p>",
        "id": 126697686,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526564275
    },
    {
        "content": "<p>oh, but <code>⋂ i ∈ I', (i : _).2.2</code> fixed it!<br>\nDo I get a prize?</p>",
        "id": 126697811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526564417
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">typeof</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"err\">∈</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">typeof</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 126697812,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526564418
    },
    {
        "content": "<p>There should be achievements for using things like <code>i : _</code>, <code>by exact ...</code>, etc.</p>",
        "id": 126697828,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526564459
    }
]