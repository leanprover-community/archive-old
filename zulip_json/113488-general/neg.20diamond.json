[
    {
        "content": "<p>I think I just encountered a diamond:<br>\n<code>real.linear_ordered_field.to_linear_ordered_ring.to_ordered_ring.to_ordered_add_comm_group.to_add_comm_group.to_add_group.to_sub_neg_monoid.to_has_neg</code> vs <code>real.has_neg</code><br>\nI don't really know how to diagnose that further, but <code>refl</code> failed on <code>abs a = abs a</code>. I'm trying to write a MWE.</p>",
        "id": 252591228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631177057
    },
    {
        "content": "<p>i think this may be related to <a href=\"https://github.com/leanprover-community/lean/issues/609\">leanprover-community/lean#609</a></p>",
        "id": 252592042,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631177499
    },
    {
        "content": "<p>lean just needs a release to catch up with this (would be nice if <a href=\"https://github.com/leanprover-community/lean/issues/612\">leanprover-community/lean#612</a> was in there too :])</p>",
        "id": 252592156,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631177549
    },
    {
        "content": "<p>Ah yes, probably!</p>",
        "id": 252592265,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631177617
    },
    {
        "content": "<p>I don't understand why <a href=\"https://github.com/leanprover-community/lean/issues/609\">lean#609</a> is relevant here.</p>",
        "id": 252715081,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631232975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Did you try <code>convert</code> or <code>congr</code> to see what instances are not defeq?</p>",
        "id": 252715134,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631233033
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/609\">lean#609</a> makes it possible to have definitional equality between two different <code>has_sup.sup</code>s (one from a <code>linear_order</code>, one from somewhere else).</p>",
        "id": 252715253,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631233117
    },
    {
        "content": "<p>It's because I had two <code>abs</code> that weren't defeq, which is exactly what <a href=\"https://github.com/leanprover-community/lean/issues/609\">lean#609</a> is about. One of them was inferred from <code>linear_ordered_ring ℤ</code>, the other one (partly) from <code>has_neg ℤ</code>.</p>",
        "id": 252747100,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631260611
    },
    {
        "content": "<p>You should <code>unfold abs</code> once you hit that point, then apply <code>congr</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/abs\">docs#abs</a>)</p>",
        "id": 252749147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631261756
    },
    {
        "content": "<p>Then you'll probably be told that the <code>has_neg</code> is irrelevant and it's the <code>has_sup</code> that is the problem</p>",
        "id": 252749213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631261775
    },
    {
        "content": "<p>Yeah, probably</p>",
        "id": 252749327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631261872
    },
    {
        "content": "<p>Indeed, <code>abs</code> switched from <code>max</code> to <code>has_sup</code> some time ago. I missed this fact.</p>",
        "id": 252887507,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631342196
    },
    {
        "content": "<p>So, indeed this is a <code>lattice</code> diamond that we can solve once we have a Lean release with <a href=\"https://github.com/leanprover-community/lean/issues/609\">lean#609</a></p>",
        "id": 252887549,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631342243
    },
    {
        "content": "<p>Quite recently: <a href=\"https://github.com/leanprover-community/mathlib/commit/74373b8132f58b7c9223e2e32d852629261c02dc\">https://github.com/leanprover-community/mathlib/commit/74373b8132f58b7c9223e2e32d852629261c02dc</a></p>",
        "id": 252887808,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1631342582
    }
]