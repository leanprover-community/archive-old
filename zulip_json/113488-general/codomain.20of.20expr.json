[
    {
        "content": "<p>Is there an easy way to get the domain of an expr representing a bunch of nested pis? Given <code>A -&gt; B -&gt; C -&gt; D</code> I want to return <code>D</code></p>",
        "id": 172316228,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564758477
    },
    {
        "content": "<p>That must be <code>meta</code>, right?</p>",
        "id": 172316479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564758631
    },
    {
        "content": "<p>Yes</p>",
        "id": 172316617,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564758730
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta def codomain (e : expr) : expr :=\nif e.is_pi then codomain e.binding_body else e\n</pre></div>",
        "id": 172316769,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564758832
    },
    {
        "content": "<p>Or more directly:</p>\n<div class=\"codehilite\"><pre><span></span>open expr\nmeta def codomain : expr â†’ expr\n| (pi _ _ _ b)  := codomain b\n| e             := e\n</pre></div>",
        "id": 172316880,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564758885
    },
    {
        "content": "<p>Be weary that the result will contain <code>var</code>s</p>",
        "id": 172317561,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1564759365
    },
    {
        "content": "<p>A safer route would be:</p>\n<p><code>(vs,e) &lt;- mk_local_pis e</code> which produces <code>vs</code> a list of variables created to stand for the bound variables of the removed pis and <code>e</code> the codomain that you're looking for.</p>",
        "id": 172318287,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1564759916
    }
]