[
    {
        "content": "<p>What's the right way to declare a <code>notation</code> for <code>a ^[b] c</code>? what should the binding powers of <code>^[</code> and <code>]</code> be?</p>",
        "id": 156905008,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548472196
    },
    {
        "content": "<p><code>]</code> should have a maximal binding power ( <code>:max</code> ) and you should chose a binding power for <code>^[</code> comparable to the operators it will be used with. If it's to be used as <code>^</code>, look at its binding power with <code>#print notation ^</code></p>",
        "id": 156905496,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548473086
    },
    {
        "content": "<p>thanks</p>",
        "id": 156905841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548473803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> it still behaves differently from <code>a ^ c</code></p>",
        "id": 156905857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548473880
    },
    {
        "content": "<p>How so?</p>",
        "id": 156905901,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548473902
    },
    {
        "content": "<p>shouldn't <code>]</code> get minimum binding power?</p>",
        "id": 156905902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548473908
    },
    {
        "content": "<p><code>M ⊗ N → M ⊗ N</code> parses as <code>(M ⊗ N) → (M ⊗ N)</code> as intended, but I can't get <code>M ⊗[R] N → M ⊗[R] N</code> to be parsed the same</p>",
        "id": 156905932,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474002
    },
    {
        "content": "<p>neither <code>0</code> nor <code>max</code> work</p>",
        "id": 156905964,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474016
    },
    {
        "content": "<p>If you put brackets around one of the two sides of the expression, that should fix the problem and tell me where the problem is. Can you try bracketing only one side at a time and tell me where the problem is?</p>",
        "id": 156906024,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548474152
    },
    {
        "content": "<p><code>(M ⊗[R] N) → M ⊗[R] N</code> parses as intended</p>",
        "id": 156906037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474197
    },
    {
        "content": "<p>Did you make the binding power of <code>]</code> 0 or max?</p>",
        "id": 156906081,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548474252
    },
    {
        "content": "<p>both</p>",
        "id": 156906082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474267
    },
    {
        "content": "<p>the situation is same for both</p>",
        "id": 156906083,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474272
    },
    {
        "content": "<p>did you try making the bp the same as the open bracket?</p>",
        "id": 156906087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548474287
    },
    {
        "content": "<p><code>M ⊗[R] N → M ⊗[R] N</code> is parsed as <code>M ⊗[R] (N → (M ⊗[R] N))</code></p>",
        "id": 156906088,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474291
    },
    {
        "content": "<blockquote>\n<p>did you try making the bp the same as the open bracket?</p>\n</blockquote>\n<p>it hangs</p>",
        "id": 156906100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474308
    },
    {
        "content": "<p>also is the bp greater than 25 or less?</p>",
        "id": 156906101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548474316
    },
    {
        "content": "<p>M ⊗[R] N → M ⊗[R] N is parsed as M ⊗[R] (N → (M ⊗[R] N)) for (<code>⊗[</code>=100 and <code>]</code>=0) and (<code>⊗[</code>=100 and <code>]</code>=max)</p>",
        "id": 156906127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474362
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">tensor</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">30</span> <span class=\"n\">R</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"n\">N</span><span class=\"o\">:</span><span class=\"mi\">30</span> <span class=\"o\">:=</span> <span class=\"n\">tensor</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">M</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 156906390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548474846
    },
    {
        "content": "<p>interesting</p>",
        "id": 156906392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474876
    },
    {
        "content": "<p>I don't understand binding powers</p>",
        "id": 156906395,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474895
    },
    {
        "content": "<p>how can <code>N</code> have a binding power</p>",
        "id": 156906401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548474904
    },
    {
        "content": "<p>me neither, I just put a bunch of stuff in there until it worked</p>",
        "id": 156906406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548474913
    },
    {
        "content": "<p>actually it makes more sense to give a variable a binding power than a constant</p>",
        "id": 156906408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548474932
    },
    {
        "content": "<p>when a variable has a bp it means that the expression there is parsed with that bp</p>",
        "id": 156906414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548474953
    },
    {
        "content": "<p>if it sees a constant with a lower bp than the one currently used in the parse, it acts as though a <code>)</code> is inserted</p>",
        "id": 156906460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548474996
    },
    {
        "content": "<p>I have a new binding power challenge!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span>  <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"c1\">-- fails!</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">)</span> <span class=\"c1\">-- works!</span>\n</pre></div>",
        "id": 156943529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548540785
    },
    {
        "content": "<p>The challenge is to fix the first line so that all lines work</p>",
        "id": 156943536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548540813
    },
    {
        "content": "<p>It took me for ever to understand what was happening when I hit this in the wild</p>",
        "id": 156943539,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548540841
    },
    {
        "content": "<p>have you tried <code>#print notation (| |)</code>?</p>",
        "id": 156943598,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548540910
    },
    {
        "content": "<p><code>no notation</code></p>",
        "id": 156943607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548540956
    },
    {
        "content": "<p>but I didn't try before, thanks!</p>",
        "id": 156943622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548540963
    },
    {
        "content": "<p>Any other suggestion?</p>",
        "id": 156943732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548541175
    },
    {
        "content": "<p>What about just <code>#print notation (|</code>?</p>",
        "id": 156943843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548541332
    },
    {
        "content": "<p><code>(| |)</code> is ASCII syntax for the anonymous constructor</p>",
        "id": 156943864,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548541393
    },
    {
        "content": "<p>nooo!</p>",
        "id": 156943867,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548541410
    },
    {
        "content": "<p>Can I override that?</p>",
        "id": 156943869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548541416
    },
    {
        "content": "<p>Can you remove ascii from Lean 4?</p>",
        "id": 156943872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548541428
    },
    {
        "content": "<p>Not in Lean 3</p>",
        "id": 156943873,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548541428
    },
    {
        "content": "<p>You can do that yourself in Lean 4 :P</p>",
        "id": 156943879,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548541441
    },
    {
        "content": "<blockquote>\n<p>What about just <code>#print notation (|</code>?</p>\n</blockquote>\n<p>no notation</p>",
        "id": 156943937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548541507
    },
    {
        "content": "<p>Preventing <code>(|</code> from being used is really really sad</p>",
        "id": 156943987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548541565
    },
    {
        "content": "<p>In general, I think scoping notations will be very useful in Lean 4</p>",
        "id": 156944014,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548541670
    },
    {
        "content": "<p>Kevin, what did you do with absolute values in your classes? Did you use a fancy |? Or were you lucky with parentheses?</p>",
        "id": 156944405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548542320
    },
    {
        "content": "<p>No, I discovered exactly the same thing as you, tried to fix it, couldn't, so just started putting spaces after brackets.</p>",
        "id": 156944545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548542576
    },
    {
        "content": "<p>I didn't know why it was failing though, so this thread has been helpful!</p>",
        "id": 156944557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548542603
    }
]