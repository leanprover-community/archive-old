[
    {
        "content": "<p>Core lib has a <code>funext</code> tactic which allows to replace <code>apply funext, intro x</code> by <code>funext x</code>. Would it be a good idea to copy the definition of this tactic to get a <code>setext</code> tactic?</p>",
        "id": 125155122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523895244
    },
    {
        "content": "<p>the <code>funext</code> tactic is really <code>repeat {apply funext, intro x}</code> though</p>",
        "id": 125155142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523895298
    },
    {
        "content": "<p>but right, <code>set.ext</code> can only be used once</p>",
        "id": 125155159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523895321
    },
    {
        "content": "<p>well you can just set <code>setext</code> to be <code>apply set.ext; intro x</code></p>",
        "id": 125155166,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523895341
    },
    {
        "content": "<p>I want <code>x</code> to be an argument of the tactic</p>",
        "id": 125155173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523895360
    },
    {
        "content": "<p>sure</p>",
        "id": 125155215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523895367
    },
    {
        "content": "<p>It's mostly a cosmetic question, but also about consistency</p>",
        "id": 125155220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523895401
    },
    {
        "content": "<p>Because I keep trying <code>setext x</code> before remembering it doesn't work yet</p>",
        "id": 125155225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523895422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I recall discussing a generic <code>ext</code> tactic as a complement to the <code>monotonicity</code> tactic, perhaps it would help here</p>",
        "id": 125158190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523900108
    },
    {
        "content": "<p>Yes, I have it in <code>lean-lib</code>. I can create a pull request. I have a <code>extensionality</code> attribute that I used to tag extentionality on sets, stream and maybe other things too</p>",
        "id": 125158338,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523900314
    },
    {
        "content": "<p>nice</p>",
        "id": 125164007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523908962
    },
    {
        "content": "<p>I just submitted a pull request: <a href=\"https://github.com/leanprover/mathlib/pull/104\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/104\">https://github.com/leanprover/mathlib/pull/104</a></p>",
        "id": 125166265,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912038
    },
    {
        "content": "<p>In tests/examples.lean you should see a bunch of situations where <code>ext</code> is useful.</p>",
        "id": 125166322,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912071
    },
    {
        "content": "<p>Let me know if you think there should be more extensionality lemmas</p>",
        "id": 125166324,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912089
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 125166339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912128
    },
    {
        "content": "<p>Can you give it names like with funext?</p>",
        "id": 125166347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912152
    },
    {
        "content": "<p>Oh, you put sorries in tests again <span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 125166423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912217
    },
    {
        "content": "<p>Yes. <code>ext</code> will apply all extensionality lemmas that make sense while <code>ext a b c</code> will only apply three (not necessarily the same) and name the introduced locals <code>a</code>,<code>b</code>, <code>c</code>,</p>",
        "id": 125166431,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912229
    },
    {
        "content": "<p>What is this <code>ext1</code> I see in tests? Apply it only once?</p>",
        "id": 125166439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912258
    },
    {
        "content": "<p>like <code>congr_n 1</code>?</p>",
        "id": 125166442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912265
    },
    {
        "content": "<p>It shouldn't affect the built because the final proof is just <code>trivial</code></p>",
        "id": 125166443,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912267
    },
    {
        "content": "<p>Ahah</p>",
        "id": 125166448,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912277
    },
    {
        "content": "<p>I don't know of <code>congr_n 1</code> but it sounds like you got the right idea</p>",
        "id": 125166506,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912311
    },
    {
        "content": "<p>(I'm so glad <code>congr_n</code> exists! I'll be able to use that now!)</p>",
        "id": 125166536,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912369
    },
    {
        "content": "<p>I was looking to my mathlib tactics docs to point to and, shame on me, I didn't include congr_n! <span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 125166606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912423
    },
    {
        "content": "<p><em>shake head in  disapproval</em></p>",
        "id": 125166620,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912446
    },
    {
        "content": "<p>Would it be useful to have a <code>monoid</code> and <code>add_monoid</code> instance for <code>fin n</code> in <code>mathlib</code>?</p>",
        "id": 125166733,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912609
    },
    {
        "content": "<p>What would be the law? Again some truncation thing?</p>",
        "id": 125166871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912788
    },
    {
        "content": "<p>Yes. It would be modulo arithmetic with the modulo baked into the type</p>",
        "id": 125166894,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912841
    },
    {
        "content": "<p>Oh, modulo</p>",
        "id": 125166943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912883
    },
    {
        "content": "<p>That's a bit sneaky</p>",
        "id": 125166948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912900
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/105\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/105\">https://github.com/leanprover/mathlib/pull/105</a></p>",
        "id": 125166951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523912903
    },
    {
        "content": "<p>What kind of sneaky? Evil-sneaky or just effective-sneaky?</p>",
        "id": 125166987,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523912965
    },
    {
        "content": "<p>I don't know. People could be taken off guard. But who would want to add elements of <code>fin n</code> anyway?</p>",
        "id": 125167052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913013
    },
    {
        "content": "<p>After a quick survey, there's me</p>",
        "id": 125167066,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913058
    },
    {
        "content": "<p>The other alternative I see is the <code>p â‰¡ q [MOD k]</code> notation but that looks more restricted. <code>fin n</code> is usable in other contexts that congruences or equalities.</p>",
        "id": 125167146,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913193
    },
    {
        "content": "<p>I notice your ext PR doesn't include documentation <span class=\"emoji emoji-1f612\" title=\"unamused\">:unamused:</span></p>",
        "id": 125167210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913266
    },
    {
        "content": "<p>What's this <code>documentation</code> thing?</p>",
        "id": 125167238,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913305
    },
    {
        "content": "<p>Alright, I'll add a comment :)</p>",
        "id": 125167272,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913349
    },
    {
        "content": "<p>Is that better?</p>",
        "id": 125167274,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913353
    },
    {
        "content": "<p>By the way, you told me we found a bug in <code>wlog</code> when I asked questions about it. Did you manage to fix it?</p>",
        "id": 125167328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913379
    },
    {
        "content": "<p>That's true! I forgot about it. It was pretty tricky. I'll get back to it.</p>",
        "id": 125167358,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913426
    },
    {
        "content": "<p>Sorry for the delay</p>",
        "id": 125167362,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913430
    },
    {
        "content": "<p>Adding a docstring to <code>tactic/interactive.lean</code> would be good enough. Then I can copy it to tactic.md</p>",
        "id": 125167372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913462
    },
    {
        "content": "<p>But in this case I could also write the docstring I guess</p>",
        "id": 125167378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913473
    },
    {
        "content": "<p>The problem is I could write nonsense</p>",
        "id": 125167422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913494
    },
    {
        "content": "<p>There is no delay problem with wlog, I was only asking so you don't forget</p>",
        "id": 125167447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913542
    },
    {
        "content": "<p>Thanks for reminding me</p>",
        "id": 125167472,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913591
    },
    {
        "content": "<p>Speaking of documentation, I wonder if <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  of <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  could answer Kevin's questions in <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/calc.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/calc.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/calc.md</a> (you only need to search for \"Kevin\" in this file)</p>",
        "id": 125167513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913604
    },
    {
        "content": "<p>I'll write both no worries. I was joking.</p>",
        "id": 125167526,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913610
    },
    {
        "content": "<p>I'm not at a computer right now, but IIRC I think <code>fin n</code> already has an <code>+</code> but it is not very well behaved!</p>",
        "id": 125167620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523913770
    },
    {
        "content": "<p>Actually, I think <code>-</code> is more problematic. And we don't have laws for them</p>",
        "id": 125167632,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523913804
    },
    {
        "content": "<p>My memory is that these structures on <code>fin n</code> are defined in core and didn't make it into a sensible mathematical object</p>",
        "id": 125167676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523913859
    },
    {
        "content": "<p>I think 2+2 wasn't 2-2 in fin 4 for example</p>",
        "id": 125167682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523913879
    },
    {
        "content": "<p>Docs -- yes I'd forgotten I'd left those in!</p>",
        "id": 125167702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523913929
    },
    {
        "content": "<p><code>#reduce (2 : fin 4) - (2 : fin 4)  -- âŸ¨0, _âŸ©</code></p>",
        "id": 125167708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913953
    },
    {
        "content": "<p><code>#reduce (2 : fin 4) + (2 : fin 4)  -- âŸ¨0, _âŸ©</code></p>",
        "id": 125167749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523913967
    },
    {
        "content": "<p>Try 1+2 and 1-2</p>",
        "id": 125167753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523913999
    },
    {
        "content": "<p>Maybe that was it</p>",
        "id": 125167755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523914010
    },
    {
        "content": "<p>1+2 is 3 and 1 - 2 is 0</p>",
        "id": 125167764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523914030
    },
    {
        "content": "<p>2+2=0 so adding 2 and subtracting 2 should be the same</p>",
        "id": 125167765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523914030
    },
    {
        "content": "<p>Thanks</p>",
        "id": 125167772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523914050
    },
    {
        "content": "<p>hard to tell what is the rule here</p>",
        "id": 125167773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523914051
    },
    {
        "content": "<p>it seems substration is truncated at zero</p>",
        "id": 125167779,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523914075
    },
    {
        "content": "<p>Subtracting is just subtraction on nat I think</p>",
        "id": 125167781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523914077
    },
    {
        "content": "<p>and addition wraps</p>",
        "id": 125167782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523914081
    },
    {
        "content": "<p>Right</p>",
        "id": 125167821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523914085
    },
    {
        "content": "<p>Does that make it a monoid?</p>",
        "id": 125167829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523914100
    },
    {
        "content": "<p><span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125167831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523914106
    },
    {
        "content": "<p>I think I remember reading this discussion in the past</p>",
        "id": 125167835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523914129
    },
    {
        "content": "<p>Right</p>",
        "id": 125167837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523914135
    },
    {
        "content": "<p>What was the conclusion?</p>",
        "id": 125167845,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523914163
    },
    {
        "content": "<p>Current definitions are... odd</p>",
        "id": 125167896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523914218
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/109/commits\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/109/commits\">https://github.com/leanprover/mathlib/pull/109/commits</a></p>",
        "id": 125341724,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524202150
    },
    {
        "content": "<p>ext is in PR</p>",
        "id": 125341725,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524202155
    }
]