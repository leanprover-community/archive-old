[
    {
        "content": "<p>I've just noticed that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_inv.to_has_abs\">docs#has_inv.to_has_abs</a>. Why Lean doesn't try to use this instance when I write <code>|(1 : real)|</code>?</p>",
        "id": 284561465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1654052059
    },
    {
        "content": "<p>More precisely, I have two questions.</p>\n<ol>\n<li>Why do we need the multiplicative version?</li>\n<li>Why it doesn't create issues?</li>\n</ol>",
        "id": 284561488,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1654052125
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span></p>",
        "id": 284576067,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654068487
    },
    {
        "content": "<p>I know of the situation but I don't really understand what Christopher is doing. In my limited understanding, a new typeclass notation <code>∣ ∣ₘ</code> would solve the problem without impeding Christopher's progress. It would also make it clearer that <code>mabs</code> refers to the multiplicative absolute value in the naming convention.</p>",
        "id": 284576266,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654068663
    },
    {
        "content": "<p>It's possible the multiplicative version was added as autopilot; maybe Christopher can comment whether it also appears in the literature</p>",
        "id": 284584883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654074524
    },
    {
        "content": "<p>It feels a little sketchy that the correctness of <code>abs</code> is purely a consequence of our instance priorities...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.order</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">1001</span><span class=\"o\">,</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">has_inv.to_has_abs</span>\n<span class=\"k\">#eval</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- 2</span>\n</code></pre></div>",
        "id": 284585800,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1654075109
    },
    {
        "content": "<p>It was introduced in <a href=\"https://github.com/leanprover-community/mathlib/pull/9172\">#9172</a></p>",
        "id": 284586260,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1654075434
    },
    {
        "content": "<p>My apologies for merging it like that.</p>",
        "id": 284591282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654078638
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> has a good suggestion for a fix. I can try to implement it later this week, but I don't have much time.</p>",
        "id": 284591351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654078690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/has_inv.2Eto_has_abs/near/284591282\">said</a>:</p>\n<blockquote>\n<p>My apologies for merging it like that.</p>\n</blockquote>\n<p>No worries! It's hard to recognize all potential problems in a PR. And as far as I know the instance never actually caused a problem.</p>",
        "id": 284593391,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1654080152
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> has a linter lying around in a branch that would have caught this diamond.</p>",
        "id": 284593498,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1654080234
    },
    {
        "content": "<p>Right, I'm not sure if the most recent version works well enough to catch this or not, but I made some experiments a few months ago at <a href=\"https://github.com/leanprover-community/mathlib/tree/alexjbest/diamond-linter\">branch#alexjbest/diamond-linter</a>. I would like to come back to it at some point <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 284594204,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654080671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/has_inv.2Eto_has_abs/near/284584883\">said</a>:</p>\n<blockquote>\n<p>It's possible the multiplicative version was added as autopilot; maybe Christopher can comment whether it also appears in the literature</p>\n</blockquote>\n<p>This has come up a few times now. I have no interest in the multiplicative case - I only added it because someone requested it in the review of the original PR. I'll see if I can find the time to put in a PR to remove it in the next few days (but if someone wants to jump in before me and do it, that's fine with me.)</p>",
        "id": 284667132,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1654116383
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover-community/mathlib/pull/9172\">#9172</a> introduced the offending instance, which was previously a more harmless <code>mabs</code> definition introduced in <a href=\"https://github.com/leanprover-community/mathlib/pull/8673\">#8673</a></p>",
        "id": 284668471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654117172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  How would I invoke your linter? Naively I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.lint.diamond_linter_experiments</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">find_diamonds</span> <span class=\"bp\">`</span><span class=\"n\">algebra_nat</span><span class=\"bp\">`</span> <span class=\"n\">prod.algebra</span>\n</code></pre></div>\n<p>But that errors with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">algebra_nat</span><span class=\"o\">,</span> <span class=\"n\">prod.algebra</span><span class=\"o\">)</span>\n<span class=\"n\">algebra_nat</span>\n<span class=\"n\">prod.algebra</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n</code></pre></div>\n<p>What do <code>algebra_nat</code> and prod.algebra represent?</p>",
        "id": 287297038,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1656054600
    },
    {
        "content": "<p>Here is one of the previous conversations about this: <a href=\"#narrow/stream/113488-general/topic/Positive.20parts\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Positive.20parts</a></p>",
        "id": 287301840,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1656058073
    },
    {
        "content": "<p>That is the correct syntax, but the output there isn't an error, its just not finding any issues. I guess there is an issue with those two instances but the linter isn't smart enough to find it yet?</p>",
        "id": 287390058,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656107902
    }
]