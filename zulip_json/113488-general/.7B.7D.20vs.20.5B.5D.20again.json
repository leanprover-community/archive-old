[
    {
        "content": "<p>Here's a fun place to have <code>[]</code> arguments where they don't seem to be desired:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mul_action.to_has_scalar</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 218165767,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606572523
    },
    {
        "content": "<p>I have a non-instance value of <code>mul_action α β</code> which uses a non-instance value of <code>monoid α</code></p>",
        "id": 218165910,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606572768
    },
    {
        "content": "<p>I hope this doesn't mean that Lean does a typeclass search for the indices whenever it uses one of these <code>to_foo</code> functions?</p>",
        "id": 218166097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573096
    },
    {
        "content": "<p>The field projections also have <code>[]</code></p>",
        "id": 218166115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573172
    },
    {
        "content": "<p>is this really sensible?</p>",
        "id": 218166118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573175
    },
    {
        "content": "<p>e.g. <code>mul_action.one_smul</code> has type <code>∀ {α : Type u_5} {β : Type u_6} [_inst_1 : monoid α] [c : mul_action α β] (b : β), 1 • b = b</code> but <code>∀ {α : Type u_5} {β : Type u_6} {_inst_1 : monoid α} [c : mul_action α β] (b : β), 1 • b = b</code> seems more reasonable</p>",
        "id": 218166171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573247
    },
    {
        "content": "<p>I assume <code>mul_action</code> is a class</p>",
        "id": 218167963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606575995
    },
    {
        "content": "<p>I recall there being some upheaval about the order to search typeclasses in that resulted in a reordering of <code>int.cast</code>'s arguments</p>",
        "id": 218168120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606576240
    },
    {
        "content": "<p>from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">cast</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>I infer that they are searched from right to left, so you should be fine</p>",
        "id": 218168130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606576268
    },
    {
        "content": "<p>In my case it means I have to write <code>@mul_action.to_has_scalar _ _ (extended_monoid f) (extended_mul_action f hY)</code> and I can't leave out the <code>monoid</code> instance <code>extended_monoid f</code>, because Lean will try to find it by instance search. But this is obviously a relatively rare situation, to have multiple levels of non-instances like this</p>",
        "id": 218168346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606576632
    },
    {
        "content": "<p>I guess normally if we found a <code>mul_action α β</code> instance then we probably already just found a <code>monoid α</code> instance, so hopefully a subsequent search for the latter will hit the cache</p>",
        "id": 218168477,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606576804
    },
    {
        "content": "<p>(In case it's not obvious, the point is that <code>_inst_1 : monoid α</code> is an implicit argument of <code>mul_action α β</code>)</p>",
        "id": 218168654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606577078
    },
    {
        "content": "<p>I guess it's fine here, I don't know if it makes sense in general</p>",
        "id": 218168669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606577141
    },
    {
        "content": "<p>isn't there some issue about having multiple monoid instances for multiple mul_actions?</p>",
        "id": 218168716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606577211
    },
    {
        "content": "<p>Or maybe they are all supposed to be unique anyway</p>",
        "id": 218168721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606577232
    },
    {
        "content": "<p>The class setup is fine here, my only issue is that the <code>[]</code> for <code>_inst_1</code> means that Lean does instance searches that are at best redundant (the instance is already specified if we know <code>c</code>) and at worst might fail or produce a different instance</p>",
        "id": 218168843,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606577418
    },
    {
        "content": "<p>Or do we search for <code>_inst_1</code> first in order to determine the search problem for <code>c</code>?</p>",
        "id": 218168864,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606577509
    },
    {
        "content": "<p>won't the cache take care of most of this problem?</p>",
        "id": 218169760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606579077
    }
]