[
    {
        "content": "<p>Did something happen where <code>f.foo</code> means <code>function.foo f</code> when <code>f</code> is a function?</p>",
        "id": 197576378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589471766
    },
    {
        "content": "<p>or was that just a suggestion?</p>",
        "id": 197576402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589471776
    },
    {
        "content": "<p>No, I'm still waiting on a PR.</p>",
        "id": 197576411,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589471779
    },
    {
        "content": "<p>AFAIR, last thing happening was Gabriel pointing at the C++ source file that should be changed to achieve this.</p>",
        "id": 197576551,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589471845
    },
    {
        "content": "<p>I was hoping we could rename the dreadful <code>set.range</code> to <code>function.image</code>--though I suppose we could do this anyways</p>",
        "id": 197576761,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589471923
    },
    {
        "content": "<p>Even better would be a trick to write <code>f.map F</code> where <code>f</code> is a function and <code>F</code> is a filter. Johannes sometimes wrote <code>F.map f</code>, I always try to write <code>map f F</code></p>",
        "id": 197577370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589472182
    },
    {
        "content": "<p>What should the parser to to understand that <code>f.map F</code> is actually <code>filter.map</code>?</p>",
        "id": 197577507,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589472242
    },
    {
        "content": "<p>That's tricky, it must use that <code>F</code> is a filter. Maybe <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 197581584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589473822
    },
    {
        "content": "<p>For filters you can probably use <code>&lt;$&gt;</code></p>",
        "id": 197581651,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589473859
    },
    {
        "content": "<p>But this wouldn't work for bundled homomorphisms.</p>",
        "id": 197581698,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589473881
    },
    {
        "content": "<p>there are universe issues with this alternative</p>",
        "id": 197581742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589473901
    },
    {
        "content": "<p>I thought this never works because of universe issues</p>",
        "id": 197581772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589473915
    },
    {
        "content": "<p>Oops, Mario was faster</p>",
        "id": 197581804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589473922
    },
    {
        "content": "<p>It works as long as you are on a known type, which is probably in <code>Type</code>, but anything generic wants to have two universes</p>",
        "id": 197581905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589473960
    },
    {
        "content": "<p>I forgot about universes. Again.</p>",
        "id": 197582737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589474352
    },
    {
        "content": "<p>Yes, that's one effect of the virus lock-down. It becomes even easier to forget about the outside universe.</p>",
        "id": 197582815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589474388
    },
    {
        "content": "<p>Can the universe issues with <code>&lt;$&gt;</code> be fixed? Or are they inherent?</p>",
        "id": 197583281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589474550
    }
]