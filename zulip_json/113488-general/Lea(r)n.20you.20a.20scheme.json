[
    {
        "content": "<p>I was flipping through <a href=\"https://www.wespiser.com/writings/wyas/01_introduction.html\" target=\"_blank\" title=\"https://www.wespiser.com/writings/wyas/01_introduction.html\">this</a> thing where you implement a version of scheme in Haskell. I'm curious whether there are any clever ways of implementing the given definition of the <code>LispVal</code> type in Lean. Trying to power through it as a mutual inductive (with a <code>ListLispVal</code> type to avoid nesting and making <code>IFunc</code>,  and <code>Eval</code> part of the mutual) is no good since you end up with a negative occurrence in the <code>Fun</code> constructor.</p>\n<p>In Haskell the whole thing is :</p>\n<div class=\"codehilite\"><pre><span></span>data LispVal =\n    Atom T.Text\n  | List [LispVal]\n  | Number Integer\n  | String T.Text\n  | Fun IFunc\n  | Lambda IFunc EnvCtx\n  | Nil\n  | Bool Bool\n\ndata IFunc = IFunc { fn :: [LispVal] -&gt; Eval LispVal }\ntype EnvCtx = Map.Map T.Text LispVal\nnewtype Eval a = Eval { unEval :: ReaderT EnvCtx IO a }\n</pre></div>\n\n\n<p>In sort of pseudo-lean :</p>\n<div class=\"codehilite\"><pre><span></span>inductive LispVal\n| Atom : string -&gt; LispVal\n| List : list LispVal -&gt; LispVal\n| Number : ℤ → LispVal\n| String : string → LispVal\n| Fun : IFunc → LispVal\n| Lambda : IFunc → EnvCtx → LispVal\n| Nil : LispVal\n| Bool : bool → LispVal\n\nstructure IFunc :=\n(fn : list LispVal → Eval LispVal)\n\ndef EnvCtx := KVMap string LispVal\n\nstructure Eval (A : Type) :=\n(un_eval : reader_t EnvCtx io A)\n</pre></div>",
        "id": 190318530,
        "sender_full_name": "Chris B",
        "timestamp": 1583953198
    },
    {
        "content": "<p>You can't represent these functions as functions in lean, because of nontermination</p>",
        "id": 190320573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583954300
    },
    {
        "content": "<p>If you are okay with <code>meta</code> you can do it, and if you are okay with adding termination conditions then I think you can do it as well</p>",
        "id": 190320648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583954352
    },
    {
        "content": "<p>You would still have to make some significant change to the type definition or break it up though right, since <code>meta</code> doesn't lift the ban on negative occurrences? <br>\nFor termination condition do you just mean like gas?</p>",
        "id": 190322366,
        "sender_full_name": "Chris B",
        "timestamp": 1583955407
    },
    {
        "content": "<p><code>meta</code> does lift the ban on negative occurrences</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n</pre></div>",
        "id": 190326502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583957902
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">EnvCtx</span> <span class=\"o\">:=</span> <span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_map</span> <span class=\"n\">string</span>\n<span class=\"n\">meta</span> <span class=\"kn\">structure</span> <span class=\"n\">IFunc</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">reader_t</span> <span class=\"o\">(</span><span class=\"n\">EnvCtx</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">io</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">inductive</span> <span class=\"n\">LispVal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Atom</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">LispVal</span>\n<span class=\"bp\">|</span> <span class=\"n\">List</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">LispVal</span> <span class=\"bp\">→</span> <span class=\"n\">LispVal</span>\n<span class=\"bp\">|</span> <span class=\"n\">Number</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">LispVal</span>\n<span class=\"bp\">|</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">LispVal</span>\n<span class=\"bp\">|</span> <span class=\"n\">Fun</span> <span class=\"o\">:</span> <span class=\"n\">IFunc</span> <span class=\"n\">LispVal</span> <span class=\"bp\">→</span> <span class=\"n\">LispVal</span>\n<span class=\"bp\">|</span> <span class=\"n\">Lambda</span> <span class=\"o\">:</span> <span class=\"n\">IFunc</span> <span class=\"n\">LispVal</span> <span class=\"bp\">→</span> <span class=\"n\">EnvCtx</span> <span class=\"n\">LispVal</span> <span class=\"bp\">→</span> <span class=\"n\">LispVal</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nil</span> <span class=\"o\">:</span> <span class=\"n\">LispVal</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bool</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">LispVal</span>\n</pre></div>",
        "id": 190327296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583958313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Can you still do things like this in lean 4?</p>",
        "id": 190327995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583958678
    },
    {
        "content": "<p>neither <code>partial</code> nor <code>unsafe</code> seems to cover this use case for <code>meta</code></p>",
        "id": 190328098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583958728
    },
    {
        "content": "<p>I guess you have to say the <code>m</code> word to get it to break.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">**</span> <span class=\"n\">invalid</span> <span class=\"n\">mutually</span> <span class=\"kn\">inductive</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">positive</span> <span class=\"n\">occurrence</span> <span class=\"k\">in</span> <span class=\"n\">introduction</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">term</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"n\">val</span>\n<span class=\"k\">with</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"k\">with</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n</pre></div>",
        "id": 190330823,
        "sender_full_name": "Chris B",
        "timestamp": 1583960399
    },
    {
        "content": "<p>That's a better definition than what I was trying to do anyway. Is the accepted way to newtype something to make it a <code>def</code> and mark it as <code>irreducible</code>, or is there another convention?</p>",
        "id": 190331355,
        "sender_full_name": "Chris B",
        "timestamp": 1583960674
    },
    {
        "content": "<p><code>structure</code> gives you the most \"newtype\"-like semantics</p>",
        "id": 190332173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583961180
    },
    {
        "content": "<p><code>def</code> is more like a typedef</p>",
        "id": 190332185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583961187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> sure <a href=\"https://github.com/leanprover/lean4/blob/5b296cbb33ac156ab262f231acb4f6cccc432056/tests/lean/run/inliner_loop.lean#L1\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/blob/5b296cbb33ac156ab262f231acb4f6cccc432056/tests/lean/run/inliner_loop.lean#L1\">https://github.com/leanprover/lean4/blob/5b296cbb33ac156ab262f231acb4f6cccc432056/tests/lean/run/inliner_loop.lean#L1</a></p>",
        "id": 190334872,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583962825
    }
]