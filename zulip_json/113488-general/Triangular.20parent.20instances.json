[
    {
        "content": "<p>Is there any way to work around this error?</p>\n<div class=\"codehilite\"><pre><span></span>synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized\n  steppable.to_functor t\ninferred\n  mergeable.to_functor f\n</pre></div>\n\n\n<p>(I have two classes, <code>steppable</code> and <code>mergeable</code> that both extend <code>functor</code>, and I'm using them both as assumptions for some generic code I am writing)</p>",
        "id": 151864665,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1544935228
    },
    {
        "content": "<p>I think you more or less have to create a new class <code>steppable_and_mergeable</code>. I don't think there's another way.</p>",
        "id": 151864720,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544935345
    },
    {
        "content": "<p>Okay, that's what I figured ...</p>",
        "id": 151864731,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1544935440
    },
    {
        "content": "<p>There is actually another way. Change the definition of <code>mergeable</code> and <code>steppable</code> to take <code>[functor]</code> as an argument instead of extending <code>functor</code></p>",
        "id": 151864777,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544935502
    },
    {
        "content": "<p>I see; that could work, but it seems it doesn't play nicely with <code>out_param</code> then</p>",
        "id": 151864894,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1544935785
    },
    {
        "content": "<p>I know nothing about <code>out_param</code></p>",
        "id": 151864940,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544935826
    },
    {
        "content": "<p>What's your worry about out_param?</p>",
        "id": 151888684,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1544981391
    },
    {
        "content": "<p>Oh hm. I was getting this error, but also marking the instance as <code>out_param</code> seemed to fix it:</p>\n<div class=\"codehilite\"><pre><span></span>don&#39;t know how to synthesize placeholder\ncontext:\nt : Type u,\nf : Type u → Type u,\n_inst_1 : mergeable f,\n_inst_2 : steppable t f,\n_inst_3 : traversable f,\n_inst_4 : is_lawful_functor f,\n_inst_5 : is_lawful_traversable f,\na b : t\n⊢ Type u → Type u\n</pre></div>\n\n\n<p>(i.e. it looked like it was failing to figure out what <code>f</code> was even though I gave it <code>t</code>)<br>\n<code>steppable</code> now looks like:</p>\n<div class=\"codehilite\"><pre><span></span>class steppable (t : Type u) (f : out_param $ Type u → Type u) [out_param $ functor f] :=\n(step : t ≃ f t)\n</pre></div>",
        "id": 151888986,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1544981778
    },
    {
        "content": "<p>There shouldn't be any need for that instance param if it's not used in the class body</p>",
        "id": 151892913,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1544988362
    }
]