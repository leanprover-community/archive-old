[
    {
        "content": "<p>I just read the TODO in <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/intervals.html#list.Ico\"><code>data.list.intervals</code></a> and I was indeed thinking the same thing. Defining locally finite posets isn't hard, so I would do it myself, but how should it work with the typeclass inference? Should it be a structure extending <code>partial_order</code> or a class taking <code>[partial_order]</code> as an argument? (My guts say the latter)</p>",
        "id": 243000259,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623926984
    },
    {
        "content": "<p>I'm now proving that ℕ is locally finite. This will provide a <code>list.Ico :  ℕ → ℕ → list ℕ</code> that will do the same thing as <code>list.range'</code>. Should we keep <code>list.range'</code> then?</p>",
        "id": 243066335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623956101
    },
    {
        "content": "<p><code>list.range'</code> is there to prove things about <code>list.range</code> and <code>list.iota</code>. Will your <code>list.Ico</code> have the same performance as <code>list.range'</code>? As <code>list.range</code> with transpose?</p>",
        "id": 243068585,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623957069
    },
    {
        "content": "<p>It's not clear to me yet. I'm trying to make it have nice computability by using data fields.</p>",
        "id": 243069274,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623957343
    },
    {
        "content": "<p>Maybe related is how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.degree\">docs#simple_graph.degree</a> works.  A graph is locally finite if every neighbor set is finite, and the finiteness data is handled via typeclasses.</p>",
        "id": 243172930,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624028705
    },
    {
        "content": "<p>So we talked about using <code>(finset.Ixx a b).val</code> in place of <code>multiset.Ixx a b</code>. Should I simply delete all the <code>multiset.Ico</code> stuff?</p>",
        "id": 243566204,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624389670
    },
    {
        "content": "<p>I think that's reasonable, because the current definition is just over nat, and just the lift into the quotient.</p>",
        "id": 243581475,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624397364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, in your (dead?) PR about <code>has_enum</code>, you're defining locally finite orders from enumerating lists and then you lift that up to enumerating multisets and enumerating finsets.<br>\nThe problem with that is that this assumes the order is linear while many nonlinear orders are locally finite (although I have yet to encounter one in practice).</p>\n<p>What do you think of using your approach for lists and mine for multisets and finsets? Then you'll need some glue between lists and multisets, but that's hopefully not too bad.</p>",
        "id": 251693251,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577601
    },
    {
        "content": "<p>Yes, <code>has_enum</code> is very much abandoned, so please go with whatever sounds good to you. From your description, splitting into a non-linear and linear part would work well.</p>",
        "id": 251693577,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1630577835
    },
    {
        "content": "<p>I'll ask about who to credit when the PR is ready, because that's a lot of people!</p>",
        "id": 251693676,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577890
    },
    {
        "content": "<p>I was in a talk this week that used the moebius function on the intersection posets of hyperplane arrangements, so I have seen them in practice! It reminded me of my long abandoned <a href=\"#narrow/stream/116395-maths/topic/Perfect.20Numbers/near/201463174\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Perfect.20Numbers/near/201463174</a> looking at incidence algebras, its cool that you are actually adding some of this <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> !</p>",
        "id": 251694400,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630578394
    },
    {
        "content": "<p>Ouuuh, nice! I feel like I'm taking on something everybody has wanted for years <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 251694558,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630578514
    },
    {
        "content": "<p>Well, there are many things we've wanted for years. But this one seems rather basic.</p>",
        "id": 251694596,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630578537
    },
    {
        "content": "<p>Please do contour integrals next ;-)</p>",
        "id": 251701894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630583132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Locally.20finite.20poset/near/251693577\">said</a>:</p>\n<blockquote>\n<p>Yes, <code>has_enum</code> is very much abandoned, so please go with whatever sounds good to you.</p>\n</blockquote>\n<p>Actually, what's still there to do in <a href=\"https://github.com/leanprover-community/mathlib/tree/fin_range\">branch#fin_range</a>? It looks pretty pretty good to me!</p>",
        "id": 253097142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631542693
    }
]