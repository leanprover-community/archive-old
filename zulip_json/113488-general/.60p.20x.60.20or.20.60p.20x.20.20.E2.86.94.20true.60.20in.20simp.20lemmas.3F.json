[
    {
        "content": "<p>I notices that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.coprime_one_left_iff\">docs#nat.coprime_one_left_iff</a> has some simp lemmas of the form <code>p x ↔ true</code>. Is there any reason to prefer this spelling over the obviously equivalent <code>p x</code>?</p>\n<p>If the argument is something to do with compatibility with <code>rw</code>, should all non-equality-or-iff simp lemmas have <code>↔ true</code> appended?</p>",
        "id": 212064947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601640368
    },
    {
        "content": "<p>It might be faster to fix <code>rw</code> than to add <code>↔ true</code> everywhere.</p>",
        "id": 212065610,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601640788
    },
    {
        "content": "<p>I thought these were for <code>simp</code>, so that you could simplify <code>p x /\\ q x</code> to <code>true /\\ q x</code> to <code>q x</code>.</p>",
        "id": 212066378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601641249
    },
    {
        "content": "<p>On a related note, is <code>p = false</code> (eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_empty_eq\">docs#set.mem_empty_eq</a>) preferable to <code>p ↔ false</code> or <code>¬p</code> in a simp lemma?</p>",
        "id": 212066905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601641619
    },
    {
        "content": "<p><code>simp</code> rewrites <code>¬p</code> to <code>p ↔ false</code>, and <code>p</code> to <code>p ↔ true</code>.  It also supports <code>∧</code>.</p>",
        "id": 212067151,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601641769
    },
    {
        "content": "<p>My preference is <code>¬p</code>.</p>",
        "id": 212067173,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601641790
    },
    {
        "content": "<p>So is the verdict then that simp does _not_ need <code>↔ true</code></p>",
        "id": 212067252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601641824
    },
    {
        "content": "<p>Yes it doesn't.</p>",
        "id": 212067292,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601641846
    },
    {
        "content": "<p>Without<code>↔ true</code> this simp lemma is considered invalid:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">imp_self</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 212068001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601642265
    },
    {
        "content": "<p>Ok, <code>↔ true</code> is <em>sometimes</em> required.</p>",
        "id": 212069204,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601642909
    },
    {
        "content": "<p>Also here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">iff_self_iff_trur</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cc</span>\n</code></pre></div>",
        "id": 212069414,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601643014
    },
    {
        "content": "<p>Would it make sense to make things like <code>lemma lt_irrefl [preorder α] : ∀ a : α, ¬ a &lt; a</code> into simp lemmas then?<br>\nI didn't realize it would work as a simp lemma, so I wrote a version in the form <code>(x &lt; x) ↔ false</code> to pass to simp. But in fact <code>simp [lt_irrefl]</code> works perfectly for me already.</p>",
        "id": 212091413,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601653156
    },
    {
        "content": "<p>Yes, <code>lt_irrefl</code> looks like a good simp lemma.</p>",
        "id": 212091654,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601653262
    }
]