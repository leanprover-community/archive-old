[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>1 goal\nA : Huber_pair,\nv : Spv ↥A,\nhv : v ∈ Spa A\n⊢ [comm_ring.zero (ring_completion.comm_ring (valuation_field (out (⟨v, hv⟩.val))))] =\n    [domain.zero division_ring.to_domain]\n</pre></div>\n\n\n<p>Where did those square brackets come from? They're there whether or not I have notation on.</p>",
        "id": 163834894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822145
    },
    {
        "content": "<p>That's the projection macro, you probably unfolded something you shouldn't have</p>",
        "id": 163834948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822214
    },
    {
        "content": "<p>Yeah, I was trying to get to the bottom of things.</p>",
        "id": 163835021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822367
    },
    {
        "content": "<p>I was using <code>delta</code> :-)</p>",
        "id": 163835022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822377
    },
    {
        "content": "<p>Is that something <code>unfold_projs</code> can fix</p>",
        "id": 163835036,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555822403
    },
    {
        "content": "<p>I decided to take a different route. I'll go back and take a look.</p>",
        "id": 163835209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822780
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">unfold_projs</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">simplify</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Huber_pair</span><span class=\"o\">,</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Spv</span> <span class=\"err\">↥</span><span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_continuous</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Huber_pair</span><span class=\"o\">),</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">Rplus</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"err\">⇑</span><span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">ring_completion</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">valuation_field</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"n\">v</span><span class=\"o\">)))]</span> <span class=\"bp\">=</span>\n    <span class=\"o\">[</span><span class=\"n\">discrete_field</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">completable_top_field</span><span class=\"bp\">.</span><span class=\"n\">discrete_field</span> <span class=\"o\">(</span><span class=\"n\">valuation_field</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"n\">v</span><span class=\"o\">)))]</span>\n</pre></div>",
        "id": 163835280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822868
    },
    {
        "content": "<p>They are a dead end for me.</p>",
        "id": 163835283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822878
    },
    {
        "content": "<p>ok :'(</p>",
        "id": 163835287,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555822888
    },
    {
        "content": "<p>Is it likely that, if what I'm trying to prove is provable (possibly noncomputably), then there will be a proof which avoids those weird square brackets? Do I ever have to deal with them as an end user?</p>",
        "id": 163835334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822928
    },
    {
        "content": "<p>It is possible to unfold them to a <code>comm_ring.rec</code> application, but it's a sign that you are unfolding things that you shouldn't</p>",
        "id": 163835430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555823139
    },
    {
        "content": "<p>you should not ever have to see them as an end user</p>",
        "id": 163835436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555823156
    },
    {
        "content": "<p>I assume <code>rfl</code> doesn't work?</p>",
        "id": 163835506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555823206
    },
    {
        "content": "<p>you can always use <code>change</code> to say what the zero is</p>",
        "id": 163835521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555823222
    },
    {
        "content": "<blockquote>\n<p>I assume rfl doesn't work?</p>\n</blockquote>\n<p>That's right -- that's what I'm trying to debug.</p>",
        "id": 163835544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823244
    },
    {
        "content": "<p>The zero is some gigantic term when I unfold it.</p>",
        "id": 163835553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823260
    }
]