[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">≫</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">s</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">((</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">F_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">U₁_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">U₁</span>\n<span class=\"n\">types</span> <span class=\"n\">contain</span> <span class=\"n\">aliased</span> <span class=\"n\">name</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"n\">U₁</span> <span class=\"n\">F</span>\n<span class=\"n\">remark</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">tactic</span> <span class=\"bp\">`</span><span class=\"n\">dedup</span><span class=\"bp\">`</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">to</span> <span class=\"n\">rename</span> <span class=\"n\">aliases</span>\n</pre></div>\n\n\n<p>I have tried inserting <code>dedup</code> in several places, but it doesn't help. My <code>s</code> remains to have type <code>((functor.id (presheaf X)).obj F).obj U₁</code> in the goal window, which is defeq to <code>F.obj U₁</code>.</p>",
        "id": 147866833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542436628
    },
    {
        "content": "<p>Oh, I've had this one before. The error message is completely misleading...</p>",
        "id": 147867786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542438876
    },
    {
        "content": "<p>Check that you haven't somehow used <code>_root_.functor</code> somewhere that should have been <code>category_theory.functor</code>?</p>",
        "id": 147867790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542438905
    },
    {
        "content": "<p>I don't remember if that was it or not.</p>",
        "id": 147867793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542438912
    },
    {
        "content": "<p>Hmm, that sounds like a very crazy error. I'll see if I can find it.</p>",
        "id": 147868427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542440422
    },
    {
        "content": "<p>Do you spot anything suspicious in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">counit</span><span class=\"bp\">.</span><span class=\"n\">is_iso</span> <span class=\"o\">[</span><span class=\"n\">fully_faithful</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">counit</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"err\">⥤</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n        <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">ext</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">congr</span> <span class=\"err\">$</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n          <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n          <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n          <span class=\"n\">congr</span><span class=\"o\">,</span>\n          <span class=\"n\">apply</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">injectivity</span><span class=\"o\">,</span>\n          <span class=\"n\">erw</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span><span class=\"o\">,</span>\n          <span class=\"n\">tidy</span> <span class=\"o\">{</span><span class=\"n\">trace_result</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n        <span class=\"kn\">end</span> <span class=\"o\">},</span>\n      <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">ext</span> <span class=\"n\">s</span> <span class=\"n\">V</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">congr</span> <span class=\"err\">$</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">injectivity</span><span class=\"o\">,</span>\n        <span class=\"n\">erw</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span><span class=\"o\">,</span>\n        <span class=\"n\">tidy</span> <span class=\"o\">{</span><span class=\"n\">trace_result</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n      <span class=\"kn\">end</span> <span class=\"o\">},</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">ext</span> <span class=\"n\">U</span> <span class=\"n\">s</span> <span class=\"n\">V</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">congr</span> <span class=\"err\">$</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">naturality</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">tidy</span> <span class=\"o\">{</span><span class=\"n\">trace_result</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 147868475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542440536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> In my case it was talking about <code>f.preimage</code> while that should have been <code>f.op.preimage</code>.<br>\nI think we should have stronger barriers between categories and their opposites. Because now stuff is silently identified, and then all of a sudden it bites you 20 lines later.</p>",
        "id": 147872942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542450667
    },
    {
        "content": "<p>Hmm, no, that wasn't the issue... it reappeared...</p>",
        "id": 147873601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542452238
    },
    {
        "content": "<p>I pushed an update to the <code>sheaf</code> branch. The trouble is with this def: <a href=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean#L241\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean#L241\">https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean#L241</a><br>\nIf any of the experts would want to take a look, I would be very grateful.</p>",
        "id": 147873776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542452578
    }
]