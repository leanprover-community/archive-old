[
    {
        "content": "<p>I'd like to ask people for ideas on how to define an inner product/Hilbert space. I think it is good to keep things simple and define real and complex inner product spaces separately. But my guess is that people want to define them in a unified way. I'm not sure how to do that. </p>\n<p>Furthermore, is there a definition of inner product spaces on more general fields besides real and complex ones?</p>",
        "id": 171745945,
        "sender_full_name": "Joe",
        "timestamp": 1564113713
    },
    {
        "content": "<p>I defined real inner product space at <a href=\"https://github.com/leanprover-community/mathlib/pull/1248\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1248\">https://github.com/leanprover-community/mathlib/pull/1248</a>.</p>",
        "id": 171745985,
        "sender_full_name": "Joe",
        "timestamp": 1564113728
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">inner_product_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inner</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">comm</span>      <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">inner</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">inner</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nonneg</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">inner</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">definite</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">inner</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">add_left</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">inner</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">inner</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">smul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">inner</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171745987,
        "sender_full_name": "Joe",
        "timestamp": 1564113738
    },
    {
        "content": "<p>Here's <span class=\"user-mention\" data-user-id=\"120943\">@Andreas Swerdlow</span> 's defintion of complex inner product space. <a href=\"https://github.com/leanprover-community/mathlib/pull/840\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/840\">https://github.com/leanprover-community/mathlib/pull/840</a>.</p>",
        "id": 171745996,
        "sender_full_name": "Joe",
        "timestamp": 1564113810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">herm_inner_product_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">sesq_form</span> <span class=\"n\">ℂ</span> <span class=\"n\">α</span> <span class=\"n\">conj</span><span class=\"bp\">.</span><span class=\"n\">ring_invo</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">to_sym_sesq_form</span> <span class=\"o\">:</span> <span class=\"n\">sym_sesq_form</span><span class=\"bp\">.</span><span class=\"n\">is_sym</span> <span class=\"n\">to_sesq_form</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sesq_self_re_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sesq_self_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171746041,
        "sender_full_name": "Joe",
        "timestamp": 1564113900
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">sesq_form</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ring_invo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">sesq</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sesq_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">sesq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">sesq</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sesq_smul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">sesq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">sesq_add_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sesq_smul_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 171746058,
        "sender_full_name": "Joe",
        "timestamp": 1564113961
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">ring_invo</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">anti_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_anti_hom</span> <span class=\"n\">to_fun</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">to_fun_to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171746108,
        "sender_full_name": "Joe",
        "timestamp": 1564114022
    },
    {
        "content": "<p>Finally, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thinks it is better to have a unified approach to real and complex inner product space. Here's his suggestion:</p>",
        "id": 171746172,
        "sender_full_name": "Joe",
        "timestamp": 1564114115
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">class</span> <span class=\"n\">scalars</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">normed_field</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">embed_ℝ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- TODO axioms about conj</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">embed_ℝ_coe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">scalars</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">scalars</span><span class=\"bp\">.</span><span class=\"n\">embed_ℝ</span> <span class=\"n\">α</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">scalars</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"err\">†</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">120</span> <span class=\"o\">:=</span> <span class=\"n\">scalars</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">34</span>\n<span class=\"n\">class</span> <span class=\"n\">sesquilinear_space</span> <span class=\"o\">(</span><span class=\"err\">𝕶</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">scalars</span> <span class=\"err\">𝕶</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"err\">𝕶</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inner_product</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"err\">𝕶</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">conj_symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">inner_product</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">inner_product</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"err\">†</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">linearity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"err\">𝕶</span><span class=\"o\">),</span> <span class=\"n\">inner_product</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">inner_product</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">inner_product</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">inner_product_space</span> <span class=\"o\">(</span><span class=\"err\">𝕶</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">scalars</span> <span class=\"err\">𝕶</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"err\">𝕶</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">sesquilinear_space</span> <span class=\"err\">𝕶</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">normed_space</span> <span class=\"err\">𝕶</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm_sq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">inner_product</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171746181,
        "sender_full_name": "Joe",
        "timestamp": 1564114149
    },
    {
        "content": "<p>But sesquilinear forms are defined even more generally right? I don't think that <code>scalars</code> should ask for an embedding of the reals. I want sesquilinear forms over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 171750494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564121655
    },
    {
        "content": "<p>I'm not saying that we should immediately formalise the most general thing possible. But it might be good to keep those generalisations in the back of our mind while formalising. If we do that, then refactoring/generalising the code might become easier in the future.</p>",
        "id": 171750514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564121719
    },
    {
        "content": "<p>Too much abstraction <del>nonsense</del> makes it hard to get going. I vote for reals and complexes, since those are the only ones I've ever actually used :).    Especially for experimental code like everyone here is writing, I wouldn't spend too much time overthinking things because odds are it'll need redoing anyway...</p>",
        "id": 171757030,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564130223
    },
    {
        "content": "<p>It would be pretty cool to one day use <code>#eval</code> and get the angle between two vectors using the inner product and arccos...</p>",
        "id": 171757342,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564130545
    },
    {
        "content": "<p>It seems to me that linear forms and sesquilinear forms are two different things. One could \"unify\" them both by giving a field K and a map c : K -&gt; K and then consider forms (v,w) with (kv,w)=c(k)(v,w) but then if you choose to do linear forms this way you set c = identity and then have some useless identity map kicking around everywhere.</p>\n<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> number theorists use sesquilinear forms over fields like the rationals all over the place in the Langlands programme.</p>",
        "id": 171757652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564130829
    },
    {
        "content": "<p>If we're going to do the real and complex cases separately, then they should at least have a similar style. Maybe a merger of mine and <span class=\"user-mention\" data-user-id=\"127148\">@Joe</span>'s files would work best. Specifically, still having real/complex inner product extend bilinear/sesquilinear form, but using Joe's more concise proof of Cauchy-Schwarz etc.</p>",
        "id": 171760209,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1564133530
    },
    {
        "content": "<p>Has anyone looked at the good textbooks for Hilbert spaces? Amongst the more \"good references, but you wouldn't want to learn from them\" choices: Bourbaki \"Topological vector spaces\" chapter 5 does the real and complex cases together, as does Pedersen \"Analysis Now\"</p>",
        "id": 171763969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564137881
    },
    {
        "content": "<p>I am also not convinced that the extra abstraction is helpful rather than a hindrance now. It is similarly unfortunate that we have <code>gcd</code> defined on <code>nat</code> and <code>int</code> independently, but a common generalization will probably be more trouble than it is worth. My suggestion would be to unify the inner products when we have good reason to. Such a reason will then give us more information as to what the unification should be.</p>",
        "id": 171779765,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1564152462
    },
    {
        "content": "<p>Okay, I'm sold. Looking at both Bourbaki and Pedersen, it seems that they really use a typeclass <code>is_R_or_C</code> on their field! That is, mostly they pretend they have an arbitrary field with conjugation, but occasionally they break into those two cases. It seems the majority of the times they need to case bash are to use polarisation identities (writing inner products as a linear combination of norms), but that the arguments nearly always converging quickly again after using polarisation.</p>",
        "id": 171820737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564186167
    },
    {
        "content": "<p>Perhaps a good solution would be for whoever develops real and/or complex inner product spaces to try to follow a book that attempts to handle both cases in a fairly uniform fashion. That way the two parallel developments shouldn't stray too far from each other.</p>",
        "id": 171820789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564186222
    }
]