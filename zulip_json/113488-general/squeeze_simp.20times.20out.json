[
    {
        "content": "<p>I just encountered a strange behavior while working on a cleanup of manifolds. I have a proof with <code>simp</code> that succeeds, but takes a little bit long. So I replaced the <code>simp</code> with <code>squeeze_simp</code>, but <code>squeeze_simp</code> times out. I have no MWE for this, the code looks like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Smooth manifold structure on the total space of a basic smooth bundle -/</span>\n<span class=\"kn\">instance</span> <span class=\"n\">to_smooth_manifold</span> <span class=\"o\">:</span>\n  <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">model_with_corners_self</span> <span class=\"err\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n  <span class=\"n\">Z</span><span class=\"bp\">.</span><span class=\"n\">to_topological_fiber_bundle_core</span><span class=\"bp\">.</span><span class=\"n\">total_space</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> We have to check that the charts belong to the smooth groupoid, i.e., they are smooth on their</span>\n<span class=\"cm\">  source, and their inverses are smooth on the target. Since both objects are of the same kind, it</span>\n<span class=\"cm\">  suffices to prove the first statement in A below, and then glue back the pieces at the end. -/</span>\n  <span class=\"k\">let</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"n\">model_with_corners</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">model_with_corners_self</span> <span class=\"err\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e&#39;</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">M</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"err\">‚àà</span> <span class=\"n\">atlas</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he&#39;</span> <span class=\"o\">:</span> <span class=\"n\">e&#39;</span> <span class=\"err\">‚àà</span> <span class=\"n\">atlas</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n    <span class=\"n\">times_cont_diff_on</span> <span class=\"err\">ùïú</span> <span class=\"err\">‚ä§</span>\n    <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"err\">‚àò</span> <span class=\"o\">((</span><span class=\"n\">Z</span><span class=\"bp\">.</span><span class=\"n\">chart</span> <span class=\"n\">he</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"bp\">.</span><span class=\"n\">chart</span> <span class=\"n\">he&#39;</span><span class=\"o\">))</span> <span class=\"err\">‚àò</span> <span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">‚Åª¬π</span><span class=\"err\">&#39;</span> <span class=\"o\">((</span><span class=\"n\">Z</span><span class=\"bp\">.</span><span class=\"n\">chart</span> <span class=\"n\">he</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"bp\">.</span><span class=\"n\">chart</span> <span class=\"n\">he&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"err\">‚à©</span> <span class=\"n\">range</span> <span class=\"n\">J</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">e</span> <span class=\"n\">e&#39;</span> <span class=\"n\">he</span> <span class=\"n\">he&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">‚Åª¬π</span><span class=\"err\">&#39;</span> <span class=\"o\">((</span><span class=\"n\">chart</span> <span class=\"n\">Z</span> <span class=\"n\">he</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">chart</span> <span class=\"n\">Z</span> <span class=\"n\">he&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"err\">‚à©</span> <span class=\"n\">range</span> <span class=\"n\">J</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">‚Åª¬π</span><span class=\"err\">&#39;</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"err\">‚à©</span> <span class=\"n\">range</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"n\">squeeze_simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">chart</span><span class=\"o\">,</span> <span class=\"n\">model_with_corners</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">],</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Is there a way to investigate what is going on?</p>",
        "id": 201133887,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592397106
    },
    {
        "content": "<p>Update: I just needed to be more patient to get the result of <code>squeeze_simp</code>, which is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">chart</span><span class=\"o\">,</span> <span class=\"n\">model_with_corners</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">,</span> <span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">prod_to_local_equiv</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">trans_source</span><span class=\"o\">,</span>\n <span class=\"n\">topological_fiber_bundle_core</span><span class=\"bp\">.</span><span class=\"n\">local_triv_fst</span><span class=\"o\">,</span> <span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">coe_coe_symm</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span>\n <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">prod_symm</span><span class=\"o\">,</span> <span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">coe_coe</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span>\n <span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">trans_to_local_equiv</span><span class=\"o\">,</span> <span class=\"n\">mem_prod</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">prod_coe</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">refl_target</span><span class=\"o\">,</span>\n <span class=\"n\">topological_fiber_bundle_core</span><span class=\"bp\">.</span><span class=\"n\">mem_local_triv_target</span><span class=\"o\">,</span> <span class=\"n\">mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">topological_fiber_bundle_core</span><span class=\"bp\">.</span><span class=\"n\">mem_local_triv_source</span><span class=\"o\">,</span>\n <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">symm_source</span><span class=\"o\">,</span> <span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">symm_to_local_equiv</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">trans_target</span><span class=\"o\">,</span>\n <span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">refl_local_equiv</span><span class=\"o\">,</span> <span class=\"n\">base_set</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">refl_source</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">prod_source</span><span class=\"o\">,</span>\n <span class=\"n\">model_with_corners_self_coe</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">coe_trans_symm</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">coe_symm_mk</span><span class=\"o\">,</span> <span class=\"n\">local_equiv</span><span class=\"bp\">.</span><span class=\"n\">prod_target</span><span class=\"o\">,</span>\n <span class=\"n\">topological_fiber_bundle_core</span><span class=\"bp\">.</span><span class=\"n\">local_triv_symm_fst</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>With <code>simp</code>, the proof takes 8s. With <code>squeeze_simp</code>, it takes 87s (yes, eighty-seven seconds!!!)</p>",
        "id": 201134367,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592397377
    },
    {
        "content": "<p>And after pasting the output of <code>squeeze_simp</code>, it goes down to less than one second.</p>",
        "id": 201134439,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592397437
    },
    {
        "content": "<p>So I hope you run this code more than about ten times, then you are getting your money's worth</p>",
        "id": 201134880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592397707
    },
    {
        "content": "<p>maybe part of your response should be to write more simp lemmas? there might be nontrivial things that get \"proven\" multiple times during the <code>simp</code> run</p>",
        "id": 201134945,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592397735
    },
    {
        "content": "<p>The output of <code>simp only</code> is so ugly that I wouldn't want to see this in a (user-editable) file.</p>",
        "id": 201135019,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592397784
    },
    {
        "content": "<p>Writing more simp lemmas wouldn't be a solution: simp lemmas that can be deduced from other simp lemmas are redundant (we have a linter to warn about them) and only make the search space bigger.</p>",
        "id": 201135093,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592397831
    },
    {
        "content": "<p>There is something special here. S√©bastien's manifold theory is simp-heavy in a way that no other area of mathlib ever heard of. It comes from using very bundled stuff that would be impossible to steer without simp.</p>",
        "id": 201135187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592397863
    },
    {
        "content": "<p>And by very bundled I really mean towers of very bundled things.</p>",
        "id": 201135233,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592397891
    },
    {
        "content": "<p>maybe you can get some mileage out of specialized simp sets? like <br>\n<code>meta def manifold_simp := `[simp only [...]]</code></p>",
        "id": 201135426,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592397979
    },
    {
        "content": "<p>This could be true (using simp attributes).</p>",
        "id": 201135563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592398074
    },
    {
        "content": "<p>Does the order of lemmas passed to <code>simp</code> mean anything? Or does the order of lemmas produced by <code>squeeze_simp</code> mean anything?</p>",
        "id": 201136795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592398734
    },
    {
        "content": "<p>The order doesn't matter because the <code>simp</code> lemmas are kept in head-indexed tables</p>",
        "id": 201137055,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592398875
    },
    {
        "content": "<p>The order matters very much because for each head symbol, the simp lemmas are stored in a list.</p>",
        "id": 201137121,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592398913
    },
    {
        "content": "<p>The situation is that <code>squeeze_simp</code> runs <code>simp</code> many times. It tries one set of <code>simp</code> lemmas and it checks if each one in the list is necessary by removing one at a time</p>",
        "id": 201137175,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592398927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> thanks for the correction</p>",
        "id": 201137223,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592398953
    },
    {
        "content": "<p><code>squeeze_simp</code> does not consider this</p>",
        "id": 201137249,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592398967
    },
    {
        "content": "<p>so a successful squeeze_simp runs quadratically in the number of lemmas it outputs, and it provides the guarantee that this set is minimal?</p>",
        "id": 201137792,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592399263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/squeeze_simp.20times.20out/near/201135426\">said</a>:</p>\n<blockquote>\n<p>maybe you can get some mileage out of specialized simp sets? like <br>\n<code>meta def manifold_simp := `[simp only [...]]</code></p>\n</blockquote>\n<p>The problem is that these lemmas typically interact with standard lemmas that are not specific to manifolds. For instance, lemmas on products, or <code>and_self</code>.</p>",
        "id": 201137863,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592399286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/113488-general/topic/squeeze_simp.20times.20out/near/201137249\">said</a>:</p>\n<blockquote>\n<p><code>squeeze_simp</code> does not consider this</p>\n</blockquote>\n<p>Filed as <a href=\"https://github.com/leanprover-community/mathlib/issues/3097\">#3097</a>.</p>",
        "id": 201137894,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592399313
    },
    {
        "content": "<p>ah, so one invocation of <code>manifold_simp</code> just won't make very much progress. if you tried this you would end up more or less doing <code>repeat {manifold_simp &lt;|&gt; simp}</code> and at that point you should just <code>simp</code> instead</p>",
        "id": 201138135,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592399432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> thanks! I have no idea how to fix this without trying a lot of permutations</p>",
        "id": 201138144,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592399435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> it is not guaranteed to be minimal. It is just an effort to shrink the list.</p>",
        "id": 201138233,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592399489
    },
    {
        "content": "<p>It's not just the order that is wrong in that example.  It outputs <code>simp only [k]</code> even though <code>simp</code> uses both <code>k</code> and <code>l</code>.</p>",
        "id": 201138277,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592399511
    },
    {
        "content": "<p>so it doesn't literally run simp only once with each lemma removed?</p>",
        "id": 201138417,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592399573
    },
    {
        "content": "<p>No it does literally rerun <code>simp</code> in that way</p>",
        "id": 201139772,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592400249
    },
    {
        "content": "<p>I'm not sure why it strips useful lemmas.</p>",
        "id": 201139823,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592400281
    },
    {
        "content": "<p>I'm still confused. Does squeeze_simp have a guarantee that if you remove any one of the lemmas in the list, it will no longer close the goal? (This is what I call \"minimal\")</p>",
        "id": 201147539,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592403662
    },
    {
        "content": "<p>Well apparently it doesn't even guarantee what I would consider to be a presupposition of that question, namely that the output list <em>does</em> close the goal in the first place.</p>",
        "id": 201147766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592403762
    },
    {
        "content": "<p>because, as <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> pointed out, the order makes a difference, it's possible that you could reorder the lemmas and remove them and get the same result. <code>squeeze_simp</code> won't find that solution because it doesn't try multiple permutations</p>",
        "id": 201147922,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592403835
    },
    {
        "content": "<p>I don't think minimality is really important for <code>squeeze_simp</code>. What you really want is a reasonably sized simp set that closes the goal (in reasonable time).</p>",
        "id": 201148141,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592403916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> there's an interaction with <code>retrieve</code> that was unforeseen. When restoring the tactic state, it seems to affect the value of the <code>packaged_goal</code> which is basically only an expression. Do you understand that part of the API? It seems like there is a table of expressions that gets modified and those changes get reversed when reverting to a previous proof state. Does that make sense?</p>",
        "id": 201150174,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592404752
    },
    {
        "content": "<p>Metavariables?</p>",
        "id": 201150249,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592404788
    },
    {
        "content": "<p>yeah, I checked those, there's supposed to be none left</p>",
        "id": 201150731,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592404970
    },
    {
        "content": "<p>What else is reverted?  <code>tactic.ref</code>?</p>",
        "id": 201151168,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592405144
    },
    {
        "content": "<p>I think they get reverted too. I'm not sure how that would affect the value of an expression though</p>",
        "id": 201151658,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592405314
    },
    {
        "content": "<p>Continuing from <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/squeeze_simp.20-.20match.20failed.3F!/near/269503031\">here</a>, why would <code>squeeze_simp</code> suggest something that doesn't work? Should we check if it works first so in the worst case scenario it just fails instead of hinting something invalid?</p>\n<p>Then making it try harder with other permutations would become a separated problem in itself.</p>",
        "id": 269503813,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643242833
    },
    {
        "content": "<p>Actually this is not the issue <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 269513648,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643246582
    },
    {
        "content": "<p>Okay I was able to understand part of the issue. <a href=\"https://github.com/leanprover-community/mathlib/blob/05e1845cb0fc52c9d112634b3d0b2e49bec35903/src/tactic/squeeze.lean#L179\">This line</a> builds a <code>name_set</code> from <code>g</code> and it's scrambling the order of appearance of the constants.</p>\n<p>If, instead, I use this other (similar) function (that's not in mathlib yet):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list_constant'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">e.fold</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">e'</span> <span class=\"n\">_</span> <span class=\"n\">es</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">e'.is_constant</span> <span class=\"k\">then</span> <span class=\"n\">es.insert</span> <span class=\"n\">e'.const_name</span> <span class=\"k\">else</span> <span class=\"n\">es</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n</code></pre></div>\n<p>I can retrieve the constants in the right order. Note that it returns <code>list name</code> instead. And this time <code>squeeze_simp</code> is suggesting something that works. But there's a catch!</p>\n<p>I'm using the example that <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> provided in <a href=\"https://github.com/leanprover-community/mathlib/pull/3097\">#3097</a>. This new <code>squeeze_simp</code> is suggesting:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Try this: simp only [k, l, eq_self_iff_true]\n</code></pre></div>\n<p>However, <code>eq_self_iff_true</code> is not really essential there and could be dropped. So <a href=\"https://github.com/leanprover-community/mathlib/blob/05e1845cb0fc52c9d112634b3d0b2e49bec35903/src/tactic/squeeze.lean#L140\"><code>filter_simp_set</code></a> doesn't seem to accomplish the goal described in its docstring yet. And some insight from its author(s) might speed up the investigation.</p>\n<p>Any idea why this could be happening?</p>",
        "id": 269563575,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643285676
    },
    {
        "content": "<p>I'm trying to fix it on this (draft) PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/11696\">#11696</a><br>\nOr maybe we should get away with the unnecessary suggestions for now?</p>",
        "id": 269568656,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643288750
    },
    {
        "content": "<p>Alright, I figured it out. Will commit a test case too.</p>",
        "id": 269580681,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643294123
    }
]