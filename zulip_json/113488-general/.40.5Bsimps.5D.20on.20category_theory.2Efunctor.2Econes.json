[
    {
        "content": "<p>What is the <code>@[simps]</code> tag doing <a href=\"https://github.com/leanprover-community/mathlib/blob/cbb8f0192510d0b7f47e4fe8ecf31837b7906117/src/category_theory/limits/cones.lean#L35-L36\">here</a>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cones</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">⋙</span> <span class=\"n\">yoneda.obj</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>Hovering over <code>simps</code> tells me \"Automatically derive lemmas specifying the projections of this declaration.\" But <code>#print prefix category_theory.functor.cones</code> tells me that there's only <code>cones</code> and <code>cones.equations._eqn_1</code>. The latter is not tagged <code>simp</code> and the former has one of these incomprehensible <code>simps</code> tags which means I can't tell what it's been tagged with. Is it actually doing nothing?</p>",
        "id": 243073612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623959142
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.cones</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"c1\">-- morphism levels before object levels. See note [category_theory universes].</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.category</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.functor</span>\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">functor</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">⋙</span> <span class=\"n\">yoneda.obj</span> <span class=\"n\">F</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foobar_obj</span>\n<span class=\"k\">#check</span> <span class=\"n\">foobar_map_app</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">functor</span>\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 243074910,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623959694
    },
    {
        "content": "<p>(not a minimized example... I copied the initial code from the link above)</p>",
        "id": 243076702,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623960432
    },
    {
        "content": "<p>You can see the generated lemmas by replacing <code>@[simps]</code> by <code>@[simps?]</code>.</p>",
        "id": 243082587,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623962959
    },
    {
        "content": "<p>or you can look at the next few declarations after <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.functor.cones\">docs#category_theory.functor.cones</a></p>",
        "id": 243082818,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623963058
    }
]