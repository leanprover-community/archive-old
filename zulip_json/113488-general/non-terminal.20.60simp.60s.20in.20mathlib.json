[
    {
        "content": "<p>Can we lint for non-terminal <code>simp</code>s? Can we automatically list all non-terminal <code>simp</code>s or <code>dsimp</code>s for which the output of <code>squeeze_(d)simp</code> doesn't work as a drop-in replacement?</p>\n<p>I was surprised to see a non-terminal <code>simp</code> in mathlib but apparently there are plenty around.</p>",
        "id": 291241345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659037085
    },
    {
        "content": "<p>Redefining <code>simp</code> to mean <code>simp; done</code> would error on all non-terminal <code>simp</code>s, but would probably be a lot of effort...</p>",
        "id": 291241695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659037273
    },
    {
        "content": "<p>Or just making <code>simp</code> emit a warning in those cases</p>",
        "id": 291241989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659037430
    },
    {
        "content": "<p>Which mathlib would ban as it can't be noisy</p>",
        "id": 291242056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659037446
    },
    {
        "content": "<p>This is bad, because a few tactics are allowed after <code>simp</code>, for example <code>refl</code> (but maybe <code>done</code> calls <code>refl</code>?).</p>",
        "id": 291242097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659037467
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/A.20first.20proof/near/291241627\">cross link about squeeze_dsimp</a></p>",
        "id": 291242152,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659037506
    },
    {
        "content": "<p>You could also do <code>simp; refl; done</code>.</p>",
        "id": 291242227,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659037546
    },
    {
        "content": "<p>It seems <code>simp, refl</code> can always be replaced by <code>simpa</code> (but <code>simpa</code> also checks the assumptions which may be a waste of CPU cycles?).</p>",
        "id": 291242394,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659037617
    },
    {
        "content": "<p>I'm generally happy with <code>simp, ring</code> as well as <code>simp, refl</code> but I'm not too happy with too much else (in the sense that I try to avoid it in code I write).</p>",
        "id": 291242815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659037815
    },
    {
        "content": "<p>I suspect that it is easy to make future uses of simp comply with no non-terminal use.  Backporting this would likely be a lot of work due to many edge-cases and widespread use of <code>simp</code>.</p>",
        "id": 291243003,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659037911
    },
    {
        "content": "<p>I understand the rule as \"<code>simp</code> and it's done\".</p>",
        "id": 291243068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659037930
    },
    {
        "content": "<p>I understand the rule as \"<code>simp</code> and it's done\".</p>",
        "id": 291243083,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659037940
    },
    {
        "content": "<p>We could have a <code>simp_old</code> with the current behaviour and sed for it.  And then have the new <code>simp</code> with some form of check (tracing something seems a good idea, so you coul still use it while in the middle of a proof, before cleaning up).</p>",
        "id": 291243231,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659038023
    },
    {
        "content": "<p>Regarding <code>simpa</code> for <code>simp, refl</code>: I remember Mario being horrified by this use when this came up in an earlier thread.</p>",
        "id": 291243446,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659038108
    },
    {
        "content": "<p>Here is a proposal: <code>simp; reflexivity, done &lt;|&gt; trace \"squeeze me\"</code>.</p>",
        "id": 291244481,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659038525
    },
    {
        "content": "<p>I also like to use <code>simpa using h</code> when <code>h</code> simplifies to <code>false</code>, just to throw in another way Mario might be horrified at how we use his creation.</p>",
        "id": 291245471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659039026
    },
    {
        "content": "<p>Oh, I use simpa to show false: I did not realize that Mario did not like that either!</p>",
        "id": 291245588,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659039091
    },
    {
        "content": "<p>I had assumed it's off-label usage, but maybe it was meant for this.</p>",
        "id": 291245719,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659039156
    },
    {
        "content": "<p>Probably we should have <code>simpr</code> or <code>simpf</code> or other monstrously-named tactics to do these special cases. The reason I don't mind <code>simp, ring</code> is that I figure that if <code>simp</code> has turned the goal into something that <code>ring</code> can solve then no amount of further simplification is going to break the <code>ring</code> application.</p>",
        "id": 291245780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659039192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/non-terminal.20.60simp.60s.20in.20mathlib/near/291242097\">said</a>:</p>\n<blockquote>\n<p>This is bad, because a few tactics are allowed after <code>simp</code>, for example <code>refl</code> (but maybe <code>done</code> calls <code>refl</code>?).</p>\n</blockquote>\n<p>this really shouldn't be allowed, and if you want it you should spell it out with <code>simpa using rfl</code></p>",
        "id": 291246120,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659039349
    },
    {
        "content": "<p>no tactics after <code>simp</code> are ever safe</p>",
        "id": 291246230,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659039387
    },
    {
        "content": "<p>is my opnion idk</p>",
        "id": 291246246,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659039394
    },
    {
        "content": "<p>While we are on this topic, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_eq_zero\">docs#mul_eq_zero</a> seems to go against what Kevin said about <code>simp, ring</code>.  This is a personal battle of mine again this simp lemma... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 291246273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659039409
    },
    {
        "content": "<p>What about after <code>norm_num</code>, which calls <code>simp</code>?</p>",
        "id": 291246274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659039410
    },
    {
        "content": "<p>Does norm_num call \"free-style\" simp or is it <code>simp only</code>s?</p>",
        "id": 291246361,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659039473
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.symm</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 291246503,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659039529
    },
    {
        "content": "<p>it's <code>simp [-one_div]</code></p>",
        "id": 291246535,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659039543
    },
    {
        "content": "<p>dear lord</p>",
        "id": 291246538,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659039545
    },
    {
        "content": "<p>gaargh <code>mul_eq_zero</code> is evil!</p>",
        "id": 291246801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659039673
    },
    {
        "content": "<p>I think mul_eq_zero makes sense as an informal simp lemma, but as an actual simp lemma, i always have to -it.</p>",
        "id": 291246995,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659039776
    },
    {
        "content": "<p>Sometimes a change to simp lemmas could change the final <code>refl</code> from necessary to unnecessary, or vice versa. Which means you need to change <code>simpa</code> to <code>simp</code> or vice versa. But this is easy to fix.</p>",
        "id": 291249135,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659040837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/non-terminal.20.60simp.60s.20in.20mathlib/near/291245471\">said</a>:</p>\n<blockquote>\n<p>I also like to use <code>simpa using h</code> when <code>h</code> simplifies to <code>false</code>, just to throw in another way Mario might be horrified at how we use his creation.</p>\n</blockquote>\n<p>That would be equivalently <code>simp at h</code>, no?</p>",
        "id": 291251129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659041858
    },
    {
        "content": "<p><code>mul_eq_zero</code> makes sense as an <code>auto</code> style lemma, i.e. if you had <code>simp</code> + some light propositional reasoning. As it is currently I wouldn't expect most <code>x = 0</code> theorems to be <code>simp</code>-able to <code>true</code> which is what you need for <code>mul_eq_zero</code> to be useful</p>",
        "id": 291251497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659042056
    },
    {
        "content": "<p>If one is <code>simp</code>able to <code>true</code> then I bet <code>ring</code> solves it too!</p>",
        "id": 291251704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659042149
    },
    {
        "content": "<p>not necessarily, it might be <code>f x = 0</code> because it's in the kernel of a map or it's a hypothesis provided to simp or it's the cardinality of the empty type or something similarly obscure</p>",
        "id": 291251930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659042283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I managed to manually squeeze the last two <code>dsimp</code>s on that branch! You're right, <code>show_term</code> doesn't do anything helpful. I kept throwing in the head symbol until it worked. The final proof (line 408) is now two lines longer because the list is long, but it compiles much more quickly.</p>",
        "id": 291254910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659044049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks for the work! It seems clear that removing non-terminal dsimp is much more difficult than removing non-terminal simps, which may contribute to the fact that non-terminal dsimp is much more prevalent. (I guess one could also consider using <code>squeeze_simp</code> then removing all non-rfl lemmas from the result ...)</p>",
        "id": 291255708,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659044479
    }
]