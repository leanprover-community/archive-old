[
    {
        "content": "<p>My friend and I made a quick little Mandelbrot visualizer in Lean4! <a href=\"https://github.com/chughes87/Mandlebrah\">https://github.com/chughes87/Mandlebrah</a>. It was my first Lean project :D</p>",
        "id": 253962032,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632075475
    },
    {
        "content": "<p>Feedback is welcome/encouraged ;)</p>",
        "id": 253962103,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632075534
    },
    {
        "content": "<p>Do you have something which is tweetable? e.g. an actual png file or whatever?</p>",
        "id": 253962782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632076255
    },
    {
        "content": "<p>oh -- I just checked and my linux box will open the ppm file as a picture file. But would a Windows machine? The browsers I'm trying just open it as a text file.</p>",
        "id": 253962899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632076367
    },
    {
        "content": "<p>I could probably generate one if you want</p>",
        "id": 253962999,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632076465
    },
    {
        "content": "<p>If you pushed a png file to the repo and then I linked to the raw file then I'm guessing a browser would open it as a picture, but I might be wrong.</p>",
        "id": 253963052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632076551
    },
    {
        "content": "<p>pushed</p>",
        "id": 253963233,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632076690
    },
    {
        "content": "<p>I'm having a hard time building the project in OSX latest version. I uninstalled and reinstalled xcode stuff and it wasnt helpful</p>",
        "id": 253963370,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632076828
    },
    {
        "content": "<p>I got the image just by running it in vscode lol</p>",
        "id": 253963378,
        "sender_full_name": "Charles Hughes",
        "timestamp": 1632076844
    },
    {
        "content": "<p>Now Iâ€™m trying to figure out how to test this. in particular buildDimToComplex. How do I express a theorem regarding the relationship a the space of complex numbers it maps too, like that all of them are equally spaced?</p>",
        "id": 253975643,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632089755
    },
    {
        "content": "<p>Here is a pr with some that i'd be interested in <a href=\"https://github.com/chughes87/Mandlebrah/pull/2\">https://github.com/chughes87/Mandlebrah/pull/2</a></p>",
        "id": 253976416,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632090680
    },
    {
        "content": "<p>Short answer: It's floats, give up</p>",
        "id": 253976889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091249
    },
    {
        "content": "<p>(1) Floats are axiomatized in lean 4 so there are no interesting theorems to prove about them, and (2) even if they weren't, all the interesting theorems about floats are false</p>",
        "id": 253976960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091327
    },
    {
        "content": "<p>Come on, Mario, you know that's not true!</p>",
        "id": 253976999,
        "sender_full_name": "Cody Roux",
        "timestamp": 1632091398
    },
    {
        "content": "<p>I consider a proper marriage of floats and verification using interval arithmetic or similar to be an open engineering problem</p>",
        "id": 253977051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091446
    },
    {
        "content": "<p>In Coq you have <a href=\"http://flocq.gforge.inria.fr/\">this</a></p>\n<p>Probably wouldn't be the worst thing in the world to port that to Lean, but....</p>",
        "id": 253977058,
        "sender_full_name": "Cody Roux",
        "timestamp": 1632091452
    },
    {
        "content": "<p>Porting that to lean would indeed solve problem (1)</p>",
        "id": 253977073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091479
    },
    {
        "content": "<p>it would also prove that problem (2) is a problem</p>",
        "id": 253977083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091491
    },
    {
        "content": "<p>Disclaimer: I did a postdoc with Guillaume on porting the excellent <a href=\"http://gappa.gforge.inria.fr/\">Gappa</a> to SMT.</p>\n<p>It's proof producing!</p>",
        "id": 253977107,
        "sender_full_name": "Cody Roux",
        "timestamp": 1632091510
    },
    {
        "content": "<p>ah, now that looks more like it</p>",
        "id": 253977184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091575
    },
    {
        "content": "<p>There are plenty of interesting theorems for programs involving floats. Almost all require the numbers to be bounded by some \"reasonable\" constant though.</p>",
        "id": 253977188,
        "sender_full_name": "Cody Roux",
        "timestamp": 1632091580
    },
    {
        "content": "<p>interesting. What if i switched it to rational complex numbers instead of real complex numbers?</p>",
        "id": 253977200,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632091610
    },
    {
        "content": "<p>those would definitely be usable in verification</p>",
        "id": 253977209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091629
    },
    {
        "content": "<p>but there is probably a concern with the numbers blowing up since you are squaring repeatedly</p>",
        "id": 253977220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091651
    },
    {
        "content": "<p>with the caveat that they are notoriously slow in \"real\" numerics</p>",
        "id": 253977224,
        "sender_full_name": "Cody Roux",
        "timestamp": 1632091659
    },
    {
        "content": "<p>Interesting, I'd have to make my fractions reduce? Does a recursively squared fraction always eventually become reducible?</p>",
        "id": 253977328,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632091779
    },
    {
        "content": "<p>no, in fact it never does</p>",
        "id": 253977440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091899
    },
    {
        "content": "<p>if you want to reduce you will have to approximate, which brings back 60% of the pain of floats</p>",
        "id": 253977493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632091929
    },
    {
        "content": "<p>Interesting! Hahaahah, practical tools are always lies.</p>",
        "id": 253977512,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632091962
    },
    {
        "content": "<p>The paper for flocq is really interesting, thank you for the pointer <span class=\"user-mention\" data-user-id=\"116028\">@Cody Roux</span>  .</p>",
        "id": 253977788,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632092288
    },
    {
        "content": "<p>What  is the lean equivalent of Fixpoint?</p>",
        "id": 253978527,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632093076
    },
    {
        "content": "<p><code>def</code></p>",
        "id": 253979827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632094377
    },
    {
        "content": "<p>You can just write recursive definitions without a special keyword</p>",
        "id": 253979836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632094392
    },
    {
        "content": "<p>Niceee! Ty.</p>",
        "id": 253979839,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632094402
    },
    {
        "content": "<p>Gotta make BinaryIntegers first</p>",
        "id": 253979844,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632094416
    },
    {
        "content": "<p>Ah, you are probably better off using <code>Nat</code> for that</p>",
        "id": 253979852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632094436
    },
    {
        "content": "<p>Excellent, I was worried it used the structure of the BinaryInteger to encode the float.</p>",
        "id": 253979932,
        "sender_full_name": "Eric Fode (he) (S'12)",
        "timestamp": 1632094501
    },
    {
        "content": "<p>If it is a bounded numeric type you might get by with using <code>UInt8</code> or one of the other types; if it has a weird size then you can use a subtype like <code>{n : Nat // n &lt; 37}</code> (which I guess is the same as <code>Fin 37</code>)</p>",
        "id": 253980310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632094936
    },
    {
        "content": "<p>As a word of warning: floats are actually pretty finicky, you might want to try fixed-point integers, which have better properties.</p>",
        "id": 253984758,
        "sender_full_name": "Cody Roux",
        "timestamp": 1632099488
    }
]