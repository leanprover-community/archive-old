[
    {
        "content": "<p>I tried to redefine <code>free_group.to_group</code> as a bundled <code>monoid_hom</code>, and failed. It turns out that <code>to_group f</code> has type <code>@monoid_hom.{u v} (free_group.{u} α) β (@group.to_monoid.{u} (free_group.{u} α) (@free_group.group.{u} α))\n    (@group.to_monoid.{v} β ?m_1)</code>, and Lean doesn't try to fill in <code>?m_1</code> before doing the <code>coe_fn</code> search. Any chance to have this fixed in 3.x? I have no idea if it is a hard or an easy task.</p>",
        "id": 188154350,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581629579
    },
    {
        "content": "<p>I mean, a proper fix would make Lean realize that this is <code>monoid_hom _ _</code>, so we already know how to coerce it to a function but I guess it might be easier to fix the order of instance resolution thus fixing a bug in some cases.</p>",
        "id": 188154648,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581629797
    },
    {
        "content": "<p>This issue comes up in many contexts, frequently with <code>equiv</code>. For example, in the type of <code>adjunction.hom_equiv</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">hom_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>We would much prefer <code>X</code> and <code>Y</code> to be implicit parameters, since they are nearly always obvious from context. But then the type <code>(F.obj X ⟶ Y) ≃ (X ⟶ G.obj Y)</code> is not yet fully known and so it will not be usable as a function because the coercion will not fire. You always have to specify <code>X</code> and <code>Y</code> explicitly (explicitly enough that they can be inferred without considering the context at the use site of <code>hom_equiv</code>).</p>",
        "id": 188155104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581630102
    },
    {
        "content": "<p>Fixing this would mean allowing instance search to run (or, perhaps, allowing it to succeed) when there are still metavariables in the goal of the instance search (here <code>coe_to_fun (monoid_hom ?m_1 ?m_2)</code> or similar). I would say it is unclear how difficult this would be to change, and also unclear what other problems it might introduce.</p>",
        "id": 188155282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581630188
    },
    {
        "content": "<p>In my example it is more like <code>coe_to_fun (@monoid_hom α β _inst_1 ?m1)</code></p>",
        "id": 188155484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581630313
    },
    {
        "content": "<p>I mean that both <code>α</code> and <code>β</code> are already known.</p>",
        "id": 188155502,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581630327
    },
    {
        "content": "<p>It would be strange to make <code>monoid β</code> (or <code>group β</code> in my example) an explicit parameter.</p>",
        "id": 188155602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581630379
    },
    {
        "content": "<p>I guess it is a bit different because you expect the <code>monoid beta</code> argument also to be supplied by instance search, right?</p>",
        "id": 188155833,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581630527
    },
    {
        "content": "<p>Right.</p>",
        "id": 188155860,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581630544
    },
    {
        "content": "<p>Seems like a delicate situation</p>",
        "id": 188156067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581630686
    },
    {
        "content": "<p>BTW, is there any reason not to go the Python way? I mean, if we want to treat <code>f</code> as a function, try <code>f.to_fun</code> first; if it falls, try <code>coe_fn</code> for compatibility.</p>",
        "id": 188160821,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581634052
    },
    {
        "content": "<p>The first option will work in (almost?)  all mathlib use cases</p>",
        "id": 188162662,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581635603
    },
    {
        "content": "<p>This particular case (not-yet-elaborated class instance makes <code>coe_fn</code> fail) makes it hard to use bundled homs in <code>free_group.to_group</code>, <code>quotient_group.lift</code> and AFAIR <code>mv_polynomial.map</code> hits the same problem.</p>",
        "id": 188169329,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581642204
    },
    {
        "content": "<p>BTW, is it going to work in Lean 4?</p>",
        "id": 188171136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581644218
    },
    {
        "content": "<p>Supposedly</p>",
        "id": 188171701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581645089
    },
    {
        "content": "<p>How hard would be to make a workaround for Lean3?</p>",
        "id": 188177960,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581655413
    },
    {
        "content": "<p>Just to mention that this is the reason why, in the manifold files, I use <code>f.to_fun</code>and <code>f.inv_fun</code> for local homeos or local equivs: I first tried with coercions, and Lean got confused all the time.</p>",
        "id": 188185261,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1581666902
    },
    {
        "content": "<p>This is a well-known issue. Coercions to functions just don't work in Lean 3.</p>",
        "id": 188186643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581668434
    },
    {
        "content": "<p>We can only hope they will work in Lean 4.</p>",
        "id": 188186651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581668458
    },
    {
        "content": "<p>A student of mine is writing a group cohomology repo using bundled homs and coercions to functions. We're just at this stage basically, we need to make a decision about whether to coerce or not. I thought that coercions worked quite well at this basic level (we're doing morphisms of G-modules). Now you're making me wonder whether we should switch but I don't think Anca had too many problems when she did H^0 and H^1 and also used bundled G-module homs</p>",
        "id": 188186742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581668561
    },
    {
        "content": "<p>I wouldn't necessarily be too eager to switch away from coercions, particularly if you don't intend to PR the result to mathlib. It's hard to predict whether you will encounter these inference issues.</p>",
        "id": 188213368,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581692522
    },
    {
        "content": "<p>And it's not really that hard to switch later anyways, so not much is riding on the choice</p>",
        "id": 188213499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581692611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/coe_fn.20and.20class.20instances/near/188171701\" title=\"#narrow/stream/113488-general/topic/coe_fn.20and.20class.20instances/near/188171701\">said</a>:</p>\n<blockquote>\n<p>Supposedly</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/Reid1.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/Reid1.lean\">Indeed</a></p>",
        "id": 188286440,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1581778564
    },
    {
        "content": "<p>Since <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> fixed one bug with <code>coe_fn</code>, let me try to revive this thread. Is it hard to make <code>coe_fn</code> work when some arguments are missing, i.e., try to unfold <code>has_coe_to_fun.F</code> and see if it actually uses the missing arguments? If this is hard,  what about looking up missing <code>[class_instance _]</code> arguments?</p>",
        "id": 196248069,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588631567
    }
]