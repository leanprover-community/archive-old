[
    {
        "content": "<p>On my way to <a href=\"https://github.com/leanprover-community/mathlib/issues/5035\">#5035</a> (making <code>continuous</code> irreducible), I was surprised that <code>irreducible</code> is not as irreducible as I thought it was (so in the end I made it a structure, to avoid this kind of issues). Exercise: in the next lemmas, guess which proof(s?) succeed, if any, and which fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo4</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">delta</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217127843,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605702455
    },
    {
        "content": "<p>Since people are apparently surprised by this behavior: <code>irreducible</code> only affects definitional equality, i.e. the unification when Lean figures out if two types are the same.  (And it doesn't affect the kernel either: you can still write a tactic that produces a <code>rfl</code> proof; check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.unsafe_change\">docs#tactic.unsafe_change</a>.)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p><span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>1-3 all make use of the equation lemmas that are automatically generated when you add a definition (check out <code>#print prefix n</code>).  This works no matter whether the reduction is definitional is or not.  (You can also add your own equation lemmas using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.add_eqn_lemma\">docs#environment.add_eqn_lemma</a>!)<br>\n4 replaces a constant by its definition, what else did you expect when calling <code>delta n</code>.</p>\n</div></div>",
        "id": 217129544,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605703658
    },
    {
        "content": "<p>I thought one of <code>unfold</code> or <code>delta</code> wasn't relying on the equation lemmas, but instead used the bare definition (and so should have been stuck by the irreducible attribute). Clearly, I was wrong! All proofs work fine, except for the <code>rfl</code> one.</p>",
        "id": 217131935,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605705031
    },
    {
        "content": "<p>I thought unfold was basically <code>simp only [equation lemmas]</code> and delta was \"replace this name by its definition\". I \"knew\" that <code>irreducible</code> would stop at least one from working though ;-)</p>",
        "id": 217132372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605705346
    },
    {
        "content": "<p><code>unfold</code> is implemented using <code>simp</code>. <br>\n<code>dunfold</code> is implemented using <code>dsimp</code>. <br>\n<code>delta</code> is implemented \"by hand\".</p>",
        "id": 217132498,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605705408
    },
    {
        "content": "<p>for completeness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo5</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">tactic.unsafe_change</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">),</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217136082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605707379
    },
    {
        "content": "<p>is there <code>unsafe_exact</code>?</p>",
        "id": 217136342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605707479
    },
    {
        "content": "<p>the <code>unsafe_change</code> proof still sticks an <code>id</code> in the term</p>",
        "id": 217136398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605707507
    }
]