[
    {
        "content": "<p>Let's assume <code>foo</code> is a list.<br>\nHow can i make this work :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n   <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n   <span class=\"n\">baz</span> <span class=\"n\">n</span> <span class=\"n\">foo</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 267915286,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1642100724
    },
    {
        "content": "<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? What happens if <code>foo = []</code>?</p>",
        "id": 267915814,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642100954
    },
    {
        "content": "<p>If <code>foo = []</code> the calculation end here, because the how the list monad work ?</p>",
        "id": 267915946,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1642101009
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.attach\">docs#list.attach</a></p>",
        "id": 267916316,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642101193
    },
    {
        "content": "<p><code>do</code> uses a non-dependent bind.  We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.pbind\">docs#option.pbind</a> for a dependent bind, but not (yet I guess) for list</p>",
        "id": 267916496,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642101274
    },
    {
        "content": "<p>So you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">foo.attach</span>\n   <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n.val</span> <span class=\"bp\">∈</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">n.prop</span>\n   <span class=\"n\">baz</span> <span class=\"n\">n.val</span> <span class=\"n\">foo</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 267916587,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642101321
    },
    {
        "content": "<p>Great, thank you</p>",
        "id": 267916794,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1642101397
    }
]