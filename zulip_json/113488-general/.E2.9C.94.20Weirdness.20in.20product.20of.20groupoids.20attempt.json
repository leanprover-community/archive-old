[
    {
        "content": "<p>Could you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> so I could paste your source code into my editor?</p>",
        "id": 264963961,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639542322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> The code with the blank lines bug also has the rest of the code: <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20category_theory.groupoid%0Aimport%20category_theory.products.basic%0A%0A%0A%0A%0A%0A%0A%0Auniverse%20u%0A%0Aabbreviation%20inv%20%3A%3D%20%40category_theory.groupoid.inv%0A%0Ainstance%20groupoid_prod%20%7BX%20%3A%20Type%20u%7D%20%5Bcategory_theory.groupoid.%7Bu%7D%20X%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7BY%20%3A%20Type%20u%7D%20%5Bcategory_theory.groupoid.%7Bu%7D%20Y%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%20category_theory.groupoid.%7Bu%7D%20%28X%20%C3%97%20Y%29%20%3A%3D%20%0A%7B%0A%20%20inv%20%3A%3D%20%CE%BB%20%28x%20y%20%3A%20X%20%C3%97%20Y%29%20%28f%20%3A%20%28x.1%20%E2%9F%B6%20y.1%29%20%C3%97%20%28x.2%20%E2%9F%B6%20y.2%29%29%2C%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%28inv%20f.1%2C%20inv%20f.2%29%2C%0A%20%20inv_comp'%20%3A%3D%0A%20%20begin%0A%0A%0A%0A%0A%0A%0A%0A%0A%20%20%20%20skip%2C%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%20%20%20%20intros%20x%20y%20f%2C%0A%20%20%20%20--%20change%20%28%28inv%20f.1%2C%20inv%20f.2%29%20%3A%20y%20%E2%9F%B6%20x%29%20%E2%89%AB%20%28%28f.1%2C%20f.2%29%20%3A%20x%20%E2%9F%B6%20y%29%20%3D%20%F0%9D%9F%99%20y%2C%0A%20%20%20%20let%20inv_f%20%3A%20y%20%E2%9F%B6%20x%20%3A%3D%20%28inv%20f.1%2C%20inv%20f.2%29%2C%0A%20%20%20%20let%20f_hom%20%3A%20x%20%E2%9F%B6%20y%20%3A%3D%20%28f.1%2C%20f.2%29%2C%0A%20%20%20%20change%20inv_f%20%E2%89%AB%20f_hom%20%3D%20%F0%9D%9F%99%20y%2C%0A%20%20%20%20have%20prodcomp%20%3A%20%28inv_f%20%E2%89%AB%20f_hom%20%3D%20_%29%20%0A%20%20%20%20%3A%3D%20%40category_theory.prod_comp%20_%20_%20_%20_%0A%20%20%20%20%20%20_%20_%20_%20_%20_%20_%20inv_f%20f_hom%2C%0A%20%20%20%20rw%20prodcomp%2C%0A%20%20%20%20simpa%2C%0A%20%20end%2C%0A%20%20%0A%20%20comp_inv'%20%3A%3D%0A%20%20begin%0A%20%20%20%20intros%20x%20y%20f%2C%0A%20%20%20%20let%20inv_f%20%3A%20y%20%E2%9F%B6%20x%20%3A%3D%20%28inv%20f.1%2C%20inv%20f.2%29%2C%0A%20%20%20%20let%20f_hom%20%3A%20x%20%E2%9F%B6%20y%20%3A%3D%20%28f.1%2C%20f.2%29%2C%0A%20%20%20%20change%20f_hom%20%E2%89%AB%20inv_f%20%3D%20%F0%9D%9F%99%20x%2C%0A%20%20%20%20have%20prodcomp%20%3A%20%28f_hom%20%E2%89%AB%20inv_f%20%3D%20_%29%20%0A%20%20%20%20%3A%3D%20%40category_theory.prod_comp%20_%20_%20_%20_%0A%20%20%20%20%20%20_%20_%20_%20_%20_%20_%20f_hom%20inv_f%2C%0A%20%20%20%20rw%20prodcomp%2C%0A%20%20%20%20simpa%2C%0A%20%20end%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%7D%0A%0A%0A%0A\">this is the link</a></p>\n<p>The full code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.groupoid</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n\n\n\n\n\n\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">category_theory.groupoid.inv</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">groupoid_prod</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category_theory.groupoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n                    <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category_theory.groupoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n                  <span class=\"o\">:</span> <span class=\"n\">category_theory.groupoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">√ó</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">√ó</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">x.2</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">y.2</span><span class=\"o\">)),</span>\n            <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">f.1</span><span class=\"o\">,</span> <span class=\"n\">inv</span> <span class=\"n\">f.2</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_comp'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n\n\n\n\n\n\n\n\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n\n\n\n\n\n\n\n\n\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- change ((inv f.1, inv f.2) : y ‚ü∂ x) ‚â´ ((f.1, f.2) : x ‚ü∂ y) = ùüô y,</span>\n    <span class=\"k\">let</span> <span class=\"n\">inv_f</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">f.1</span><span class=\"o\">,</span> <span class=\"n\">inv</span> <span class=\"n\">f.2</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">f_hom</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.1</span><span class=\"o\">,</span> <span class=\"n\">f.2</span><span class=\"o\">),</span>\n    <span class=\"n\">change</span> <span class=\"n\">inv_f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f_hom</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">prodcomp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inv_f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f_hom</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">category_theory.prod_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">inv_f</span> <span class=\"n\">f_hom</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">prodcomp</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"n\">comp_inv'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">inv_f</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">f.1</span><span class=\"o\">,</span> <span class=\"n\">inv</span> <span class=\"n\">f.2</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">f_hom</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.1</span><span class=\"o\">,</span> <span class=\"n\">f.2</span><span class=\"o\">),</span>\n    <span class=\"n\">change</span> <span class=\"n\">f_hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">inv_f</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">prodcomp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f_hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">inv_f</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">category_theory.prod_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f_hom</span> <span class=\"n\">inv_f</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">prodcomp</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264964179,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1639542494
    },
    {
        "content": "<p>It would be easier if you just paste it into zulip</p>",
        "id": 264964203,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639542515
    },
    {
        "content": "<p>Anyway, this works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.groupoid</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">groupoid_prod</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category_theory.groupoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category_theory.groupoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">category_theory.groupoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">√ó</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">groupoid.inv</span> <span class=\"n\">f.fst</span><span class=\"o\">,</span> <span class=\"n\">groupoid.inv</span> <span class=\"n\">f.snd</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264964249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639542572
    },
    {
        "content": "<p>The <code>auto_param</code>s in the required proofs is able to close the goals.</p>",
        "id": 264964266,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639542596
    },
    {
        "content": "<p><del>Your code is missing imports btw.</del></p>",
        "id": 264964322,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639542619
    },
    {
        "content": "<p>The strange behavior you noticed is probably some minor bug in the vscode extension, if I had to guess... Why do you want all the blank lines anyway?</p>",
        "id": 264964431,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639542742
    },
    {
        "content": "<p>It can't be the VS Code extension because the problem is reproduced online as well, right?<br>\nI don't want the blank lines, it was just something weird that I noticed.</p>",
        "id": 264964484,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1639542822
    },
    {
        "content": "<p>I agree it's strange.</p>",
        "id": 264964588,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639542911
    },
    {
        "content": "<p>It looks like somehow the <code>id_comp'</code> field is picked up after the skip.</p>",
        "id": 264964624,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639542960
    },
    {
        "content": "<p>Even though <code>id_comp'</code> was omitted because it's part of the category theory structure which is inferred.</p>",
        "id": 264964678,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639542984
    },
    {
        "content": "<p>Also, could someone explain why in the original proofs, the <code>change</code> wasn't working originally, and the <code>prodcomp</code> had to be moved to its own variable? I'm just substituting equal things for other things that are equal. Specifically, why doesn't this work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inv_comp'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"n\">inv</span> <span class=\"n\">f.1</span><span class=\"o\">,</span> <span class=\"n\">inv</span> <span class=\"n\">f.2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"o\">((</span><span class=\"n\">f.1</span><span class=\"o\">,</span> <span class=\"n\">f.2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">category_theory.prod_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">inv_f</span> <span class=\"n\">f_hom</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>(which is what I originally wanted to write).</p>",
        "id": 264965166,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1639543507
    },
    {
        "content": "<p>because <code>f</code> is not defeq to <code>(f.fst,f.snd)</code>. If you first do <code>cases f</code>, then the change should work.</p>",
        "id": 264965500,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639543852
    },
    {
        "content": "<p>Oh wait, that's not quite the issue. one sec</p>",
        "id": 264965538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639543914
    },
    {
        "content": "<p>The goal showing up different is the \"line 65 character 33\" bug, it's solely visual, not the actual goal. It exists not just in VSCode but all other editors.</p>",
        "id": 264965598,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639543952
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Extension.20showing.20goal.20for.20a.20separate.20lemma\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Extension.20showing.20goal.20for.20a.20separate.20lemma</a>, <a href=\"https://github.com/leanprover-community/lean/issues/468\">https://github.com/leanprover-community/lean/issues/468</a></p>",
        "id": 264965815,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639544184
    },
    {
        "content": "<p>It looks like lean is having a hard time seeing that the morphisms in the product category are indeed terms of the product of the hom types.</p>",
        "id": 264965818,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639544193
    },
    {
        "content": "<p>That and what I said above: <code>f</code> is not definitionally equal to the pair <code>(f.fst, f.snd)</code>.</p>",
        "id": 264965837,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639544236
    },
    {
        "content": "<p><code>change</code> is a tactic that converts some expression to another expression which is definitionally equal to it.</p>",
        "id": 264965850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639544254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437861\">Praneeth Kolichala</span> has marked this topic as resolved.</p>",
        "id": 264966599,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639545074
    }
]