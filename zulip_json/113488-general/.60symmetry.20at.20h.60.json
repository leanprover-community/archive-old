[
    {
        "content": "<p>I think that if <code>h : a = b</code> then <code>symmetry at h</code> is a much nicer way of changing it to <code>b = a</code> than <code>rw eq_comm at h</code>.</p>",
        "id": 171800867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564167558
    },
    {
        "content": "<p>Probably someone who knew about parsers could just make some <code>symmetry'</code> tactic which does <code>symmetry</code> if there's no <code>at</code> and tries the rewrite if there is.</p>",
        "id": 171801209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564167773
    },
    {
        "content": "<p>usually i just do <code>replace h := h.symm</code>, or otherwise refer to <code>h.symm</code> if i need the other direction of <code>h</code></p>",
        "id": 171801425,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564167911
    },
    {
        "content": "<p>yeah but I'm talking about complete beginners.</p>",
        "id": 171803032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564169161
    },
    {
        "content": "<p>that's understandable</p>\n<p>this works for <code>eq.symm</code>; it probably wouldn't be hard to refactor the private <code>relation_tactic</code> so that <code>target</code> isn't as hardcoded, either:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">symmetry&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"o\">((</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;at&quot;</span><span class=\"o\">)</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">e_h</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">resolve_name</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                 <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">%%</span><span class=\"n\">e_h</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">symmetry</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">symmetry&#39;</span><span class=\"o\">,</span> <span class=\"n\">symmetry&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 171803327,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564169397
    },
    {
        "content": "<p>Consider rather <a href=\"https://github.com/leanprover-community/mathlib/issues/1269\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1269\">#1269</a>. It will work for other relations than <code>=</code></p>",
        "id": 171806891,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1564172243
    },
    {
        "content": "<p>simon's is the correct approach</p>",
        "id": 171808148,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564173451
    },
    {
        "content": "<p>also, whoa i didn't know we had the <code>@</code>-notation available in match expressions!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">symmetry&#39;</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"bp\">@</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">wildcard</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">try_apply</span> <span class=\"n\">symmetry_hyp</span> <span class=\"n\">symmetry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">symmetry_hyp</span> <span class=\"n\">symmetry</span>\n</pre></div>",
        "id": 171808167,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564173481
    },
    {
        "content": "<blockquote>\n<p>Consider rather <a href=\"https://github.com/leanprover-community/mathlib/issues/1269\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1269\">#1269</a>. It will work for other relations than <code>=</code></p>\n</blockquote>\n<p>Thanks a lot Sebastian! ;-)</p>",
        "id": 171815864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564180089
    }
]