[
    {
        "content": "<p>I'm updating the 100 theorems for Lean: <a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\">https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md</a><br>\nfor Freek's 100 theorem project: <a href=\"http://www.cs.ru.nl/~freek/100/\" target=\"_blank\" title=\"http://www.cs.ru.nl/~freek/100/\">http://www.cs.ru.nl/~freek/100/</a></p>\n<p>Who should I cite as the author for De Moivre's Theorem? </p>\n<ul>\n<li>Abhimanyu Pallavi Sudhir, who did the actual theorem (<a href=\"https://github.com/leanprover-community/mathlib/commit/ddc016c64f8ef7227170d08004d8f38ed5f4142b#diff-83318f4d4d102bf1c25a0e0be3c08aa9R563\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/ddc016c64f8ef7227170d08004d8f38ed5f4142b#diff-83318f4d4d102bf1c25a0e0be3c08aa9R563\">link</a>)</li>\n<li>Chris Hughes, who did (or at least committed) all the work, so that the theorem could be proven in a few lines</li>\n<li>or mathlib</li>\n</ul>",
        "id": 166858466,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559165075
    },
    {
        "content": "<p>I'm going through Mario's list. I don't think we have Brouwer's fixed point theorem. I can only find the Banach fixed point theorem: <a href=\"https://github.com/leanprover-community/mathlib/blob/f25340175631cdc85ad768a262433f968d0d6450/src/topology/metric_space/lipschitz.lean#L110\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/f25340175631cdc85ad768a262433f968d0d6450/src/topology/metric_space/lipschitz.lean#L110\">https://github.com/leanprover-community/mathlib/blob/f25340175631cdc85ad768a262433f968d0d6450/src/topology/metric_space/lipschitz.lean#L110</a></p>",
        "id": 166858800,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559165407
    },
    {
        "content": "<p>Do we have Bezout's theorem in mathlib? The closest I can find is <a href=\"https://github.com/leanprover-community/mathlib/blob/78f1949719676db358ea5e68e211a73e2ce95e7b/src/data/int/modeq.lean#L107\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/78f1949719676db358ea5e68e211a73e2ce95e7b/src/data/int/modeq.lean#L107\">https://github.com/leanprover-community/mathlib/blob/78f1949719676db358ea5e68e211a73e2ce95e7b/src/data/int/modeq.lean#L107</a></p>",
        "id": 166860099,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559166370
    },
    {
        "content": "<p>I don't think we can do the Brouwer fixed point theorem without knowing either \\pi_n or H_n of the n-sphere.  (Either one would do, but H_n would be tidier.)  It looks like <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  has defined \\pi_n but we don't have any calculations and we don't have H_n.</p>",
        "id": 166860844,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1559166976
    },
    {
        "content": "<p>We had the number of combinations in Lean 2: <a href=\"https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/library/theories/combinatorics/choose.lean#L208\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/library/theories/combinatorics/choose.lean#L208\">https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/library/theories/combinatorics/choose.lean#L208</a><br>\nI don't think it's in Lean 3 yet. Someone port this! :)</p>",
        "id": 166860914,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559167066
    },
    {
        "content": "<p>That's <code>card_powerset_len</code> at <a href=\"https://github.com/leanprover-community/mathlib/blob/00aaf05a00b928ea9ac09721d87ae5d2ca1ae5a1/src/data/finset.lean#L1300\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/00aaf05a00b928ea9ac09721d87ae5d2ca1ae5a1/src/data/finset.lean#L1300\">https://github.com/leanprover-community/mathlib/blob/00aaf05a00b928ea9ac09721d87ae5d2ca1ae5a1/src/data/finset.lean#L1300</a></p>",
        "id": 166861629,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1559167617
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 166862020,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559167944
    },
    {
        "content": "<p>Ah, when searching for the Euclidean Algorithm, I found Bezout's theorem:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/4845b663c182704738868db5861ffb4c6056be23/src/algebra/euclidean_domain.lean#L233\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/4845b663c182704738868db5861ffb4c6056be23/src/algebra/euclidean_domain.lean#L233\">https://github.com/leanprover-community/mathlib/blob/4845b663c182704738868db5861ffb4c6056be23/src/algebra/euclidean_domain.lean#L233</a></p>",
        "id": 166862042,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559167965
    },
    {
        "content": "<blockquote>\n<p>72. Sylow’s Theorem</p>\n</blockquote>\n<p>What even is Sylow's Theorem? Chris proved all three Sylow Theorems as part of his 1st year project last year: <a href=\"https://github.com/ChrisHughes24/Sylow\" target=\"_blank\" title=\"https://github.com/ChrisHughes24/Sylow\">https://github.com/ChrisHughes24/Sylow</a> . The things I was told were Sylow's theorems are all pretty near the bottom of the file.</p>",
        "id": 166862352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559168220
    },
    {
        "content": "<p>What should I cite as the Euclidean Algorithm? Maybe just the definition of <code>gcd</code>?</p>\n<div class=\"codehilite\"><pre><span></span>def gcd : α → α → α\n| a := λ b, if a0 : a = 0 then b else\n  have h:_ := mod_lt b a0,\n  gcd (b%a) a\nusing_well_founded {dec_tac := tactic.assumption,\n  rel_tac := λ _ _, `[exact ⟨_, r_well_founded α⟩]}\n</pre></div>",
        "id": 166862533,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559168384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think these three theorems: <a href=\"https://en.wikipedia.org/wiki/Sylow_theorems\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Sylow_theorems\">https://en.wikipedia.org/wiki/Sylow_theorems</a></p>\n<p>I saw the first one at the bottom of the <code>sylow.lean</code> file in mathlib, and therefore assumed that the other 2 were not yet proven, but I'll dig a little deeper.</p>",
        "id": 166862758,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559168546
    },
    {
        "content": "<p>The Isabelle version proves only the existence of Sylow p-subgroups, which is what we have in mathlib.  HOL Light, Metamath, Coq and Mizar all have the other theorems: all Sylow subgroups are conjugate, and their number is congruent to one mod p and divides the order of the group.  These also appear in Chris's repository, and should certainly move into mathlib at some point.</p>",
        "id": 166862786,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1559168575
    },
    {
        "content": "<p>I don't know what made it into mathlib; my post linked to the repo Chris wrote for his project. I'm assuming we can link to non-mathlib stuff?</p>",
        "id": 166862925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559168664
    },
    {
        "content": "<p>Of course! I'll link to that repository.</p>",
        "id": 166862972,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559168707
    },
    {
        "content": "<p>I should PR the other two theorems at some point. Haven't done it yet.</p>",
        "id": 166863221,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559168915
    },
    {
        "content": "<p>Did you formalize the last part of Theorem 3?</p>\n<blockquote>\n<p><code>np = |G : NG(P)|</code>, where P is any Sylow p-subgroup of G and NG denotes the normalizer.</p>\n</blockquote>",
        "id": 166863371,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559169027
    },
    {
        "content": "<p>Should I cite Leo de Moura author of The Principle of Mathematical Induction in Lean? :P</p>",
        "id": 166863591,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559169252
    },
    {
        "content": "<p>Have we proven that <code>int</code> is a <code>unique_factorization_domain</code>?</p>",
        "id": 166864630,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559170437
    },
    {
        "content": "<p>We have proven that int is a UFD. This is probably multiple authors, because it goes via general results about Euclidean domains and PIDs. But mainly Johannes. It's there for nat as well, and that was Mario.</p>",
        "id": 166864948,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559170783
    },
    {
        "content": "<p>In <code>algebra.euclidean_domain</code> we have <code>int.euclidean_domain</code>.  In <code>ring_theory.principal_ideal_domain</code> we have  <code> euclidean_domain.to_principal_ideal_domain</code> and <code>principal_ideal_domain.to_unique_factorization_domain</code>.</p>",
        "id": 166865203,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1559170985
    },
    {
        "content": "<p>Ah, thanks!</p>",
        "id": 166865298,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559171051
    },
    {
        "content": "<p>I'll use <code>mathlib</code> as the author.</p>",
        "id": 166865327,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559171100
    },
    {
        "content": "<p>I don't think I formalised that last part of theorem three. I don't understand your statement.</p>",
        "id": 166865333,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559171103
    },
    {
        "content": "<p>Ok. It's the last bullet point of Theorem 3 from Wikipedia: <a href=\"https://en.wikipedia.org/wiki/Sylow_theorems\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Sylow_theorems\">https://en.wikipedia.org/wiki/Sylow_theorems</a></p>",
        "id": 166865406,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559171187
    },
    {
        "content": "<p>But <code>principal_ideal_domain.to_unique_factorization_domain</code> is not an instance, so <code>by apply_instance : unique_factorization_domain ℤ</code> fails.  I'm not sure why that is.  It might be related to the fact that  <code>principal_ideal_domain.to_unique_factorization_domain</code> is marked as <code>noncomputable</code>.</p>",
        "id": 166865618,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1559171374
    },
    {
        "content": "<p>It is because of that fact.</p>",
        "id": 166865759,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559171509
    },
    {
        "content": "<p>That bullet point is the <code>have</code> at line 935 of <a href=\"https://github.com/ChrisHughes24/Sylow/blob/master/src/sylow.lean\" target=\"_blank\" title=\"https://github.com/ChrisHughes24/Sylow/blob/master/src/sylow.lean\">https://github.com/ChrisHughes24/Sylow/blob/master/src/sylow.lean</a>, but it is not stated as a separate theorem.</p>",
        "id": 166865898,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1559171644
    },
    {
        "content": "<p>Ah, ok. Then I'll just write that.</p>",
        "id": 166866094,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559171853
    },
    {
        "content": "<p>I can claim an earlier proof of the IVT, although I'm not sure we want to draw anyone's attention to the days before simp and style conventions! <a href=\"https://github.com/leanprover/lean2/blob/master/library/theories/analysis/ivt.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/library/theories/analysis/ivt.lean\">https://github.com/leanprover/lean2/blob/master/library/theories/analysis/ivt.lean</a></p>",
        "id": 166866780,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559172669
    },
    {
        "content": "<p>I updated the markdown file. We have formalized 23/100 results (that I could find).</p>",
        "id": 166866862,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559172763
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\">https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md</a></p>",
        "id": 166866865,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559172766
    },
    {
        "content": "<p>The ones on Mario's list that I couldn't find:</p>\n<ul>\n<li>78 (cauchy-schwarz)</li>\n<li>94 (law of cosines)</li>\n</ul>",
        "id": 166867045,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559172966
    },
    {
        "content": "<p>In cases that there is not a clear single author, I now liberally used <code>mathlib</code> as an author. If anyone is unhappy with that, feel free to change it.</p>",
        "id": 166867286,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559173307
    },
    {
        "content": "<p>I don't think I should be the author of Bezout's theorem. I more or less copied that proof exactly from the nat version.</p>",
        "id": 166867540,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559173597
    },
    {
        "content": "<p>Ok, I'll change it to mathlib.</p>\n<p>I used Github's history to figure out authorship. This is of course a flawed method. Please check if there are attributions which are clearly wrong.</p>",
        "id": 166867642,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559173722
    },
    {
        "content": "<p>I emailed Freek to point him to the markdown file (Lean now looks so sad with a score of 1 on his page).</p>",
        "id": 166872421,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559179866
    },
    {
        "content": "<p>At <a href=\"http://bim.shef.ac.uk/lean/hundred_theorems.html\" target=\"_blank\" title=\"http://bim.shef.ac.uk/lean/hundred_theorems.html\">http://bim.shef.ac.uk/lean/hundred_theorems.html</a> I put a crude analysis of what would be needed for the remaining theorems.</p>",
        "id": 166885721,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1559199566
    },
    {
        "content": "<p>I think both law of cosines and cauchy schwarz are \"in the air\" at this point, i.e. someone just has to actually write down and prove the statement</p>",
        "id": 166887520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559202007
    },
    {
        "content": "<p>for law of cosines, I'm not quite sure how to do it in a general vector space without it being tautological</p>",
        "id": 166887548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559202069
    },
    {
        "content": "<p>I thought 6. Godel's Incompleteness Theorem was already done?</p>",
        "id": 166887625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559202149
    },
    {
        "content": "<p>certainly not. I think isabelle has the only known proof</p>",
        "id": 166887829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559202481
    },
    {
        "content": "<p>oh, Freek says there are also others</p>",
        "id": 166887895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559202535
    },
    {
        "content": "<p>but it's one of the \"hard problems\" on the list</p>",
        "id": 166887909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559202557
    },
    {
        "content": "<p>you have to build proof theory first</p>",
        "id": 166887912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559202568
    },
    {
        "content": "<p>I thought someone proved it in the conference we went to</p>",
        "id": 166887996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559202699
    },
    {
        "content": "<p>I remember the independence of continuum hypothesis having been proved</p>",
        "id": 166888041,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559202725
    },
    {
        "content": "<p>so there is definitely a proof theory</p>",
        "id": 166888044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559202731
    },
    {
        "content": "<p>That's true, Floris and Jesse are soon to be the first to do the independence of the continuum hypothesis, and they had to build a proof theory for that</p>",
        "id": 166888080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559202810
    },
    {
        "content": "<p>but they didn't do anything with arithmetization (although I did, for computability stuff)</p>",
        "id": 166888089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559202831
    },
    {
        "content": "<p>you still have to do quite a lot of work in the embedded proof theory (basically PA), and we're slowly learning how to do that without tearing our hair out</p>",
        "id": 166888161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559202923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209442\">@Martin Skilleter</span> has the Cauchy-Schwarz inequality.</p>",
        "id": 166888168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559202939
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md#86-lebesgue-measure-and-integration\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md#86-lebesgue-measure-and-integration\">https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md#86-lebesgue-measure-and-integration</a> is misleading. This is not Lebesgue integral.</p>",
        "id": 166890596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559205755
    },
    {
        "content": "<p>I don't think it is. It's less than we want from our integration library, but it's definitely the lebesgue measure and the integral on that measure</p>",
        "id": 166890852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559206044
    },
    {
        "content": "<p>if anything, the problem with this challenge in general is that there's no clear theorem or definition to point to</p>",
        "id": 166890913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559206100
    },
    {
        "content": "<p>it's really a statement about a whole construction</p>",
        "id": 166890919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559206114
    },
    {
        "content": "<p>Perhaps a link to the \"main\" file?</p>",
        "id": 166890927,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559206129
    },
    {
        "content": "<blockquote>\n<p>That's true, Floris and Jesse are soon to be the first to do the independence of the continuum hypothesis, and they had to build a proof theory for that</p>\n</blockquote>\n<p>So where is the constructible universe up to (or are they using the hierarchy that uses HOD instead of L?)</p>",
        "id": 166896032,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1559212040
    },
    {
        "content": "<p>I don't think they are planning on doing L, actually. Jesse says there is a way to do it with forcing, which will be nice if true since they already had to build all that for the first part (proving that CH is unprovable)</p>",
        "id": 166896313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559212353
    },
    {
        "content": "<p>Oh, I see, collapsing P(N) to aleph_1. Nice.</p>",
        "id": 166901156,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1559217401
    },
    {
        "content": "<p>\"Just\" construct the correct boolean algebra and turn the handle to get new model of ZFC, and then show CH is true therein. :-)</p>",
        "id": 166901270,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1559217494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209442\">@Martin Skilleter</span> If you give a link to your formalization of the Cauchy-Schwarz inequality, I will link to it.</p>",
        "id": 166923612,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559234026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210574\">@Patrick Massot</span> What is missing from the definition of the Lebesgue integral? I'm happy to remove if something is missing. I agree with Mario that the challenge is stupid because it asks for a definition, not the proof of a theorem.</p>",
        "id": 166923799,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559234161
    },
    {
        "content": "<p>One reasonable argument you can levy against our integral is that it doesn't support functions R -&gt; R</p>",
        "id": 166923969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559234259
    },
    {
        "content": "<p>to which we say \"Bochner integral is coming\" and by then we've already shot right past the conventional definition</p>",
        "id": 166924053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559234297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> Nice list! Doing the <code>Arithmetic Mean/Geometric Mean</code> should be a small project if done directly (there is a pretty easy induction argument, which shows that if the inequality holds for <code>n</code> then it holds for <code>2n</code> and <code>n-1</code>), but what we probably want is to show that the <a href=\"https://en.wikipedia.org/wiki/Generalized_mean\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Generalized_mean\">Power mean</a> is an increasing function.</p>",
        "id": 166924143,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559234399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Oh, that's fair. Do you think that is big enough of an omission to remove it from the list?</p>",
        "id": 166924328,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559234530
    },
    {
        "content": "<p>I don't, as I said to Patrick. I think that we've done all the important stuff that pertains to lebesgue integral already. In the future when we have Bochner integral and are asked to identify where is the Lebesgue integral, we will still point to the ennreal definition</p>",
        "id": 166924415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559234628
    },
    {
        "content": "<p>I have (23) Formula for Pythagorean Triples on my old laptop. It was part of my first real Lean project.<br>\nI can try updating it to modern mathlib when I get home.</p>",
        "id": 167058717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559371412
    },
    {
        "content": "<p>A year later, I'm still not sure what the mathlib-approved way to talk about even and odd numbers is.</p>",
        "id": 167059504,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559372853
    },
    {
        "content": "<p>I just finished having a go at one of these, every prime congruent to 1 mod 4 is a sum of two squares (<span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  has already done it, but my version is quite... different). I tried to formalise Don Zagier's (in)famous one-sentence proof <a href=\"https://people.mpim-bonn.mpg.de/zagier/files/doi/10.2307/2323918/fulltext.pdf\" target=\"_blank\" title=\"https://people.mpim-bonn.mpg.de/zagier/files/doi/10.2307/2323918/fulltext.pdf\">https://people.mpim-bonn.mpg.de/zagier/files/doi/10.2307/2323918/fulltext.pdf</a> it turned out to be a few more than 1 sentence of course, but I stuck pretty much exactly to the intended argument.</p>\n<p>I'd appreciate any comments people have (especially on how to break it up into separate lemmas, or reduce its size, in the course of the proof it has turned into one giant, semi-impossible-to-compile monolith so. I tried but sort of gave up on shrinking it now). I'm pretty sure it compiles, but my computer times out if I try and do it all in one go.<br>\nThis was the first big project I've tried so fair to say, I learned a lot!</p>\n<p><a href=\"https://gist.github.com/alexjbest/1fcc06a67f4d56275f99c44037bb1b6d\" target=\"_blank\" title=\"https://gist.github.com/alexjbest/1fcc06a67f4d56275f99c44037bb1b6d\">https://gist.github.com/alexjbest/1fcc06a67f4d56275f99c44037bb1b6d</a></p>",
        "id": 167832937,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1560244759
    },
    {
        "content": "<p>Wow, that's almost 500 lines of proof!</p>",
        "id": 167833433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560245173
    },
    {
        "content": "<p>The timeout might not be because of your computer -- it might be a more serious problem.</p>",
        "id": 167835550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560247098
    },
    {
        "content": "<p>oh wait -- I can get it to compile from the command line. so I think it's OK! Well done!</p>",
        "id": 167835608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560247152
    },
    {
        "content": "<p>Oh its definitely a serious problem, I didn't mean to imply that it wasn't! But probably there is a solution I'm not aware of, every time I tried to break it up into lemmas it all broke as everything depends on p is all.</p>",
        "id": 167835629,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1560247190
    },
    {
        "content": "<p>wait, I spoke too soon :-/</p>",
        "id": 167835704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560247214
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">614</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">assertv</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">↥</span><span class=\"n\">fixp_j</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fixp_j</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">pprime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">p1mod4</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n       <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">snd_fst</span> <span class=\"n\">snd_snd</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n            <span class=\"n\">id_rhs</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">snd_fst</span> <span class=\"bp\">*</span> <span class=\"n\">snd_snd</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">fst</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">snd_fst</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">snd_snd</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">))),</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"n\">property</span><span class=\"o\">,</span>\n<span class=\"n\">big_set</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">p</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">p</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">big_set</span><span class=\"o\">,</span>\n<span class=\"n\">random_func</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">big_set</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"n\">a_val</span><span class=\"o\">),</span>\n         <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a_val</span>\n           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_val_snd</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">a_val_snd</span><span class=\"o\">)),</span>\n              <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a_val_snd</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)),</span>\n                   <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">))</span>\n                <span class=\"n\">P</span><span class=\"o\">)</span>\n           <span class=\"n\">P</span><span class=\"o\">),</span>\n<span class=\"n\">random_inj</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">random_func</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">mainn</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">S</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">2</span><span class=\"o\">],</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"n\">a_val</span><span class=\"o\">),</span>\n         <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a_val</span>\n           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_val_snd</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">a_val_snd</span><span class=\"o\">)),</span>\n              <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a_val_snd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)),</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n           <span class=\"n\">P</span><span class=\"o\">),</span>\n<span class=\"n\">j_invo</span> <span class=\"o\">:</span> <span class=\"n\">funcpow</span> <span class=\"n\">j</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">finorder_end_cyclic_action</span> <span class=\"n\">j_invo</span><span class=\"o\">,</span>\n<span class=\"n\">fixp_j</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">fixed_points</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">finj</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"err\">↥</span><span class=\"n\">fixp_j</span><span class=\"o\">,</span>\n<span class=\"n\">exists_fixed_j</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"err\">↥</span><span class=\"n\">fixp_j</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">p</span>\n</pre></div>",
        "id": 167835778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560247296
    },
    {
        "content": "<blockquote>\n<p>Oh its definitely a serious problem, I didn't mean to imply that it wasn't! But probably there is a solution I'm not aware of, every time I tried to break it up into lemmas it all broke as everything depends on p is all.</p>\n</blockquote>\n<p>This can surely be solved.</p>",
        "id": 167835793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560247318
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">614</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">assertv</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">↥</span><span class=\"n\">fixp_j</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fixp_j</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">pprime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">p1mod4</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n       <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">snd_fst</span> <span class=\"n\">snd_snd</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n            <span class=\"n\">id_rhs</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">snd_fst</span> <span class=\"bp\">*</span> <span class=\"n\">snd_snd</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">fst</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">snd_fst</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">snd_snd</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">))),</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"n\">property</span><span class=\"o\">,</span>\n<span class=\"n\">big_set</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">p</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">p</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">big_set</span><span class=\"o\">,</span>\n<span class=\"n\">random_func</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">big_set</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"n\">a_val</span><span class=\"o\">),</span>\n         <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a_val</span>\n           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_val_snd</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">a_val_snd</span><span class=\"o\">)),</span>\n              <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a_val_snd</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)),</span>\n                   <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">))</span>\n                <span class=\"n\">P</span><span class=\"o\">)</span>\n           <span class=\"n\">P</span><span class=\"o\">),</span>\n<span class=\"n\">random_inj</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">random_func</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">mainn</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">S</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">2</span><span class=\"o\">],</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"n\">a_val</span><span class=\"o\">),</span>\n         <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a_val</span>\n           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_val_snd</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">a_val_snd</span><span class=\"o\">)),</span>\n              <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a_val_snd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)),</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n           <span class=\"n\">P</span><span class=\"o\">),</span>\n<span class=\"n\">j_invo</span> <span class=\"o\">:</span> <span class=\"n\">funcpow</span> <span class=\"n\">j</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">finorder_end_cyclic_action</span> <span class=\"n\">j_invo</span><span class=\"o\">,</span>\n<span class=\"n\">fixp_j</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">fixed_points</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">finj</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"err\">↥</span><span class=\"n\">fixp_j</span><span class=\"o\">,</span>\n<span class=\"n\">exists_fixed_j</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"err\">↥</span><span class=\"n\">fixp_j</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">p</span>\n</pre></div>\n\n\n</blockquote>\n<p>oh oops I broke it trying to improve readability line 614 just remove the type and it should go, I updated the gist. Thanks!</p>",
        "id": 167836124,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1560247627
    },
    {
        "content": "<p>If in VS Code you do File -&gt; Preferences -&gt; Settings (or ctrl-,) then search for lean then scroll down until you find \"Lean time limit\" and change the value from 100000 to 500000 then it will remove the deterministic timeout.</p>",
        "id": 167836268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560247768
    },
    {
        "content": "<p>You could define functions <code>S p</code> and <code>bigset p</code> etc. I'm still getting timeouts :-( There is maybe some type error somewhere, or the elaborator is going off doing something it shouldn't be doing, or something.</p>",
        "id": 167836462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560247933
    },
    {
        "content": "<p>You must have had the patience of a saint to use Lean like this -- waiting forever for things to compile drives me nuts.</p>",
        "id": 167836589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560248078
    },
    {
        "content": "<p>Yeah I ended up sorrying and commenting a lot, and having a separate scratch section for running library search and building snippets of proof up... having to do \"real work\" while lean is compiling wasn't the worst thing ever though</p>",
        "id": 167837157,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1560248709
    },
    {
        "content": "<p>There seems to be some sort of a problem around line 569 but it's particularly obscure.</p>\n<p>Inserting <code>sorry, end, sorry, end #exit</code> just after <code>rw one_fixed_i at mainn,</code> gets the proof compiling. However inserting <code>end, sorry, end #exit</code> instead, just after the next line <code>exact mainn</code> causes a deterministic time-out, even if the time-out variable is set to super-high (900000). We had this problem in the perfectoid project and it turned out to be a delicate issue with unification which was very hard to debug.</p>",
        "id": 167840186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560251643
    },
    {
        "content": "<p>In short, our code was crummy in a way we had not really understood because the issue was not mathematical.</p>",
        "id": 167840259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560251691
    },
    {
        "content": "<p>I would honestly recommend breaking up the proof into much smaller chunks so it's easier to find out what's going on. It's very frustrating to work with it as things stand.</p>",
        "id": 167840400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560251819
    },
    {
        "content": "<p>Other comments: indent 2 spaces not 4, and indent after the initial <code>begin</code> so that the entire proof is two spaces in (at least).</p>",
        "id": 167840490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560251887
    },
    {
        "content": "<p>Thanks, I filled in a couple more underscores there, maybe it will help a little. I think I fixed a more serious problem which was messing my lean up, lots of <code>dsimp at *</code>'s later on in the proof were screwing with earlier results it seems. Yet more reasons not to make one huge proof I guess.</p>",
        "id": 167843666,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1560255034
    },
    {
        "content": "<blockquote>\n<p>I would honestly recommend breaking up the proof into much smaller chunks so it's easier to find out what's going on. It's very frustrating to work with it as things stand.</p>\n</blockquote>\n<p>Okay I did that and it seems to work really quite well now, thanks for the recommendation</p>\n<p><a href=\"https://gist.github.com/alexjbest/1fcc06a67f4d56275f99c44037bb1b6d\" target=\"_blank\" title=\"https://gist.github.com/alexjbest/1fcc06a67f4d56275f99c44037bb1b6d\">https://gist.github.com/alexjbest/1fcc06a67f4d56275f99c44037bb1b6d</a></p>\n<p>I have one concrete question now, which should be easier to answer now that it compiles in seconds not minutes...</p>\n<p>In my lemma i_invo if I delete the line <code>unfold funcpow</code> and let the <code>dsimp</code>line below unfold it looks like the proof works unchanged in the goal view, but I get a weird error message I don't understand, <code>type mismatch at application id</code>..  and then a lot of output. Whats going on here?</p>",
        "id": 167896968,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1560292820
    },
    {
        "content": "<p>Your proof compiles fine for me now! Congratulations on proving what is quite a tricky theorem!</p>",
        "id": 167897566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560293315
    },
    {
        "content": "<p>If I comment out <code>unfold funcpow</code> on line 348 the proof still compiles fine.</p>",
        "id": 167897752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560293424
    },
    {
        "content": "<p>What happened to the <code>100-thms</code> branch? It doesn't exist anymore: <a href=\"https://github.com/leanprover-community/mathlib/tree/100-thms\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/100-thms\">https://github.com/leanprover-community/mathlib/tree/100-thms</a></p>",
        "id": 169387514,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561981105
    },
    {
        "content": "<p>I pushed the branch I had locally. I don't know if we lost any commits. Is there an (automatic) cleanup of branches in mathlib?</p>",
        "id": 169392752,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561985987
    },
    {
        "content": "<p>I would hope there is not... I didn't backup this branch :-(</p>",
        "id": 169430033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562014135
    },
    {
        "content": "<p>I added <a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md#3\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md#3\">3. The Denumerability of the Rational Numbers</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md#22\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md#22\">22. The Non-Denumerability of the Continuum</a>. Have any others been proven recently? </p>\n<p>I'll message Freek soon to update his list.</p>",
        "id": 172630793,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565127609
    },
    {
        "content": "<p>Not all primes are the sum of two squares (number 20 title)</p>",
        "id": 172632429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565128933
    },
    {
        "content": "<p>thanks, I fixed the title.</p>",
        "id": 172636617,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565132778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217807\">@Freek Wiedijk</span> We have 5 new items for your list:<br>\n<a href=\"https://github.com/leanprover-community/leanprover-community.github.io/commits/newsite/data/100.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/commits/newsite/data/100.yaml</a></p>",
        "id": 208657018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598948081
    },
    {
        "content": "<p>Hmm, but <a href=\"https://leanprover-community.github.io/100.html\">https://leanprover-community.github.io/100.html</a> doesn't seem to have updated yet</p>",
        "id": 208657192,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1598948200
    },
    {
        "content": "<p>Freek just updated <a href=\"http://www.cs.ru.nl/~freek/100/\">http://www.cs.ru.nl/~freek/100/</a></p>",
        "id": 222117941,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1610135852
    },
    {
        "content": "<p>We're over half way there! And area of a circle is on the horizon...</p>",
        "id": 222122293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610138146
    },
    {
        "content": "<p>Yeah, there are many results that are within reach with the current state of the library. We also have open PRs for 30 (<a href=\"https://github.com/leanprover-community/mathlib/issues/5574\">#5574</a>) and 45 (<a href=\"https://github.com/leanprover-community/mathlib/issues/4259\">#4259</a>).</p>",
        "id": 222139546,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1610148835
    },
    {
        "content": "<p>Do we not have the cubic formula (37) yet? Any reason why it'd be hard?</p>",
        "id": 222161730,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610182884
    },
    {
        "content": "<p>I don't think it should be hard.</p>",
        "id": 222161776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610182961
    },
    {
        "content": "<p>It would be good to make it general (as in, not just over the reals).</p>",
        "id": 222161915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610183224
    },
    {
        "content": "<p>Would it? Doing it over the complexes would be easiet because all square and cube roots exist. In small characteristic there are problems (formula isn't true). Over a general field of char 0 (say) one has to decide what the statement is. There are times when the auxiliary square roots don't exist in the field and yet the cubic has a root anyway. I guess one could dodge all this by saying \"the roots are this in the algebraic closure\" but then you may as well be working over the complexes anyway</p>",
        "id": 222163287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610185619
    },
    {
        "content": "<p>You just want the a variable and a hypothesis that they are a cube root.</p>",
        "id": 222167432,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1610192650
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/quadratic_discriminant.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/quadratic_discriminant.lean</a> does something like that, yeah. I think the problem is with the intermediate square roots, though</p>",
        "id": 222167517,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610192781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> but if at some point we want to apply this, then it probably won't be over <code>complex</code>...</p>",
        "id": 222171862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610200093
    }
]