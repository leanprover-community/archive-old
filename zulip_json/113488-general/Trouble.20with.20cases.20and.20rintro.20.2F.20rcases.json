[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">val.nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">list_nil</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">val.list</span> <span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"n\">list_cons</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">vs</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">val.list</span> <span class=\"n\">vs</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">val.list</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"n\">vs</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">val.list</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"n\">vs</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">ok</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would expect the two hypotheses introduced by <code>cases</code> to be named <code>a</code> and <code>b</code>. Yet, they are named <code>h_h</code> and <code>h_h'</code> .</p>\n<p>The same occurs when I change <code>cases h with a b,</code> to <code>rcases h with ⟨a, b⟩,</code>.</p>\n<p>Lastly, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">ok</span><span class=\"o\">,</span> <span class=\"n\">ok_aux</span>\n<span class=\"k\">with</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">val.nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">list</span> <span class=\"o\">{</span><span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ok_aux</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">val.list</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">ok_aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">ok_aux</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">vs</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">ok_aux</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ok_aux</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"n\">vs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">val.list</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"n\">vs</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">ok</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>At the end, it says \"goals accomplished\", but at the same time it says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">contains</span> <span class=\"kd\">meta</span><span class=\"bp\">-</span><span class=\"kd\">variables</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">no</span> <span class=\"n\">goals</span>\n</code></pre></div>\n<p>Are these bugs or do I misunderstand anything?</p>",
        "id": 215910519,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604700749
    },
    {
        "content": "<p>I'm not at lean right now, but the last error is usually caused by a buggy tactic. Try <code>recover</code> to work around it.</p>",
        "id": 215910718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604700929
    },
    {
        "content": "<p>The first error is essentially an implementation detail of <code>cases</code>. In the <code>with</code> cause, you give names for all constructor arguments in order, so your <code>a</code> and <code>b</code> are interpreted as the names given to the arguments <code>n</code> and <code>h</code> of <code>ok.nat</code>. However, <code>cases</code> then realises that this constructor is impossible, so <code>a</code> and <code>b</code> never show up in the goal. Try this instead: <code> cases h with _ _ _ _ a b</code>.</p>\n<p>Wrt the second issue, I would advise you to stay away from mutual inductive types (and ideally also nested inductives). They are shoddily implemented and basically untested, so you can expect a lot of random errors.</p>",
        "id": 215911453,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1604701486
    },
    {
        "content": "<p>Thanks, <code>cases h with _ _ _ _ a b</code> works perfectly!</p>",
        "id": 215912465,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604702142
    },
    {
        "content": "<p>I think you can also use <code>cases h</code> and then <code>case ok.list_cons : _ _ a b { sorry }</code></p>",
        "id": 215918203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604706339
    },
    {
        "content": "<p>And you can write <code>pretty_cases</code> to see which position in the list of names names which variable.</p>",
        "id": 215931458,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604723260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  <code>pretty_cases</code> doesn't seem to work on the above example. It generates </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"n\">anonymous</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span> <span class=\"n\">admit</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>which is a syntax error.</p>\n<p>I guess a related question is, is there a way to use <code>case</code> for case splitting arises from <code>split</code> or things like that? I currently use comment and indentation to informally structure the proof. E.g., currently I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- case A</span>\n  <span class=\"n\">tactic_a</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- case B</span>\n  <span class=\"n\">tactic_b</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- case C</span>\n  <span class=\"n\">tactic_c</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>But it would be nice to have an actual support from the language. E.g., being able to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"n\">tactic_a</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"n\">tactic_b</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"n\">tactic_c</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n</code></pre></div>\n<p>instead.</p>",
        "id": 215935344,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604727291
    },
    {
        "content": "<p>That's because <code>pretty_cases</code>, like <code>case</code> itself, relies on goal tags. <code>induction</code> and <code>cases</code> add tags to goals corresponding to the constructors. If you call any tactics afterwards (with a few exceptions), those tags will be erased.</p>",
        "id": 215935894,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604727480
    },
    {
        "content": "<p>In order to make your use case possible, you'd need <code>split</code> to tag the generated goals.</p>",
        "id": 215936122,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604727508
    },
    {
        "content": "<p>What benefit to do see in using <code>case [1] { ... }</code> instead of just <code>{ ... },</code>?</p>",
        "id": 215936557,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604727653
    },
    {
        "content": "<p>I didn't know that that works! Time to refactor my code :)</p>",
        "id": 215936981,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604727742
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 215936986,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604727764
    },
    {
        "content": "<p>You might like <code>refine_struct</code> btw. It tags goals with the field names of a structure</p>",
        "id": 215937201,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604727808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> somewhat related: do you understand <a href=\"https://github.com/leanprover-community/mathlib/issues/4779\">#4779</a>?</p>",
        "id": 215939223,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604728526
    },
    {
        "content": "<p>Have you tried using <code>field f1</code> instead of <code>case f1</code>?</p>",
        "id": 215939792,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604728723
    },
    {
        "content": "<p>I did not consider mixing the two. The <code>refine_struct</code> machinery clashes with <code>case</code> but I don't think it needs to be the case.</p>",
        "id": 215939940,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604728779
    },
    {
        "content": "<p>You can see here the encoding of tags: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive.lean#L311\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive.lean#L311</a></p>",
        "id": 215940291,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604728934
    },
    {
        "content": "<p>In comparison, <code>cases</code> and <code>inductive</code> use <code>_case</code> as a prefix. <code>refine_struct</code> also uses shorter tags. In case, you have to give the fully qualified name of the constructor and I wanted to avoid it.</p>",
        "id": 215940365,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604729070
    },
    {
        "content": "<p>We could use the same convention for <code>refine_struct</code> and <code>cases</code> / <code>inductive</code> and use <code>case</code> for both, changing <code>case</code> to allow the omission of qualifiers in constructor and field names</p>",
        "id": 215940430,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604729201
    },
    {
        "content": "<p>Ah, I see. Yes, <code>field f1</code> does work. This was not at all clear to me from <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#refine_struct\">tactic#refine_struct</a> and the tactic state.</p>",
        "id": 215940609,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604729530
    },
    {
        "content": "<p>I didn't think the proof state printing <code>case foo</code> would be a big deal but looking back, I realize that wasn't my best idea</p>",
        "id": 215940670,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604729666
    },
    {
        "content": "<p>Merging <code>cases</code> and <code>refine_struct</code> might be pretty hairy because of what <code>case</code> does to rename variables.</p>",
        "id": 215940750,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604729825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/113488-general/topic/Trouble.20with.20cases.20and.20rintro.20.2F.20rcases/near/215940365\">said</a>:</p>\n<blockquote>\n<p>In comparison, <code>cases</code> and <code>inductive</code> use <code>_case</code> as a prefix. <code>refine_struct</code> also uses shorter tags. In case, you have to give the fully qualified name of the constructor and I wanted to avoid it.</p>\n</blockquote>\n<p>FYI, I changed <code>case</code> at some point so that you can now give shorter names as well. Essentially, <code>case</code> now looks for an unambiguous suffix, so in Sorawee's example, <code>case list_cons</code> would work.</p>",
        "id": 215948534,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1604744837
    },
    {
        "content": "<p>Small nitpick about <code>rcases</code> while it's being discussed; the doc string showing the syntax uses something called <code>trans_rel</code> that doesn't seem to exist.</p>",
        "id": 215964002,
        "sender_full_name": "Chris B",
        "timestamp": 1604768869
    },
    {
        "content": "<p>It's talking about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.trans_gen\">docs#relation.trans_gen</a></p>",
        "id": 215964475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604769533
    },
    {
        "content": "<p>the suggested match syntax is also wrong for <code>trans_gen</code>, it should have 2 args in the first case and 4 in the second. But now I'm worried if I put that there that it will look confusing unless I also provide the definition of the inductive</p>",
        "id": 215964669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604769783
    },
    {
        "content": "<p>the point of the quote is just to say you can match on more complex inductive predicates</p>",
        "id": 215964691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604769825
    },
    {
        "content": "<p>Did the name get changed without the comment getting updated or do mathlib people know <code>trans_rel</code> |-&gt; <code>relation.trans_gen</code>?</p>",
        "id": 215964760,
        "sender_full_name": "Chris B",
        "timestamp": 1604769875
    },
    {
        "content": "<blockquote>\n<p>I'm worried if I put that there that it will look confusing unless I also provide the definition of the inductive</p>\n</blockquote>\n<p>I think if people can grep it or do like <code>#print trans_gen</code> and get something back it's fine right? (or use the doc search thing)</p>",
        "id": 215964807,
        "sender_full_name": "Chris B",
        "timestamp": 1604769959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113488-general/topic/Trouble.20with.20cases.20and.20rintro.20.2F.20rcases/near/215964760\">said</a>:</p>\n<blockquote>\n<p>Did the name get changed without the comment getting updated or do mathlib people know <code>trans_rel</code> |-&gt; <code>relation.trans_gen</code>?</p>\n</blockquote>\n<p>No, I just recalled the name imperfectly from memory</p>",
        "id": 215964855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604769995
    },
    {
        "content": "<p>While I'm splitting hairs, I think <code>rcases h e pat performs...</code> is missing a colon between <code>h</code> and <code>e</code>.</p>",
        "id": 215966426,
        "sender_full_name": "Chris B",
        "timestamp": 1604772326
    }
]