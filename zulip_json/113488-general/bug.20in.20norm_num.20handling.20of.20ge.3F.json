[
    {
        "content": "<p>I discovered some odd behaviour of <code>norm_num</code> on numeric inequalities, seemingly related to the <code>ge</code>/<code>le</code> defeq since it works for the <code>le</code> phrasing but not the <code>ge</code> phrasing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num1</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">63</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num1</span>\n</code></pre></div>",
        "id": 284069447,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653603979
    },
    {
        "content": "<p>Drilling down a bit more, it seems like this already arises in the <code>bit1_le_bit1</code> lemma which gets used in the <code>norm_num</code> proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">bit1</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">norm_num.le_bit1_bit1</span> <span class=\"mi\">2</span> <span class=\"mi\">31</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">bit1</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1_le_bit1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"mi\">31</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 284069530,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653604034
    },
    {
        "content": "<p>And the issue only seems to arise for fairly large numbers!  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">bit1</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1_le_bit1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"mi\">11</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 284069723,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653604146
    },
    {
        "content": "<p>Grateful for any help here ...</p>",
        "id": 284069791,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653604190
    },
    {
        "content": "<p>One further observation: annoyingly, I can't even trick Lean here by telling it the <code>le</code> fact I want <code>norm_num</code> to find.  This still fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">63</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284073056,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653606561
    },
    {
        "content": "<p>Let me ask the obvious question: How did you get a <code>≥</code> in your goal in the first place?</p>",
        "id": 284073145,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653606614
    },
    {
        "content": "<p>I'm writing a tactic for undergraduate use (and not just Yaël-level undergraduates!).</p>",
        "id": 284073224,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653606707
    },
    {
        "content": "<p>My guess would be that it starts unfolding the rats before the ge</p>",
        "id": 284073827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653607152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> By \"it\" do you mean the typechecker?  Because in the example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">bit1</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1_le_bit1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"mi\">31</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>what's happening is that it's checking <code>(@bit1_le_bit1 _ _ 2 31).mpr sorry</code> is a term of type <code>bit1 (31:ℚ) ≥ bit1 2</code>, right?</p>",
        "id": 284074063,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653607342
    },
    {
        "content": "<p>Yes, I guess I must mean that</p>",
        "id": 284074120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653607410
    },
    {
        "content": "<p>Do you get the same timeout if you prove the two statements (le vs ge) are the same (as either an iff or eq) with refl?</p>",
        "id": 284074223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653607501
    },
    {
        "content": "<p>Good question!  Yup, these both time out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.order</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">63</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">63</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 284074675,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653607850
    },
    {
        "content": "<p>Ouch</p>",
        "id": 284076000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653609077
    },
    {
        "content": "<p>I'll ping <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> here, any idea why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.order</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">63</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">63</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>would time out?</p>",
        "id": 284186180,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653686431
    },
    {
        "content": "<p>I think Eric explained it already: lean sometimes thinks it would be better to unfold the numerals than the relation. I remember having similar issues with <code>(12:int) &lt;= 100</code> kind of things</p>",
        "id": 284186285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653686502
    },
    {
        "content": "<p>norm_num has to be super careful with these kinds of hypotheses to avoid doing anything that could trigger a definitional reduction</p>",
        "id": 284186382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653686545
    },
    {
        "content": "<p>in this case the solution would be to <code>rw ge</code> instead of using <code>rfl</code></p>",
        "id": 284186406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653686563
    },
    {
        "content": "<p>or abstract the numerals first</p>",
        "id": 284186449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653686594
    },
    {
        "content": "<p>If <code>norm_num</code> is hitting this timeout (see top of thread), does that mean that there's a bug in <code>norm_num</code>, because it is triggering a definitional reduction that it ought not to trigger?</p>",
        "id": 284186584,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653686692
    },
    {
        "content": "<p>Ah, yes. I swear, I wrote a few things like this thinking \"<em>surely</em>, unfolding this definition should be fine without applying a lemma...?\" and every time I was wrong</p>",
        "id": 284195577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653694069
    },
    {
        "content": "<p>the moral of the story is: never trust defeq, it will choose an adversarial reduction strategy when possible</p>",
        "id": 284195659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653694142
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14425\">#14425</a></p>",
        "id": 284196585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653695121
    },
    {
        "content": "<p>Thanks Mario!</p>",
        "id": 284196808,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653695321
    }
]