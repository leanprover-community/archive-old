[
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>exist in mathlib?</p>",
        "id": 189862232,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583469650
    },
    {
        "content": "<p>Relatedly, I want to add the following to <code>measurable_space.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">is_measurable_sup</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_measurable</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"err\">⊔</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">generate_measurable</span> <span class=\"o\">(</span><span class=\"n\">m₁</span><span class=\"bp\">.</span><span class=\"n\">is_measurable</span> <span class=\"err\">∪</span> <span class=\"n\">m₂</span><span class=\"bp\">.</span><span class=\"n\">is_measurable</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">is_measurable_Sup</span> <span class=\"o\">{</span><span class=\"n\">ms</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_measurable</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">ms</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">generate_measurable</span> <span class=\"o\">(</span><span class=\"err\">⋃₀</span> <span class=\"o\">(</span><span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"n\">is_measurable</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">ms</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">is_measurable_supr</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_measurable</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">supr</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">generate_measurable</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_measurable</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>Do they seem reasonable? Or are lemmas that expose <code>generate_measurable</code> morally wrong for some reason?</p>",
        "id": 189862289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583469755
    },
    {
        "content": "<p>Please enable syntax highlighting. Look at <code>set.bUnion_range</code>.</p>",
        "id": 189862308,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583469823
    },
    {
        "content": "<p>in <code>data/set/lattice</code></p>",
        "id": 189862315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583469837
    },
    {
        "content": "<p>Thanks. I will experiment to see if it can be given <code>@[simp]</code>.</p>",
        "id": 189862438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583469999
    },
    {
        "content": "<p>(I should remember to try <code>library_search</code>. :-)</p>",
        "id": 189862457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583470067
    },
    {
        "content": "<p>Probably <code>mem_range</code> will come earlier.</p>",
        "id": 189862658,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583470402
    },
    {
        "content": "<p>What do you mean \"come earlier\"?</p>",
        "id": 189862667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583470429
    },
    {
        "content": "<p><code>simp</code> works inside out, so it will first try to rewrite <code>b ∈ range f</code>.</p>",
        "id": 189862715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583470452
    },
    {
        "content": "<p>Though I'm not sure if <code>simp</code> can simplify inside binders.</p>",
        "id": 189862742,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583470523
    },
    {
        "content": "<p>Seems not. (Also: the linter that complains about LHS of simp lemmas not in simp-normal form doesn't complain.)</p>",
        "id": 189862886,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583470701
    }
]