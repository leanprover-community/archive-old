[
    {
        "content": "<p>I would have expected <code>by exact t</code> to be roughly equivalent to <code>t</code>, but it seems like it's decidedly not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">nat.add</span><span class=\"o\">)</span> <span class=\"n\">nat.zero</span> <span class=\"n\">nat.zero</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">1:12: type mismatch at application</span>\n<span class=\"cm\">  interactive.executor.execute_explicit tactic</span>\n<span class=\"cm\">    (has_bind.seq (tactic.save_info {line := 1, column := 11})</span>\n<span class=\"cm\">       (tactic.istep 1 11 1 11 (tactic.interactive.exact ``(nat.add))))</span>\n<span class=\"cm\">    0</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  0</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ℕ</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  tactic_state</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Apparently the <code>nat.zero</code> is interpreted as an argument to the tactic within the <code>by</code>?</p>",
        "id": 235176217,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618837403
    },
    {
        "content": "<p><del><code>nat.plus</code> does not exist as far as I know -- is this the actual issue?</del></p>",
        "id": 235177887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618838047
    },
    {
        "content": "<p>Hmm, not even this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">nat.add</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">nat.zero</span> <span class=\"n\">nat.zero</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">function expected at</span>\n<span class=\"cm\">  ?m_1</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  ?m_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 235177997,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618838093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Weird.20interaction.20of.20.60by.60.20and.20application/near/235177887\">said</a>:</p>\n<blockquote>\n<p><code>nat.plus</code> does not exist as far as I know -- is this the actual issue?</p>\n</blockquote>\n<p>No unfortunately. I've updated the example with <code>nat.add</code>; same effect.</p>",
        "id": 235178113,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618838144
    },
    {
        "content": "<p>This is not too surprising to me. Placeholders cannot occur in places of functions, since it's hard to figure out what the type of the function is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">nat.zero</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n<span class=\"c1\">-- error: placeholders '_' cannot be used where a function is expected</span>\n</code></pre></div>\n<p>In the above example, the <code>_</code> could have type <code>ℕ → ℕ</code> but also something like <code>Π (n : ℕ), @nat.rec (λ _, Type) ℕ (λ _ _, bool) n</code>.<br>\nIn the same way I'm not surprised that replacing the placeholder by a tactic also fails, but a nicer error message would be nice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">nat.zero</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">reflexivity</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- an improved error message would be: tactics cannot be used where a function is expected</span>\n</code></pre></div>",
        "id": 235222176,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618855074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Weird.20interaction.20of.20.60by.60.20and.20application/near/235222176\">said</a>:</p>\n<blockquote>\n<p><code>Π (n : ℕ), @nat.rec (λ _, Type) ℕ (λ _ _, bool) n</code></p>\n</blockquote>\n<p>For the non-type theorists, here is a more understandable example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Note that <code>g</code> has a different type than <code>f</code>, but <code>g 0</code> and <code>f 0</code> are (definitionally) equal.</p>",
        "id": 235223313,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618855519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Weird.20interaction.20of.20.60by.60.20and.20application/near/235222176\">said</a>:</p>\n<blockquote>\n<p>This is not too surprising to me.</p>\n</blockquote>\n<p>There are two bugs here:</p>\n<ol>\n<li>That it doesn't work.  This is indeed not surprising, and will give an error in Lean 4 (\"expected type not known\").</li>\n<li>That the arguments are just added to the tactic and then elaborated as a normal term.  This is the surprising part, but I don't think I'm motivated to fix it.  The reason why this happens is because tactics blocks are stored as \"annotations\".  Annotations are also used for show-from, have-from, etc.  These are then stripped from functions during elaboration:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">is_annotation</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">))</span>\n        <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"n\">get_annotation_arg</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 235224677,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618856057
    },
    {
        "content": "<p>This is what I mean by surprising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">hmmm</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n<span class=\"k\">#check</span> <span class=\"kd\">by</span> <span class=\"n\">hmmm</span> <span class=\"c1\">-- 0</span>\n</code></pre></div>",
        "id": 235225370,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618856377
    },
    {
        "content": "<p>wait, that's triply surprising because you didn't say <code>hmm := `[exact 0]</code>, you said <code>hmm := by exact 0</code> (after eta reduction)</p>",
        "id": 235231963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618859103
    }
]