[
    {
        "content": "<p>Hi,</p>\n<p>I'm attempting to prove a proposition from a Topology book and am getting stuck using filters, which I'm not very comfortable with in lean. Can anyone help me with the first sorry? I'm pretty sure that step is true due to the uniform continuity of f but I can't figure out what to do with it.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuity</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">complete_iff_of_uniform_cts_bij</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hg</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"n\">complete_space</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">filt</span> <span class=\"n\">Hfilt</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"n\">H1</span> <span class=\"o\">(</span><span class=\"n\">cauchy_map</span> <span class=\"n\">Hg</span> <span class=\"n\">Hfilt</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H2</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_vmap</span> <span class=\"n\">at</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">Hmaps</span> <span class=\"o\">:=</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map_eq_vmap_of_inverse</span> <span class=\"o\">(</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">id_of_right_inverse</span> <span class=\"n\">right_inv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">id_of_left_inverse</span> <span class=\"n\">left_inv</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">Hmaps</span> <span class=\"n\">at</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H3</span> <span class=\"n\">at</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133377621,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1536156232
    },
    {
        "content": "<p>H3 must be true because <code>nhds</code> only depends on the topology and f and g are homeomorphisms.<br>\nOne direction of the equality will be from continuous.tendsto. The other one should require the continuity of g</p>",
        "id": 133378115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536156697
    },
    {
        "content": "<p>Also, you have an uniform isomorphism (i.e. <code>f</code> with <code>g</code> as inverse). This implies that it is an topological <code>embedding</code>, a <code>dense_embedding</code> and <code>uniform_embedding</code>. If you look for them this should give you enough rules to prove your statement.</p>",
        "id": 133378211,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536156766
    },
    {
        "content": "<p>... plus either left_inv or right_inv, and filter.map_map</p>",
        "id": 133378251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536156804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120559\">@Rohan Mitta</span> don't listen to them, you were almost done. Stating only only implication since the other one follows by symmetry:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">complete_iff_of_uniform_cts_bij</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hg</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">complete_space</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">filt</span> <span class=\"n\">Hfilt</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"n\">H1</span> <span class=\"o\">(</span><span class=\"n\">cauchy_map</span> <span class=\"n\">Hg</span> <span class=\"n\">Hfilt</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H2</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_vmap</span> <span class=\"n\">at</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hmaps</span> <span class=\"o\">:=</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map_eq_vmap_of_inverse</span> <span class=\"o\">(</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">id_of_right_inverse</span> <span class=\"n\">right_inv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">id_of_left_inverse</span> <span class=\"n\">left_inv</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">Hmaps</span> <span class=\"n\">at</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"n\">Hf</span><span class=\"bp\">.</span><span class=\"n\">continuous</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">H_converges_to_x</span> <span class=\"n\">this</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133378669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536157205
    },
    {
        "content": "<p>Thanks all of you (I'm sitting next to Rohan)</p>",
        "id": 133378866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536157428
    },
    {
        "content": "<p>Amazing, thanks everyone!</p>",
        "id": 133378965,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1536157521
    },
    {
        "content": "<p>Small cleanup:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">complete_iff_of_uniform_cts_bij</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hg</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">complete_space</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">H1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">filt</span> <span class=\"n\">Hfilt</span><span class=\"o\">,</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">H1</span> <span class=\"o\">(</span><span class=\"n\">cauchy_map</span> <span class=\"n\">Hg</span> <span class=\"n\">Hfilt</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_vmap</span><span class=\"o\">,</span>\n      <span class=\"err\">←</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map_eq_vmap_of_inverse</span> <span class=\"o\">(</span><span class=\"n\">id_of_right_inverse</span> <span class=\"n\">right_inv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id_of_left_inverse</span> <span class=\"n\">left_inv</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">H_converges_to_x</span><span class=\"o\">,</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">H_converges_to_x</span> <span class=\"o\">(</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"n\">Hf</span><span class=\"bp\">.</span><span class=\"n\">continuous</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133379170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536157745
    },
    {
        "content": "<p>Thanks Patrick to actually look at the proof (obviously, I didn't ...)</p>",
        "id": 133379874,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536158385
    },
    {
        "content": "<p>Is there a particular reason that <code>filter</code> is only defined for <code>set X</code>. (I.e., a filter is a set of sets, etc...). The definition makes sense for arbitrary bounded lattices, of which <code>set X</code> is a particular instance. (And most of the basic lemmas are also true in this more general setting.) Is this to avoid the extra type class in basic files?</p>",
        "id": 175450141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568219636
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> considered doing that, but I don't know what came out of this idea.</p>",
        "id": 175458627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568224647
    },
    {
        "content": "<p>Is there a useful application of the generalization?</p>",
        "id": 175463193,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1568227572
    },
    {
        "content": "<p>I guess it depends who you ask... I certainly wouldn't want traditional filters to become less convenient to use after generalizing. They are everywhere in our topology library.</p>",
        "id": 175466886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568229977
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/filter\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/filter\">https://ncatlab.org/nlab/show/filter</a> gives the general definition (of course) but doesn't seem to mention any application outside topology</p>",
        "id": 175467076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568230090
    },
    {
        "content": "<p>The category of bounded distributive lattices is anti-equivalent to the category of spectral spaces via a \"Spec\" functor. It associates to a bounded distributive lattice the set of prime filters.</p>",
        "id": 175470165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568231929
    },
    {
        "content": "<p>A filter <code>F</code> on a lattice is prime if <code>x \\glb y \\in F → x \\in F \\or y \\in F</code></p>",
        "id": 175470252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568231999
    },
    {
        "content": "<p>This is probably not enough justification for the generalisation, though</p>",
        "id": 175470396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568232056
    },
    {
        "content": "<p>Actually, it was <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  who actually started doing it, and got pretty far with the generalization, IIRC. I don't know what came of it.</p>",
        "id": 175474240,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1568234641
    },
    {
        "content": "<p>I got bogged down in the propagating library changes. I pushed my WIP on this to the <a href=\"https://github.com/leanprover-community/mathlib/compare/pfilter\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/compare/pfilter\">pfilter</a> branch; perhaps someone wants to pick this back up.</p>",
        "id": 175500393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568266270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks for this branch</p>",
        "id": 175503015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568270177
    },
    {
        "content": "<p>I see you went even more general than lattices, and just used preorders. Were you planning on having some special layer on top of that for filters on lattices?</p>",
        "id": 175503036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568270225
    },
    {
        "content": "<p>It's not too encouraging that such a refactor is getting you bogged down... I wish we had better tools for refactoring.</p>",
        "id": 175503044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568270269
    }
]