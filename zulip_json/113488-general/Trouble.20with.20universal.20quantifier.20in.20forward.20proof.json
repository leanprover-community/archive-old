[
    {
        "content": "<p>I would like to prove this lemma using forward proof style, but I have trouble with it. Would appreciate any help!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span><span class=\"o\">),</span> <span class=\"n\">xs.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">xs.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">rewrite</span> <span class=\"bp\">←</span> <span class=\"n\">list.nth_le_map</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">list.length_map</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The above proof uses the backward proof style. With the forward proof style, I would need to apply <code>h1</code> with <code>h2</code>. That means I need to rewrite one of them so that the implication is applicable. But how? Any rewrite would depend on the variable <code>i</code> which is universally quantified in the context. Having <code>i</code> in the context would make my life much easier, but I'm not sure if there's a sound inference rule that lets me do that.</p>",
        "id": 223482275,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1611219118
    },
    {
        "content": "<p>Nvm, I clearly haven't thought this through. One cheesy way would be <code>suffices : ∀ (i : ℕ) (hi : i &lt; xs.length), xs.nth_le i hi = 0</code>. That would then allow me to introduce <code>i</code> in the context. It's kinda annoying though...</p>",
        "id": 223482810,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1611219493
    },
    {
        "content": "<p>Ah, this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span><span class=\"o\">),</span> <span class=\"n\">xs.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h2</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">),</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">list.nth_le_map</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">}),</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223483510,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1611219961
    },
    {
        "content": "<p>I think you can replace specialize with exact there</p>",
        "id": 223488066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611223146
    },
    {
        "content": "<p>Alternatively (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span><span class=\"o\">),</span> <span class=\"n\">xs.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h2</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">),</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">list.nth_le_map</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 223494700,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1611227678
    },
    {
        "content": "<p>I don't remember what counts as forward any more, but you can turn the whole thing into term mode with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span><span class=\"o\">),</span> <span class=\"n\">xs.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">h1</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">list.nth_le_map</span> <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span> <span class=\"n\">h2</span> <span class=\"n\">i</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">list.map_id</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hi</span>\n</code></pre></div>",
        "id": 223496483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611228960
    }
]