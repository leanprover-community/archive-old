[
    {
        "content": "<p>I am attempting to finish the base case of an inductive proof, and in the current <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> below, the goal is 0&lt;x^2. I am curious if theres a way I can use pow_two_pos_of_ne_zero</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span>  <span class=\"n\">inductionProblemV1</span>\n <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1x</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;-</span><span class=\"mi\">1</span><span class=\"o\">)(</span><span class=\"n\">h2x</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">},</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_pow_two</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">pow_two_pos_of_ne_zero</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241570290,
        "sender_full_name": "Jayden Vap",
        "timestamp": 1622828654
    },
    {
        "content": "<p><code>pos_two_pos_of_ne_zero</code> is a term, not a tactic. In tactic mode you need to use something like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#exact\">tactic#exact</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply\">tactic#apply</a>, or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#refine\">tactic#refine</a>.</p>",
        "id": 241570559,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622828798
    },
    {
        "content": "<p>Okay, I will try that, thank you very much!</p>",
        "id": 241571511,
        "sender_full_name": "Jayden Vap",
        "timestamp": 1622829256
    },
    {
        "content": "<p>Can you edit your code block to include all imports, ie actually make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (the link explains the things we hope for)</p>",
        "id": 241572703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622829835
    },
    {
        "content": "<p>It's ok not to include imports in later discussions but you've started a new thread (which is fine) and the first piece of code on a new thread is supposed to be mwe and in particular it's supposed to work for anyone who just cuts and pastes it directly into lean</p>",
        "id": 241572901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622829915
    },
    {
        "content": "<p>By the way, if you're faced with a goal like 0&lt;x^2 and you feel confident that something like this should be in the library, you can try <code>library_search</code> which Is a tactic which might close your goal automatically</p>",
        "id": 241573117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622830010
    }
]