[
    {
        "content": "<p>Easy question - what's the opposite of the <code>intros</code> tactic? How do I move a term in the context to a universal quantification in the goal - or a hypothesis to an antecedent?</p>",
        "id": 242831379,
        "sender_full_name": "Billy Price",
        "timestamp": 1623821048
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#revert\">tactic#revert</a> should do it.</p>",
        "id": 242831717,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623821562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/undo.20intro/near/242831717\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#revert\">tactic#revert</a> should do it.</p>\n</blockquote>\n<p>can you give an example of the use of this tactic?</p>",
        "id": 254386786,
        "sender_full_name": "Sina",
        "timestamp": 1632324657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254387034,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632324736
    },
    {
        "content": "<p>Or do you want an example where this is actually useful?</p>",
        "id": 254387111,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632324768
    },
    {
        "content": "<p>In that case maybe <a href=\"#narrow/stream/113489-new-members/topic/Example.20of.20an.20essential.20use.20of.20revert/near/218374738\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Example.20of.20an.20essential.20use.20of.20revert/near/218374738</a> is what you want</p>",
        "id": 254387273,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632324831
    },
    {
        "content": "<p>This is a good simple example! thanks! But, shouldn't  &lt;revert n&gt; come after  &lt;sorry,&gt; ? I mean  in natural deduction, you introduce n then you prove something with it and then you eliminate it to get for all. What am i missing here? <br>\nAlso, how do you write inline code on Zulip? seems &lt;xyz&gt; is not doing that.</p>",
        "id": 254387788,
        "sender_full_name": "Sina",
        "timestamp": 1632325017
    },
    {
        "content": "<p>` for code</p>",
        "id": 254387908,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1632325063
    },
    {
        "content": "<p><code>sorry</code> is just used because its a silly/minimal example, in actual usage yes you might <code>intro n</code> then do a rewrite or some other tactics, then <code>revert n</code></p>",
        "id": 254388031,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632325098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420917\">Sina</span> <a href=\"#narrow/stream/113488-general/topic/undo.20intro/near/254387788\">said</a>:</p>\n<blockquote>\n<p>I mean  in natural deduction, you introduce n then you prove something with it and then you eliminate it to get for all. What am i missing here?</p>\n</blockquote>\n<p>Tactics are a bit different from natural deduction judgments.  One difference that the tactic context knows the statement you are trying to prove from the beginning, and every tactic can manipulate both hypotheses and goals. <code>intro n</code> in Alex's example ends up doing all the work of introducing <code>n</code> and eliminating it at the end.</p>\n<p><code>revert</code> is useful for moving hypotheses back into the goal to help get the induction hypothesis you want, for example.</p>",
        "id": 254389055,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632325476
    }
]