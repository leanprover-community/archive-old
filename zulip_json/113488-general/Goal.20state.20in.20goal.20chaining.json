[
    {
        "content": "<p>I suspect one of the reasons people use <code>;</code> so little is that you basically go blind with respect to the goals. Would it be possible to show all focused goals with their respective states simultaneously?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"c1\">-- currently shows one goal with the cursor here</span>\n<span class=\"c1\">-- 1 goal</span>\n<span class=\"c1\">-- p q r : Prop</span>\n<span class=\"c1\">-- h : r</span>\n<span class=\"c1\">-- ᾰ : p</span>\n<span class=\"c1\">-- ⊢ r</span>\n<span class=\"c1\">-- I want it to show</span>\n<span class=\"c1\">-- 2 goals</span>\n<span class=\"c1\">-- p q r : Prop</span>\n<span class=\"c1\">-- h : r</span>\n<span class=\"c1\">-- ᾰ : p</span>\n<span class=\"c1\">-- ⊢ r</span>\n<span class=\"c1\">-- p q r : Prop</span>\n<span class=\"c1\">-- h : r</span>\n<span class=\"c1\">-- ᾰ : q</span>\n<span class=\"c1\">-- ⊢ r</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268899456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642797202
    },
    {
        "content": "<p>You might be happy to hear that Lean 4 does this <a href=\"/user_uploads/3121/C6lFGHhc8QWISUqyN2PEsGYX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/C6lFGHhc8QWISUqyN2PEsGYX/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/C6lFGHhc8QWISUqyN2PEsGYX/image.png\"></a></div>",
        "id": 268899918,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642797466
    },
    {
        "content": "<p>Another reason is that <code>;</code> very often lead to obfuscated proofs if there is more than one tactic after it.</p>",
        "id": 268900056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642797532
    },
    {
        "content": "<p>Oooh, very nice Sebastian! Consider my point moot.</p>",
        "id": 268900228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642797629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Goal.20state.20in.20goal.20chaining/near/268900056\">said</a>:</p>\n<blockquote>\n<p>Another reason is that <code>;</code> very often lead to obfuscated proofs if there is more than one tactic after it.</p>\n</blockquote>\n<p>But why is it obfuscating? I claim this is precisely because you can hardly inspect the goal. If you have <code>split, { tac1, tac2, tac3 }, { tac1, tac2, tac3 }</code>, then replacing it with <code>split; { tac1, tac2, tac3 }</code> doesn't obfuscate anything. I would even claim it makes the proof more readable.</p>",
        "id": 268900455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642797735
    },
    {
        "content": "<p>Of course, a side effect would be that people will start trying to parallel-golf, which indeed could obfuscate stuff. But that's a question of what people will do with the tools we hand them, rather than the tools themselves.</p>",
        "id": 268900595,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642797804
    },
    {
        "content": "<p>I almost always avoid the semicolon when teaching in Lean 3 for the sole reason that I think the students will find it confusing. The only times I've used it in my class so far are <code>split; assumption</code> and <code>split;linarith</code>, i.e. <code>split; close both goals</code>; for such arguments you don't need to see the tactic state.</p>",
        "id": 268901143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642798103
    },
    {
        "content": "<p>It's made a little more explicit that its different from <code>,</code> in Lean 4 by both not having a comma and having <code>&lt;;&gt;</code> instead of just the regular <code>;</code> so maybe that helps?</p>",
        "id": 268901387,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642798235
    },
    {
        "content": "<p>I've sometimes seen proofs like <code>split; simp; nonsense</code> and lean happily ignores the <code>nonsense</code> - which is another mark against using <code>;</code></p>",
        "id": 268904643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642799950
    },
    {
        "content": "<p>I'm a bit late to the conversation, but <a href=\"https://github.com/leanprover-community/lean/pull/201\">lean#201</a> tracks this in (community) Lean 3. (As Yaël said, this is probably moot as we'll probably move to Lean 4 before this issue is tackled).</p>",
        "id": 268928935,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1642817018
    }
]