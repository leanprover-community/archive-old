[
    {
        "content": "<p>Is there any way to get <code>cases</code> to not do this kind of unfolding?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">h : P (λ (b : ℕ), b = 0)</span>\n<span class=\"cm\">⊢ true</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207858568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598283328
    },
    {
        "content": "<p>I guess I could apply the recursor directly</p>",
        "id": 207858709,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598283385
    },
    {
        "content": "<p>I suppose another question is whether this is a bug or a feature</p>",
        "id": 207858768,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598283414
    },
    {
        "content": "<p>aha, is it unfolding in order to check if the case might be impossible somehow?</p>",
        "id": 207859681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598283876
    },
    {
        "content": "<p>In any case, applying the recursor by hand was easy enough <span aria-label=\"checkbox\" class=\"emoji emoji-2611\" role=\"img\" title=\"checkbox\">:checkbox:</span></p>",
        "id": 207860324,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598284260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/cases.20unfolding.20stuff/near/207859681\">said</a>:</p>\n<blockquote>\n<p>aha, is it unfolding in order to check if the case might be impossible somehow?</p>\n</blockquote>\n<p>Yeah exactly. <code>cases</code> could be more careful to preserve the original expression when it does this.</p>",
        "id": 207860519,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1598284405
    },
    {
        "content": "<p>Would that be difficult? I'm not familiar with the implementation of <code>cases</code></p>",
        "id": 207866108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598287450
    },
    {
        "content": "<p>If you just want to apply the recursor, use <code>induction</code> instead.</p>\n<p><code>cases</code> will do more than just applying the recursor when working with inductive families. For example:</p>\n<ul>\n<li><code>cases v</code> where <code>v : dvector \\a 0</code> will change <code>v</code> to <code>nil</code> (<code>dvector</code> is the type of vectors as an inductive family)</li>\n<li><code>cases h</code> where <code>h : succ n = succ m</code> will change <code>h</code> to <code>rfl</code> (or at least remove the applications of <code>succ</code>.</li>\n</ul>",
        "id": 207868834,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598288946
    },
    {
        "content": "<p>(that said, maybe we can improve <code>cases</code> so that it reverts any unfolding if it didn't make (enough) progress).</p>",
        "id": 207868984,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598289028
    },
    {
        "content": "<p>Thanks, <code>induction</code> is much nicer!</p>",
        "id": 207886485,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598297633
    }
]