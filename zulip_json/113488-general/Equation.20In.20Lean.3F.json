[
    {
        "content": "<p>How is an equation defined in Lean?<br>\nFor example, an Intuitive polymorphic expression would be (K : field) -&gt; ???  x*x + 1 = 0<br>\nOr just reason with (K : field) -&gt; (x : K) -&gt; x * x + 1 = 0 would be sufficient for using? What if i want to implement algorithm about which?<br>\nI do find core / init.meta.expr, but i don't quite know its usage.....</p>",
        "id": 307492543,
        "sender_full_name": "Erika Su",
        "timestamp": 1667385069
    },
    {
        "content": "<p>Can I suggest you start with one of the tutorials? Your question doesn't quite make sense, and it's hard to know what you know already and hence what sort of answer would be helpful.</p>",
        "id": 307493060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667385255
    },
    {
        "content": "<p>You don't want to be reading the core files in order to learn Lean. You really need to start with a tutorial.</p>",
        "id": 307493103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667385277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Equation.20In.20Lean.3F/near/307493060\">said</a>:</p>\n<blockquote>\n<p>Can I suggest you start with one of the tutorials? Your question doesn't quite make sense, and it's hard to know what you know already and hence what sort of answer would be helpful.</p>\n</blockquote>\n<p>I have finished reading <em>Theorem Proving in Lean 4</em> and most part of <em>Functional Programming in Lean</em> and some of the lean manual, and (at least i thought) i understand how to convert Prop, define inductive and quotient object, apply tactics, use typeclass and so on...... If I miss something, please tell me. I suppose you mean converting and reasoning with <code>Subtype predicate</code> already serve the purposes?</p>",
        "id": 307494999,
        "sender_full_name": "Erika Su",
        "timestamp": 1667385948
    },
    {
        "content": "<p>So this is a question about Lean 4 not Lean 3?</p>",
        "id": 307511158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667391988
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 307539525,
        "sender_full_name": "Arthur Correnson",
        "timestamp": 1667399919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> <a href=\"#narrow/stream/113488-general/topic/Equation.20In.20Lean.3F/near/307494999\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Equation.20In.20Lean.3F/near/307493060\">said</a>:</p>\n<blockquote>\n<p>Can I suggest you start with one of the tutorials? Your question doesn't quite make sense, and it's hard to know what you know already and hence what sort of answer would be helpful.</p>\n</blockquote>\n<p>I have finished reading <em>Theorem Proving in Lean 4</em> and most part of <em>Functional Programming in Lean</em> and some of the lean manual, and (at least i thought) i understand how to convert Prop, define inductive and quotient object, apply tactics, use typeclass and so on...... If I miss something, please tell me. I suppose you mean converting and reasoning with <code>(x : Nat) -&gt;  p x -&gt; q x</code> already serve the purposes?</p>\n</blockquote>\n<p>I think he's just having a hard time understanding your question. If I understand correctly, you're asking about how to talk about a type or structure that's understood to have certain properties. Lean users generally use type classes for this. I don't know if there's actually a good walkthrough explaining this in depth, but you can kind of get the idea from looking at how some of the algebraic type classes are defined, e.g. <a href=\"https://github.com/leanprover-community/mathlib4/blob/960dc0ee05a539183dbbb745bb0810bfce4c13b5/Mathlib/Algebra/GroupWithZero/Defs.lean#L27\">https://github.com/leanprover-community/mathlib4/blob/960dc0ee05a539183dbbb745bb0810bfce4c13b5/Mathlib/Algebra/GroupWithZero/Defs.lean#L27</a></p>",
        "id": 307566118,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1667406605
    },
    {
        "content": "<p>Here is an example of a naive interpretation of your question which is almost certainly not what you mean at all. Let us know what you actually mean. I'll define an equation in Lean below and then prove it's always true. I use Lean 4's maths library <code>mathlib4</code>. We don't have fields yet, but we have commutative rings, and fields are a special case. We have fields in Lean 3's mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- an equation</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- a proof</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 307607565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667418986
    },
    {
        "content": "<p>If you can ask your question by writing Lean code then it's often easier to understand more quickly what you actually want to know. You can post code using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> .</p>",
        "id": 307607883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667419119
    }
]