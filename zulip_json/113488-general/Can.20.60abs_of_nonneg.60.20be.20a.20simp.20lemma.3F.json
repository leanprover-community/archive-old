[
    {
        "content": "<p>I have been experimenting with using tactics like <code>ring</code> and <code>simp</code> as nonterminal tactics; perhaps this is a sin in mathlib but I think it might have pedagogical advantages sometimes, as it enables mathematicians to reason forwards more easily; furthermore the situation my students will find themselves in is that they will need to prove theorems as part of one-off projects but they will not have to worry about writing maintainable code. </p>\n<p>Experimenting with this idea I ran into the following issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"c1\">-- norm_num will simplify goals</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">49</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- \"arguing forwards\"</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ 49 = x</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">abs_of_nonneg : ∀ {α : Type u} [_inst_1 : add_group α] [_inst_2 : linear_order α]</span>\n<span class=\"cm\">  [_inst_3 : covariant_class α α has_add.add has_le.le] {a : α}, 0 ≤ a → |a| = a</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- next example doesn't work without this</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"n\">abs_of_nonpos</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"mi\">37</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- arguing forwards</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ 37 * x = y ; but `norm_num` does nothing without the simp attribute above</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't really understand <code>simp</code>. Can <code>abs_of_nonneg</code> and <code>abs_of_nonpos</code> be <code>simp</code> lemmas, or is that somehow a bad idea?</p>",
        "id": 268330070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642467329
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/abs_of_nonneg\">docs#abs_of_nonneg</a>)</p>",
        "id": 268370175,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642501268
    },
    {
        "content": "<p>These can probably work fine as <code>simp</code> lemmas: to apply a <code>simp</code> lemma its parameters need to be inferrable from the goal, or instances, or <code>Prop</code>-valued and solvable by a recursive call to <code>simp</code>. I think there are a few <code>simp</code> lemmas about nonnegativity so the recursive calls can probably be solved in the common cases.</p>",
        "id": 268370790,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642501612
    },
    {
        "content": "<p>I guess I don't really understand <code>simp</code> either.  If <code>abs_of_nonneg</code> was a <code>simp</code> lemma, then wouldn't <code>simp</code> always re-write <code>0 ≤ a</code> to <code>|a| = a</code> whenever it can, regardless of whether this is helpful or relevant?</p>",
        "id": 268375004,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642504003
    },
    {
        "content": "<p>That would only happen if the return type is  <code>(0 ≤ a) ↔ (|a| = a)</code>, here the return type is <code>|a| = a</code>, so <code>simp</code> will only try to rewrite <code>|a|</code> into <code>a</code>.</p>",
        "id": 268375239,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642504137
    },
    {
        "content": "<p>Ah, because <code>0 ≤ a</code> is just one of the preconditions, and <code>|a| = a</code> is the thing that <code>simp</code> is using to rewrite.</p>",
        "id": 268376653,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642505010
    },
    {
        "content": "<p>Right. And the thing I didn't understand about <code>simp</code> was whether it would aggressively change all <code>|a|</code>s to <code>a</code> and then throw a&gt;=0 at the user as a goal whether or not it was true. My understanding of the comments above is that fortunately this is not what happens.</p>",
        "id": 268382913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642508764
    },
    {
        "content": "<p>No, but <code>rw</code> would do that (though you need to write <code>rw abs_of_nonneg</code> explicitly of course).</p>",
        "id": 268383080,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642508844
    }
]