[
    {
        "content": "<p>Shall we move everything from <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list.20.28algebras.29/near/260869839\">Kyle's message</a> onwards to its own thread?</p>",
        "id": 260886880,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636506577
    },
    {
        "content": "<p>I have a prototype here: <a href=\"https://github.com/leanprover-community/mathlib/issues/10254\">#10254</a> <a href=\"https://github.com/leanprover-community/mathlib/blob/kmill_tactic_declare/src/tactic/declare.lean\">https://github.com/leanprover-community/mathlib/blob/kmill_tactic_declare/src/tactic/declare.lean</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">def_declare</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"s2\">\"variables [semiring %(A)] [algebra %(R) %(A)]\"</span>\n<span class=\"n\">def_declare</span> <span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"s2\">\"variables [add_comm_group %(V)] [module %(K) %(V)]\"</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"n\">declare</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">W</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"n\">declare</span> <span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">α</span>\n\n<span class=\"bp\">#</span><span class=\"n\">where</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">variables {F : Type u_1} {W : Type u_2} {α : Type u_3} [field F] [add_comm_group W] [module F W] [semiring α] [algebra F α]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 260890212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636509562
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">def_declare</span> <span class=\"n\">rep</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"s2\">\"variables [add_comm_monoid %(V)] [module %(k) %(V)]</span>\n<span class=\"s2\">  [distrib_mul_action %(G) %(V)] [smul_comm_class %(k) %(G) %(V)]\"</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"n\">declare</span> <span class=\"n\">rep</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span>\n</code></pre></div>",
        "id": 260896896,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636511040
    },
    {
        "content": "<p>I think at this point I would encourage \"please don't bother doing such things in Lean 3\" :-)</p>",
        "id": 260905669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636511259
    },
    {
        "content": "<p>If <code>declare? vector_space K V</code> would emit a <code>Try this:</code> line, that would be really nice. Especially if <code>declare</code> will use TC inference to only add missing types and instances.</p>",
        "id": 260944965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636518990
    },
    {
        "content": "<p>Then there is nothing magical, but still a convenience booster. Might still be worth doing in Lean 3?</p>",
        "id": 260944989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636519039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Commands.20for.20canonical.20variables.20declarations.20.28was.3A.20Under.2E.2E.2E/near/260944965\">said</a>:</p>\n<blockquote>\n<p>If <code>declare? vector_space K V</code> would emit a <code>Try this:</code> line, that would be really nice.</p>\n</blockquote>\n<p>Except for the <code>Try this:</code>, this is what it prints out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare</span><span class=\"bp\">?</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">W</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">variables [add_comm_group W] [module F W]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(It doesn't do any inference though since it's just a dumb text substitution mechanism.)</p>",
        "id": 260945639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636519913
    },
    {
        "content": "<p>Cool. If you just prepend <code>Try this: </code> to that message, then VScode magic will take care of the \"auto-replace\" this line.</p>",
        "id": 260945820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636520142
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"n\">declare</span><span class=\"bp\">?</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">W</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Try this: variables [add_comm_group W] [module F W]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 260945945,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636520285
    },
    {
        "content": "<p>/me thinks: PR! PR! PR!</p>",
        "id": 260945990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636520364
    },
    {
        "content": "<p>The <code>?</code> version is okay.</p>",
        "id": 260946844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636521270
    },
    {
        "content": "<p>It would be nice to avoid adding more work for mathport at this point. But the <code>?</code> sounds great.</p>",
        "id": 260958272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636532881
    },
    {
        "content": "<p>For now, I think it would be fair to have <code>declare</code> be in the same category as a non-terminal <code>simp</code>, in that, while library code shouldn't use it (at least until we better understand its properties), it would be helpful during development.</p>\n<p>Doing this using a text-based macro system definitely makes me shudder (and I'm sure it will be better in Lean 4), but it demonstrates that some approximation of the ideal can work right now.  The implementation is also rather simple, which has its benefits.  (It's so simple that it also allows you to devise some truly horrible <code>def_declare</code>s, but I've restrained myself from sharing them because I don't want anyone to get the wrong idea...)</p>\n<p>Before actually trying to PR it, I'd like to make it be somewhat more sophisticated.  It looks like it's not very hard to make it be aware of the current variables (with <code>get_variables</code>, like what <code>#where</code> uses) and have it not duplicate things.  It also seems very possible to have it do something like what Anne's patch does and make <code>declare</code> work for pre-existing typeclasses (and recursively), and then have <code>def_declare</code> be replaced by just class definitions, possibly with a special attribute to help <code>declare</code> out (that means they'd appear in the documentation and be searchable without further work).</p>",
        "id": 261035353,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636569654
    }
]