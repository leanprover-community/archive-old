[
    {
        "content": "<p>I have the following context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">r.converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">ℱ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">r.converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">ℱ</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure how to turn <code>h''</code> into the goal. I tried <code>rw is_lawful_functor.comp_map</code>, but that didn't help since <code>comp_map</code> uses <code>&lt;$&gt;</code> and not <code>map</code>.</p>",
        "id": 266380477,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640813484
    },
    {
        "content": "<p>Try <code>dsimp</code>?</p>",
        "id": 266381589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640814571
    },
    {
        "content": "<p>Or <code>convert h''</code></p>",
        "id": 266381660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640814620
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.map_map\">docs#filter.map_map</a>?</p>",
        "id": 266406956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640846431
    },
    {
        "content": "<p>Which <code>map</code> are you looking at? There is no <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map\">docs#map</a></p>",
        "id": 266406973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640846475
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 266412738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640854082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/simplifying.20composition.20in.20map/near/266406956\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.map_map\">docs#filter.map_map</a>?</p>\n</blockquote>\n<p>Ah, <code>filter.map_map</code> worked. Thanks a lot.</p>",
        "id": 266416845,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640858512
    },
    {
        "content": "<blockquote>\n<p>convert h''</p>\n</blockquote>\n<p>This also magically works.</p>",
        "id": 266417220,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640858919
    },
    {
        "content": "<p>\"Lean doesn't do magic\" -- Kenny Lau</p>",
        "id": 266417398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640859134
    },
    {
        "content": "<p>\"Any sufficiently advanced technology is indistinguishable from magic.\" -- Arthur C. Clarke</p>",
        "id": 266417455,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640859233
    },
    {
        "content": "<p>I've noticed that filter has certain theorems have are basically specializations of more general theorems (e.g. <code>filter.map_map</code> vs.  <code>is_lawful_functor.comp_map</code>). I suppose the reason for this is because Lean can't figure out how to instantiate very general theorems in certain cases, so having a specific one is better.</p>",
        "id": 266417614,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640859406
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lawful_functor.comp_map\">docs#is_lawful_functor.comp_map</a> isn't universe polymorphic</p>",
        "id": 266417920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640859689
    },
    {
        "content": "<p>It requires <code>α β γ : Type u</code></p>",
        "id": 266417982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640859742
    },
    {
        "content": "<p><code>filter.map_map</code> is, it requires <code>{α : Type u} {β : Type v} {γ : Type w}</code></p>",
        "id": 266418020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640859787
    },
    {
        "content": "<p>I thought the ? in <code>Type ?</code> means any universe. I didn't realize it was a name for a universe variable.</p>",
        "id": 266418129,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640859865
    },
    {
        "content": "<p>Have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lawful_functor/src\">src#is_lawful_functor</a></p>",
        "id": 266418496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860243
    },
    {
        "content": "<p>Is there any reason why functors aren't universe-polymorphic btw? I can't find the source of the restriction.</p>",
        "id": 266418518,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640860276
    },
    {
        "content": "<p>Try writing the <code>class</code> to be polymorphic, it doesn't work</p>",
        "id": 266418614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860416
    },
    {
        "content": "<p>Hmm... So that's a technical restriction, not a mathematical one?</p>",
        "id": 266418667,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640860460
    },
    {
        "content": "<p>The problem is that <code>(f : Type u → Type v)</code> is a quantification over types, and means that in the rest of the typeclass you can only talk about <code>f α</code> where <code>α : Type u</code></p>",
        "id": 266418695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860516
    },
    {
        "content": "<p>Yeah but this problem would go away if we did the refactor we talked about, right?</p>",
        "id": 266418708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640860545
    },
    {
        "content": "<p>If you deal with <code>f</code> in the way I do in my thread about redesigning the functor typeclasses to use out_param, that problem goes away</p>",
        "id": 266418710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860550
    },
    {
        "content": "<p>If you deal with <code>f</code> in the way I do in my thread about redesigning the functor typeclasses to use out_param, that problem goes away</p>",
        "id": 266418714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860554
    },
    {
        "content": "<p>Yes</p>",
        "id": 266418715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860554
    },
    {
        "content": "<p>Ah yes!</p>",
        "id": 266418716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640860557
    },
    {
        "content": "<p>How's this refactor going? Do you need a helping hand?</p>",
        "id": 266418760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640860578
    },
    {
        "content": "<p>But the functor typeclasses are hard-coded in the lean3 do notation parser</p>",
        "id": 266418771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860585
    },
    {
        "content": "<p>Can Leo or Gabriel do anything about that?</p>",
        "id": 266418825,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640860679
    },
    {
        "content": "<p>What is that <code>out_param</code> thing? I see it every once-in-a-while in type classes.</p>",
        "id": 266418827,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640860681
    },
    {
        "content": "<p>It's a way to stop Lean from trying to infer metavariables.</p>",
        "id": 266418873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640860695
    },
    {
        "content": "<p>Is that similar/analogous to the {| |} stuff?</p>",
        "id": 266418900,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640860741
    },
    {
        "content": "<p>Leo could try this refactor in lean 4, if we could convince him that a) it works, and b) it's worthwhile.</p>",
        "id": 266418919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860773
    },
    {
        "content": "<p>Any documentation about it I can read?</p>",
        "id": 266418922,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640860780
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/out_param\">docs#out_param</a> has one line of docs I think</p>",
        "id": 266418954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860802
    },
    {
        "content": "<p>The point is when you have an instance <code>instance foo.to_bar [foo a b c] : bar a b</code> where one variable that appears in the hypotheses does not appear in the goal. Because of the way TC inference works, when Lean looks for <code>bar a b</code>, it will find <code>foo.to_bar</code> and then look for <code>foo a b ?c</code>, and it will timeout trying to unify that metavariable.</p>",
        "id": 266419005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640860831
    },
    {
        "content": "<blockquote>\n<p>Do you need a helping hand</p>\n</blockquote>\n<p>Feel free to adopt my branch in the other thread. My goal there was simply to check that it's possible to state all the monad typeclasses in that style, not to actually replace all the old classes for new.</p>",
        "id": 266419015,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640860847
    },
    {
        "content": "<p>So instead we make <code>c</code> an <code>out_param</code> to prevent Lean from trying to figure out what it is.</p>",
        "id": 266419020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640860852
    },
    {
        "content": "<p>I get it. Interesting.</p>",
        "id": 266419109,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640860932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/simplifying.20composition.20in.20map/near/266418771\">said</a>:</p>\n<blockquote>\n<p>But the functor typeclasses are hard-coded in the lean3 do notation parser</p>\n</blockquote>\n<p>Actually I don't think this is true. It is hard-coded to make use of whatever <code>bind</code> resolves to, but not monads / functors specifically</p>",
        "id": 266434376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640876241
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo.bar</span>\n<span class=\"c1\">-- def foo.bar : ℕ :=</span>\n<span class=\"c1\">-- foo.bind 1 (λ (a : ℕ), 2 + a)</span>\n</code></pre></div>",
        "id": 266434681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640876505
    },
    {
        "content": "<p>I thought tactic mode <code>begin end</code> used more than just bind, but perhaps I'm mistaken</p>",
        "id": 266501169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640953968
    }
]