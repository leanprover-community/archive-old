[
    {
        "content": "<p>should we make stuff like <code>nat.pow_two</code> protected so that it doesn't clash with <code>pow_two</code>? this seems to be the approach with core lean</p>",
        "id": 197476155,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589403149
    },
    {
        "content": "<p>What we should do is not have <code>nat.pow</code></p>",
        "id": 197476216,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589403195
    },
    {
        "content": "<p>AFAIR, <code>nat.pow</code> has a native implementation, so the plan is to delete the <code>has_pow</code> instance, and add a <code>simp</code> lemma from <code>nat.pow</code> to <code>has_pow.pow</code>.</p>",
        "id": 197476357,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589403260
    },
    {
        "content": "<p>Can we define <code>monoid.pow</code> such that it's defeq to <code>nat.pow</code>? So there isn't a diamond?</p>",
        "id": 197476930,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589403603
    },
    {
        "content": "<p>I tried redefining monoid.pow so <code>a ^ (n+1) = a ^ n * a</code>, as opposed to <code>a * a^n</code>. Now <code>nat.pow._main</code> is defeq to <code>monoid.pow._main</code>, but <code>nat.pow</code> is not defeq to <code>monoid.pow</code></p>",
        "id": 197477129,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589403705
    },
    {
        "content": "<p>Or we can define <code>has_pow</code> based on <code>has_one</code> and <code>has_mul</code>.</p>",
        "id": 197479359,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589404861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/more.20protected.20definition/near/197479359\">said</a>:</p>\n<blockquote>\n<p>Or we can define <code>has_pow</code> based on <code>has_one</code> and <code>has_mul</code>.</p>\n</blockquote>\n<p>? don't we have an instance <code>has_pow ℂ ℂ</code>? (the point being that that instance is not constructed from <code>has_one ℂ</code> and <code>has_mul ℂ</code>)</p>",
        "id": 197479642,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589404959
    },
    {
        "content": "<p>I meant <code>has_pow M nat</code></p>",
        "id": 197481485,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589406125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/more.20protected.20definition/near/197476155\">said</a>:</p>\n<blockquote>\n<p>should we make stuff like <code>nat.pow_two</code> protected so that it doesn't clash with <code>pow_two</code>? this seems to be the approach with core lean</p>\n</blockquote>\n<p>I agree with the rest that was said. But I think we can still make <code>nat.pow_two</code> protected. It's easy to do, and relieves some of our pains.</p>",
        "id": 197504101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589428765
    }
]