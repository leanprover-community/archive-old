[
    {
        "content": "<p>In proving <code>acc nat.lt 0</code>, why doesn't the bottom line below work even though the penultimate line (in which I replace<code>r</code> with its definition) does work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">acc.intro</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nat.not_lt_zero</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nat.not_lt_zero</span> <span class=\"n\">y</span><span class=\"o\">))⟩</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)⟩</span>\n<span class=\"c1\">-- example : acc r 0 := ⟨0, (λ y h, by linarith)⟩  /- Doesn't work -/</span>\n</code></pre></div>\n<p>I see exactly the same behaviour if I replace <code>r</code> with <code>nat.lt</code>.</p>",
        "id": 221398762,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1609591830
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>linarith failed to find a contradiction\nstate:\ny : ℕ,\nh : r y 0\n⊢ false\n</code></pre></div>\n<p>I don't think <code>linarith</code> has much hope with that one.</p>",
        "id": 221398897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609592068
    },
    {
        "content": "<p><code>by {unfold r, linarith}</code> should work</p>",
        "id": 221398901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609592074
    },
    {
        "content": "<p><code>by {unfold r at h, linarith}</code></p>",
        "id": 221398919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609592129
    },
    {
        "content": "<p>Brilliant. Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 221398925,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1609592156
    },
    {
        "content": "<p>So the answer to your question is (1) your error message tells you exactly what state Lean was in when it failed, and (2) if you understand the scope of the <code>linarith</code> tactic you will know that it won't do random unfolding for you (why should it? It might fall into a rabbithole).</p>",
        "id": 221398976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609592205
    },
    {
        "content": "<p>I remember learning this a while ago -- I was surprised <code>linarith</code> couldn't prove <code>a &lt; b</code> when one of the hypotheses was <code>h : a &lt; b \\and (something else)</code>.</p>",
        "id": 221398987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609592244
    },
    {
        "content": "<p>But then it was patiently explained to me how you can't expect every tactic to be a kitchen sink tactic.</p>",
        "id": 221398994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609592269
    },
    {
        "content": "<p>I found an error regarding to the tactic linarith </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finitelySolvable</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Exists.intro</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">equation_solve</span> <span class=\"n\">x</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"n\">h2</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">_</span><span class=\"o\">,</span>  <span class=\"k\">from</span> <span class=\"n\">or.elim</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/o8JyUGPdr6e5Ux-ESyOalrJ9/截屏2021-11-30-下午9.45.32.png\">截屏2021-11-30-下午9.45.32.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/o8JyUGPdr6e5Ux-ESyOalrJ9/截屏2021-11-30-下午9.45.32.png\" title=\"截屏2021-11-30-下午9.45.32.png\"><img src=\"/user_uploads/3121/o8JyUGPdr6e5Ux-ESyOalrJ9/截屏2021-11-30-下午9.45.32.png\"></a></div>",
        "id": 263146232,
        "sender_full_name": "Shi You",
        "timestamp": 1638280099
    },
    {
        "content": "<p>if x = 2, then the equation should hold true.</p>",
        "id": 263146331,
        "sender_full_name": "Shi You",
        "timestamp": 1638280145
    },
    {
        "content": "<p>What happens if you inform <code>linarith</code> to use <code>t : x = 2</code>, by writing <code>λ t, by linarith [t]</code>?</p>",
        "id": 263146611,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638280252
    },
    {
        "content": "<p>Alternatively, since the outcome should be a specific number, you should be able to write <code>λ t, by norm_num [t]</code>.</p>",
        "id": 263146833,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638280350
    },
    {
        "content": "<p>it would also be nice if you have the deifnition of <code>finitelySolvable</code>, because we can't try this out ourselves on our own computers</p>",
        "id": 263147147,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638280481
    },
    {
        "content": "<p>This problem isn't linear, so it's not in scope for <code>linarith</code>. <code>nlinarith</code> would solve it. But as Anne says, <code>norm_num</code> is probably the better approach.</p>",
        "id": 263149300,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638281308
    },
    {
        "content": "<p>Thx, I solved this problem myself.</p>",
        "id": 263424569,
        "sender_full_name": "Shi You",
        "timestamp": 1638445220
    }
]