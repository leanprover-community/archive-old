[
    {
        "content": "<p>I see this comment in <code>data.seq.seq</code>:</p>\n<div class=\"codehilite\"><pre><span></span>/-\ncoinductive seq (α : Type u) : Type u\n| nil : seq α\n| cons : α → seq α → seq α\n-/\n ```\nDoes this mean that `seq` is intended to be coinductive? Does that mean we can have co-fixed points?\n</pre></div>",
        "id": 124283402,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522174984
    },
    {
        "content": "<p><code>seq</code> is intended to be coinductive, and it has co-fixed points. It has all the same properties you would expect of such a <code>coinductive</code> def, if it existed</p>",
        "id": 124285523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522178172
    },
    {
        "content": "<p>except possibly the computation rules</p>",
        "id": 124285526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522178185
    },
    {
        "content": "<p>and what is the name of the fixed point function?</p>",
        "id": 124285604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522178352
    },
    {
        "content": "<p><code>corec</code> I think, depending on what you mean by co-fixed point</p>",
        "id": 124285665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522178427
    },
    {
        "content": "<p>I mean the sequence (1,2,1,2,...) being defined as X := 1,2,X</p>",
        "id": 124285736,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522178546
    },
    {
        "content": "<p>We would need a better compiler to implement such a thing, but you can do it manually with a list storing the cycle</p>",
        "id": 124285760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522178615
    },
    {
        "content": "<p>and then doing what?</p>",
        "id": 124285815,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522178664
    },
    {
        "content": "<p>Here's an implementation of <code>cycle</code> for <code>stream</code>: <code>cycle 1 [2, 3] = [1, 2, 3, 1, 2, 3, ...]</code></p>\n<div class=\"codehilite\"><pre><span></span>def  cycle {α} (a : α) (l : list α) : stream α :=\nstream.corec&#39; (λ al, match al with\n| (b, []) := (b, a, l)\n| (b, c::l&#39;) := (b, c, l&#39;)\nend) (a, l)\n</pre></div>",
        "id": 124287806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522181858
    },
    {
        "content": "<p>no <code>cycle [1,2,3]</code>?</p>",
        "id": 124287865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181922
    },
    {
        "content": "<p>You could, but then what is <code>cycle []</code>?</p>",
        "id": 124288072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522182166
    },
    {
        "content": "<p>this way that's syntactically impossible to give as input</p>",
        "id": 124288086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522182189
    },
    {
        "content": "<p>if you did it in meta you wouldn't have to worry about this sort of thing, right?</p>",
        "id": 124288092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182211
    },
    {
        "content": "<p>and then you could just promise not to put [] in</p>",
        "id": 124288096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182221
    },
    {
        "content": "<p>I see</p>",
        "id": 124288142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522182249
    },
    {
        "content": "<p>You can promise not to put <code>[]</code> in in cycle as well: you could have an assumption <code>l != []</code> which would be no fun to work with, or you could have <code>A</code> be inhabited so that it returns <code>[default, default, ...]</code> in that case, or you could return a <code>seq</code> so that this produces an empty seq</p>",
        "id": 124288176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522182310
    }
]