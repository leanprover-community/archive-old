[
    {
        "content": "<p>I have a fintype A and a decidable predicate over A.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">decAP</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>I want to prove that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">decAP</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">p.1</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">f.1</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">p.fst</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">f.fst</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"c1\">-- ignore simple proofs</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- apply fintype.decidable_exists_fintype,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I know that <code>decidable_exists_fintype</code> could possibly solve my goal, but I cannot apply it directly, which would cause <br>\n<code>invalid apply tactic, failed to synthesize type class instance for decidable_pred (λ (a : A), p.fst a ∧ f.fst a)</code>. However, I can prove <code>decidable_pred (λ (a : A), p.fst a ∧ f.fst a)</code> easily. </p>\n<p>So is there a way to use <code>fintype.decidable_exists_fintype</code> with explicit arguments? Or is there a better way to solve this problem?</p>",
        "id": 291776879,
        "sender_full_name": "Quanwen Chen",
        "timestamp": 1659479109
    },
    {
        "content": "<p><code>g</code> is constructed, but the typeclass inference system does not know about it, because it is not refreshed during a proof unless you tell the system to refresh it. Writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">p.fst</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">f.fst</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>solves the problem (note: let not have, because it's data).</p>",
        "id": 291777431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659479454
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">decAP</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">p.1</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">f.1</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291777510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659479506
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics\">https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics</a> for more information about these \"I\" tactics.</p>",
        "id": 291777522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659479512
    },
    {
        "content": "<p>Many thanks for the help.</p>",
        "id": 291777594,
        "sender_full_name": "Quanwen Chen",
        "timestamp": 1659479547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515178\">Quanwen Chen</span> has marked this topic as resolved.</p>",
        "id": 291777600,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659479550
    },
    {
        "content": "<p>PS although Kyle has shown you a good proof, the answer to \"is there a way to use ... with explicit arguments\" is \"preface it with <code>@</code>\". For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">decAP</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">p.1</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">f.1</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">p.fst</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">f.fst</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"c1\">-- ignore simple proofs</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">fintype.decidable_exists_fintype</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291777820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659479718
    },
    {
        "content": "<p>Where can I get the explanation for the usage of <code>@</code>? A link to the document would be great.</p>",
        "id": 291782488,
        "sender_full_name": "Quanwen Chen",
        "timestamp": 1659482828
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">This</a> is where TPIL describes this, though the explanation is not much more detailed than the one Kevin gave.</p>",
        "id": 291792791,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1659493559
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">not</span> <span class=\"k\">have</span><span class=\"o\">,</span> <span class=\"n\">because</span> <span class=\"n\">it's</span> <span class=\"n\">data</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>Actually, this is not as simple as you think, because <code>letI</code> will complicate the data by adding a <code>let</code> binding. <code>haveI</code> does not forget about the definition. It just makes it hard (impossible?) to access from the tactic block.</p>",
        "id": 291805363,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659507564
    },
    {
        "content": "<p><code>haveI</code>, like <code>have</code> uses a lambda binder to get the value. Inside the body you have no information about the value</p>",
        "id": 291806409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659508600
    },
    {
        "content": "<p>that is, in <code>(\\lam x, &lt;here&gt;) 2</code> you don't know that <code>x = 2</code></p>",
        "id": 291806431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659508638
    }
]