[
    {
        "content": "<p>Maybe I am just extremely lazy, but I would really like a way to see what <code>simp</code> did without writing the 30+ characters making up the name of this topic somewhere that is often far away from the <code>simp</code> I am interested in. Perhaps we could add some lightweight syntax to <code>simp</code>, like <code>simp?</code> to enable the trace?</p>",
        "id": 195956496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588336520
    },
    {
        "content": "<p>There's also another incantation that does something slight different but requires only 8 additional characters: <code>squeeze_simp</code>.</p>",
        "id": 195956631,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588336645
    },
    {
        "content": "<p><code>squeeze_simp</code> is not quite as informative, though.</p>",
        "id": 195956687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588336686
    },
    {
        "content": "<p><code>squeeze_simp</code> feels like I have just transformed the puzzle of guessing what <code>simp</code> is doing into the puzzle of understanding the <code>squeeze_simp</code> output. (I know its primary purpose is something else.)</p>",
        "id": 195956765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588336767
    },
    {
        "content": "<p>(In particular, I might actually want to replace the <code>simp</code> with a <code>rw</code> or something, and that's hard to judge from <code>squeeze_simp</code> output.)</p>",
        "id": 195956870,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588336835
    },
    {
        "content": "<p>I also think this would be a great addition.  We don't even need to change core for this.</p>",
        "id": 195957181,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588337047
    },
    {
        "content": "<p>Oh <span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span></p>",
        "id": 195957205,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588337076
    },
    {
        "content": "<p>This \"works\" except that <code>set_bool_option `trace.simplify.rewrite` tt</code> has no effect. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"n\">reserve</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">simp</span><span class=\"err\">?</span><span class=\"bp\">`</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"err\">«</span><span class=\"n\">simp</span><span class=\"err\">?»</span> <span class=\"o\">(</span><span class=\"n\">use_iota_eqn</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">no_dflt</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">only_flag</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">attr_names</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">simp_config_ext</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"n\">get_options</span><span class=\"o\">,</span>\n<span class=\"n\">set_bool_option</span> <span class=\"bp\">`</span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">simp</span> <span class=\"n\">use_iota_eqn</span> <span class=\"n\">no_dflt</span> <span class=\"n\">hs</span> <span class=\"n\">attr_names</span> <span class=\"n\">locat</span> <span class=\"n\">cfg</span><span class=\"o\">,</span>\n<span class=\"n\">set_options</span> <span class=\"n\">o</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195957392,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588337278
    },
    {
        "content": "<p>Ah, I see <span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span></p>",
        "id": 195957498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588337365
    },
    {
        "content": "<p>Unfortunately there doesn't seem to be any way to enable trace options without changes in the C++ code.</p>",
        "id": 195958614,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588338303
    },
    {
        "content": "<p>Now that <code>set_bool_option `trace.simplify.rewrite tt</code> has the desired effect, is the above <code>«simp?» </code> method the best way to do this? Or would it be better to just add the flag in core?</p>",
        "id": 209428197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599591095
    },
    {
        "content": "<p>I would love to have <code>simp?</code>, but ideally with the helpful <code>Try this:</code> messages that <code>squeeze_simp</code> gives.</p>",
        "id": 209470584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599625118
    },
    {
        "content": "<p>Isn't that called <code>squeeze_simp</code>?</p>",
        "id": 209494015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599647381
    },
    {
        "content": "<p>I think the proposal is to rename <code>squeeze_simp</code> to <code>simp?</code> (like <code>rcases?</code>, etc.), and call the name tracing simp <code>simp?!</code>.</p>",
        "id": 209497389,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1599649803
    },
    {
        "content": "<p>this reminds me that <code>!</code> is already an option to <code>simp</code>, but I have no idea what it does</p>",
        "id": 209498279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599650561
    },
    {
        "content": "<p>Wait, shouldn't <code>simp?</code> use the name tracing, and replace <code>squeeze_simp</code>?</p>",
        "id": 209498768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599650923
    },
    {
        "content": "<p>Maybe I don't understand enough of the details of what has changed. But I thought that with the C++ changes, we could write a better <code>squeeze_simp</code></p>",
        "id": 209498808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599650968
    },
    {
        "content": "<p>The only C++ change is (in effect) that you can turn on <code>trace.simplify.rewrite</code> from inside a tactic block.</p>",
        "id": 209499094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599651185
    },
    {
        "content": "<p>Right. And that should allow a tactic to build better <code>squeeze_simp</code> output, right?</p>",
        "id": 209499131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599651222
    },
    {
        "content": "<p>More precisely, when the C++ part of the simplifier is entered, it uses the current options rather than the ones which were in effect when the declaration began.</p>",
        "id": 209499135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599651226
    },
    {
        "content": "<p>I have no idea, I just want to see the output of <code>trace.simplify.rewrite</code>! I don't think there is a tactic interface to that, but maybe?</p>",
        "id": 209499164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599651242
    }
]