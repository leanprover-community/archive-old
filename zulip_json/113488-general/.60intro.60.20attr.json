[
    {
        "content": "<p>What is the meaning of the attribute <code>intro</code>?</p>",
        "id": 192156342,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585457075
    },
    {
        "content": "<p>Looks like it's defined <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/library/tactic/backward/backward_lemmas.cpp#L74\" title=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/library/tactic/backward/backward_lemmas.cpp#L74\">in \"backward_lemmas.cpp\"</a> as part of the <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/library/init/meta/backward.lean#L30\" title=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/library/init/meta/backward.lean#L30\">backward chaining tactic</a>:</p>\n<div class=\"codehilite\"><pre><span></span>/- (backward_chaining_core t insts max_depth pre_tactic leaf_tactic lemmas): perform backward chaining using\n   the lemmas marked as [intro] and extra_lemmas.\n   The search maximum depth is \\c max_depth.\n   Before processing each goal, the tactic pre_tactic is invoked. The possible outcomes are:\n      1) it closes the goal\n      2) it does nothing, and backward_chaining_core tries applicable lemmas.\n      3) it fails, and backward_chaining_core backtracks.\n   Whenever no lemma is applicable, the leaf_tactic is invoked, to try to close the goal.\n   If insts is tt, then type class resolution is used to discharge goals.\n   Remark pre_tactic may also be used to trace the execution of backward_chaining_core -/\n</pre></div>",
        "id": 192156683,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585457843
    },
    {
        "content": "<p>I've never seen this tactic used before.</p>",
        "id": 192156687,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585457872
    },
    {
        "content": "<p>It sounds very similar to what we've ended up with with <code>solve_by_elim</code>!</p>",
        "id": 192156735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585457947
    },
    {
        "content": "<p>with <code>leaf_tactic</code> --&gt; <code>discharger</code>, <code>pre_tactic</code> --&gt; <code>pre_apply</code></p>",
        "id": 192156785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585458009
    },
    {
        "content": "<p><code>solve_by_elim</code> doesn't pull in any attribute by default, but you can call <code>solve_by_elim with attr</code></p>",
        "id": 192156788,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585458036
    },
    {
        "content": "<p>I'm reusing (+expanding) some code about <code>exists_unique</code> from core, and there is an <code>@[intro]</code> in the original code. I'll drop it in <code>mathlib</code> version.</p>",
        "id": 192156833,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585458125
    },
    {
        "content": "<p>Indeed Lean3 has a builtin back-chaining tactic. Unfortunately you can define only one set of lemmas to be used by this tactic, using the intro attribute. See <a href=\"https://github.com/leanprover/presentations/tree/master/20170116_POPL/backchain\" title=\"https://github.com/leanprover/presentations/tree/master/20170116_POPL/backchain\">https://github.com/leanprover/presentations/tree/master/20170116_POPL/backchain</a></p>",
        "id": 192168489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585479604
    },
    {
        "content": "<p>Maybe we could fix that in Lean 3.8, if anyone has time and energy, and if it turns out to be more efficient than what <code>tidy</code> and its friends already give us.</p>",
        "id": 192168517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585479653
    },
    {
        "content": "<p>backwards chaining in mathlib is done by solve_by_elim, not by tidy (although tidy does sometimes call solve_by_elim)</p>",
        "id": 192169002,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585480515
    },
    {
        "content": "<p>This makes <code>solve_by_elim</code> a <code>tidy</code> friend.</p>",
        "id": 192169613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585481418
    }
]