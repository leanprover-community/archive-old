[
    {
        "content": "<p>Could <code>simpa</code> be changed so that if <code>simp</code> closes a goal, then <code>simpa</code> closes it as well, instead of giving an error?<br>\nI am thinking of something like <code>rwa</code> which performs the rewrite even when the <code>a(ssumption)</code> is not available.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">--works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"c1\">--simpa failed  state: no goals</span>\n</code></pre></div>\n<p>Maybe there is a reason why this behaviour is unwanted/problematic?</p>",
        "id": 267332478,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641698193
    },
    {
        "content": "<p>I like this because <code>simpa</code> lets you know when a plain <code>simp</code> would have worked. How about keeping an error or at least a message, but replacing the message with \"try this: <code>simp</code>\"?</p>",
        "id": 267419999,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641810399
    },
    {
        "content": "<p>I like the \"Try this\" idea!</p>",
        "id": 267420066,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641810451
    },
    {
        "content": "<p>I'd assumed that this thread was going to be the complaint that <code>simpa using foo bar</code> works but <code>rwa [some_lemma] using foo bar</code> doesn't</p>",
        "id": 267420229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641810534
    },
    {
        "content": "<p>Ah, I probably named it wrong: i had more an \"simp is to simpa as rw is to rwa\" in mind.</p>",
        "id": 267420321,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641810592
    },
    {
        "content": "<p>So there are two improvements: (i) make <code>rwa</code> more like <code>simpa</code> by having <code>rwa ... using ...</code>. and (ii) make both of them output <code>Try this:</code> if a <code>rw</code> or <code>simp</code> would already have closed the goal.</p>",
        "id": 267421984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641811580
    },
    {
        "content": "<p>I'd find <code>rwa using</code>super helpful. I've used <code>simpa only using</code> too many times for that.</p>",
        "id": 267422617,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641811903
    },
    {
        "content": "<p>Johan, thank you for the more thorough disambiguation: I failed at communication!  <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 267422718,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641811937
    },
    {
        "content": "<p>Isn't <code>rwa using</code> not actually useful though? Isn't <code>rw, exact</code> the same length even?</p>",
        "id": 267440363,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641822358
    },
    {
        "content": "<p>Well, but you might need <code>rw, exacts</code> which is one character longer <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 267440609,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641822487
    },
    {
        "content": "<p>If we're following <code>simpa using</code>, <code>rwa [eqs] using hyp</code> would mean something more like <code>have this := hyp, rw [eqs] at this ⊢, exact this</code></p>",
        "id": 267440697,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641822538
    },
    {
        "content": "<p>As a compromise, maybe <code>rwa [eqs] using hyp</code> should mean <code>have this := hyp, rw [eqs] at this, exact this</code> (that is, without rewriting at the goal)</p>",
        "id": 267440793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641822592
    },
    {
        "content": "<p>Because <code>rw [eqs] at this ⊢</code> is rarely going to be useful, because every lemma in <code>eqs</code> has to match both <code>this</code> and <code>⊢</code> at every step</p>",
        "id": 267440855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641822621
    },
    {
        "content": "<p>Good point, I always forget whether it succeeds if any of the lemmas matches <code>this</code> or all of them.</p>",
        "id": 267440934,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641822673
    },
    {
        "content": "<p>I don't really see the gain from any of this... just another non-compositional thing to learn.</p>",
        "id": 267441071,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641822744
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">baz</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>feels awfully verbose, and often leads to ugly golfs with the frustrating triangle that would be more readable as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rwa</span> <span class=\"n\">baz</span> <span class=\"n\">at</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>I guess the other way of looking at it is that we shouldn't have <code>rwa</code> either, as <code>rw foo, assumption</code> works fine and is compositional.</p>",
        "id": 267442024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641823273
    },
    {
        "content": "<p>Novice input: I think it's easier to learn when things have more structure. Making <code>rwa</code> more similar to <code>simpa</code> would probably turn it into less things to learn</p>",
        "id": 267442338,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641823420
    },
    {
        "content": "<p>it's not real structure though</p>",
        "id": 267442377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641823440
    },
    {
        "content": "<p>How about an <code>almost term tac</code> tactic that works like <code>exact term</code> except it applies <code>tac</code> to <code>term</code> first?</p>",
        "id": 267442555,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641823536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/simp.2Fsimpa.20vs.20rw.2Frwa/near/267442024\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">baz</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>feels awfully verbose, and often leads to ugly golfs with the frustrating triangle that would be more readable as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rwa</span> <span class=\"n\">baz</span> <span class=\"n\">at</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>I guess the other way of looking at it is that we shouldn't have <code>rwa</code> either, as <code>rw foo, assumption</code> works fine and is compositional.</p>\n</blockquote>\n<p>Doesn't </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n<span class=\"n\">rwa</span> <span class=\"n\">baz</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>work for your example though? so its not that long?</p>",
        "id": 267442667,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641823583
    },
    {
        "content": "<p>So <code>simpa [eqs] using term = almost term { simp [eqs] }</code> and <code>rwa [eqs] using term = almost term { rw [eqs] }</code></p>",
        "id": 267442699,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641823606
    },
    {
        "content": "<p>Are you proposing an <code>almost</code> tactic, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>?</p>",
        "id": 267445136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641824837
    },
    {
        "content": "<p>I would prefer having a tactic like that over duplicate logic in <code>rwa</code>/<code>simpa</code>.</p>",
        "id": 267445455,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641825025
    },
    {
        "content": "<p><code>simpa</code> simplifies both the <code>using</code> term and the goal, so I'm not too sure that <code>almost</code> would work</p>",
        "id": 267446632,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641825639
    },
    {
        "content": "<p>I feel like it's mostly useful for one-liners to have this sort of thing, as <code>rwa ... using</code> flows a lot better than <code>let x := ... in by rwa ... at this</code></p>",
        "id": 267446697,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641825690
    },
    {
        "content": "<p>Another example of a <code>simpa</code>-like tactic: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#exact_mod_cast\">tactic#exact_mod_cast</a></p>",
        "id": 267745784,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642003701
    }
]