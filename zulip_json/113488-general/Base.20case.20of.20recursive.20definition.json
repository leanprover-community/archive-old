[
    {
        "content": "<p>I'm used to being able to get out the base case of a recursive definition by <code>rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">two_pow</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">two_pow</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">two_pow</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>In the following example, it doesn't seem to work.  Is there another way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pascal</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>This seems pretty similar to <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20refl.20fails.20to.20prove.20case.20of.20equation.20compiler\">a question</a> from a couple of months ago, but I can't get the <code>cases</code> trick from there to work.</p>",
        "id": 301567467,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664509989
    },
    {
        "content": "<p><code>unfold pascal</code> works, but this is indeed strange. I would have expected <code>refl</code> to work!</p>",
        "id": 301569994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664512920
    },
    {
        "content": "<p>it's proved by well founded recursion, those don't compute by  rfl</p>",
        "id": 301570462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664513486
    },
    {
        "content": "<p>It is possible to restructure the definition to be structurally recursive, in which case all the theorems are by rfl (except the overlapping patterns)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pascal_succ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">pascal_succ</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">pascal_succ</span> <span class=\"o\">(</span><span class=\"n\">pascal</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_pascal</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_zero</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 301570816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664513881
    },
    {
        "content": "<p>If you want to keep the original definition, you still can prove the equations using the generated equation lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pascal</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_pascal</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_zero</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 301570929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664513999
    },
    {
        "content": "<p>Rule of thumb: when there are two variables involved but you're only defining the answer in three cases not four, the \"it's all rfl\" model breaks down sometimes.</p>",
        "id": 301580430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664520529
    },
    {
        "content": "<p>Thanks all!</p>",
        "id": 301649852,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664545415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Base.20case.20of.20recursive.20definition/near/301580430\">said</a>:</p>\n<blockquote>\n<p>Rule of thumb: when there are two variables involved but you're only defining the answer in three cases not four, the \"it's all rfl\" model breaks down sometimes.</p>\n</blockquote>\n<p>I'm not so sure about this....</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pascal</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 301660489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664548210
    },
    {
        "content": "<p>it seems that the equation compiler still splits up the original definition into the four cases?!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pascal</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">pascal.equations._eqn_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">pascal.equations._eqn_2</span>\n<span class=\"k\">#check</span> <span class=\"n\">pascal.equations._eqn_3</span>\n<span class=\"k\">#check</span> <span class=\"n\">pascal.equations._eqn_4</span>\n</code></pre></div>",
        "id": 301662501,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664548715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Base.20case.20of.20recursive.20definition/near/301660489\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Base.20case.20of.20recursive.20definition/near/301580430\">said</a>:</p>\n<blockquote>\n<p>Rule of thumb: when there are two variables involved but you're only defining the answer in three cases not four, the \"it's all rfl\" model breaks down sometimes.</p>\n</blockquote>\n<p>I'm not so sure about this....</p>\n</blockquote>\n<p>Let P=\"two variables and three cases\" and Q=\"it's all rfl\". What Kevin asserts is that <code>P → ¬Q</code> (sometimes), which doesn't imply <code>¬P → Q</code>.</p>",
        "id": 301665675,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1664549540
    },
    {
        "content": "<p>Although, there is an example of <code>P → Q</code> (two variables, three cases, but all-rfl works):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>   <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>   <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>     <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 301665867,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1664549602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I think the <code>pascal</code> function is demonstrating that the equation lemmas are more of a rule of thumb of what you might expect <code>rfl</code> to prove, but they're actually not always what <code>rfl</code> can prove! For example, <code>unfold pascal</code> works but <code>dunfold pascal</code> does not.</p>",
        "id": 301667004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664549935
    },
    {
        "content": "<p>You can see the whole definition in all its well-founded glory with <code>delta pascal pascal._main._pack</code></p>",
        "id": 301667117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664549980
    },
    {
        "content": "<p>yeah I tried that too... it's terrible. But I guess this is a good reminder that <code>unfold</code> doesn't necessarily preserve definitional equality!</p>",
        "id": 301667278,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664550019
    },
    {
        "content": "<p>How is <code>pascal.equations._eqn_1</code> proved under the hood?</p>",
        "id": 301667539,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664550086
    },
    {
        "content": "<p><code>#print pascal._main._pack.equations._eqn_1</code> gives you the answer (in a way...)</p>",
        "id": 301670920,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664550955
    },
    {
        "content": "<p>I wonder if we should have a <code>refl</code>-like tactic that operates by <code>unfold</code>-ing definitions? Like <code>simp [pascal]</code> but where you don't need to write <code>pascal</code>. The <code>simp!</code> tactic is not quite right since it uses delta unfolding.</p>\n<p>The reason I suggest this is that <code>rfl</code> not being able to compute when there is well-founded recursion is a recurring question.</p>\n<p>Another option is some sort of <code>reduce</code> tactic that uses all the equation lemmas. I'm imagining we could have a <code>dec_trivial</code> variant that uses it.</p>",
        "id": 301672636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664551403
    },
    {
        "content": "<p><code>simp!</code> uses the equation lemmas IIUC</p>",
        "id": 301689163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664555956
    },
    {
        "content": "<p>I checked, and <code>simp!</code> gives the <code>has_well_founded.wf.fix ...</code> term here</p>",
        "id": 301692295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664556935
    }
]