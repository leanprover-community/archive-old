[
    {
        "content": "<p>I have an inductive set that’s roughly built up like this</p>\n<ul>\n<li>It includes all ordinals less than Aleph n</li>\n<li>It includes sums of ordinals in the set</li>\n<li>It includes applications of some ordinal function to values in the set</li>\n</ul>\n<p>I want to prove that the minimum excluded value of this set is strictly smaller than Aleph (n + 1). The way I’m thinking to do this is by induction on the “height” of an element of the set; at each step I have Aleph n ordinals, and after countably many steps I will still. I’m pretty much lost on what the best way to do this in Lean is, though.</p>",
        "id": 264569981,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639238769
    },
    {
        "content": "<p>Does \"sums\" mean binary/finite sums?</p>",
        "id": 264570078,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639238917
    },
    {
        "content": "<p>Yep (I used binary sums for simplicity)</p>",
        "id": 264570105,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639238995
    },
    {
        "content": "<p>so something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal_ordinal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">low</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">o</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"n\">o'</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">o'</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">+</span> <span class=\"n\">o'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 264570466,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639239426
    },
    {
        "content": "<p>Yeah, that’s pretty much it</p>",
        "id": 264570479,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639239446
    },
    {
        "content": "<p>I’m thinking… if I were given some injection from sets of “height” k to Aleph n, I could build an injection from sets of height k + 1 to (Aleph n x Aleph n) + Aleph n, which should then allow me to build an injection from those sets to Aleph n. So overall, I should have an injection from all of these sets to N.card x Aleph n which should then inject into Aleph n as well. Is this the right approach for problems like these?</p>",
        "id": 264570557,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639239530
    },
    {
        "content": "<p>Not sure if I should phrase things in terms of injections, or just in terms of cardinalities</p>",
        "id": 264570577,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639239578
    },
    {
        "content": "<p>So the general strategy that I use for this is to introduce an auxiliary inductive type which indexes the possible \"shapes\" of the terms of <code>S</code> (which for some reason I call <code>time</code>) and another inductive type which is parameterized by it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal_ordinal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">low</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">o</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"n\">o'</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">o'</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">+</span> <span class=\"n\">o'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">time</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_low</span> <span class=\"o\">:</span> <span class=\"n\">time</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_add</span> <span class=\"o\">:</span> <span class=\"n\">time</span> <span class=\"bp\">→</span> <span class=\"n\">time</span> <span class=\"bp\">→</span> <span class=\"n\">time</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_app</span> <span class=\"o\">:</span> <span class=\"n\">time</span> <span class=\"bp\">→</span> <span class=\"n\">time</span>\n<span class=\"kn\">open</span> <span class=\"n\">time</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">countable_time</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.mk</span> <span class=\"n\">time</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal.omega</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">timed_S</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">time</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">low</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">o</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord</span> <span class=\"bp\">→</span> <span class=\"n\">timed_S</span> <span class=\"n\">o</span> <span class=\"n\">t_low</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"n\">t</span> <span class=\"n\">o'</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">timed_S</span> <span class=\"n\">o</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">timed_S</span> <span class=\"n\">o'</span> <span class=\"n\">t'</span> <span class=\"bp\">→</span> <span class=\"n\">timed_S</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">+</span> <span class=\"n\">o'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_add</span> <span class=\"n\">t</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">timed_S</span> <span class=\"n\">o</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">timed_S</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_time</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">timed_S</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">o</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">t_low</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">timed_S.low</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">timed_small</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">time</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.mk</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">timed_S</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">o</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cardinal.aleph</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">t'</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">timed_S</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">o</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">timed_S</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">o</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">timed_S</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"n\">t_add</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"o\">⟨⟨</span><span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">o'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">⟩⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">o</span> <span class=\"bp\">+</span> <span class=\"n\">o'</span><span class=\"o\">,</span> <span class=\"n\">timed_S.add</span> <span class=\"n\">o</span> <span class=\"n\">t₁</span> <span class=\"n\">o'</span> <span class=\"n\">t₂</span> <span class=\"n\">s</span> <span class=\"n\">s'</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">o</span> <span class=\"n\">t₁</span> <span class=\"n\">o'</span> <span class=\"n\">t₂</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨(⟨</span><span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">s₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">o'</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">⟩),</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">cardinal.mk_le_of_surjective</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264571178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639240335
    },
    {
        "content": "<p>Then, by combining these lemmas, you get a surjection from something whose cardinality you can bound by <code>aleph (n+1)</code> to <code>{o | S n f o}</code></p>",
        "id": 264571288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639240506
    },
    {
        "content": "<p>Wait, small question regarding <code>induction h</code></p>",
        "id": 264571300,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639240524
    },
    {
        "content": "<p>Why doesn't <code>cases h</code> work?</p>",
        "id": 264571301,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639240530
    },
    {
        "content": "<p>In the other cases, you will need the induction hypothesis to know that you can build the constituent <code>S</code>s as <code>timed_S</code>s</p>",
        "id": 264571358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639240568
    },
    {
        "content": "<p>It might end up being that proving <code>countable_time</code> is the most annoying part, in which case I didn't improve much on what you were already suggesting...</p>",
        "id": 264571390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639240627
    },
    {
        "content": "<p>So I guess a variant that combines both is to replace <code>time</code> by <code>nat</code> and <code>timed_S</code> by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">timed_S'</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">low</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">o</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord</span> <span class=\"bp\">→</span> <span class=\"n\">timed_S'</span> <span class=\"n\">o</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"n\">t</span> <span class=\"n\">o'</span> <span class=\"n\">t'</span> <span class=\"n\">t''</span><span class=\"o\">,</span> <span class=\"n\">timed_S'</span> <span class=\"n\">o</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">timed_S'</span> <span class=\"n\">o'</span> <span class=\"n\">t'</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t''</span> <span class=\"bp\">→</span> <span class=\"n\">t'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t''</span> <span class=\"bp\">→</span> <span class=\"n\">timed_S'</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">+</span> <span class=\"n\">o'</span><span class=\"o\">)</span> <span class=\"n\">t''</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"n\">t</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">timed_S'</span> <span class=\"n\">o</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t'</span> <span class=\"bp\">→</span> <span class=\"n\">timed_S'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"n\">t'</span>\n</code></pre></div>\n<p>(there's no real need to generate each element exactly once) and use strong induction to prove <code>timed_small</code>, with more complicated <code>F</code> &amp; cardinal arithmetic there</p>",
        "id": 264571711,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639240996
    },
    {
        "content": "<p>This is a bit off-topic, but are there any statements about additive principal ordinals? I'm stuck proving a statement of the form <code>a &lt; (cardinal.aleph n).ord → b &lt; (cardinal.aleph n).ord → a + b &lt; (cardinal.aleph n).ord</code>.</p>",
        "id": 264572972,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639242464
    },
    {
        "content": "<p>The lemmas <code>α &lt; omega ^ γ → β &lt; omega ^ γ → α + β &lt; omega ^ γ</code> and <code>(cardinal.aleph n).ord  = omega ^ (cardinal.aleph n).ord </code> would suffice for this, but I don't think either of them exist...</p>",
        "id": 264573367,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639242966
    },
    {
        "content": "<p>The first of these lemmas should be provable by building the Cantor Normal Form of <code>α</code> and <code>β</code>. Not sure how I'd tackle the second.</p>",
        "id": 264573590,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639243224
    },
    {
        "content": "<p>Ah, found <code>ordinal.add_lt_omega_power</code></p>",
        "id": 264573601,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639243255
    },
    {
        "content": "<p>I have no idea how to prove the second part though <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 264574270,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639243994
    },
    {
        "content": "<p>I believe the lemma <code>α &lt; ℵ_n → ω ^ α &lt; ℵ_n</code> should do it, after that I could just use the definition of ordinal exponentiation</p>",
        "id": 264574367,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639244126
    },
    {
        "content": "<p>(in fact, this lemma should generalize to <code>α &lt; ℵ_n → β &lt; ℵ_n → α ^ β &lt; ℵ_n</code>, which would then allow one to prove <code>α &lt; ℵ_n → α ^ ℵ_n = ℵ_n</code>)</p>",
        "id": 264574533,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639244343
    },
    {
        "content": "<p>...I have yet another question pertaining to ordinals. Can I prove <code>(cardinal.aleph.{u} n).lift = cardinal.aleph.{u+1} n</code> for <code>n : ℕ</code>?</p>",
        "id": 264577830,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639248384
    },
    {
        "content": "<p>(or more generally, <code>cardinal.aleph (α.lift) = (cardinal.aleph α).lift</code>)</p>",
        "id": 264577855,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639248432
    },
    {
        "content": "<p>Is it definitely true? I'm serious.</p>",
        "id": 264578285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639248896
    },
    {
        "content": "<p>I somehow imagine that changing your universe of sets can screw up cardinals. But I might be way off.</p>",
        "id": 264578304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639248930
    },
    {
        "content": "<p>I'm not even sure if I believe an inequality. But I might just be being paranoid.</p>",
        "id": 264578391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639249018
    },
    {
        "content": "<p>I have no idea, but if it isn't true, there goes the last hour of my life <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 264579112,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639249920
    },
    {
        "content": "<p>There's a lot of lift lemmas for ordinals, so I'm at least hopeful</p>",
        "id": 264579149,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639249940
    },
    {
        "content": "<p>In the best case scenario, this would be true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cardinal.aleph_lift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">cardinal.aleph</span> <span class=\"o\">(</span><span class=\"n\">ordinal.lift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 264579178,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1639250006
    },
    {
        "content": "<p>that theorem should be true</p>",
        "id": 264647924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639349035
    },
    {
        "content": "<p>Actually you can generalize it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cardinal.aleph_lift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">cardinal.aleph</span> <span class=\"o\">(</span><span class=\"n\">ordinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 264647975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639349089
    },
    {
        "content": "<p>The stuff about <code>α &lt; ℵ_n → ω ^ α &lt; ℵ_n</code> should generalize to a class of ordinals, I think they are called additive indecomposable ordinals</p>",
        "id": 264648031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639349168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/inductive.20sets.20and.20cardinality/near/264572972\">said</a>:</p>\n<blockquote>\n<p>This is a bit off-topic, but are there any statements about additive principal ordinals? I'm stuck proving a statement of the form <code>a &lt; (cardinal.aleph n).ord → b &lt; (cardinal.aleph n).ord → a + b &lt; (cardinal.aleph n).ord</code>.</p>\n</blockquote>\n<p>Isn't <code>a &lt; x.ord</code> equivalent to <code>a.card &lt; x</code>? (Since <code>x.ord</code> is the smallest ordinal with cardinal <code>x</code>.)<br>\nThen it transposes to a more basic fact about the sum of infinite cardinals right?</p>",
        "id": 264661841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639368260
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.lt_ord\">docs#cardinal.lt_ord</a></p>",
        "id": 264661871,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639368317
    },
    {
        "content": "<p>ord and card form a Galois insertion or coinsertion I guess.</p>",
        "id": 264680412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639387692
    },
    {
        "content": "<p>coincidentally, <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/264693273\">https://leanprover.zulipchat.com/#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/264693273</a></p>",
        "id": 264699233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639398846
    }
]