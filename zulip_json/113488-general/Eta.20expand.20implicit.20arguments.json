[
    {
        "content": "<p>Suppose I have an expression <code>e</code> with type <code>∀ (x : T) {y : U}, V</code>. From this, I'm generating something of the form <code>λ (x' : T'), e (f x')</code>, which I'd like to have type <code>∀ (x' : T') {y : U}, V</code>. However, when elaborating this generated expression, Lean eagerly creates a metavariable for <code>{y : U}</code>, so the actual type is <code>∀ (x' : T'), V[y/?m]</code>.</p>\n<p>To avoid this, I thought I'd eta-expand the implicit argument, generating <code>λ (x' : T') {y : U}, @e (f x') y</code>. However, I can't find the incantation that gives me <code>@e</code> for an arbitrary <code>e</code>. (In the application, <code>e</code> is a local constant, if that helps.) Any pointers?</p>\n<p>(Unrelated question but I'm hijacking my own thread: Can I match on a level in an expression pattern? <code>`(eq.{%%u} ...)</code> doesn't seem to be a valid pattern.)</p>",
        "id": 198345901,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590079855
    },
    {
        "content": "<p>You can write <code>@e</code> if <code>e</code> is a local constant though</p>",
        "id": 198346715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590080235
    },
    {
        "content": "<p>You could also consider changing the type of <code>e</code> to <code>∀ (x : T) {{y : U}}, V</code></p>",
        "id": 198348636,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590081106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Eta.20expand.20implicit.20arguments/near/198346715\">said</a>:</p>\n<blockquote>\n<p>You can write <code>@e</code> if <code>e</code> is a local constant though</p>\n</blockquote>\n<p>In surface Lean, yes, but how do I represent this as an <code>expr</code>? I tried variations of <code>`(@%%e ...)</code>, but that doesn't seem to work. In general, what is the <code>expr</code> corresponding to <code>@h</code> if <code>h</code> is a local const?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Eta.20expand.20implicit.20arguments/near/198348636\">said</a>:</p>\n<blockquote>\n<p>You could also consider changing the type of <code>e</code> to <code>∀ (x : T) {{y : U}}, V</code></p>\n</blockquote>\n<p>Yeah, I thought about that as well. This would be a slightly confusing change for users, but if nothing else works, I'll take it.</p>",
        "id": 198356921,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590085134
    },
    {
        "content": "<p>as an expr, you don't have to do anything because you can just call <code>expr.app</code> and so on, elaboration doesn't happen unless you tell it to</p>",
        "id": 198356995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590085174
    },
    {
        "content": "<p>You don't have to use <code>`(%%e ...)</code> to construct exprs, in fact I wouldn't recommend it because it's not very general</p>",
        "id": 198357133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590085224
    },
    {
        "content": "<p>but I would need to see more precisely what you are trying to  do to give more targeted advice</p>",
        "id": 198357217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590085277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Eta.20expand.20implicit.20arguments/near/198356995\">said</a>:</p>\n<blockquote>\n<p>as an expr, you don't have to do anything because you can just call <code>expr.app</code> and so on, elaboration doesn't happen unless you tell it to</p>\n</blockquote>\n<p>Okay, that makes sense. I thought I'd tried that, but I'll have to go back and check what exactly went wrong. Anyway, thanks!</p>",
        "id": 198363370,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590088381
    },
    {
        "content": "<p>Pro-tip: <code>expr</code> has a function coercion, so you can write <code>e (f (var 0))</code>.</p>",
        "id": 198364050,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590088724
    },
    {
        "content": "<p>That is equal parts beautiful and horrifying.</p>",
        "id": 198372245,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590092635
    },
    {
        "content": "<p>Okay, here's why my code doesn't work: I'm constructing a <code>pexpr</code> as above, not an <code>expr</code>. So, the real question: Is there a way to apply a local const to an implicit argument <em>in a <code>pexpr</code></em>?</p>",
        "id": 198373230,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590093118
    },
    {
        "content": "<p>Not sure I'm interpreting your question right, are you looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pexpr.mk_explicit\">docs#pexpr.mk_explicit</a> ?</p>",
        "id": 198373601,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590093284
    },
    {
        "content": "<p>Don't know -- is <code>mk_explicit e</code> the equivalent of surface <code>@e</code>?</p>",
        "id": 198375464,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590094153
    },
    {
        "content": "<p>Yes it is! Awesome, thanks.</p>",
        "id": 198375895,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590094342
    }
]