[
    {
        "content": "<p>Hello,<br>\n the Program Proof book (<a href=\"https://www.amazon.com/PROGRAM-PROOF-Samuel-Mimram/dp/B08C97TD9G/ref=sr_1_1?dchild=1&amp;keywords=program+proof&amp;qid=1615882109&amp;sr=8-1\">https://www.amazon.com/PROGRAM-PROOF-Samuel-Mimram/dp/B08C97TD9G/ref=sr_1_1?dchild=1&amp;keywords=program+proof&amp;qid=1615882109&amp;sr=8-1</a>) states the following on page 293:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">As</span> <span class=\"n\">a</span> <span class=\"n\">first</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"k\">let</span><span class=\"bp\">'</span><span class=\"n\">s</span> <span class=\"k\">show</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"n\">propositional</span> <span class=\"n\">formula</span>\n<span class=\"n\">A</span> <span class=\"bp\">/\\</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span> <span class=\"bp\">/\\</span> <span class=\"n\">A</span>\n<span class=\"n\">is</span> <span class=\"n\">valid.</span> <span class=\"n\">By</span> <span class=\"n\">the</span> <span class=\"n\">Curry</span><span class=\"bp\">-</span><span class=\"n\">Howard</span> <span class=\"n\">correspondence</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">want</span> <span class=\"n\">a</span> <span class=\"n\">program</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">type</span>\n<span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"n\">A</span>\n<span class=\"n\">showing</span> <span class=\"n\">that</span> <span class=\"n\">x</span> <span class=\"n\">is</span> <span class=\"n\">commutative.</span>\n</code></pre></div>\n<p>Further down the page, the author provides the proof in Agda:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"kn\">import</span> <span class=\"n\">Data.Product</span>\n<span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">comm</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>A few pages later, he steps throught the proof, as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">comm</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"o\">}</span><span class=\"mi\">0</span>    <span class=\"c1\">----------------  (=&gt;R) right rule or introduction rule in natural deduction</span>\n<span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">comm</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">{}</span><span class=\"mi\">0</span> <span class=\"c1\">---------------- (/\\L) left-rule</span>\n<span class=\"n\">etc.</span>\n</code></pre></div>\n<p>I have a few questions:</p>\n<ul>\n<li>is there  a <em>Data.Product</em> data type in Lean? </li>\n<li>let's say the multiplication sign is the Data Product sign in Lean</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>... how would you prove such a theorem?<br>\nMust you somewhat convert multiplication signs to /\\s?<br>\nMany thanks.<br>\nPhiroc</p>",
        "id": 230474682,
        "sender_full_name": "Phiroc",
        "timestamp": 1615882540
    },
    {
        "content": "<blockquote>\n<p>is there a Data.Product data type in Lean? </p>\n</blockquote>\n<p>it's called <code>prod</code>, or <code>A \\times B</code></p>",
        "id": 230475142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615882855
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.swap\">docs#prod.swap</a> is the \"proof\" you are looking for</p>",
        "id": 230475151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615882860
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/and.symm\">docs#and.symm</a> is the version with /\\</p>",
        "id": 230475238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615882911
    },
    {
        "content": "<p>Thanks for the proofs. Now, can anyone explain why <em>A /\\ B =&gt; B /\\ A</em> is equivalent (for lack of a better term) to <em>A x B =&gt; B x A</em> ?</p>",
        "id": 230475763,
        "sender_full_name": "Phiroc",
        "timestamp": 1615883234
    },
    {
        "content": "<p>They aren't equivalent in lean, but they are very similar looking</p>",
        "id": 230475807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615883272
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 230475919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615883333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282193\">@Phiroc</span> that's because <code>/\\</code> is similar to <code>x</code></p>",
        "id": 230476235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615883510
    },
    {
        "content": "<p>To give a proof of <code>p /\\ q</code> is to give a proof of <code>p</code> and a proof of <code>q</code></p>",
        "id": 230476307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615883549
    },
    {
        "content": "<p>to give an element of <code>A x B</code> is to give an element of <code>A</code> and an element of <code>B</code></p>",
        "id": 230476318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615883558
    },
    {
        "content": "<p>in jargon, they are both sigma types</p>",
        "id": 230476340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615883576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> On page 299 of the book, the author fills the proof's holes step by step, providing proofs in traditional logic syntax along the way. For instance, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">comm</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"o\">}</span><span class=\"mi\">0</span> <span class=\"c1\">--------------&gt; ? / |- A /\\ B =&gt; B /\\ A</span>\n</code></pre></div>",
        "id": 230476635,
        "sender_full_name": "Phiroc",
        "timestamp": 1615883745
    },
    {
        "content": "<p>Does it mean that he considers A x B pairs equivalent to A /\\ B in this particular proof?</p>",
        "id": 230476779,
        "sender_full_name": "Phiroc",
        "timestamp": 1615883819
    },
    {
        "content": "<p>I don't understand the syntax <code>{ }0</code></p>",
        "id": 230476821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615883850
    },
    {
        "content": "<p>These things are not equivalent in Lean. What is going on in your resource is a question about your resource, not a question about Lean.</p>",
        "id": 230476839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615883865
    },
    {
        "content": "<p>{ }0 is a \"hole\" which needs filling (C-c C-r)</p>",
        "id": 230476891,
        "sender_full_name": "Phiroc",
        "timestamp": 1615883883
    },
    {
        "content": "<p>why are you asking about Agda in a Lean chat</p>",
        "id": 230476953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615883930
    },
    {
        "content": "<p>I'm not asking an Agda question. I am trying to understand the x-comm proof.</p>",
        "id": 230477031,
        "sender_full_name": "Phiroc",
        "timestamp": 1615883991
    },
    {
        "content": "<p>I'm satisfied with the answers you guys have provided.</p>",
        "id": 230477155,
        "sender_full_name": "Phiroc",
        "timestamp": 1615884061
    },
    {
        "content": "<p>In Lean we have a <code>Prop</code> universe and a <code>Type</code> universe, and there are analogies between them (e.g. prod vs and) but moving from <code>Prop</code> to <code>Type</code> can be tricky because <code>Prop</code> is proof-irrelevant. So your agda thing might not port so well into Lean.</p>",
        "id": 230477323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615884158
    },
    {
        "content": "<p>I think the explanation is as follows (in my understanding as a newbie): because Ands are Pairs,  A /\\ B is equivalent to A x B. So to prove A x B =&gt; B x A, you can prove A /\\ B =&gt; B /\\ A, or something of the sort. Case closed.</p>",
        "id": 230477560,
        "sender_full_name": "Phiroc",
        "timestamp": 1615884312
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pprod.swap\">docs#pprod.swap</a> the agda equivalent? Edit: that doesn't exist, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pprod\">docs#pprod</a> does, and is probably the analog to Agda's 'x'</p>",
        "id": 230477725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615884421
    },
    {
        "content": "<blockquote>\n<p>So to prove A x B =&gt; B x A, you can prove A /\\ B =&gt; B /\\ A, or something of the sort.</p>\n</blockquote>\n<p>Well, the two proofs don't actually relate to each other - one doesn't imply the other in any nontrivial sense. Rather, they are just two proofs with the same \"shape\".</p>",
        "id": 230477926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615884536
    },
    {
        "content": "<p>You would be surprised how often completely different theorems can be proved with exactly the same proof text. <code>by simp</code> and <code>rfl</code> come up shockingly often as proof texts</p>",
        "id": 230478004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615884592
    }
]