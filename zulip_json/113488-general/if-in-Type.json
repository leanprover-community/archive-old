[
    {
        "content": "<p>Is it plausible to extend the meaning of <code>if h : X then ... else ...</code> so that <code>X</code> doesn't need to be a <code>Prop</code>, but could be in <code>Type*</code>?</p>\n<p>Everything would have exactly the usual meaning: in the \"yes\" branch, we'd have a term <code>h : X</code>, and in the \"no\" branch we'd have a term <code>h : X → false</code>.</p>\n<p>We'd have to generalize away from <code>decidable_pred</code>, but there's a perfectly sensible notion for arbitrary types, i.e. an algorithm that either produces an element or a proof of <code>X → false</code>. In <code>classical</code> mode this could still apply to every type.</p>\n<p>I feel like we could avoid some beating around the bush with <code>nonempty</code> sometimes if <code>if</code> statements were allowed to go for the witness directly.</p>",
        "id": 241090877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622592172
    },
    {
        "content": "<p>I would prefer for this to be a separate definition, although I don't know if you can declare a notation like <code>if then else</code> yourself in lean 3 - I think that one is implemented directly in C++</p>",
        "id": 241091258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622592565
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span> <span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">choicy</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">choicy</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">choicy</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">classical.choicy</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choicy</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"k\">then</span> <span class=\"n\">choicy.pos</span> <span class=\"o\">(</span><span class=\"n\">classical.choice</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">choicy.neg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">type_ite</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">choicy</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"n\">choicy.rec_on</span> <span class=\"n\">d</span> <span class=\"n\">t</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>I don't really know what kind of types would have nontrivial <code>choicy</code> instances though</p>",
        "id": 241091682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622593023
    },
    {
        "content": "<p>maybe it would be better to simplify this to eliminate the <code>choicy</code> class and just use this for your choicy ite needs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">choicy_ite</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"k\">then</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">classical.choice</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 241091924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622593250
    },
    {
        "content": "<p>I explored this a little before at <a href=\"https://gist.github.com/eric-wieser/103ad49e8c5c4415991b7622f77c48e0\">https://gist.github.com/eric-wieser/103ad49e8c5c4415991b7622f77c48e0</a></p>",
        "id": 241111295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622616653
    },
    {
        "content": "<p>Using psum is consistent with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.type_decidable\">docs#classical.type_decidable</a></p>",
        "id": 241111316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622616675
    }
]