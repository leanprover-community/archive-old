[
    {
        "content": "<p>Newbie question. How can I make a recursive call within a <code>match</code> expression?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ℕ</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"err\">ℕ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"mi\">+1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">_match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">57</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"></span>\n<span class=\"n\">end</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190111179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583783971
    },
    {
        "content": "<p>Or is this not how it's supposed to be done?</p>",
        "id": 190111189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583783980
    },
    {
        "content": "<p>I know I can just call <code>f</code>. But suppose that you're in a situation where the thing you are defining doesn't have a name...</p>",
        "id": 190111294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583784016
    },
    {
        "content": "<p>For example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">57</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 190111358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583784066
    },
    {
        "content": "<p>I think it's not possible</p>",
        "id": 190112108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583784517
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">57</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 208</span>\n</pre></div>",
        "id": 190115436,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583786418
    },
    {
        "content": "<p>I wonder why the original doesn't work then!</p>",
        "id": 190115567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583786516
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/using.20induction.20hypothesis.20in.20match\" title=\"#narrow/stream/113488-general/topic/using.20induction.20hypothesis.20in.20match\">Here's what Mario said in an older thread</a>:</p>\n<blockquote>\n<p>the \"official\" solution is to just have an auxiliary function, or use induction to construct the function. In lean 4, if my suggestion to sebastian worked, we will have an actual term mode notation for this using let</p>\n</blockquote>",
        "id": 190116540,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583787207
    },
    {
        "content": "<p>So much for term mode superiority</p>",
        "id": 190117917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583788098
    },
    {
        "content": "<p>How about a syntax like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"kn\">using</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">57</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 208</span>\n</pre></div>",
        "id": 190117973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583788160
    },
    {
        "content": "<p>I mean, for structural recursion like this, you could just apply the recursor directly easily enough</p>",
        "id": 190117975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583788160
    },
    {
        "content": "<p>Sure... but it seems less nice (from a syntactic point of view)</p>",
        "id": 190118006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583788194
    },
    {
        "content": "<p>Johan, your punishment for bad mouthing term mode is to do the  <code>(∀ x, p x ∨ r) -&gt; (∀ x, p x) ∨ r</code> exercise in term mode without mathlib lemmas.</p>",
        "id": 190118250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583788341
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Doesn't seem <span aria-label=\"nauseated\" class=\"emoji emoji-1f922\" role=\"img\" title=\"nauseated\">:nauseated:</span> to me?</p>",
        "id": 190118614,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583788632
    },
    {
        "content": "<p>Using <code>or.resolve_right</code> feels like cheating, but I've checked and it's in core.</p>",
        "id": 190118758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583788719
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {α} (p : α → Prop) (r : Prop) : (∀ x, p x ∨ r) → (∀ x, p x) ∨ r :=\nλ h, by_contradiction (λ h&#39;,\n  (h&#39; ((em r).elim\n    or.inr\n    (λ hnr, or.inl (λ x, (h x).elim\n      id\n      (λ hr, absurd hr hnr))))).elim)\n</pre></div>\n\n\n<p>tactic mode could have prevented this</p>",
        "id": 190121094,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1583790421
    },
    {
        "content": "<p>Of course tactic mode would be <code>by finish</code> probably. But I guess <code>begin contrapose!, exact _ end</code> should be a good compromise (where you still need to fill in the underscore).</p>",
        "id": 190121725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583790816
    },
    {
        "content": "<p>My proposed syntax for this using let, by the way, is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span>\n<span class=\"k\">in</span> <span class=\"n\">foo</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 190135022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583803541
    },
    {
        "content": "<p>In other words it's like normal <code>let</code> except you write <code>|</code> instead of <code>:=</code> after the type, just like you would in a <code>def</code>, and usual equation compiler stuff comes after</p>",
        "id": 190135083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583803603
    },
    {
        "content": "<p>I think Coq uses a syntax like <code>fix f (params) := body[f]</code> for this kind of \"let rec expression\"</p>",
        "id": 190135189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583803688
    },
    {
        "content": "<p>as distinct from the top level command which is <code>Fixpoint</code></p>",
        "id": 190135205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583803719
    },
    {
        "content": "<p>We could probably implement it in lean 3.x if we care to, it's mostly leveraging parsers and mechanisms that already exist in lean 3</p>",
        "id": 190135229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583803774
    },
    {
        "content": "<p>Johan, out of curiosity, do you want this for mathing, or programming?</p>",
        "id": 190135280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583803808
    },
    {
        "content": "<p>For mathing I recommend using an auxiliary function. Because this will get broken out as a separate definition by lean anyway, and if you don't give it a name it will get an ugly automatically generated one</p>",
        "id": 190135817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583804670
    },
    {
        "content": "<p>and that's what you will see when proving theorems about the definition</p>",
        "id": 190135841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583804716
    }
]