[
    {
        "content": "<p>I don't know what to do to solve this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounds</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_fst'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.fst</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_snd'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.snd</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_upper_bounds_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mem_upper_bounds_image</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.preorder</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">monotone_fst'</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mem_upper_bounds_image</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">monotone_fst'</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mem_upper_bounds_image</span> <span class=\"n\">monotone_fst'</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253632743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631818783
    },
    {
        "content": "<p>The problem seems to stem from <code>(Hf : monotone f)</code> taking in <code>@preorder.to_has_le α</code> and <code>preorder.to_has_le β</code> and not just any <code>has_le</code>.</p>",
        "id": 253633101,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631818885
    },
    {
        "content": "<p>Note this is all already in mathlib, and somehow I've broken it in the past 6 commits I made to <a href=\"https://github.com/leanprover-community/mathlib/issues/7987\">#7987</a> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 253633238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631818925
    },
    {
        "content": "<p>What do you mean by \"works\" and \"fails\"?<br>\nSurely, the last two can't infer <code>α</code> or <code>β</code>.</p>",
        "id": 253634119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631819246
    },
    {
        "content": "<p>Yeah but they should be left as metavariables. If you provide them using other arguments, that still doesn't work</p>",
        "id": 253634443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631819374
    },
    {
        "content": "<p>Well in the Lean playground, they all \"work\" then.</p>",
        "id": 253634614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631819439
    },
    {
        "content": "<p>Hmm...</p>",
        "id": 253634673,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631819463
    },
    {
        "content": "<p>Well a non minimal really non working example is the branch <code>locally_finite</code> in <code>order.bounds</code>, if somebody could have a look.</p>",
        "id": 253634900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631819556
    },
    {
        "content": "<p>prod orders are broken, lt and le don't agree.</p>",
        "id": 253672413,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631839286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Could you please point me to the pair of instances that create a diamond?</p>",
        "id": 253675885,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631842129
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.has_lt/src\">src#prod.has_lt</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.has_le/src\">src#prod.has_le</a></p>",
        "id": 253676033,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631842242
    },
    {
        "content": "<p>What's wrong with these two instances? We never require <code>lt_iff_le_not_le</code> to be a definitional equality.</p>",
        "id": 253676098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631842306
    },
    {
        "content": "<p>Probably some other instance up in the chain uses the default <code>(&lt;)</code> instead of <code>lt := (&lt;)</code>.</p>",
        "id": 253676162,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631842338
    },
    {
        "content": "<p>Indeed, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.preorder\">docs#prod.preorder</a> is bad.</p>",
        "id": 253676204,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631842400
    },
    {
        "content": "<p>Specifically in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.ordered_smul/src\">src#prod.ordered_smul</a>, I couldn't generalize it properly.</p>",
        "id": 253676211,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631842408
    },
    {
        "content": "<p>I'll try to fix it now.</p>",
        "id": 253676221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631842419
    },
    {
        "content": "<p>Yes, what I meant is that. I just sent the actually conflicting definitions.</p>",
        "id": 253676231,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631842434
    },
    {
        "content": "<p>I'll fix <code>prod.preorder</code>, then the diamond should disappear.</p>",
        "id": 253676303,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631842479
    },
    {
        "content": "<p>OMG, <code>prod.has_lt</code> is not equivalent to <code>le_and_not_le</code> for a <code>preorder</code>.</p>",
        "id": 253676698,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631842809
    },
    {
        "content": "<p>We'll need to fix it in the core.</p>",
        "id": 253676719,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631842820
    },
    {
        "content": "<p>(or move <code>prod.has_lt</code> to <code>mathlib</code>)</p>",
        "id": 253676737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631842837
    },
    {
        "content": "<p>I don't think <code>prod.has_lt</code> should be an instance at all</p>",
        "id": 253676920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631842994
    },
    {
        "content": "<p>there should be a type alias for the total order</p>",
        "id": 253676933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631843010
    },
    {
        "content": "<p>or use <code>prod.lex</code> instead of <code>&lt;</code></p>",
        "id": 253677001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631843050
    },
    {
        "content": "<p>I'm going to delete the old instance from core.</p>",
        "id": 253677475,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631843445
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/620\">lean#620</a></p>",
        "id": 253677643,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631843605
    },
    {
        "content": "<p>We already have a type alias <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lex\">docs#lex</a> for the lexicographical order.</p>",
        "id": 253677666,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631843640
    },
    {
        "content": "<p>Right, this is the issue I hit earlier. You're taking on the core change that I avoided :-) thank you</p>",
        "id": 253677850,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631843783
    },
    {
        "content": "<p>BTW, do we use the right definition for <code>lex.has_le</code> in case of a preorder? It looks like the map <code>λ x, (x, a)</code> is not monotone with our definition.</p>",
        "id": 253678023,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631843947
    },
    {
        "content": "<p>Because we don't have <code>eq_or_lt_of_le</code>.</p>",
        "id": 253678069,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631843996
    },
    {
        "content": "<p>I think that we should use <code>(a, b) ≤ (c, d) ↔ a ≤ c ∧ (c ≤ a → b ≤ d)</code> (or don't claim to support preorders).</p>",
        "id": 253678386,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631844186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110187\">@Minchao Wu</span> According to the header, you're the authors of <code>order.lexicographic</code>.</p>",
        "id": 253678481,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631844249
    },
    {
        "content": "<p>We'll need another statement that still says <code>(a, b) ≤ (c, d) ↔ a &lt; c \\or (a = c ∧ b ≤ d)</code> with <code>[partial_order]</code>.</p>",
        "id": 253678718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631844438
    },
    {
        "content": "<p>Yes, sure. We need a partial order on <code>α</code> and a preorder on <code>β</code> for this statement.</p>",
        "id": 253678747,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631844473
    },
    {
        "content": "<p>There should be an <code>iff</code> with <code>lex</code> as well if we want to reuse the fact that it's well-founded.</p>",
        "id": 253678825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631844522
    },
    {
        "content": "<p>Oh duh, I didn't notice <code>prod.has_lt</code> existed.</p>",
        "id": 253696433,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631860017
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.has_lt\">docs#prod.has_lt</a>)</p>",
        "id": 253696478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631860052
    },
    {
        "content": "<p>Thansk for correcting this! What's puzzling me is that all this was working before and I somehow broke it. Maybe it was just fragile.</p>",
        "id": 253696503,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631860076
    },
    {
        "content": "<p>As you can see with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.ordered_smul/src\">src#prod.ordered_smul</a>, if you're at a complex enough structure, then it takes only one \"canonical\" path through the TCs. But generalizing, it has more options to branch. That's probably what's going on in your generalization branch.</p>",
        "id": 253725727,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631877153
    },
    {
        "content": "<p>Okay, I've made an actual MWE. This is the most minimizing I've ever done.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive_expr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">≤</span> <span class=\"n\">q.1</span> <span class=\"bp\">∧</span> <span class=\"n\">p.2</span> <span class=\"bp\">≤</span> <span class=\"n\">q.2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_refl</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">prod.has_le</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">monotone</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_fst</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.fst</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">''</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">set.image</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone.mem_upper_bounds_image</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe_works</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a.1</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">monotone.mem_upper_bounds_image</span> <span class=\"n\">monotone_fst</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe_fails</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a.1</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">monotone_fst.mem_upper_bounds_image</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254353352,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632311120
    },
    {
        "content": "<p>I think this is clearly(?) an elaboration issue.</p>",
        "id": 254353495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632311194
    },
    {
        "content": "<p>If I replace the definition of <code>monotone</code> by <code>def monotone [preorder α] [has_le β] (f : α → β) : Prop := ∀ ⦃a b⦄, a ≤ b → f a ≤ f b</code>, then <code>mwe_fails</code> works.</p>",
        "id": 254353634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632311275
    },
    {
        "content": "<p>This is because dot notation has different elaboration rules I guess</p>",
        "id": 254354042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632311519
    },
    {
        "content": "<p>I guess it does <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> <br>\nLean fails to unify <code>@prod.has_le α β</code> with <code>@preorder.to_has_le α β _</code></p>",
        "id": 254354318,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632311662
    },
    {
        "content": "<p>In current mathlib, this works because <code>monotone</code> assumes <code>[preorder α] [preorder β]</code>. What should I do? Remove the affected dot notation? Stick to <code>preorder</code> in the definition? Get someone to fix that elaboration issue?</p>",
        "id": 254354908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632312016
    },
    {
        "content": "<p>Does putting a type annotation on <code>monotone_fst</code> before the dot notation help?</p>",
        "id": 254355283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632312218
    },
    {
        "content": "<p>Indeed this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mwe_fails</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a.1</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">prod.fst</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">monotone_fst</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.fst</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mem_upper_bounds_image</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 254356615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632312904
    },
    {
        "content": "<p>(I put <code>α</code> and <code>β</code> in the same universe to make the errors a bit shorter.)<br>\nSo here's something I don't understand. In a message like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">40</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n    <span class=\"bp\">@</span><span class=\"n\">monotone.mem_upper_bounds_image.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monotone_fst.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_7</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span> <span class=\"bp\">?</span><span class=\"n\">m_9</span> <span class=\"bp\">?</span><span class=\"n\">m_10</span> <span class=\"bp\">?</span><span class=\"n\">m_11</span><span class=\"o\">)</span>\n  <span class=\"n\">term</span>\n    <span class=\"bp\">@</span><span class=\"n\">monotone_fst.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"bp\">@</span><span class=\"n\">monotone.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.has_le.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.fst.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"bp\">@</span><span class=\"n\">monotone.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span>\n</code></pre></div>\n<p>are the <code>?m_2</code> and <code>?m_3</code> that appear in the actual and expected types the same metavariables in both, or are they independent?</p>",
        "id": 254357000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632313088
    },
    {
        "content": "<p>Ah I guess they are numbered independently, since in the first line <code>monotone_fst</code> is applied to things like <code>?m_8</code> and <code>?m_9</code></p>",
        "id": 254357293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632313216
    },
    {
        "content": "<p>I guess the story must be something like: We need to type check <code>monotone_fst</code> first, in order to even find out what definition <code>monotone_fst.mem_upper_bounds_image</code> refers to. At this point, we have no idea how the value <code>monotone_fst</code> will get used so we can't infer anything about its type arguments. So if we try to do instance search now, we can't make any progress. So we end up with <code>monotone_fst</code> applied to a slew of metavariables. But at least we know its type is of the form <code>monotone _</code>.<br>\nThen, we know the dot notation is referring to <code>monotone.mem_upper_bounds_image</code>. But <code>monotone.mem_upper_bounds_image monotone_fst</code> can only type check <em>after</em> we do another instance search and find that we mean <code>prod.has_le</code>. Apparently Lean doesn't do an instance search at this point.</p>",
        "id": 254358513,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632313843
    },
    {
        "content": "<p>I think the reason it works with <code>preorder</code> in <code>monotone</code> but not <code>has_le</code> is that in the latter case, there's a <em>potentially</em> non-defeq instance issue. Of course if you actually look at the definition of <code>prod.preorder</code> you'll see that <code>to_has_le</code> of it is the same as <code>prod.has_le</code>, but you have to look at the instances to see this. If you only talk about <code>preorder</code> everywhere then this issue doesn't come up.</p>",
        "id": 254358834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632313994
    },
    {
        "content": "<p>For reference, what I did here in the end is to require <code>preorder</code> everywhere and it works fine.</p>",
        "id": 255849698,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633159349
    }
]