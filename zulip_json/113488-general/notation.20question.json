[
    {
        "content": "<p>The following might be impossible in Lean but I thought I'd ask. It's just an issue with notation.</p>",
        "id": 126173744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606213
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">♥</span><span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">euclidean₁</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}},</span> <span class=\"n\">x</span> <span class=\"err\">♥</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">♥</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">♥</span> <span class=\"n\">z</span>\n<span class=\"kn\">definition</span> <span class=\"n\">euclidean₂</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}},</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"kn\">definition</span> <span class=\"n\">euclidean₃</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}},</span> <span class=\"n\">x</span> <span class=\"err\">♥</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">♥</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">♥</span> <span class=\"n\">z</span>\n</pre></div>",
        "id": 126173745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606218
    },
    {
        "content": "<p>(<code>\\heartsuit</code> gives the heart, by the way)</p>",
        "id": 126173746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606239
    },
    {
        "content": "<p>So mathematicians would normally _define_ a new relation with the infix notation, in contrast to functional programmers who want to define <code>R</code> first and then set up infix notation for it.</p>",
        "id": 126173754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606293
    },
    {
        "content": "<p>This has the following annoying-for-mathematicians consequence.</p>",
        "id": 126173755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606308
    },
    {
        "content": "<p>Definition 1 above is not so great because you can't see what you are defining -- it should say \"euclidean1 heartsuit\" or something.</p>",
        "id": 126173794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606337
    },
    {
        "content": "<p>Definition 2 is correct, but doesn't use the notation, so mathematicians are left wondering why we have <code>R x y</code> instead of <code>x R y</code> or <code>x heartsuit y</code></p>",
        "id": 126173795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606363
    },
    {
        "content": "<p>(infix notation is more normal in mathematics than CS perhaps)</p>",
        "id": 126173796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606376
    },
    {
        "content": "<p>And definition 3 is wrong because the heart in the definition is unrelated to the R -- the heart is attached to the variable R and definition 3 introduces a new one.</p>",
        "id": 126173804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606408
    },
    {
        "content": "<p>My dream is</p>",
        "id": 126173805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606438
    },
    {
        "content": "<p><code>definition euclidean_dream (R) := ∀ {{x y z : S}}, x ♥ y → x ♥ z → y ♥ z </code></p>",
        "id": 126173806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606441
    },
    {
        "content": "<p>but of course that doesn't even typecheck</p>",
        "id": 126173843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606447
    },
    {
        "content": "<p>Is there any way I can make my dream definition typecheck?</p>",
        "id": 126173847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606469
    },
    {
        "content": "<p>Actually I guess my dream is the impossible:</p>",
        "id": 126173848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606477
    },
    {
        "content": "<p><code>definition euclidean_dream ♥ := ∀ {{x y z : S}}, x ♥ y → x ♥ z → y ♥ z </code></p>",
        "id": 126173849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606494
    },
    {
        "content": "<p>I don't mind a few incomprehensible lines with set-up beforehand, my question I guess is simply whether I can introduce a local variable in a definition and instantly have access to notation for it.</p>",
        "id": 126173896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525606583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Something like this proposal? <a href=\"https://github.com/leanprover/lean/issues/1522#issuecomment-294872715\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1522#issuecomment-294872715\">https://github.com/leanprover/lean/issues/1522#issuecomment-294872715</a></p>",
        "id": 126174227,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525607485
    },
    {
        "content": "<p>Yes! I didn't mention it in my posts above but I did try to do this with the type class notation types (indeed I wrote <code>has_heart</code> :-) ) but I couldn't get that to work either because <code>definition blah (S : Type) (R : S -&gt; S -&gt; Prop) [has_heart S]</code> wouldn't attach the heart to R and I couldn't figure out how to make the attachment whilst keeping it all looking clean and uncluttered. I am currently thinking a lot about trying to write code which looks really clean to mathematicians, who we can think of here as people who know exactly what a transitive binary relation is but have no idea what a typeclass is and don't want to see clutter when they are actually doing or reading mathematics in Lean.</p>",
        "id": 126174466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525608103
    },
    {
        "content": "<p>In Haskell you can convert an infix operator to an ordinary (prefix) function by surrounding the operator in parentheses. You can also use this notation at a binding site.<br>\nThe hypothetical Lean equivalent would be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">euclidean</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"err\">♥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}},</span> <span class=\"n\">x</span> <span class=\"err\">♥</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">♥</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">♥</span> <span class=\"n\">z</span>\n</pre></div>",
        "id": 126176900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525614299
    },
    {
        "content": "<p>Lean would need to be told the associativity and left binding power, or at least default options for such things.</p>",
        "id": 126178574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525617920
    }
]