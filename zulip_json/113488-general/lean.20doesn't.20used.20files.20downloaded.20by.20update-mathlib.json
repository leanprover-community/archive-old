[
    {
        "content": "<p>Someone in the Hanoi formalabstracts group had the following issue. After running <code>update-mathlib</code>, Lean does not use the downloaded compiled files (the compilation time of <code>logic.basic</code> is instantaneous, but the compilation time is longer if we go further into mathlib, both in VSCode and running <code>lean</code> on the command line).</p>\n<p>Does someone have an idea what could cause the issue? I attached a downloaded and compiled olean file from her laptop. There are some changes on the first line which might give a hint to someone who can read that line (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?). </p>\n<p>Some notes: It is a Windows laptop, and <code>elan</code> was not installed on her laptop (is that a potential issue?).</p>\n<p><a href=\"/user_uploads/3121/yDUy8mdnlcJd5VDTE8JtyJ_Z/basic.olean\" target=\"_blank\" title=\"basic.olean\">basic.olean</a> <a href=\"/user_uploads/3121/I28tnDj4Op7LRH_RwemJAl3Z/basic_downloaded.olean\" target=\"_blank\" title=\"basic_downloaded.olean\">basic_downloaded.olean</a></p>",
        "id": 168571417,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561013860
    },
    {
        "content": "<p>if there is a change in the first few lines of the olean file that's probably the checksum</p>",
        "id": 168571471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561013928
    },
    {
        "content": "<p>This is the checksum of the <code>.lean</code> file which is used to see if the file needs to be compiled again?</p>",
        "id": 168571546,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561014033
    },
    {
        "content": "<p>was there a description of the meaning of the first line? I remember seeing that somewhere...</p>",
        "id": 168571577,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561014076
    },
    {
        "content": "<p>oh no, it's the file length</p>",
        "id": 168571734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561014251
    },
    {
        "content": "<p>no I was right the first time, it's the checksum</p>",
        "id": 168571769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561014326
    },
    {
        "content": "<p>I suggest olean-rs for documentation on the olean format</p>",
        "id": 168571773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561014340
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/olean-rs/blob/master/olean.lean\" target=\"_blank\" title=\"https://github.com/digama0/olean-rs/blob/master/olean.lean\">https://github.com/digama0/olean-rs/blob/master/olean.lean</a></p>",
        "id": 168571823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561014372
    },
    {
        "content": "<p>The olean dumps are identical though</p>",
        "id": 168572039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561014741
    },
    {
        "content": "<p>It's a checksum of the rest of the olean file</p>",
        "id": 168572066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561014795
    },
    {
        "content": "<p>And indeed the files are not byte for byte identical, there is a change somewhere in the middle but the dumps are the same suggesting it's not a semantic difference</p>",
        "id": 168572078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561014834
    },
    {
        "content": "<p>So any idea why these <code>.olean</code> files are not used by lean?</p>",
        "id": 168572524,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561015392
    },
    {
        "content": "<p>they aren't the same, so yeah</p>",
        "id": 168572537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561015430
    },
    {
        "content": "<p>lean rejects it because it's changed</p>",
        "id": 168572577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561015442
    },
    {
        "content": "<p>I'm not sure what exactly has changed or why though</p>",
        "id": 168572583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561015456
    },
    {
        "content": "<p>Also, does your <code>def read_olean</code> read the checksum/whatever the difference is between the files on the first line?</p>\n<p>I'll double check if she has the same version of Lean as me.</p>",
        "id": 168572689,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561015619
    },
    {
        "content": "<p>The lean version of the olean reader ignores the checksum, but the rust version computes the real checksum and compares</p>",
        "id": 168572788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561015738
    },
    {
        "content": "<p>The lean version is stored in the olean file, and it's the same</p>",
        "id": 168572797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561015759
    },
    {
        "content": "<p>ah, I see, that's <code>claimed_hash</code>.</p>",
        "id": 168572859,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561015807
    },
    {
        "content": "<p>In the end we just reinstalled Lean from scratch, which solved the issue.</p>",
        "id": 168580093,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561023000
    },
    {
        "content": "<p>Hopefully using elan this time. :-)</p>",
        "id": 168581259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561024036
    },
    {
        "content": "<p>Of course :)</p>",
        "id": 168583479,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561026130
    },
    {
        "content": "<p>I wonder if when Lean4 comes out there will be interest in binary package management</p>",
        "id": 168587414,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561030422
    },
    {
        "content": "<p>With the bigger focus on code extraction to C++, and people grousing about compile times for both languages, seems like it could be useful</p>",
        "id": 168587471,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561030468
    },
    {
        "content": "<p>I've been using Conan to manage my C++ build dependencies lately and I've been pretty impressed.</p>",
        "id": 168587488,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561030493
    },
    {
        "content": "<p>I've been thinking of adopting a solution like Nix for building snapshots of the Lean ecosystem and distributing the binaries. Unfortunately, we can't adopt Nix because of complications on Windows. But I'm looking different package management approaches for Lean 3 and <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is looking at it for Lean 4</p>",
        "id": 168588275,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561031371
    },
    {
        "content": "<p>I'm also having problems now... on Linux.</p>",
        "id": 169702460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327003
    },
    {
        "content": "<p>I run <code>update-mathlib</code> in the perfectoid project, but Lean happily starts recompiling all the dependencies.</p>",
        "id": 169702470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327027
    },
    {
        "content": "<p>Check the timestamps of the olean files and see if they're strictly after the timestamps of the corresponding lean files.</p>",
        "id": 169702827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562327457
    },
    {
        "content": "<p>Ok, let me try to do that...</p>",
        "id": 169702889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327532
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>-rw-rw-r-- <span class=\"m\">1</span> jmc jmc  <span class=\"m\">4274</span> Jun <span class=\"m\">14</span> <span class=\"m\">15</span>:36 _target/deps/mathlib/src/tactic/squeeze.lean\n-rw-rw-r-- <span class=\"m\">1</span> jmc jmc <span class=\"m\">19564</span> Jul  <span class=\"m\">3</span> <span class=\"m\">11</span>:52 _target/deps/mathlib/src/tactic/squeeze.olean\n</pre></div>",
        "id": 169703115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327783
    },
    {
        "content": "<p>Looks fine to me.</p>",
        "id": 169703118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Any clue what could be the issue here?</p>",
        "id": 169703368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562328068
    },
    {
        "content": "<p><code>find src | grep \"[.]olean\" | xargs touch</code> has saved me quite a bit today</p>",
        "id": 169711440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562335800
    },
    {
        "content": "<p>do you know what archive you're expanding? Try expanding it in a new directory and checking the time stamps of <code>squeeze.[o]lean</code> again</p>",
        "id": 169785456,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562452969
    },
    {
        "content": "<p>Is there some URL that update-mathlib uses to download the latest mathlib + olean files? I'd like to use it for the <a href=\"https://competition.isabelle.systems/competitions/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/\">proving is fun</a> backend.</p>",
        "id": 172123129,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564576986
    },
    {
        "content": "<p>I think I got it: <a href=\"https://github.com/leanprover-community/mathlib-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nightly/releases\">https://github.com/leanprover-community/mathlib-nightly/releases</a></p>",
        "id": 172123531,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564577312
    },
    {
        "content": "<p>I'm having these problems now myself. I downloaded today's archive - file name <code>mathlib-olean-nightly-2019-07-31.tar.gz</code>. However, if I make a single file, it seems to recompile a large chunk of the library.</p>\n<p>In more detail:</p>\n<ul>\n<li>I extract the archive I downloaded earlier today:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>Floris@MSI MINGW64 /d/projects/mathlib ((badeb48b...))\n$ cache-olean --fetch\nInfo: No github section found in &#39;git config&#39;, we will use GitHub with no authentication\nQuerying GitHub...\nReusing cached olean archive\n... successfully extracted olean archive.\n</pre></div>\n\n\n<ul>\n<li>I check in more detail what's in the <code>algebra</code> folder:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>Floris@MSI MINGW64 /d/projects/mathlib ((badeb48b...))\n$ ls src/algebra/ -alt --time-style=full-iso\ntotal 3973\ndrwxr-xr-x 1 Floris 197121      0 2019-07-31 05:24:01.000000000 -0400 ./\ndrwxr-xr-x 1 Floris 197121      0 2019-07-31 05:24:01.000000000 -0400 CommRing/\ndrwxr-xr-x 1 Floris 197121      0 2019-07-31 05:24:01.000000000 -0400 Mon/\ndrwxr-xr-x 1 Floris 197121      0 2019-07-31 05:23:59.000000000 -0400 group/\n-rw-r--r-- 1 Floris 197121 470882 2019-07-31 05:14:21.000000000 -0400 direct_limit.olean\n-rw-r--r-- 1 Floris 197121  48982 2019-07-30 03:28:45.000000000 -0400 direct_sum.olean\n-rw-r--r-- 1 Floris 197121 240420 2019-07-30 03:25:53.000000000 -0400 pi_instances.olean\n-rw-r--r-- 1 Floris 197121  23435 2019-07-30 03:24:39.000000000 -0400 punit_instances.olean\n-rw-r--r-- 1 Floris 197121  46890 2019-07-30 03:22:47.000000000 -0400 char_p.olean\n-rw-r--r-- 1 Floris 197121   2195 2019-07-30 03:22:01.000000000 -0400 default.olean\n-rw-r--r-- 1 Floris 197121 194740 2019-07-30 03:22:00.000000000 -0400 module.olean\n-rw-r--r-- 1 Floris 197121 115308 2019-07-30 03:20:25.000000000 -0400 pointwise.olean\n-rw-r--r-- 1 Floris 197121 267084 2019-07-30 03:08:50.000000000 -0400 big_operators.olean\n-rw-r--r-- 1 Floris 197121 228629 2019-07-30 03:07:36.000000000 -0400 gcd_domain.olean\n-rw-r--r-- 1 Floris 197121 190155 2019-07-30 03:06:20.000000000 -0400 associated.olean\n-rw-r--r-- 1 Floris 197121 144643 2019-07-30 03:05:46.000000000 -0400 archimedean.olean\n-rw-r--r-- 1 Floris 197121  51843 2019-07-30 03:02:00.000000000 -0400 field_power.olean\n-rw-r--r-- 1 Floris 197121 168299 2019-07-30 03:01:50.000000000 -0400 group_power.olean\n-rw-r--r-- 1 Floris 197121 110312 2019-07-30 03:01:26.000000000 -0400 euclidean_domain.olean\n-rw-r--r-- 1 Floris 197121  45067 2019-07-30 03:00:16.000000000 -0400 ordered_field.olean\n-rw-r--r-- 1 Floris 197121  17108 2019-07-30 03:00:12.000000000 -0400 char_zero.olean\n-rw-r--r-- 1 Floris 197121  51115 2019-07-30 03:00:10.000000000 -0400 field.olean\n-rw-r--r-- 1 Floris 197121   8777 2019-07-30 03:00:05.000000000 -0400 field.lean\n-rw-r--r-- 1 Floris 197121  27526 2019-07-30 03:00:05.000000000 -0400 group_power.lean\n-rw-r--r-- 1 Floris 197121   9130 2019-07-30 03:00:05.000000000 -0400 ordered_field.lean\n-rw-r--r-- 1 Floris 197121 306809 2019-07-29 12:26:57.000000000 -0400 ordered_ring.olean\n-rw-r--r-- 1 Floris 197121  47613 2019-07-29 12:25:06.000000000 -0400 order_functions.olean\n-rw-r--r-- 1 Floris 197121 298623 2019-07-29 12:25:05.000000000 -0400 ordered_group.olean\n-rw-r--r-- 1 Floris 197121 269333 2019-07-29 12:22:18.000000000 -0400 free.olean\n-rw-r--r-- 1 Floris 197121 180370 2019-07-29 12:21:26.000000000 -0400 ring.olean\n-rw-r--r-- 1 Floris 197121  45015 2019-07-29 12:18:42.000000000 -0400 opposites.olean\n-rw-r--r-- 1 Floris 197121  15325 2019-07-19 10:40:32.000000000 -0400 free.lean\n-rw-r--r-- 1 Floris 197121  18757 2019-07-18 11:19:45.000000000 -0400 pi_instances.lean\n-rw-r--r-- 1 Floris 197121  10353 2019-07-18 11:19:45.000000000 -0400 pointwise.lean\ndrwxr-xr-x 1 Floris 197121      0 2019-07-12 17:47:57.000000000 -0400 ../\n-rw-r--r-- 1 Floris 197121  26082 2019-07-11 09:59:06.000000000 -0400 gcd_domain.lean\n-rw-r--r-- 1 Floris 197121  30949 2019-07-11 06:13:21.000000000 -0400 big_operators.lean\n-rw-r--r-- 1 Floris 197121  25098 2019-07-11 06:13:21.000000000 -0400 direct_limit.lean\n-rw-r--r-- 1 Floris 197121   6126 2019-07-11 06:13:21.000000000 -0400 direct_sum.lean\n-rw-r--r-- 1 Floris 197121  14904 2019-07-11 06:13:21.000000000 -0400 module.lean\n-rw-r--r-- 1 Floris 197121   3561 2019-07-11 06:13:21.000000000 -0400 punit_instances.lean\n-rw-r--r-- 1 Floris 197121  11805 2019-07-11 06:13:21.000000000 -0400 ring.lean\n-rw-r--r-- 1 Floris 197121  18067 2019-07-11 00:19:32.000000000 -0400 ordered_ring.lean\n-rw-r--r-- 1 Floris 197121  25188 2019-07-04 15:49:44.000000000 -0400 ordered_group.lean\n-rw-r--r-- 1 Floris 197121  10197 2019-07-04 12:48:24.000000000 -0400 order_functions.lean\n-rw-r--r-- 1 Floris 197121  15761 2019-06-14 21:30:47.000000000 -0400 archimedean.lean\n-rw-r--r-- 1 Floris 197121  32748 2019-06-14 09:37:10.000000000 -0400 order.olean\n-rw-r--r-- 1 Floris 197121  25505 2019-06-14 09:36:49.000000000 -0400 associated.lean\n-rw-r--r-- 1 Floris 197121   8715 2019-06-14 09:36:49.000000000 -0400 char_p.lean\n-rw-r--r-- 1 Floris 197121   3118 2019-06-14 09:36:49.000000000 -0400 char_zero.lean\n-rw-r--r-- 1 Floris 197121    182 2019-06-14 09:36:49.000000000 -0400 default.lean\n-rw-r--r-- 1 Floris 197121  13472 2019-06-14 09:36:49.000000000 -0400 euclidean_domain.lean\n-rw-r--r-- 1 Floris 197121   6236 2019-06-14 09:36:49.000000000 -0400 field_power.lean\n-rw-r--r-- 1 Floris 197121   4862 2019-06-14 09:36:49.000000000 -0400 opposites.lean\n-rw-r--r-- 1 Floris 197121   9155 2019-06-14 09:36:49.000000000 -0400 order.lean\n</pre></div>\n\n\n<ul>\n<li>I build an arbitrary file, which seems to take longer than I would expect from compiling a single file:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>Floris@MSI MINGW64 /d/projects/mathlib ((badeb48b...))\n$ lean --make src/algebra/ring.lean\n</pre></div>\n\n\n<p>(continued in next message)</p>",
        "id": 172169210,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564609738
    },
    {
        "content": "<ul>\n<li>I check the algebra folder again:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>Floris@MSI MINGW64 /d/projects/mathlib ((badeb48b...))\n$ ls src/algebra/ -alt --time-style=full-iso\ntotal 3973\ndrwxr-xr-x 1 Floris 197121      0 2019-07-31 17:36:48.436140600 -0400 ./\n-rw-r--r-- 1 Floris 197121 180253 2019-07-31 17:36:48.435177800 -0400 ring.olean\ndrwxr-xr-x 1 Floris 197121      0 2019-07-31 17:36:45.694285600 -0400 group/\n-rw-r--r-- 1 Floris 197121  32746 2019-07-31 17:36:17.927331700 -0400 order.olean\ndrwxr-xr-x 1 Floris 197121      0 2019-07-31 05:24:01.000000000 -0400 CommRing/\ndrwxr-xr-x 1 Floris 197121      0 2019-07-31 05:24:01.000000000 -0400 Mon/\n-rw-r--r-- 1 Floris 197121 470882 2019-07-31 05:14:21.000000000 -0400 direct_limit.olean\n-rw-r--r-- 1 Floris 197121  48982 2019-07-30 03:28:45.000000000 -0400 direct_sum.olean\n-rw-r--r-- 1 Floris 197121 240420 2019-07-30 03:25:53.000000000 -0400 pi_instances.olean\n-rw-r--r-- 1 Floris 197121  23435 2019-07-30 03:24:39.000000000 -0400 punit_instances.olean\n-rw-r--r-- 1 Floris 197121  46890 2019-07-30 03:22:47.000000000 -0400 char_p.olean\n-rw-r--r-- 1 Floris 197121   2195 2019-07-30 03:22:01.000000000 -0400 default.olean\n-rw-r--r-- 1 Floris 197121 194740 2019-07-30 03:22:00.000000000 -0400 module.olean\n-rw-r--r-- 1 Floris 197121 115308 2019-07-30 03:20:25.000000000 -0400 pointwise.olean\n-rw-r--r-- 1 Floris 197121 267084 2019-07-30 03:08:50.000000000 -0400 big_operators.olean\n-rw-r--r-- 1 Floris 197121 228629 2019-07-30 03:07:36.000000000 -0400 gcd_domain.olean\n-rw-r--r-- 1 Floris 197121 190155 2019-07-30 03:06:20.000000000 -0400 associated.olean\n-rw-r--r-- 1 Floris 197121 144643 2019-07-30 03:05:46.000000000 -0400 archimedean.olean\n-rw-r--r-- 1 Floris 197121  51843 2019-07-30 03:02:00.000000000 -0400 field_power.olean\n-rw-r--r-- 1 Floris 197121 168299 2019-07-30 03:01:50.000000000 -0400 group_power.olean\n-rw-r--r-- 1 Floris 197121 110312 2019-07-30 03:01:26.000000000 -0400 euclidean_domain.olean\n-rw-r--r-- 1 Floris 197121  45067 2019-07-30 03:00:16.000000000 -0400 ordered_field.olean\n-rw-r--r-- 1 Floris 197121  17108 2019-07-30 03:00:12.000000000 -0400 char_zero.olean\n-rw-r--r-- 1 Floris 197121  51115 2019-07-30 03:00:10.000000000 -0400 field.olean\n-rw-r--r-- 1 Floris 197121   8777 2019-07-30 03:00:05.000000000 -0400 field.lean\n-rw-r--r-- 1 Floris 197121  27526 2019-07-30 03:00:05.000000000 -0400 group_power.lean\n-rw-r--r-- 1 Floris 197121   9130 2019-07-30 03:00:05.000000000 -0400 ordered_field.lean\n-rw-r--r-- 1 Floris 197121 306809 2019-07-29 12:26:57.000000000 -0400 ordered_ring.olean\n-rw-r--r-- 1 Floris 197121  47613 2019-07-29 12:25:06.000000000 -0400 order_functions.olean\n-rw-r--r-- 1 Floris 197121 298623 2019-07-29 12:25:05.000000000 -0400 ordered_group.olean\n-rw-r--r-- 1 Floris 197121 269333 2019-07-29 12:22:18.000000000 -0400 free.olean\n-rw-r--r-- 1 Floris 197121  45015 2019-07-29 12:18:42.000000000 -0400 opposites.olean\n-rw-r--r-- 1 Floris 197121  15325 2019-07-19 10:40:32.000000000 -0400 free.lean\n-rw-r--r-- 1 Floris 197121  18757 2019-07-18 11:19:45.000000000 -0400 pi_instances.lean\n-rw-r--r-- 1 Floris 197121  10353 2019-07-18 11:19:45.000000000 -0400 pointwise.lean\ndrwxr-xr-x 1 Floris 197121      0 2019-07-12 17:47:57.000000000 -0400 ../\n-rw-r--r-- 1 Floris 197121  26082 2019-07-11 09:59:06.000000000 -0400 gcd_domain.lean\n-rw-r--r-- 1 Floris 197121  30949 2019-07-11 06:13:21.000000000 -0400 big_operators.lean\n-rw-r--r-- 1 Floris 197121  25098 2019-07-11 06:13:21.000000000 -0400 direct_limit.lean\n-rw-r--r-- 1 Floris 197121   6126 2019-07-11 06:13:21.000000000 -0400 direct_sum.lean\n-rw-r--r-- 1 Floris 197121  14904 2019-07-11 06:13:21.000000000 -0400 module.lean\n-rw-r--r-- 1 Floris 197121   3561 2019-07-11 06:13:21.000000000 -0400 punit_instances.lean\n-rw-r--r-- 1 Floris 197121  11805 2019-07-11 06:13:21.000000000 -0400 ring.lean\n-rw-r--r-- 1 Floris 197121  18067 2019-07-11 00:19:32.000000000 -0400 ordered_ring.lean\n-rw-r--r-- 1 Floris 197121  25188 2019-07-04 15:49:44.000000000 -0400 ordered_group.lean\n-rw-r--r-- 1 Floris 197121  10197 2019-07-04 12:48:24.000000000 -0400 order_functions.lean\n-rw-r--r-- 1 Floris 197121  15761 2019-06-14 21:30:47.000000000 -0400 archimedean.lean\n-rw-r--r-- 1 Floris 197121  25505 2019-06-14 09:36:49.000000000 -0400 associated.lean\n-rw-r--r-- 1 Floris 197121   8715 2019-06-14 09:36:49.000000000 -0400 char_p.lean\n-rw-r--r-- 1 Floris 197121   3118 2019-06-14 09:36:49.000000000 -0400 char_zero.lean\n-rw-r--r-- 1 Floris 197121    182 2019-06-14 09:36:49.000000000 -0400 default.lean\n-rw-r--r-- 1 Floris 197121  13472 2019-06-14 09:36:49.000000000 -0400 euclidean_domain.lean\n-rw-r--r-- 1 Floris 197121   6236 2019-06-14 09:36:49.000000000 -0400 field_power.lean\n-rw-r--r-- 1 Floris 197121   4862 2019-06-14 09:36:49.000000000 -0400 opposites.lean\n-rw-r--r-- 1 Floris 197121   9155 2019-06-14 09:36:49.000000000 -0400 order.lean\n</pre></div>",
        "id": 172169237,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564609758
    },
    {
        "content": "<p>The interesting observations here are:</p>\n<ul>\n<li>It did create a new compiled file <code>ring.olean</code>, so that's good</li>\n<li>It also created a new compiled file <code>order.olean</code>, <del>but not for any other files imported by <code>ring.lean</code></del> (<code>ring.lean</code> does indeed import <code>order.olean</code> via (among others) <code>group.to_additive</code> and <code>tactic.push_neg</code>)</li>\n</ul>",
        "id": 172169453,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564609896
    },
    {
        "content": "<p>The compiled file <code>order.olean</code> is indeed different (e.g. it has 2 fewer bytes).</p>",
        "id": 172169563,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564609979
    },
    {
        "content": "<p>So what does this mean? </p>\n<ul>\n<li>Did Lean decide it had to re-generate <code>order.olean</code>, and therefore also had to compile all other files which imported <code>order.lean</code>? If so, why did this happen?</li>\n<li><del>Is it expected that Lean doesn't generate <code>olean</code> files for the other intermediate files, even though <code>order.olean</code> changed? (Making <code>ring.lean</code> another time is almost immediate, so this seems fine.)</del> (see later message)</li>\n</ul>",
        "id": 172169707,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564610130
    },
    {
        "content": "<p>One other (mostly unrelated) question:</p>\n<ul>\n<li>When I run <code>lean --make</code> (or <code>leanpkg build</code>) I don't get output in the terminal while Lean is running. I think I saw that other users did get output when Lean was running, namely the file (and the line number?) it was compiling at the moment. Is the fact that I don't see this related to Windows? It is really frustrating, since it means I cannot see whether Lean is recompiling the whole library, when I expect it just to compile the file I've changed/added. Is there any way I can get this output (at this point, I would consider using a Linux VM if that would solve this issue)</li>\n</ul>",
        "id": 172170344,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564610646
    },
    {
        "content": "<p>Oh, wait, I now see that <code>ring.lean</code> doesn't actually import any other file from this folder (I thought it would, but all the <code>group</code> files are now in a subfolder). Lean <em>did</em> generate olean files for all files imported by <code>ring.lean</code>.</p>",
        "id": 172170810,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564611010
    },
    {
        "content": "<blockquote>\n<p>One other (mostly unrelated) question:</p>\n<ul>\n<li>When I run <code>lean --make</code> (or <code>leanpkg build</code>) I don't get output in the terminal while Lean is running. I think I saw that other users did get output when Lean was running, namely the file (and the line number?) it was compiling at the moment. Is the fact that I don't see this related to Windows? It is really frustrating, since it means I cannot see whether Lean is recompiling the whole library, when I expect it just to compile the file I've changed/added. Is there any way I can get this output (at this point, I would consider using a Linux VM if that would solve this issue)</li>\n</ul>\n</blockquote>\n<p>I do get that output using <code>leanpkg build</code> as well as <code>lean --make</code> but I am using Linux.</p>",
        "id": 172170846,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564611061
    },
    {
        "content": "<p>Ok. Then there is probably something wrong on Windows (or possible specifically on my machine/terminal)</p>",
        "id": 172171480,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564611497
    },
    {
        "content": "<p>There has never been any output in Windows and I agree it's frustrating. Yes you can see both file and line number in Linux (at least in Ubuntu)</p>",
        "id": 172196039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564641908
    },
    {
        "content": "<p>I still have the same problem: Lean doesn't use the <code>olean</code> files downloaded from <code>cache-olean --fetch</code>. Any suggestions <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>?</p>",
        "id": 172317728,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564759484
    },
    {
        "content": "<p>I use <code>find</code> to <code>touch</code> all the olean files</p>",
        "id": 172317868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564759603
    },
    {
        "content": "<p>That updates the time stamps, and solves the problem for me.</p>",
        "id": 172317886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564759614
    },
    {
        "content": "<p>I'll try that.</p>",
        "id": 172317958,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564759675
    },
    {
        "content": "<p>The time stamp problem is when an olean file is not newer than the corresponding lean file? I did try to search for such an olean file before, but couldn't find one. I'll try it anyway.</p>",
        "id": 172318083,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564759750
    },
    {
        "content": "<p>I am certainly not an expert here but I thought that Sebastian once told us that there would also be issues if an olean file relies on another olean file whose timestamp indicated that it had been created later on. In particular I thought that using <code>find</code> to <code>touch</code> all the olean files was risky business.</p>",
        "id": 172318779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564760242
    },
    {
        "content": "<p>Well, it's been solving my issues so far.</p>",
        "id": 172318862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564760289
    },
    {
        "content": "<p>I might be wrong.</p>",
        "id": 172318875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564760306
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, this fixes my issues like a charm!</p>",
        "id": 172318886,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564760321
    },
    {
        "content": "<p>I am clearly wrong :-)</p>",
        "id": 172318951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564760384
    },
    {
        "content": "<p>Well, you <code>xargs</code> it to <code>touch</code>, and so I think all <code>olean</code> files will have exactly the same timestamp.</p>",
        "id": 172318957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564760389
    },
    {
        "content": "<p>Maybe that's just on the right side of risky (-;</p>",
        "id": 172319016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564760405
    },
    {
        "content": "<p>They don't end up with time stamps which are like 0.01 second apart or something? The reason I've always avoided this is that I didn't know how to touch them in the right order :-)</p>",
        "id": 172319058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564760440
    },
    {
        "content": "<p>I used <code>find src/ -name '*.olean' -exec touch {} +</code> and my timestamps are not the same (but within the same second). That didn't cause problems when importing files deep into mathlib...</p>",
        "id": 172319188,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564760527
    }
]