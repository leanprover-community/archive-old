[
    {
        "content": "<p>Is this behavior deliberate?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_matrix</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_matrix</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_matrix</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- finds `inst` which is the wrong type</span>\n</code></pre></div>\n<p>This comes up when trying to provide a <code>reflected</code> instance that is different for a type <code>X</code> and a synonym <code>synonym X</code>, as lean seems to just pick whichever one was declared last</p>",
        "id": 287072568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655912629
    },
    {
        "content": "<p>That's because <code>{α}</code> is implicit in <code>is_matrix</code>, which means that the argument is unified with semireducible transparency.  You get the same effect when searching for <code>decidable (x = x)</code>.</p>",
        "id": 287079797,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1655915702
    },
    {
        "content": "<p>So I guess we should probably change <a href=\"https://leanprover-community.github.io/mathlib_docs/find/reflected\">docs#reflected</a> in core to take <code>α</code> as an explicit argument?</p>",
        "id": 287086245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655918662
    },
    {
        "content": "<p>Does lean4 have any analog to <code>reflected</code>?</p>",
        "id": 287086351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655918725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Typeclass.20search.20unfolds.20type.20aliases/near/287086245\">said</a>:</p>\n<blockquote>\n<p>So I guess we should probably change <a href=\"https://leanprover-community.github.io/mathlib_docs/find/reflected\">docs#reflected</a> in core to take <code>α</code> as an explicit argument?</p>\n</blockquote>\n<p>Attempted in <a href=\"https://github.com/leanprover-community/lean/pull/734\">lean#734</a></p>",
        "id": 287167490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655978472
    },
    {
        "content": "<p>Now passing CI. Thanks for the pointer, this does indeed fix the inference problem I had above.</p>",
        "id": 287185019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655988970
    }
]