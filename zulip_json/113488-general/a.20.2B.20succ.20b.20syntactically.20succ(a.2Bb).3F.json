[
    {
        "content": "<p>Of course not.</p>\n<p>So why does this work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">foo_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo_succ</span><span class=\"o\">,</span> <span class=\"c1\">-- ??</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195291858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587832000
    },
    {
        "content": "<p><code>rw</code> sometimes also unfolds recursively defined functions on inductive types</p>",
        "id": 195291872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587832045
    },
    {
        "content": "<p>with constructor</p>",
        "id": 195291873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587832049
    }
]