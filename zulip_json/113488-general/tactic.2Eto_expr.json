[
    {
        "content": "<p>How can I get <code>tactic.to_expr</code> to not apply metavariables to implicit arguments? That is;</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n    <span class=\"n\">p</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">resolve_name</span> <span class=\"bp\">`</span><span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"n\">t</span><span class=\"o\">,</span>  <span class=\"c1\">-- gives &quot;?m_1 = ?m_1&quot;</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</pre></div>\n\n\n<p>I really want to find a way of getting <code>trace t</code> to say <code>∀ {a:α}, a = a</code> given only the declaration name <code>P</code></p>",
        "id": 151462345,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1544549591
    },
    {
        "content": "<p>Do you need to go through <code>to_expr</code>?</p>",
        "id": 151468593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544552544
    },
    {
        "content": "<p><code>e ← tactic.to_expr p.mk_explicit</code> should work for this case.</p>",
        "id": 151468620,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1544552570
    },
    {
        "content": "<p>I was going to suggest</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n    <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</pre></div>",
        "id": 151468935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544552725
    },
    {
        "content": "<p>Yeah, that's better here, although I guess it depends on the real context.</p>",
        "id": 151470588,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1544553728
    }
]