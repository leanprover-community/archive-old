[
    {
        "content": "<p>Presheaf morphism is not recognized as natural transformation when in quantifiers. Minimum working/failing examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.presheaf</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Top.presheaf</span> <span class=\"n\">C</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±.app</span> <span class=\"bp\">=</span> <span class=\"n\">Œ±.app</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> works -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Top.presheaf</span> <span class=\"n\">C</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Œ±.app</span> <span class=\"bp\">=</span> <span class=\"n\">Œ±.app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid field notation, 'app' is not a valid \"field\" because environment does not contain 'quiver.hom.app'</span>\n<span class=\"cm\">  Œ±</span>\n<span class=\"cm\">which has type</span>\n<span class=\"cm\">  F ‚ü∂ F</span>\n<span class=\"cm\">Additional information:</span>\n<span class=\"cm\">Untitled-1:9:18: context: invalid field notation, 'app' is not a valid \"field\" because environment does not contain 'quiver.rec.app'</span>\n<span class=\"cm\">  Œ±</span>\n<span class=\"cm\">which has type</span>\n<span class=\"cm\">  quiver.rec (Œª (hom : Top.presheaf C X ‚Üí Top.presheaf C X ‚Üí Sort ?), hom) ?m_1 F F</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>What's the problem?</p>",
        "id": 256354088,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1633492678
    },
    {
        "content": "<p>Yeah, this is annoying. Analogous failures happen often in category theory. A workaround would be to write out <code>nat_trans.app Œ±</code>, but that is of course tedious.</p>",
        "id": 256360439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633498821
    },
    {
        "content": "<p>I don't know if Lean could be taught to figure out the dot notation on its own.</p>",
        "id": 256360459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633498855
    },
    {
        "content": "<p>It appears that inside quantifiers, Lean fails to load the category instance for presheaves so the arrow is only recognized as quiver hom. However, the following is a working example showing that Lean can load the category instance and interpret the arrow as nat_trans even within quantifiers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Top.presheaf</span> <span class=\"n\">C</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚ó´</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚ó´</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> works -/</span>\n</code></pre></div>",
        "id": 256363415,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1633501470
    },
    {
        "content": "<p>I don't think you're correct about Lean failing to find the category instance. The fact that <code>nat_trans.app Œ±</code> succeeds tells you the instances are correct.</p>",
        "id": 256364008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633501979
    },
    {
        "content": "<p>This problem is something more subtle. When using dot notation, Lean has to unfold the type of the expression to the left of the dot, so that it can look in the various different namespaces the function to the right of the dot could live in. For some reason in this case it is not doing that.</p>",
        "id": 256364131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633502074
    },
    {
        "content": "<p>Your second example using <code>‚ó´</code> is not using dot notation, so is not really relevant to the failure, I think.</p>",
        "id": 256364186,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633502119
    },
    {
        "content": "<p>Is this a case where making presheaf an abbreviation/reducible fixes the annoyance without too much of the usual detriment of reducible?</p>",
        "id": 256718302,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1633688647
    }
]