[
    {
        "content": "<p>Can notation bind tighter than function application?  e.g. For an operator <code>^</code> make <code>f x ^ y</code> parse as <code>f (x ^ y)</code>?</p>",
        "id": 131073950,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1533682183
    },
    {
        "content": "<p>I think not.</p>",
        "id": 131074272,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533682641
    },
    {
        "content": "<p>I think that (a) function application has super-high binding power and (b) if you want to use notation which already exists in Lean (like <code>^</code>) then, whilst you can define it to mean new things, you cannot change its default binding power, which is lower than the super-high binding power of functions. So at the very least you would have to use notation which is not already used in Lean, e.g. <code>\\clubsuit</code> or some random thing like that.</p>",
        "id": 131074274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533682642
    },
    {
        "content": "<p>Yes, I meant \"^\" as a placeholder.   It looks like I can, but it was a much higher binding power than I tested at first.</p>",
        "id": 131074958,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1533683576
    },
    {
        "content": "<p>This seemed to work,  but if the precedence is any lower it doesn't.</p>\n<div class=\"codehilite\"><pre><span></span>set_option pp.all true\n\ninfix ` &lt;&gt; `:1025 := and\nconstant f : Prop → Prop\n#check f true &lt;&gt; false\n</pre></div>\n\n\n<p>Anyways, thanks for suggesting the \"super-high\" binding power.</p>",
        "id": 131075107,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1533683770
    },
    {
        "content": "<p>Yes, you can. The binding power of application is <code>max = 1024</code>, which despite the name is not the maximum possible bonding power; you can see <code>max+10</code> used in the <code>core.lean</code> file.</p>",
        "id": 131077736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533687484
    },
    {
        "content": "<p>BTW: <code>max_plus</code> is useful, it evaluates to 1034 (aka <code>max+10</code>) and avoids silly incidents like <code>max+11</code> (aka <code>max_spinal_tap</code>).</p>",
        "id": 131078180,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1533688086
    }
]