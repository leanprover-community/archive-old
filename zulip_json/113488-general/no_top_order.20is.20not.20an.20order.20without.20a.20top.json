[
    {
        "content": "<p>I just got very confused by the <code>no_top_order</code> and <code>no_bot_order</code> classes, which are not what I thought they were by reading the name and the docstrings. Let's look at <code>no_top_order</code> and <code>order_top</code>, which are defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Order without a maximal element. Sometimes called cofinal. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">no_top_order</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">no_top</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a'</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- An order is an `order_top` if it has a greatest element. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">order_top</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_top</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_top</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_top_order\">docs#no_top_order</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_top\">docs#order_top</a>)<br>\n<code>no_top_order</code> is actually stronger than not having a <code>⊤</code> element verifying <code>le_top</code>.  Consider a type with three elements <code>a,b,c</code> such that <code>a &lt; b</code> and <code>a &lt; c</code> (and no other order relations). Then there is no <code>⊤</code> because <code>b</code> and <code>c</code> are not comparable, but this is not a <code>no_top_order</code> either, because <code>b</code> and <code>c</code> don't verify the <code>no_top</code> condition. <code>no_top_order</code> also excludes \"local\" tops.</p>\n<p>That issue disappears for linear orders, for which you either have <code>order_top</code> or <code>no_top_order</code>. The whole issue is really that unless the order is linear, you don't have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_not_lt\">docs#le_of_not_lt</a> .</p>\n<p>In the same way, the predicate <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_top\">docs#is_top</a> is not in general the opposite of what you get from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_top_order.no_top\">docs#no_top_order.no_top</a> . Nonetheless, the docstring of <code>is_top</code> states \"This predicate is useful, e.g., to make some statements and proofs work in both cases [order_top α] and [no_top_order α]\". This makes me think that the author of those lines probably had linear orders in mind.</p>\n<p>In conclusion: should we give another name to <code>no_top_order</code> to better reflect that it is stronger than not being an <code>order_top</code>? At least the docstrings need to be modified.</p>",
        "id": 267354304,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1641729269
    },
    {
        "content": "<p>Yeah this is indeed confusing to people who discover the order library. We could rename them to <code>no_max_order</code>/<code>no_min_order</code>.</p>",
        "id": 267354868,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641730062
    },
    {
        "content": "<p>But also I don't think this is <em>too</em> important.</p>",
        "id": 267354878,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641730076
    },
    {
        "content": "<p>That's the intended behavior. The name is unfortunate but I think standard (modulo some adaptation to our terminology for top elements), since the main interest in this predicate is in total orders</p>",
        "id": 267354879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641730078
    },
    {
        "content": "<p>for example, \"dense linear order without endpoints\" is a common term for orders like Q</p>",
        "id": 267354938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641730112
    },
    {
        "content": "<p>I disagree, Mario. I use it everywhere and mostly not in linear orders.</p>",
        "id": 267354946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641730140
    },
    {
        "content": "<p>and the terminology emphasizes what the order does not have even though it is a positive statement (every element has a greater element)</p>",
        "id": 267354953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641730148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Er, I mean the birthplace of the concept is in the linear setting. It generalizes, as many things do, to beyond where the conventional terminology makes a lot of sense</p>",
        "id": 267355028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641730222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/no_top_order.20is.20not.20an.20order.20without.20a.20top/near/267354878\">said</a>:</p>\n<blockquote>\n<p>But also I don't think this is <em>too</em> important.</p>\n</blockquote>\n<p>No it's not very important, indeed. It's still confusing. I am perfectly ok with leaving the name as it is if the notion is only useful for linear orders. But I'll PR some changes to the docstrings in that file to point out that the name reflects what happens in the linear order case.</p>",
        "id": 267355194,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1641730458
    },
    {
        "content": "<p>I don't think \"has no maximal element\" is a correct gloss either in the preorder setting</p>",
        "id": 267355212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641730515
    },
    {
        "content": "<p>And indeed the code I was originally writing was about a linear order. i only got surprised by that subtlety once I tried removing hypotheses from my lemmas as much as possible.</p>",
        "id": 267355228,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1641730547
    },
    {
        "content": "<p>The comment on <code>no_top_order</code> already says \"Order without a maximal element.\" so I'm not sure what you want to change</p>",
        "id": 267355378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641730732
    },
    {
        "content": "<p>add a sentence stating that in a linear order, this is the same as not being <code>order_top</code>, but not in general?</p>",
        "id": 267355471,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1641730840
    },
    {
        "content": "<p>There should be a lemma saying that</p>",
        "id": 267355479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641730856
    },
    {
        "content": "<p>there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_is_top\">docs#not_is_top</a> but it's not a biconditional</p>",
        "id": 267355507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641730920
    },
    {
        "content": "<p>Okay, here's something that's really confusing: <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>'s docstring for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_bot\">docs#is_bot</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_top\">docs#is_top</a>. <code>is_bot</code> never applies in a <code>no_bot_order</code>, so <code>is_bot</code> is most definitely not allowing to treat <code>order_bot</code> and <code>no_bot_order</code> simultaneously.</p>",
        "id": 267357206,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641733344
    },
    {
        "content": "<p>Yury, did you mean \"to orders which have a bot not declared through <code>order_bot</code>\", \"to preorders which might have several bots\", or did you mean to define <code>is_min</code> instead? In the latter case, I suspect your lemmas in <a href=\"https://github.com/leanprover-community/mathlib/pull/9396\">#9396</a> generalize.</p>",
        "id": 267357285,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641733465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/no_top_order.20is.20not.20an.20order.20without.20a.20top/near/267357206\">said</a>:</p>\n<blockquote>\n<p><code>is_bot</code> never applies in a <code>no_bot_order</code>, so <code>is_bot</code> is most definitely not allowing to treat <code>order_bot</code> and <code>no_bot_order</code> simultaneously.</p>\n</blockquote>\n<p>What do you mean? They are <em>supposed</em> to be mutually exclusive. The claim that connects them is that <code>order_bot</code> holds iff there exists <code>a</code> such that <code>is_bot a</code>, and <code>no_bot_order</code> holds iff there does not exist <code>a</code> such that <code>is_bot a</code> (under certain additional hypotheses)</p>",
        "id": 267357361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641733599
    },
    {
        "content": "<p>Have a look at Yury's description of <a href=\"https://github.com/leanprover-community/mathlib/pull/9493\">#9493</a></p>",
        "id": 267357384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641733638
    },
    {
        "content": "<p>I perfectly agree with you, hence me not understanding what Yury meant.</p>",
        "id": 267357396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641733664
    },
    {
        "content": "<p>I think he meant what I said. There are complications with directly using a disjunction of <code>order_bot</code> and <code>no_bot_order</code> because these are typeclasses, not props, and <code>order_bot</code> also comes with a designated bottom element which is difficult to work with here. With <code>is_bot</code>, you can do the case disjunction cleanly using <code>by_cases h : \\exists a, is_bot a</code></p>",
        "id": 267357514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641733776
    },
    {
        "content": "<p>To make that work, you need lemmas that say that you can construct an <code>order_bot</code> given <code>is_bot a</code>, and a <code>no_top_order</code> given <code>\\neg \\exists a, is_bot a</code></p>",
        "id": 267357579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641733851
    },
    {
        "content": "<p>So Yury meant \"to orders which have a bot not declared through <code>order_bot</code>\"?</p>",
        "id": 267357591,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641733909
    },
    {
        "content": "<p>Yeah, if you don't have a bot at all, and you want to reason with <code>order_bot</code> and <code>no_bot_order</code> anyway you have to do something like that</p>",
        "id": 267357633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641733958
    },
    {
        "content": "<p>A similar thing is done with the <code>nontriviality</code> tactic</p>",
        "id": 267357636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641733974
    },
    {
        "content": "<p>you don't know that it is either trivial or nontrivial but you can do a case disjunction and get a typeclass in each case</p>",
        "id": 267357646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641733999
    },
    {
        "content": "<p>What's confusing is that the \"certain additional hypotheses\" comprises being linear, which to my eyes (and Rémy's) is quite a strong condition which we shouldn't just sweep under the rug.</p>",
        "id": 267357649,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734008
    },
    {
        "content": "<p>Sure, the lemma that requires this should point out that the hypothesis is necessary</p>",
        "id": 267357655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734034
    },
    {
        "content": "<p>The docstrings for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_bot\">docs#is_bot</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_top\">docs#is_top</a> are confusing because they are in the most basic order theory file but were written with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> in mind (I think?).</p>",
        "id": 267357697,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734070
    },
    {
        "content": "<p><code>is_bot</code> is a very basic definition</p>",
        "id": 267357704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734086
    },
    {
        "content": "<p>it says that an element is minimum</p>",
        "id": 267357708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734099
    },
    {
        "content": "<p>But the docstring doesn't reflect that.</p>",
        "id": 267357710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/no_top_order.20is.20not.20an.20order.20without.20a.20top/near/267357708\">said</a>:</p>\n<blockquote>\n<p>it says that an element is minimum</p>\n</blockquote>\n<p>No it doesn't <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 267357720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734119
    },
    {
        "content": "<p>??</p>",
        "id": 267357724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734134
    },
    {
        "content": "<p>It says that it is less or equal to everything</p>",
        "id": 267357728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734146
    },
    {
        "content": "<p>Anyway, I need <code>is_min</code> and <code>is_max</code> now, so I'll define them next to <code>is_bot</code> and <code>is_top</code> and clarify the docstrings.</p>",
        "id": 267357733,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734150
    },
    {
        "content": "<p>that is, a global minimum element</p>",
        "id": 267357741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734160
    },
    {
        "content": "<p>... which is not what being minimal is.</p>",
        "id": 267357750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734161
    },
    {
        "content": "<p>I said minimum not minimal</p>",
        "id": 267357784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734173
    },
    {
        "content": "<p>Arf, got me</p>",
        "id": 267357787,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734181
    },
    {
        "content": "<p>I think minimal and maximal are defined as well</p>",
        "id": 267357794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734209
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_min_on\">docs#is_min_on</a>, but it's minimum, and with a set and an indexing type on top</p>",
        "id": 267357811,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734241
    },
    {
        "content": "<p>also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_least\">docs#is_least</a></p>",
        "id": 267357867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734293
    },
    {
        "content": "<p>That's minimum, not minimal</p>",
        "id": 267357873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734306
    },
    {
        "content": "<p>I have <a href=\"https://github.com/leanprover-community/mathlib/pull/11268\">#11268</a> for minimal elements.</p>",
        "id": 267357875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734319
    },
    {
        "content": "<p>I'm surprised it managed to evade mathlibification for so long</p>",
        "id": 267357950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734436
    },
    {
        "content": "<p>there is a weird version of minimality appearing in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zorn.exists_maximal_of_chains_bounded\">docs#zorn.exists_maximal_of_chains_bounded</a></p>",
        "id": 267357967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734477
    },
    {
        "content": "<p>Agreed! And I wouldn't be surprised if it's actually already in some dark corner file of the library. What I'm sure of is that it is not where it should be, aka <code>order.basic</code>.</p>",
        "id": 267357970,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734489
    },
    {
        "content": "<p>Yeah, Zorn uses minimality without having special predicates.</p>",
        "id": 267357979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734513
    },
    {
        "content": "<p>In fact, you might want to consider whether that definition is better than yours for the preorder case</p>",
        "id": 267358024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734550
    },
    {
        "content": "<p>It sure is</p>",
        "id": 267358035,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641734568
    },
    {
        "content": "<p>that is, x is maximal if <code>\\forall y, x &lt;= y -&gt; y &lt;= x</code> instead of <code>\\forall y, x &lt;= y -&gt; x = y</code></p>",
        "id": 267358038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641734581
    },
    {
        "content": "<p>Another way people stated minimality is as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_bot_of_minimal\">docs#eq_bot_of_minimal</a></p>",
        "id": 267358342,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641735070
    },
    {
        "content": "<p>You're right, Mario, this definition is great.</p>",
        "id": 267359270,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641736647
    },
    {
        "content": "<p>On another note, I'm very skeptical of the <code>Sometimes called cofinal.</code> part of the docstring</p>",
        "id": 267360789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641738693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/no_top_order.20is.20not.20an.20order.20without.20a.20top/near/267357206\">said</a>:</p>\n<blockquote>\n<p>Okay, here's something that's really confusing: <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span>'s docstring for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_bot\">docs#is_bot</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_top\">docs#is_top</a>. <code>is_bot</code> never applies in a <code>no_bot_order</code>, so <code>is_bot</code> is most definitely not allowing to treat <code>order_bot</code> and <code>no_bot_order</code> simultaneously.</p>\n</blockquote>\n<p>I meant something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_countable_dense_bot_top\">docs#exists_countable_dense_bot_top</a> . It states something about <code>bot</code>/<code>top</code> but works both for types with <code>bot</code>/<code>top</code>, and for types without <code>bot</code>/<code>top</code>. Feel free to improve the docstring.</p>",
        "id": 267360843,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641738768
    },
    {
        "content": "<p>I'm renaming the instances and trying to make the docstrings more understandable in <a href=\"https://github.com/leanprover-community/mathlib/pull/11357\">#11357</a>. The docstrings do not make as much sense as they could because we're missing <code>is_min</code>/<code>is_max</code> and the real <code>no_bot_order</code>/<code>no_top_order</code>.</p>",
        "id": 267479057,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641838974
    }
]