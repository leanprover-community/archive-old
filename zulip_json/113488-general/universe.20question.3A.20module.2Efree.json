[
    {
        "content": "<p>According to the definition of <code>module.free</code>, the index set of a basis has to live in the same universe as the module. Is this necessary?<br>\nI am asking because I do not see a way of resolving this problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">sigma.mk</span> <span class=\"n\">h.some</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h.some</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">is_principal_ideal_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">module.free</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">basis</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"bp\">↥</span><span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">module.free</span> <span class=\"n\">R</span> <span class=\"bp\">↥</span><span class=\"n\">N</span>\n</code></pre></div>\n<p>CanI resolve the problem by mapping the basis with the basis map to a subset of N?<br>\nOr should the definition of <code>module.free</code> be changed?</p>\n<p>I am trying to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[instance]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">submodule.free_of_pid_of_free</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_principal_ideal_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">module.free</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">module.free</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.nonempty_basis_of_pid'</span> <span class=\"o\">(</span><span class=\"n\">module.free.choose_basis</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">h.some</span><span class=\"o\">,</span> <span class=\"n\">h.some_spec</span><span class=\"o\">⟩⟩⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>using a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">submodule.nonempty_basis_of_pid'</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">is_principal_ideal_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">},</span>\n    <span class=\"n\">basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_3</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">basis</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"bp\">↥</span><span class=\"n\">N</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 273240435,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645801568
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.reindex_range\">docs#basis.reindex_range</a> helps here?</p>",
        "id": 273240994,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645801836
    },
    {
        "content": "<p>yiha, yes!</p>",
        "id": 273241310,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645801993
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[instance]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">submodule.free_of_pid_of_free</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_principal_ideal_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">module.free</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">module.free</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.nonempty_basis_of_pid'</span> <span class=\"o\">(</span><span class=\"n\">module.free.choose_basis</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">h.some</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hB</span> <span class=\"o\">:=</span> <span class=\"n\">h.some_spec</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">basis.reindex_range</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨⟨⟨</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"bp\">⇑</span><span class=\"n\">hB</span><span class=\"o\">),</span> <span class=\"n\">b</span><span class=\"o\">⟩⟩⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273241328,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645802003
    },
    {
        "content": "<p>So it's not necessary that the index set lives in the same universe, but it is convenient since otherwise we'd have a free universe parameter. And with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.reindex_range\">docs#basis.reindex_range</a> you can always get a basis to live in the correct universe.</p>",
        "id": 273241343,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645802011
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.free.of_basis\">docs#module.free.of_basis</a> already does this for you</p>",
        "id": 273241460,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645802056
    },
    {
        "content": "<p>ah :D I'm reinventing the wheel</p>",
        "id": 273241496,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645802080
    },
    {
        "content": "<p>the better!</p>",
        "id": 273241506,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645802087
    },
    {
        "content": "<p>I am on my phone at the moment, but I am almost sure I was pretty careful to state everything in full generality concerning universes. There was a reason I don't remember for having the definition like that and then the theorem rather than the other way.</p>",
        "id": 273248022,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645805439
    }
]