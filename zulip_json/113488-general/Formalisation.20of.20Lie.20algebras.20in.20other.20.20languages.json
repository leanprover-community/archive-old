[
    {
        "content": "<p>I'm considering writing something about Mathlib's formalisation of Lie algebras and so I'd like to learn more about the prior art.</p>\n<p>I'm really looking for other instances of (computer) formalisation of Lie algebras. So far I have not found any.</p>\n<p>The closest matches I have found are distant, for example:</p>\n<ul>\n<li><a href=\"https://github.com/blefloch/lie-algebra-w0\">a Coq program that carries out case analysis on data related to Lie algebra representations</a></li>\n<li><a href=\"https://mathematics.pitt.edu/hales60/pdf/Casselman-William.pdf\">some fascinating slides by Bill Casselman that are vaguely related</a></li>\n<li><a href=\"https://github.com/affeldt-aist/coq-robot\">a Coq library for robotics</a></li>\n</ul>\n<p>Of course I have looked in places such as:</p>\n<ul>\n<li><a href=\"https://www.isa-afp.org/search.html\">https://www.isa-afp.org/search.html</a></li>\n<li><a href=\"https://github.com/math-comp/math-comp/\">https://github.com/math-comp/math-comp/</a></li>\n<li><a href=\"https://github.com/UniMath/UniMath/\">https://github.com/UniMath/UniMath/</a></li>\n<li><a href=\"https://github.com/metamath/set.mm\">https://github.com/metamath/set.mm</a></li>\n</ul>\n<p>More generally, I'd be grateful for guidance on how to search the literature. I feel a bit lost not being able to rely on MathSciNet (Math Reviews). Are there particular conferences / journals I should check or people I should ask?</p>",
        "id": 246629776,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626805372
    },
    {
        "content": "<p>The links are broken, unfortunately. I think you've swapped the link text and URL.</p>",
        "id": 246629872,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626805439
    },
    {
        "content": "<p>Just testing of anyone was watching ;-)</p>",
        "id": 246629958,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626805470
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> might know?</p>",
        "id": 246630024,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626805504
    },
    {
        "content": "<p>Ooh, that first one is really interesting! But it's completely axiomatic, afaik.</p>",
        "id": 246630530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626805761
    },
    {
        "content": "<p>The second one isn't about formalisation, right?</p>",
        "id": 246630780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626805881
    },
    {
        "content": "<p>No, it's not really. But I liked it too much not to mention it.</p>",
        "id": 246630807,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626805895
    },
    {
        "content": "<p>The first one is this paper, and is indeed very interesting: <a href=\"https://arxiv.org/abs/1806.00347\">https://arxiv.org/abs/1806.00347</a></p>",
        "id": 246630833,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626805909
    },
    {
        "content": "<p>The third one has a definition, as opposed to the axiomatic approach of the first. But I think it quickly specialises to an example, and does not develop Lie theory further. Cyril, please correct me if I'm wrong.</p>",
        "id": 246630982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626805974
    },
    {
        "content": "<p>That's exactly what I see too.</p>",
        "id": 246631013,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626805988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> you found every piece of development I know is related to Lie algebras in Coq...</p>",
        "id": 246631164,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1626806048
    },
    {
        "content": "<p>Unfortunately...</p>",
        "id": 246631180,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1626806054
    },
    {
        "content": "<p>Thanks for such a swift reply Cyril!</p>",
        "id": 246631327,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626806137
    },
    {
        "content": "<p>I assume you only mean formal theorem proving, but another interpretation is any computer implementation of Lie algebras.  It agents to have been implemented in GAP and Magma.  (This is just from Googling.  I don’t even know the definition of a Lie algebra, so my answer isn’t too informed.)</p>",
        "id": 246656348,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626818272
    },
    {
        "content": "<p>I wrote an ancient Mathematica package for dealing with quantum groups (quantised enveloping algebras, and explicit models for the intertwiners between finite dimensional reps, and braid representations). I think it was only ever used by other people inside the KnotTheory package written by Dror (and in part me) available from <a href=\"http://katlas.org/\">http://katlas.org/</a>.</p>\n<p>However there's essentially no documentation, and nothing to cite. :-)</p>\n<p>There are a few other packages for doing calculations inside Lie algebras and/or quantum groups (or their reps) as add-ons for various computer algebra systems.</p>",
        "id": 246674965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626836660
    },
    {
        "content": "<p>Thanks Scott, Katlas itself (new to me) is awesome.</p>",
        "id": 246694903,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626858246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/Formalisation.20of.20Lie.20algebras.20in.20other.20.20languages/near/246656348\">said</a>:</p>\n<blockquote>\n<p>I assume you only mean formal theorem proving, but another interpretation is any computer implementation of Lie algebras.  It appears to have been implemented in GAP and Magma.</p>\n</blockquote>\n<p>Thanks Jason, I had seen mention of these and though they are different to what I've been doing, I'm still interested.</p>",
        "id": 246694952,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626858298
    },
    {
        "content": "<p>I now have a draft article waffling on about my work on Lie algebras and I'd be grateful for feedback / corrections etc. Any remarks most welcome.</p>",
        "id": 248611740,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628257128
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Hfmg30Ub1KGxBSrxFE5067YK/report.pdf\">report.pdf</a></p>",
        "id": 248611785,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628257151
    },
    {
        "content": "<p>This is awesome! First nit: I'd use <code>unfreezingI { obtain ... }</code> instead of <code>tactic.unfreezing_local...</code></p>",
        "id": 248626247,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628264122
    },
    {
        "content": "<p>The acknowledgements section has a typo in the word acknowledge :). The section on the choice of axioms is nice; although it makes me wonder whether it makes sense to have right- or bi- lie modules.</p>",
        "id": 248636702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628268594
    },
    {
        "content": "<p>LOL, of all the places to have a spelling mistake!</p>",
        "id": 248636843,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628268643
    },
    {
        "content": "<p>The point about left- / right- / bi- modules occurred to me too but I left it out to avoid confusion.</p>",
        "id": 248636977,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628268709
    },
    {
        "content": "<p>(well not exactly confusion but there's enough going on)</p>",
        "id": 248637064,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628268733
    },
    {
        "content": "<p>I agree that you don't need to open that can of worms to make that paper interesting, there's enough there already</p>",
        "id": 248637082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628268744
    },
    {
        "content": "<p>Footnote 5 seems to refer to a PR link that didn't make it to the PDF. Perhaps a hyperref misconfiguration?</p>",
        "id": 248637183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628268792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/Formalisation.20of.20Lie.20algebras.20in.20other.20.20languages/near/248626247\">said</a>:</p>\n<blockquote>\n<p>This is awesome! First nit: I'd use <code>unfreezingI { obtain ... }</code> instead of <code>tactic.unfreezing_local...</code></p>\n</blockquote>\n<p>Thanks for this, I agree. On the other hand <code>tactic.unfreezing_local...</code> is currently how this looks in <code>master</code>.</p>",
        "id": 248637348,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628268844
    },
    {
        "content": "<p>Well if you end up publishing master will look entirely different by the time you're done anyway, most likely.</p>",
        "id": 248637509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628268913
    },
    {
        "content": "<p>You might not even need unfreezing if you say \"obtain ... := id h\"</p>",
        "id": 248637553,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628268934
    },
    {
        "content": "<p>I guess I could PR this change. On this point, I don't actually understand this beyond the syntactical difference. Do <code>unfreezingI</code> and <code>tactic.unfreezing_local</code> behave differently in any way, e.g., maybe the former purges less cache?</p>",
        "id": 248637666,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628268969
    },
    {
        "content": "<p>Unfreezing is needed because you're destroying something that was in the typeclass instance cache. But if you \"clone\" the hyp via \"id\", you might not need to. Untested, just guessing</p>",
        "id": 248637707,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628268994
    },
    {
        "content": "<p>No, they're precisely the same.</p>",
        "id": 248637736,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628269009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/Formalisation.20of.20Lie.20algebras.20in.20other.20.20languages/near/248637707\">said</a>:</p>\n<blockquote>\n<p>Unfreezing is needed because you're destroying something that was in the typeclass instance cache. But if you \"clone\" the hyp via \"id\", you might not need to. Untested, just guessing</p>\n</blockquote>\n<p>Interesting, I'll try this out!</p>",
        "id": 248637811,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628269045
    },
    {
        "content": "<p>For the end user. UnfreezingI does return to the the original cache state after the end of the block</p>",
        "id": 248637821,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628269048
    },
    {
        "content": "<p>Oh wow, what a neat trick. You're right; this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">hJ</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">lie_ideal.derived_series_add_eq_bot</span> <span class=\"n\">hk</span> <span class=\"n\">hl</span><span class=\"o\">⟩⟩,</span>\n</code></pre></div>",
        "id": 248638009,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628269117
    },
    {
        "content": "<p>Is that acceptable style?</p>",
        "id": 248638081,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628269154
    },
    {
        "content": "<p>Maybe <code>obtain</code> could be taught to do this?</p>",
        "id": 248638134,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628269182
    },
    {
        "content": "<p>This isn't always the right behavior for obtain though; sometimes you want to substitute <code>hI</code> in the goal and other hypotheses too, which is what happens without <code>id</code>.</p>",
        "id": 248639625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628269799
    },
    {
        "content": "<p>I personally use <code>obtain ... := id ...</code> to destruct hypotheses without clearing them. Useful trick in general.</p>",
        "id": 248646204,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628272825
    },
    {
        "content": "<p>Another option is just to use <code>let</code> in term mode instead of <code>obtain</code>. For the proof in question (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_algebra.is_solvable_add/src\">src#lie_algebra.is_solvable_add</a>) that golfs away the entire tactic component!</p>",
        "id": 248651651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628275325
    },
    {
        "content": "<p>That was a nice read :)</p>",
        "id": 248657613,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628278183
    },
    {
        "content": "<p>If you're trying to make it beginner friendly, I personally found 4 the most challenging section to read, but otherwise very understandable</p>",
        "id": 248657992,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628278359
    },
    {
        "content": "<p>Looking at the lemmas about <code>is_solvable R J</code>... I almost wonder if the proofs would be easier as <code>has_solution R J k</code> or <code>solution R J : Type</code>, and then you don't have to pull apart exists every time (see: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/invertible\">docs#invertible</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_unit\">docs#is_unit</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units\">docs#units</a>, respectively, or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum\">docs#has_sum</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable\">docs#summable</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum\">docs#tsum</a>). Perhaps it's never useful to know the value of <code>k</code> though.</p>",
        "id": 248659016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628278914
    },
    {
        "content": "<p>Which isn't to say anything needs changing, but just that this is yet another opportunity to describe a design decision if you wanted too!</p>",
        "id": 248660403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628279691
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> , <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> , and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> All of this feedback is very useful and much appreciated.</p>",
        "id": 248709370,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628332117
    }
]