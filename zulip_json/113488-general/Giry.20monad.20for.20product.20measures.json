[
    {
        "content": "<p>I want to construct the <code>k</code>-fold product measure from a measure <code>m</code>. I looked through the old chats and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  had a slick way to do this using the Giry Monad. Does anyone else understand how to do this? </p>\n<p>Does mathlib even have product measures?</p>",
        "id": 165288626,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557435681
    },
    {
        "content": "<p>If I understand correctly, I can't directly use <code>do</code> notation to construct this as <code>measure</code> isn't  a <code>monad</code> instance.  So this won't work:</p>\n<div class=\"codehilite\"><pre><span></span>prod M1 M2 := do { x &lt;- M1, y &lt;- M2, return (x, y) }\n</pre></div>",
        "id": 165288637,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557435696
    },
    {
        "content": "<p>You <strong>can't</strong> write <code>do</code>, but you can still use <code>bind</code> and <code>dirac</code> (otherwise called <code>pure</code> or <code>return</code>). The interesting part is to prove commutativity, i.e. Fubini's theorem</p>",
        "id": 165295344,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1557442876
    },
    {
        "content": "<p><code>prod m1 m2 := m1.bind (fun x, m2.bind (fun y, dirac (x, y)))</code></p>",
        "id": 165295406,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1557442934
    },
    {
        "content": "<p>Oh you <em>can</em> use <code>do</code>?</p>",
        "id": 165295416,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557442967
    },
    {
        "content": "<p>argh sorry, fixed my message</p>",
        "id": 165295444,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1557443021
    },
    {
        "content": "<p>Oh I see. Thanks!</p>",
        "id": 165295528,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557443107
    },
    {
        "content": "<p>I'll try this once I'm at my machine again.</p>",
        "id": 165295538,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557443133
    },
    {
        "content": "<p>While the Giry Monad is a slick idea, it won’t ever work in Lean.  Here is why.  For a measure to be a monad, one needs to make sense of the type <code>measure A</code> where <code>A</code> is a type.  But that is not how measures work, <code>m</code> is not a measure on a type <code>A</code>, it is a measure on a space <code>A</code>.  (Either a measurable space, or for some types of measure theory, a Polish space or a locally compact Hausdorff space.)  Moreover, even if we could restrict to a set of types, we still need to restrict to only certain functions in our <code>map</code> operator.  For if <code>m</code> is a measure on the reals, and implicitly we are using the canonical Borel measurable structure of the reals, we still can’t expect <code>map f m</code> to be meaningful for every function from the reals to the reals.  Consider the indicator function of a non-measurable set.  There is no push-forward measure to be had.  The Giry monad is only a monad on a restricted type system.  (Such as where types are Polish spaces and functions are continuous maps.)   (Alternately, if by “measure”, you mean a probability measure on the full power set sigma algebra, then yes it is a monad, but unless you only care about the discrete setting, this is not what you want...)</p>",
        "id": 165295693,
        "sender_full_name": "Jason Rute",
        "timestamp": 1557443322
    },
    {
        "content": "<p>Uh, that's a bold claim for something which is already in mathlib: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/giry_monad.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/giry_monad.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/giry_monad.lean</a></p>",
        "id": 165296874,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1557444653
    },
    {
        "content": "<p>Yes, I think I spoke too quickly...</p>",
        "id": 165296912,
        "sender_full_name": "Jason Rute",
        "timestamp": 1557444722
    },
    {
        "content": "<p>The trick is to just set it to 0 (or some null measure etc) if the function is not measurable. Then each equation one proves over the Giry monad requires the necessary measurability assumptions.</p>",
        "id": 165296951,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1557444734
    },
    {
        "content": "<p>Another way to do it would be to setup the category of measurable spaces, and show that there exists a <code>measure</code>-Endofunctor in this category, and prove that it is actually a monad</p>",
        "id": 165296984,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1557444800
    },
    {
        "content": "<p>But to apply it I guess the current approach is the easier one</p>",
        "id": 165296990,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1557444821
    },
    {
        "content": "<p>It is a nice trick (and I should never start a comment with \"won't ever\").  But doesn't the \"set it to 0\" trick violate the monadic laws, namely associativity?  For example, if <code>m</code> is the Lebesgue measure, <code>f</code> in non measurable, and <code>g x := tt</code> is constant doesn't <code>do { y &lt;- do { x &lt;- m; f x }; g y}</code> give the 0 measure, but <code>do { x &lt;- m; do { y &lt;- f x; g y }}</code> give <code>dirac tt</code>.  I think my poorly expressed point is that there isn't a way to actually make <code>measure</code> a monad in Lean which obeys the monadic axioms, but maybe I am mistaken.</p>",
        "id": 165298881,
        "sender_full_name": "Jason Rute",
        "timestamp": 1557447419
    },
    {
        "content": "<p>Either way, you clearly made the ideas useful (and I again apologize for my brash claims).</p>",
        "id": 165298986,
        "sender_full_name": "Jason Rute",
        "timestamp": 1557447597
    },
    {
        "content": "<p>There is of course <code>category_theory</code> for being able to talk about monads in other categories, but you are probably right that there is no lawful monad from the category of types and functions</p>",
        "id": 165299081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557447708
    },
    {
        "content": "<p>With a PR for monoidal categories open, general monads will be available any day now. :-)</p>",
        "id": 165300366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557449584
    },
    {
        "content": "<p>We won't have the <code>do</code>-notation for those general monads... I'm not sure if that is a bug or a feature <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 165306703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557459560
    },
    {
        "content": "<p>do notation doesn't really make sense unless you at least have the structure of a CCC, because you need lambda terms</p>",
        "id": 165307544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557461000
    },
    {
        "content": "<p>Sure... but even if we have CCC, we still don't have <code>do</code></p>",
        "id": 165307683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557461179
    },
    {
        "content": "<p>The category in question (<code>Meas</code>) is a CCC, I think [but I didn't check carefully]</p>",
        "id": 165307687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557461197
    },
    {
        "content": "<p>and also fancy tactic/parser footwork</p>",
        "id": 165307857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557461420
    },
    {
        "content": "<p>Exactly... that was what I was mostly concerned about</p>",
        "id": 165307873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557461464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> yes, this is the limitation: the monadic laws only hold conditionally. All functions / sets need to be measurable.</p>",
        "id": 165312211,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1557468524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I don’t think <code>Meas</code> is CCC.  At least Prop 6 in this paper says it is not: <a href=\"https://arxiv.org/pdf/1701.02547.pdf\" target=\"_blank\" title=\"https://arxiv.org/pdf/1701.02547.pdf\">https://arxiv.org/pdf/1701.02547.pdf</a></p>",
        "id": 165327042,
        "sender_full_name": "Jason Rute",
        "timestamp": 1557486505
    },
    {
        "content": "<p>Ok... too bad. I've never really done measure theory. So I better don't make bold claims</p>",
        "id": 165327073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557486546
    },
    {
        "content": "<blockquote>\n<p>do notation doesn't really make sense unless you at least have the structure of a CCC, because you need lambda terms</p>\n</blockquote>\n<p>Why do you say that? Isn't do notation really just sugar for bind's?</p>",
        "id": 165356178,
        "sender_full_name": "Joseph Tassarotti",
        "timestamp": 1557510517
    },
    {
        "content": "<p><code>do a &lt;- f, t</code> is sugar for <code>f &gt;&gt;= \\lam a, t</code>, i.e. it is a combination of bind and lambda</p>",
        "id": 165365517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557517709
    },
    {
        "content": "<p>because term <code>t</code> may have free references to <code>a</code> that was introduced by the do</p>",
        "id": 165365546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557517752
    },
    {
        "content": "<p>Actually, maybe you don't need exponential objects, if you make sure to uncurry everything. To translate the type theory bind operator to cats, suppose we have <code>G |- do a : A &lt;- f, t : T B</code> where <code>T</code> is the monad. We view this as an arrow <code>G -&gt; T B</code>, where <code>f : G -&gt; T A</code> and <code>t : G x A -&gt; T B</code>. I think it's possible to define this bind in any (category theory) monad with products, Reid and Scott will know</p>",
        "id": 165366874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557518796
    },
    {
        "content": "<p>At the moment I'm stuck on how to make an arrow <code>G x T A -&gt; T (G x A)</code>. This is some tensoring thing?</p>",
        "id": 165367860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557519667
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Strong_monad\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Strong_monad\">https://en.wikipedia.org/wiki/Strong_monad</a></p>",
        "id": 165368280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557519992
    },
    {
        "content": "<p>It's not automatic in general</p>",
        "id": 165368292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557520004
    },
    {
        "content": "<p>Does anything special happen when the monoidal product is just the categorical product there? I see references to things like all functors on Set are strong but that might have to do with the existence of exponentials</p>",
        "id": 165368570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520233
    },
    {
        "content": "<p>Also, this paper <a href=\"https://arxiv.org/pdf/1612.05939.pdf\" target=\"_blank\" title=\"https://arxiv.org/pdf/1612.05939.pdf\">https://arxiv.org/pdf/1612.05939.pdf</a> suggests that in the case of the Giry monad even this approach won't work because it's not strong</p>",
        "id": 165368604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520268
    },
    {
        "content": "<p>I still don't quite understand. What's to stop me right now from defining my own <code>do</code> notation for this Giry monad?</p>",
        "id": 165368613,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557520282
    },
    {
        "content": "<p>the problem is that arrows are not the same as terms in type theory</p>",
        "id": 165368625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520306
    },
    {
        "content": "<p>terms have free variables</p>",
        "id": 165368634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520316
    },
    {
        "content": "<p>and you want to interpret these variables as somehow denoting certain projections from the context object <code>G</code> to make an arrow</p>",
        "id": 165368691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520344
    },
    {
        "content": "<p>for example, the type theory term <code>a : A, b : B |- a : A</code> gets turned into <code>pi1 : A x B --&gt; A</code>,  and <code>a : A, b : B |- (a, (b, a)) : A x (B x A)</code> becomes <code>(pi1, (pi2, pi1)) : A x B --&gt; A x (B x A)</code></p>",
        "id": 165368975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520566
    },
    {
        "content": "<p>But then the question is how to define the term <code>G |- do a &lt;- f, t</code>, where <code>G |- f : F A</code> and <code>G, a : A |- t : F B</code>? By induction we suppose we can translate <code>f</code> as an arrow <code>G --&gt; F A</code> and <code>t</code> as an arrow <code>G x A --&gt; F B</code>, but then we need an operation in the category to get from this to <code>G --&gt; F B</code> and that needs a strong monadic structure</p>",
        "id": 165369115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520705
    },
    {
        "content": "<p>Over the category Type, which is what <code>[monad T]</code> is talking about, all monads are strong monads because tensorial strength is \"free\"</p>",
        "id": 165369186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520796
    },
    {
        "content": "<p>hence <code>do</code> notation exists</p>",
        "id": 165369243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520810
    },
    {
        "content": "<p>but over a general category it's not clear how to interpret the term as some arrow in the category</p>",
        "id": 165369262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557520834
    },
    {
        "content": "<p>I think there's two separate issues here: we can define a <code>do</code> notation that desugars into the <code>bind</code> defined here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/giry_monad.lean#L144\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/giry_monad.lean#L144\">https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/giry_monad.lean#L144</a>, but it may very well be the case that the function ends up not being measurable. But that's already a problem with using the <code>bind</code> directly</p>",
        "id": 165369313,
        "sender_full_name": "Joseph Tassarotti",
        "timestamp": 1557520906
    },
    {
        "content": "<p>I think what's special about Set isn't that it's cartesian closed or whatever but rather that it is the base category that we are enriched over.<br>\nThat is, it is baked into the notion of \"functor\"</p>",
        "id": 165370131,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557521676
    },
    {
        "content": "<p>So the tl;dr is the following: <br>\n1. you can't use the existing <code>do</code> notation for the Giry monad because it is not a monad over the <code>Type</code> category. <br>\n2. because the way it is implemented currently needs all functions to be measurable. <br>\n3. you still can write your own <code>do</code> notation to simply desugar the Giry monad <code>bind</code>.</p>",
        "id": 165413551,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557584079
    },
    {
        "content": "<p>Not quite. You can use the existing <code>do</code> notation, all that needs to be done is that the Giry monad <code>bind</code> be installed as a <code>has_bind</code> instance</p>",
        "id": 165451234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557643615
    },
    {
        "content": "<p>You could even provide a <code>monad</code> instance for the Giry monad; it just won't be <code>is_lawful_monad</code></p>",
        "id": 165451245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557643654
    },
    {
        "content": "<p>You won't even get the wrong result if you use the regular <code>do</code> notation; it fails when the input functions are not measurable but when they are it gets the right result (and in any reasonable application you will use it with measurable functions anyway)</p>",
        "id": 165451352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557643756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I tried to do that, but you can only install a <code>has_bind</code> instance over all types <code>α</code> which are instances of <code>[measurable_space α]</code>.  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">giry</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">:</span>\n<span class=\"n\">has_bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 165463816,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557665904
    },
    {
        "content": "<p>The state is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"err\">⊢</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 165463817,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557665917
    },
    {
        "content": "<p>Can I make a subtype of types the elements of which are instances of <code>measurable_space</code>?</p>",
        "id": 165464110,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557666449
    }
]