[
    {
        "content": "<p>Hi, something in <a href=\"https://github.com/leanprover-community/mathlib/issues/7124\">#7124</a> causes a leanchecker timeout. How can I debug/fix it?</p>",
        "id": 233713671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617909857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Ping here</p>",
        "id": 233888995,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618001962
    },
    {
        "content": "<p>pong<br>\nThe problem was that a proof for <code>unique_diff_on</code> (for the pi instance which uses the L^∞ norm) was used for <code>unique_diff_on</code> (for the pi_Lp instance using the L^2 norm).  It turns that <code>unique_diff_on</code> doesn't actually depend on the norm (only the topology) even though it takes <code>normed_space</code> argument, so this type-checks after a lot of unfolding.  Generalizing <code>unique_diff_on</code> from normed spaces to semimodules that are also topological spaces gets rid of the unfolding.  I've also made <code>unique_diff_within_at</code> a structure to prevent unfolding.</p>",
        "id": 234222149,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618258125
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 234222236,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618258180
    },
    {
        "content": "<p>How did you debug this?</p>",
        "id": 234222377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618258236
    },
    {
        "content": "<p>Leanchecker works</p>",
        "id": 234222604,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618258351
    },
    {
        "content": "<p>I added print statements to leanchecker so that I could see where it hanged.  This way I could identify <code>model_with_corners_euclidean_half_space._proof_7</code> as the culprit.  Running leanchecker in gdb showed that it was normalizing <code>list.map ... nnnorm ....</code> which looks like the norm on <code>fin n → ℝ</code>.<br>\nFrom there it was natural to prevent reduction of some complicated definition.  After turning <code>unique_diff_within_at</code> into a structure, the two manifold definitions broke because of the mismatch between the normed_space instances.   The rest was just figuring out why it should actually work, and adjusting the type class parameters to <code>unique_diff_within_at</code> accordingly.</p>",
        "id": 234223171,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618258582
    },
    {
        "content": "<p>You had to recompile lean to do that I guess?</p>",
        "id": 234223322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618258668
    },
    {
        "content": "<p>Just leanchecker.</p>",
        "id": 234223345,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618258680
    },
    {
        "content": "<p>Isn't that the same code?</p>",
        "id": 234223404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618258694
    },
    {
        "content": "<p>Is it possible to put the print statements behind a CLI flag?</p>",
        "id": 234223475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618258737
    },
    {
        "content": "<p>It is in the same repository, but it only depends on the kernel (not the tactics, not the vm, not even the type context).</p>",
        "id": 234223488,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618258743
    },
    {
        "content": "<p>Something like <code>leanchecker -v</code> to print all the theorems, and then <code>leanchecker -vv model_with_corners_euclidean_half_space._proof_7</code> to print normalization steps would be awesome</p>",
        "id": 234223739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618258860
    },
    {
        "content": "<p>my main worry is that for the latter, it can't be compiled out since the CLI flag is a runtime thing so it might be a performance regression</p>",
        "id": 234223952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618258939
    },
    {
        "content": "<p>Ah, actually I guess it can be behind a compile time setting that is true for leanchecker and false for lean</p>",
        "id": 234224065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618258990
    }
]