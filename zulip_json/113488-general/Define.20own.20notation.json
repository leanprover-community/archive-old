[
    {
        "content": "<p>Sometimes an additive group can be module of different rings, to differentiate the different scalar multiplication I want to introduce notations for different module instances. But since the \"type\" of the new notation is still <code>has_smul.smul</code>, in goal view Lean will always still show the same <code>•</code>, is there a way to ask Lean prioritizing which notation to use?</p>\n<p>An mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">r</span> <span class=\"bp\">`•</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@@</span><span class=\"n\">has_smul.smul</span> <span class=\"o\">(</span><span class=\"n\">module.comp_hom</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_has_smul</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">•</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- goal shows r • m = m</span>\n  <span class=\"c1\">-- but I want it to show r •[f] m = m</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal still shows r • m = m</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So I can write scalar multiplication using customized notation, but I cann't read customized notation in goal view</p>",
        "id": 292557775,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1660042932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> The recommended way is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower\">docs#is_scalar_tower</a></p>",
        "id": 292558880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660043499
    },
    {
        "content": "<p>I think the actual problem here is that lean won't ever pretty print notation with a <code>@</code> in its definition; not that it's choosing the existing notation over your notation.</p>",
        "id": 292558908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660043515
    },
    {
        "content": "<p>Of course, the notation <code>f r • m</code> works just fine ;)</p>",
        "id": 292559014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660043561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  but this silly example without <code>@</code>doesn't work either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">r</span> <span class=\"bp\">`••`</span> <span class=\"o\">:=</span> <span class=\"n\">has_smul.smul</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">••</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- goal shows 0 • 1 = 2</span>\n  <span class=\"c1\">-- but I want it to show 0 •• 1 = 2</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">••</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal still shows 0 • 1 = 2</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292565220,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1660046628
    },
    {
        "content": "<p>It works as <code>notation r `••` x := has_smul.smul r x</code></p>",
        "id": 292566397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660047125
    },
    {
        "content": "<p>In this example, I think lean prefers notation for large expressions over notation for subexpressions</p>",
        "id": 292566466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660047164
    },
    {
        "content": "<p>See:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n\n<span class=\"c1\">-- reordering has no effect</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">F3</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">F2</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">F1</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">_</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>  <span class=\"c1\">-- F1</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- F2</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>  <span class=\"c1\">-- F3</span>\n</code></pre></div>\n<p>for proof of that</p>",
        "id": 292566716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660047258
    }
]