[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">L</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">skip</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">tactic failed, there are unsolved goals</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ bar.L 0 = foo.R 0 bar</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 198576867,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590315859
    },
    {
        "content": "<p>the pretty printer uses projection notation <code>bar.L 0</code> instead of <code>foo.L bar 0</code> if the first argument is of type <code>foo</code></p>",
        "id": 198576878,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590315887
    },
    {
        "content": "<p>but not for the second argument (e.g. <code>foo.R 0 bar</code>)</p>",
        "id": 198576879,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590315891
    },
    {
        "content": "<p>is this the intended behaviour?</p>",
        "id": 198576881,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590315896
    },
    {
        "content": "<p>also, I remember that a few weeks ago this feature didn't exist, that the pretty printer would not use projection notation at all: does this mean projection notation is now <em>encouraged</em>?</p>",
        "id": 198576937,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590315975
    },
    {
        "content": "<p>I was just faced with the goal <code>3.prime</code>. I'm still getting used to the new way</p>",
        "id": 198578309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590318531
    },
    {
        "content": "<p>I think it is good that it doesn't flip arguments. Note that you can get some very weird results when other arguments are \"accidentally\" of the right type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"c1\">-- a.case b c : ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"c1\">-- b.case c a : ℕ</span>\n</code></pre></div>",
        "id": 198578784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590319421
    },
    {
        "content": "<p>Here's another fun one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inr</span>\n</code></pre></div>",
        "id": 198578847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590319561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/pretty.20printer.20uses.20projection.20notation.20only.20for.20first.20arg/near/198578784\">said</a>:</p>\n<blockquote>\n<p>I think it is good that it doesn't flip arguments. Note that you can get some very weird results when other arguments are \"accidentally\" of the right type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"c1\">-- a.case b c : ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"c1\">-- b.case c a : ℕ</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>That kind of breaks <code>extract_goal</code>...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">extract_goal</span> <span class=\"n\">lemma1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lemma1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198579829,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590321226
    },
    {
        "content": "<p>I'm pretty sure this is a bug in the pretty printer. It's never supposed to fail a round-trip like this</p>",
        "id": 198579933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590321374
    },
    {
        "content": "<p>I think the pretty printer should use the same algorithm as the parser in this case, which would mean that <code>c.case a b</code> means <code>nat.case a b c</code>, using the first variable that has the right type given the <em>unsubstituted</em> type of the constant</p>",
        "id": 198580005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590321501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/pretty.20printer.20uses.20projection.20notation.20only.20for.20first.20arg/near/198579933\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure this is a bug in the pretty printer. It's never supposed to fail a round-trip like this</p>\n</blockquote>\n<p>Should I file this to leanprover-community/lean as a bug? (ie. make an issue)?</p>",
        "id": 198581388,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590323730
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/268\">lean#268</a></p>",
        "id": 198583020,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590326270
    }
]