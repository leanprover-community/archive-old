[
    {
        "content": "<p>I have the following MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">mystruct</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">dec_eq</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- suppose this is only well-defined if α has dec_eq</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">one</span>   <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">two</span>   <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">mystruct</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- error</span>\n<span class=\"kn\">instance</span> <span class=\"n\">three</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">mystruct</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">dec_eq</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">dec_eq</span>\n</pre></div>\n\n\n<p><code>one</code> and <code>three</code> work but <code>two</code> doesn't. I think this is because <code>dec_eq</code> is inside my struct and Lean's typeclass inference does not unfold it? Can I make two work \"automatically\"? Or do I need to change my structure definition?</p>",
        "id": 191410378,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584903105
    },
    {
        "content": "<p>I also tried writing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">mystruct</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but that doesn't work because Lean complains that <code>decidable_eq</code> is not a structure, (even though I think it should be -- since it is a typeclass? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>",
        "id": 191410569,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584903325
    },
    {
        "content": "<p>it is a <code>@[class] def</code>, not a <code>structure</code></p>",
        "id": 191410668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584903463
    },
    {
        "content": "<p>If you want to embed <code>deicdable_eq</code>, you can do it as in the MWE, if you add <code>attribute [instance] mystruct.dec_eq</code></p>",
        "id": 191410733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584903527
    },
    {
        "content": "<p>actually this won't work unless <code>mystruct</code> is also a class</p>",
        "id": 191410745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584903571
    },
    {
        "content": "<p>If you want to keep <code>mystruct</code> as a structure, then you should probably take the <code>dec_eq</code> out of the structure and just have it as a separate typeclass argument to your theorems</p>",
        "id": 191410836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584903667
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">mystruct</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 191410992,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584903845
    },
    {
        "content": "<p>like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">mystruct</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 191411006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584903879
    },
    {
        "content": "<p>that <code>:= sorry</code> is suspicious btw, I don't think that means what you think. You aren't supposed to be giving a definition at that position</p>",
        "id": 191411033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584903932
    },
    {
        "content": "<p>Oh yeah, you are right about that, I should remove that sorry.</p>",
        "id": 191411184,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584904161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/typeclass.20inference.20from.20inside.20structures/near/191410668\" title=\"#narrow/stream/113488-general/topic/typeclass.20inference.20from.20inside.20structures/near/191410668\">said</a>:</p>\n<blockquote>\n<p>it is a <code>@[class] def</code>, not a <code>structure</code></p>\n</blockquote>\n<p>Two followup questions from this:</p>\n<ul>\n<li>Why doesn't <code>@[class]</code> show up when I <code>#print decidable_eq</code>? </li>\n<li>Under what circumstances would I want to make @[class] defs of my own. I think I understand when I want @[class] structures, but not defs.</li>\n</ul>",
        "id": 191411327,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584904340
    },
    {
        "content": "<p>Oh, actually <code>decidable_eq</code> isn't a class, it is a reducible def. The class is <code>decidable</code></p>",
        "id": 191411400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584904446
    },
    {
        "content": "<p>a <code>@[class] def</code> is defeq to its definition.  This is occasionally useful</p>",
        "id": 191411506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584904615
    },
    {
        "content": "<p>But I don't think it is unreasonable to default to using <code>class</code> instead</p>",
        "id": 191411527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584904657
    },
    {
        "content": "<p>Okay. Thanks for answering all my questions.</p>",
        "id": 191411844,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584905080
    }
]