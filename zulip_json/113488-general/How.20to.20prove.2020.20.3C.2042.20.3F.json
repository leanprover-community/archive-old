[
    {
        "content": "<p>What is the idiomatic way to prove <code>20 &lt; 42</code>? Is it to write <code>nat.lt_of_sub_eq_succ rfl</code>?</p>\n<p>More generally, I am implementing binary search trees and need to generate lots of proofs of the form <code>n &lt; m</code> where <code>n</code> and <code>m</code> are concrete natural numbers (numerals). To illustrate what I am looking for, suppose we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I would like a <code>smart_f</code> such that if I write <code>auto_f 20 42</code> then it will apply <code>f 20 42 p</code> where <code>p</code> is an auto-generated proof of <code>20 &lt; 42</code>. (The idea is to then have smart constructors for binary search trees.) Is this doable? With tactics?</p>",
        "id": 276168603,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1647945486
    },
    {
        "content": "<p><code>by norm_num</code></p>",
        "id": 276168759,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1647945583
    },
    {
        "content": "<p>Hmm,  <code>nat.lt_of_sub_eq_succ rfl</code> seems to be linear in the size of the arguments. Is there a way to use fast subtraction or something to accomplish this?</p>",
        "id": 276168760,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1647945583
    },
    {
        "content": "<p><code>norm_num</code> uses binary arithmetic</p>",
        "id": 276168855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647945622
    },
    {
        "content": "<p>and here is <code>smart_f</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">by_norm_num</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">norm_num</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">auto_f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">.</span> <span class=\"n\">by_norm_num</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">auto_f</span> <span class=\"mi\">20</span> <span class=\"mi\">42</span> <span class=\"c1\">-- auto_f 20 42 _ : ℕ</span>\n</code></pre></div>",
        "id": 276169219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647945823
    },
    {
        "content": "<p>(we have to work around some silly restrictions in auto params here; you can just use <code>(h : a &lt; b := by norm_num)</code> in lean 4)</p>",
        "id": 276169337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647945880
    }
]