[
    {
        "content": "<p>Hi! I'm a beginner to Lean and want to prove <a href=\"http://www.cs.ru.nl/~freek/demos/exercise/exercise.pdf\">IMO 1972 B2</a> (which was used  to compare various formal systems at <a href=\"https://www.cs.ru.nl/F.Wiedijk/demos/index.html\">ICMS 2006 to compare various systems</a>). I formalized the statement as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I'm a bit stuck as I'd like to have a way to calculate/operate with the supremum of <code>f</code> or I can only find <code>is_sub</code> in mathlib. What would be a good way to have <code>k : ℝ</code> such that <code>k</code> is the supremum of <code>f</code> and prove that it's in  ℝ because f is bounded? Also is <code>is_lub (f ''  ℝ) k</code> the correct way to say that k is the supremum of a real function <code>f</code>?  Thanks for your help <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 208061183,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598427667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span> Hi, does your code typecheck in Lean? Which imports do you use?</p>",
        "id": 208061508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598427932
    },
    {
        "content": "<p>I don't know the analysis part too well, but for me the <code>| .. |</code> didn't work after importing <code>data.real.basic</code>.</p>",
        "id": 208061530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598427959
    },
    {
        "content": "<p>I believe that we always use <code>\\|| .. \\||</code> for norms</p>",
        "id": 208061577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598427970
    },
    {
        "content": "<p>Ah sorry yeah, I started working at the end of the tutorials, so this might not be totally legit in mathlib; there |..| is defined. I will definitely translate to mathlib <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 208061589,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598427979
    },
    {
        "content": "<p>Here's a start:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∥</span><span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">Sup_def</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- useful lemmas: real.Sup_le real.le_Sup, etc...</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208062143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598428415
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 208062245,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598428480
    },
    {
        "content": "<p>Awesome to get me started <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 208062251,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598428488
    },
    {
        "content": "<p>I think there was a thread on this in the past</p>",
        "id": 208062599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598428727
    },
    {
        "content": "<p>I think I was thinking of another proof assistant ;)</p>",
        "id": 208062781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598428856
    },
    {
        "content": "<p>You have to start <a href=\"http://us.metamath.org/mpegif/imo72b2.html\">somewhere</a> :)</p>",
        "id": 208062818,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598428898
    },
    {
        "content": "<p>The absolute values bars in the tutorials project means <code>abs</code>: <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/solutions/tuto_lib.lean#L12\">https://github.com/leanprover-community/tutorials/blob/master/src/solutions/tuto_lib.lean#L12</a> There is no other trick involved here.</p>",
        "id": 208063997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598429909
    },
    {
        "content": "<p>Might be easier to prove if you change <code>f(y)</code> to <code>g(y)</code> in <code>hf1</code></p>",
        "id": 208068998,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598433626
    },
    {
        "content": "<p>Nice catch :)</p>",
        "id": 208070171,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598434397
    },
    {
        "content": "<p>I wrote an awful proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∥</span><span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span><span class=\"o\">),</span>\n  <span class=\"n\">set</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">fz</span> <span class=\"n\">zs</span><span class=\"o\">,</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">zs</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf2</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">le_Sup</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf3</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">&lt;</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"n\">norm_pos_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hx</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">h2</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"err\">∥</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hf1</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"n\">norm_add_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">two_mul</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5&#39;</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n\n  <span class=\"n\">set</span> <span class=\"n\">k&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"err\">∥</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k&#39;</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">le_div_iff</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h5&#39;</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">k&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">div_lt_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_mul_of_one_lt_right</span> <span class=\"err\">‹</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"err\">›</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">k&#39;</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">Sup_le_ub</span> <span class=\"bp\">_</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">⟨</span><span class=\"n\">yy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">k&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">k&#39;</span>\n      <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">k&#39;</span> <span class=\"o\">:</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208085207,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598445435
    },
    {
        "content": "<p>Slightly refactored proof but still structurally the same:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∥</span><span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">),</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hk₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"bp\">_</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hy</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hf2</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">le_Sup</span> <span class=\"n\">S</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hf1</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"n\">norm_add_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">hk₁</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk₁</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">two_mul</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">by_contra</span> <span class=\"n\">hneg</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hneg</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">k&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"err\">∥</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">k&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf3</span><span class=\"o\">,</span>\n      <span class=\"k\">calc</span> <span class=\"mi\">0</span>\n          <span class=\"bp\">&lt;</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"n\">norm_pos_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hx</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">hk₁</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">div_lt_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_mul_of_one_lt_right</span> <span class=\"n\">h₁</span> <span class=\"n\">hneg</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">hneg</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">k&#39;</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"err\">∥</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k&#39;</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">le_div_iff</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hk₂</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">hneg</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">Sup_le_ub</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">⟨</span><span class=\"n\">yy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"n\">yy</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">k&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">k&#39;</span>\n      <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">k&#39;</span> <span class=\"o\">:</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208224714,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598538804
    },
    {
        "content": "<p>I'd be very curious to get feedback on how to make it more concise, if anybody has any.</p>",
        "id": 208224803,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598538842
    },
    {
        "content": "<p>I played around with it some more, with more backwards reasoning:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∥</span><span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span><span class=\"o\">),</span>\n  <span class=\"n\">set</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">le_Sup</span> <span class=\"n\">S</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">forall_range_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hf2</span><span class=\"bp\">⟩</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n\n  <span class=\"n\">by_contra</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hgy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">∥</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span> <span class=\"o\">:=</span> <span class=\"n\">trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n\n  <span class=\"n\">set</span> <span class=\"n\">k&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"err\">∥</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">k&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">div_lt_iff</span> <span class=\"n\">hgy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">lt_mul_of_one_lt_right</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf3</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">norm_pos_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">Sup_le_ub</span> <span class=\"n\">S</span> <span class=\"bp\">⟨</span><span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"err\">∥</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">forall_range_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hgy</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">],</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hf1</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"n\">norm_add_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">two_mul</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208231377,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598541446
    },
    {
        "content": "<p>Btw, I was hoping <code>linarith</code> could solve <code>0 &lt; ∥g y∥</code> given <code>1 &lt; ∥g y∥</code>, but apparently not. Should it?</p>",
        "id": 208232330,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598541819
    },
    {
        "content": "<p>To prove <code>hgy</code>? It does for me.</p>",
        "id": 208235063,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1598542869
    },
    {
        "content": "<p>Now it does for me too. I wonder what went wrong before</p>",
        "id": 208235302,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598542957
    },
    {
        "content": "<p>Fantastic! Do people find the term proofs more readable with practice?</p>",
        "id": 208237400,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598543840
    },
    {
        "content": "<p>In my case at least, \"more readable\", but still not really \"readable\".</p>",
        "id": 208237657,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598543950
    },
    {
        "content": "<p>Ruben, when you hit something that looks like an API hole, it's even nicer if you try to fix it by opening a mathlib PR. It seems your desperately missed:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">le_supr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">supr</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">le_Sup</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">-</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">supr_le_ub</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">supr</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">Sup_le_ub</span><span class=\"o\">,</span>\n  <span class=\"n\">inhabit</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">default</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"bp\">_</span><span class=\"o\">],</span>\n  <span class=\"n\">rintros</span> <span class=\"bp\">-</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Ideally a PR would of course also include the infi variants.</p>",
        "id": 208244249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598546945
    },
    {
        "content": "<p>Oh, I started from Johan's code and didn't think of using <code>supr</code> at all, I'll take a look at those</p>",
        "id": 208245125,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598547344
    },
    {
        "content": "<p>I just tried to write a readable proof (using the above lemmas).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">|</span><span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf3</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">supr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">le_supr</span> <span class=\"n\">hf2</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hgy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">k_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">norm_pos_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">div_lt_iff</span> <span class=\"n\">hgy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">lt_mul_of_one_lt_right</span> <span class=\"n\">k_pos</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">supr_le_ub</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hgy</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">],</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span>           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hf1</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"n\">abs_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>                     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208245219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598547375
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3959\">#3959</a></p>",
        "id": 208268021,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598558308
    },
    {
        "content": "<p>I realized the <code>hf2</code> hypothesis is unnecessarily strong - we only need that <code>|f|</code> is bounded from above, and that formulation lets us use <code>le_csupr</code> directly:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">hf3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">|</span><span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf3</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">supr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">le_csupr</span> <span class=\"n\">hf2</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hgy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">k_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">norm_pos_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">div_lt_iff</span> <span class=\"n\">hgy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">lt_mul_of_one_lt_right</span> <span class=\"n\">k_pos</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">csupr_le</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hgy</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">],</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"bp\">|</span>           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hf1</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"n\">abs_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>                     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208323089,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598607756
    }
]