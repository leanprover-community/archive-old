[
    {
        "content": "<p>Should we add the following simp lemmas? Or are they bad for some reason?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nonempty_iff_false</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_nonempty_iff.mpr</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_empty_iff_false</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">not_nonempty_iff</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 250768400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629983184
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_is_empty_of_nonempty\">docs#not_is_empty_of_nonempty</a> (which replaces is_empty_iff_false), and it's a simp lemma.  We could also add the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nonempty_iff_true</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_empty_iff_true</span> <span class=\"o\">[</span><span class=\"n\">is_empty</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 250769660,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629983705
    },
    {
        "content": "<p>Can <code>[is_empty X] [nonempty X] : false</code> work as a simp lemma?</p>",
        "id": 250770377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629984009
    },
    {
        "content": "<p>The one you link doesn't take both as typeclass arguments</p>",
        "id": 250770404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629984026
    },
    {
        "content": "<p>I believe that will work, but I don't think it's useful.  It will rewrite <code>false</code> to <code>true</code> (when both instances are available).</p>",
        "id": 250770520,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629984093
    },
    {
        "content": "<p>My use case is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">casesI</span> <span class=\"n\">is_empty_or_nonempty</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"c1\">-- please rewrite all occurences of `nonempty X` to `false`</span>\n<span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"c1\">-- please rewrite all occurences of `is_empty X` to `false`</span>\n</code></pre></div>",
        "id": 250771373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629984463
    },
    {
        "content": "<p>The second one should already work.</p>",
        "id": 250771625,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629984562
    },
    {
        "content": "<p>BTW, I think that <code>inhabit</code> should do something similar to <code>nontriviality</code>, i.e. try to solve the <code>is_empty</code> case using a specialized simp set</p>",
        "id": 251392303,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1630419388
    },
    {
        "content": "<p>This set should include lemmas like <code>tendsto_of_is_empty</code></p>",
        "id": 251392412,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1630419431
    },
    {
        "content": "<p>Also, I would like to be able to write <code>inhabit X with x</code>.</p>",
        "id": 251395148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630420423
    }
]