[
    {
        "content": "<p>I have a type A and a partial function <code>parseA : string -&gt; except string A</code>, is there an easy way to get Lean to automatically call <code>parseA</code> parser when I have a literal <code>(\"foo\" : A)</code>? If <code>parseA \"foo\"</code> returns <code>except.ok r</code> then I'd like <code>r</code> to be used, and if it fails I'd like Lean to report the error.<br>\nI'm starting down the path of a coercion with a custom tactic, and realized somebody may have done this before.   It's for a library for s-expression parsing/generation.</p>",
        "id": 151491800,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1544573726
    },
    {
        "content": "<p>I ended up with writing a <code>coerce</code> tactic that allowed this:</p>\n<div class=\"codehilite\"><pre><span></span>meta def to_expr : sexpr → tactic expr := sorry\n\n-- This tries to prove a property by just running the evaluator.\nmeta def coerce (s:string) : tactic unit := do\n  match parse s with\n  | (except.ok r) := do\n    e ← to_expr r,\n    tactic.exact e\n  | (except.error msg) := do\n    tactic.fail msg\n  end\n\n-- This works\n#eval (by coerce &quot;abc&quot;)\n-- This reports a suitable error message when the tactic runs\n#eval (by coerce &quot;def))&quot;)\n</pre></div>\n\n\n<p>I couldn't see a way to introduce a coercion to hide the tactic call, but I suppose I could introduce notation to make the syntax more concise..</p>",
        "id": 151508277,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1544600411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> Right, there isn't much more you can do there without some kind of user-definable coercions. One alternative is to make it a custom parser with some prefix token, like we already have with <code>format! \"{x} {y}\"</code>. This _mostly_ works already in Lean 3.</p>",
        "id": 151510322,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1544603540
    },
    {
        "content": "<p>Thanks for the pointer.  Is there any chance that I'd be able to query the environment with that to allow quasi quoting (e.g. <code>sexpr! \"(_ Bitvec %%w)\"</code>) ?  I'd also be interested in synthesizing patterns, but it's not an immediate need.</p>",
        "id": 151513721,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1544607884
    },
    {
        "content": "<p>I just realized that should be doable given that expressions can reference variables.</p>",
        "id": 151513808,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1544607997
    },
    {
        "content": "<p>You can't access the parser's set of local variables directly, but you can call it recursively to parse arbitrary expressions like <code>format!</code> does. After that you could even analyze or transform the returned pre-term.</p>",
        "id": 151514468,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1544608898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span>  Actually, you can access the environment and even add variables inside the parser. If I remember correctly, it's a bit confusing because there is a <code>lean.parser.set_env</code> as well as <code>tactic.set_env</code>. If all you need is reading the environment, <code>tactic.get_env</code> should do.</p>",
        "id": 151532602,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1544628795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Thanks for the pointers.  I have to work on something else for a bit, but will get back to this soon.</p>",
        "id": 151541375,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1544636248
    }
]