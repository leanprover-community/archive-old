[
    {
        "content": "<p>How do people feel about adding</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- version of preorder.lift which doesn&#39;t use type class inference -/</span>\n<span class=\"n\">def</span> <span class=\"n\">lift&#39;</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">preorder</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>to mathlib? We use it twice in the perfectoid project. But we can of course also use <code>@preorder.lift _ _ </code>.<br>\n(And yes, we are quite sure we don't want to use type class instances for these preorders, because we are looking at something like the type of all preorders on a ring that satisfy blah...)</p>\n<p>If we add this to mathlib, I guess we also want <code>partial_order.lift'</code> etc, etc...</p>",
        "id": 165141035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557300070
    },
    {
        "content": "<p>I think you can just replace <code>preorder.lift</code> with this. It's usually used to create instances, so having a <code>by apply_instance</code> in there doesn't seem so bad</p>",
        "id": 165141334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557300528
    },
    {
        "content": "<p>I would put the <code>preorder</code> argument second though</p>",
        "id": 165141345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557300548
    },
    {
        "content": "<p>Probably breaks a lot of files... and I don't have VScode atm (-; But let me see what I can do...</p>",
        "id": 165141441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557300717
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/995\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/995\">#995</a> -- let's see what Travis says. This PR was produced using <code>grep</code> and <code>vim</code>, without running Lean...</p>",
        "id": 165142148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557301673
    },
    {
        "content": "<p>And... I failed. Travis doesn't like it</p>",
        "id": 165142468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557302049
    },
    {
        "content": "<p>Hurray, after several iterations <a href=\"https://github.com/leanprover-community/mathlib/issues/995\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/995\">#995</a> passes the checks on Travis. (And I never ran Lean locally <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>)</p>",
        "id": 165152912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557313545
    }
]