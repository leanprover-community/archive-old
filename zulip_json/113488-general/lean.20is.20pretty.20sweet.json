[
    {
        "content": "<p>i went back to doing some programming in fsharp since its the only mixed-paradigm language with any traction, and i really miss lean</p>",
        "id": 123678987,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520986697
    },
    {
        "content": "<p>doing everything in the equivalent of <code>meta def</code> land is no fun</p>",
        "id": 123679000,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520986751
    },
    {
        "content": "<p>What do you miss about trusted code?</p>",
        "id": 123679053,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520986815
    },
    {
        "content": "<p>i like when the compiler spots issues for me and not runtime exceptions</p>",
        "id": 123679057,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520986837
    },
    {
        "content": "<p>on the other hand being able to call into a bajillion .NET libraries is also pretty awesome... sigh</p>",
        "id": 123679110,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520986925
    },
    {
        "content": "<p>I'm wondering if the type vs untyped languages will gain one dimension:</p>\n<ul>\n<li>(Haskell / F# proponent to JavaScript programmers): why does your language not have types? Come over to the civilized world!</li>\n<li>(Lean user to Haskell / F# programmer): why can't you write proofs in your language? Come over to the civilized world!</li>\n</ul>",
        "id": 123679118,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520986944
    },
    {
        "content": "<p>Let's hope so. :-)</p>",
        "id": 123679125,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520986966
    },
    {
        "content": "<blockquote>\n<p>on the other hand being able to call into a bajillion .NET libraries is also pretty awesome... sigh</p>\n</blockquote>\n<p>True but doesn't it scare you how weak their contracts are? Does this function terminate? Does it perform io? Does it mutate state? Does it satisfy beautiful laws? Who knows! It's just a chunk of code that does stuff</p>",
        "id": 123679180,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520987047
    },
    {
        "content": "<p>the important thing is that it's a chunk of code i didn't write</p>",
        "id": 123679182,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520987063
    },
    {
        "content": "<p>i mean, i write all my quick and dirty scripts in python for that reason</p>",
        "id": 123679190,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520987084
    },
    {
        "content": "<p>For me it's more than just being able to write proofs. I think a better characterization is the ability to have really expressive types, like a type of prime numbers, or expressing pre/post-conditions of a function in the type</p>",
        "id": 123679394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520987457
    },
    {
        "content": "<p>That is pretty cool, true</p>",
        "id": 123679529,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520987711
    },
    {
        "content": "<p>I especially like that type classes come with laws</p>",
        "id": 123679531,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520987721
    },
    {
        "content": "<p>i hope the ffi story is good in lean 4, then you could use lean for more than just standalone projects</p>",
        "id": 123679538,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520987760
    },
    {
        "content": "<p>and of course, being able to substantively make use of a nontrivial precondition, like if you have a list and a proof it is <code>[]</code> then you don't even have to supply the cons case</p>",
        "id": 123679673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520987940
    },
    {
        "content": "<p>and there are no apologetics or assertions or unreachables</p>",
        "id": 123679730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520988003
    },
    {
        "content": "<p>too bad lean can't bootstrap lean</p>",
        "id": 123679745,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520988054
    },
    {
        "content": "<p>What do you mean by no assertions?</p>",
        "id": 123679746,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520988057
    },
    {
        "content": "<p>Do you mean that the assertions are not checked dynamically?</p>",
        "id": 123679753,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520988081
    },
    {
        "content": "<p>In any other programming language, if I have a division function with a precondition, I still have to handle the case when the precondition is violated, and maybe throw an assertion violation or unreachable exception. The compiler can't prove that you are following your precondition so it has to be done</p>",
        "id": 123679813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520988179
    },
    {
        "content": "<p>but in lean I can just omit the case and it can prove that the branch is impossible, so it's just not a code path</p>",
        "id": 123679822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520988219
    },
    {
        "content": "<p>Darn! You're right! I really don't miss that! Especially the Java flavor. Luckily, I haven't touched Java in years</p>",
        "id": 123679883,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520988323
    },
    {
        "content": "<p>if you're on the JVM, scala isn't bad</p>",
        "id": 123680025,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520988539
    },
    {
        "content": "<p>haven't had a chance to use it very much though</p>",
        "id": 123680034,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520988552
    },
    {
        "content": "<p>but i know people who speak highly of it</p>",
        "id": 123680099,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520988643
    },
    {
        "content": "<p>I've written a lot of Scala, and in particular a lot of maths in Scala. I'm hoping to never go back, however. :-)</p>",
        "id": 123680227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520988895
    },
    {
        "content": "<p>(It is great, but Lean is greater still.)</p>",
        "id": 123684915,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520998577
    },
    {
        "content": "<blockquote>\n<p>I've written a lot of Scala, and in particular a lot of maths in Scala. I'm hoping to never go back, however. :-)</p>\n</blockquote>\n<p>I was trying to do something like this in scala, <a href=\"https://scalafiddle.io/sf/enaGqD4/0\" target=\"_blank\" title=\"https://scalafiddle.io/sf/enaGqD4/0\">https://scalafiddle.io/sf/enaGqD4/0</a> I hated myself why I thought it might work, and original version, without defining natural induction is this <a href=\"https://scalafiddle.io/sf/A56KTgD/1\" target=\"_blank\" title=\"https://scalafiddle.io/sf/A56KTgD/1\">https://scalafiddle.io/sf/A56KTgD/1</a> (I made lot of changes its not compiling, I dont remember now what I did and its completely incomprehensible now)</p>",
        "id": 123695407,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521020369
    },
    {
        "content": "<p>This reminds me of those people that wrote a BF interpreter in C++ template language</p>",
        "id": 123695549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521020644
    },
    {
        "content": "<p>Yea, it felt more like programming in BF itself. But I understand a lot about types now after the ordeal.</p>",
        "id": 123695640,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521020860
    }
]