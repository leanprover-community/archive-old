[
    {
        "content": "<p>Suppose I have some predicate P and tactic t1 and t2 such that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">t₁</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">none</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">t₁</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">t₁</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">t₂</span>\n</code></pre></div>\n<p>I would like to condense the proof so that it looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span>\n<span class=\"bp\">|</span> <span class=\"n\">one_is_none</span> <span class=\"n\">case</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">t₁</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">t₂</span>\n</code></pre></div>",
        "id": 231087838,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1616186914
    },
    {
        "content": "<p>Is this possible/recommended?</p>",
        "id": 231087871,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1616186931
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">t₁</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">t₂</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231088123,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616187063
    },
    {
        "content": "<p>This is nice thank you</p>",
        "id": 231089652,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1616187784
    },
    {
        "content": "<p>for long t1 and t2 I am finding this makes the proof less readable</p>",
        "id": 231089708,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1616187815
    },
    {
        "content": "<p>not sure what to do about that</p>",
        "id": 231089716,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1616187821
    },
    {
        "content": "<p>For more targeted calls I would do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">o₁</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">o₂</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">o₃</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">t₂</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">t₁</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231096620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616191804
    },
    {
        "content": "<p>Could also use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#case\">tactic#case</a> to pull out just the <code>some some some</code> goal without the <code>swap</code>s</p>",
        "id": 231096746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616191920
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"n\">o₃</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span> <span class=\"n\">swap</span> <span class=\"o\">},</span>\n  <span class=\"n\">t1</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">t2</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231098123,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616192823
    },
    {
        "content": "<p>For your \"variadic\" needs</p>",
        "id": 231098161,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616192853
    }
]