[
    {
        "content": "<p>A proposal: all attributes on declarations which generate auxiliary declarations should have a <code>?</code> mode, which behaves just as normal but prints a trace message, either</p>\n<ol>\n<li>listing the full names of the new declarations</li>\n<li>printing the full types of the new declarations</li>\n</ol>",
        "id": 232349498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617059314
    },
    {
        "content": "<p>For me at least, it is a common problem deciphering what exactly has been generated. <code>@[simps]</code> has <code>set_option trace.simps.verbose</code> and <code>set_option trace.simps.debug</code>, but I would like a common interface, ideally extremely quick to add or remove in place: hence the proposal for <code>?</code>.</p>",
        "id": 232349715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617059460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/simps.3F.2C.20reassoc.3F.2C.20mk_iff.3F/near/232349498\">said</a>:</p>\n<blockquote>\n<p>A proposal: all attributes on declarations which generate auxiliary declarations should have a <code>?</code> mode, which behaves just as normal but prints a trace message, either</p>\n<ol>\n<li>listing the full names of the new declarations</li>\n<li>printing the full types of the new declarations</li>\n</ol>\n</blockquote>\n<p>I think both of those!</p>",
        "id": 232360330,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617067726
    },
    {
        "content": "<p>By the way my temporary work-around for this problem is to use <code>#print prefix</code> afterwards, but I agree a <code>?</code> would be better</p>",
        "id": 232360358,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617067777
    },
    {
        "content": "<p>I would like to see <code>instance</code>optionally report the name of the def it made too :-) I can never remember the rules and if I'm in mathlib I might not know if I'm in a namespace etc</p>",
        "id": 232376269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617082420
    },
    {
        "content": "<p>Yeah. I wonder if we should just outlaw unnamed instances.</p>",
        "id": 232376445,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617082564
    },
    {
        "content": "<p>The problem with <code>instance?</code> is that it causes 85% of mathlib to recompile, if you use it on an instance low in the hierarchy</p>",
        "id": 232377059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617083250
    },
    {
        "content": "<p>As a user who is just becoming aware of these ghosts produced by Lean, I am finding this thread very useful!  Besides having a question mark, is there a way to simply <em>know</em> that Lean is producing more stuff than what I am actually typing?</p>\n<p>I know that <code>print prefix</code> will sometimes give you more information, but I do not know when it would be useful.  On a separate note, I did not know that \"unnamed\" instances actually were \"named by Lean\"!  Is there a place where I can find a (not necessarily exhaustive) list of situations where I can assume that Lean is producing more in the background?</p>",
        "id": 232377071,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617083270
    },
    {
        "content": "<p>I agree that it would be good to have a way to figure out instance names easily</p>",
        "id": 232377072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617083273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/simps.3F.2C.20reassoc.3F.2C.20mk_iff.3F/near/232377059\">said</a>:</p>\n<blockquote>\n<p>The problem with <code>instance?</code> is that it causes 85% of mathlib to recompile, if you use it on an instance low in the hierarchy</p>\n</blockquote>\n<p>I often just restart the server if I temporarily touch a file low down in the hierarchy.</p>",
        "id": 232378926,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617085074
    },
    {
        "content": "<p>Right -- my use case is that I want to see the name generated by an instance command somewhere in mathlib, and then promptly return things to normal</p>",
        "id": 232381673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617087155
    },
    {
        "content": "<p>still, if VScode could show the name when you hover over <code>instance</code> that would be more ergonomical than appending <code>?</code> and restarting lean afterwards.</p>",
        "id": 232381884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617087354
    },
    {
        "content": "<p>That would be even better!</p>",
        "id": 232392325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617093832
    },
    {
        "content": "<p>Would we turn off the noisy linter for the <code>instance</code> decls then?<br>\nTo find instances, I usually make a scratch file like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 232392953,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617094183
    },
    {
        "content": "<p>The problem with that approach is that it sometimes says \"it was field.to_ring\"</p>",
        "id": 232393923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617094684
    },
    {
        "content": "<p>I used to do it like that but now I tend to set things up in a tactic block so I can use the infoview to see the actual concrete instance which made it happen rather than just the projections which were applied afterwards.</p>",
        "id": 232394080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617094779
    },
    {
        "content": "<p>How about a more low level option? <code>set_option trace.new_definitions true</code> and then any time a declaration is added to the environment (via lean internals, user tactics, or directly), the full name of the definition is also printed</p>",
        "id": 232447830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617119030
    },
    {
        "content": "<p>I implemented this for <code>simps</code> specifically in <a href=\"https://github.com/leanprover-community/mathlib/issues/6995\">#6995</a></p>",
        "id": 232828895,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1617313160
    },
    {
        "content": "<p>I am implementing this for <code>to_additive</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/7888\">#7888</a></p>",
        "id": 242308615,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623395686
    }
]