[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I'm interested in where you're taking the new <code>countable</code> typeclass and the <code>finite</code> typeclass. I know that there was very recently a huge refactor with <code>set.finite</code>, but I wonder if it would be a good idea to redefine <code>set.finite s</code> as <code>finite ↥s</code> and <code>set.countable s</code> as <code>countable ↥s</code>. Would most likely save us from a lot of API duplication.</p>",
        "id": 289810215,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657949742
    },
    {
        "content": "<p>And regarding this same topic: your new files on countable types seem to cause trouble when imported at the same time as the file on countable sets. There's name clashes like <code>countable_iff_exists_surjective</code> and <code>set.countable_iff_exists_surjective</code>.</p>",
        "id": 289812289,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657953160
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 289812417,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657953404
    },
    {
        "content": "<p>Just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/14515\">#14515</a> to adress this</p>",
        "id": 289813025,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657954402
    },
    {
        "content": "<p>Prepare to be mindblown: We don't say <code>(s : set α).nonempty</code> for <code>s : finset α</code>. Instead, we say <code>s.nonempty</code>.</p>",
        "id": 289819112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657963777
    },
    {
        "content": "<p>I have more not-yet-PRd stuff about <code>countable</code> and <code>finite</code>. I'm going to open some PRs later today.</p>",
        "id": 289820902,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657966640
    },
    {
        "content": "<p>Oh, then I hope my attempts at fleshing out the API don't clash with yours</p>",
        "id": 289835322,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657988171
    },
    {
        "content": "<p>I'll have a look at your pr once I check in to the hotel (in about 4 hours)</p>",
        "id": 289835569,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657988578
    },
    {
        "content": "<p>The pr you mentioned above is not about countable. What's the correct number?</p>",
        "id": 289838189,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657992381
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15415\">#15415</a></p>",
        "id": 289838287,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1657992506
    },
    {
        "content": "<p>could be worth adding a proof of <code>countable α ↔ # α ≤ ℵ₀</code> somewhere... though it's also pretty trivial to prove it from <code>countable_iff_nonempty_embedding</code></p>",
        "id": 289861582,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658028734
    },
    {
        "content": "<p>Please don't add more facts about <code>countable</code> yet. I have some unpushed stuff that I hope to PR tomorrow or the day after tomorrow.</p>",
        "id": 290050348,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658201787
    },
    {
        "content": "<p>Are you planning on refactoring <code>set.countable</code> soon?</p>",
        "id": 290172652,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658271871
    },
    {
        "content": "<p>Yes.</p>",
        "id": 290172788,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658271987
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/tree/YK-countable-set\">branch#YK-countable-set</a></p>",
        "id": 290172859,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658272051
    },
    {
        "content": "<p>What should be the instance priorities for:</p>\n<ul>\n<li><code>encodable X -&gt; countable X</code>;</li>\n<li><code>subtype.countable</code>;</li>\n<li><code>quotient.countable</code>?</li>\n</ul>",
        "id": 290179368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658278061
    },
    {
        "content": "<p>We also have instances with default (1000) priority for <code>prod.countable</code> etc.</p>",
        "id": 290179423,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658278094
    },
    {
        "content": "<p>Why does this matter? Isn't <code>countable</code> a <code>Prop</code>?</p>",
        "id": 290181862,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658278491
    },
    {
        "content": "<p>Is there any reason to move away from the general rule? namely:</p>\n<ul>\n<li>100</li>\n<li>1000</li>\n<li>1000</li>\n</ul>",
        "id": 290181941,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658278573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> It affects typeclass search speed.</p>",
        "id": 290182226,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658278886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I think that we should use something smaller than <code>1000</code> for <code>subtype</code> and <code>quotient</code> instances so that instances for specific subtypes and quotients get higher priority.</p>",
        "id": 290182323,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658278951
    },
    {
        "content": "<p>Will there be that many instances of <code>countable</code>?</p>",
        "id": 290182379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658279005
    },
    {
        "content": "<p>I don't know.</p>",
        "id": 290182383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658279014
    },
    {
        "content": "<p>I doubt this is all that important.</p>",
        "id": 290182395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658279030
    },
    {
        "content": "<p>In case of <code>finite</code> (IMHO, we should have the same priorities), we'll definitely have instances for some specific sets.</p>",
        "id": 290182447,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658279056
    },
    {
        "content": "<p>E.g., the index set of <code>some</code> basis.</p>",
        "id": 290182460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658279080
    },
    {
        "content": "<p>(in a finite dimensional space)</p>",
        "id": 290182466,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658279088
    },
    {
        "content": "<p>Also, aren't specific subtypes and quotients often being declared as type synonyms? If so, <code>subtype.countable</code> and <code>quotient.countable</code> won't even apply to them.</p>",
        "id": 290182509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658279143
    },
    {
        "content": "<p>Some of them are declared as <code>set</code>s.</p>",
        "id": 290182567,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658279187
    },
    {
        "content": "<p>I don't think we even have that many concrete subtypes or quotients</p>",
        "id": 290183977,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658279557
    },
    {
        "content": "<p>Much less countable ones</p>",
        "id": 290183982,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658279560
    },
    {
        "content": "<p>I can think of <code>pnat</code>and <code>fin</code></p>",
        "id": 290184063,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658279658
    },
    {
        "content": "<p><code>pnat</code> and <code>fin</code> aren't subtypes from the typeclass search point of view.</p>",
        "id": 290184133,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658279775
    },
    {
        "content": "<p>So that's zero examples</p>",
        "id": 290185118,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658281136
    },
    {
        "content": "<p>For finite, we have instances for set operations (in particular, an instance for each set of the form <code>{a, b, c, d}</code>) and instances for some sets like \"the index set of an unspecified finite basis in a finite dimensional space\".</p>",
        "id": 290185709,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658281889
    },
    {
        "content": "<p>(probably, the latter is a <code>noncomputable ... : fintype ...</code> now)</p>",
        "id": 290185725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658281914
    },
    {
        "content": "<p>These would all be <code>finite</code> as well, right? How are those priorities set up?</p>",
        "id": 290185841,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658282053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/countable.20types/near/290183977\">said</a>:</p>\n<blockquote>\n<p>I don't think we even have that many concrete subtypes or quotients</p>\n</blockquote>\n<p>Subtypes do appear. I invite you to search for <code>//</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html\">https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html</a></p>",
        "id": 290185931,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658282171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/countable.20types/near/290185841\">said</a>:</p>\n<blockquote>\n<p>These would all be <code>finite</code> as well, right? How are those priorities set up?</p>\n</blockquote>\n<p>So far we have a priority 900 instance for <code>fintype -&gt; finite</code> since <code>finite</code> instances should be faster to synthesize in general. <a href=\"https://github.com/leanprover-community/mathlib/blob/2220b0cbab795e73674b8191170b0cc68c6b54a8/src/data/finite/basic.lean#L50\">https://github.com/leanprover-community/mathlib/blob/2220b0cbab795e73674b8191170b0cc68c6b54a8/src/data/finite/basic.lean#L50</a></p>",
        "id": 290186023,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658282292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/countable.20types/near/290182323\">said</a>:</p>\n<blockquote>\n<p>I think that we should use something smaller than <code>1000</code> for <code>subtype</code> and <code>quotient</code> instances so that instances for specific subtypes and quotients get higher priority.</p>\n</blockquote>\n<p>Won't specific subtypes and quotients have instances that are defined after <code>subtype.countable</code> and <code>quotient.countable</code>? (As in, they'll be in modules that import the instances from the module where these are defined?) Can we rely on typeclass inference trying later instances of the same priority first?</p>",
        "id": 290186125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658282441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/countable.20types/near/290185725\">said</a>:</p>\n<blockquote>\n<p>(probably, the latter is a <code>noncomputable ... : fintype ...</code> now)</p>\n</blockquote>\n<p>(Just wanted to mention that what I'd like to see is that all these <code>noncomputable</code> instances become <code>finite</code> instances. I haven't seriously dug in to see how feasible this is -- have you had a chance to?)</p>",
        "id": 290186238,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658282540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/countable.20types/near/290185931\">said</a>:</p>\n<blockquote>\n<p>Subtypes do appear. I invite you to search for <code>//</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html\">https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html</a></p>\n</blockquote>\n<p>I meant concrete as in specific named types that were defined in terms of a subtype. But judging from Yury's later comments, I think I might have misunderstood what sorts of types we were considering here.</p>",
        "id": 290186246,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658282557
    },
    {
        "content": "<p>Yes, we're specifically interested in unnamed subtypes here?</p>",
        "id": 290186405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658282779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Sometimes these <code>noncomputable ... fintype</code> instances are used for <code>fintype.sum</code>.</p>",
        "id": 290186408,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658282784
    },
    {
        "content": "<p>We're interested in definitions <code>def lalala : set X := _</code></p>",
        "id": 290186425,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658282822
    },
    {
        "content": "<p>With instances on <code>(lalala : Type*)</code></p>",
        "id": 290186434,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658282832
    },
    {
        "content": "<p>Yes, we already override Prop versions by noncomputable Type versions when there's no hope of getting a computable one. This mostly happens for <code>nonempty</code> and <code>inhabited</code>.</p>",
        "id": 290186487,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658282919
    },
    {
        "content": "<p>So, no, we should not get rid of the noncomputable fintype instances.</p>",
        "id": 290186511,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658282954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/countable.20types/near/290186408\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> Sometimes these <code>noncomputable ... fintype</code> instances are used for <code>fintype.sum</code>.</p>\n</blockquote>\n<p>Then maybe we should have a <code>finite.sum</code> to match?</p>",
        "id": 290186578,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658283033
    },
    {
        "content": "<p>I'd like to see a way to get <code>fintype</code> instances from <code>finite</code> instances in a classical context. I believe this should be possible in Lean 4 due to its improved handling of typeclass search loops, but I'm not completely sure.</p>",
        "id": 290186657,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658283125
    },
    {
        "content": "<p>This already exists: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_finite\">docs#fintype.of_finite</a></p>",
        "id": 290186682,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658283170
    },
    {
        "content": "<p>I'm aware of that function -- I mean automatically when you do <code>classical</code> or <code>open_locale classical</code>.</p>",
        "id": 290186701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658283196
    },
    {
        "content": "<p>I'm not sure what you find harmful about having noncomputable instances when no computable one can exist.</p>",
        "id": 290186708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658283225
    },
    {
        "content": "<p>If you're in a <code>noncomputable theory</code>, then that's fine I think, but having any noncomputable <code>fintype</code> instances means you can't rely on it for computability. I think of it as being like that <code>computable</code> class I proposed before but specialized for <code>finite</code>.</p>",
        "id": 290186886,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658283482
    },
    {
        "content": "<p><code>inhabited</code> and <code>nonempty</code> share a similar relation (by the way, is there a reason we use an <code>inhabited</code> linter rather than a <code>nonempty</code> linter?)</p>",
        "id": 290186958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658283597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/countable.20types/near/290186578\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/countable.20types/near/290186408\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> Sometimes these <code>noncomputable ... fintype</code> instances are used for <code>fintype.sum</code>.</p>\n</blockquote>\n<p>Then maybe we should have a <code>finite.sum</code> to match?</p>\n</blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsum\">docs#finsum</a></p>",
        "id": 290187000,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658283614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/countable.20types/near/290186958\">said</a>:</p>\n<blockquote>\n<p><code>inhabited</code> and <code>nonempty</code> share a similar relation (by the way, is there a reason we use an <code>inhabited</code> linter rather than a <code>nonempty</code> linter?)</p>\n</blockquote>\n<p>Notice that some types are inhabited by 37, for example: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.splitting_field.inhabited\">docs#polynomial.splitting_field.inhabited</a></p>",
        "id": 290187654,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658284460
    },
    {
        "content": "<p>(I guess let's see what happens with a <code>has_nonempty_instance</code> linter: <a href=\"https://github.com/leanprover-community/mathlib/pull/15542\">#15542</a>)</p>",
        "id": 290187923,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658284869
    },
    {
        "content": "<p>just curious, what's the significance of 37? just a running joke?</p>",
        "id": 290189271,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658286778
    },
    {
        "content": "<p>It's apparently the most random integer from 1 to 100.</p>",
        "id": 290189527,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658287178
    },
    {
        "content": "<p>ah ha... alright then</p>",
        "id": 290189593,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658287277
    },
    {
        "content": "<p>Huh, there's a website full of 37 factoids: <a href=\"http://magliery.com/37/index.html\">http://magliery.com/37/index.html</a></p>",
        "id": 290189649,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658287334
    },
    {
        "content": "<p>and of course there's <a href=\"https://en.wikipedia.org/wiki/37_(number)\">https://en.wikipedia.org/wiki/37_(number)</a></p>",
        "id": 290190204,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658288184
    }
]