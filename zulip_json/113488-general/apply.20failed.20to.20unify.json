[
    {
        "content": "<p>Hello, it is not clear to me why this would be the case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">bool_big_step_to</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">leq</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">bool_big_step_to</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">leq</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>does anyone have any suggestions for figuring out why?</p>",
        "id": 272436286,
        "sender_full_name": "David Richey",
        "timestamp": 1645207679
    },
    {
        "content": "<p>Is <code>bool_big_step_to</code> a function? If that's the case, then Lean correctly gives up, since it might not be injective, so <code>s</code> has no reason to be equal to <code>?m_1</code>.</p>",
        "id": 272436545,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1645207802
    },
    {
        "content": "<p>sorry, I should have posted that as well. It is an inductive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">bool_big_step_to</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→.</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ibool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">bbs_true</span> <span class=\"o\">:</span> <span class=\"n\">bool_big_step_to</span> <span class=\"n\">itrue</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">bbs_false</span> <span class=\"o\">:</span> <span class=\"n\">bool_big_step_to</span> <span class=\"n\">ifalse</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">bbs_leq</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">n1</span> <span class=\"n\">a2</span> <span class=\"n\">n2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">arith_big_step_to</span> <span class=\"n\">s</span> <span class=\"n\">a1</span> <span class=\"n\">n1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">arith_big_step_to</span> <span class=\"n\">s</span> <span class=\"n\">a2</span> <span class=\"n\">n2</span>\n                          <span class=\"bp\">-&gt;</span> <span class=\"n\">bool_big_step_to</span> <span class=\"o\">(</span><span class=\"n\">leq</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(where <code>ibool</code> is also an inductive defined in the obvious way)</p>",
        "id": 272436861,
        "sender_full_name": "David Richey",
        "timestamp": 1645207936
    },
    {
        "content": "<p>does that change things?</p>",
        "id": 272437028,
        "sender_full_name": "David Richey",
        "timestamp": 1645208025
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> rather than just posting code fragments? That way we can all see the tactic failing on our own computers.</p>",
        "id": 272438764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645208878
    },
    {
        "content": "<p>yes, sorry about that. I was originally really just looking for debugging suggestions so that I can learn how to debug such issues on my own in the future. But maybe it is a more complicated issue than I thought. Here's a whole example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">myarith</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">myarith</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">mybool</span>\n<span class=\"bp\">|</span> <span class=\"n\">leq</span> <span class=\"o\">:</span> <span class=\"n\">myarith</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">myarith</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mybool</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">myarith_evals_to</span> <span class=\"o\">:</span> <span class=\"n\">myarith</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">int</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">arith_eval_const</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">myarith_evals_to</span> <span class=\"o\">(</span><span class=\"n\">myarith.const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">mybool_evals_to</span> <span class=\"o\">:</span> <span class=\"n\">mybool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">bool_eval_leq</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">n1</span> <span class=\"n\">a2</span> <span class=\"n\">n2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">myarith_evals_to</span> <span class=\"n\">a1</span> <span class=\"n\">n1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">myarith_evals_to</span> <span class=\"n\">a2</span> <span class=\"n\">n2</span>\n                                <span class=\"bp\">-&gt;</span> <span class=\"n\">mybool_evals_to</span> <span class=\"o\">(</span><span class=\"n\">mybool.leq</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">mybool_evals_to</span> <span class=\"o\">(</span><span class=\"n\">mybool.leq</span> <span class=\"o\">(</span><span class=\"n\">myarith.const</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myarith.const</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mybool_evals_to.bool_eval_leq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272440455,
        "sender_full_name": "David Richey",
        "timestamp": 1645209638
    },
    {
        "content": "<p>(in case anyone has already copied it, I had a typo which I have fixed now ^)</p>",
        "id": 272440943,
        "sender_full_name": "David Richey",
        "timestamp": 1645209875
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">mybool_evals_to</span> <span class=\"o\">(</span><span class=\"n\">mybool.leq</span> <span class=\"o\">(</span><span class=\"n\">myarith.const</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myarith.const</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mybool_evals_to.bool_eval_leq</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>By default Lean's numerals default to naturals; you have to explicitly tell Lean that these are integers.</p>",
        "id": 272442890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645210865
    },
    {
        "content": "<p>(note also that your original question was impossible to answer because the problem was in a part of the code which we couldn't see; mwe's are always the way to go around here)</p>",
        "id": 272443040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645210925
    },
    {
        "content": "<p>ah, got it. That's quite interesting that it can't infer they must be ints. Thank you very much I will keep that in mind!</p>",
        "id": 272443534,
        "sender_full_name": "David Richey",
        "timestamp": 1645211177
    },
    {
        "content": "<p><code>1  &lt;= 2</code> is in fact a <code>Prop</code> in Lean, you're coercing it to a boolean, and the coercion doesn't start thinking about types of things, it just notices you want a bool, you gave it a Prop involving two terms of a type, and who knows what type you meant, so let's go with nat.</p>",
        "id": 272443696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645211275
    }
]