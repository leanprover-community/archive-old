[
    {
        "content": "<p>I encountered a messy error message and the failure of the expected simplification when applying <code>ring1</code> on an example which simplifies to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">θ</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring1</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>is_def_eq tactic failed, the following expressions are not definitionally equal (remark: is_def_eq tactic does modify the metavariable assignment)\n  tactic.ring.horner 1 θ 1 0 : S\nand\n  0 : S\n</code></pre></div>",
        "id": 269937167,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643554662
    },
    {
        "content": "<p>Is it a bug in <code>ring1</code>?</p>",
        "id": 269937172,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643554672
    },
    {
        "content": "<p>That's the expected error when you try to prove a ring equality that isn't true</p>",
        "id": 269954279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643573769
    },
    {
        "content": "<p>Maybe we could catch this error and turn it into a message suggesting the equality may be false?</p>",
        "id": 269954562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643573914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/ring.20bug.3F/near/269954279\">said</a>:</p>\n<blockquote>\n<p>That's the expected error when you try to prove a ring equality that isn't true</p>\n</blockquote>\n<p>But this is <code>ring1</code>, it ought to just normalize the goal to have 0 on the RHS.</p>",
        "id": 269954609,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643573982
    },
    {
        "content": "<p>I think this got lost in the shuffle. <code>ring</code> used to clean up the goal by writing the two sides in sum of products form, but then people started using it deliberately for that purpose so the code got moved to <code>ring_nf</code></p>",
        "id": 269954756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643574020
    },
    {
        "content": "<p><code>ring1</code> is a oneshot tactic: the goal is a ring equality and it is proved or fails</p>",
        "id": 269954796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643574047
    },
    {
        "content": "<p><code>ring</code> will do the normalization stuff if it fails</p>",
        "id": 269954824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643574066
    },
    {
        "content": "<p>you should only use <code>ring1</code> if you don't want the overhead of the normalization stuff when you know it's true</p>",
        "id": 269954838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643574091
    },
    {
        "content": "<p>Oh, sorry, I did mean <code>ring_nf</code>.  Isn't <code>abel1</code> the normalizing version of <code>abel</code>?  I think that's why I forgot the syntax.</p>",
        "id": 269954891,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643574109
    },
    {
        "content": "<p>from a cursory glance (I don't think I wrote <code>abel1</code>), it has the same relation to <code>abel</code> as <code>ring1</code> to <code>ring</code></p>",
        "id": 269955035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643574190
    },
    {
        "content": "<p>I don't see a <code>abel_nf</code> though</p>",
        "id": 269955046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643574209
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/abel.lean#L2-L4\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/abel.lean#L2-L4</a></p>",
        "id": 269955165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643574332
    },
    {
        "content": "<p>I meant <code>abel1</code> specifically, but I've just git blamed myself, so...</p>",
        "id": 269955371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643574535
    },
    {
        "content": "<p>I know, I checked before posting</p>",
        "id": 269955384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643574552
    }
]