[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> were you talking about a similar thing recently? I have <code>hpq : P -&gt; Q</code> and I have <code>h : P</code> and I just want to write <code>apply hpq to h</code>. These are important things for maths beginners who often reason forwards. Currently I have to write <code>replace h with hpq h</code> which is somehow less ideal.</p>",
        "id": 171844940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564233251
    },
    {
        "content": "<p><code>specialize hpq h</code></p>",
        "id": 171844945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564233285
    },
    {
        "content": "<p>I am fixing all of this stuff in a modded version of Lean tactic mode.</p>",
        "id": 171844946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564233288
    },
    {
        "content": "<p><code>apply hpq to h</code> still looks easier to understand</p>",
        "id": 171844961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564233303
    },
    {
        "content": "<p>can you write me an <code>apply'</code> tactic which does this all automatically?</p>",
        "id": 171844970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564233344
    },
    {
        "content": "<p>Or else I might have to learn about parsers</p>",
        "id": 171844972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564233356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">apply&#39;</span> <span class=\"o\">(</span><span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">&quot;at&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e1</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">source</span><span class=\"o\">,</span>\n   <span class=\"n\">e2</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">replace</span> <span class=\"n\">target</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">e1</span> <span class=\"err\">%%</span><span class=\"n\">e2</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply&#39;</span> <span class=\"n\">hpq</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">hpq</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">guard_hyp</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 171845269,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564233956
    },
    {
        "content": "<p><code>specialize</code> sounds good when the assumption is a forall, but not so much when it's an implication. But in any case I think you can't completely avoid the idea that <code>hpq h</code> is a thing</p>",
        "id": 171845315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564234009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> thanks! The coolest thing would be if <code>apply'</code> did everything <code>apply</code> did too.</p>",
        "id": 171846272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564235692
    },
    {
        "content": "<p><code>apply</code> works backwards right</p>",
        "id": 171846290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564235756
    },
    {
        "content": "<p><code>apply (hpq : p -&gt; q)</code> turns the goal from <code>q</code> to <code>p</code></p>",
        "id": 171846331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564235776
    },
    {
        "content": "<p>so I'm not sure what you mean by \"everything <code>apply</code> did\"</p>",
        "id": 171846332,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564235786
    },
    {
        "content": "<p>I mean <code>apply' h</code> just does the same as <code>apply h</code> but <code>apply' h at h2</code> does the new thing. Sort of an extension to the tactic, not a new one.</p>",
        "id": 171846532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564236140
    },
    {
        "content": "<p>In a parallel universe, <code>apply</code> does that already.</p>",
        "id": 171846544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564236197
    },
    {
        "content": "<p>Like this parallel universe version of symmetry: <a href=\"https://github.com/leanprover-community/mathlib/blob/fa1dcb65c64c23d3d9eef1d8b0f18fc8e936db17/src/tactic/interactive.lean#L641\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/fa1dcb65c64c23d3d9eef1d8b0f18fc8e936db17/src/tactic/interactive.lean#L641\">https://github.com/leanprover-community/mathlib/blob/fa1dcb65c64c23d3d9eef1d8b0f18fc8e936db17/src/tactic/interactive.lean#L641</a></p>",
        "id": 171848331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564239296
    },
    {
        "content": "<p>I think the point is that <code>apply</code> works backwards <em>on the goal</em>, and dually it makes perfect sense to let <code>apply</code> work forwards on <em>hypotheses</em>.</p>",
        "id": 171848392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564239426
    },
    {
        "content": "<p>:( <code>apply</code> is bad style for beginners anyway, because they will want to write long chains of <code>apply x, apply y, apply z at h</code> instead of using <code>have</code></p>",
        "id": 171848718,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564240055
    },
    {
        "content": "<p>what is wrong with that, from a purely \"I'm just getting to learn Lean\" point of view?</p>",
        "id": 171848829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564240245
    },
    {
        "content": "<p>I'm interested in teaching mathematicians not to be scared of the software, I'm less worried about style.</p>",
        "id": 171848843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564240274
    },
    {
        "content": "<p>I find it really quite interesting that there is such a big diffence in the way that mathematicians and CSists approach Lean when they are beginning.</p>",
        "id": 171849008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240569
    },
    {
        "content": "<p>it's more like all of original Isabelle was huge sequences of <code>apply</code>, and the they invented Isar and found out structured proofs were easier to maintain</p>",
        "id": 171849016,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564240633
    },
    {
        "content": "<p>But that doesn't mean that it's also easier for beginners</p>",
        "id": 171849021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240654
    },
    {
        "content": "<p>CS students also enjoy the straightforward way ;p</p>",
        "id": 171849022,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564240659
    },
    {
        "content": "<p>Right, and mathematicians seem to think that the straightforward way is: <code>apply this_lemma, apply that_lemma, assumption</code></p>",
        "id": 171849067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240697
    },
    {
        "content": "<p>Especially if you can also say <code>apply lemma_foo to hyp_bar</code></p>",
        "id": 171849071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240727
    },
    {
        "content": "<p>That is not how a paper proof goes though...</p>",
        "id": 171849074,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564240736
    },
    {
        "content": "<p>A paper proof would <code>have</code> a bunch of lemmas, then knock out the goal by stringing them together</p>",
        "id": 171849084,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564240782
    },
    {
        "content": "<p>I've had lots of mathematicians get really confused by the fact that hypotheses have <em>names</em>. And the fact that you have to cook up names for your have statements, or use some unnatural <code>this</code>.</p>",
        "id": 171849089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240798
    },
    {
        "content": "<p>you could use french quotes if you wanted to be verbose, but I understand it is tedious</p>",
        "id": 171849134,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564240825
    },
    {
        "content": "<p>Maybe <code>\\f&lt; claim \\f&gt;</code> is what mathematicians would find most natural.</p>",
        "id": 171849136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240828
    },
    {
        "content": "<p>Anyway, it's not the experience that we see on this chat.</p>",
        "id": 171849147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240872
    },
    {
        "content": "<p>We see CS beginners be really happy with term mode proving. (Tactics are hard and crazy and for complicated proofs.)</p>",
        "id": 171849153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240895
    },
    {
        "content": "<p>hypotheses don't need descriptive names, they can be called boring things like <code>H1_1</code></p>",
        "id": 171849154,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564240907
    },
    {
        "content": "<p>OTOH math beginners are completely confused, and get stuck with the term mode tutorials.</p>",
        "id": 171849155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240912
    },
    {
        "content": "<p>We show them tactic mode and they are extremely happy</p>",
        "id": 171849197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240934
    },
    {
        "content": "<p>Because it feels to them that we just turned Lean into some FPS</p>",
        "id": 171849200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564240950
    },
    {
        "content": "<p>I think that is obvious from how they are used, though. In CS, the definition is almost always in Type, and represents a computer algorithm. So you don't define such a thing using tactics because you want to control exactly how it is implemented</p>",
        "id": 171849215,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564240990
    },
    {
        "content": "<p>The whole idea you would want to have some unknown tactic define your definition is foreign</p>",
        "id": 171849258,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564241045
    },
    {
        "content": "<p>You don't know what it does, and you can't inspect it easily without printing it</p>",
        "id": 171849262,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564241060
    },
    {
        "content": "<p>Right! I'm still waiting for <code>tidy'</code> that can be used to fill in data that is <code>obvious'</code>.</p>",
        "id": 171849267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564241078
    },
    {
        "content": "<p>If type class inference can figure out that my goal is <code>unique</code>, maybe I really don't care what <code>tidy'</code> spits out. (Apart from the usual concerns about speed optimizations etc...)</p>",
        "id": 171849290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564241142
    },
    {
        "content": "<p>Anyway, if the instructor is happy with <code>apply</code>, I guess that's the thing that matters, hah.  My thinking is, we want our proofs to look like slightly formal versions of paper proofs, so we avoid long chains of <code>apply</code>. If these long apply chains can be automated, we use a tactic to clear the goal, otherwise there's mathematical content and should be structured for readability.</p>",
        "id": 171849486,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564241431
    },
    {
        "content": "<p>I have no interest in readability at this point. All I want to do is to show mathematicians that proofs can be checked on a computer. I don't care what mess they generate.</p>",
        "id": 171849657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564241797
    },
    {
        "content": "<p>It's like Euclid the game -- you don't have to do it optimally.</p>",
        "id": 171849659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564241806
    },
    {
        "content": "<p>You should have seen my construction of the regular pentagon.</p>",
        "id": 171849660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564241820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> </p>\n<blockquote>\n<p>Maybe <code>\\f&lt; claim \\f&gt;</code> is what mathematicians would find most natural.</p>\n<p>We see CS beginners be really happy with term mode proving. (Tactics are hard and crazy and for complicated proofs.)</p>\n</blockquote>\n<p>fwiw, as a CS person, I tend to prefer this term-mode + <code>\\f&lt; claim \\f&gt;</code>/nameless binding style...<br>\nOccasionally i bind to named, when using let, or have with a very long type, when \\f&lt; style doesn't aid readability...</p>",
        "id": 172852206,
        "sender_full_name": "matt rice",
        "timestamp": 1565358223
    },
    {
        "content": "<p>What's really sad with term-mode proofs is that you can not \"replay\" them in the goal state window.</p>",
        "id": 172853214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565359023
    },
    {
        "content": "<p>This \"replaying\" is a killer feature of tactic proofs.</p>",
        "id": 172853232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565359043
    },
    {
        "content": "<p>I know you're about to race out the door Johan but how would you envisage this working?</p>",
        "id": 172853627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565359328
    },
    {
        "content": "<p>Clicking on a term in a term mode proof could do something -- but what do you want it to do?</p>",
        "id": 172853653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565359351
    },
    {
        "content": "<p>I don't know, but when working _on_ proofs, i tend to keep the goal state around by some silly tactic like <code>have 0 = 0, by refl</code> and by the time i'm done i hope to have the stack of goals readable from the proof itself ideally, agree though that workaround for replaying is kind of sad.</p>",
        "id": 172854237,
        "sender_full_name": "matt rice",
        "timestamp": 1565359813
    },
    {
        "content": "<p>ideally there'd be some sort of helper vscode action that automatically wraps a term in a hole or tactic and prints out the goal state</p>",
        "id": 172854309,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565359891
    },
    {
        "content": "<p>In Lean 2 you could point your mouse at an opening parenthesis, and it would show you the type of the term inside said parentheses. This was quite nice, you could see a little better what was going on. Sometimes you had to manually add extra parentheses in a term to see what was going on.<br>\nI'm not sure why this feature was removed from Lean 3.</p>",
        "id": 172859627,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565363875
    },
    {
        "content": "<p>It was a nice feature. I remember when Leo and Soonho got it to work. It required some real hacking: hovering over the parengot the server to introduce an <code>id</code> around the expression, re-elaborate the term, and then look at what was inferred for the metavariable that stood for the type argument to <code>id</code>. My guess is that at a later rewrite of the server, Leo lacked the time and energy to get it to work again.</p>",
        "id": 172883763,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1565380449
    }
]