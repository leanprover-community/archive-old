[
    {
        "content": "<p>Faced with <code>∀ n, 2 * nat.succ (n) = nat.succ (2 * n + 1)</code> I find that simp or ring don't seem to be able to do it. Even <code>intro n, simp [nat.succ_eq_add_one,mul_add,one_add_one_eq_two]</code> doesn't work. I can use simp and then ring!</p>",
        "id": 123969731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521562644
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  intro n,\n  suffices : 2 + 2 * n = 1 + (1 + 2 * n),\n    simp [nat.succ_eq_add_one,mul_add,this],\n  ring\n</pre></div>",
        "id": 123969887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521562854
    },
    {
        "content": "<p>meh</p>",
        "id": 123969888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521562857
    },
    {
        "content": "<p>Isn't there a lemma saying it suffices to prove this in Z, and then ring does it?</p>",
        "id": 123971217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521564737
    },
    {
        "content": "<p>Interesting! What would that lemma look like?</p>",
        "id": 123971737,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521565560
    },
    {
        "content": "<p>From a mathematician perspective, the lemma says the inclusion of N into Z is injective</p>",
        "id": 123971848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521565687
    },
    {
        "content": "<p>Insert words like coercion or cast</p>",
        "id": 123971851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521565698
    },
    {
        "content": "<p>and get the CS version</p>",
        "id": 123971854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521565704
    },
    {
        "content": "<p>I don't have a computer with Lean where I am right now</p>",
        "id": 123971878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521565757
    },
    {
        "content": "<p>Fortunately I think ring seems to work on nat, faced with ring operations like + or *</p>",
        "id": 123971881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521565765
    },
    {
        "content": "<p>ah! So the injectivity of <code>coe</code> plus the distributivity over +, * and succ would do it. That is really nice</p>",
        "id": 123971936,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521565805
    },
    {
        "content": "<p>One issue is that ring would rather see <code>n + 1</code> than <code>nat.succ n</code></p>",
        "id": 123971953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521565812
    },
    {
        "content": "<p>to coerce into Z you'll need <code>nat.cast_add</code>, <code>nat.cast_mul</code>, <code>nat.cast_one</code></p>",
        "id": 123971978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521565872
    },
    {
        "content": "<p>I would assume that <code>↑(succ n) = ↑n + 1</code> would be a simp rule so <code>succ</code> would disappear</p>",
        "id": 123971979,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521565878
    },
    {
        "content": "<p>Have you tried rfl? 2<em>succ n := 2</em>n + 2 := succ(2*n+1), maybe rw add_comm or mul_comm first?</p>",
        "id": 123972132,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1521566079
    },
    {
        "content": "<p>There should be a tactic doing that for any equality in nat which would immediately follow from ring in int</p>",
        "id": 123972404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521566425
    },
    {
        "content": "<p>without any preliminary rw</p>",
        "id": 123972415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521566441
    },
    {
        "content": "<p>I'm sure Simon is already writing it</p>",
        "id": 123972422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521566454
    },
    {
        "content": "<p>I sneezed so you wrote the above before I could get started</p>",
        "id": 123972435,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521566481
    },
    {
        "content": "<blockquote>\n<p>Have you tried rfl? 2<em>succ n := 2</em>n + 2 := succ(2*n+1), maybe rw add_comm or mul_comm first?</p>\n</blockquote>\n<p>Aah! I tried refl before intro n and it failed, but after intro n it succeeds.</p>",
        "id": 123972553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521566657
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 123972554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521566665
    },
    {
        "content": "<p>Chris, I'm doing the exercises here:</p>",
        "id": 123972561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521566700
    },
    {
        "content": "<p><a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/Basics.html\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/lf-current/Basics.html\">https://softwarefoundations.cis.upenn.edu/lf-current/Basics.html</a></p>",
        "id": 123972570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521566731
    },
    {
        "content": "<p>I did a bit of scripting and then tried to find what fails and I found that this works: </p>\n<div class=\"codehilite\"><pre><span></span>example (n : ℕ) : 2 * nat.succ (n) = nat.succ (2 * n + 1) :=\nbegin\n  ring,\nend\n</pre></div>\n\n\n<p>Why doesn't it work for you?</p>",
        "id": 123973436,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521567924
    },
    {
        "content": "<p>because I had \"forall n\" in front of it :-/</p>",
        "id": 123976260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521571890
    },
    {
        "content": "<p>Maybe <code>ring</code> should start with <code>intros</code></p>",
        "id": 123976344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521571963
    }
]